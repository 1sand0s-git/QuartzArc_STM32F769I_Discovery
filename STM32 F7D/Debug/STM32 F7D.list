
STM32 F7D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009308  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003768  08009508  08009508  00019508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc70  0800cc70  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc70  0800cc70  0001cc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc78  0800cc78  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc78  0800cc78  0001cc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc7c  0800cc7c  0001cc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800cc80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000078  0800ccf8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  0800ccf8  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002184f  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0003cd83  00000000  00000000  000418f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007d5e  00000000  00000000  0007e678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  000863d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001483b3  00000000  00000000  00087d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001798  00000000  00000000  001d0100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a698  00000000  00000000  001d1898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020bf30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007334  00000000  00000000  0020bf84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	080094f0 	.word	0x080094f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	080094f0 	.word	0x080094f0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000620 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000604:	4c0b      	ldr	r4, [pc, #44]	; (8000634 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000612:	f001 fbb1 	bl	8001d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000616:	f008 fa51 	bl	8008abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800061a:	f000 fdb1 	bl	8001180 <main>
  bx  lr    
 800061e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000620:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800062c:	0800cc80 	.word	0x0800cc80
  ldr r2, =_sbss
 8000630:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000634:	200003c0 	.word	0x200003c0

08000638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC_IRQHandler>
	...

0800063c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000640:	f3bf 8f4f 	dsb	sy
}
 8000644:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000646:	f3bf 8f6f 	isb	sy
}
 800064a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <SCB_EnableICache+0x48>)
 800064e:	2200      	movs	r2, #0
 8000650:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000654:	f3bf 8f4f 	dsb	sy
}
 8000658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800065a:	f3bf 8f6f 	isb	sy
}
 800065e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SCB_EnableICache+0x48>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SCB_EnableICache+0x48>)
 8000666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000690:	2200      	movs	r2, #0
 8000692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000696:	f3bf 8f4f 	dsb	sy
}
 800069a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <SCB_EnableDCache+0x9c>)
 800069e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	0b5b      	lsrs	r3, r3, #13
 80006a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	015a      	lsls	r2, r3, #5
 80006bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80006c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006c6:	4917      	ldr	r1, [pc, #92]	; (8000724 <SCB_EnableDCache+0x9c>)
 80006c8:	4313      	orrs	r3, r2
 80006ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	1e5a      	subs	r2, r3, #1
 80006d2:	60ba      	str	r2, [r7, #8]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d000      	beq.n	80006e4 <SCB_EnableDCache+0x5c>
      do {
 80006e2:	e7e9      	b.n	80006b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	60fa      	str	r2, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d000      	beq.n	80006fa <SCB_EnableDCache+0x72>
    do {
 80006f8:	e7d9      	b.n	80006ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80006fa:	f3bf 8f4f 	dsb	sy
}
 80006fe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800070a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800070c:	f3bf 8f4f 	dsb	sy
}
 8000710:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000712:	f3bf 8f6f 	isb	sy
}
 8000716:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks
//Also enables all GPIO ports, and both DMA1 and DMA2 peripherals
//
//Returns QA_OK if successful, or QA_Fail if initialization failed
QA_Result SystemInitialize(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b0c6      	sub	sp, #280	; 0x118
 800072c:	af00      	add	r7, sp, #0

  //------------------------------------
  //Enable CPU Instruction & Data Caches
  SCB_EnableICache();
 800072e:	f7ff ff85 	bl	800063c <SCB_EnableICache>
  SCB_EnableDCache();
 8000732:	f7ff ffa9 	bl	8000688 <SCB_EnableDCache>

	//----------------------
	//Enable ART Accelerator
  __HAL_FLASH_ART_ENABLE();
 8000736:	4b67      	ldr	r3, [pc, #412]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a66      	ldr	r2, [pc, #408]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 800073c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000740:	6013      	str	r3, [r2, #0]

  //---------------------
  //Enable Flash Prefetch
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000742:	4b64      	ldr	r3, [pc, #400]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a63      	ldr	r2, [pc, #396]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074c:	6013      	str	r3, [r2, #0]

  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074e:	2003      	movs	r0, #3
 8000750:	f001 fee4 	bl	800251c <HAL_NVIC_SetPriorityGrouping>

  //------------
  //Init SysTick
  HAL_InitTick(TICK_INT_PRIORITY);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fd79 	bl	800224c <HAL_InitTick>

  //------------------------------
  //Configure LSE Drive Capability
  HAL_PWR_EnableBkUpAccess();
 800075a:	f003 fa77 	bl	8003c4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800075e:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000762:	4a5d      	ldr	r2, [pc, #372]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000764:	f023 0318 	bic.w	r3, r3, #24
 8000768:	6713      	str	r3, [r2, #112]	; 0x70

  //------------------------------------------------
  //Configure Main Internal Regulator Output Voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b5b      	ldr	r3, [pc, #364]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a5a      	ldr	r2, [pc, #360]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b58      	ldr	r3, [pc, #352]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000782:	4b56      	ldr	r3, [pc, #344]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a55      	ldr	r2, [pc, #340]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	4b53      	ldr	r3, [pc, #332]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
 8000798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  //
  //Configure High Speed External (HSE) oscillator to be used for primary system clocks, and setup primary PLL to provide a 216MHz clock
  //Configure Low Speed External (LSE) oscillator to be used for clock source for Real Timer Clock (RTC) peripheral
  //NOTE: HSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 25MHz oscillator (labeled X2 on the PCB)
  //      LSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 32.768kHz oscillator (labeled X3 on the PCB)
  RCC_OscInitTypeDef RCC_OscInit = {0};
 800079a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800079e:	2234      	movs	r2, #52	; 0x34
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f008 f9e6 	bl	8008b74 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | //Define HSE (High Speed External) oscillator to be configured (used for main system clock)
 80007a8:	2305      	movs	r3, #5
 80007aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  		                         RCC_OSCILLATORTYPE_LSE;  //Define LSE (Low Speed External) oscillator to be configured (used for RTC - Real Time Clock)
  RCC_OscInit.HSEState       = RCC_HSE_ON;              //Enable HSE
 80007ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInit.LSEState       = RCC_LSE_ON;              //Enable LSE
 80007b6:	2301      	movs	r3, #1
 80007b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;              //Enable primary PLL
 80007bc:	2302      	movs	r3, #2
 80007be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;       //Set primary PLL source to HSE
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    //Set primary PLL values required for 216Mhz system clock
  RCC_OscInit.PLL.PLLM       = 25;
 80007ca:	2319      	movs	r3, #25
 80007cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInit.PLL.PLLN       = 432;
 80007d0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80007d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInit.PLL.PLLQ       = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {  //Initialize Oscillators using values in init structure
 80007e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fa8f 	bl	8003d0c <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <_Z16SystemInitializev+0xda>
  	return QA_Fail;
 80007fe:	2301      	movs	r3, #1
 8000800:	e123      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a34      	ldr	r2, [pc, #208]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
 8000818:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  //---------------------
  //Enable Overdrive Mode
  //
  //This is required to provide best system stability given that we are running at the maximum clock rate of 216MHz for the STM32F769I device
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800081a:	f003 fa27 	bl	8003c6c <HAL_PWREx_EnableOverDrive>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	bf14      	ite	ne
 8000824:	2301      	movne	r3, #1
 8000826:	2300      	moveq	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <_Z16SystemInitializev+0x10a>
  	return QA_Fail;
 800082e:	2301      	movs	r3, #1
 8000830:	e10b      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //---------------------------
  //Initialize CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000832:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |      //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 8000842:	230f      	movs	r3, #15
 8000844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  		                         RCC_CLOCKTYPE_SYSCLK |
                               RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;  //Define primary PLL clock as system clock source
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;          //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 216MHz
 800084e:	2300      	movs	r3, #0
 8000850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV4;            //Set clock divider for peripheral bus 1 (APB1), DIV4 provides an APB1 frequency of 54MHz
 8000854:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                                                         //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 108MHz

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;            //Set clock divider for peripheral bus 2 (APB2), DIV2 provides an APB2 frequency of 108MHz
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                                                         //NOTE: APB2 timer clocks are clock doubled, providing APB2 timers with 216MHz clocks

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_7) != HAL_OK) { //Initialize system clocks using required values, and setting Flash latency to 7 cycles
 8000864:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000868:	2107      	movs	r1, #7
 800086a:	4618      	mov	r0, r3
 800086c:	f003 fcfc 	bl	8004268 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf14      	ite	ne
 8000876:	2301      	movne	r3, #1
 8000878:	2300      	moveq	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <_Z16SystemInitializev+0x15c>
  	return QA_Fail;
 8000880:	2301      	movs	r3, #1
 8000882:	e0e2      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //----------------------------
  //Initialize Peripheral Clocks
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 8000884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000888:	2290      	movs	r2, #144	; 0x90
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f008 f971 	bl	8008b74 <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC |
 8000892:	2328      	movs	r3, #40	; 0x28
 8000894:	643b      	str	r3, [r7, #64]	; 0x40
  		                                     RCC_PERIPHCLK_LTDC;

    //Define settings for PLLSAI, as this PLL is also used as the clock source for the LTDC peripheral which we require to run the LCD screen
	RCC_PeriphClkInit.PLLSAI.PLLSAIN       = 384;
 8000896:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800089a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_PeriphClkInit.PLLSAI.PLLSAIP       = RCC_PLLSAIP_DIV8;
 800089c:	2303      	movs	r3, #3
 800089e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_PeriphClkInit.PLLSAI.PLLSAIR       = 7;
 80008a0:	2307      	movs	r3, #7
 80008a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_PeriphClkInit.PLLSAI.PLLSAIQ       = 8;
 80008a4:	2308      	movs	r3, #8
 80008a6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_PeriphClkInit.PLLSAIDivQ           = 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_PeriphClkInit.PLLSAIDivR           = RCC_PLLSAIDIVR_2;
 80008ac:	2300      	movs	r3, #0
 80008ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  RCC_PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE; //Set the LSE oscillator as the clock source for the Real Time Clock
 80008b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b4:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK) { //Initialize the peripheral clocks used the required values
 80008b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ba:	4618      	mov	r0, r3
 80008bc:	f003 feaa 	bl	8004614 <HAL_RCCEx_PeriphCLKConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bf14      	ite	ne
 80008c6:	2301      	movne	r3, #1
 80008c8:	2300      	moveq	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d007      	beq.n	80008e0 <_Z16SystemInitializev+0x1b8>
  	return QA_Fail;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e0ba      	b.n	8000a4a <_Z16SystemInitializev+0x322>
 80008d4:	40023c00 	.word	0x40023c00
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000
  }

  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b5c      	ldr	r3, [pc, #368]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a5b      	ldr	r2, [pc, #364]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
 80008ec:	4b59      	ldr	r3, [pc, #356]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
 80008f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b56      	ldr	r3, [pc, #344]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a55      	ldr	r2, [pc, #340]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b53      	ldr	r3, [pc, #332]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000910:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a4f      	ldr	r2, [pc, #316]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000928:	4b4a      	ldr	r3, [pc, #296]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a49      	ldr	r2, [pc, #292]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000940:	4b44      	ldr	r3, [pc, #272]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a43      	ldr	r2, [pc, #268]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000958:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a3d      	ldr	r2, [pc, #244]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
 800096e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
 800099c:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a27      	ldr	r2, [pc, #156]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	681b      	ldr	r3, [r3, #0]

  //-----------------
  //Enable DMA Clocks
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000a40:	463b      	mov	r3, r7
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	463b      	mov	r3, r7
 8000a46:	681b      	ldr	r3, [r3, #0]

  //Return
  return QA_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800

08000a58 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HardFault_Handler+0x1c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 fa16 	bl	8005ea2 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HardFault_Handler+0x20>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f005 fa11 	bl	8005ea2 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000a80:	e7fe      	b.n	8000a80 <HardFault_Handler+0x18>
 8000a82:	bf00      	nop
 8000a84:	20000148 	.word	0x20000148
 8000a88:	2000014c 	.word	0x2000014c

08000a8c <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MemManage_Handler+0x1c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f005 fa04 	bl	8005ea2 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <MemManage_Handler+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 f9ff 	bl	8005ea2 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x18>
 8000aa6:	bf00      	nop
 8000aa8:	20000148 	.word	0x20000148
 8000aac:	2000014c 	.word	0x2000014c

08000ab0 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <BusFault_Handler+0x1c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 f9f2 	bl	8005ea2 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <BusFault_Handler+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f005 f9ed 	bl	8005ea2 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000ac8:	e7fe      	b.n	8000ac8 <BusFault_Handler+0x18>
 8000aca:	bf00      	nop
 8000acc:	20000148 	.word	0x20000148
 8000ad0:	2000014c 	.word	0x2000014c

08000ad4 <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <UsageFault_Handler+0x1c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f005 f9e0 	bl	8005ea2 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <UsageFault_Handler+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f005 f9db 	bl	8005ea2 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x18>
 8000aee:	bf00      	nop
 8000af0:	20000148 	.word	0x20000148
 8000af4:	2000014c 	.word	0x2000014c

08000af8 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000b26:	f001 fbc1 	bl	80022ac <HAL_IncTick>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <USART1_IRQHandler>:
  //Interrupt Handler Functions


//USART1_IRQHandler
//Interrupt Handler Function
void USART1_IRQHandler(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL);
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <USART1_IRQHandler+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f007 fc7d 	bl	800843a <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000154 	.word	0x20000154

08000b48 <_ZN7QAD_FMCC1Ev>:

	//------------
	//Constructors

	//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_FMC() :
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	  m_eState(QA_NotInitialized) {}
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2202      	movs	r2, #2
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2204      	movs	r2, #4
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2208      	movs	r2, #8
 8000b72:	615a      	str	r2, [r3, #20]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2220      	movs	r2, #32
 8000b78:	619a      	str	r2, [r3, #24]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2230      	movs	r2, #48	; 0x30
 8000b7e:	61da      	str	r2, [r3, #28]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f240 6203 	movw	r2, #1539	; 0x603
 8000ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <_ZN7QAD_FMC3getEv>:

	//-----------------
	//Singleton Methods
  //
	//Used to retrieve a reference to the singleton class
  static QAD_FMC& get(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  	static QAD_FMC instance;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	f3bf 8f5b 	dmb	ish
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d010      	beq.n	8000bfe <_ZN7QAD_FMC3getEv+0x42>
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bde:	f007 ff14 	bl	8008a0a <__cxa_guard_acquire>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bf14      	ite	ne
 8000be8:	2301      	movne	r3, #1
 8000bea:	2300      	moveq	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d005      	beq.n	8000bfe <_ZN7QAD_FMC3getEv+0x42>
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <_ZN7QAD_FMC3getEv+0x4c>)
 8000bf4:	f7ff ffa8 	bl	8000b48 <_ZN7QAD_FMCC1Ev>
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bfa:	f007 ff12 	bl	8008a22 <__cxa_guard_release>
  	return instance;
 8000bfe:	4b02      	ldr	r3, [pc, #8]	; (8000c08 <_ZN7QAD_FMC3getEv+0x4c>)
  }
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000100 	.word	0x20000100
 8000c08:	20000094 	.word	0x20000094

08000c0c <_ZN7QAD_FMC4initEv>:

  //NOTE: No deinitialization method is supplied due to SDRAM being seen as a primary system component
  //in this codebase and is required for operation of systems such as LCD among others

  //Used to initialize the FMC peripheral and SDRAM module
  static QA_Result init(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000c10:	f7ff ffd4 	bl	8000bbc <_ZN7QAD_FMC3getEv>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f004 ffc0 	bl	8005b9c <_ZN7QAD_FMC8imp_initEv>
 8000c1c:	4603      	mov	r3, r0
  }
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_ZN7QAD_FMC4testEv>:
  //Memory Testing Methods

  //Used to perform a memory test of the SDRAM module
  //Performs a full read and write test of all 16 megabytes of the SDRAM
  //Returns QA_OK if memory test is successful, or QA_Fail if not successful
  static QA_Result test(void) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  	return get().imp_test();
 8000c26:	f7ff ffc9 	bl	8000bbc <_ZN7QAD_FMC3getEv>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f005 f8d1 	bl	8005dd4 <_ZN7QAD_FMC8imp_testEv>
 8000c32:	4603      	mov	r3, r0
  }
 8000c34:	4618      	mov	r0, r3
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_ZN7QAD_RNGC1Ev>:
	RNG_HandleTypeDef m_sHandle;


	//-----------
	//Constructor
	QAD_RNG() :
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_sHandle({0}) {}
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <_ZN7QAD_RNG3getEv>:
  QAD_RNG(const QAD_RNG& other) = delete;
  QAD_RNG& operator=(const QAD_RNG& other) = delete;

  //-----------------
  //Singleton Methods
  static QAD_RNG& get(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  	static QAD_RNG instance;
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	f3bf 8f5b 	dmb	ish
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf0c      	ite	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	2300      	movne	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d010      	beq.n	8000ca6 <_ZN7QAD_RNG3getEv+0x42>
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000c86:	f007 fec0 	bl	8008a0a <__cxa_guard_acquire>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bf14      	ite	ne
 8000c90:	2301      	movne	r3, #1
 8000c92:	2300      	moveq	r3, #0
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <_ZN7QAD_RNG3getEv+0x42>
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <_ZN7QAD_RNG3getEv+0x4c>)
 8000c9c:	f7ff ffcc 	bl	8000c38 <_ZN7QAD_RNGC1Ev>
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000ca2:	f007 febe 	bl	8008a22 <__cxa_guard_release>
  	return instance;
 8000ca6:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <_ZN7QAD_RNG3getEv+0x4c>)
  }
 8000ca8:	4618      	mov	r0, r3
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000118 	.word	0x20000118
 8000cb0:	20000104 	.word	0x20000104

08000cb4 <_ZN7QAD_RNG4initEv>:


  //----------------------
  //Initialization Methods
  static QA_Result init(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000cb8:	f7ff ffd4 	bl	8000c64 <_ZN7QAD_RNG3getEv>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f005 fdea 	bl	8006898 <_ZN7QAD_RNG8imp_initEv>
 8000cc4:	4603      	mov	r3, r0
  }
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_ZN7QAD_RNG8getValueEv>:
  //Data Methods
  static QA_InitState getInitState(void) {
  	return get().m_eInitState;
  }

  static uint32_t getValue(void) {
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
  	return get().imp_getValue();
 8000cce:	f7ff ffc9 	bl	8000c64 <_ZN7QAD_RNG3getEv>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f005 fe25 	bl	8006924 <_ZN7QAD_RNG12imp_getValueEv>
 8000cda:	4603      	mov	r3, r0
  }
 8000cdc:	4618      	mov	r0, r3
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 8000cec:	887a      	ldrh	r2, [r7, #2]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fc62 	bl	80015bc <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	887a      	ldrh	r2, [r7, #2]
 8000cfc:	809a      	strh	r2, [r3, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	80da      	strh	r2, [r3, #6]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	811a      	strh	r2, [r3, #8]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	4611      	mov	r1, r2
 8000d20:	461a      	mov	r2, r3
 8000d22:	4603      	mov	r3, r0
 8000d24:	817b      	strh	r3, [r7, #10]
 8000d26:	460b      	mov	r3, r1
 8000d28:	813b      	strh	r3, [r7, #8]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	3304      	adds	r3, #4
 8000d38:	f107 020a 	add.w	r2, r7, #10
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 fc58 	bl	80015f4 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3308      	adds	r3, #8
 8000d48:	f107 0208 	add.w	r2, r7, #8
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 fc50 	bl	80015f4 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2200      	movs	r2, #0
 8000d58:	731a      	strb	r2, [r3, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	735a      	strb	r2, [r3, #13]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2200      	movs	r2, #0
 8000d64:	739a      	strb	r2, [r3, #14]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	79fa      	ldrb	r2, [r7, #7]
 8000d6a:	73da      	strb	r2, [r3, #15]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	08009688 	.word	0x08009688

08000d7c <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	769a      	strb	r2, [r3, #26]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2225      	movs	r2, #37	; 0x25
 8000dd8:	76da      	strb	r2, [r3, #27]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	331c      	adds	r3, #28
 8000dde:	2284      	movs	r2, #132	; 0x84
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f007 fec6 	bl	8008b74 <memset>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	8b99      	ldrh	r1, [r3, #28]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	8bda      	ldrh	r2, [r3, #30]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f7ff ff7b 	bl	8000d14 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000e1e:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	741a      	strb	r2, [r3, #16]
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3314      	adds	r3, #20
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fbf8 	bl	800162a <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0800cc20 	.word	0x0800cc20

08000e48 <_ZN14QAT_Vector2_16C1Ett>:
	//Default constructor. Sets both X and Y components to zero
  QAT_Vector2_16() :
    val(0) {}

  //Constructor used to set individual X and Y components
  QAT_Vector2_16(uint16_t x, uint16_t y) :
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
 8000e54:	4613      	mov	r3, r2
 8000e56:	803b      	strh	r3, [r7, #0]
    x(x), y(y) {}
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	801a      	strh	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	883a      	ldrh	r2, [r7, #0]
 8000e62:	805a      	strh	r2, [r3, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <_ZN14QAT_Vector2_16C1ERKS_>:

  //Copy Constructor
  //Copies data as single 32bit value for performance reasons
  QAT_Vector2_16(const QAT_Vector2_16& other) :
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	6039      	str	r1, [r7, #0]
    val(other.val) {}
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 fbef 	bl	800167e <_ZNSaIP12QAS_LCD_FontED1Ev>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fbd2 	bl	800165e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ffeb 	bl	8000eaa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_ZN15QAS_LCD_FontMgrC1Ev>:

	//--------------------------
	//Constructors / Destructors

	//Default constructor, which clears all data to default on class construction
	QAS_LCD_FontMgr() :
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
		m_iCurrentIdx(-1),
		m_pCurrent(NULL),
		m_pBuffer(NULL),
		m_uColor(0x0000) {
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ffeb 	bl	8000ec4 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	22ff      	movs	r2, #255	; 0xff
 8000ef2:	731a      	strb	r2, [r3, #12]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	831a      	strh	r2, [r3, #24]
		m_vFonts.clear();
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fbf8 	bl	80016fe <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
	}
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_ZN15QAS_LCD_FontMgrD1Ev>:

	//Class destructor which iterates through all fonts stored in m_vFonts vector and
	//deletes/deallocates them to prevent memory leaks when class is destroyed
	~QAS_LCD_FontMgr() {
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	7bfc      	ldrb	r4, [r7, #15]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fbf6 	bl	800171a <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	429c      	cmp	r4, r3
 8000f32:	bf34      	ite	cc
 8000f34:	2301      	movcc	r3, #1
 8000f36:	2300      	movcs	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d011      	beq.n	8000f62 <_ZN15QAS_LCD_FontMgrD1Ev+0x4a>
			delete m_vFonts[i];
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fbf8 	bl	800173a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <_ZN15QAS_LCD_FontMgrD1Ev+0x42>
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	4618      	mov	r0, r3
 8000f56:	f007 fd56 	bl	8008a06 <_ZdlPvj>
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e7e0      	b.n	8000f24 <_ZN15QAS_LCD_FontMgrD1Ev+0xc>
	~QAS_LCD_FontMgr() {
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fbaf 	bl	80016c8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>
		}
	}
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd90      	pop	{r4, r7, pc}

08000f74 <_ZN7QAS_LCDC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAS_LCD() :
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_pDrawBuffer(NULL),
		m_uDrawColor(0x0000) {}
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	811a      	strh	r2, [r3, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	330c      	adds	r3, #12
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ffa3 	bl	8000ede <_ZN15QAS_LCD_FontMgrC1Ev>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_ZN7QAS_LCDD1Ev>:
class QAS_LCD {
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	330c      	adds	r3, #12
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ffb2 	bl	8000f18 <_ZN15QAS_LCD_FontMgrD1Ev>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <__tcf_0>:
  //-----------------
  //Singleton Methods
  //
  //Used to retrieve a reference to the singleton class
  static QAS_LCD& get() {
  	static QAS_LCD instance;
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4801      	ldr	r0, [pc, #4]	; (8000fcc <__tcf_0+0xc>)
 8000fc6:	f7ff ffec 	bl	8000fa2 <_ZN7QAS_LCDD1Ev>
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2000011c 	.word	0x2000011c

08000fd0 <_ZN7QAS_LCD3getEv>:
  static QAS_LCD& get() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  	static QAS_LCD instance;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <_ZN7QAS_LCD3getEv+0x50>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	f3bf 8f5b 	dmb	ish
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bf0c      	ite	eq
 8000fe6:	2301      	moveq	r3, #1
 8000fe8:	2300      	movne	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d013      	beq.n	8001018 <_ZN7QAS_LCD3getEv+0x48>
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <_ZN7QAS_LCD3getEv+0x50>)
 8000ff2:	f007 fd0a 	bl	8008a0a <__cxa_guard_acquire>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bf14      	ite	ne
 8000ffc:	2301      	movne	r3, #1
 8000ffe:	2300      	moveq	r3, #0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d008      	beq.n	8001018 <_ZN7QAS_LCD3getEv+0x48>
 8001006:	4807      	ldr	r0, [pc, #28]	; (8001024 <_ZN7QAS_LCD3getEv+0x54>)
 8001008:	f7ff ffb4 	bl	8000f74 <_ZN7QAS_LCDC1Ev>
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <_ZN7QAS_LCD3getEv+0x50>)
 800100e:	f007 fd08 	bl	8008a22 <__cxa_guard_release>
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <_ZN7QAS_LCD3getEv+0x58>)
 8001014:	f007 fd45 	bl	8008aa2 <atexit>
  	return instance;
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <_ZN7QAS_LCD3getEv+0x54>)
  }
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000144 	.word	0x20000144
 8001024:	2000011c 	.word	0x2000011c
 8001028:	08000fc1 	.word	0x08000fc1

0800102c <_ZN7QAS_LCD4initEv>:
	//----------------------
	//Initialization Methods

  //Used to initialize the LTDC peripheral and setup Font Manager class
  //Returns QA_OK if initialization successful, or QA_Fail if initialization fails
  static QA_Result init(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8001030:	f7ff ffce 	bl	8000fd0 <_ZN7QAS_LCD3getEv>
 8001034:	4603      	mov	r3, r0
 8001036:	4618      	mov	r0, r3
 8001038:	f006 f956 	bl	80072e8 <_ZN7QAS_LCD8imp_initEv>
 800103c:	4603      	mov	r3, r0
  }
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}

08001042 <_ZN7QAS_LCD10flipLayer0Ev>:
	//-----------------------
	//Rendering Setup Methods

  //Used to flip the front and back buffer for layer 0
  //See QAD_LTDC.hpp for more details
  static void flipLayer0(void) {
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0
  	get().imp_flipLayer0();
 8001046:	f7ff ffc3 	bl	8000fd0 <_ZN7QAS_LCD3getEv>
 800104a:	4603      	mov	r3, r0
 800104c:	4618      	mov	r0, r3
 800104e:	f006 f9b1 	bl	80073b4 <_ZN7QAS_LCD14imp_flipLayer0Ev>
  }
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}

08001056 <_ZN7QAS_LCD10flipLayer1Ev>:

  //Used to flip the front and back buffer for layer 1
  //See QAD_LTDC.hpp for more details
  static void flipLayer1(void) {
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
  	get().imp_flipLayer1();
 800105a:	f7ff ffb9 	bl	8000fd0 <_ZN7QAS_LCD3getEv>
 800105e:	4603      	mov	r3, r0
 8001060:	4618      	mov	r0, r3
 8001062:	f006 f9b1 	bl	80073c8 <_ZN7QAS_LCD14imp_flipLayer1Ev>
  }
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}

0800106a <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>:

  //Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
  //eLayer - Sets whether the current draw buffer is layer 0 or layer 1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
  static void setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
  	get().imp_setDrawBuffer(eLayer);
 8001074:	f7ff ffac 	bl	8000fd0 <_ZN7QAS_LCD3getEv>
 8001078:	4602      	mov	r2, r0
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4619      	mov	r1, r3
 800107e:	4610      	mov	r0, r2
 8001080:	f006 f9ac 	bl	80073dc <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>
  }
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_ZN7QAS_LCD12setDrawColorEt>:

  //Used to set the current draw color
  //uColor - A 16bit ARGB4444 color value
  static void setDrawColor(uint16_t uColor) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
  	get().imp_setDrawColor(uColor);
 8001096:	f7ff ff9b 	bl	8000fd0 <_ZN7QAS_LCD3getEv>
 800109a:	4602      	mov	r2, r0
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	4619      	mov	r1, r3
 80010a0:	4610      	mov	r0, r2
 80010a2:	f006 f9c0 	bl	8007426 <_ZN7QAS_LCD16imp_setDrawColorEt>
  }
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_ZN7QAS_LCD11clearBufferEv>:

	//-----------------
	//Rendering Methods

  //Used to clear the currently selected draw buffer to the currently selected draw color
  static void clearBuffer(void) {
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
  	get().imp_clearBuffer();
 80010b2:	f7ff ff8d 	bl	8000fd0 <_ZN7QAS_LCD3getEv>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f006 f9cb 	bl	8007454 <_ZN7QAS_LCD15imp_clearBufferEv>
  }
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>:
  }

  //Used to draw a non-filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
  static void drawRect(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  	get().imp_drawRect(cStart, cEnd);
 80010cc:	f7ff ff80 	bl	8000fd0 <_ZN7QAS_LCD3getEv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f006 f9dc 	bl	8007494 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>
  }
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>:

  //Used to draw a filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
  static void drawRectFill(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  	get().imp_drawRectFill(cStart, cEnd);
 80010ee:	f7ff ff6f 	bl	8000fd0 <_ZN7QAS_LCD3getEv>
 80010f2:	4603      	mov	r3, r0
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f006 fa59 	bl	80075b0 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>
  }
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_ZN7QAS_LCD13setFontByNameEPKc>:
	//Font Rendering Methods

  //Used to set the selected font/typeface to be used for text rendering
  //strName - A C-style string containing the name of the font to be selected. This must match one of the
  //          fonts stored in the font manager, otherwise no font will be selected
  static void setFontByName(const char* strName) {
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  	get().m_cFontMgr.setFontByName(strName);
 800110e:	f7ff ff5f 	bl	8000fd0 <_ZN7QAS_LCD3getEv>
 8001112:	4603      	mov	r3, r0
 8001114:	330c      	adds	r3, #12
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	f006 fb6b 	bl	80077f4 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>
  }
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_ZN7QAS_LCD14setFontByIndexEh>:

  //Used to set the selected font/typeface to be used for text rendering
  //uIdx - The index of the fond to be selected, based on the array of fonts stored in the font manager
  static void setFontByIndex(uint8_t uIdx) {
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  	get().m_cFontMgr.setFontByIndex(uIdx);
 8001130:	f7ff ff4e 	bl	8000fd0 <_ZN7QAS_LCD3getEv>
 8001134:	4603      	mov	r3, r0
 8001136:	330c      	adds	r3, #12
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f006 fb80 	bl	8007842 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>
  }
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>:

  //Used to draw a center-aligned string of characters using the currently selected font/typeface
  //String will be drawn to currently selected draw buffer with currently selected draw color
  //cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
  //str  - The C-style string to be drawn
  static void drawStrC(QAT_Vector2_16 cPos, const char* str) {
 800114a:	b590      	push	{r4, r7, lr}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
  	get().m_cFontMgr.drawStrC(cPos, str);
 8001154:	f7ff ff3c 	bl	8000fd0 <_ZN7QAS_LCD3getEv>
 8001158:	4603      	mov	r3, r0
 800115a:	f103 040c 	add.w	r4, r3, #12
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fe84 	bl	8000e72 <_ZN14QAT_Vector2_16C1ERKS_>
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	4620      	mov	r0, r4
 8001174:	f006 fc5f 	bl	8007a36 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>
  }
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}

08001180 <main>:
//main
//Application Entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f769nihx.s
int main(void) {
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b0d7      	sub	sp, #348	; 0x15c
 8001184:	af00      	add	r7, sp, #0
  //System Initialization

	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method
	if (SystemInitialize()) {
 8001186:	f7ff facf 	bl	8000728 <_Z16SystemInitializev>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	bf14      	ite	ne
 8001190:	2301      	movne	r3, #1
 8001192:	2300      	moveq	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d000      	beq.n	800119c <main+0x1c>
	  while (1) {}
 800119a:	e7fe      	b.n	800119a <main+0x1a>


	//----------------------------------
	//Initialize the User LEDs using the QAD_GPIO_Output driver class.
	//QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PORT, QAD_USER_LED_RED_GPIO_PIN and QAD_USERLED_GREEN_GPIO_PIN are defined in setup.hpp
  GPIO_UserLED_Red   = new QAD_GPIO_Output(QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_RED_GPIO_PIN);
 800119c:	2014      	movs	r0, #20
 800119e:	f007 fc43 	bl	8008a28 <_Znwj>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461c      	mov	r4, r3
 80011a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011aa:	49cf      	ldr	r1, [pc, #828]	; (80014e8 <main+0x368>)
 80011ac:	4620      	mov	r0, r4
 80011ae:	f004 fe57 	bl	8005e60 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 80011b2:	4bce      	ldr	r3, [pc, #824]	; (80014ec <main+0x36c>)
 80011b4:	601c      	str	r4, [r3, #0]
  GPIO_UserLED_Green = new QAD_GPIO_Output(QAD_USERLED_GREEN_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PIN);
 80011b6:	2014      	movs	r0, #20
 80011b8:	f007 fc36 	bl	8008a28 <_Znwj>
 80011bc:	4603      	mov	r3, r0
 80011be:	461c      	mov	r4, r3
 80011c0:	2220      	movs	r2, #32
 80011c2:	49c9      	ldr	r1, [pc, #804]	; (80014e8 <main+0x368>)
 80011c4:	4620      	mov	r0, r4
 80011c6:	f004 fe4b 	bl	8005e60 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 80011ca:	4bc9      	ldr	r3, [pc, #804]	; (80014f0 <main+0x370>)
 80011cc:	601c      	str	r4, [r3, #0]


	//----------------------------------
  //Initialize the User Button using the QAD_GPIO_Input driver class.
  //QAD_USERBUTTON_GPIO_PORT and QAD_USERBUTTON_GPIO_PIN are defined in setup.hpp
  GPIO_UserButton = new QAD_GPIO_Input(QAD_USERBUTTON_GPIO_PORT, QAD_USERBUTTON_GPIO_PIN);
 80011ce:	2010      	movs	r0, #16
 80011d0:	f007 fc2a 	bl	8008a28 <_Znwj>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461c      	mov	r4, r3
 80011d8:	2201      	movs	r2, #1
 80011da:	49c6      	ldr	r1, [pc, #792]	; (80014f4 <main+0x374>)
 80011dc:	4620      	mov	r0, r4
 80011de:	f004 fec5 	bl	8005f6c <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>
 80011e2:	4bc5      	ldr	r3, [pc, #788]	; (80014f8 <main+0x378>)
 80011e4:	601c      	str	r4, [r3, #0]
  //Initialize UART1, which is used to communicate over serial via the STLINK connection
  //Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

  //Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
  sSerialInit.sUART_Init.baudrate    = QAD_UART1_BAUDRATE;
 80011ec:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80011f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART1;
 80011f4:	2309      	movs	r3, #9
 80011f6:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
  sSerialInit.sUART_Init.txgpio      = QAD_UART1_TX_PORT;
 80011fa:	4bbe      	ldr	r3, [pc, #760]	; (80014f4 <main+0x374>)
 80011fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  sSerialInit.sUART_Init.txpin       = QAD_UART1_TX_PIN;
 8001200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001204:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  sSerialInit.sUART_Init.txaf        = QAD_UART1_TX_AF;
 8001208:	2307      	movs	r3, #7
 800120a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  sSerialInit.sUART_Init.rxgpio      = QAD_UART1_RX_PORT;
 800120e:	4bb9      	ldr	r3, [pc, #740]	; (80014f4 <main+0x374>)
 8001210:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  sSerialInit.sUART_Init.rxpin       = QAD_UART1_RX_PIN;
 8001214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001218:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
  sSerialInit.sUART_Init.rxaf        = QAD_UART1_RX_AF;
 800121c:	2307      	movs	r3, #7
 800121e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  sSerialInit.uTXFIFO_Size           = QAD_UART1_TX_FIFOSIZE;
 8001222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001226:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
  sSerialInit.uRXFIFO_Size           = QAD_UART1_RX_FIFOSIZE;
 800122a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122e:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 8001232:	2018      	movs	r0, #24
 8001234:	f007 fbf8 	bl	8008a28 <_Znwj>
 8001238:	4603      	mov	r3, r0
 800123a:	461c      	mov	r4, r3
 800123c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001240:	4619      	mov	r1, r3
 8001242:	4620      	mov	r0, r4
 8001244:	f7ff fdde 	bl	8000e04 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 8001248:	4bac      	ldr	r3, [pc, #688]	; (80014fc <main+0x37c>)
 800124a:	601c      	str	r4, [r3, #0]

  //If initialization failed the turn on User LED and enter infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 800124c:	4bab      	ldr	r3, [pc, #684]	; (80014fc <main+0x37c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f007 f8d1 	bl	80083fa <_ZN19QAS_Serial_Dev_Base4initEPv>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	bf0c      	ite	eq
 800125e:	2301      	moveq	r3, #1
 8001260:	2300      	movne	r3, #0
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <main+0xf4>
  	GPIO_UserLED_Red->on();
 8001268:	4ba0      	ldr	r3, [pc, #640]	; (80014ec <main+0x36c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f004 fe18 	bl	8005ea2 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8001272:	e7fe      	b.n	8001272 <main+0xf2>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8001274:	4ba1      	ldr	r3, [pc, #644]	; (80014fc <main+0x37c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f007 f94c 	bl	8008516 <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F769I Discovery Booting...");
 800127e:	4b9f      	ldr	r3, [pc, #636]	; (80014fc <main+0x37c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	499f      	ldr	r1, [pc, #636]	; (8001500 <main+0x380>)
 8001284:	4618      	mov	r0, r3
 8001286:	f007 f912 	bl	80084ae <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>



	//----------------------------------
  //Initialize FMC / SDRAM driver using the QAD_FMC singleton driver class
  if (QAD_FMC::init() == QA_OK) {
 800128a:	f7ff fcbf 	bl	8000c0c <_ZN7QAD_FMC4initEv>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d02c      	beq.n	80012f8 <main+0x178>

  	//If initialization passed then output message via serial
    UART_STLink->txStringCR("SDRAM: Initialized");
 800129e:	4b97      	ldr	r3, [pc, #604]	; (80014fc <main+0x37c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4998      	ldr	r1, [pc, #608]	; (8001504 <main+0x384>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f007 f902 	bl	80084ae <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

    //Test SDRAM to confirm correct operation
  	if (QAD_FMC::test() == QA_OK) {
 80012aa:	f7ff fcba 	bl	8000c22 <_ZN7QAD_FMC4testEv>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d010      	beq.n	80012e0 <main+0x160>

  		//If SDRAM test passed then output message via serial
  		UART_STLink->txStringCR("SDRAM: Test Passed");
 80012be:	4b8f      	ldr	r3, [pc, #572]	; (80014fc <main+0x37c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4991      	ldr	r1, [pc, #580]	; (8001508 <main+0x388>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f007 f8f2 	bl	80084ae <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


	//----------------------------------
  //Initialize LCD using QAS_LCD singleton class.
  //This will also initialize LTDC and DSI peripherals, and also initialize otm8009a display controller
  if (QAS_LCD::init()) {
 80012ca:	f7ff feaf 	bl	800102c <_ZN7QAS_LCD4initEv>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf14      	ite	ne
 80012d4:	2301      	movne	r3, #1
 80012d6:	2300      	moveq	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d01e      	beq.n	800131c <main+0x19c>
 80012de:	e017      	b.n	8001310 <main+0x190>
  		UART_STLink->txStringCR("SDRAM: Test Failed");
 80012e0:	4b86      	ldr	r3, [pc, #536]	; (80014fc <main+0x37c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4989      	ldr	r1, [pc, #548]	; (800150c <main+0x38c>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f007 f8e1 	bl	80084ae <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  		GPIO_UserLED_Red->on();
 80012ec:	4b7f      	ldr	r3, [pc, #508]	; (80014ec <main+0x36c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 fdd6 	bl	8005ea2 <_ZN15QAD_GPIO_Output2onEv>
  		while(1) {}
 80012f6:	e7fe      	b.n	80012f6 <main+0x176>
    UART_STLink->txStringCR("SDRAM: Initialization failed");
 80012f8:	4b80      	ldr	r3, [pc, #512]	; (80014fc <main+0x37c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4984      	ldr	r1, [pc, #528]	; (8001510 <main+0x390>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f007 f8d5 	bl	80084ae <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
    GPIO_UserLED_Red->on();
 8001304:	4b79      	ldr	r3, [pc, #484]	; (80014ec <main+0x36c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f004 fdca 	bl	8005ea2 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 800130e:	e7fe      	b.n	800130e <main+0x18e>
  	UART_STLink->txStringCR("LCD: Initialization failed");
 8001310:	4b7a      	ldr	r3, [pc, #488]	; (80014fc <main+0x37c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	497f      	ldr	r1, [pc, #508]	; (8001514 <main+0x394>)
 8001316:	4618      	mov	r0, r3
 8001318:	f007 f8c9 	bl	80084ae <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  }
  UART_STLink->txStringCR("LCD: Initialized");
 800131c:	4b77      	ldr	r3, [pc, #476]	; (80014fc <main+0x37c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	497d      	ldr	r1, [pc, #500]	; (8001518 <main+0x398>)
 8001322:	4618      	mov	r0, r3
 8001324:	f007 f8c3 	bl	80084ae <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //Test rendering methods to confirm LCD and rendering subsystem are working correctly

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer0);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fe9e 	bl	800106a <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0xFFFF);
 800132e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001332:	f7ff feab 	bl	800108c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 8001336:	f7ff feba 	bl	80010ae <_ZN7QAS_LCD11clearBufferEv>

  //Shapes
  QAS_LCD::setDrawColor(0xF003);
 800133a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800133e:	f7ff fea5 	bl	800108c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRectFill(QAT_Vector2_16(40, 40), QAT_Vector2_16(760, 440));
 8001342:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001346:	2228      	movs	r2, #40	; 0x28
 8001348:	2128      	movs	r1, #40	; 0x28
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fd7c 	bl	8000e48 <_ZN14QAT_Vector2_16C1Ett>
 8001350:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001354:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001358:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fd73 	bl	8000e48 <_ZN14QAT_Vector2_16C1Ett>
 8001362:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001366:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff feb9 	bl	80010e4 <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawColor(0xFFFF);
 8001372:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001376:	f7ff fe89 	bl	800108c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRect(QAT_Vector2_16(50, 50), QAT_Vector2_16(750, 430));
 800137a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800137e:	2232      	movs	r2, #50	; 0x32
 8001380:	2132      	movs	r1, #50	; 0x32
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fd60 	bl	8000e48 <_ZN14QAT_Vector2_16C1Ett>
 8001388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800138c:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8001390:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fd57 	bl	8000e48 <_ZN14QAT_Vector2_16C1Ett>
 800139a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800139e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe8c 	bl	80010c2 <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer1);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff fe5d 	bl	800106a <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0x0000);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fe6b 	bl	800108c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 80013b6:	f7ff fe7a 	bl	80010ae <_ZN7QAS_LCD11clearBufferEv>

  QAS_LCD::setDrawColor(0xFBFB);
 80013ba:	f64f 30fb 	movw	r0, #64507	; 0xfbfb
 80013be:	f7ff fe65 	bl	800108c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::setFontByName("SegoeUI12pt");
 80013c2:	4856      	ldr	r0, [pc, #344]	; (800151c <main+0x39c>)
 80013c4:	f7ff fe9f 	bl	8001106 <_ZN7QAS_LCD13setFontByNameEPKc>
  //QAS_LCD::setFontByIndex(0);
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 150), "Hello World!");
 80013c8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80013cc:	2296      	movs	r2, #150	; 0x96
 80013ce:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fd38 	bl	8000e48 <_ZN14QAT_Vector2_16C1Ett>
 80013d8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80013dc:	4950      	ldr	r1, [pc, #320]	; (8001520 <main+0x3a0>)
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff feb3 	bl	800114a <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::setDrawColor(0xFBBF);
 80013e4:	f64f 30bf 	movw	r0, #64447	; 0xfbbf
 80013e8:	f7ff fe50 	bl	800108c <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("SegoeUI20ptSB");
  QAS_LCD::setFontByIndex(1);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff fe9a 	bl	8001126 <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 250), "Welcome to 1s and 0s");
 80013f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013f6:	22fa      	movs	r2, #250	; 0xfa
 80013f8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fd23 	bl	8000e48 <_ZN14QAT_Vector2_16C1Ett>
 8001402:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001406:	4947      	ldr	r1, [pc, #284]	; (8001524 <main+0x3a4>)
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fe9e 	bl	800114a <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::setDrawColor(0xFFBB);
 800140e:	f64f 70bb 	movw	r0, #65467	; 0xffbb
 8001412:	f7ff fe3b 	bl	800108c <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("ShowcardGothic18pt");
  QAS_LCD::setFontByIndex(2);
 8001416:	2002      	movs	r0, #2
 8001418:	f7ff fe85 	bl	8001126 <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 350), "Test Font");
 800141c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001420:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001424:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fd0d 	bl	8000e48 <_ZN14QAT_Vector2_16C1Ett>
 800142e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001432:	493d      	ldr	r1, [pc, #244]	; (8001528 <main+0x3a8>)
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fe88 	bl	800114a <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::flipLayer0();
 800143a:	f7ff fe02 	bl	8001042 <_ZN7QAS_LCD10flipLayer0Ev>
  QAS_LCD::flipLayer1();
 800143e:	f7ff fe0a 	bl	8001056 <_ZN7QAS_LCD10flipLayer1Ev>


  //---------------
  //Init RNG Driver
  if (QAD_RNG::init()) {
 8001442:	f7ff fc37 	bl	8000cb4 <_ZN7QAD_RNG4initEv>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf14      	ite	ne
 800144c:	2301      	movne	r3, #1
 800144e:	2300      	moveq	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00b      	beq.n	800146e <main+0x2ee>
  	UART_STLink->txStringCR("RNG: Initialization Failed");
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <main+0x37c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4934      	ldr	r1, [pc, #208]	; (800152c <main+0x3ac>)
 800145c:	4618      	mov	r0, r3
 800145e:	f007 f826 	bl	80084ae <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <main+0x36c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fd1b 	bl	8005ea2 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 800146c:	e7fe      	b.n	800146c <main+0x2ec>
  }
  UART_STLink->txString("RNG: Initialized");
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <main+0x37c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	492f      	ldr	r1, [pc, #188]	; (8001530 <main+0x3b0>)
 8001474:	4618      	mov	r0, r3
 8001476:	f006 fff0 	bl	800845a <_ZN19QAS_Serial_Dev_Base8txStringEPKc>
  //Processing Loop

  //Create processing loop timing variables
  uint32_t uTicks;
  uint32_t uCurTick;
  uint32_t uNewTick = HAL_GetTick();
 800147a:	f000 ff2b 	bl	80022d4 <HAL_GetTick>
 800147e:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
  uint32_t uOldTick = uNewTick;
 8001482:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001486:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

  //Create task timing variables
  uint32_t uRNGUpdateTicks = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  uint32_t uHeartbeatTicks = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

  	//----------------------------------
  	//Frame Timing
  	//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
  	//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 8001496:	f000 ff1d 	bl	80022d4 <HAL_GetTick>
 800149a:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 800149e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80014a2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d044      	beq.n	8001534 <main+0x3b4>
    	uOldTick = uNewTick;
 80014aa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014ae:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    	uNewTick = uCurTick;
 80014b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80014b6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 80014ba:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80014be:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d208      	bcs.n	80014d8 <main+0x358>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 80014c6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80014ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	3b01      	subs	r3, #1
 80014d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014d6:	e030      	b.n	800153a <main+0x3ba>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 80014d8:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80014dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014e6:	e028      	b.n	800153a <main+0x3ba>
 80014e8:	40022400 	.word	0x40022400
 80014ec:	20000148 	.word	0x20000148
 80014f0:	2000014c 	.word	0x2000014c
 80014f4:	40020000 	.word	0x40020000
 80014f8:	20000150 	.word	0x20000150
 80014fc:	20000154 	.word	0x20000154
 8001500:	08009508 	.word	0x08009508
 8001504:	08009528 	.word	0x08009528
 8001508:	0800953c 	.word	0x0800953c
 800150c:	08009550 	.word	0x08009550
 8001510:	08009564 	.word	0x08009564
 8001514:	08009584 	.word	0x08009584
 8001518:	080095a0 	.word	0x080095a0
 800151c:	080095b4 	.word	0x080095b4
 8001520:	080095c0 	.word	0x080095c0
 8001524:	080095d0 	.word	0x080095d0
 8001528:	080095e8 	.word	0x080095e8
 800152c:	080095f4 	.word	0x080095f4
 8001530:	08009610 	.word	0x08009610
    	}

    } else {
    	uTicks = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    }


    //Update and output Random Number
    uRNGUpdateTicks += uTicks;
 800153a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800153e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001542:	4413      	add	r3, r2
 8001544:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    if (uRNGUpdateTicks >= QA_FT_RNGUpdateTickThreshold) {
 8001548:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800154c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001550:	d315      	bcc.n	800157e <main+0x3fe>

    	sprintf(strOut, "RNG Value: %lu", QAD_RNG::getValue());
 8001552:	f7ff fbba 	bl	8000cca <_ZN7QAD_RNG8getValueEv>
 8001556:	4602      	mov	r2, r0
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4915      	ldr	r1, [pc, #84]	; (80015b0 <main+0x430>)
 800155c:	4618      	mov	r0, r3
 800155e:	f007 fc0f 	bl	8008d80 <siprintf>
    	UART_STLink->txStringCR(strOut);
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <main+0x434>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4619      	mov	r1, r3
 800156c:	4610      	mov	r0, r2
 800156e:	f006 ff9e 	bl	80084ae <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

    	uRNGUpdateTicks -= QA_FT_RNGUpdateTickThreshold;
 8001572:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001576:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800157a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the green User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //has become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 800157e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001582:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001586:	4413      	add	r3, r2
 8001588:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) {
 800158c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001590:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001594:	f4ff af7f 	bcc.w	8001496 <main+0x316>
    	GPIO_UserLED_Green->toggle();
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <main+0x438>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f004 fca6 	bl	8005eee <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;
 80015a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80015a6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80015aa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    uCurTick = HAL_GetTick();
 80015ae:	e772      	b.n	8001496 <main+0x316>
 80015b0:	08009624 	.word	0x08009624
 80015b4:	20000154 	.word	0x20000154
 80015b8:	2000014c 	.word	0x2000014c

080015bc <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 80015c6:	683c      	ldr	r4, [r7, #0]
 80015c8:	4620      	mov	r0, r4
 80015ca:	f007 fa3e 	bl	8008a4a <_Znaj>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4618      	mov	r0, r3
 80015d2:	4602      	mov	r2, r0
 80015d4:	1e63      	subs	r3, r4, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db04      	blt.n	80015e4 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 80015da:	2100      	movs	r1, #0
 80015dc:	7011      	strb	r1, [r2, #0]
 80015de:	3201      	adds	r2, #1
 80015e0:	3b01      	subs	r3, #1
 80015e2:	e7f8      	b.n	80015d6 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 80015e4:	4601      	mov	r1, r0
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f8b7 	bl	800175a <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd90      	pop	{r4, r7, pc}

080015f4 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80015f4:	b5b0      	push	{r4, r5, r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80015fe:	6838      	ldr	r0, [r7, #0]
 8001600:	f000 f8c7 	bl	8001792 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8001604:	4603      	mov	r3, r0
 8001606:	881c      	ldrh	r4, [r3, #0]
 8001608:	200c      	movs	r0, #12
 800160a:	f007 fa0d 	bl	8008a28 <_Znwj>
 800160e:	4603      	mov	r3, r0
 8001610:	461d      	mov	r5, r3
 8001612:	4621      	mov	r1, r4
 8001614:	4628      	mov	r0, r5
 8001616:	f7ff fb63 	bl	8000ce0 <_ZN14QAT_FIFOBufferC1Et>
 800161a:	4629      	mov	r1, r5
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f8c3 	bl	80017a8 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bdb0      	pop	{r4, r5, r7, pc}

0800162a <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800162a:	b5b0      	push	{r4, r5, r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001634:	6838      	ldr	r0, [r7, #0]
 8001636:	f000 f8d3 	bl	80017e0 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 800163a:	4605      	mov	r5, r0
 800163c:	20a4      	movs	r0, #164	; 0xa4
 800163e:	f007 f9f3 	bl	8008a28 <_Znwj>
 8001642:	4603      	mov	r3, r0
 8001644:	461c      	mov	r4, r3
 8001646:	4629      	mov	r1, r5
 8001648:	4620      	mov	r0, r4
 800164a:	f7ff fb97 	bl	8000d7c <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 800164e:	4621      	mov	r1, r4
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f8d0 	bl	80017f6 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bdb0      	pop	{r4, r5, r7, pc}

0800165e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f8e1 	bl	800182e <_ZNSaIP12QAS_LCD_FontEC1Ev>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f8e9 	bl	8001846 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_ZNSaIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f8f1 	bl	800186e <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80016ae:	461a      	mov	r2, r3
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f8e7 	bl	8001884 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      }
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fbea 	bl	8000e92 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681c      	ldr	r4, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f8e5 	bl	80018aa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 80016e0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80016e2:	461a      	mov	r2, r3
 80016e4:	4629      	mov	r1, r5
 80016e6:	4620      	mov	r0, r4
 80016e8:	f000 f8ea 	bl	80018c0 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ffd1 	bl	8001696 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bdb0      	pop	{r4, r5, r7, pc}

080016fe <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f8e5 	bl	80018dc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	109b      	asrs	r3, r3, #2
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
      }
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6839      	ldr	r1, [r7, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f8d8 	bl	800191e <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f8df 	bl	8001946 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001788:	4603      	mov	r3, r0
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f8d2 	bl	8001960 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f8d9 	bl	8001988 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6839      	ldr	r1, [r7, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f8cc 	bl	80019a2 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f8d3 	bl	80019ca <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001824:	4603      	mov	r3, r0
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_ZNSaIP12QAS_LCD_FontEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f8d4 	bl	80019e4 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
	{ }
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
	if (__p)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	68b9      	ldr	r1, [r7, #8]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f8ac 	bl	80019fa <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>
      }
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f8a2 	bl	8001a18 <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>
    }
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	109b      	asrs	r3, r3, #2
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00e      	beq.n	8001916 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ffd3 	bl	80018aa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8001904:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001906:	461a      	mov	r2, r3
 8001908:	4621      	mov	r1, r4
 800190a:	6838      	ldr	r0, [r7, #0]
 800190c:	f7ff ffd8 	bl	80018c0 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}

0800191e <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f881 	bl	8001a32 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff21 	bl	8001778 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8001936:	4602      	mov	r2, r0
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f87b 	bl	8001a4c <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001956:	4603      	mov	r3, r0
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f879 	bl	8001a64 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ff27 	bl	80017c6 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8001978:	4602      	mov	r2, r0
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f873 	bl	8001a7e <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001998:	4603      	mov	r3, r0
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f871 	bl	8001a96 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff2d 	bl	8001814 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 f86b 	bl	8001ab0 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80019da:	4603      	mov	r3, r0
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 f85c 	bl	8001ac8 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001a22:	6839      	ldr	r1, [r7, #0]
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f85c 	bl	8001ae2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>
    }
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f85b 	bl	8001af8 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f85f 	bl	8001b18 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f85f 	bl	8001b32 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f863 	bl	8001b52 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f863 	bl	8001b6c <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f867 	bl	8001b8c <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8001ad4:	68b8      	ldr	r0, [r7, #8]
 8001ad6:	f006 ff94 	bl	8008a02 <_ZdlPv>
      }
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f850 	bl	8001ba6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f858 	bl	8001bbe <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f859 	bl	8001bda <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f858 	bl	8001bf0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f860 	bl	8001c08 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f861 	bl	8001c24 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f860 	bl	8001c3a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 f868 	bl	8001c52 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f869 	bl	8001c6e <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f868 	bl	8001c84 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f84e 	bl	8001c9a <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f834 	bl	8001cb0 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
	return 1;
 8001cca:	2301      	movs	r3, #1
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <_kill>:

int _kill(int pid, int sig)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ce0:	f006 fee6 	bl	8008ab0 <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2216      	movs	r2, #22
 8001ce8:	601a      	str	r2, [r3, #0]
	return -1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_exit>:

void _exit (int status)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ffe7 	bl	8001cd6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d08:	e7fe      	b.n	8001d08 <_exit+0x12>
	...

08001d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <_sbrk+0x5c>)
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <_sbrk+0x60>)
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <_sbrk+0x64>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <_sbrk+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d3c:	f006 feb8 	bl	8008ab0 <__errno>
 8001d40:	4603      	mov	r3, r0
 8001d42:	220c      	movs	r2, #12
 8001d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e009      	b.n	8001d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <_sbrk+0x64>)
 8001d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20080000 	.word	0x20080000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	20000158 	.word	0x20000158
 8001d74:	200003c0 	.word	0x200003c0

08001d78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <SystemInit+0x20>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <SystemInit+0x20>)
 8001d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001da6:	49c1      	ldr	r1, [pc, #772]	; (80020ac <OTM8009A_Init+0x310>)
 8001da8:	2000      	movs	r0, #0
 8001daa:	f004 fd67 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001dae:	49c0      	ldr	r1, [pc, #768]	; (80020b0 <OTM8009A_Init+0x314>)
 8001db0:	2003      	movs	r0, #3
 8001db2:	f004 fd63 	bl	800687c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001db6:	49bf      	ldr	r1, [pc, #764]	; (80020b4 <OTM8009A_Init+0x318>)
 8001db8:	2000      	movs	r0, #0
 8001dba:	f004 fd5f 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001dbe:	49be      	ldr	r1, [pc, #760]	; (80020b8 <OTM8009A_Init+0x31c>)
 8001dc0:	2002      	movs	r0, #2
 8001dc2:	f004 fd5b 	bl	800687c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001dc6:	49bb      	ldr	r1, [pc, #748]	; (80020b4 <OTM8009A_Init+0x318>)
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f004 fd57 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001dce:	49bb      	ldr	r1, [pc, #748]	; (80020bc <OTM8009A_Init+0x320>)
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f004 fd53 	bl	800687c <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8001dd6:	200a      	movs	r0, #10
 8001dd8:	f000 fa88 	bl	80022ec <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001ddc:	49b8      	ldr	r1, [pc, #736]	; (80020c0 <OTM8009A_Init+0x324>)
 8001dde:	2000      	movs	r0, #0
 8001de0:	f004 fd4c 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001de4:	49b7      	ldr	r1, [pc, #732]	; (80020c4 <OTM8009A_Init+0x328>)
 8001de6:	2000      	movs	r0, #0
 8001de8:	f004 fd48 	bl	800687c <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8001dec:	200a      	movs	r0, #10
 8001dee:	f000 fa7d 	bl	80022ec <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8001df2:	49b5      	ldr	r1, [pc, #724]	; (80020c8 <OTM8009A_Init+0x32c>)
 8001df4:	2000      	movs	r0, #0
 8001df6:	f004 fd41 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001dfa:	49b4      	ldr	r1, [pc, #720]	; (80020cc <OTM8009A_Init+0x330>)
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f004 fd3d 	bl	800687c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8001e02:	49b3      	ldr	r1, [pc, #716]	; (80020d0 <OTM8009A_Init+0x334>)
 8001e04:	2000      	movs	r0, #0
 8001e06:	f004 fd39 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001e0a:	49b2      	ldr	r1, [pc, #712]	; (80020d4 <OTM8009A_Init+0x338>)
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f004 fd35 	bl	800687c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8001e12:	49b1      	ldr	r1, [pc, #708]	; (80020d8 <OTM8009A_Init+0x33c>)
 8001e14:	2000      	movs	r0, #0
 8001e16:	f004 fd31 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001e1a:	49b0      	ldr	r1, [pc, #704]	; (80020dc <OTM8009A_Init+0x340>)
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f004 fd2d 	bl	800687c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001e22:	49a2      	ldr	r1, [pc, #648]	; (80020ac <OTM8009A_Init+0x310>)
 8001e24:	2000      	movs	r0, #0
 8001e26:	f004 fd29 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8001e2a:	49ad      	ldr	r1, [pc, #692]	; (80020e0 <OTM8009A_Init+0x344>)
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f004 fd25 	bl	800687c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001e32:	49ac      	ldr	r1, [pc, #688]	; (80020e4 <OTM8009A_Init+0x348>)
 8001e34:	2000      	movs	r0, #0
 8001e36:	f004 fd21 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8001e3a:	49ab      	ldr	r1, [pc, #684]	; (80020e8 <OTM8009A_Init+0x34c>)
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f004 fd1d 	bl	800687c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001e42:	49aa      	ldr	r1, [pc, #680]	; (80020ec <OTM8009A_Init+0x350>)
 8001e44:	2000      	movs	r0, #0
 8001e46:	f004 fd19 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8001e4a:	49a9      	ldr	r1, [pc, #676]	; (80020f0 <OTM8009A_Init+0x354>)
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f004 fd15 	bl	800687c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001e52:	49a8      	ldr	r1, [pc, #672]	; (80020f4 <OTM8009A_Init+0x358>)
 8001e54:	2000      	movs	r0, #0
 8001e56:	f004 fd11 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8001e5a:	49a7      	ldr	r1, [pc, #668]	; (80020f8 <OTM8009A_Init+0x35c>)
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f004 fd0d 	bl	800687c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001e62:	49a6      	ldr	r1, [pc, #664]	; (80020fc <OTM8009A_Init+0x360>)
 8001e64:	2000      	movs	r0, #0
 8001e66:	f004 fd09 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001e6a:	499a      	ldr	r1, [pc, #616]	; (80020d4 <OTM8009A_Init+0x338>)
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f004 fd05 	bl	800687c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001e72:	498e      	ldr	r1, [pc, #568]	; (80020ac <OTM8009A_Init+0x310>)
 8001e74:	2000      	movs	r0, #0
 8001e76:	f004 fd01 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8001e7a:	49a1      	ldr	r1, [pc, #644]	; (8002100 <OTM8009A_Init+0x364>)
 8001e7c:	2002      	movs	r0, #2
 8001e7e:	f004 fcfd 	bl	800687c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001e82:	49a0      	ldr	r1, [pc, #640]	; (8002104 <OTM8009A_Init+0x368>)
 8001e84:	2000      	movs	r0, #0
 8001e86:	f004 fcf9 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8001e8a:	499f      	ldr	r1, [pc, #636]	; (8002108 <OTM8009A_Init+0x36c>)
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f004 fcf5 	bl	800687c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001e92:	499e      	ldr	r1, [pc, #632]	; (800210c <OTM8009A_Init+0x370>)
 8001e94:	2000      	movs	r0, #0
 8001e96:	f004 fcf1 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001e9a:	499d      	ldr	r1, [pc, #628]	; (8002110 <OTM8009A_Init+0x374>)
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f004 fced 	bl	800687c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001ea2:	499c      	ldr	r1, [pc, #624]	; (8002114 <OTM8009A_Init+0x378>)
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f004 fce9 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001eaa:	499b      	ldr	r1, [pc, #620]	; (8002118 <OTM8009A_Init+0x37c>)
 8001eac:	2000      	movs	r0, #0
 8001eae:	f004 fce5 	bl	800687c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001eb2:	498c      	ldr	r1, [pc, #560]	; (80020e4 <OTM8009A_Init+0x348>)
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f004 fce1 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001eba:	4998      	ldr	r1, [pc, #608]	; (800211c <OTM8009A_Init+0x380>)
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f004 fcdd 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001ec2:	498a      	ldr	r1, [pc, #552]	; (80020ec <OTM8009A_Init+0x350>)
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f004 fcd9 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001eca:	4995      	ldr	r1, [pc, #596]	; (8002120 <OTM8009A_Init+0x384>)
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f004 fcd5 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8001ed2:	4994      	ldr	r1, [pc, #592]	; (8002124 <OTM8009A_Init+0x388>)
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f004 fcd1 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001eda:	4993      	ldr	r1, [pc, #588]	; (8002128 <OTM8009A_Init+0x38c>)
 8001edc:	2002      	movs	r0, #2
 8001ede:	f004 fccd 	bl	800687c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001ee2:	4974      	ldr	r1, [pc, #464]	; (80020b4 <OTM8009A_Init+0x318>)
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f004 fcc9 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001eea:	4990      	ldr	r1, [pc, #576]	; (800212c <OTM8009A_Init+0x390>)
 8001eec:	2006      	movs	r0, #6
 8001eee:	f004 fcc5 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001ef2:	498f      	ldr	r1, [pc, #572]	; (8002130 <OTM8009A_Init+0x394>)
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f004 fcc1 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001efa:	498e      	ldr	r1, [pc, #568]	; (8002134 <OTM8009A_Init+0x398>)
 8001efc:	200e      	movs	r0, #14
 8001efe:	f004 fcbd 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001f02:	498d      	ldr	r1, [pc, #564]	; (8002138 <OTM8009A_Init+0x39c>)
 8001f04:	2000      	movs	r0, #0
 8001f06:	f004 fcb9 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001f0a:	498c      	ldr	r1, [pc, #560]	; (800213c <OTM8009A_Init+0x3a0>)
 8001f0c:	200e      	movs	r0, #14
 8001f0e:	f004 fcb5 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001f12:	498b      	ldr	r1, [pc, #556]	; (8002140 <OTM8009A_Init+0x3a4>)
 8001f14:	2000      	movs	r0, #0
 8001f16:	f004 fcb1 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001f1a:	498a      	ldr	r1, [pc, #552]	; (8002144 <OTM8009A_Init+0x3a8>)
 8001f1c:	200a      	movs	r0, #10
 8001f1e:	f004 fcad 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001f22:	4989      	ldr	r1, [pc, #548]	; (8002148 <OTM8009A_Init+0x3ac>)
 8001f24:	2000      	movs	r0, #0
 8001f26:	f004 fca9 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001f2a:	4988      	ldr	r1, [pc, #544]	; (800214c <OTM8009A_Init+0x3b0>)
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f004 fca5 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001f32:	4960      	ldr	r1, [pc, #384]	; (80020b4 <OTM8009A_Init+0x318>)
 8001f34:	2000      	movs	r0, #0
 8001f36:	f004 fca1 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8001f3a:	4985      	ldr	r1, [pc, #532]	; (8002150 <OTM8009A_Init+0x3b4>)
 8001f3c:	200a      	movs	r0, #10
 8001f3e:	f004 fc9d 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001f42:	4984      	ldr	r1, [pc, #528]	; (8002154 <OTM8009A_Init+0x3b8>)
 8001f44:	2000      	movs	r0, #0
 8001f46:	f004 fc99 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8001f4a:	4983      	ldr	r1, [pc, #524]	; (8002158 <OTM8009A_Init+0x3bc>)
 8001f4c:	200f      	movs	r0, #15
 8001f4e:	f004 fc95 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001f52:	4977      	ldr	r1, [pc, #476]	; (8002130 <OTM8009A_Init+0x394>)
 8001f54:	2000      	movs	r0, #0
 8001f56:	f004 fc91 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8001f5a:	4980      	ldr	r1, [pc, #512]	; (800215c <OTM8009A_Init+0x3c0>)
 8001f5c:	200f      	movs	r0, #15
 8001f5e:	f004 fc8d 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001f62:	4975      	ldr	r1, [pc, #468]	; (8002138 <OTM8009A_Init+0x39c>)
 8001f64:	2000      	movs	r0, #0
 8001f66:	f004 fc89 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8001f6a:	497d      	ldr	r1, [pc, #500]	; (8002160 <OTM8009A_Init+0x3c4>)
 8001f6c:	200a      	movs	r0, #10
 8001f6e:	f004 fc85 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001f72:	4973      	ldr	r1, [pc, #460]	; (8002140 <OTM8009A_Init+0x3a4>)
 8001f74:	2000      	movs	r0, #0
 8001f76:	f004 fc81 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8001f7a:	497a      	ldr	r1, [pc, #488]	; (8002164 <OTM8009A_Init+0x3c8>)
 8001f7c:	200f      	movs	r0, #15
 8001f7e:	f004 fc7d 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001f82:	4971      	ldr	r1, [pc, #452]	; (8002148 <OTM8009A_Init+0x3ac>)
 8001f84:	2000      	movs	r0, #0
 8001f86:	f004 fc79 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8001f8a:	4977      	ldr	r1, [pc, #476]	; (8002168 <OTM8009A_Init+0x3cc>)
 8001f8c:	200f      	movs	r0, #15
 8001f8e:	f004 fc75 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8001f92:	4976      	ldr	r1, [pc, #472]	; (800216c <OTM8009A_Init+0x3d0>)
 8001f94:	2000      	movs	r0, #0
 8001f96:	f004 fc71 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001f9a:	4975      	ldr	r1, [pc, #468]	; (8002170 <OTM8009A_Init+0x3d4>)
 8001f9c:	200a      	movs	r0, #10
 8001f9e:	f004 fc6d 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8001fa2:	4974      	ldr	r1, [pc, #464]	; (8002174 <OTM8009A_Init+0x3d8>)
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f004 fc69 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001faa:	4973      	ldr	r1, [pc, #460]	; (8002178 <OTM8009A_Init+0x3dc>)
 8001fac:	200a      	movs	r0, #10
 8001fae:	f004 fc65 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001fb2:	4940      	ldr	r1, [pc, #256]	; (80020b4 <OTM8009A_Init+0x318>)
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f004 fc61 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001fba:	4970      	ldr	r1, [pc, #448]	; (800217c <OTM8009A_Init+0x3e0>)
 8001fbc:	200a      	movs	r0, #10
 8001fbe:	f004 fc5d 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001fc2:	4964      	ldr	r1, [pc, #400]	; (8002154 <OTM8009A_Init+0x3b8>)
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f004 fc59 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001fca:	496d      	ldr	r1, [pc, #436]	; (8002180 <OTM8009A_Init+0x3e4>)
 8001fcc:	200f      	movs	r0, #15
 8001fce:	f004 fc55 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001fd2:	4957      	ldr	r1, [pc, #348]	; (8002130 <OTM8009A_Init+0x394>)
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f004 fc51 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001fda:	496a      	ldr	r1, [pc, #424]	; (8002184 <OTM8009A_Init+0x3e8>)
 8001fdc:	200f      	movs	r0, #15
 8001fde:	f004 fc4d 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001fe2:	4955      	ldr	r1, [pc, #340]	; (8002138 <OTM8009A_Init+0x39c>)
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f004 fc49 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001fea:	4967      	ldr	r1, [pc, #412]	; (8002188 <OTM8009A_Init+0x3ec>)
 8001fec:	200a      	movs	r0, #10
 8001fee:	f004 fc45 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001ff2:	4953      	ldr	r1, [pc, #332]	; (8002140 <OTM8009A_Init+0x3a4>)
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f004 fc41 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001ffa:	4964      	ldr	r1, [pc, #400]	; (800218c <OTM8009A_Init+0x3f0>)
 8001ffc:	200f      	movs	r0, #15
 8001ffe:	f004 fc3d 	bl	800687c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002002:	4951      	ldr	r1, [pc, #324]	; (8002148 <OTM8009A_Init+0x3ac>)
 8002004:	2000      	movs	r0, #0
 8002006:	f004 fc39 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800200a:	4961      	ldr	r1, [pc, #388]	; (8002190 <OTM8009A_Init+0x3f4>)
 800200c:	200f      	movs	r0, #15
 800200e:	f004 fc35 	bl	800687c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002012:	4934      	ldr	r1, [pc, #208]	; (80020e4 <OTM8009A_Init+0x348>)
 8002014:	2000      	movs	r0, #0
 8002016:	f004 fc31 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800201a:	495e      	ldr	r1, [pc, #376]	; (8002194 <OTM8009A_Init+0x3f8>)
 800201c:	2000      	movs	r0, #0
 800201e:	f004 fc2d 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8002022:	495d      	ldr	r1, [pc, #372]	; (8002198 <OTM8009A_Init+0x3fc>)
 8002024:	2000      	movs	r0, #0
 8002026:	f004 fc29 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800202a:	495c      	ldr	r1, [pc, #368]	; (800219c <OTM8009A_Init+0x400>)
 800202c:	2000      	movs	r0, #0
 800202e:	f004 fc25 	bl	800687c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8002032:	495b      	ldr	r1, [pc, #364]	; (80021a0 <OTM8009A_Init+0x404>)
 8002034:	2000      	movs	r0, #0
 8002036:	f004 fc21 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 800203a:	495a      	ldr	r1, [pc, #360]	; (80021a4 <OTM8009A_Init+0x408>)
 800203c:	2000      	movs	r0, #0
 800203e:	f004 fc1d 	bl	800687c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002042:	491a      	ldr	r1, [pc, #104]	; (80020ac <OTM8009A_Init+0x310>)
 8002044:	2000      	movs	r0, #0
 8002046:	f004 fc19 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 800204a:	4957      	ldr	r1, [pc, #348]	; (80021a8 <OTM8009A_Init+0x40c>)
 800204c:	2003      	movs	r0, #3
 800204e:	f004 fc15 	bl	800687c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002052:	4916      	ldr	r1, [pc, #88]	; (80020ac <OTM8009A_Init+0x310>)
 8002054:	2000      	movs	r0, #0
 8002056:	f004 fc11 	bl	800687c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800205a:	4914      	ldr	r1, [pc, #80]	; (80020ac <OTM8009A_Init+0x310>)
 800205c:	2000      	movs	r0, #0
 800205e:	f004 fc0d 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8002062:	4952      	ldr	r1, [pc, #328]	; (80021ac <OTM8009A_Init+0x410>)
 8002064:	2010      	movs	r0, #16
 8002066:	f004 fc09 	bl	800687c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800206a:	4910      	ldr	r1, [pc, #64]	; (80020ac <OTM8009A_Init+0x310>)
 800206c:	2000      	movs	r0, #0
 800206e:	f004 fc05 	bl	800687c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8002072:	494f      	ldr	r1, [pc, #316]	; (80021b0 <OTM8009A_Init+0x414>)
 8002074:	2010      	movs	r0, #16
 8002076:	f004 fc01 	bl	800687c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 800207a:	494e      	ldr	r1, [pc, #312]	; (80021b4 <OTM8009A_Init+0x418>)
 800207c:	2000      	movs	r0, #0
 800207e:	f004 fbfd 	bl	800687c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  HAL_Delay(120);
 8002082:	2078      	movs	r0, #120	; 0x78
 8002084:	f000 f932 	bl	80022ec <HAL_Delay>

  switch(ColorCoding)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <OTM8009A_Init+0x304>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b02      	cmp	r3, #2
 8002092:	f040 8095 	bne.w	80021c0 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8002096:	4948      	ldr	r1, [pc, #288]	; (80021b8 <OTM8009A_Init+0x41c>)
 8002098:	2000      	movs	r0, #0
 800209a:	f004 fbef 	bl	800687c <DSI_IO_WriteCmd>
    break;
 800209e:	e090      	b.n	80021c2 <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80020a0:	4946      	ldr	r1, [pc, #280]	; (80021bc <OTM8009A_Init+0x420>)
 80020a2:	2000      	movs	r0, #0
 80020a4:	f004 fbea 	bl	800687c <DSI_IO_WriteCmd>
    break;
 80020a8:	e08b      	b.n	80021c2 <OTM8009A_Init+0x426>
 80020aa:	bf00      	nop
 80020ac:	08009804 	.word	0x08009804
 80020b0:	080096bc 	.word	0x080096bc
 80020b4:	08009808 	.word	0x08009808
 80020b8:	080096c0 	.word	0x080096c0
 80020bc:	0800980c 	.word	0x0800980c
 80020c0:	08009810 	.word	0x08009810
 80020c4:	08009814 	.word	0x08009814
 80020c8:	08009818 	.word	0x08009818
 80020cc:	0800981c 	.word	0x0800981c
 80020d0:	08009820 	.word	0x08009820
 80020d4:	08009824 	.word	0x08009824
 80020d8:	08009828 	.word	0x08009828
 80020dc:	0800982c 	.word	0x0800982c
 80020e0:	08009830 	.word	0x08009830
 80020e4:	08009834 	.word	0x08009834
 80020e8:	08009838 	.word	0x08009838
 80020ec:	0800983c 	.word	0x0800983c
 80020f0:	08009840 	.word	0x08009840
 80020f4:	08009844 	.word	0x08009844
 80020f8:	08009848 	.word	0x08009848
 80020fc:	0800984c 	.word	0x0800984c
 8002100:	080096ec 	.word	0x080096ec
 8002104:	08009850 	.word	0x08009850
 8002108:	08009854 	.word	0x08009854
 800210c:	08009858 	.word	0x08009858
 8002110:	0800985c 	.word	0x0800985c
 8002114:	08009860 	.word	0x08009860
 8002118:	08009864 	.word	0x08009864
 800211c:	08009868 	.word	0x08009868
 8002120:	0800986c 	.word	0x0800986c
 8002124:	08009870 	.word	0x08009870
 8002128:	080096f0 	.word	0x080096f0
 800212c:	080096f4 	.word	0x080096f4
 8002130:	08009874 	.word	0x08009874
 8002134:	080096fc 	.word	0x080096fc
 8002138:	08009878 	.word	0x08009878
 800213c:	0800970c 	.word	0x0800970c
 8002140:	0800987c 	.word	0x0800987c
 8002144:	0800971c 	.word	0x0800971c
 8002148:	08009880 	.word	0x08009880
 800214c:	080098b8 	.word	0x080098b8
 8002150:	08009728 	.word	0x08009728
 8002154:	08009884 	.word	0x08009884
 8002158:	08009734 	.word	0x08009734
 800215c:	08009744 	.word	0x08009744
 8002160:	08009754 	.word	0x08009754
 8002164:	08009760 	.word	0x08009760
 8002168:	08009770 	.word	0x08009770
 800216c:	08009888 	.word	0x08009888
 8002170:	08009780 	.word	0x08009780
 8002174:	0800988c 	.word	0x0800988c
 8002178:	0800978c 	.word	0x0800978c
 800217c:	08009798 	.word	0x08009798
 8002180:	080097a4 	.word	0x080097a4
 8002184:	080097b4 	.word	0x080097b4
 8002188:	080097c4 	.word	0x080097c4
 800218c:	080097d0 	.word	0x080097d0
 8002190:	080097e0 	.word	0x080097e0
 8002194:	080098bc 	.word	0x080098bc
 8002198:	080098c0 	.word	0x080098c0
 800219c:	080098c4 	.word	0x080098c4
 80021a0:	080098c8 	.word	0x080098c8
 80021a4:	080098cc 	.word	0x080098cc
 80021a8:	080097f0 	.word	0x080097f0
 80021ac:	080096c4 	.word	0x080096c4
 80021b0:	080096d8 	.word	0x080096d8
 80021b4:	08009890 	.word	0x08009890
 80021b8:	08009894 	.word	0x08009894
 80021bc:	08009898 	.word	0x08009898
  default :
    break;
 80021c0:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d10b      	bne.n	80021e0 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 80021c8:	4916      	ldr	r1, [pc, #88]	; (8002224 <OTM8009A_Init+0x488>)
 80021ca:	2000      	movs	r0, #0
 80021cc:	f004 fb56 	bl	800687c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 80021d0:	4915      	ldr	r1, [pc, #84]	; (8002228 <OTM8009A_Init+0x48c>)
 80021d2:	2004      	movs	r0, #4
 80021d4:	f004 fb52 	bl	800687c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 80021d8:	4914      	ldr	r1, [pc, #80]	; (800222c <OTM8009A_Init+0x490>)
 80021da:	2004      	movs	r0, #4
 80021dc:	f004 fb4e 	bl	800687c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 80021e0:	4913      	ldr	r1, [pc, #76]	; (8002230 <OTM8009A_Init+0x494>)
 80021e2:	2000      	movs	r0, #0
 80021e4:	f004 fb4a 	bl	800687c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 80021e8:	4912      	ldr	r1, [pc, #72]	; (8002234 <OTM8009A_Init+0x498>)
 80021ea:	2000      	movs	r0, #0
 80021ec:	f004 fb46 	bl	800687c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 80021f0:	4911      	ldr	r1, [pc, #68]	; (8002238 <OTM8009A_Init+0x49c>)
 80021f2:	2000      	movs	r0, #0
 80021f4:	f004 fb42 	bl	800687c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 80021f8:	4910      	ldr	r1, [pc, #64]	; (800223c <OTM8009A_Init+0x4a0>)
 80021fa:	2000      	movs	r0, #0
 80021fc:	f004 fb3e 	bl	800687c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002200:	490f      	ldr	r1, [pc, #60]	; (8002240 <OTM8009A_Init+0x4a4>)
 8002202:	2000      	movs	r0, #0
 8002204:	f004 fb3a 	bl	800687c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002208:	490e      	ldr	r1, [pc, #56]	; (8002244 <OTM8009A_Init+0x4a8>)
 800220a:	2000      	movs	r0, #0
 800220c:	f004 fb36 	bl	800687c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8002210:	490d      	ldr	r1, [pc, #52]	; (8002248 <OTM8009A_Init+0x4ac>)
 8002212:	2000      	movs	r0, #0
 8002214:	f004 fb32 	bl	800687c <DSI_IO_WriteCmd>

  return 0;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	0800989c 	.word	0x0800989c
 8002228:	080097f4 	.word	0x080097f4
 800222c:	080097fc 	.word	0x080097fc
 8002230:	080098a0 	.word	0x080098a0
 8002234:	080098a4 	.word	0x080098a4
 8002238:	080098a8 	.word	0x080098a8
 800223c:	080098ac 	.word	0x080098ac
 8002240:	080098b0 	.word	0x080098b0
 8002244:	08009804 	.word	0x08009804
 8002248:	080098b4 	.word	0x080098b4

0800224c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_InitTick+0x54>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_InitTick+0x58>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	4619      	mov	r1, r3
 800225e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002262:	fbb3 f3f1 	udiv	r3, r3, r1
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f999 	bl	80025a2 <HAL_SYSTICK_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e00e      	b.n	8002298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b0f      	cmp	r3, #15
 800227e:	d80a      	bhi.n	8002296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002280:	2200      	movs	r2, #0
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f000 f953 	bl	8002532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800228c:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <HAL_InitTick+0x5c>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e000      	b.n	8002298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20000008 	.word	0x20000008
 80022a8:	20000004 	.word	0x20000004

080022ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_IncTick+0x20>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_IncTick+0x24>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_IncTick+0x24>)
 80022be:	6013      	str	r3, [r2, #0]
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000008 	.word	0x20000008
 80022d0:	200003ac 	.word	0x200003ac

080022d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return uwTick;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_GetTick+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	200003ac 	.word	0x200003ac

080022ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff ffee 	bl	80022d4 <HAL_GetTick>
 80022f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d005      	beq.n	8002312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_Delay+0x44>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002312:	bf00      	nop
 8002314:	f7ff ffde 	bl	80022d4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	429a      	cmp	r2, r3
 8002322:	d8f7      	bhi.n	8002314 <HAL_Delay+0x28>
  {
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000008 	.word	0x20000008

08002334 <__NVIC_SetPriorityGrouping>:
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <__NVIC_SetPriorityGrouping+0x40>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	4313      	orrs	r3, r2
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	; (8002374 <__NVIC_SetPriorityGrouping+0x40>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00
 8002378:	05fa0000 	.word	0x05fa0000

0800237c <__NVIC_GetPriorityGrouping>:
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <__NVIC_GetPriorityGrouping+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 0307 	and.w	r3, r3, #7
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_EnableIRQ>:
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db0b      	blt.n	80023c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4907      	ldr	r1, [pc, #28]	; (80023d0 <__NVIC_EnableIRQ+0x38>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2001      	movs	r0, #1
 80023ba:	fa00 f202 	lsl.w	r2, r0, r2
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <__NVIC_DisableIRQ>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db12      	blt.n	800240c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	490a      	ldr	r1, [pc, #40]	; (8002418 <__NVIC_DisableIRQ+0x44>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	3320      	adds	r3, #32
 80023fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002400:	f3bf 8f4f 	dsb	sy
}
 8002404:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002406:	f3bf 8f6f 	isb	sy
}
 800240a:	bf00      	nop
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100

0800241c <__NVIC_SetPriority>:
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	2b00      	cmp	r3, #0
 800242e:	db0a      	blt.n	8002446 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	490c      	ldr	r1, [pc, #48]	; (8002468 <__NVIC_SetPriority+0x4c>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	440b      	add	r3, r1
 8002440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002444:	e00a      	b.n	800245c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4908      	ldr	r1, [pc, #32]	; (800246c <__NVIC_SetPriority+0x50>)
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	3b04      	subs	r3, #4
 8002454:	0112      	lsls	r2, r2, #4
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	440b      	add	r3, r1
 800245a:	761a      	strb	r2, [r3, #24]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <NVIC_EncodePriority>:
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f1c3 0307 	rsb	r3, r3, #7
 800248a:	2b04      	cmp	r3, #4
 800248c:	bf28      	it	cs
 800248e:	2304      	movcs	r3, #4
 8002490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3304      	adds	r3, #4
 8002496:	2b06      	cmp	r3, #6
 8002498:	d902      	bls.n	80024a0 <NVIC_EncodePriority+0x30>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3b03      	subs	r3, #3
 800249e:	e000      	b.n	80024a2 <NVIC_EncodePriority+0x32>
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	401a      	ands	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43d9      	mvns	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	4313      	orrs	r3, r2
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3724      	adds	r7, #36	; 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e8:	d301      	bcc.n	80024ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <SysTick_Config+0x40>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f6:	210f      	movs	r1, #15
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f7ff ff8e 	bl	800241c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <SysTick_Config+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <SysTick_Config+0x40>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff05 	bl	8002334 <__NVIC_SetPriorityGrouping>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002544:	f7ff ff1a 	bl	800237c <__NVIC_GetPriorityGrouping>
 8002548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f7ff ff8e 	bl	8002470 <NVIC_EncodePriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff5d 	bl	800241c <__NVIC_SetPriority>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff0d 	bl	8002398 <__NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff1d 	bl	80023d4 <__NVIC_DisableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ff94 	bl	80024d8 <SysTick_Config>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	019a      	lsls	r2, r3, #6
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	431a      	orrs	r2, r3
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	431a      	orrs	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80025fa:	f7ff fe6b 	bl	80022d4 <HAL_GetTick>
 80025fe:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002600:	e009      	b.n	8002616 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8002602:	f7ff fe67 	bl	80022d4 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002610:	d901      	bls.n	8002616 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e015      	b.n	8002642 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ee      	beq.n	8002602 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	019a      	lsls	r2, r3, #6
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	431a      	orrs	r2, r3
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	ea42 0103 	orr.w	r1, r2, r3
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	041a      	lsls	r2, r3, #16
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e106      	b.n	800286e <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7c5b      	ldrb	r3, [r3, #17]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f97c 	bl	8002968 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2203      	movs	r2, #3
 8002674:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800268a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800269e:	f7ff fe19 	bl	80022d4 <HAL_GetTick>
 80026a2:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80026a4:	e009      	b.n	80026ba <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80026a6:	f7ff fe15 	bl	80022d4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026b4:	d901      	bls.n	80026ba <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0d9      	b.n	800286e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0ed      	beq.n	80026a6 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b68      	ldr	r3, [pc, #416]	; (8002878 <HAL_DSI_Init+0x22c>)
 80026d8:	400b      	ands	r3, r1
 80026da:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	009a      	lsls	r2, r3, #2
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	02db      	lsls	r3, r3, #11
 80026f2:	431a      	orrs	r2, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800272e:	f7ff fdd1 	bl	80022d4 <HAL_GetTick>
 8002732:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002734:	e009      	b.n	800274a <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002736:	f7ff fdcd 	bl	80022d4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002744:	d901      	bls.n	800274a <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e091      	b.n	800286e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0ed      	beq.n	8002736 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0206 	orr.w	r2, r2, #6
 800276a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0203 	bic.w	r2, r2, #3
 800277e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0203 	bic.w	r2, r2, #3
 80027ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027d4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6899      	ldr	r1, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_DSI_Init+0x1aa>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	e000      	b.n	80027f8 <HAL_DSI_Init+0x1ac>
 80027f6:	2301      	movs	r3, #1
 80027f8:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4a1f      	ldr	r2, [pc, #124]	; (800287c <HAL_DSI_Init+0x230>)
 80027fe:	fb02 f203 	mul.w	r2, r2, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	409a      	lsls	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800282e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	430a      	orrs	r2, r1
 8002842:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2200      	movs	r2, #0
 800284c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2200      	movs	r2, #0
 8002856:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	fffc8603 	.word	0xfffc8603
 800287c:	003d0900 	.word	0x003d0900

08002880 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e066      	b.n	8002960 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2203      	movs	r2, #3
 8002896:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0208 	bic.w	r2, r2, #8
 80028ac:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0206 	bic.w	r2, r2, #6
 80028f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002932:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800293e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f818 	bl	800297c <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7c1b      	ldrb	r3, [r3, #16]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_DSI_ConfigVideoMode+0x16>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e1ee      	b.n	8002d84 <HAL_DSI_ConfigVideoMode+0x3f4>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0201 	bic.w	r2, r2, #1
 80029cc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0203 	bic.w	r2, r2, #3
 80029de:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b8b      	ldr	r3, [pc, #556]	; (8002c2c <HAL_DSI_ConfigVideoMode+0x29c>)
 80029fe:	400b      	ands	r3, r1
 8002a00:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b84      	ldr	r3, [pc, #528]	; (8002c30 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8002a20:	400b      	ands	r3, r1
 8002a22:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b7b      	ldr	r3, [pc, #492]	; (8002c30 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8002a42:	400b      	ands	r3, r1
 8002a44:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0203 	bic.w	r2, r2, #3
 8002a66:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68d9      	ldr	r1, [r3, #12]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0207 	bic.w	r2, r2, #7
 8002a88:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6959      	ldr	r1, [r3, #20]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 020f 	bic.w	r2, r2, #15
 8002ab6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6919      	ldr	r1, [r3, #16]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 020e 	bic.w	r2, r2, #14
 8002ada:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	005a      	lsls	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d110      	bne.n	8002b20 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b0c:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6919      	ldr	r1, [r3, #16]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	4b42      	ldr	r3, [pc, #264]	; (8002c34 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8002b2c:	400b      	ands	r3, r1
 8002b2e:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b39      	ldr	r3, [pc, #228]	; (8002c34 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8002b4e:	400b      	ands	r3, r1
 8002b50:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b32      	ldr	r3, [pc, #200]	; (8002c38 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8002b70:	400b      	ands	r3, r1
 8002b72:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002b92:	400b      	ands	r3, r1
 8002b94:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002bd6:	400b      	ands	r3, r1
 8002bd8:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_DSI_ConfigVideoMode+0x29c>)
 8002bf8:	400b      	ands	r3, r1
 8002bfa:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c28:	e00a      	b.n	8002c40 <HAL_DSI_ConfigVideoMode+0x2b0>
 8002c2a:	bf00      	nop
 8002c2c:	ffffc000 	.word	0xffffc000
 8002c30:	ffffe000 	.word	0xffffe000
 8002c34:	fffff000 	.word	0xfffff000
 8002c38:	ffff8000 	.word	0xffff8000
 8002c3c:	fffffc00 	.word	0xfffffc00
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002c56:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6999      	ldr	r1, [r3, #24]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c62:	041a      	lsls	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c7a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6999      	ldr	r1, [r3, #24]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c9c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d02:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d46:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7c1b      	ldrb	r3, [r3, #16]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_DSI_Start+0x14>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e02b      	b.n	8002dfc <HAL_DSI_Start+0x6c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0208 	orr.w	r2, r2, #8
 8002de0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7c1b      	ldrb	r3, [r3, #16]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_DSI_Stop+0x14>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e02b      	b.n	8002e74 <HAL_DSI_Stop+0x6c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0208 	bic.w	r2, r2, #8
 8002e58:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	7c1b      	ldrb	r3, [r3, #16]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_DSI_ShortWrite+0x1a>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e010      	b.n	8002ebc <HAL_DSI_ShortWrite+0x3c>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f7ff fb9e 	bl	80025ec <DSI_ShortWrite>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	741a      	strb	r2, [r3, #16]

  return status;
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08c      	sub	sp, #48	; 0x30
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8002ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed4:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	7c1b      	ldrb	r3, [r3, #16]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_DSI_LongWrite+0x1e>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e084      	b.n	8002fec <HAL_DSI_LongWrite+0x128>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee8:	f7ff f9f4 	bl	80022d4 <HAL_GetTick>
 8002eec:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002eee:	e00c      	b.n	8002f0a <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002ef0:	f7ff f9f0 	bl	80022d4 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002efe:	d904      	bls.n	8002f0a <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e070      	b.n	8002fec <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0eb      	beq.n	8002ef0 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	bf28      	it	cs
 8002f22:	2303      	movcs	r3, #3
 8002f24:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
 8002f2a:	e00f      	b.n	8002f4c <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	4413      	add	r3, r2
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	623b      	str	r3, [r7, #32]
 8002f4c:	6a3a      	ldr	r2, [r7, #32]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d3eb      	bcc.n	8002f2c <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8002f6c:	e028      	b.n	8002fc0 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	bf28      	it	cs
 8002f74:	2304      	movcs	r3, #4
 8002f76:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	e00e      	b.n	8002fa0 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	6a3a      	ldr	r2, [r7, #32]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3ec      	bcc.n	8002f82 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8002fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1d3      	bne.n	8002f6e <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002fce:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	f7ff faeb 	bl	80025ba <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3728      	adds	r7, #40	; 0x28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	e175      	b.n	8003300 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003014:	2201      	movs	r2, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	429a      	cmp	r2, r3
 800302e:	f040 8164 	bne.w	80032fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d00b      	beq.n	8003052 <HAL_GPIO_Init+0x5e>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d007      	beq.n	8003052 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003046:	2b11      	cmp	r3, #17
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b12      	cmp	r3, #18
 8003050:	d130      	bne.n	80030b4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	2203      	movs	r2, #3
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003088:	2201      	movs	r2, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 0201 	and.w	r2, r3, #1
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x100>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b12      	cmp	r3, #18
 80030f2:	d123      	bne.n	800313c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	08da      	lsrs	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3208      	adds	r2, #8
 80030fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	220f      	movs	r2, #15
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	08da      	lsrs	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3208      	adds	r2, #8
 8003136:	69b9      	ldr	r1, [r7, #24]
 8003138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0203 	and.w	r2, r3, #3
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80be 	beq.w	80032fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317e:	4b66      	ldr	r3, [pc, #408]	; (8003318 <HAL_GPIO_Init+0x324>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	4a65      	ldr	r2, [pc, #404]	; (8003318 <HAL_GPIO_Init+0x324>)
 8003184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003188:	6453      	str	r3, [r2, #68]	; 0x44
 800318a:	4b63      	ldr	r3, [pc, #396]	; (8003318 <HAL_GPIO_Init+0x324>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003196:	4a61      	ldr	r2, [pc, #388]	; (800331c <HAL_GPIO_Init+0x328>)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	220f      	movs	r2, #15
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a58      	ldr	r2, [pc, #352]	; (8003320 <HAL_GPIO_Init+0x32c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d037      	beq.n	8003232 <HAL_GPIO_Init+0x23e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a57      	ldr	r2, [pc, #348]	; (8003324 <HAL_GPIO_Init+0x330>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d031      	beq.n	800322e <HAL_GPIO_Init+0x23a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a56      	ldr	r2, [pc, #344]	; (8003328 <HAL_GPIO_Init+0x334>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02b      	beq.n	800322a <HAL_GPIO_Init+0x236>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a55      	ldr	r2, [pc, #340]	; (800332c <HAL_GPIO_Init+0x338>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d025      	beq.n	8003226 <HAL_GPIO_Init+0x232>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a54      	ldr	r2, [pc, #336]	; (8003330 <HAL_GPIO_Init+0x33c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01f      	beq.n	8003222 <HAL_GPIO_Init+0x22e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a53      	ldr	r2, [pc, #332]	; (8003334 <HAL_GPIO_Init+0x340>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d019      	beq.n	800321e <HAL_GPIO_Init+0x22a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_GPIO_Init+0x344>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_GPIO_Init+0x226>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a51      	ldr	r2, [pc, #324]	; (800333c <HAL_GPIO_Init+0x348>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00d      	beq.n	8003216 <HAL_GPIO_Init+0x222>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a50      	ldr	r2, [pc, #320]	; (8003340 <HAL_GPIO_Init+0x34c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d007      	beq.n	8003212 <HAL_GPIO_Init+0x21e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4f      	ldr	r2, [pc, #316]	; (8003344 <HAL_GPIO_Init+0x350>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_GPIO_Init+0x21a>
 800320a:	2309      	movs	r3, #9
 800320c:	e012      	b.n	8003234 <HAL_GPIO_Init+0x240>
 800320e:	230a      	movs	r3, #10
 8003210:	e010      	b.n	8003234 <HAL_GPIO_Init+0x240>
 8003212:	2308      	movs	r3, #8
 8003214:	e00e      	b.n	8003234 <HAL_GPIO_Init+0x240>
 8003216:	2307      	movs	r3, #7
 8003218:	e00c      	b.n	8003234 <HAL_GPIO_Init+0x240>
 800321a:	2306      	movs	r3, #6
 800321c:	e00a      	b.n	8003234 <HAL_GPIO_Init+0x240>
 800321e:	2305      	movs	r3, #5
 8003220:	e008      	b.n	8003234 <HAL_GPIO_Init+0x240>
 8003222:	2304      	movs	r3, #4
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x240>
 8003226:	2303      	movs	r3, #3
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x240>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x240>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x240>
 8003232:	2300      	movs	r3, #0
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	f002 0203 	and.w	r2, r2, #3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003244:	4935      	ldr	r1, [pc, #212]	; (800331c <HAL_GPIO_Init+0x328>)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003252:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <HAL_GPIO_Init+0x354>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003276:	4a34      	ldr	r2, [pc, #208]	; (8003348 <HAL_GPIO_Init+0x354>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800327c:	4b32      	ldr	r3, [pc, #200]	; (8003348 <HAL_GPIO_Init+0x354>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a0:	4a29      	ldr	r2, [pc, #164]	; (8003348 <HAL_GPIO_Init+0x354>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032a6:	4b28      	ldr	r3, [pc, #160]	; (8003348 <HAL_GPIO_Init+0x354>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ca:	4a1f      	ldr	r2, [pc, #124]	; (8003348 <HAL_GPIO_Init+0x354>)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_GPIO_Init+0x354>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032f4:	4a14      	ldr	r2, [pc, #80]	; (8003348 <HAL_GPIO_Init+0x354>)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3301      	adds	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	f67f ae86 	bls.w	8003014 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3724      	adds	r7, #36	; 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800
 800331c:	40013800 	.word	0x40013800
 8003320:	40020000 	.word	0x40020000
 8003324:	40020400 	.word	0x40020400
 8003328:	40020800 	.word	0x40020800
 800332c:	40020c00 	.word	0x40020c00
 8003330:	40021000 	.word	0x40021000
 8003334:	40021400 	.word	0x40021400
 8003338:	40021800 	.word	0x40021800
 800333c:	40021c00 	.word	0x40021c00
 8003340:	40022000 	.word	0x40022000
 8003344:	40022400 	.word	0x40022400
 8003348:	40013c00 	.word	0x40013c00

0800334c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e0d9      	b.n	800351c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003368:	2201      	movs	r2, #1
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	429a      	cmp	r2, r3
 8003380:	f040 80c9 	bne.w	8003516 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003384:	4a6b      	ldr	r2, [pc, #428]	; (8003534 <HAL_GPIO_DeInit+0x1e8>)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003390:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	220f      	movs	r2, #15
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	4013      	ands	r3, r2
 80033a4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a63      	ldr	r2, [pc, #396]	; (8003538 <HAL_GPIO_DeInit+0x1ec>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d037      	beq.n	800341e <HAL_GPIO_DeInit+0xd2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a62      	ldr	r2, [pc, #392]	; (800353c <HAL_GPIO_DeInit+0x1f0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d031      	beq.n	800341a <HAL_GPIO_DeInit+0xce>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a61      	ldr	r2, [pc, #388]	; (8003540 <HAL_GPIO_DeInit+0x1f4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d02b      	beq.n	8003416 <HAL_GPIO_DeInit+0xca>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a60      	ldr	r2, [pc, #384]	; (8003544 <HAL_GPIO_DeInit+0x1f8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d025      	beq.n	8003412 <HAL_GPIO_DeInit+0xc6>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a5f      	ldr	r2, [pc, #380]	; (8003548 <HAL_GPIO_DeInit+0x1fc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <HAL_GPIO_DeInit+0xc2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a5e      	ldr	r2, [pc, #376]	; (800354c <HAL_GPIO_DeInit+0x200>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d019      	beq.n	800340a <HAL_GPIO_DeInit+0xbe>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a5d      	ldr	r2, [pc, #372]	; (8003550 <HAL_GPIO_DeInit+0x204>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_DeInit+0xba>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a5c      	ldr	r2, [pc, #368]	; (8003554 <HAL_GPIO_DeInit+0x208>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_DeInit+0xb6>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a5b      	ldr	r2, [pc, #364]	; (8003558 <HAL_GPIO_DeInit+0x20c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_DeInit+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a5a      	ldr	r2, [pc, #360]	; (800355c <HAL_GPIO_DeInit+0x210>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_DeInit+0xae>
 80033f6:	2309      	movs	r3, #9
 80033f8:	e012      	b.n	8003420 <HAL_GPIO_DeInit+0xd4>
 80033fa:	230a      	movs	r3, #10
 80033fc:	e010      	b.n	8003420 <HAL_GPIO_DeInit+0xd4>
 80033fe:	2308      	movs	r3, #8
 8003400:	e00e      	b.n	8003420 <HAL_GPIO_DeInit+0xd4>
 8003402:	2307      	movs	r3, #7
 8003404:	e00c      	b.n	8003420 <HAL_GPIO_DeInit+0xd4>
 8003406:	2306      	movs	r3, #6
 8003408:	e00a      	b.n	8003420 <HAL_GPIO_DeInit+0xd4>
 800340a:	2305      	movs	r3, #5
 800340c:	e008      	b.n	8003420 <HAL_GPIO_DeInit+0xd4>
 800340e:	2304      	movs	r3, #4
 8003410:	e006      	b.n	8003420 <HAL_GPIO_DeInit+0xd4>
 8003412:	2303      	movs	r3, #3
 8003414:	e004      	b.n	8003420 <HAL_GPIO_DeInit+0xd4>
 8003416:	2302      	movs	r3, #2
 8003418:	e002      	b.n	8003420 <HAL_GPIO_DeInit+0xd4>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_GPIO_DeInit+0xd4>
 800341e:	2300      	movs	r3, #0
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	f002 0203 	and.w	r2, r2, #3
 8003426:	0092      	lsls	r2, r2, #2
 8003428:	4093      	lsls	r3, r2
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d132      	bne.n	8003496 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003430:	4b4b      	ldr	r3, [pc, #300]	; (8003560 <HAL_GPIO_DeInit+0x214>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	43db      	mvns	r3, r3
 8003438:	4949      	ldr	r1, [pc, #292]	; (8003560 <HAL_GPIO_DeInit+0x214>)
 800343a:	4013      	ands	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800343e:	4b48      	ldr	r3, [pc, #288]	; (8003560 <HAL_GPIO_DeInit+0x214>)
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	43db      	mvns	r3, r3
 8003446:	4946      	ldr	r1, [pc, #280]	; (8003560 <HAL_GPIO_DeInit+0x214>)
 8003448:	4013      	ands	r3, r2
 800344a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800344c:	4b44      	ldr	r3, [pc, #272]	; (8003560 <HAL_GPIO_DeInit+0x214>)
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	43db      	mvns	r3, r3
 8003454:	4942      	ldr	r1, [pc, #264]	; (8003560 <HAL_GPIO_DeInit+0x214>)
 8003456:	4013      	ands	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800345a:	4b41      	ldr	r3, [pc, #260]	; (8003560 <HAL_GPIO_DeInit+0x214>)
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	43db      	mvns	r3, r3
 8003462:	493f      	ldr	r1, [pc, #252]	; (8003560 <HAL_GPIO_DeInit+0x214>)
 8003464:	4013      	ands	r3, r2
 8003466:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	220f      	movs	r2, #15
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003478:	4a2e      	ldr	r2, [pc, #184]	; (8003534 <HAL_GPIO_DeInit+0x1e8>)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	3302      	adds	r3, #2
 8003480:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	43da      	mvns	r2, r3
 8003488:	482a      	ldr	r0, [pc, #168]	; (8003534 <HAL_GPIO_DeInit+0x1e8>)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	400a      	ands	r2, r1
 8003490:	3302      	adds	r3, #2
 8003492:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	2103      	movs	r1, #3
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	401a      	ands	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	08da      	lsrs	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3208      	adds	r2, #8
 80034b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	08d2      	lsrs	r2, r2, #3
 80034cc:	4019      	ands	r1, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3208      	adds	r2, #8
 80034d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2103      	movs	r1, #3
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	401a      	ands	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	2101      	movs	r1, #1
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	fa01 f303 	lsl.w	r3, r1, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	401a      	ands	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	2103      	movs	r1, #3
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	401a      	ands	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	3301      	adds	r3, #1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b0f      	cmp	r3, #15
 8003520:	f67f af22 	bls.w	8003368 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40013800 	.word	0x40013800
 8003538:	40020000 	.word	0x40020000
 800353c:	40020400 	.word	0x40020400
 8003540:	40020800 	.word	0x40020800
 8003544:	40020c00 	.word	0x40020c00
 8003548:	40021000 	.word	0x40021000
 800354c:	40021400 	.word	0x40021400
 8003550:	40021800 	.word	0x40021800
 8003554:	40021c00 	.word	0x40021c00
 8003558:	40022000 	.word	0x40022000
 800355c:	40022400 	.word	0x40022400
 8003560:	40013c00 	.word	0x40013c00

08003564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	807b      	strh	r3, [r7, #2]
 8003570:	4613      	mov	r3, r2
 8003572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003574:	787b      	ldrb	r3, [r7, #1]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003580:	e003      	b.n	800358a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003582:	887b      	ldrh	r3, [r7, #2]
 8003584:	041a      	lsls	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	619a      	str	r2, [r3, #24]
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e0bf      	b.n	800372a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8d2 	bl	8003768 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80035da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6999      	ldr	r1, [r3, #24]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80035f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6899      	ldr	r1, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <HAL_LTDC_Init+0x19c>)
 800360c:	400b      	ands	r3, r1
 800360e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6899      	ldr	r1, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68d9      	ldr	r1, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b3e      	ldr	r3, [pc, #248]	; (8003734 <HAL_LTDC_Init+0x19c>)
 800363a:	400b      	ands	r3, r1
 800363c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	041b      	lsls	r3, r3, #16
 8003644:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68d9      	ldr	r1, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1a      	ldr	r2, [r3, #32]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6919      	ldr	r1, [r3, #16]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4b33      	ldr	r3, [pc, #204]	; (8003734 <HAL_LTDC_Init+0x19c>)
 8003668:	400b      	ands	r3, r1
 800366a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	041b      	lsls	r3, r3, #16
 8003672:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6919      	ldr	r1, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6959      	ldr	r1, [r3, #20]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_LTDC_Init+0x19c>)
 8003696:	400b      	ands	r3, r1
 8003698:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	041b      	lsls	r3, r3, #16
 80036a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6959      	ldr	r1, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80036c8:	041b      	lsls	r3, r3, #16
 80036ca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80036da:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0206 	orr.w	r2, r2, #6
 8003706:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	f000f800 	.word	0xf000f800

08003738 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f81b 	bl	800377c <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003790:	b5b0      	push	{r4, r5, r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_LTDC_ConfigLayer+0x1a>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e02c      	b.n	8003804 <HAL_LTDC_ConfigLayer+0x74>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2134      	movs	r1, #52	; 0x34
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4614      	mov	r4, r2
 80037ce:	461d      	mov	r5, r3
 80037d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f847 	bl	8003878 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2201      	movs	r2, #1
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bdb0      	pop	{r4, r5, r7, pc}

0800380c <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_LTDC_SetAddress+0x1a>
 8003822:	2302      	movs	r3, #2
 8003824:	e024      	b.n	8003870 <HAL_LTDC_SetAddress+0x64>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2202      	movs	r2, #2
 8003832:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2234      	movs	r2, #52	; 0x34
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	3338      	adds	r3, #56	; 0x38
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6979      	ldr	r1, [r7, #20]
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f811 	bl	8003878 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2201      	movs	r2, #1
 800385c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	; 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003894:	4413      	add	r3, r2
 8003896:	041b      	lsls	r3, r3, #16
 8003898:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	01db      	lsls	r3, r3, #7
 80038a4:	4413      	add	r3, r2
 80038a6:	3384      	adds	r3, #132	; 0x84
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	4611      	mov	r1, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	01d2      	lsls	r2, r2, #7
 80038b4:	440a      	add	r2, r1
 80038b6:	3284      	adds	r2, #132	; 0x84
 80038b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80038bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	0c1b      	lsrs	r3, r3, #16
 80038ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ce:	4413      	add	r3, r2
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4619      	mov	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	01db      	lsls	r3, r3, #7
 80038dc:	440b      	add	r3, r1
 80038de:	3384      	adds	r3, #132	; 0x84
 80038e0:	4619      	mov	r1, r3
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f6:	4413      	add	r3, r2
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	01db      	lsls	r3, r3, #7
 8003906:	4413      	add	r3, r2
 8003908:	3384      	adds	r3, #132	; 0x84
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	4611      	mov	r1, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	01d2      	lsls	r2, r2, #7
 8003916:	440a      	add	r2, r1
 8003918:	3284      	adds	r2, #132	; 0x84
 800391a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800391e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800392e:	4413      	add	r3, r2
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4619      	mov	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	01db      	lsls	r3, r3, #7
 800393c:	440b      	add	r3, r1
 800393e:	3384      	adds	r3, #132	; 0x84
 8003940:	4619      	mov	r1, r3
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4313      	orrs	r3, r2
 8003946:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	01db      	lsls	r3, r3, #7
 8003952:	4413      	add	r3, r2
 8003954:	3384      	adds	r3, #132	; 0x84
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	4611      	mov	r1, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	01d2      	lsls	r2, r2, #7
 8003962:	440a      	add	r2, r1
 8003964:	3284      	adds	r2, #132	; 0x84
 8003966:	f023 0307 	bic.w	r3, r3, #7
 800396a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	01db      	lsls	r3, r3, #7
 8003976:	4413      	add	r3, r2
 8003978:	3384      	adds	r3, #132	; 0x84
 800397a:	461a      	mov	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003992:	041b      	lsls	r3, r3, #16
 8003994:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	061b      	lsls	r3, r3, #24
 800399c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	01db      	lsls	r3, r3, #7
 80039a8:	4413      	add	r3, r2
 80039aa:	3384      	adds	r3, #132	; 0x84
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	01db      	lsls	r3, r3, #7
 80039b8:	4413      	add	r3, r2
 80039ba:	3384      	adds	r3, #132	; 0x84
 80039bc:	461a      	mov	r2, r3
 80039be:	2300      	movs	r3, #0
 80039c0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039c8:	461a      	mov	r2, r3
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4619      	mov	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	01db      	lsls	r3, r3, #7
 80039dc:	440b      	add	r3, r1
 80039de:	3384      	adds	r3, #132	; 0x84
 80039e0:	4619      	mov	r1, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	01db      	lsls	r3, r3, #7
 80039f2:	4413      	add	r3, r2
 80039f4:	3384      	adds	r3, #132	; 0x84
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	4611      	mov	r1, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	01d2      	lsls	r2, r2, #7
 8003a02:	440a      	add	r2, r1
 8003a04:	3284      	adds	r2, #132	; 0x84
 8003a06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a0a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	01db      	lsls	r3, r3, #7
 8003a16:	4413      	add	r3, r2
 8003a18:	3384      	adds	r3, #132	; 0x84
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	01db      	lsls	r3, r3, #7
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3384      	adds	r3, #132	; 0x84
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4619      	mov	r1, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	01db      	lsls	r3, r3, #7
 8003a3c:	440b      	add	r3, r1
 8003a3e:	3384      	adds	r3, #132	; 0x84
 8003a40:	4619      	mov	r1, r3
 8003a42:	4b58      	ldr	r3, [pc, #352]	; (8003ba4 <LTDC_SetConfig+0x32c>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	69da      	ldr	r2, [r3, #28]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	68f9      	ldr	r1, [r7, #12]
 8003a52:	6809      	ldr	r1, [r1, #0]
 8003a54:	4608      	mov	r0, r1
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	01c9      	lsls	r1, r1, #7
 8003a5a:	4401      	add	r1, r0
 8003a5c:	3184      	adds	r1, #132	; 0x84
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	01db      	lsls	r3, r3, #7
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3384      	adds	r3, #132	; 0x84
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	01db      	lsls	r3, r3, #7
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3384      	adds	r3, #132	; 0x84
 8003a80:	461a      	mov	r2, r3
 8003a82:	2300      	movs	r3, #0
 8003a84:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	01db      	lsls	r3, r3, #7
 8003a90:	4413      	add	r3, r2
 8003a92:	3384      	adds	r3, #132	; 0x84
 8003a94:	461a      	mov	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	e01b      	b.n	8003ae2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d102      	bne.n	8003ab8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	e014      	b.n	8003ae2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d00b      	beq.n	8003ad8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d007      	beq.n	8003ad8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d003      	beq.n	8003ad8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003ad4:	2b07      	cmp	r3, #7
 8003ad6:	d102      	bne.n	8003ade <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	e001      	b.n	8003ae2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	01db      	lsls	r3, r3, #7
 8003aec:	4413      	add	r3, r2
 8003aee:	3384      	adds	r3, #132	; 0x84
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	4611      	mov	r1, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	01d2      	lsls	r2, r2, #7
 8003afc:	440a      	add	r2, r1
 8003afe:	3284      	adds	r2, #132	; 0x84
 8003b00:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003b04:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	041a      	lsls	r2, r3, #16
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6859      	ldr	r1, [r3, #4]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	1acb      	subs	r3, r1, r3
 8003b1c:	69f9      	ldr	r1, [r7, #28]
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	3303      	adds	r3, #3
 8003b24:	68f9      	ldr	r1, [r7, #12]
 8003b26:	6809      	ldr	r1, [r1, #0]
 8003b28:	4608      	mov	r0, r1
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	01c9      	lsls	r1, r1, #7
 8003b2e:	4401      	add	r1, r0
 8003b30:	3184      	adds	r1, #132	; 0x84
 8003b32:	4313      	orrs	r3, r2
 8003b34:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	01db      	lsls	r3, r3, #7
 8003b40:	4413      	add	r3, r2
 8003b42:	3384      	adds	r3, #132	; 0x84
 8003b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	01db      	lsls	r3, r3, #7
 8003b50:	440b      	add	r3, r1
 8003b52:	3384      	adds	r3, #132	; 0x84
 8003b54:	4619      	mov	r1, r3
 8003b56:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <LTDC_SetConfig+0x330>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	01db      	lsls	r3, r3, #7
 8003b66:	4413      	add	r3, r2
 8003b68:	3384      	adds	r3, #132	; 0x84
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	01db      	lsls	r3, r3, #7
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3384      	adds	r3, #132	; 0x84
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	4611      	mov	r1, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	01d2      	lsls	r2, r2, #7
 8003b8c:	440a      	add	r2, r1
 8003b8e:	3284      	adds	r2, #132	; 0x84
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	6013      	str	r3, [r2, #0]
}
 8003b96:	bf00      	nop
 8003b98:	3724      	adds	r7, #36	; 0x24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	fffff8f8 	.word	0xfffff8f8
 8003ba8:	fffff800 	.word	0xfffff800

08003bac <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	e001      	b.n	8003bc6 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8003bc2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8003bd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bd6:	e000      	b.n	8003bda <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8003bd8:	2200      	movs	r2, #0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8003be6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bea:	e000      	b.n	8003bee <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8003bec:	2200      	movs	r2, #0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	1e5a      	subs	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	4413      	add	r3, r2
 8003c06:	1e5a      	subs	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	441a      	add	r2, r3
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4413      	add	r3, r2
 8003c1c:	1e5a      	subs	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	441a      	add	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	441a      	add	r2, r3
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	4413      	add	r3, r2
 8003c38:	1e5a      	subs	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5a:	6013      	str	r3, [r2, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40007000 	.word	0x40007000

08003c6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c76:	4b23      	ldr	r3, [pc, #140]	; (8003d04 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	4a22      	ldr	r2, [pc, #136]	; (8003d04 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c80:	6413      	str	r3, [r2, #64]	; 0x40
 8003c82:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c9a:	f7fe fb1b 	bl	80022d4 <HAL_GetTick>
 8003c9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ca0:	e009      	b.n	8003cb6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ca2:	f7fe fb17 	bl	80022d4 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cb0:	d901      	bls.n	8003cb6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e022      	b.n	8003cfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cb6:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d1ee      	bne.n	8003ca2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003cc4:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a0f      	ldr	r2, [pc, #60]	; (8003d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cd0:	f7fe fb00 	bl	80022d4 <HAL_GetTick>
 8003cd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cd6:	e009      	b.n	8003cec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cd8:	f7fe fafc 	bl	80022d4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ce6:	d901      	bls.n	8003cec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e007      	b.n	8003cfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cf8:	d1ee      	bne.n	8003cd8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40007000 	.word	0x40007000

08003d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d14:	2300      	movs	r3, #0
 8003d16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e29b      	b.n	800425a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8087 	beq.w	8003e3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d30:	4b96      	ldr	r3, [pc, #600]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d00c      	beq.n	8003d56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3c:	4b93      	ldr	r3, [pc, #588]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d112      	bne.n	8003d6e <HAL_RCC_OscConfig+0x62>
 8003d48:	4b90      	ldr	r3, [pc, #576]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d54:	d10b      	bne.n	8003d6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d56:	4b8d      	ldr	r3, [pc, #564]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d06c      	beq.n	8003e3c <HAL_RCC_OscConfig+0x130>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d168      	bne.n	8003e3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e275      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d76:	d106      	bne.n	8003d86 <HAL_RCC_OscConfig+0x7a>
 8003d78:	4b84      	ldr	r3, [pc, #528]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a83      	ldr	r2, [pc, #524]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	e02e      	b.n	8003de4 <HAL_RCC_OscConfig+0xd8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x9c>
 8003d8e:	4b7f      	ldr	r3, [pc, #508]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7e      	ldr	r2, [pc, #504]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	4b7c      	ldr	r3, [pc, #496]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a7b      	ldr	r2, [pc, #492]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e01d      	b.n	8003de4 <HAL_RCC_OscConfig+0xd8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCC_OscConfig+0xc0>
 8003db2:	4b76      	ldr	r3, [pc, #472]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a75      	ldr	r2, [pc, #468]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	4b73      	ldr	r3, [pc, #460]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a72      	ldr	r2, [pc, #456]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	e00b      	b.n	8003de4 <HAL_RCC_OscConfig+0xd8>
 8003dcc:	4b6f      	ldr	r3, [pc, #444]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a6e      	ldr	r2, [pc, #440]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b6c      	ldr	r3, [pc, #432]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a6b      	ldr	r2, [pc, #428]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d013      	beq.n	8003e14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fe fa72 	bl	80022d4 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fe fa6e 	bl	80022d4 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e229      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0xe8>
 8003e12:	e014      	b.n	8003e3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fe fa5e 	bl	80022d4 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7fe fa5a 	bl	80022d4 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	; 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e215      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2e:	4b57      	ldr	r3, [pc, #348]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x110>
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d069      	beq.n	8003f1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e4a:	4b50      	ldr	r3, [pc, #320]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00b      	beq.n	8003e6e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e56:	4b4d      	ldr	r3, [pc, #308]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d11c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x190>
 8003e62:	4b4a      	ldr	r3, [pc, #296]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d116      	bne.n	8003e9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6e:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <HAL_RCC_OscConfig+0x17a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d001      	beq.n	8003e86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e1e9      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e86:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	493d      	ldr	r1, [pc, #244]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e9a:	e040      	b.n	8003f1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d023      	beq.n	8003eec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea4:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a38      	ldr	r2, [pc, #224]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fe fa10 	bl	80022d4 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb8:	f7fe fa0c 	bl	80022d4 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e1c7      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eca:	4b30      	ldr	r3, [pc, #192]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed6:	4b2d      	ldr	r3, [pc, #180]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4929      	ldr	r1, [pc, #164]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]
 8003eea:	e018      	b.n	8003f1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eec:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a26      	ldr	r2, [pc, #152]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003ef2:	f023 0301 	bic.w	r3, r3, #1
 8003ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe f9ec 	bl	80022d4 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f00:	f7fe f9e8 	bl	80022d4 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e1a3      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f12:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d038      	beq.n	8003f9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d019      	beq.n	8003f66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f32:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f36:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3e:	f7fe f9c9 	bl	80022d4 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f46:	f7fe f9c5 	bl	80022d4 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e180      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x23a>
 8003f64:	e01a      	b.n	8003f9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6a:	4a08      	ldr	r2, [pc, #32]	; (8003f8c <HAL_RCC_OscConfig+0x280>)
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f72:	f7fe f9af 	bl	80022d4 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f78:	e00a      	b.n	8003f90 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7a:	f7fe f9ab 	bl	80022d4 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d903      	bls.n	8003f90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e166      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
 8003f8c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f90:	4b92      	ldr	r3, [pc, #584]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8003f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ee      	bne.n	8003f7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80a4 	beq.w	80040f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003faa:	4b8c      	ldr	r3, [pc, #560]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10d      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb6:	4b89      	ldr	r3, [pc, #548]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	4a88      	ldr	r2, [pc, #544]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc2:	4b86      	ldr	r3, [pc, #536]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd2:	4b83      	ldr	r3, [pc, #524]	; (80041e0 <HAL_RCC_OscConfig+0x4d4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d118      	bne.n	8004010 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fde:	4b80      	ldr	r3, [pc, #512]	; (80041e0 <HAL_RCC_OscConfig+0x4d4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a7f      	ldr	r2, [pc, #508]	; (80041e0 <HAL_RCC_OscConfig+0x4d4>)
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fea:	f7fe f973 	bl	80022d4 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff2:	f7fe f96f 	bl	80022d4 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b64      	cmp	r3, #100	; 0x64
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e12a      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004004:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCC_OscConfig+0x4d4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d106      	bne.n	8004026 <HAL_RCC_OscConfig+0x31a>
 8004018:	4b70      	ldr	r3, [pc, #448]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	4a6f      	ldr	r2, [pc, #444]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6713      	str	r3, [r2, #112]	; 0x70
 8004024:	e02d      	b.n	8004082 <HAL_RCC_OscConfig+0x376>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0x33c>
 800402e:	4b6b      	ldr	r3, [pc, #428]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	4a6a      	ldr	r2, [pc, #424]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	6713      	str	r3, [r2, #112]	; 0x70
 800403a:	4b68      	ldr	r3, [pc, #416]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	4a67      	ldr	r2, [pc, #412]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8004040:	f023 0304 	bic.w	r3, r3, #4
 8004044:	6713      	str	r3, [r2, #112]	; 0x70
 8004046:	e01c      	b.n	8004082 <HAL_RCC_OscConfig+0x376>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2b05      	cmp	r3, #5
 800404e:	d10c      	bne.n	800406a <HAL_RCC_OscConfig+0x35e>
 8004050:	4b62      	ldr	r3, [pc, #392]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	4a61      	ldr	r2, [pc, #388]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8004056:	f043 0304 	orr.w	r3, r3, #4
 800405a:	6713      	str	r3, [r2, #112]	; 0x70
 800405c:	4b5f      	ldr	r3, [pc, #380]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	4a5e      	ldr	r2, [pc, #376]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	6713      	str	r3, [r2, #112]	; 0x70
 8004068:	e00b      	b.n	8004082 <HAL_RCC_OscConfig+0x376>
 800406a:	4b5c      	ldr	r3, [pc, #368]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	4a5b      	ldr	r2, [pc, #364]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	6713      	str	r3, [r2, #112]	; 0x70
 8004076:	4b59      	ldr	r3, [pc, #356]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407a:	4a58      	ldr	r2, [pc, #352]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 800407c:	f023 0304 	bic.w	r3, r3, #4
 8004080:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d015      	beq.n	80040b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408a:	f7fe f923 	bl	80022d4 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004092:	f7fe f91f 	bl	80022d4 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e0d8      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a8:	4b4c      	ldr	r3, [pc, #304]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ee      	beq.n	8004092 <HAL_RCC_OscConfig+0x386>
 80040b4:	e014      	b.n	80040e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b6:	f7fe f90d 	bl	80022d4 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040bc:	e00a      	b.n	80040d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040be:	f7fe f909 	bl	80022d4 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e0c2      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d4:	4b41      	ldr	r3, [pc, #260]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1ee      	bne.n	80040be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d105      	bne.n	80040f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e6:	4b3d      	ldr	r3, [pc, #244]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	4a3c      	ldr	r2, [pc, #240]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 80040ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80ae 	beq.w	8004258 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040fc:	4b37      	ldr	r3, [pc, #220]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 030c 	and.w	r3, r3, #12
 8004104:	2b08      	cmp	r3, #8
 8004106:	d06d      	beq.n	80041e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2b02      	cmp	r3, #2
 800410e:	d14b      	bne.n	80041a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004110:	4b32      	ldr	r3, [pc, #200]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a31      	ldr	r2, [pc, #196]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8004116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800411a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fe f8da 	bl	80022d4 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004124:	f7fe f8d6 	bl	80022d4 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e091      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004136:	4b29      	ldr	r3, [pc, #164]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	019b      	lsls	r3, r3, #6
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	3b01      	subs	r3, #1
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	071b      	lsls	r3, r3, #28
 800416e:	491b      	ldr	r1, [pc, #108]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a18      	ldr	r2, [pc, #96]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 800417a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800417e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fe f8a8 	bl	80022d4 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fe f8a4 	bl	80022d4 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e05f      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419a:	4b10      	ldr	r3, [pc, #64]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0x47c>
 80041a6:	e057      	b.n	8004258 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a0b      	ldr	r2, [pc, #44]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 80041ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fe f88e 	bl	80022d4 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fe f88a 	bl	80022d4 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e045      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ce:	4b03      	ldr	r3, [pc, #12]	; (80041dc <HAL_RCC_OscConfig+0x4d0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x4b0>
 80041da:	e03d      	b.n	8004258 <HAL_RCC_OscConfig+0x54c>
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041e4:	4b1f      	ldr	r3, [pc, #124]	; (8004264 <HAL_RCC_OscConfig+0x558>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d030      	beq.n	8004254 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d129      	bne.n	8004254 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420a:	429a      	cmp	r2, r3
 800420c:	d122      	bne.n	8004254 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004214:	4013      	ands	r3, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800421a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800421c:	4293      	cmp	r3, r2
 800421e:	d119      	bne.n	8004254 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	085b      	lsrs	r3, r3, #1
 800422c:	3b01      	subs	r3, #1
 800422e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d10f      	bne.n	8004254 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004240:	429a      	cmp	r2, r3
 8004242:	d107      	bne.n	8004254 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d001      	beq.n	8004258 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800

08004268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0d0      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004280:	4b6a      	ldr	r3, [pc, #424]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d910      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b67      	ldr	r3, [pc, #412]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 020f 	bic.w	r2, r3, #15
 8004296:	4965      	ldr	r1, [pc, #404]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429e:	4b63      	ldr	r3, [pc, #396]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d001      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0b8      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d020      	beq.n	80042fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042c8:	4b59      	ldr	r3, [pc, #356]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4a58      	ldr	r2, [pc, #352]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80042ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e0:	4b53      	ldr	r3, [pc, #332]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4a52      	ldr	r2, [pc, #328]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80042e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ec:	4b50      	ldr	r3, [pc, #320]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	494d      	ldr	r1, [pc, #308]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d040      	beq.n	800438c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d107      	bne.n	8004322 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004312:	4b47      	ldr	r3, [pc, #284]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d115      	bne.n	800434a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e07f      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432a:	4b41      	ldr	r3, [pc, #260]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e073      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433a:	4b3d      	ldr	r3, [pc, #244]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e06b      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800434a:	4b39      	ldr	r3, [pc, #228]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f023 0203 	bic.w	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	4936      	ldr	r1, [pc, #216]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	4313      	orrs	r3, r2
 800435a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435c:	f7fd ffba 	bl	80022d4 <HAL_GetTick>
 8004360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004362:	e00a      	b.n	800437a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004364:	f7fd ffb6 	bl	80022d4 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e053      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	4b2d      	ldr	r3, [pc, #180]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 020c 	and.w	r2, r3, #12
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	429a      	cmp	r2, r3
 800438a:	d1eb      	bne.n	8004364 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800438c:	4b27      	ldr	r3, [pc, #156]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d210      	bcs.n	80043bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b24      	ldr	r3, [pc, #144]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 020f 	bic.w	r2, r3, #15
 80043a2:	4922      	ldr	r1, [pc, #136]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043aa:	4b20      	ldr	r3, [pc, #128]	; (800442c <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e032      	b.n	8004422 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c8:	4b19      	ldr	r3, [pc, #100]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4916      	ldr	r1, [pc, #88]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	490e      	ldr	r1, [pc, #56]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043fa:	f000 f821 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80043fe:	4602      	mov	r2, r0
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <HAL_RCC_ClockConfig+0x1c8>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	490a      	ldr	r1, [pc, #40]	; (8004434 <HAL_RCC_ClockConfig+0x1cc>)
 800440c:	5ccb      	ldrb	r3, [r1, r3]
 800440e:	fa22 f303 	lsr.w	r3, r2, r3
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <HAL_RCC_ClockConfig+0x1d0>)
 8004414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <HAL_RCC_ClockConfig+0x1d4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7fd ff16 	bl	800224c <HAL_InitTick>

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40023c00 	.word	0x40023c00
 8004430:	40023800 	.word	0x40023800
 8004434:	080096a4 	.word	0x080096a4
 8004438:	20000000 	.word	0x20000000
 800443c:	20000004 	.word	0x20000004

08004440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004440:	b5b0      	push	{r4, r5, r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004446:	2100      	movs	r1, #0
 8004448:	6079      	str	r1, [r7, #4]
 800444a:	2100      	movs	r1, #0
 800444c:	60f9      	str	r1, [r7, #12]
 800444e:	2100      	movs	r1, #0
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004452:	2100      	movs	r1, #0
 8004454:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004456:	4952      	ldr	r1, [pc, #328]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004458:	6889      	ldr	r1, [r1, #8]
 800445a:	f001 010c 	and.w	r1, r1, #12
 800445e:	2908      	cmp	r1, #8
 8004460:	d00d      	beq.n	800447e <HAL_RCC_GetSysClockFreq+0x3e>
 8004462:	2908      	cmp	r1, #8
 8004464:	f200 8094 	bhi.w	8004590 <HAL_RCC_GetSysClockFreq+0x150>
 8004468:	2900      	cmp	r1, #0
 800446a:	d002      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x32>
 800446c:	2904      	cmp	r1, #4
 800446e:	d003      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x38>
 8004470:	e08e      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004472:	4b4c      	ldr	r3, [pc, #304]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004474:	60bb      	str	r3, [r7, #8]
      break;
 8004476:	e08e      	b.n	8004596 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004478:	4b4b      	ldr	r3, [pc, #300]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800447a:	60bb      	str	r3, [r7, #8]
      break;
 800447c:	e08b      	b.n	8004596 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800447e:	4948      	ldr	r1, [pc, #288]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004480:	6849      	ldr	r1, [r1, #4]
 8004482:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004486:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004488:	4945      	ldr	r1, [pc, #276]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800448a:	6849      	ldr	r1, [r1, #4]
 800448c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004490:	2900      	cmp	r1, #0
 8004492:	d024      	beq.n	80044de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004494:	4942      	ldr	r1, [pc, #264]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004496:	6849      	ldr	r1, [r1, #4]
 8004498:	0989      	lsrs	r1, r1, #6
 800449a:	4608      	mov	r0, r1
 800449c:	f04f 0100 	mov.w	r1, #0
 80044a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80044a4:	f04f 0500 	mov.w	r5, #0
 80044a8:	ea00 0204 	and.w	r2, r0, r4
 80044ac:	ea01 0305 	and.w	r3, r1, r5
 80044b0:	493d      	ldr	r1, [pc, #244]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80044b2:	fb01 f003 	mul.w	r0, r1, r3
 80044b6:	2100      	movs	r1, #0
 80044b8:	fb01 f102 	mul.w	r1, r1, r2
 80044bc:	1844      	adds	r4, r0, r1
 80044be:	493a      	ldr	r1, [pc, #232]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80044c0:	fba2 0101 	umull	r0, r1, r2, r1
 80044c4:	1863      	adds	r3, r4, r1
 80044c6:	4619      	mov	r1, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	f7fb ff0e 	bl	80002f0 <__aeabi_uldivmod>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4613      	mov	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	e04a      	b.n	8004574 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044de:	4b30      	ldr	r3, [pc, #192]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	099b      	lsrs	r3, r3, #6
 80044e4:	461a      	mov	r2, r3
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044ee:	f04f 0100 	mov.w	r1, #0
 80044f2:	ea02 0400 	and.w	r4, r2, r0
 80044f6:	ea03 0501 	and.w	r5, r3, r1
 80044fa:	4620      	mov	r0, r4
 80044fc:	4629      	mov	r1, r5
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	014b      	lsls	r3, r1, #5
 8004508:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800450c:	0142      	lsls	r2, r0, #5
 800450e:	4610      	mov	r0, r2
 8004510:	4619      	mov	r1, r3
 8004512:	1b00      	subs	r0, r0, r4
 8004514:	eb61 0105 	sbc.w	r1, r1, r5
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	018b      	lsls	r3, r1, #6
 8004522:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004526:	0182      	lsls	r2, r0, #6
 8004528:	1a12      	subs	r2, r2, r0
 800452a:	eb63 0301 	sbc.w	r3, r3, r1
 800452e:	f04f 0000 	mov.w	r0, #0
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	00d9      	lsls	r1, r3, #3
 8004538:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800453c:	00d0      	lsls	r0, r2, #3
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	1912      	adds	r2, r2, r4
 8004544:	eb45 0303 	adc.w	r3, r5, r3
 8004548:	f04f 0000 	mov.w	r0, #0
 800454c:	f04f 0100 	mov.w	r1, #0
 8004550:	0299      	lsls	r1, r3, #10
 8004552:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004556:	0290      	lsls	r0, r2, #10
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	461a      	mov	r2, r3
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	f7fb fec2 	bl	80002f0 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4613      	mov	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	0c1b      	lsrs	r3, r3, #16
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	3301      	adds	r3, #1
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	60bb      	str	r3, [r7, #8]
      break;
 800458e:	e002      	b.n	8004596 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004592:	60bb      	str	r3, [r7, #8]
      break;
 8004594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004596:	68bb      	ldr	r3, [r7, #8]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bdb0      	pop	{r4, r5, r7, pc}
 80045a0:	40023800 	.word	0x40023800
 80045a4:	00f42400 	.word	0x00f42400
 80045a8:	017d7840 	.word	0x017d7840

080045ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045b2:	681b      	ldr	r3, [r3, #0]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000000 	.word	0x20000000

080045c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045c8:	f7ff fff0 	bl	80045ac <HAL_RCC_GetHCLKFreq>
 80045cc:	4602      	mov	r2, r0
 80045ce:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	0a9b      	lsrs	r3, r3, #10
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	4903      	ldr	r1, [pc, #12]	; (80045e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045da:	5ccb      	ldrb	r3, [r1, r3]
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40023800 	.word	0x40023800
 80045e8:	080096b4 	.word	0x080096b4

080045ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045f0:	f7ff ffdc 	bl	80045ac <HAL_RCC_GetHCLKFreq>
 80045f4:	4602      	mov	r2, r0
 80045f6:	4b05      	ldr	r3, [pc, #20]	; (800460c <HAL_RCC_GetPCLK2Freq+0x20>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	0b5b      	lsrs	r3, r3, #13
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	4903      	ldr	r1, [pc, #12]	; (8004610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004602:	5ccb      	ldrb	r3, [r1, r3]
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40023800 	.word	0x40023800
 8004610:	080096b4 	.word	0x080096b4

08004614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d012      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800463c:	4b69      	ldr	r3, [pc, #420]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	4a68      	ldr	r2, [pc, #416]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004642:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004646:	6093      	str	r3, [r2, #8]
 8004648:	4b66      	ldr	r3, [pc, #408]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004650:	4964      	ldr	r1, [pc, #400]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800465e:	2301      	movs	r3, #1
 8004660:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d017      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800466e:	4b5d      	ldr	r3, [pc, #372]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004674:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	4959      	ldr	r1, [pc, #356]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800468c:	d101      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800468e:	2301      	movs	r3, #1
 8004690:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800469a:	2301      	movs	r3, #1
 800469c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d017      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046aa:	4b4e      	ldr	r3, [pc, #312]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	494a      	ldr	r1, [pc, #296]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c8:	d101      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046ca:	2301      	movs	r3, #1
 80046cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046d6:	2301      	movs	r3, #1
 80046d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046e6:	2301      	movs	r3, #1
 80046e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 808b 	beq.w	800480e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046f8:	4b3a      	ldr	r3, [pc, #232]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	4a39      	ldr	r2, [pc, #228]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004702:	6413      	str	r3, [r2, #64]	; 0x40
 8004704:	4b37      	ldr	r3, [pc, #220]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004710:	4b35      	ldr	r3, [pc, #212]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a34      	ldr	r2, [pc, #208]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800471c:	f7fd fdda 	bl	80022d4 <HAL_GetTick>
 8004720:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004724:	f7fd fdd6 	bl	80022d4 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	; 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e38f      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004736:	4b2c      	ldr	r3, [pc, #176]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004742:	4b28      	ldr	r3, [pc, #160]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d035      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	429a      	cmp	r2, r3
 800475e:	d02e      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004760:	4b20      	ldr	r3, [pc, #128]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004768:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800476a:	4b1e      	ldr	r3, [pc, #120]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004774:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004776:	4b1b      	ldr	r3, [pc, #108]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477a:	4a1a      	ldr	r2, [pc, #104]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004780:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004782:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004788:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d114      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fd fd9e 	bl	80022d4 <HAL_GetTick>
 8004798:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479a:	e00a      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800479c:	f7fd fd9a 	bl	80022d4 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e351      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b2:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0ee      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ca:	d111      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047da:	400b      	ands	r3, r1
 80047dc:	4901      	ldr	r1, [pc, #4]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
 80047e2:	e00b      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047e4:	40023800 	.word	0x40023800
 80047e8:	40007000 	.word	0x40007000
 80047ec:	0ffffcff 	.word	0x0ffffcff
 80047f0:	4bb3      	ldr	r3, [pc, #716]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4ab2      	ldr	r2, [pc, #712]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047fa:	6093      	str	r3, [r2, #8]
 80047fc:	4bb0      	ldr	r3, [pc, #704]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004808:	49ad      	ldr	r1, [pc, #692]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480a:	4313      	orrs	r3, r2
 800480c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2b00      	cmp	r3, #0
 8004818:	d010      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800481a:	4ba9      	ldr	r3, [pc, #676]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004820:	4aa7      	ldr	r2, [pc, #668]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004826:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800482a:	4ba5      	ldr	r3, [pc, #660]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	49a2      	ldr	r1, [pc, #648]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004848:	4b9d      	ldr	r3, [pc, #628]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004856:	499a      	ldr	r1, [pc, #616]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800486a:	4b95      	ldr	r3, [pc, #596]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004870:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004878:	4991      	ldr	r1, [pc, #580]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800488c:	4b8c      	ldr	r3, [pc, #560]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004892:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489a:	4989      	ldr	r1, [pc, #548]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048ae:	4b84      	ldr	r3, [pc, #528]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048bc:	4980      	ldr	r1, [pc, #512]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048d0:	4b7b      	ldr	r3, [pc, #492]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	f023 0203 	bic.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	4978      	ldr	r1, [pc, #480]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048f2:	4b73      	ldr	r3, [pc, #460]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f8:	f023 020c 	bic.w	r2, r3, #12
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004900:	496f      	ldr	r1, [pc, #444]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004914:	4b6a      	ldr	r3, [pc, #424]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	4967      	ldr	r1, [pc, #412]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004936:	4b62      	ldr	r3, [pc, #392]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004944:	495e      	ldr	r1, [pc, #376]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004958:	4b59      	ldr	r3, [pc, #356]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	4956      	ldr	r1, [pc, #344]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800497a:	4b51      	ldr	r3, [pc, #324]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004980:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	494d      	ldr	r1, [pc, #308]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800499c:	4b48      	ldr	r3, [pc, #288]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049aa:	4945      	ldr	r1, [pc, #276]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049be:	4b40      	ldr	r3, [pc, #256]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049cc:	493c      	ldr	r1, [pc, #240]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049e0:	4b37      	ldr	r3, [pc, #220]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ee:	4934      	ldr	r1, [pc, #208]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d011      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a02:	4b2f      	ldr	r3, [pc, #188]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a10:	492b      	ldr	r1, [pc, #172]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a20:	d101      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a22:	2301      	movs	r3, #1
 8004a24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a32:	2301      	movs	r3, #1
 8004a34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a42:	4b1f      	ldr	r3, [pc, #124]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a50:	491b      	ldr	r1, [pc, #108]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00b      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a64:	4b16      	ldr	r3, [pc, #88]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a74:	4912      	ldr	r1, [pc, #72]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00b      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004a88:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a98:	4909      	ldr	r1, [pc, #36]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00f      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004aac:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abc:	e002      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004abe:	bf00      	nop
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	4986      	ldr	r1, [pc, #536]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00b      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ad8:	4b81      	ldr	r3, [pc, #516]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ade:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae8:	497d      	ldr	r1, [pc, #500]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d006      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80d6 	beq.w	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b04:	4b76      	ldr	r3, [pc, #472]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a75      	ldr	r2, [pc, #468]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b10:	f7fd fbe0 	bl	80022d4 <HAL_GetTick>
 8004b14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b18:	f7fd fbdc 	bl	80022d4 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b64      	cmp	r3, #100	; 0x64
 8004b24:	d901      	bls.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e195      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b2a:	4b6d      	ldr	r3, [pc, #436]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d021      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d11d      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b4a:	4b65      	ldr	r3, [pc, #404]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b58:	4b61      	ldr	r3, [pc, #388]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b5e:	0e1b      	lsrs	r3, r3, #24
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	019a      	lsls	r2, r3, #6
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	041b      	lsls	r3, r3, #16
 8004b70:	431a      	orrs	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	061b      	lsls	r3, r3, #24
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	071b      	lsls	r3, r3, #28
 8004b7e:	4958      	ldr	r1, [pc, #352]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d004      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02e      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb0:	d129      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bb2:	4b4b      	ldr	r3, [pc, #300]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bc0:	4b47      	ldr	r3, [pc, #284]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc6:	0f1b      	lsrs	r3, r3, #28
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	019a      	lsls	r2, r3, #6
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	071b      	lsls	r3, r3, #28
 8004be6:	493e      	ldr	r1, [pc, #248]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004bee:	4b3c      	ldr	r3, [pc, #240]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf4:	f023 021f 	bic.w	r2, r3, #31
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	4938      	ldr	r1, [pc, #224]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01d      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c12:	4b33      	ldr	r3, [pc, #204]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c18:	0e1b      	lsrs	r3, r3, #24
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c20:	4b2f      	ldr	r3, [pc, #188]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c26:	0f1b      	lsrs	r3, r3, #28
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	019a      	lsls	r2, r3, #6
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	041b      	lsls	r3, r3, #16
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	061b      	lsls	r3, r3, #24
 8004c40:	431a      	orrs	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	071b      	lsls	r3, r3, #28
 8004c46:	4926      	ldr	r1, [pc, #152]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d011      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	019a      	lsls	r2, r3, #6
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	041b      	lsls	r3, r3, #16
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	061b      	lsls	r3, r3, #24
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	071b      	lsls	r3, r3, #28
 8004c76:	491a      	ldr	r1, [pc, #104]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c7e:	4b18      	ldr	r3, [pc, #96]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a17      	ldr	r2, [pc, #92]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8a:	f7fd fb23 	bl	80022d4 <HAL_GetTick>
 8004c8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c92:	f7fd fb1f 	bl	80022d4 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b64      	cmp	r3, #100	; 0x64
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e0d8      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ca4:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	f040 80ce 	bne.w	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004cb8:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc4:	f7fd fb06 	bl	80022d4 <HAL_GetTick>
 8004cc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cca:	e00b      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ccc:	f7fd fb02 	bl	80022d4 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b64      	cmp	r3, #100	; 0x64
 8004cd8:	d904      	bls.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e0bb      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ce4:	4b5e      	ldr	r3, [pc, #376]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf0:	d0ec      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d02e      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d12a      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d1a:	4b51      	ldr	r3, [pc, #324]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d20:	0c1b      	lsrs	r3, r3, #16
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d28:	4b4d      	ldr	r3, [pc, #308]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	0f1b      	lsrs	r3, r3, #28
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	019a      	lsls	r2, r3, #6
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	061b      	lsls	r3, r3, #24
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	071b      	lsls	r3, r3, #28
 8004d4e:	4944      	ldr	r1, [pc, #272]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d56:	4b42      	ldr	r3, [pc, #264]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	3b01      	subs	r3, #1
 8004d66:	021b      	lsls	r3, r3, #8
 8004d68:	493d      	ldr	r1, [pc, #244]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d022      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d84:	d11d      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d86:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	0e1b      	lsrs	r3, r3, #24
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d94:	4b32      	ldr	r3, [pc, #200]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	0f1b      	lsrs	r3, r3, #28
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	019a      	lsls	r2, r3, #6
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	431a      	orrs	r2, r3
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	061b      	lsls	r3, r3, #24
 8004db4:	431a      	orrs	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	071b      	lsls	r3, r3, #28
 8004dba:	4929      	ldr	r1, [pc, #164]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d028      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dce:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd4:	0e1b      	lsrs	r3, r3, #24
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ddc:	4b20      	ldr	r3, [pc, #128]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de2:	0c1b      	lsrs	r3, r3, #16
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	019a      	lsls	r2, r3, #6
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	041b      	lsls	r3, r3, #16
 8004df4:	431a      	orrs	r2, r3
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	061b      	lsls	r3, r3, #24
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	071b      	lsls	r3, r3, #28
 8004e02:	4917      	ldr	r1, [pc, #92]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e0a:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	4911      	ldr	r1, [pc, #68]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e20:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a0e      	ldr	r2, [pc, #56]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2c:	f7fd fa52 	bl	80022d4 <HAL_GetTick>
 8004e30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e34:	f7fd fa4e 	bl	80022d4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	; 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e007      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e52:	d1ef      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40023800 	.word	0x40023800

08004e64 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e01c      	b.n	8004eb0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	795b      	ldrb	r3, [r3, #5]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d105      	bne.n	8004e8c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f816 	bl	8004eb8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0204 	orr.w	r2, r2, #4
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_RNG_MspInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	791b      	ldrb	r3, [r3, #4]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e03d      	b.n	8004f62 <HAL_RNG_GenerateRandomNumber+0x96>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	795b      	ldrb	r3, [r3, #5]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d12c      	bne.n	8004f50 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004efc:	f7fd f9ea 	bl	80022d4 <HAL_GetTick>
 8004f00:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004f02:	e011      	b.n	8004f28 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004f04:	f7fd f9e6 	bl	80022d4 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d90a      	bls.n	8004f28 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e01c      	b.n	8004f62 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d1e6      	bne.n	8004f04 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	715a      	strb	r2, [r3, #5]
 8004f4e:	e004      	b.n	8004f5a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2204      	movs	r2, #4
 8004f54:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	711a      	strb	r2, [r3, #4]

  return status;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e025      	b.n	8004fca <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f81d 	bl	8004fd2 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f000 fccc 	bl	8005948 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	f000 fd36 	bl	8005a2c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d101      	bne.n	8005002 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004ffe:	2302      	movs	r3, #2
 8005000:	e018      	b.n	8005034 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2202      	movs	r2, #2
 8005006:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fd8a 	bl	8005b2c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d104      	bne.n	800502a <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2205      	movs	r2, #5
 8005024:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005028:	e003      	b.n	8005032 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d101      	bne.n	8005056 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005052:	2302      	movs	r3, #2
 8005054:	e00e      	b.n	8005074 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2202      	movs	r2, #2
 800505a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fd85 	bl	8005b74 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e040      	b.n	8005110 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f873 	bl	800518a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	; 0x24
 80050a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f87a 	bl	80051b4 <UART_SetConfig>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e022      	b.n	8005110 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fad0 	bl	8005678 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fb57 	bl	80057bc <UART_CheckIdleState>
 800510e:	4603      	mov	r3, r0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e02b      	b.n	8005182 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2224      	movs	r2, #36	; 0x24
 800512e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2200      	movs	r2, #0
 800514e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2200      	movs	r2, #0
 8005156:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f820 	bl	800519e <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4ba7      	ldr	r3, [pc, #668]	; (800547c <UART_SetConfig+0x2c8>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	6979      	ldr	r1, [r7, #20]
 80051e8:	430b      	orrs	r3, r1
 80051ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a95      	ldr	r2, [pc, #596]	; (8005480 <UART_SetConfig+0x2cc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d120      	bne.n	8005272 <UART_SetConfig+0xbe>
 8005230:	4b94      	ldr	r3, [pc, #592]	; (8005484 <UART_SetConfig+0x2d0>)
 8005232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	2b03      	cmp	r3, #3
 800523c:	d816      	bhi.n	800526c <UART_SetConfig+0xb8>
 800523e:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <UART_SetConfig+0x90>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	08005255 	.word	0x08005255
 8005248:	08005261 	.word	0x08005261
 800524c:	0800525b 	.word	0x0800525b
 8005250:	08005267 	.word	0x08005267
 8005254:	2301      	movs	r3, #1
 8005256:	77fb      	strb	r3, [r7, #31]
 8005258:	e14f      	b.n	80054fa <UART_SetConfig+0x346>
 800525a:	2302      	movs	r3, #2
 800525c:	77fb      	strb	r3, [r7, #31]
 800525e:	e14c      	b.n	80054fa <UART_SetConfig+0x346>
 8005260:	2304      	movs	r3, #4
 8005262:	77fb      	strb	r3, [r7, #31]
 8005264:	e149      	b.n	80054fa <UART_SetConfig+0x346>
 8005266:	2308      	movs	r3, #8
 8005268:	77fb      	strb	r3, [r7, #31]
 800526a:	e146      	b.n	80054fa <UART_SetConfig+0x346>
 800526c:	2310      	movs	r3, #16
 800526e:	77fb      	strb	r3, [r7, #31]
 8005270:	e143      	b.n	80054fa <UART_SetConfig+0x346>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a84      	ldr	r2, [pc, #528]	; (8005488 <UART_SetConfig+0x2d4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d132      	bne.n	80052e2 <UART_SetConfig+0x12e>
 800527c:	4b81      	ldr	r3, [pc, #516]	; (8005484 <UART_SetConfig+0x2d0>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	2b0c      	cmp	r3, #12
 8005288:	d828      	bhi.n	80052dc <UART_SetConfig+0x128>
 800528a:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <UART_SetConfig+0xdc>)
 800528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005290:	080052c5 	.word	0x080052c5
 8005294:	080052dd 	.word	0x080052dd
 8005298:	080052dd 	.word	0x080052dd
 800529c:	080052dd 	.word	0x080052dd
 80052a0:	080052d1 	.word	0x080052d1
 80052a4:	080052dd 	.word	0x080052dd
 80052a8:	080052dd 	.word	0x080052dd
 80052ac:	080052dd 	.word	0x080052dd
 80052b0:	080052cb 	.word	0x080052cb
 80052b4:	080052dd 	.word	0x080052dd
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052dd 	.word	0x080052dd
 80052c0:	080052d7 	.word	0x080052d7
 80052c4:	2300      	movs	r3, #0
 80052c6:	77fb      	strb	r3, [r7, #31]
 80052c8:	e117      	b.n	80054fa <UART_SetConfig+0x346>
 80052ca:	2302      	movs	r3, #2
 80052cc:	77fb      	strb	r3, [r7, #31]
 80052ce:	e114      	b.n	80054fa <UART_SetConfig+0x346>
 80052d0:	2304      	movs	r3, #4
 80052d2:	77fb      	strb	r3, [r7, #31]
 80052d4:	e111      	b.n	80054fa <UART_SetConfig+0x346>
 80052d6:	2308      	movs	r3, #8
 80052d8:	77fb      	strb	r3, [r7, #31]
 80052da:	e10e      	b.n	80054fa <UART_SetConfig+0x346>
 80052dc:	2310      	movs	r3, #16
 80052de:	77fb      	strb	r3, [r7, #31]
 80052e0:	e10b      	b.n	80054fa <UART_SetConfig+0x346>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a69      	ldr	r2, [pc, #420]	; (800548c <UART_SetConfig+0x2d8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d120      	bne.n	800532e <UART_SetConfig+0x17a>
 80052ec:	4b65      	ldr	r3, [pc, #404]	; (8005484 <UART_SetConfig+0x2d0>)
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052f6:	2b30      	cmp	r3, #48	; 0x30
 80052f8:	d013      	beq.n	8005322 <UART_SetConfig+0x16e>
 80052fa:	2b30      	cmp	r3, #48	; 0x30
 80052fc:	d814      	bhi.n	8005328 <UART_SetConfig+0x174>
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d009      	beq.n	8005316 <UART_SetConfig+0x162>
 8005302:	2b20      	cmp	r3, #32
 8005304:	d810      	bhi.n	8005328 <UART_SetConfig+0x174>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <UART_SetConfig+0x15c>
 800530a:	2b10      	cmp	r3, #16
 800530c:	d006      	beq.n	800531c <UART_SetConfig+0x168>
 800530e:	e00b      	b.n	8005328 <UART_SetConfig+0x174>
 8005310:	2300      	movs	r3, #0
 8005312:	77fb      	strb	r3, [r7, #31]
 8005314:	e0f1      	b.n	80054fa <UART_SetConfig+0x346>
 8005316:	2302      	movs	r3, #2
 8005318:	77fb      	strb	r3, [r7, #31]
 800531a:	e0ee      	b.n	80054fa <UART_SetConfig+0x346>
 800531c:	2304      	movs	r3, #4
 800531e:	77fb      	strb	r3, [r7, #31]
 8005320:	e0eb      	b.n	80054fa <UART_SetConfig+0x346>
 8005322:	2308      	movs	r3, #8
 8005324:	77fb      	strb	r3, [r7, #31]
 8005326:	e0e8      	b.n	80054fa <UART_SetConfig+0x346>
 8005328:	2310      	movs	r3, #16
 800532a:	77fb      	strb	r3, [r7, #31]
 800532c:	e0e5      	b.n	80054fa <UART_SetConfig+0x346>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a57      	ldr	r2, [pc, #348]	; (8005490 <UART_SetConfig+0x2dc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d120      	bne.n	800537a <UART_SetConfig+0x1c6>
 8005338:	4b52      	ldr	r3, [pc, #328]	; (8005484 <UART_SetConfig+0x2d0>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005342:	2bc0      	cmp	r3, #192	; 0xc0
 8005344:	d013      	beq.n	800536e <UART_SetConfig+0x1ba>
 8005346:	2bc0      	cmp	r3, #192	; 0xc0
 8005348:	d814      	bhi.n	8005374 <UART_SetConfig+0x1c0>
 800534a:	2b80      	cmp	r3, #128	; 0x80
 800534c:	d009      	beq.n	8005362 <UART_SetConfig+0x1ae>
 800534e:	2b80      	cmp	r3, #128	; 0x80
 8005350:	d810      	bhi.n	8005374 <UART_SetConfig+0x1c0>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <UART_SetConfig+0x1a8>
 8005356:	2b40      	cmp	r3, #64	; 0x40
 8005358:	d006      	beq.n	8005368 <UART_SetConfig+0x1b4>
 800535a:	e00b      	b.n	8005374 <UART_SetConfig+0x1c0>
 800535c:	2300      	movs	r3, #0
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e0cb      	b.n	80054fa <UART_SetConfig+0x346>
 8005362:	2302      	movs	r3, #2
 8005364:	77fb      	strb	r3, [r7, #31]
 8005366:	e0c8      	b.n	80054fa <UART_SetConfig+0x346>
 8005368:	2304      	movs	r3, #4
 800536a:	77fb      	strb	r3, [r7, #31]
 800536c:	e0c5      	b.n	80054fa <UART_SetConfig+0x346>
 800536e:	2308      	movs	r3, #8
 8005370:	77fb      	strb	r3, [r7, #31]
 8005372:	e0c2      	b.n	80054fa <UART_SetConfig+0x346>
 8005374:	2310      	movs	r3, #16
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	e0bf      	b.n	80054fa <UART_SetConfig+0x346>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a45      	ldr	r2, [pc, #276]	; (8005494 <UART_SetConfig+0x2e0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d125      	bne.n	80053d0 <UART_SetConfig+0x21c>
 8005384:	4b3f      	ldr	r3, [pc, #252]	; (8005484 <UART_SetConfig+0x2d0>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005392:	d017      	beq.n	80053c4 <UART_SetConfig+0x210>
 8005394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005398:	d817      	bhi.n	80053ca <UART_SetConfig+0x216>
 800539a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800539e:	d00b      	beq.n	80053b8 <UART_SetConfig+0x204>
 80053a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a4:	d811      	bhi.n	80053ca <UART_SetConfig+0x216>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <UART_SetConfig+0x1fe>
 80053aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ae:	d006      	beq.n	80053be <UART_SetConfig+0x20a>
 80053b0:	e00b      	b.n	80053ca <UART_SetConfig+0x216>
 80053b2:	2300      	movs	r3, #0
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e0a0      	b.n	80054fa <UART_SetConfig+0x346>
 80053b8:	2302      	movs	r3, #2
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e09d      	b.n	80054fa <UART_SetConfig+0x346>
 80053be:	2304      	movs	r3, #4
 80053c0:	77fb      	strb	r3, [r7, #31]
 80053c2:	e09a      	b.n	80054fa <UART_SetConfig+0x346>
 80053c4:	2308      	movs	r3, #8
 80053c6:	77fb      	strb	r3, [r7, #31]
 80053c8:	e097      	b.n	80054fa <UART_SetConfig+0x346>
 80053ca:	2310      	movs	r3, #16
 80053cc:	77fb      	strb	r3, [r7, #31]
 80053ce:	e094      	b.n	80054fa <UART_SetConfig+0x346>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a30      	ldr	r2, [pc, #192]	; (8005498 <UART_SetConfig+0x2e4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d125      	bne.n	8005426 <UART_SetConfig+0x272>
 80053da:	4b2a      	ldr	r3, [pc, #168]	; (8005484 <UART_SetConfig+0x2d0>)
 80053dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053e8:	d017      	beq.n	800541a <UART_SetConfig+0x266>
 80053ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053ee:	d817      	bhi.n	8005420 <UART_SetConfig+0x26c>
 80053f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f4:	d00b      	beq.n	800540e <UART_SetConfig+0x25a>
 80053f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053fa:	d811      	bhi.n	8005420 <UART_SetConfig+0x26c>
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <UART_SetConfig+0x254>
 8005400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005404:	d006      	beq.n	8005414 <UART_SetConfig+0x260>
 8005406:	e00b      	b.n	8005420 <UART_SetConfig+0x26c>
 8005408:	2301      	movs	r3, #1
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e075      	b.n	80054fa <UART_SetConfig+0x346>
 800540e:	2302      	movs	r3, #2
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	e072      	b.n	80054fa <UART_SetConfig+0x346>
 8005414:	2304      	movs	r3, #4
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e06f      	b.n	80054fa <UART_SetConfig+0x346>
 800541a:	2308      	movs	r3, #8
 800541c:	77fb      	strb	r3, [r7, #31]
 800541e:	e06c      	b.n	80054fa <UART_SetConfig+0x346>
 8005420:	2310      	movs	r3, #16
 8005422:	77fb      	strb	r3, [r7, #31]
 8005424:	e069      	b.n	80054fa <UART_SetConfig+0x346>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1c      	ldr	r2, [pc, #112]	; (800549c <UART_SetConfig+0x2e8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d137      	bne.n	80054a0 <UART_SetConfig+0x2ec>
 8005430:	4b14      	ldr	r3, [pc, #80]	; (8005484 <UART_SetConfig+0x2d0>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800543a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800543e:	d017      	beq.n	8005470 <UART_SetConfig+0x2bc>
 8005440:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005444:	d817      	bhi.n	8005476 <UART_SetConfig+0x2c2>
 8005446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544a:	d00b      	beq.n	8005464 <UART_SetConfig+0x2b0>
 800544c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005450:	d811      	bhi.n	8005476 <UART_SetConfig+0x2c2>
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <UART_SetConfig+0x2aa>
 8005456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545a:	d006      	beq.n	800546a <UART_SetConfig+0x2b6>
 800545c:	e00b      	b.n	8005476 <UART_SetConfig+0x2c2>
 800545e:	2300      	movs	r3, #0
 8005460:	77fb      	strb	r3, [r7, #31]
 8005462:	e04a      	b.n	80054fa <UART_SetConfig+0x346>
 8005464:	2302      	movs	r3, #2
 8005466:	77fb      	strb	r3, [r7, #31]
 8005468:	e047      	b.n	80054fa <UART_SetConfig+0x346>
 800546a:	2304      	movs	r3, #4
 800546c:	77fb      	strb	r3, [r7, #31]
 800546e:	e044      	b.n	80054fa <UART_SetConfig+0x346>
 8005470:	2308      	movs	r3, #8
 8005472:	77fb      	strb	r3, [r7, #31]
 8005474:	e041      	b.n	80054fa <UART_SetConfig+0x346>
 8005476:	2310      	movs	r3, #16
 8005478:	77fb      	strb	r3, [r7, #31]
 800547a:	e03e      	b.n	80054fa <UART_SetConfig+0x346>
 800547c:	efff69f3 	.word	0xefff69f3
 8005480:	40011000 	.word	0x40011000
 8005484:	40023800 	.word	0x40023800
 8005488:	40004400 	.word	0x40004400
 800548c:	40004800 	.word	0x40004800
 8005490:	40004c00 	.word	0x40004c00
 8005494:	40005000 	.word	0x40005000
 8005498:	40011400 	.word	0x40011400
 800549c:	40007800 	.word	0x40007800
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a71      	ldr	r2, [pc, #452]	; (800566c <UART_SetConfig+0x4b8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d125      	bne.n	80054f6 <UART_SetConfig+0x342>
 80054aa:	4b71      	ldr	r3, [pc, #452]	; (8005670 <UART_SetConfig+0x4bc>)
 80054ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80054b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054b8:	d017      	beq.n	80054ea <UART_SetConfig+0x336>
 80054ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054be:	d817      	bhi.n	80054f0 <UART_SetConfig+0x33c>
 80054c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c4:	d00b      	beq.n	80054de <UART_SetConfig+0x32a>
 80054c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ca:	d811      	bhi.n	80054f0 <UART_SetConfig+0x33c>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <UART_SetConfig+0x324>
 80054d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d4:	d006      	beq.n	80054e4 <UART_SetConfig+0x330>
 80054d6:	e00b      	b.n	80054f0 <UART_SetConfig+0x33c>
 80054d8:	2300      	movs	r3, #0
 80054da:	77fb      	strb	r3, [r7, #31]
 80054dc:	e00d      	b.n	80054fa <UART_SetConfig+0x346>
 80054de:	2302      	movs	r3, #2
 80054e0:	77fb      	strb	r3, [r7, #31]
 80054e2:	e00a      	b.n	80054fa <UART_SetConfig+0x346>
 80054e4:	2304      	movs	r3, #4
 80054e6:	77fb      	strb	r3, [r7, #31]
 80054e8:	e007      	b.n	80054fa <UART_SetConfig+0x346>
 80054ea:	2308      	movs	r3, #8
 80054ec:	77fb      	strb	r3, [r7, #31]
 80054ee:	e004      	b.n	80054fa <UART_SetConfig+0x346>
 80054f0:	2310      	movs	r3, #16
 80054f2:	77fb      	strb	r3, [r7, #31]
 80054f4:	e001      	b.n	80054fa <UART_SetConfig+0x346>
 80054f6:	2310      	movs	r3, #16
 80054f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005502:	d15b      	bne.n	80055bc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005504:	7ffb      	ldrb	r3, [r7, #31]
 8005506:	2b08      	cmp	r3, #8
 8005508:	d827      	bhi.n	800555a <UART_SetConfig+0x3a6>
 800550a:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <UART_SetConfig+0x35c>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005535 	.word	0x08005535
 8005514:	0800553d 	.word	0x0800553d
 8005518:	08005545 	.word	0x08005545
 800551c:	0800555b 	.word	0x0800555b
 8005520:	0800554b 	.word	0x0800554b
 8005524:	0800555b 	.word	0x0800555b
 8005528:	0800555b 	.word	0x0800555b
 800552c:	0800555b 	.word	0x0800555b
 8005530:	08005553 	.word	0x08005553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005534:	f7ff f846 	bl	80045c4 <HAL_RCC_GetPCLK1Freq>
 8005538:	61b8      	str	r0, [r7, #24]
        break;
 800553a:	e013      	b.n	8005564 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800553c:	f7ff f856 	bl	80045ec <HAL_RCC_GetPCLK2Freq>
 8005540:	61b8      	str	r0, [r7, #24]
        break;
 8005542:	e00f      	b.n	8005564 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005544:	4b4b      	ldr	r3, [pc, #300]	; (8005674 <UART_SetConfig+0x4c0>)
 8005546:	61bb      	str	r3, [r7, #24]
        break;
 8005548:	e00c      	b.n	8005564 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554a:	f7fe ff79 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 800554e:	61b8      	str	r0, [r7, #24]
        break;
 8005550:	e008      	b.n	8005564 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005556:	61bb      	str	r3, [r7, #24]
        break;
 8005558:	e004      	b.n	8005564 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	77bb      	strb	r3, [r7, #30]
        break;
 8005562:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d074      	beq.n	8005654 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	005a      	lsls	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	441a      	add	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	fbb2 f3f3 	udiv	r3, r2, r3
 800557e:	b29b      	uxth	r3, r3
 8005580:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	2b0f      	cmp	r3, #15
 8005586:	d916      	bls.n	80055b6 <UART_SetConfig+0x402>
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558e:	d212      	bcs.n	80055b6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	b29b      	uxth	r3, r3
 8005594:	f023 030f 	bic.w	r3, r3, #15
 8005598:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	085b      	lsrs	r3, r3, #1
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	89fb      	ldrh	r3, [r7, #14]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	89fa      	ldrh	r2, [r7, #14]
 80055b2:	60da      	str	r2, [r3, #12]
 80055b4:	e04e      	b.n	8005654 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	77bb      	strb	r3, [r7, #30]
 80055ba:	e04b      	b.n	8005654 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055bc:	7ffb      	ldrb	r3, [r7, #31]
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d827      	bhi.n	8005612 <UART_SetConfig+0x45e>
 80055c2:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <UART_SetConfig+0x414>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	080055ed 	.word	0x080055ed
 80055cc:	080055f5 	.word	0x080055f5
 80055d0:	080055fd 	.word	0x080055fd
 80055d4:	08005613 	.word	0x08005613
 80055d8:	08005603 	.word	0x08005603
 80055dc:	08005613 	.word	0x08005613
 80055e0:	08005613 	.word	0x08005613
 80055e4:	08005613 	.word	0x08005613
 80055e8:	0800560b 	.word	0x0800560b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ec:	f7fe ffea 	bl	80045c4 <HAL_RCC_GetPCLK1Freq>
 80055f0:	61b8      	str	r0, [r7, #24]
        break;
 80055f2:	e013      	b.n	800561c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f4:	f7fe fffa 	bl	80045ec <HAL_RCC_GetPCLK2Freq>
 80055f8:	61b8      	str	r0, [r7, #24]
        break;
 80055fa:	e00f      	b.n	800561c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055fc:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <UART_SetConfig+0x4c0>)
 80055fe:	61bb      	str	r3, [r7, #24]
        break;
 8005600:	e00c      	b.n	800561c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005602:	f7fe ff1d 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8005606:	61b8      	str	r0, [r7, #24]
        break;
 8005608:	e008      	b.n	800561c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800560a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800560e:	61bb      	str	r3, [r7, #24]
        break;
 8005610:	e004      	b.n	800561c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	77bb      	strb	r3, [r7, #30]
        break;
 800561a:	bf00      	nop
    }

    if (pclk != 0U)
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d018      	beq.n	8005654 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	085a      	lsrs	r2, r3, #1
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	441a      	add	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	fbb2 f3f3 	udiv	r3, r2, r3
 8005634:	b29b      	uxth	r3, r3
 8005636:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b0f      	cmp	r3, #15
 800563c:	d908      	bls.n	8005650 <UART_SetConfig+0x49c>
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005644:	d204      	bcs.n	8005650 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	60da      	str	r2, [r3, #12]
 800564e:	e001      	b.n	8005654 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005660:	7fbb      	ldrb	r3, [r7, #30]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40007c00 	.word	0x40007c00
 8005670:	40023800 	.word	0x40023800
 8005674:	00f42400 	.word	0x00f42400

08005678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01a      	beq.n	800578e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005776:	d10a      	bne.n	800578e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	605a      	str	r2, [r3, #4]
  }
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057cc:	f7fc fd82 	bl	80022d4 <HAL_GetTick>
 80057d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d10e      	bne.n	80057fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f82d 	bl	800584e <UART_WaitOnFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e023      	b.n	8005846 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b04      	cmp	r3, #4
 800580a:	d10e      	bne.n	800582a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800580c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f817 	bl	800584e <UART_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e00d      	b.n	8005846 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800585e:	e05e      	b.n	800591e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d05a      	beq.n	800591e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005868:	f7fc fd34 	bl	80022d4 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	429a      	cmp	r2, r3
 8005876:	d302      	bcc.n	800587e <UART_WaitOnFlagUntilTimeout+0x30>
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d11b      	bne.n	80058b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800588c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0201 	bic.w	r2, r2, #1
 800589c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2220      	movs	r2, #32
 80058a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e043      	b.n	800593e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d02c      	beq.n	800591e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058d2:	d124      	bne.n	800591e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0201 	bic.w	r2, r2, #1
 80058fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2220      	movs	r2, #32
 8005902:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e00f      	b.n	800593e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4013      	ands	r3, r2
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	bf0c      	ite	eq
 800592e:	2301      	moveq	r3, #1
 8005930:	2300      	movne	r3, #0
 8005932:	b2db      	uxtb	r3, r3
 8005934:	461a      	mov	r2, r3
 8005936:	79fb      	ldrb	r3, [r7, #7]
 8005938:	429a      	cmp	r2, r3
 800593a:	d091      	beq.n	8005860 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d027      	beq.n	80059b2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4b2f      	ldr	r3, [pc, #188]	; (8005a28 <FMC_SDRAM_Init+0xe0>)
 800596c:	4013      	ands	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005978:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800597e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005984:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800598a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005990:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005996:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800599c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80059a2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	e032      	b.n	8005a18 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059be:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80059c8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80059ce:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <FMC_SDRAM_Init+0xe0>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80059ec:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80059f2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80059f8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80059fe:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8005a04:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	ffff8000 	.word	0xffff8000

08005a2c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d02e      	beq.n	8005aa4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005a52:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005a62:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005a6c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005a76:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005a80:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005a8a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005a94:	4313      	orrs	r3, r2
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	609a      	str	r2, [r3, #8]
 8005aa2:	e039      	b.n	8005b18 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <FMC_SDRAM_Timing_Init+0xfc>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ad6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ae6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005af0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005afa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005b04:	4313      	orrs	r3, r2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	ff0f0fff 	.word	0xff0f0fff

08005b2c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <FMC_SDRAM_SendCommand+0x44>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	6811      	ldr	r1, [r2, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	6852      	ldr	r2, [r2, #4]
 8005b48:	4311      	orrs	r1, r2
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	6892      	ldr	r2, [r2, #8]
 8005b4e:	3a01      	subs	r2, #1
 8005b50:	0152      	lsls	r2, r2, #5
 8005b52:	4311      	orrs	r1, r2
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	68d2      	ldr	r2, [r2, #12]
 8005b58:	0252      	lsls	r2, r2, #9
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	ffc00000 	.word	0xffc00000

08005b74 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <_ZN7QAD_FMC8imp_initEv>:
//QAD_FMC Initialization Method
//
//To be called from static method init()
//Used to initialize the required GPIOs, FMC driver and SDRAM module
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAD_FMC::imp_init() {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b094      	sub	sp, #80	; 0x50
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]

	//Return if FMC driver is already initialized
	if (m_eState)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <_ZN7QAD_FMC8imp_initEv+0x16>
		return QA_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e0fc      	b.n	8005dac <_ZN7QAD_FMC8imp_initEv+0x210>


	//----------------
	//Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 8005bb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	605a      	str	r2, [r3, #4]
 8005bbc:	609a      	str	r2, [r3, #8]
 8005bbe:	60da      	str	r2, [r3, #12]
 8005bc0:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set pins as alternate function in push-pull mode
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistors on pins
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set pin speed to very high
 8005bca:	2303      	movs	r3, #3
 8005bcc:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_Init.Alternate = GPIO_AF12_FMC;              //Set alternate function to suit use with FMC peripheral
 8005bce:	230c      	movs	r3, #12
 8005bd0:	64fb      	str	r3, [r7, #76]	; 0x4c

	  //Initialize required pins from GPIO port D
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 8005bd2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_Init);
 8005bd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4875      	ldr	r0, [pc, #468]	; (8005db4 <_ZN7QAD_FMC8imp_initEv+0x218>)
 8005be0:	f7fd fa08 	bl	8002ff4 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port E
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8005be4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005be8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 8005bea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4871      	ldr	r0, [pc, #452]	; (8005db8 <_ZN7QAD_FMC8imp_initEv+0x21c>)
 8005bf2:	f7fd f9ff 	bl	8002ff4 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port F
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8005bf6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_Init);
 8005bfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c00:	4619      	mov	r1, r3
 8005c02:	486e      	ldr	r0, [pc, #440]	; (8005dbc <_ZN7QAD_FMC8imp_initEv+0x220>)
 8005c04:	f7fd f9f6 	bl	8002ff4 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port G
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8005c08:	f248 1337 	movw	r3, #33079	; 0x8137
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_Init);
 8005c0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c12:	4619      	mov	r1, r3
 8005c14:	486a      	ldr	r0, [pc, #424]	; (8005dc0 <_ZN7QAD_FMC8imp_initEv+0x224>)
 8005c16:	f7fd f9ed 	bl	8002ff4 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port H
	GPIO_Init.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8005c1a:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8005c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_Init);
 8005c20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c24:	4619      	mov	r1, r3
 8005c26:	4867      	ldr	r0, [pc, #412]	; (8005dc4 <_ZN7QAD_FMC8imp_initEv+0x228>)
 8005c28:	f7fd f9e4 	bl	8002ff4 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port I
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
 8005c2c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8005c30:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8005c32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c36:	4619      	mov	r1, r3
 8005c38:	4863      	ldr	r0, [pc, #396]	; (8005dc8 <_ZN7QAD_FMC8imp_initEv+0x22c>)
 8005c3a:	f7fd f9db 	bl	8002ff4 <HAL_GPIO_Init>

	//-------------------------
	//Initialize FMC Peripheral

	//Initialize FMC Clock
	__HAL_RCC_FMC_CLK_ENABLE();
 8005c3e:	4b63      	ldr	r3, [pc, #396]	; (8005dcc <_ZN7QAD_FMC8imp_initEv+0x230>)
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	4a62      	ldr	r2, [pc, #392]	; (8005dcc <_ZN7QAD_FMC8imp_initEv+0x230>)
 8005c44:	f043 0301 	orr.w	r3, r3, #1
 8005c48:	6393      	str	r3, [r2, #56]	; 0x38
 8005c4a:	4b60      	ldr	r3, [pc, #384]	; (8005dcc <_ZN7QAD_FMC8imp_initEv+0x230>)
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]

	//Fill FMC initialization details into Handle structure
	//NOTE: The settings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	m_sHandle.Instance                = FMC_SDRAM_DEVICE;                     //Set FMC SDRAM Device as required instance
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a5d      	ldr	r2, [pc, #372]	; (8005dd0 <_ZN7QAD_FMC8imp_initEv+0x234>)
 8005c5a:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.SDBank             = FMC_SDRAM_BANK1;                      //Set SDRAM as being connected to FMCs SDRAM bank 1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	639a      	str	r2, [r3, #56]	; 0x38
	m_sHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;          //Set size of column address to 8 bits
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	63da      	str	r2, [r3, #60]	; 0x3c
	m_sHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;            //Set size of row address to 12 bits
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	641a      	str	r2, [r3, #64]	; 0x40
	m_sHandle.Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;           //Set data bus width to 32 bits
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	645a      	str	r2, [r3, #68]	; 0x44
	m_sHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;         //Set number of SDRAM module internal banks to 4
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2240      	movs	r2, #64	; 0x40
 8005c78:	649a      	str	r2, [r3, #72]	; 0x48
	m_sHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;              //Set column address strobe (CAS) latency to 3 cycles
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005c80:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;   //Disable write protection, as we want to be able to both read and write to SDRAM
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	651a      	str	r2, [r3, #80]	; 0x50
	m_sHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;             //Set SDRAM clock period to 2 clock cycles
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c8e:	655a      	str	r2, [r3, #84]	; 0x54
	m_sHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;              //Enable read burst
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c96:	659a      	str	r2, [r3, #88]	; 0x58
	m_sHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;              //Set read pipe delay to 0 clock cycles
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	65da      	str	r2, [r3, #92]	; 0x5c

	//Fill SDRAM timing details into timing structure
	//NOTE: The timings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	FMC_SDRAM_TimingTypeDef SDRAM_Timing = {0};
 8005c9e:	f107 0320 	add.w	r3, r7, #32
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	609a      	str	r2, [r3, #8]
 8005caa:	60da      	str	r2, [r3, #12]
 8005cac:	611a      	str	r2, [r3, #16]
 8005cae:	615a      	str	r2, [r3, #20]
 8005cb0:	619a      	str	r2, [r3, #24]
	SDRAM_Timing.LoadToActiveDelay    = 2;  //Set delay between a Load Mode Register command and an Active or Refresh command to 2 clock cycles
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	623b      	str	r3, [r7, #32]
	SDRAM_Timing.ExitSelfRefreshDelay = 7;  //Set delay between releasing Self Refresh command and issuing of Active command to 7 clock cycles
 8005cb6:	2307      	movs	r3, #7
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
	SDRAM_Timing.SelfRefreshTime      = 4;  //Set minimum Self Refresh period to 4 clock cycles
 8005cba:	2304      	movs	r3, #4
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
	SDRAM_Timing.RowCycleDelay        = 7;  //Set delay between Refresh command and Activate command, or between consecutive Refresh commands to 7 clock cycles
 8005cbe:	2307      	movs	r3, #7
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SDRAM_Timing.WriteRecoveryTime    = 2;  //Set Write Recovery Time to 2 clock cycles
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	633b      	str	r3, [r7, #48]	; 0x30
	SDRAM_Timing.RPDelay              = 2;  //Set delay between a Precharge command and any other command to 2 clock cycles
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	637b      	str	r3, [r7, #52]	; 0x34
	SDRAM_Timing.RCDDelay             = 2;  //Set delay between an Activate command and a Read/Write command to 2 clock cycles
 8005cca:	2302      	movs	r3, #2
 8005ccc:	63bb      	str	r3, [r7, #56]	; 0x38

	//Initialize the FMC peripheral using the required settings and timings to suit the specific SDRAM module
	if (HAL_SDRAM_Init(&m_sHandle, &SDRAM_Timing) != HAL_OK) {
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3334      	adds	r3, #52	; 0x34
 8005cd2:	f107 0220 	add.w	r2, r7, #32
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff f946 	bl	8004f6a <HAL_SDRAM_Init>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	bf14      	ite	ne
 8005ce4:	2301      	movne	r3, #1
 8005ce6:	2300      	moveq	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <_ZN7QAD_FMC8imp_initEv+0x156>
		return QA_Fail;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e05c      	b.n	8005dac <_ZN7QAD_FMC8imp_initEv+0x210>
	}

  //-------------------
	//Initialize SDRAM IC

	FMC_SDRAM_CommandTypeDef  SDRAM_Cmd = {0};
 8005cf2:	f107 0310 	add.w	r3, r7, #16
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	605a      	str	r2, [r3, #4]
 8005cfc:	609a      	str	r2, [r3, #8]
 8005cfe:	60da      	str	r2, [r3, #12]

		//Send command to SDRAM module to enable its clock
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;   //Set to Clock Enable Command
 8005d00:	2301      	movs	r3, #1
 8005d02:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005d04:	2310      	movs	r3, #16
 8005d06:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8005d10:	f107 0310 	add.w	r3, r7, #16
 8005d14:	4619      	mov	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f890 	bl	8005e3c <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Delay for 1ms to allow time for SDRAM clock to enable
	HAL_Delay(1);
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	f7fc fae5 	bl	80022ec <HAL_Delay>

		//Send command to SDRAM module to precharge all banks
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_PALL;  //Set to Precharge All command
 8005d22:	2302      	movs	r3, #2
 8005d24:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005d26:	2310      	movs	r3, #16
 8005d28:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8005d32:	f107 0310 	add.w	r3, r7, #16
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f87f 	bl	8005e3c <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Send command to SDRAM module to Configure Auto Refresh
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; //Set to Auto Refresh Mode command
 8005d3e:	2303      	movs	r3, #3
 8005d40:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005d42:	2310      	movs	r3, #16
 8005d44:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 8;                              //Set number of consecutive auto refresh commands to 8
 8005d46:	2308      	movs	r3, #8
 8005d48:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8005d4e:	f107 0310 	add.w	r3, r7, #16
 8005d52:	4619      	mov	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f871 	bl	8005e3c <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Program Mode Register
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;        //Set to Load Mode Register command
 8005d5a:	2304      	movs	r3, #4
 8005d5c:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005d5e:	2310      	movs	r3, #16
 8005d60:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 8005d62:	2301      	movs	r3, #1
 8005d64:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681a      	ldr	r2, [r3, #0]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8005d6e:	431a      	orrs	r2, r3
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	69db      	ldr	r3, [r3, #28]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 8005d74:	431a      	orrs	r2, r3
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 8005d7a:	431a      	orrs	r2, r3
																		 m_uModeReg_WriteBurst_Single;   //Set write burst length to 1 32bit word
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 8005d80:	4313      	orrs	r3, r2
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8005d82:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8005d84:	f107 0310 	add.w	r3, r7, #16
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f856 	bl	8005e3c <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>


	//---------------------------------
	//Program SDRAM module refresh rate
	HAL_SDRAM_ProgramRefreshRate(&m_sHandle, m_uRefresh);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f7ff f94d 	bl	800503c <HAL_SDRAM_ProgramRefreshRate>

	//Set Driver State
	m_eState = QA_Initialized; //Set driver as being initializeed
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	//Return
	return QA_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3750      	adds	r7, #80	; 0x50
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40020c00 	.word	0x40020c00
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	40021400 	.word	0x40021400
 8005dc0:	40021800 	.word	0x40021800
 8005dc4:	40021c00 	.word	0x40021c00
 8005dc8:	40022000 	.word	0x40022000
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	a0000140 	.word	0xa0000140

08005dd4 <_ZN7QAD_FMC8imp_testEv>:
//QAD_FMC::imp_test
//QAD_FMC Test Method
//
//Used to perform read and write test of full 16 megabytes of SDRAM
//Returns QA_OK if test passes, or QA_Fail if test is not successful
QA_Result QAD_FMC::imp_test(void) {
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]

	//Write values to whole 16 megabytes of SDRAM
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005de6:	d209      	bcs.n	8005dfc <_ZN7QAD_FMC8imp_testEv+0x28>
		QAD_FMC_Data->words[i] = i;
 8005de8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	e7f1      	b.n	8005de0 <_ZN7QAD_FMC8imp_testEv+0xc>
	}

	//Read values from while 16 megabytes of SDRAM, and confirm that they match the values that were written to it
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60bb      	str	r3, [r7, #8]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e06:	d212      	bcs.n	8005e2e <_ZN7QAD_FMC8imp_testEv+0x5a>

		//If data read doesn't match data written then return QA_Fail
		if (QAD_FMC_Data->words[i] != i)
 8005e08:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	bf14      	ite	ne
 8005e18:	2301      	movne	r3, #1
 8005e1a:	2300      	moveq	r3, #0
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <_ZN7QAD_FMC8imp_testEv+0x52>
			return QA_Fail;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e004      	b.n	8005e30 <_ZN7QAD_FMC8imp_testEv+0x5c>
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	e7e8      	b.n	8005e00 <_ZN7QAD_FMC8imp_testEv+0x2c>
	}

	//Return QA_OK as if we reach this point then the test has passed
	return QA_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>:
//QAD_FMC::cmd
//QAD_FMC Initialization Method
//
//Used to send commands to SDRAM module
//pCmd - FMC_SDRAM_CommandTypeDef containing details of command to be sent to SDRAM module
void QAD_FMC::cmd(FMC_SDRAM_CommandTypeDef& pCmd) {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
	HAL_SDRAM_SendCommand(&m_sHandle, &pCmd, m_uTimeout);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	461a      	mov	r2, r3
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	f7ff f8c7 	bl	8004fe6 <HAL_SDRAM_SendCommand>
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	88fa      	ldrh	r2, [r7, #6]
 8005e78:	809a      	strh	r2, [r3, #4]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	719a      	strb	r2, [r3, #6]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	609a      	str	r2, [r3, #8]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	60da      	str	r2, [r3, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f841 	bl	8005f1a <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	889b      	ldrh	r3, [r3, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	f7fd fb55 	bl	8003564 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	741a      	strb	r2, [r3, #16]
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	889b      	ldrh	r3, [r3, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	4619      	mov	r1, r3
 8005edc:	f7fd fb42 	bl	8003564 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	741a      	strb	r2, [r3, #16]
}
 8005ee6:	bf00      	nop
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	7c1b      	ldrb	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d107      	bne.n	8005f12 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff ffe0 	bl	8005ec8 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8005f08:	e003      	b.n	8005f12 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff ffc9 	bl	8005ea2 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8005f10:	bf00      	nop
	}
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b088      	sub	sp, #32
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8005f22:	f107 030c 	add.w	r3, r7, #12
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	605a      	str	r2, [r3, #4]
 8005f2c:	609a      	str	r2, [r3, #8]
 8005f2e:	60da      	str	r2, [r3, #12]
 8005f30:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	889b      	ldrh	r3, [r3, #4]
 8005f36:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	799b      	ldrb	r3, [r3, #6]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8005f40:	2311      	movs	r3, #17
 8005f42:	e000      	b.n	8005f46 <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8005f44:	2301      	movs	r3, #1
 8005f46:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f107 020c 	add.w	r2, r7, #12
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fd f848 	bl	8002ff4 <HAL_GPIO_Init>
}
 8005f64:	bf00      	nop
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Input Constructor
//
//This method will initialize the required GPIO pin with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Input::QAD_GPIO_Input(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	4613      	mov	r3, r2
 8005f78:	80fb      	strh	r3, [r7, #6]
		m_pGPIO(pGPIO),
		m_uPin(uPin),
		m_ePullMode(QAD_GPIO_PullMode_NoPull) {
 8005f7a:	4a0a      	ldr	r2, [pc, #40]	; (8005fa4 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft+0x38>)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	605a      	str	r2, [r3, #4]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	88fa      	ldrh	r2, [r7, #6]
 8005f8a:	811a      	strh	r2, [r3, #8]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	60da      	str	r2, [r3, #12]

	//Initialize the GPIO pin
	periphInit();
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 f817 	bl	8005fc6 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	080098d8 	.word	0x080098d8

08005fa8 <_ZN14QAD_GPIO_Input11setPullModeE17QAD_GPIO_PullMode>:
//QAD_GPIO_Input::setPullMode
//QAD_GPIO_Input Control Method
//
//Sets new pull mode (Pull-up, Pull-down or No-pull)
//ePull - New pull mode. Member of QAD_GPIO_PullMode as defined in QAD_GPIO.hpp
void QAD_GPIO_Input::setPullMode(QAD_GPIO_PullMode ePull) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]

	//Store new Pull mode setting
	m_ePullMode = ePull;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	60da      	str	r2, [r3, #12]

	//Reinitialize peripheral with new Pull mode
	periphInit();
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f804 	bl	8005fc6 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8005fbe:	bf00      	nop
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <_ZN14QAD_GPIO_Input10periphInitEv>:
//QAD_GPIO_Input::periphInit
//QAD_GPIO_Input Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Input::periphInit(void) {
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b088      	sub	sp, #32
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_Init = {0};
 8005fce:	f107 030c 	add.w	r3, r7, #12
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	605a      	str	r2, [r3, #4]
 8005fd8:	609a      	str	r2, [r3, #8]
 8005fda:	60da      	str	r2, [r3, #12]
 8005fdc:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	891b      	ldrh	r3, [r3, #8]
 8005fe2:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = GPIO_MODE_INPUT;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f107 020c 	add.w	r2, r7, #12
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fc fff9 	bl	8002ff4 <HAL_GPIO_Init>
}
 8006002:	bf00      	nop
 8006004:	3720      	adds	r7, #32
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <_ZN8QAD_LTDCC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_LTDC() :
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized) {}
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f646 3225 	movw	r2, #27429	; 0x6b25
 800601e:	605a      	str	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f24f 4224 	movw	r2, #62500	; 0xf424
 8006026:	609a      	str	r2, [r3, #8]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f643 5209 	movw	r2, #15625	; 0x3d09
 800602e:	60da      	str	r2, [r3, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <_ZN8QAD_LTDC3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_LTDC& get(void) {
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
		static QAD_LTDC instance;
 8006044:	4b10      	ldr	r3, [pc, #64]	; (8006088 <_ZN8QAD_LTDC3getEv+0x48>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	f3bf 8f5b 	dmb	ish
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	bf0c      	ite	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	2300      	movne	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d010      	beq.n	8006082 <_ZN8QAD_LTDC3getEv+0x42>
 8006060:	4809      	ldr	r0, [pc, #36]	; (8006088 <_ZN8QAD_LTDC3getEv+0x48>)
 8006062:	f002 fcd2 	bl	8008a0a <__cxa_guard_acquire>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	bf14      	ite	ne
 800606c:	2301      	movne	r3, #1
 800606e:	2300      	moveq	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <_ZN8QAD_LTDC3getEv+0x42>
 8006076:	4805      	ldr	r0, [pc, #20]	; (800608c <_ZN8QAD_LTDC3getEv+0x4c>)
 8006078:	f7ff ffc7 	bl	800600a <_ZN8QAD_LTDCC1Ev>
 800607c:	4802      	ldr	r0, [pc, #8]	; (8006088 <_ZN8QAD_LTDC3getEv+0x48>)
 800607e:	f002 fcd0 	bl	8008a22 <__cxa_guard_release>
		return instance;
 8006082:	4b02      	ldr	r3, [pc, #8]	; (800608c <_ZN8QAD_LTDC3getEv+0x4c>)
	}
 8006084:	4618      	mov	r0, r3
 8006086:	bd80      	pop	{r7, pc}
 8006088:	200002a8 	.word	0x200002a8
 800608c:	2000015c 	.word	0x2000015c

08006090 <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>:
	//Communication Methods

	//Used to allow OTM8009A driver (in otm8009a.h file) to communicate with OTM8009A display controller via DSI
	//uNumParams - The number of parameters being supplied
	//pParams    - Pointer to the list of parameters to be supplied
	static void dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
		get().imp_dsi_IO_WriteCmd(uNumParams, pParams);
 800609a:	f7ff ffd1 	bl	8006040 <_ZN8QAD_LTDC3getEv>
 800609e:	4603      	mov	r3, r0
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 faeb 	bl	8006680 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>
	}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <_ZN8QAD_LTDC8imp_initEv>:
//QAD_LTDC Initialization Method
//
//To be called from static method init()
//Used to initialize the DSI and LTDC peripherals, LTDC layers, the OTM8009A display controller and the required reset and backlight control GPIO pins
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails.
QA_Result QAD_LTDC::imp_init(void) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b0a2      	sub	sp, #136	; 0x88
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]

  //Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 80060bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	605a      	str	r2, [r3, #4]
 80060c6:	609a      	str	r2, [r3, #8]
 80060c8:	60da      	str	r2, [r3, #12]
 80060ca:	611a      	str	r2, [r3, #16]

	  //Initialize Backlight Control Pin
	GPIO_Init.Pin    = QAD_LTDC_BACKLIGHT_PIN;          //Set pin number. (QAD_LTDC_BACKLIGHT_PIN is defined in setup.hpp)
 80060cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060d0:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 80060d2:	2301      	movs	r3, #1
 80060d4:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLDOWN;                   //Enable pull-down resistor so backlight defaults to off
 80060d6:	2302      	movs	r3, #2
 80060d8:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 80060da:	2300      	movs	r3, #0
 80060dc:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_BACKLIGHT_PORT, &GPIO_Init); //Initialize pin. (QAD_LTDC_BACKLIGHT_PORT is defined in setup.hpp)
 80060de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80060e2:	4619      	mov	r1, r3
 80060e4:	4897      	ldr	r0, [pc, #604]	; (8006344 <_ZN8QAD_LTDC8imp_initEv+0x290>)
 80060e6:	f7fc ff85 	bl	8002ff4 <HAL_GPIO_Init>

		//Initialize OTM8009A Controller Reset Pin
	GPIO_Init.Pin    = QAD_LTDC_RESET_PIN;              //Set pin number. (QAD_LTDC_RESET_PIN is defined in setup.hpp)
 80060ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ee:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 80060f0:	2301      	movs	r3, #1
 80060f2:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLUP;                     //Enable pull-up resistor as reset is active-low
 80060f4:	2301      	movs	r3, #1
 80060f6:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 80060f8:	2300      	movs	r3, #0
 80060fa:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_RESET_PORT, &GPIO_Init);     //Initialize pin. (QAD_LTDC_RESET_PORT is defined in setup.hpp)
 80060fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006100:	4619      	mov	r1, r3
 8006102:	4891      	ldr	r0, [pc, #580]	; (8006348 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8006104:	f7fc ff76 	bl	8002ff4 <HAL_GPIO_Init>


	//Reset OTM8009A Controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET); //Pull reset pin low
 8006108:	2200      	movs	r2, #0
 800610a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800610e:	488e      	ldr	r0, [pc, #568]	; (8006348 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8006110:	f7fd fa28 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_Delay(20);                                                              //Delay for 20ms to allow for reset process
 8006114:	2014      	movs	r0, #20
 8006116:	f7fc f8e9 	bl	80022ec <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);   //Pull reset pin high
 800611a:	2201      	movs	r2, #1
 800611c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006120:	4889      	ldr	r0, [pc, #548]	; (8006348 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8006122:	f7fd fa1f 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_Delay(10);                                                              //Delay for 10ms to allow reset process time to complete
 8006126:	200a      	movs	r0, #10
 8006128:	f7fc f8e0 	bl	80022ec <HAL_Delay>


	//Initialize LTDC Peripheral Clock
	__HAL_RCC_LTDC_CLK_ENABLE();
 800612c:	4b87      	ldr	r3, [pc, #540]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 800612e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006130:	4a86      	ldr	r2, [pc, #536]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8006132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006136:	6453      	str	r3, [r2, #68]	; 0x44
 8006138:	4b84      	ldr	r3, [pc, #528]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_LTDC_FORCE_RESET();
 8006144:	4b81      	ldr	r3, [pc, #516]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	4a80      	ldr	r2, [pc, #512]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 800614a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800614e:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_LTDC_RELEASE_RESET();
 8006150:	4b7e      	ldr	r3, [pc, #504]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	4a7d      	ldr	r2, [pc, #500]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8006156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800615a:	6253      	str	r3, [r2, #36]	; 0x24

	//Initialize DSI Peripheral Clock
	__HAL_RCC_DSI_CLK_ENABLE();
 800615c:	4b7b      	ldr	r3, [pc, #492]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 800615e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006160:	4a7a      	ldr	r2, [pc, #488]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8006162:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006166:	6453      	str	r3, [r2, #68]	; 0x44
 8006168:	4b78      	ldr	r3, [pc, #480]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 800616a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DSI_FORCE_RESET();
 8006174:	4b75      	ldr	r3, [pc, #468]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	4a74      	ldr	r2, [pc, #464]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 800617a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800617e:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_DSI_RELEASE_RESET();
 8006180:	4b72      	ldr	r3, [pc, #456]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	4a71      	ldr	r2, [pc, #452]	; (800634c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8006186:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800618a:	6253      	str	r3, [r2, #36]	; 0x24

	//Prepare Instances for DSI and LTDC handles (required if needing to call imp_deinit() due to failed initialization)
  m_sDSIHandle.Instance = DSI;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a70      	ldr	r2, [pc, #448]	; (8006350 <_ZN8QAD_LTDC8imp_initEv+0x29c>)
 8006190:	611a      	str	r2, [r3, #16]
  m_sLTDCHandle.Instance = LTDC;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a6f      	ldr	r2, [pc, #444]	; (8006354 <_ZN8QAD_LTDC8imp_initEv+0x2a0>)
 8006196:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  //-------------------------
  //Initialize DSI peripheral

  //Confirm DSI is currently uninitialized
  HAL_DSI_DeInit(&m_sDSIHandle);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3310      	adds	r3, #16
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fc fb6e 	bl	8002880 <HAL_DSI_DeInit>

  //Fill out DSI PLL Initialization structure as required for DSI to operate at required clock speed
  DSI_PLLInitTypeDef DSI_PLLInit = {0};
 80061a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	605a      	str	r2, [r3, #4]
 80061ae:	609a      	str	r2, [r3, #8]
  DSI_PLLInit.PLLNDIV = 100;
 80061b0:	2364      	movs	r3, #100	; 0x64
 80061b2:	64bb      	str	r3, [r7, #72]	; 0x48
  DSI_PLLInit.PLLIDF  = DSI_PLL_IN_DIV5;
 80061b4:	2305      	movs	r3, #5
 80061b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  DSI_PLLInit.PLLODF  = DSI_PLL_OUT_DIV1;
 80061b8:	2300      	movs	r3, #0
 80061ba:	653b      	str	r3, [r7, #80]	; 0x50

  //Fill out required DSI initialization details
  m_sDSIHandle.Init.NumberOfLanes = DSI_TWO_DATA_LANES;                   //Set DSI as using two data lanes
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	61da      	str	r2, [r3, #28]
  m_sDSIHandle.Init.TXEscapeCkdiv = m_uLCDLaneByteClk / m_uLCDClkDivisor; //Set TX Escape Clock Division
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	619a      	str	r2, [r3, #24]

  //Initialize DSI, calling imp_deinit() if initialization fails
  if (HAL_DSI_Init(&m_sDSIHandle, &DSI_PLLInit) != HAL_OK) {
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3310      	adds	r3, #16
 80061d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061da:	4611      	mov	r1, r2
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fc fa35 	bl	800264c <HAL_DSI_Init>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	bf14      	ite	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	2300      	moveq	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <_ZN8QAD_LTDC8imp_initEv+0x148>
  	imp_deinit();
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f9e4 	bl	80065c0 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e1db      	b.n	80065b4 <_ZN8QAD_LTDC8imp_initEv+0x500>

  //----------------------------------
  //Initialize DSI video configuration

  //Generate base DSI timing parameters
  uint32_t HACT = QAD_LTDC_WIDTH;    //Horizontal Active period in pixels
 80061fc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t VACT = QAD_LTDC_HEIGHT;   //Vertical Active period in pixels
 8006204:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006208:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t VSA  = 12;                //Period that vertical sync is active in pixels
 800620c:	230c      	movs	r3, #12
 800620e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t VBP  = 12;                //Vertical Back Porch in pixels
 8006210:	230c      	movs	r3, #12
 8006212:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t VFP  = 12;                //Vertical Front Porch in pixels
 8006214:	230c      	movs	r3, #12
 8006216:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t HSA  = 63;                //Period that horizontal sync is active in pixels
 8006218:	233f      	movs	r3, #63	; 0x3f
 800621a:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t HBP  = 120;               //Horizontal Back Porch in pixels
 800621c:	2378      	movs	r3, #120	; 0x78
 800621e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t HFP  = 120;               //Horizontal Front Porch in pixels
 8006220:	2378      	movs	r3, #120	; 0x78
 8006222:	66bb      	str	r3, [r7, #104]	; 0x68

  //Fill out details of DSI Configuration Handle
  m_sDSICfgHandle.VirtualChannelID             = 0;                                      //Set virtual channel ID
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	62da      	str	r2, [r3, #44]	; 0x2c
  m_sDSICfgHandle.ColorCoding                  = DSI_RGB888;                             //Set pixel format to 24bit RGB (8bits for each Red, Green and Blue)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2205      	movs	r2, #5
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
  m_sDSICfgHandle.VSPolarity                   = DSI_VSYNC_ACTIVE_HIGH;                  //Set Vertical Sync signal to active high
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	64da      	str	r2, [r3, #76]	; 0x4c
  m_sDSICfgHandle.HSPolarity                   = DSI_HSYNC_ACTIVE_HIGH;                  //Set Horizontal Sync signal to active high
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	649a      	str	r2, [r3, #72]	; 0x48
  m_sDSICfgHandle.DEPolarity                   = DSI_DATA_ENABLE_ACTIVE_HIGH;            //Set Data Enable signal to active high
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	651a      	str	r2, [r3, #80]	; 0x50
  m_sDSICfgHandle.Mode                         = DSI_VID_MODE_BURST;                     //Set Video Mode to burst mode
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	639a      	str	r2, [r3, #56]	; 0x38
  m_sDSICfgHandle.NullPacketSize               = 0xFFF;                                  //Set null packet size
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800624e:	645a      	str	r2, [r3, #68]	; 0x44
  m_sDSICfgHandle.NumberOfChunks               = 0;                                      //Set number of chunks
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	641a      	str	r2, [r3, #64]	; 0x40
  m_sDSICfgHandle.PacketSize                   = HACT;                                   //Set packet size to horizontal active period
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800625c:	63da      	str	r2, [r3, #60]	; 0x3c

  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006264:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 800626c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	655a      	str	r2, [r3, #84]	; 0x54

  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800627a:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 8006282:	fbb2 f2f3 	udiv	r2, r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	659a      	str	r2, [r3, #88]	; 0x58

  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 800628a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800628e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006290:	441a      	add	r2, r3
 8006292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006294:	441a      	add	r2, r3
 8006296:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006298:	4413      	add	r3, r2
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6892      	ldr	r2, [r2, #8]
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 800629e:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	fbb2 f2f3 	udiv	r2, r2, r3
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	65da      	str	r2, [r3, #92]	; 0x5c

  m_sDSICfgHandle.VerticalSyncActive           = VSA;                                    //Set duration for vertical sync signal
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80062b2:	661a      	str	r2, [r3, #96]	; 0x60
  m_sDSICfgHandle.VerticalBackPorch            = VBP;                                    //Set duration for vertical back porch
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062b8:	665a      	str	r2, [r3, #100]	; 0x64
  m_sDSICfgHandle.VerticalFrontPorch           = VFP;                                    //Set duration for vertical front porch
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80062be:	669a      	str	r2, [r3, #104]	; 0x68
  m_sDSICfgHandle.VerticalActive               = VACT;                                   //Set duration of vertical active period
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062c6:	66da      	str	r2, [r3, #108]	; 0x6c

  m_sDSICfgHandle.LPCommandEnable              = DSI_LP_COMMAND_ENABLE;  //Enable DSI low power command
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80062ce:	671a      	str	r2, [r3, #112]	; 0x70
  m_sDSICfgHandle.LPLargestPacketSize          = 16;                     //Set largest packet size for low power commands during VSA, VBP and VFP periods.
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2210      	movs	r2, #16
 80062d4:	675a      	str	r2, [r3, #116]	; 0x74
  m_sDSICfgHandle.LPVACTLargestPacketSize      = 0;                      //Set largest packet size for low power commands during VACT period
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	679a      	str	r2, [r3, #120]	; 0x78
  m_sDSICfgHandle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;      //Enable low power horizontal front porch
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80062e2:	67da      	str	r2, [r3, #124]	; 0x7c
  m_sDSICfgHandle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;      //Enable low power horizontal back porch
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  m_sDSICfgHandle.LPVerticalActiveEnable       = DSI_LP_VACT_ENABLE;     //Enable low power vertical active
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  m_sDSICfgHandle.LPVerticalFrontPorchEnable   = DSI_LP_VFP_ENABLE;      //Enable low power vertical front porch
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  m_sDSICfgHandle.LPVerticalBackPorchEnable    = DSI_LP_VBP_ENABLE;      //Enable low power vertical back porch
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  m_sDSICfgHandle.LPVerticalSyncActiveEnable   = DSI_LP_VSYNC_ENABLE;    //Enable low power vertical sync
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006312:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  //Configure DSI Video Mode,
  if (HAL_DSI_ConfigVideoMode(&m_sDSIHandle, &m_sDSICfgHandle) != HAL_OK) {
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f103 0210 	add.w	r2, r3, #16
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	332c      	adds	r3, #44	; 0x2c
 8006320:	4619      	mov	r1, r3
 8006322:	4610      	mov	r0, r2
 8006324:	f7fc fb34 	bl	8002990 <HAL_DSI_ConfigVideoMode>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	bf14      	ite	ne
 800632e:	2301      	movne	r3, #1
 8006330:	2300      	moveq	r3, #0
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00f      	beq.n	8006358 <_ZN8QAD_LTDC8imp_initEv+0x2a4>
  	imp_deinit();
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f941 	bl	80065c0 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 800633e:	2301      	movs	r3, #1
 8006340:	e138      	b.n	80065b4 <_ZN8QAD_LTDC8imp_initEv+0x500>
 8006342:	bf00      	nop
 8006344:	40022000 	.word	0x40022000
 8006348:	40022400 	.word	0x40022400
 800634c:	40023800 	.word	0x40023800
 8006350:	40016c00 	.word	0x40016c00
 8006354:	40016800 	.word	0x40016800

  //--------------------------
  //Initialize LTDC Peripheral

  //Fill out details for LTDC initialization
  m_sLTDCHandle.Init.HorizontalSync     = (HSA - 1);                              //Set horizontal syncronization width
 8006358:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800635a:	1e5a      	subs	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  m_sLTDCHandle.Init.AccumulatedHBP     = (HSA + HBP - 1);                        //Set accumulated horizontal back porch width
 8006362:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006366:	4413      	add	r3, r2
 8006368:	1e5a      	subs	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  m_sLTDCHandle.Init.AccumulatedActiveW = (QAD_LTDC_WIDTH + HSA + HBP - 1);       //Set accumulated active width
 8006370:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006374:	4413      	add	r3, r2
 8006376:	f203 321f 	addw	r2, r3, #799	; 0x31f
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  m_sLTDCHandle.Init.TotalWidth         = (QAD_LTDC_WIDTH + HSA + HBP + HFP - 1); //Set total width
 8006380:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006384:	441a      	add	r2, r3
 8006386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006388:	4413      	add	r3, r2
 800638a:	f203 321f 	addw	r2, r3, #799	; 0x31f
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  m_sLTDCHandle.LayerCfg->ImageWidth    = QAD_LTDC_WIDTH;                         //Sets the frame buffer line length (in pixels)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f44f 7248 	mov.w	r2, #800	; 0x320
 800639a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  m_sLTDCHandle.LayerCfg->ImageHeight   = QAD_LTDC_HEIGHT;                        //Sets the number of frame buffer lines (height in pixels)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80063a4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  m_sLTDCHandle.Init.Backcolor.Red      = 0;                                      //Set background color red value
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
  m_sLTDCHandle.Init.Backcolor.Green    = 0;                                      //Set background color green value
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
  m_sLTDCHandle.Init.Backcolor.Blue     = 255;                                    //Set background color blue value
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	22ff      	movs	r2, #255	; 0xff
 80063bc:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  m_sLTDCHandle.Init.PCPolarity         = LTDC_PCPOLARITY_IPC;                    //Set pixel clock polarity to non-inverted
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  //Complete initialization structre details based on DSI Configuration, calling imp_deinit() if failed
  if (HAL_LTDC_StructInitFromVideoConfig(&m_sLTDCHandle, &m_sDSICfgHandle) != HAL_OK) {
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	332c      	adds	r3, #44	; 0x2c
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f7fd fbe9 	bl	8003bac <HAL_LTDCEx_StructInitFromVideoConfig>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <_ZN8QAD_LTDC8imp_initEv+0x340>
  	imp_deinit();
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f8e8 	bl	80065c0 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0df      	b.n	80065b4 <_ZN8QAD_LTDC8imp_initEv+0x500>
  }

  //Initialize LTDC Peripheral
  if (HAL_LTDC_Init(&m_sLTDCHandle) != HAL_OK) {
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3398      	adds	r3, #152	; 0x98
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fd f8cd 	bl	8003598 <HAL_LTDC_Init>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	bf14      	ite	ne
 8006404:	2301      	movne	r3, #1
 8006406:	2300      	moveq	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d004      	beq.n	8006418 <_ZN8QAD_LTDC8imp_initEv+0x364>
  	imp_deinit();
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f8d6 	bl	80065c0 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8006414:	2301      	movs	r3, #1
 8006416:	e0cd      	b.n	80065b4 <_ZN8QAD_LTDC8imp_initEv+0x500>

    //-------
    //Layer 0

  //Set pointer address for layer 0 double buffer
  m_pLayer0Ptr = (void*)0xC0000000;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800641e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

  //Clear Layer Config structure
  LTDC_Layer = {0};
 8006422:	f107 0314 	add.w	r3, r7, #20
 8006426:	2234      	movs	r2, #52	; 0x34
 8006428:	2100      	movs	r1, #0
 800642a:	4618      	mov	r0, r3
 800642c:	f002 fba2 	bl	8008b74 <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 8006434:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006438:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 800643e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006442:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 8006444:	2304      	movs	r3, #4
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800644e:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 8006450:	23ff      	movs	r3, #255	; 0xff
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 8006454:	2300      	movs	r3, #0
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 8006458:	2300      	movs	r3, #0
 800645a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 800646a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800646e:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 8006470:	2307      	movs	r3, #7
 8006472:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 8006474:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006478:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 800647a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800647e:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 0 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 0) != HAL_OK) {
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3398      	adds	r3, #152	; 0x98
 8006484:	f107 0114 	add.w	r1, r7, #20
 8006488:	2200      	movs	r2, #0
 800648a:	4618      	mov	r0, r3
 800648c:	f7fd f980 	bl	8003790 <HAL_LTDC_ConfigLayer>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	bf14      	ite	ne
 8006496:	2301      	movne	r3, #1
 8006498:	2300      	moveq	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d004      	beq.n	80064aa <_ZN8QAD_LTDC8imp_initEv+0x3f6>
		imp_deinit();
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f88d 	bl	80065c0 <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e084      	b.n	80065b4 <_ZN8QAD_LTDC8imp_initEv+0x500>

	  //-------
	  //Layer 1

  //Set pointer address for layer 1 doube buffer
	m_pLayer1Ptr = (void*)((uint32_t)m_pLayer0Ptr + (QAD_LTDC_BUFFERSIZE*2));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80064b0:	461a      	mov	r2, r3
 80064b2:	4b42      	ldr	r3, [pc, #264]	; (80065bc <_ZN8QAD_LTDC8imp_initEv+0x508>)
 80064b4:	4413      	add	r3, r2
 80064b6:	461a      	mov	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  //Clear Layer Config structure
  LTDC_Layer = {0};
 80064be:	f107 0314 	add.w	r3, r7, #20
 80064c2:	2234      	movs	r2, #52	; 0x34
 80064c4:	2100      	movs	r1, #0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f002 fb54 	bl	8008b74 <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 80064d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80064d4:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 80064da:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80064de:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 80064e0:	2304      	movs	r3, #4
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80064ea:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 80064ec:	23ff      	movs	r3, #255	; 0xff
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 80064f0:	2300      	movs	r3, #0
 80064f2:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 8006506:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800650a:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 800650c:	2307      	movs	r3, #7
 800650e:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 8006510:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006514:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 8006516:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800651a:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 1 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 1) != HAL_OK) {
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3398      	adds	r3, #152	; 0x98
 8006520:	f107 0114 	add.w	r1, r7, #20
 8006524:	2201      	movs	r2, #1
 8006526:	4618      	mov	r0, r3
 8006528:	f7fd f932 	bl	8003790 <HAL_LTDC_ConfigLayer>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	bf14      	ite	ne
 8006532:	2301      	movne	r3, #1
 8006534:	2300      	moveq	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <_ZN8QAD_LTDC8imp_initEv+0x492>
		imp_deinit();
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f83f 	bl	80065c0 <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 8006542:	2301      	movs	r3, #1
 8006544:	e036      	b.n	80065b4 <_ZN8QAD_LTDC8imp_initEv+0x500>
	}


	//-------------------------------
	//Enable LTDC Layer 0 and Layer 1
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 0);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800654c:	3384      	adds	r3, #132	; 0x84
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8006556:	3284      	adds	r2, #132	; 0x84
 8006558:	f043 0301 	orr.w	r3, r3, #1
 800655c:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006564:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8006570:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	6013      	str	r3, [r2, #0]


	//---------------------
	//Enable DSI Peripheral
	HAL_DSI_Start(&m_sDSIHandle);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3310      	adds	r3, #16
 800657e:	4618      	mov	r0, r3
 8006580:	f7fc fc06 	bl	8002d90 <HAL_DSI_Start>


	//--------------------------------------
	//Initialize OTM8009A Display Controller
	OTM8009A_Init(OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8006584:	2101      	movs	r1, #1
 8006586:	2000      	movs	r0, #0
 8006588:	f7fb fc08 	bl	8001d9c <OTM8009A_Init>


	//-------------------------------
	//Set Initial Frame Buffer States
	m_eLayer0Back  = QAD_LTDC_Buffer1;   //Set initial layer 0 back buffer as being buffer 1 in double buffer pair
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	m_eLayer0Front = QAD_LTDC_Buffer0;   //Set initial layer 0 front buffer as being buffer 0 in double buffer pair
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	m_eLayer1Back  = QAD_LTDC_Buffer1;   //Set initial layer 1 back buffer as being buffer 1 in double buffer pair
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	m_eLayer1Front = QAD_LTDC_Buffer0;   //Set initial layer 1 front buffer as being buffer 0 in double buffer pair
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b


	//Set Driver State as being initialized
	m_eInitState = QA_Initialized;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	701a      	strb	r2, [r3, #0]

	//Return
	return QA_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3788      	adds	r7, #136	; 0x88
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	00177000 	.word	0x00177000

080065c0 <_ZN8QAD_LTDC10imp_deinitEv>:
//QAD_LTDC::imp_deinit
//QAD_LTDC Initialization Method
//
//To be called from static method deinit(), or from imp_init() in the event of a failed initialization
//Used to deinitialize the DSI and LTDC peripherals, LTDC layers, reset display controller and deinitialize reset and backlight GPIO pins
void QAD_LTDC::imp_deinit(void) {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]

	//----------------------
	//Disable DSI Peripheral
	HAL_DSI_Stop(&m_sDSIHandle);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3310      	adds	r3, #16
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fc fc1b 	bl	8002e08 <HAL_DSI_Stop>


	//-------------------
	//Disable LTDC Layers
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 1);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065d8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80065e4:	f502 7282 	add.w	r2, r2, #260	; 0x104
 80065e8:	f023 0301 	bic.w	r3, r3, #1
 80065ec:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 0);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065f4:	3384      	adds	r3, #132	; 0x84
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80065fe:	3284      	adds	r2, #132	; 0x84
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	6013      	str	r3, [r2, #0]


	//----------------------------
	//Deinitialize LTDC Peripheral
	HAL_LTDC_DeInit(&m_sLTDCHandle);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3398      	adds	r3, #152	; 0x98
 800660a:	4618      	mov	r0, r3
 800660c:	f7fd f894 	bl	8003738 <HAL_LTDC_DeInit>


	//---------------------------
	//Deinitialize DSI Peripheral
	HAL_DSI_DeInit(&m_sDSIHandle);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3310      	adds	r3, #16
 8006614:	4618      	mov	r0, r3
 8006616:	f7fc f933 	bl	8002880 <HAL_DSI_DeInit>


	//---------------------------
	//Disable DSI and LTDC Clocks
	__HAL_RCC_DSI_CLK_DISABLE();
 800661a:	4b16      	ldr	r3, [pc, #88]	; (8006674 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	4a15      	ldr	r2, [pc, #84]	; (8006674 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8006620:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006624:	6453      	str	r3, [r2, #68]	; 0x44
	__HAL_RCC_LTDC_CLK_DISABLE();
 8006626:	4b13      	ldr	r3, [pc, #76]	; (8006674 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8006628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662a:	4a12      	ldr	r2, [pc, #72]	; (8006674 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 800662c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006630:	6453      	str	r3, [r2, #68]	; 0x44


	//------------------------
	//Reset Display controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET);
 8006632:	2200      	movs	r2, #0
 8006634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006638:	480f      	ldr	r0, [pc, #60]	; (8006678 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 800663a:	f7fc ff93 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800663e:	2014      	movs	r0, #20
 8006640:	f7fb fe54 	bl	80022ec <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);
 8006644:	2201      	movs	r2, #1
 8006646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800664a:	480b      	ldr	r0, [pc, #44]	; (8006678 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 800664c:	f7fc ff8a 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8006650:	200a      	movs	r0, #10
 8006652:	f7fb fe4b 	bl	80022ec <HAL_Delay>


	//--------------------------------------------------
	//Deinitialize Reset and Backlight control GPIO Pins
	HAL_GPIO_DeInit(QAD_LTDC_BACKLIGHT_PORT, QAD_LTDC_BACKLIGHT_PIN);
 8006656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800665a:	4808      	ldr	r0, [pc, #32]	; (800667c <_ZN8QAD_LTDC10imp_deinitEv+0xbc>)
 800665c:	f7fc fe76 	bl	800334c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN);
 8006660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006664:	4804      	ldr	r0, [pc, #16]	; (8006678 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 8006666:	f7fc fe71 	bl	800334c <HAL_GPIO_DeInit>

}
 800666a:	bf00      	nop
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40023800 	.word	0x40023800
 8006678:	40022400 	.word	0x40022400
 800667c:	40022000 	.word	0x40022000

08006680 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>:
  //DSI Command Methods


//QAD_LTDC::imp_dsi_IO_WriteCmd
//DSI Command Methods
void QAD_LTDC::imp_dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af02      	add	r7, sp, #8
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
	if (uNumParams <= 1) {
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d80f      	bhi.n	80066b2 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x32>
		HAL_DSI_ShortWrite(&m_sDSIHandle, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f103 0010 	add.w	r0, r3, #16
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3301      	adds	r3, #1
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	4613      	mov	r3, r2
 80066a8:	2215      	movs	r2, #21
 80066aa:	2100      	movs	r1, #0
 80066ac:	f7fc fbe8 	bl	8002e80 <HAL_DSI_ShortWrite>
	} else {
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
	}
}
 80066b0:	e00f      	b.n	80066d2 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x52>
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f103 0010 	add.w	r0, r3, #16
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	4413      	add	r3, r2
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	9301      	str	r3, [sp, #4]
 80066c6:	9200      	str	r2, [sp, #0]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2239      	movs	r2, #57	; 0x39
 80066cc:	2100      	movs	r1, #0
 80066ce:	f7fc fbf9 	bl	8002ec4 <HAL_DSI_LongWrite>
}
 80066d2:	bf00      	nop
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>:
  //------------------------------
  //QAD_LTDC Layer Control Methods

//QAD_LTDC::imp_flipLayer0Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer0Buffers(void) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d032      	beq.n	8006752 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x76>
  	return;

  switch (m_eLayer0Front) {
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x20>
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d017      	beq.n	800672a <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x4e>
 80066fa:	e02b      	b.n	8006754 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer0Back  = QAD_LTDC_Buffer0;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer1;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006712:	461a      	mov	r2, r3
 8006714:	4b11      	ldr	r3, [pc, #68]	; (800675c <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x80>)
 8006716:	4413      	add	r3, r2
 8006718:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3398      	adds	r3, #152	; 0x98
 800671e:	2200      	movs	r2, #0
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	4618      	mov	r0, r3
 8006724:	f7fd f872 	bl	800380c <HAL_LTDC_SetAddress>
    	break;
 8006728:	e014      	b.n	8006754 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer0Back  = QAD_LTDC_Buffer1;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer0;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006740:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3398      	adds	r3, #152	; 0x98
 8006746:	2200      	movs	r2, #0
 8006748:	68f9      	ldr	r1, [r7, #12]
 800674a:	4618      	mov	r0, r3
 800674c:	f7fd f85e 	bl	800380c <HAL_LTDC_SetAddress>
    	break;
 8006750:	e000      	b.n	8006754 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
  	return;
 8006752:	bf00      	nop
    }
  }
}
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	000bb800 	.word	0x000bb800

08006760 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>:


//QAD_LTDC::imp_flipLayer1Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer1Buffers(void) {
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d032      	beq.n	80067d6 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x76>
  	return;

  switch (m_eLayer1Front) {
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x20>
 800677a:	2b01      	cmp	r3, #1
 800677c:	d017      	beq.n	80067ae <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x4e>
 800677e:	e02b      	b.n	80067d8 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer1Back  = QAD_LTDC_Buffer0;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer1;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006796:	461a      	mov	r2, r3
 8006798:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x80>)
 800679a:	4413      	add	r3, r2
 800679c:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3398      	adds	r3, #152	; 0x98
 80067a2:	2201      	movs	r2, #1
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fd f830 	bl	800380c <HAL_LTDC_SetAddress>
    	break;
 80067ac:	e014      	b.n	80067d8 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer1Back  = QAD_LTDC_Buffer1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer0;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80067c4:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3398      	adds	r3, #152	; 0x98
 80067ca:	2201      	movs	r2, #1
 80067cc:	68f9      	ldr	r1, [r7, #12]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fd f81c 	bl	800380c <HAL_LTDC_SetAddress>
    	break;
 80067d4:	e000      	b.n	80067d8 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
  	return;
 80067d6:	bf00      	nop
    }
  }
}
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	000bb800 	.word	0x000bb800

080067e4 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>:
}


//QAD_LTDC::imp_getLayer0BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer0BackBuffer(void) {
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x14>
		return NULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	e013      	b.n	8006820 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>

	switch (m_eLayer0Back) {
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x24>
 8006802:	2b01      	cmp	r3, #1
 8006804:	d004      	beq.n	8006810 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x2c>
 8006806:	e00a      	b.n	800681e <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer0Ptr;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800680e:	e007      	b.n	8006820 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006816:	461a      	mov	r2, r3
 8006818:	4b04      	ldr	r3, [pc, #16]	; (800682c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x48>)
 800681a:	4413      	add	r3, r2
 800681c:	e000      	b.n	8006820 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	000bb800 	.word	0x000bb800

08006830 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>:
}


//QAD_LTDC::imp_getLayer1BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer1BackBuffer(void) {
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x14>
		return NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	e013      	b.n	800686c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>

	switch (m_eLayer1Back) {
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x24>
 800684e:	2b01      	cmp	r3, #1
 8006850:	d004      	beq.n	800685c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x2c>
 8006852:	e00a      	b.n	800686a <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer1Ptr;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800685a:	e007      	b.n	800686c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006862:	461a      	mov	r2, r3
 8006864:	4b04      	ldr	r3, [pc, #16]	; (8006878 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x48>)
 8006866:	4413      	add	r3, r2
 8006868:	e000      	b.n	800686c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	000bb800 	.word	0x000bb800

0800687c <DSI_IO_WriteCmd>:

//DSI_IO_WriteCmd
//OTM8009A Display Controller Communication Methods
//Used by the OTM8009A initialization method in the otm8009a.h file
//Calls the static dsi_IO_WriteCmd method in the QAD_LTDC driver class
void DSI_IO_WriteCmd(uint32_t NbrParam, uint8_t* pParams) {
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  QAD_LTDC::dsi_IO_WriteCmd(NbrParam, pParams);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff fc01 	bl	8006090 <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>
}
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
	...

08006898 <_ZN7QAD_RNG8imp_initEv>:
  //------------------------------
  //QAD_RNG Initialization Methods

//QAD_RNG::imp_init
//QAD_RNG Initialization Method
QA_Result QAD_RNG::imp_init(void) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  if (m_eInitState)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <_ZN7QAD_RNG8imp_initEv+0x14>
  	return QA_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	e033      	b.n	8006914 <_ZN7QAD_RNG8imp_initEv+0x7c>

  //Enable RNG Clock
  __HAL_RCC_RNG_CLK_ENABLE();
 80068ac:	4b1b      	ldr	r3, [pc, #108]	; (800691c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80068ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b0:	4a1a      	ldr	r2, [pc, #104]	; (800691c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80068b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b6:	6353      	str	r3, [r2, #52]	; 0x34
 80068b8:	4b18      	ldr	r3, [pc, #96]	; (800691c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80068ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_RNG_FORCE_RESET();
 80068c4:	4b15      	ldr	r3, [pc, #84]	; (800691c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	4a14      	ldr	r2, [pc, #80]	; (800691c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80068ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ce:	6153      	str	r3, [r2, #20]
  __HAL_RCC_RNG_RELEASE_RESET();
 80068d0:	4b12      	ldr	r3, [pc, #72]	; (800691c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	4a11      	ldr	r2, [pc, #68]	; (800691c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80068d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068da:	6153      	str	r3, [r2, #20]

  //Initialize RNG
  m_sHandle.Instance = RNG;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a10      	ldr	r2, [pc, #64]	; (8006920 <_ZN7QAD_RNG8imp_initEv+0x88>)
 80068e0:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&m_sHandle) != HAL_OK) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fabc 	bl	8004e64 <HAL_RNG_Init>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bf14      	ite	ne
 80068f2:	2301      	movne	r3, #1
 80068f4:	2300      	moveq	r3, #0
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d007      	beq.n	800690c <_ZN7QAD_RNG8imp_initEv+0x74>
  	__HAL_RCC_RNG_CLK_DISABLE();
 80068fc:	4b07      	ldr	r3, [pc, #28]	; (800691c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80068fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006900:	4a06      	ldr	r2, [pc, #24]	; (800691c <_ZN7QAD_RNG8imp_initEv+0x84>)
 8006902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006906:	6353      	str	r3, [r2, #52]	; 0x34
  	return QA_Fail;
 8006908:	2301      	movs	r3, #1
 800690a:	e003      	b.n	8006914 <_ZN7QAD_RNG8imp_initEv+0x7c>
  }

  //Set Driver State
  m_eInitState = QA_Initialized;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	701a      	strb	r2, [r3, #0]

  //Return
  return QA_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40023800 	.word	0x40023800
 8006920:	50060800 	.word	0x50060800

08006924 <_ZN7QAD_RNG12imp_getValueEv>:
  //------------
  //Data Methods

//QAD_RNG::imp_getValue
//QAD_RNG Data Method
uint32_t QAD_RNG::imp_getValue(void) {
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <_ZN7QAD_RNG12imp_getValueEv+0x14>
  	return 0;
 8006934:	2300      	movs	r3, #0
 8006936:	e00a      	b.n	800694e <_ZN7QAD_RNG12imp_getValueEv+0x2a>

	uint32_t uVal = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]
  HAL_RNG_GenerateRandomNumber(&m_sHandle, &uVal);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3304      	adds	r3, #4
 8006940:	f107 020c 	add.w	r2, r7, #12
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fac0 	bl	8004ecc <HAL_RNG_GenerateRandomNumber>
  return uVal;
 800694c:	68fb      	ldr	r3, [r7, #12]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 800695c:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	f3bf 8f5b 	dmb	ish
 8006964:	b2db      	uxtb	r3, r3
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	bf0c      	ite	eq
 800696e:	2301      	moveq	r3, #1
 8006970:	2300      	movne	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d010      	beq.n	800699a <_ZN11QAD_UARTMgr3getEv+0x42>
 8006978:	4809      	ldr	r0, [pc, #36]	; (80069a0 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800697a:	f002 f846 	bl	8008a0a <__cxa_guard_acquire>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	bf14      	ite	ne
 8006984:	2301      	movne	r3, #1
 8006986:	2300      	moveq	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d005      	beq.n	800699a <_ZN11QAD_UARTMgr3getEv+0x42>
 800698e:	4805      	ldr	r0, [pc, #20]	; (80069a4 <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8006990:	f000 fa3e 	bl	8006e10 <_ZN11QAD_UARTMgrC1Ev>
 8006994:	4802      	ldr	r0, [pc, #8]	; (80069a0 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8006996:	f002 f844 	bl	8008a22 <__cxa_guard_release>
		return instance;
 800699a:	4b02      	ldr	r3, [pc, #8]	; (80069a4 <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 800699c:	4618      	mov	r0, r3
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	2000030c 	.word	0x2000030c
 80069a4:	200002ac 	.word	0x200002ac

080069a8 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	4603      	mov	r3, r0
 80069b0:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	2b07      	cmp	r3, #7
 80069b6:	d901      	bls.n	80069bc <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 80069b8:	2302      	movs	r3, #2
 80069ba:	e00a      	b.n	80069d2 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 80069bc:	f7ff ffcc 	bl	8006958 <_ZN11QAD_UARTMgr3getEv>
 80069c0:	4601      	mov	r1, r0
 80069c2:	79fa      	ldrb	r2, [r7, #7]
 80069c4:	4613      	mov	r3, r2
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	3301      	adds	r3, #1
 80069d0:	781b      	ldrb	r3, [r3, #0]
	}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f769xx.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	4603      	mov	r3, r0
 80069e2:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	2b07      	cmp	r3, #7
 80069e8:	d901      	bls.n	80069ee <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e00a      	b.n	8006a04 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 80069ee:	f7ff ffb3 	bl	8006958 <_ZN11QAD_UARTMgr3getEv>
 80069f2:	4601      	mov	r1, r0
 80069f4:	79fa      	ldrb	r2, [r7, #7]
 80069f6:	4613      	mov	r3, r2
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	3304      	adds	r3, #4
 8006a02:	681b      	ldr	r3, [r3, #0]
	}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4603      	mov	r3, r0
 8006a14:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8006a16:	79fb      	ldrb	r3, [r7, #7]
 8006a18:	2b07      	cmp	r3, #7
 8006a1a:	d902      	bls.n	8006a22 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 8006a1c:	f06f 0309 	mvn.w	r3, #9
 8006a20:	e00b      	b.n	8006a3a <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 8006a22:	f7ff ff99 	bl	8006958 <_ZN11QAD_UARTMgr3getEv>
 8006a26:	4601      	mov	r1, r0
 8006a28:	79fa      	ldrb	r2, [r7, #7]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	440b      	add	r3, r1
 8006a34:	3308      	adds	r3, #8
 8006a36:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Management Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static void registerUART(QAD_UART_Periph eUART) {
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	4603      	mov	r3, r0
 8006a4a:	71fb      	strb	r3, [r7, #7]
		get().imp_registerUART(eUART);
 8006a4c:	f7ff ff84 	bl	8006958 <_ZN11QAD_UARTMgr3getEv>
 8006a50:	4602      	mov	r2, r0
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	4619      	mov	r1, r3
 8006a56:	4610      	mov	r0, r2
 8006a58:	f000 fa5c 	bl	8006f14 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
	}
 8006a5c:	bf00      	nop
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 8006a6e:	f7ff ff73 	bl	8006958 <_ZN11QAD_UARTMgr3getEv>
 8006a72:	4602      	mov	r2, r0
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	4619      	mov	r1, r3
 8006a78:	4610      	mov	r0, r2
 8006a7a:	f000 fa74 	bl	8006f66 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 8006a7e:	bf00      	nop
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8006a90:	f7ff ff62 	bl	8006958 <_ZN11QAD_UARTMgr3getEv>
 8006a94:	4602      	mov	r2, r0
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	f000 fa7e 	bl	8006f9c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 8006ab2:	f7ff ff51 	bl	8006958 <_ZN11QAD_UARTMgr3getEv>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	4619      	mov	r1, r3
 8006abc:	4610      	mov	r0, r2
 8006abe:	f000 fb5f 	bl	8007180 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 8006ac2:	bf00      	nop
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or QA_Fail if initialization has failed
QA_Result QAD_UART::init(void) {
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
	if (QAD_UARTMgr::getState(m_eUART))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff ff66 	bl	80069a8 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bf14      	ite	ne
 8006ae2:	2301      	movne	r3, #1
 8006ae4:	2300      	moveq	r3, #0
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 8006aec:	2302      	movs	r3, #2
 8006aee:	e012      	b.n	8006b16 <_ZN8QAD_UART4initEv+0x4c>

  QAD_UARTMgr::registerUART(m_eUART);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff ffa4 	bl	8006a42 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>
  QA_Result eRes = periphInit();
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f8a7 	bl	8006c4e <_ZN8QAD_UART10periphInitEv>
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]

  if (eRes)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	785b      	ldrb	r3, [r3, #1]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff ffa8 	bl	8006a64 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
  return eRes;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d009      	beq.n	8006b42 <_ZN8QAD_UART6deinitEv+0x24>
  	return;

  periphDeinit(DeinitFull);
 8006b2e:	2101      	movs	r1, #1
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f924 	bl	8006d7e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
  QAD_UARTMgr::deregisterUART(m_eUART);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	785b      	ldrb	r3, [r3, #1]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7ff ff92 	bl	8006a64 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 8006b40:	e000      	b.n	8006b44 <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 8006b42:	bf00      	nop
}
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	331c      	adds	r3, #28
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b78:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Active;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ba4:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Inactive;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f042 0220 	orr.w	r2, r2, #32
 8006bd0:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Active;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f022 0220 	bic.w	r2, r2, #32
 8006bfc:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Inactive;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART transmit data register (TDR)
void QAD_UART::dataTX(uint8_t uData) {
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	70fb      	strb	r3, [r7, #3]
  m_sHandle.Instance->TDR = uData;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	78fa      	ldrb	r2, [r7, #3]
 8006c24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART receive data register (RDR)
uint8_t QAD_UART::dataRX(void) {
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  return m_sHandle.Instance->RDR;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	b2db      	uxtb	r3, r3
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b088      	sub	sp, #32
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8006c56:	f107 030c 	add.w	r3, r7, #12
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	605a      	str	r2, [r3, #4]
 8006c60:	609a      	str	r2, [r3, #8]
 8006c62:	60da      	str	r2, [r3, #12]
 8006c64:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	8a1b      	ldrh	r3, [r3, #16]
 8006c6a:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8006c74:	2303      	movs	r3, #3
 8006c76:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	7c9b      	ldrb	r3, [r3, #18]
 8006c7c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f107 020c 	add.w	r2, r7, #12
 8006c86:	4611      	mov	r1, r2
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fc f9b3 	bl	8002ff4 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	8b1b      	ldrh	r3, [r3, #24]
 8006c92:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 8006c94:	2302      	movs	r3, #2
 8006c96:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8006c98:	2301      	movs	r3, #1
 8006c9a:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	7e9b      	ldrb	r3, [r3, #26]
 8006ca4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	f107 020c 	add.w	r2, r7, #12
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fc f99f 	bl	8002ff4 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	785b      	ldrb	r3, [r3, #1]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff fee3 	bl	8006a86 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff fe88 	bl	80069da <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	220c      	movs	r2, #12
 8006cee:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	331c      	adds	r3, #28
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fe f9bb 	bl	800507c <HAL_UART_Init>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bf14      	ite	ne
 8006d0c:	2301      	movne	r3, #1
 8006d0e:	2300      	moveq	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 8006d16:	2100      	movs	r1, #0
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f830 	bl	8006d7e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e029      	b.n	8006d76 <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	f042 0201 	orr.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	785b      	ldrb	r3, [r3, #1]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7ff fe68 	bl	8006a0c <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	7a1b      	ldrb	r3, [r3, #8]
 8006d44:	2200      	movs	r2, #0
 8006d46:	4619      	mov	r1, r3
 8006d48:	f7fb fbf3 	bl	8002532 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff fe5b 	bl	8006a0c <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8006d56:	4603      	mov	r3, r0
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fb fc06 	bl	800256a <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  //Return
  return QA_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3720      	adds	r7, #32
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//QAD_UART Private Initialization Method
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	460b      	mov	r3, r1
 8006d88:	70fb      	strb	r3, [r7, #3]

	//Disable IRQs
	//Check if full deinitialization is required
	if (eDeinitMode) {
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01b      	beq.n	8006dc8 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fefc 	bl	8006b8e <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff ff25 	bl	8006be6 <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	785b      	ldrb	r3, [r3, #1]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff fe33 	bl	8006a0c <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8006da6:	4603      	mov	r3, r0
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fb fbec 	bl	8002586 <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	f022 0201 	bic.w	r2, r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	331c      	adds	r3, #28
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe f9a8 	bl	8005118 <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	785b      	ldrb	r3, [r3, #1]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff fe6b 	bl	8006aa8 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	695a      	ldr	r2, [r3, #20]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	8b1b      	ldrh	r3, [r3, #24]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4610      	mov	r0, r2
 8006dde:	f7fc fab5 	bl	800334c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	8a1b      	ldrh	r3, [r3, #16]
 8006dea:	4619      	mov	r1, r3
 8006dec:	4610      	mov	r0, r2
 8006dee:	f7fc faad 	bl	800334c <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	701a      	strb	r2, [r3, #0]
}
 8006e08:	bf00      	nop
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method is a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73fb      	strb	r3, [r7, #15]
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b07      	cmp	r3, #7
 8006e20:	d80d      	bhi.n	8006e3e <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 8006e22:	7bfa      	ldrb	r2, [r7, #15]
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	3301      	adds	r3, #1
 8006e32:	2200      	movs	r2, #0
 8006e34:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	73fb      	strb	r3, [r7, #15]
 8006e3c:	e7ee      	b.n	8006e1c <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART3].eUART = QAD_UART3;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	761a      	strb	r2, [r3, #24]
	m_sUARTs[QAD_UART4].eUART = QAD_UART4;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2203      	movs	r2, #3
 8006e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sUARTs[QAD_UART5].eUART = QAD_UART5;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2204      	movs	r2, #4
 8006e5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2205      	movs	r2, #5
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	m_sUARTs[QAD_UART7].eUART = QAD_UART7;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2206      	movs	r2, #6
 8006e6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	m_sUARTs[QAD_UART8].eUART = QAD_UART8;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2207      	movs	r2, #7
 8006e74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a1e      	ldr	r2, [pc, #120]	; (8006ef4 <_ZN11QAD_UARTMgrC1Ev+0xe4>)
 8006e7c:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <_ZN11QAD_UARTMgrC1Ev+0xe8>)
 8006e82:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART3].pInstance = USART3;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a1d      	ldr	r2, [pc, #116]	; (8006efc <_ZN11QAD_UARTMgrC1Ev+0xec>)
 8006e88:	61da      	str	r2, [r3, #28]
	m_sUARTs[QAD_UART4].pInstance = UART4;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a1c      	ldr	r2, [pc, #112]	; (8006f00 <_ZN11QAD_UARTMgrC1Ev+0xf0>)
 8006e8e:	629a      	str	r2, [r3, #40]	; 0x28
	m_sUARTs[QAD_UART5].pInstance = UART5;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a1c      	ldr	r2, [pc, #112]	; (8006f04 <_ZN11QAD_UARTMgrC1Ev+0xf4>)
 8006e94:	635a      	str	r2, [r3, #52]	; 0x34
	m_sUARTs[QAD_UART6].pInstance = USART6;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a1b      	ldr	r2, [pc, #108]	; (8006f08 <_ZN11QAD_UARTMgrC1Ev+0xf8>)
 8006e9a:	641a      	str	r2, [r3, #64]	; 0x40
	m_sUARTs[QAD_UART7].pInstance = UART7;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a1b      	ldr	r2, [pc, #108]	; (8006f0c <_ZN11QAD_UARTMgrC1Ev+0xfc>)
 8006ea0:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sUARTs[QAD_UART8].pInstance = UART8;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a1a      	ldr	r2, [pc, #104]	; (8006f10 <_ZN11QAD_UARTMgrC1Ev+0x100>)
 8006ea6:	659a      	str	r2, [r3, #88]	; 0x58

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2225      	movs	r2, #37	; 0x25
 8006eac:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2226      	movs	r2, #38	; 0x26
 8006eb2:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART3].eIRQ = USART3_IRQn;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2227      	movs	r2, #39	; 0x27
 8006eb8:	f883 2020 	strb.w	r2, [r3, #32]
	m_sUARTs[QAD_UART4].eIRQ = UART4_IRQn;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2234      	movs	r2, #52	; 0x34
 8006ec0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	m_sUARTs[QAD_UART5].eIRQ = UART5_IRQn;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2235      	movs	r2, #53	; 0x35
 8006ec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2247      	movs	r2, #71	; 0x47
 8006ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sUARTs[QAD_UART7].eIRQ = UART7_IRQn;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2252      	movs	r2, #82	; 0x52
 8006ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	m_sUARTs[QAD_UART8].eIRQ = UART8_IRQn;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2253      	movs	r2, #83	; 0x53
 8006ee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

}
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40011000 	.word	0x40011000
 8006ef8:	40004400 	.word	0x40004400
 8006efc:	40004800 	.word	0x40004800
 8006f00:	40004c00 	.word	0x40004c00
 8006f04:	40005000 	.word	0x40005000
 8006f08:	40011400 	.word	0x40011400
 8006f0c:	40007800 	.word	0x40007800
 8006f10:	40007c00 	.word	0x40007c00

08006f14 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	2b07      	cmp	r3, #7
 8006f24:	d901      	bls.n	8006f2a <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e017      	b.n	8006f5a <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	3301      	adds	r3, #1
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 8006f40:	2302      	movs	r3, #2
 8006f42:	e00a      	b.n	8006f5a <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 8006f44:	78fa      	ldrb	r2, [r7, #3]
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	440b      	add	r3, r1
 8006f52:	3301      	adds	r3, #1
 8006f54:	2201      	movs	r2, #1
 8006f56:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8006f72:	78fb      	ldrb	r3, [r7, #3]
 8006f74:	2b07      	cmp	r3, #7
 8006f76:	d80a      	bhi.n	8006f8e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8006f78:	78fa      	ldrb	r2, [r7, #3]
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	4413      	add	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	440b      	add	r3, r1
 8006f86:	3301      	adds	r3, #1
 8006f88:	2200      	movs	r2, #0
 8006f8a:	701a      	strb	r2, [r3, #0]
 8006f8c:	e000      	b.n	8006f90 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 8006f8e:	bf00      	nop
}
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 8006f9c:	b480      	push	{r7}
 8006f9e:	b08b      	sub	sp, #44	; 0x2c
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8006fa8:	78fb      	ldrb	r3, [r7, #3]
 8006faa:	2b08      	cmp	r3, #8
 8006fac:	f200 80df 	bhi.w	800716e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
 8006fb0:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1c>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08006fdd 	.word	0x08006fdd
 8006fbc:	0800700f 	.word	0x0800700f
 8006fc0:	08007041 	.word	0x08007041
 8006fc4:	08007073 	.word	0x08007073
 8006fc8:	080070a5 	.word	0x080070a5
 8006fcc:	080070d7 	.word	0x080070d7
 8006fd0:	08007109 	.word	0x08007109
 8006fd4:	0800713b 	.word	0x0800713b
 8006fd8:	0800716d 	.word	0x0800716d
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 8006fdc:	4b67      	ldr	r3, [pc, #412]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe0:	4a66      	ldr	r2, [pc, #408]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006fe2:	f043 0310 	orr.w	r3, r3, #16
 8006fe6:	6453      	str	r3, [r2, #68]	; 0x44
 8006fe8:	4b64      	ldr	r3, [pc, #400]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fec:	f003 0310 	and.w	r3, r3, #16
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_USART1_FORCE_RESET();
 8006ff4:	4b61      	ldr	r3, [pc, #388]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	4a60      	ldr	r2, [pc, #384]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ffa:	f043 0310 	orr.w	r3, r3, #16
 8006ffe:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 8007000:	4b5e      	ldr	r3, [pc, #376]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	4a5d      	ldr	r2, [pc, #372]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007006:	f023 0310 	bic.w	r3, r3, #16
 800700a:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 800700c:	e0af      	b.n	800716e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 800700e:	4b5b      	ldr	r3, [pc, #364]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	4a5a      	ldr	r2, [pc, #360]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007018:	6413      	str	r3, [r2, #64]	; 0x40
 800701a:	4b58      	ldr	r3, [pc, #352]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007022:	623b      	str	r3, [r7, #32]
 8007024:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_USART2_FORCE_RESET();
 8007026:	4b55      	ldr	r3, [pc, #340]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	4a54      	ldr	r2, [pc, #336]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800702c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007030:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 8007032:	4b52      	ldr	r3, [pc, #328]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	4a51      	ldr	r2, [pc, #324]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007038:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800703c:	6213      	str	r3, [r2, #32]
      break;
 800703e:	e096      	b.n	800716e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_ENABLE();
 8007040:	4b4e      	ldr	r3, [pc, #312]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	4a4d      	ldr	r2, [pc, #308]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007046:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800704a:	6413      	str	r3, [r2, #64]	; 0x40
 800704c:	4b4b      	ldr	r3, [pc, #300]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	69fb      	ldr	r3, [r7, #28]
      __HAL_RCC_USART3_FORCE_RESET();
 8007058:	4b48      	ldr	r3, [pc, #288]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	4a47      	ldr	r2, [pc, #284]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800705e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007062:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART3_RELEASE_RESET();
 8007064:	4b45      	ldr	r3, [pc, #276]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	4a44      	ldr	r2, [pc, #272]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800706a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800706e:	6213      	str	r3, [r2, #32]
      break;
 8007070:	e07d      	b.n	800716e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_ENABLE();
 8007072:	4b42      	ldr	r3, [pc, #264]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	4a41      	ldr	r2, [pc, #260]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007078:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800707c:	6413      	str	r3, [r2, #64]	; 0x40
 800707e:	4b3f      	ldr	r3, [pc, #252]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007086:	61bb      	str	r3, [r7, #24]
 8007088:	69bb      	ldr	r3, [r7, #24]
      __HAL_RCC_UART4_FORCE_RESET();
 800708a:	4b3c      	ldr	r3, [pc, #240]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	4a3b      	ldr	r2, [pc, #236]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007090:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007094:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART4_RELEASE_RESET();
 8007096:	4b39      	ldr	r3, [pc, #228]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	4a38      	ldr	r2, [pc, #224]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800709c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80070a0:	6213      	str	r3, [r2, #32]
      break;
 80070a2:	e064      	b.n	800716e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_ENABLE();
 80070a4:	4b35      	ldr	r3, [pc, #212]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	4a34      	ldr	r2, [pc, #208]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80070aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070ae:	6413      	str	r3, [r2, #64]	; 0x40
 80070b0:	4b32      	ldr	r3, [pc, #200]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80070b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_UART5_FORCE_RESET();
 80070bc:	4b2f      	ldr	r3, [pc, #188]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	4a2e      	ldr	r2, [pc, #184]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80070c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070c6:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART5_RELEASE_RESET();
 80070c8:	4b2c      	ldr	r3, [pc, #176]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	4a2b      	ldr	r2, [pc, #172]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80070ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070d2:	6213      	str	r3, [r2, #32]
      break;
 80070d4:	e04b      	b.n	800716e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 80070d6:	4b29      	ldr	r3, [pc, #164]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80070d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070da:	4a28      	ldr	r2, [pc, #160]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80070dc:	f043 0320 	orr.w	r3, r3, #32
 80070e0:	6453      	str	r3, [r2, #68]	; 0x44
 80070e2:	4b26      	ldr	r3, [pc, #152]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80070e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e6:	f003 0320 	and.w	r3, r3, #32
 80070ea:	613b      	str	r3, [r7, #16]
 80070ec:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART6_FORCE_RESET();
 80070ee:	4b23      	ldr	r3, [pc, #140]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	4a22      	ldr	r2, [pc, #136]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80070f4:	f043 0320 	orr.w	r3, r3, #32
 80070f8:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 80070fa:	4b20      	ldr	r3, [pc, #128]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	4a1f      	ldr	r2, [pc, #124]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007100:	f023 0320 	bic.w	r3, r3, #32
 8007104:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8007106:	e032      	b.n	800716e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_ENABLE();
 8007108:	4b1c      	ldr	r3, [pc, #112]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	4a1b      	ldr	r2, [pc, #108]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800710e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007112:	6413      	str	r3, [r2, #64]	; 0x40
 8007114:	4b19      	ldr	r3, [pc, #100]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_UART7_FORCE_RESET();
 8007120:	4b16      	ldr	r3, [pc, #88]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	4a15      	ldr	r2, [pc, #84]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007126:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800712a:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART7_RELEASE_RESET();
 800712c:	4b13      	ldr	r3, [pc, #76]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	4a12      	ldr	r2, [pc, #72]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007132:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007136:	6213      	str	r3, [r2, #32]
      break;
 8007138:	e019      	b.n	800716e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_ENABLE();
 800713a:	4b10      	ldr	r3, [pc, #64]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	4a0f      	ldr	r2, [pc, #60]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007144:	6413      	str	r3, [r2, #64]	; 0x40
 8007146:	4b0d      	ldr	r3, [pc, #52]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800714e:	60bb      	str	r3, [r7, #8]
 8007150:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_UART8_FORCE_RESET();
 8007152:	4b0a      	ldr	r3, [pc, #40]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	4a09      	ldr	r2, [pc, #36]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800715c:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART8_RELEASE_RESET();
 800715e:	4b07      	ldr	r3, [pc, #28]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	4a06      	ldr	r2, [pc, #24]	; (800717c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007168:	6213      	str	r3, [r2, #32]
      break;
 800716a:	e000      	b.n	800716e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UARTNone):
    	break;
 800716c:	bf00      	nop
  }
}
 800716e:	bf00      	nop
 8007170:	372c      	adds	r7, #44	; 0x2c
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	40023800 	.word	0x40023800

08007180 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	2b08      	cmp	r3, #8
 8007190:	d84d      	bhi.n	800722e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
 8007192:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071bd 	.word	0x080071bd
 800719c:	080071cb 	.word	0x080071cb
 80071a0:	080071d9 	.word	0x080071d9
 80071a4:	080071e7 	.word	0x080071e7
 80071a8:	080071f5 	.word	0x080071f5
 80071ac:	08007203 	.word	0x08007203
 80071b0:	08007211 	.word	0x08007211
 80071b4:	0800721f 	.word	0x0800721f
 80071b8:	0800722d 	.word	0x0800722d
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 80071bc:	4b1f      	ldr	r3, [pc, #124]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80071be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c0:	4a1e      	ldr	r2, [pc, #120]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80071c2:	f023 0310 	bic.w	r3, r3, #16
 80071c6:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 80071c8:	e031      	b.n	800722e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 80071ca:	4b1c      	ldr	r3, [pc, #112]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	4a1b      	ldr	r2, [pc, #108]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80071d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80071d4:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80071d6:	e02a      	b.n	800722e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_DISABLE();
 80071d8:	4b18      	ldr	r3, [pc, #96]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80071da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071dc:	4a17      	ldr	r2, [pc, #92]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80071de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071e2:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80071e4:	e023      	b.n	800722e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_DISABLE();
 80071e6:	4b15      	ldr	r3, [pc, #84]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	4a14      	ldr	r2, [pc, #80]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80071ec:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80071f0:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80071f2:	e01c      	b.n	800722e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_DISABLE();
 80071f4:	4b11      	ldr	r3, [pc, #68]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	4a10      	ldr	r2, [pc, #64]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80071fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071fe:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8007200:	e015      	b.n	800722e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 8007202:	4b0e      	ldr	r3, [pc, #56]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8007204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007206:	4a0d      	ldr	r2, [pc, #52]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8007208:	f023 0320 	bic.w	r3, r3, #32
 800720c:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800720e:	e00e      	b.n	800722e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_DISABLE();
 8007210:	4b0a      	ldr	r3, [pc, #40]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	4a09      	ldr	r2, [pc, #36]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8007216:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800721a:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800721c:	e007      	b.n	800722e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_DISABLE();
 800721e:	4b07      	ldr	r3, [pc, #28]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	4a06      	ldr	r2, [pc, #24]	; (800723c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8007224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007228:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800722a:	e000      	b.n	800722e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UARTNone):
    	break;
 800722c:	bf00      	nop
  }
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	40023800 	.word	0x40023800

08007240 <_ZN18QAT_Pixel_ARGB4444aSERKt>:
		m_uPxl = other.pxl();
		return *this;
	}

	//Assignment operator to accept a 16bit pixel value
	QAT_Pixel_ARGB4444& operator=(const uint16_t& other) {
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
		m_uPxl = other;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	881a      	ldrh	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	801a      	strh	r2, [r3, #0]
		return *this;
 8007252:	687b      	ldr	r3, [r7, #4]
	}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <_ZN18QAT_Pixel_ARGB44443pxlEt>:
	uint16_t pxl(void) const {
		return m_uPxl;
	}

	//Sets the current 16bit pixel value
	void pxl(uint16_t pxl) {
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	807b      	strh	r3, [r7, #2]
		m_uPxl = pxl;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	887a      	ldrh	r2, [r7, #2]
 8007270:	801a      	strh	r2, [r3, #0]
	}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <_ZN8QAD_LTDC4initEv>:
	static QA_Result init(void) {
 800727e:	b580      	push	{r7, lr}
 8007280:	af00      	add	r7, sp, #0
		return get().imp_init();
 8007282:	f7fe fedd 	bl	8006040 <_ZN8QAD_LTDC3getEv>
 8007286:	4603      	mov	r3, r0
 8007288:	4618      	mov	r0, r3
 800728a:	f7fe ff13 	bl	80060b4 <_ZN8QAD_LTDC8imp_initEv>
 800728e:	4603      	mov	r3, r0
	}
 8007290:	4618      	mov	r0, r3
 8007292:	bd80      	pop	{r7, pc}

08007294 <_ZN8QAD_LTDC17flipLayer0BuffersEv>:
	//---------------------
	//Layer Control Methods

	//Used to flip the front and back buffer for layer 0
	//To be used at the end of rendering visual elements to layer 0 in order for them to become visible on the LCD display
	static void flipLayer0Buffers(void) {
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
		get().imp_flipLayer0Buffers();
 8007298:	f7fe fed2 	bl	8006040 <_ZN8QAD_LTDC3getEv>
 800729c:	4603      	mov	r3, r0
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff fa1c 	bl	80066dc <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>
	}
 80072a4:	bf00      	nop
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <_ZN8QAD_LTDC17flipLayer1BuffersEv>:

	//Used to flip the front and back buffer for layer 1
	//To be used at the end of rendering visual elements to layer 1 in order for them to become visible on the LCD display
	static void flipLayer1Buffers(void) {
 80072a8:	b580      	push	{r7, lr}
 80072aa:	af00      	add	r7, sp, #0
		get().imp_flipLayer1Buffers();
 80072ac:	f7fe fec8 	bl	8006040 <_ZN8QAD_LTDC3getEv>
 80072b0:	4603      	mov	r3, r0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fa54 	bl	8006760 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>
	}
 80072b8:	bf00      	nop
 80072ba:	bd80      	pop	{r7, pc}

080072bc <_ZN8QAD_LTDC19getLayer0BackBufferEv>:
	static void* getLayer0BackBufferPtr(void) {
		return get().imp_getLayer0BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 0
	static QAD_LTDC_Buffer* getLayer0BackBuffer(void) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
		return get().imp_getLayer0BackBuffer();
 80072c0:	f7fe febe 	bl	8006040 <_ZN8QAD_LTDC3getEv>
 80072c4:	4603      	mov	r3, r0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff fa8c 	bl	80067e4 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>
 80072cc:	4603      	mov	r3, r0
	}
 80072ce:	4618      	mov	r0, r3
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <_ZN8QAD_LTDC19getLayer1BackBufferEv>:
	static void* getLayer1BackBufferPtr(void) {
		return get().imp_getLayer1BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 1
	static QAD_LTDC_Buffer* getLayer1BackBuffer(void) {
 80072d2:	b580      	push	{r7, lr}
 80072d4:	af00      	add	r7, sp, #0
		return get().imp_getLayer1BackBuffer();
 80072d6:	f7fe feb3 	bl	8006040 <_ZN8QAD_LTDC3getEv>
 80072da:	4603      	mov	r3, r0
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff faa7 	bl	8006830 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>
 80072e2:	4603      	mov	r3, r0
	}
 80072e4:	4618      	mov	r0, r3
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <_ZN7QAS_LCD8imp_initEv>:
//QAS_LCD Initialization Method
//
//To be called from static method init()
//To be used to initialize the LTDC peripheral and setup the Font Manager class
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAS_LCD::imp_init(void) {
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af04      	add	r7, sp, #16
 80072ee:	6078      	str	r0, [r7, #4]

	//Return if system is already initialized
	if (m_eInitState) {
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <_ZN7QAS_LCD8imp_initEv+0x14>
  	return QA_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	e044      	b.n	8007386 <_ZN7QAS_LCD8imp_initEv+0x9e>
  }

	//Initialize LTDC driver class, returning QA_Fail if LTDC doesn't initialize successfully
	if (QAD_LTDC::init())
 80072fc:	f7ff ffbf 	bl	800727e <_ZN8QAD_LTDC4initEv>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	bf14      	ite	ne
 8007306:	2301      	movne	r3, #1
 8007308:	2300      	moveq	r3, #0
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <_ZN7QAS_LCD8imp_initEv+0x2c>
		return QA_Fail;
 8007310:	2301      	movs	r3, #1
 8007312:	e038      	b.n	8007386 <_ZN7QAS_LCD8imp_initEv+0x9e>


	//Setup font manager
	m_cFontMgr.clear();  //Clear font manager
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	330c      	adds	r3, #12
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fa2e 	bl	800777a <_ZN15QAS_LCD_FontMgr5clearEv>

	  //Add SegoeUI 12pt font (defined in QAS_LCD_Fonts_SegoeUI12pt.hpp)
	m_cFontMgr.add("SegoeUI12pt",
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f103 000c 	add.w	r0, r3, #12
 8007324:	2302      	movs	r3, #2
 8007326:	9302      	str	r3, [sp, #8]
 8007328:	2303      	movs	r3, #3
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	2311      	movs	r3, #17
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	4b17      	ldr	r3, [pc, #92]	; (8007390 <_ZN7QAS_LCD8imp_initEv+0xa8>)
 8007332:	4a18      	ldr	r2, [pc, #96]	; (8007394 <_ZN7QAS_LCD8imp_initEv+0xac>)
 8007334:	4918      	ldr	r1, [pc, #96]	; (8007398 <_ZN7QAS_LCD8imp_initEv+0xb0>)
 8007336:	f000 f9f9 	bl	800772c <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI12pt_Height,
								 QAS_LCD_Fonts_SegoeUI12pt_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI12pt_CharGap);

	  //Add SegoeUI 20pt Semi-bold font (defined in QAS_LCD_Fonts_SegoeUI20ptSB.hpp)
	m_cFontMgr.add("SegoeUI20ptSB",
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f103 000c 	add.w	r0, r3, #12
 8007340:	2303      	movs	r3, #3
 8007342:	9302      	str	r3, [sp, #8]
 8007344:	2305      	movs	r3, #5
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	231b      	movs	r3, #27
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	4b13      	ldr	r3, [pc, #76]	; (800739c <_ZN7QAS_LCD8imp_initEv+0xb4>)
 800734e:	4a14      	ldr	r2, [pc, #80]	; (80073a0 <_ZN7QAS_LCD8imp_initEv+0xb8>)
 8007350:	4914      	ldr	r1, [pc, #80]	; (80073a4 <_ZN7QAS_LCD8imp_initEv+0xbc>)
 8007352:	f000 f9eb 	bl	800772c <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI20ptSB_Height,
								 QAS_LCD_Fonts_SegoeUI20ptSB_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI20ptSB_CharGap);

	  //Add Showcard Gothic 18pt font (defined in QAS_LCD_Fonts_ShowcardGothic18pt.hpp)
	m_cFontMgr.add("ShowcardGothic18pt",
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f103 000c 	add.w	r0, r3, #12
 800735c:	2302      	movs	r3, #2
 800735e:	9302      	str	r3, [sp, #8]
 8007360:	2302      	movs	r3, #2
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	231a      	movs	r3, #26
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <_ZN7QAS_LCD8imp_initEv+0xc0>)
 800736a:	4a10      	ldr	r2, [pc, #64]	; (80073ac <_ZN7QAS_LCD8imp_initEv+0xc4>)
 800736c:	4910      	ldr	r1, [pc, #64]	; (80073b0 <_ZN7QAS_LCD8imp_initEv+0xc8>)
 800736e:	f000 f9dd 	bl	800772c <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_ShowcardGothic18pt_SpaceWidth,
								 QAS_LCD_Fonts_ShowcardGothic18pt_CharGap);


	//Set System State
	m_eInitState = QA_Initialized; //Set system as now being initialized
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	701a      	strb	r2, [r3, #0]

	//Set initial data
	m_pDrawBuffer = NULL;   //Set current draw buffer to NULL
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	605a      	str	r2, [r3, #4]
	m_uDrawColor  = 0x0000; //Set current draw color to transparent black
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	811a      	strh	r2, [r3, #8]

	//Return
	return QA_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	08009a54 	.word	0x08009a54
 8007394:	080098dc 	.word	0x080098dc
 8007398:	08009634 	.word	0x08009634
 800739c:	0800a350 	.word	0x0800a350
 80073a0:	0800a1d8 	.word	0x0800a1d8
 80073a4:	08009640 	.word	0x08009640
 80073a8:	0800b84c 	.word	0x0800b84c
 80073ac:	0800b6d4 	.word	0x0800b6d4
 80073b0:	08009650 	.word	0x08009650

080073b4 <_ZN7QAS_LCD14imp_flipLayer0Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer0()
//Used to flip the front and back buffer for layer 0
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer0(void) {
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer0Buffers();
 80073bc:	f7ff ff6a 	bl	8007294 <_ZN8QAD_LTDC17flipLayer0BuffersEv>
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <_ZN7QAS_LCD14imp_flipLayer1Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer1()
//Used to flip the front and back buffer for layer 1
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer1(void) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer1Buffers();
 80073d0:	f7ff ff6a 	bl	80072a8 <_ZN8QAD_LTDC17flipLayer1BuffersEv>
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method setDrawBuffer()
//Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
//eLayer - Sets whether the current draw buffer is layer 0 or layer1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
void QAS_LCD::imp_setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]

	//Retrieve required Back Buffer pointer based on selected layer and store to m_pDrawBuffer
	switch (eLayer) {
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x18>
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d006      	beq.n	8007400 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x24>
 80073f2:	e00b      	b.n	800740c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer0):
	  	m_pDrawBuffer = QAD_LTDC::getLayer0BackBuffer();
 80073f4:	f7ff ff62 	bl	80072bc <_ZN8QAD_LTDC19getLayer0BackBufferEv>
 80073f8:	4602      	mov	r2, r0
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	605a      	str	r2, [r3, #4]
	  	break;
 80073fe:	e005      	b.n	800740c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer1):
	  	m_pDrawBuffer = QAD_LTDC::getLayer1BackBuffer();
 8007400:	f7ff ff67 	bl	80072d2 <_ZN8QAD_LTDC19getLayer1BackBufferEv>
 8007404:	4602      	mov	r2, r0
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	605a      	str	r2, [r3, #4]
	  	break;
 800740a:	bf00      	nop
	}

	//Set currently selected draw buffer to Font Manager as well, to be used for text rendering methods
	m_cFontMgr.setDrawBuffer(m_pDrawBuffer);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f103 020c 	add.w	r2, r3, #12
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	4619      	mov	r1, r3
 8007418:	4610      	mov	r0, r2
 800741a:	f000 faef 	bl	80079fc <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>
}
 800741e:	bf00      	nop
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <_ZN7QAS_LCD16imp_setDrawColorEt>:
//QAS_LCD::imp_setDrawColor
//QAS_LCD Rendering Setup Method
//
//To be called from either of the two static setDrawColor() methods
//Sets the current color to be used for rendering methods
void QAS_LCD::imp_setDrawColor(uint16_t uColor) {
 8007426:	b580      	push	{r7, lr}
 8007428:	b082      	sub	sp, #8
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	807b      	strh	r3, [r7, #2]

	//Store new draw color
	m_uDrawColor = uColor;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	887a      	ldrh	r2, [r7, #2]
 8007436:	811a      	strh	r2, [r3, #8]

	//Set currently selected draw color to Font Manager as well, to be used for text rendering methods
  m_cFontMgr.setDrawColor(m_uDrawColor);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f103 020c 	add.w	r2, r3, #12
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	891b      	ldrh	r3, [r3, #8]
 8007442:	4619      	mov	r1, r3
 8007444:	4610      	mov	r0, r2
 8007446:	f000 fae7 	bl	8007a18 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <_ZN7QAS_LCD15imp_clearBufferEv>:
//QAS_LCD::imp_clearBuffer
//QAS_LCD Rendering Method
//
//To be called from static clearBuffer() method
//Used to clear the currently selected buffer to the currently selected draw color
void QAS_LCD::imp_clearBuffer(void) {
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 800745c:	2300      	movs	r3, #0
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a0b      	ldr	r2, [pc, #44]	; (8007490 <_ZN7QAS_LCD15imp_clearBufferEv+0x3c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d80e      	bhi.n	8007486 <_ZN7QAS_LCD15imp_clearBufferEv+0x32>
  	m_pDrawBuffer->pixel[i] = m_uDrawColor;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	441a      	add	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3308      	adds	r3, #8
 8007476:	4619      	mov	r1, r3
 8007478:	4610      	mov	r0, r2
 800747a:	f7ff fee1 	bl	8007240 <_ZN18QAT_Pixel_ARGB4444aSERKt>
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3301      	adds	r3, #1
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	e7ec      	b.n	8007460 <_ZN7QAS_LCD15imp_clearBufferEv+0xc>
}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	0005dbff 	.word	0x0005dbff

08007494 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>:
//
//To be called by static drawRect() method
//Used to draw a non-filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
void QAS_LCD::imp_drawRect(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 8007494:	b580      	push	{r7, lr}
 8007496:	b08c      	sub	sp, #48	; 0x30
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.y) {
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	881a      	ldrh	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	885b      	ldrh	r3, [r3, #2]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d206      	bcs.n	80074ba <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80074b8:	e005      	b.n	80074c6 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.y;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	885b      	ldrh	r3, [r3, #2]
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.y;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	885b      	ldrh	r3, [r3, #2]
 80074c4:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	885a      	ldrh	r2, [r3, #2]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	885b      	ldrh	r3, [r3, #2]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d206      	bcs.n	80074e0 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	885b      	ldrh	r3, [r3, #2]
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	885b      	ldrh	r3, [r3, #2]
 80074dc:	623b      	str	r3, [r7, #32]
 80074de:	e005      	b.n	80074ec <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	885b      	ldrh	r3, [r3, #2]
 80074e4:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	885b      	ldrh	r3, [r3, #2]
 80074ea:	623b      	str	r3, [r7, #32]
  }

  //Top & Bottom
  uint32_t yt = ys*QAD_LTDC_WIDTH;
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	f44f 7248 	mov.w	r2, #800	; 0x320
 80074f2:	fb02 f303 	mul.w	r3, r2, r3
 80074f6:	617b      	str	r3, [r7, #20]
  uint32_t yb = ye*QAD_LTDC_WIDTH;
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80074fe:	fb02 f303 	mul.w	r3, r2, r3
 8007502:	613b      	str	r3, [r7, #16]
  for (uint32_t x=xs; x<(xe+1); x++) {
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	3301      	adds	r3, #1
 800750c:	69fa      	ldr	r2, [r7, #28]
 800750e:	429a      	cmp	r2, r3
 8007510:	d21d      	bcs.n	800754e <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xba>
    m_pDrawBuffer->pixel[x+yt].pxl(m_uDrawColor);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	69f9      	ldr	r1, [r7, #28]
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	440b      	add	r3, r1
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	441a      	add	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	891b      	ldrh	r3, [r3, #8]
 8007524:	4619      	mov	r1, r3
 8007526:	4610      	mov	r0, r2
 8007528:	f7ff fe9a 	bl	8007260 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[x+yb].pxl(m_uDrawColor);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	69f9      	ldr	r1, [r7, #28]
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	440b      	add	r3, r1
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	441a      	add	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	891b      	ldrh	r3, [r3, #8]
 800753e:	4619      	mov	r1, r3
 8007540:	4610      	mov	r0, r2
 8007542:	f7ff fe8d 	bl	8007260 <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t x=xs; x<(xe+1); x++) {
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	3301      	adds	r3, #1
 800754a:	61fb      	str	r3, [r7, #28]
 800754c:	e7dc      	b.n	8007508 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x74>
  }

  //Left & Right
  for (uint32_t y=(ys+1); y<ye; y++) {
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	3301      	adds	r3, #1
 8007552:	61bb      	str	r3, [r7, #24]
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	429a      	cmp	r2, r3
 800755a:	d225      	bcs.n	80075a8 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x114>
    m_pDrawBuffer->pixel[xs+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007566:	fb01 f103 	mul.w	r1, r1, r3
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	440b      	add	r3, r1
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	441a      	add	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	891b      	ldrh	r3, [r3, #8]
 8007576:	4619      	mov	r1, r3
 8007578:	4610      	mov	r0, r2
 800757a:	f7ff fe71 	bl	8007260 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[xe+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007588:	fb01 f103 	mul.w	r1, r1, r3
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	440b      	add	r3, r1
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	441a      	add	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	891b      	ldrh	r3, [r3, #8]
 8007598:	4619      	mov	r1, r3
 800759a:	4610      	mov	r0, r2
 800759c:	f7ff fe60 	bl	8007260 <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t y=(ys+1); y<ye; y++) {
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	3301      	adds	r3, #1
 80075a4:	61bb      	str	r3, [r7, #24]
 80075a6:	e7d5      	b.n	8007554 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xc0>
  }
}
 80075a8:	bf00      	nop
 80075aa:	3730      	adds	r7, #48	; 0x30
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>:
//
//To be called by static drawRectFill() method
//Used to draw a filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
void QAS_LCD::imp_drawRectFill(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08c      	sub	sp, #48	; 0x30
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	881a      	ldrh	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d206      	bcs.n	80075d6 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80075d4:	e005      	b.n	80075e2 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.x;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	881b      	ldrh	r3, [r3, #0]
 80075da:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.x;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	885a      	ldrh	r2, [r3, #2]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	885b      	ldrh	r3, [r3, #2]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d206      	bcs.n	80075fc <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	885b      	ldrh	r3, [r3, #2]
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	885b      	ldrh	r3, [r3, #2]
 80075f8:	623b      	str	r3, [r7, #32]
 80075fa:	e005      	b.n	8007608 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	885b      	ldrh	r3, [r3, #2]
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	885b      	ldrh	r3, [r3, #2]
 8007606:	623b      	str	r3, [r7, #32]
  }

  uint32_t yofs;
  for (uint32_t y=ys; y<(ye+1); y++) {
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	3301      	adds	r3, #1
 8007610:	69fa      	ldr	r2, [r7, #28]
 8007612:	429a      	cmp	r2, r3
 8007614:	d221      	bcs.n	800765a <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xaa>
    yofs = y*QAD_LTDC_WIDTH;
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	f44f 7248 	mov.w	r2, #800	; 0x320
 800761c:	fb02 f303 	mul.w	r3, r2, r3
 8007620:	617b      	str	r3, [r7, #20]
    for (uint32_t x=xs; x<(xe+1); x++) {
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	3301      	adds	r3, #1
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	429a      	cmp	r2, r3
 800762e:	d210      	bcs.n	8007652 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xa2>
      m_pDrawBuffer->pixel[x+yofs].pxl(m_uDrawColor);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	69b9      	ldr	r1, [r7, #24]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	440b      	add	r3, r1
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	441a      	add	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	891b      	ldrh	r3, [r3, #8]
 8007642:	4619      	mov	r1, r3
 8007644:	4610      	mov	r0, r2
 8007646:	f7ff fe0b 	bl	8007260 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    for (uint32_t x=xs; x<(xe+1); x++) {
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	3301      	adds	r3, #1
 800764e:	61bb      	str	r3, [r7, #24]
 8007650:	e7e9      	b.n	8007626 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x76>
  for (uint32_t y=ys; y<(ye+1); y++) {
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	3301      	adds	r3, #1
 8007656:	61fb      	str	r3, [r7, #28]
 8007658:	e7d8      	b.n	800760c <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x5c>
    }
  }
}
 800765a:	bf00      	nop
 800765c:	3730      	adds	r7, #48	; 0x30
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>:
	QAS_LCD_Font(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t& uHeight, uint16_t& uSpaceWidth, uint16_t& uCharGap) :
 800767a:	b580      	push	{r7, lr}
 800767c:	b086      	sub	sp, #24
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	603b      	str	r3, [r7, #0]
		m_uCharGap(uCharGap) {
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	881a      	ldrh	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	871a      	strh	r2, [r3, #56]	; 0x38
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	881a      	ldrh	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769a:	881a      	ldrh	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	879a      	strh	r2, [r3, #60]	; 0x3c
		m_pDesc = (QAS_LCD_FontDesc*)pDesc;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	631a      	str	r2, [r3, #48]	; 0x30
		m_pData = (uint8_t*)pData;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	635a      	str	r2, [r3, #52]	; 0x34
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 80076ac:	2300      	movs	r3, #0
 80076ae:	75fb      	strb	r3, [r7, #23]
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	2b2f      	cmp	r3, #47	; 0x2f
 80076b4:	d807      	bhi.n	80076c6 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x4c>
			m_cName[i] = 0;
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	2100      	movs	r1, #0
 80076bc:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	3301      	adds	r3, #1
 80076c2:	75fb      	strb	r3, [r7, #23]
 80076c4:	e7f4      	b.n	80076b0 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x36>
		strcpy(m_cName, strName);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 fb78 	bl	8008dc0 <strcpy>
	}
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <_ZN12QAS_LCD_FonteqEPKc>:
	bool operator==(const char* strName) {
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
		uint8_t uLen = strlen(strName);
 80076e4:	6838      	ldr	r0, [r7, #0]
 80076e6:	f7f8 fdab 	bl	8000240 <strlen>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73bb      	strb	r3, [r7, #14]
		uint8_t uIdxLen = (uLen < QAS_LCD_FONTNAME_LENGTH) ? uLen : QAS_LCD_FONTNAME_LENGTH;
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b30      	cmp	r3, #48	; 0x30
 80076f2:	bf28      	it	cs
 80076f4:	2330      	movcs	r3, #48	; 0x30
 80076f6:	737b      	strb	r3, [r7, #13]
		for (uint8_t i=0; i<uIdxLen; i++) {
 80076f8:	2300      	movs	r3, #0
 80076fa:	73fb      	strb	r3, [r7, #15]
 80076fc:	7bfa      	ldrb	r2, [r7, #15]
 80076fe:	7b7b      	ldrb	r3, [r7, #13]
 8007700:	429a      	cmp	r2, r3
 8007702:	d20e      	bcs.n	8007722 <_ZN12QAS_LCD_FonteqEPKc+0x48>
			if (m_cName[i] != strName[i])
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	5cd2      	ldrb	r2, [r2, r3]
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	440b      	add	r3, r1
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	429a      	cmp	r2, r3
 8007714:	d001      	beq.n	800771a <_ZN12QAS_LCD_FonteqEPKc+0x40>
				return false;
 8007716:	2300      	movs	r3, #0
 8007718:	e004      	b.n	8007724 <_ZN12QAS_LCD_FonteqEPKc+0x4a>
		for (uint8_t i=0; i<uIdxLen; i++) {
 800771a:	7bfb      	ldrb	r3, [r7, #15]
 800771c:	3301      	adds	r3, #1
 800771e:	73fb      	strb	r3, [r7, #15]
 8007720:	e7ec      	b.n	80076fc <_ZN12QAS_LCD_FonteqEPKc+0x22>
		return true;
 8007722:	2301      	movs	r3, #1
	}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>:
//pDesc       - a pointer to an array of QAS_LCD_FontDesc structures for the font
//pData       - a pointer to an array of uint8_t values storing the bitmap data for the font
//uHeight     - the height in pixels of the font
//uSpaceWidth - the width in pixels of the space character of the font
//uCharGap    - the width in pixels of the gap between each character when rendering strings of characters
void QAS_LCD_FontMgr::add(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t uHeight, uint16_t uSpaceWidth, uint16_t uCharGap) {
 800772c:	b590      	push	{r4, r7, lr}
 800772e:	b08b      	sub	sp, #44	; 0x2c
 8007730:	af04      	add	r7, sp, #16
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]

	//Create the QAS_LCD_Font class for the new font, providing the required details
	QAS_LCD_Font* cFont = new QAS_LCD_Font(strName, pDesc, pData, uHeight, uSpaceWidth, uCharGap);
 800773a:	2040      	movs	r0, #64	; 0x40
 800773c:	f001 f974 	bl	8008a28 <_Znwj>
 8007740:	4603      	mov	r3, r0
 8007742:	461c      	mov	r4, r3
 8007744:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007748:	9302      	str	r3, [sp, #8]
 800774a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	4620      	mov	r0, r4
 800775e:	f7ff ff8c 	bl	800767a <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>
 8007762:	617c      	str	r4, [r7, #20]

	//Add the pointer to the font class to the m_vFonts vector
  m_vFonts.push_back(cFont);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f107 0214 	add.w	r2, r7, #20
 800776a:	4611      	mov	r1, r2
 800776c:	4618      	mov	r0, r3
 800776e:	f000 fa56 	bl	8007c1e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>
}
 8007772:	bf00      	nop
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	bd90      	pop	{r4, r7, pc}

0800777a <_ZN15QAS_LCD_FontMgr5clearEv>:

//QAS_LCD_FontMgr::clear
//QAS_LCD_FontMgr Management Method
//
//Used to clear all fonts from the font manager
void QAS_LCD_FontMgr::clear(void) {
 800777a:	b580      	push	{r7, lr}
 800777c:	b082      	sub	sp, #8
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  m_vFonts.clear();
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4618      	mov	r0, r3
 8007786:	f7f9 ffba 	bl	80016fe <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
}
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <_ZN15QAS_LCD_FontMgr4findEPKc>:
//QAS_LCD_FontMgr Management Method
//
//Used to find if a font exists in the Font Manager
//strName - The name of the font to search for
//Returns -1 if a matching font is not found, or the index of the font if it is gound
int8_t QAS_LCD_FontMgr::find(const char* strName) {
 8007792:	b590      	push	{r4, r7, lr}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
  int8_t iIdx = -1;
 800779c:	23ff      	movs	r3, #255	; 0xff
 800779e:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 80077a0:	2300      	movs	r3, #0
 80077a2:	73bb      	strb	r3, [r7, #14]
 80077a4:	7bbc      	ldrb	r4, [r7, #14]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7f9 ffb6 	bl	800171a <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 80077ae:	4603      	mov	r3, r0
 80077b0:	429c      	cmp	r4, r3
 80077b2:	bf34      	ite	cc
 80077b4:	2301      	movcc	r3, #1
 80077b6:	2300      	movcs	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d014      	beq.n	80077e8 <_ZN15QAS_LCD_FontMgr4findEPKc+0x56>
  	if (*m_vFonts[i] == strName) {
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	7bba      	ldrb	r2, [r7, #14]
 80077c2:	4611      	mov	r1, r2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7f9 ffb8 	bl	800173a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 80077ca:	4603      	mov	r3, r0
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff ff82 	bl	80076da <_ZN12QAS_LCD_FonteqEPKc>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <_ZN15QAS_LCD_FontMgr4findEPKc+0x4e>
  		iIdx = i;
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	3301      	adds	r3, #1
 80077e4:	73bb      	strb	r3, [r7, #14]
 80077e6:	e7dd      	b.n	80077a4 <_ZN15QAS_LCD_FontMgr4findEPKc+0x12>
  	}
  return iIdx;
 80077e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd90      	pop	{r4, r7, pc}

080077f4 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>:
//QAS_LCD_FontMgr::setFontByName
//QAS_LCD_FontMgr Management Method
//
//Used to set the current selected font
//strName - The name of the font to select
void QAS_LCD_FontMgr::setFontByName(const char* strName) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]

	//Search for matching font
	int8_t iIdx = find(strName);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff ffc6 	bl	8007792 <_ZN15QAS_LCD_FontMgr4findEPKc>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]

	//If no matching font is found then set current font to none
  if (iIdx < 0) {
 800780a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800780e:	2b00      	cmp	r3, #0
 8007810:	da06      	bge.n	8007820 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x2c>
  	m_iCurrentIdx = -1;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	22ff      	movs	r2, #255	; 0xff
 8007816:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	611a      	str	r2, [r3, #16]
  	return;
 800781e:	e00d      	b.n	800783c <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x48>
  }

  //If a matching font is found then set details as required
  m_iCurrentIdx = iIdx;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	7bfa      	ldrb	r2, [r7, #15]
 8007824:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[iIdx];
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800782c:	4611      	mov	r1, r2
 800782e:	4618      	mov	r0, r3
 8007830:	f7f9 ff83 	bl	800173a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8007834:	4603      	mov	r3, r0
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	611a      	str	r2, [r3, #16]
}
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>:
//QAS_LCD_FontMgr::setFontByIndex
//QAS_LCD_FontMgr Management Method
//
//Used to set the currently selected font
//uIdx - The index of the font to select
void QAS_LCD_FontMgr::setFontByIndex(uint8_t uIdx) {
 8007842:	b590      	push	{r4, r7, lr}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]

	//If uIdx is outside of the range of fonts currently stored in m_vFonts index then set current font to none
  if (uIdx >= m_vFonts.size()) {
 800784e:	78fc      	ldrb	r4, [r7, #3]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4618      	mov	r0, r3
 8007854:	f7f9 ff61 	bl	800171a <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007858:	4603      	mov	r3, r0
 800785a:	429c      	cmp	r4, r3
 800785c:	bf2c      	ite	cs
 800785e:	2301      	movcs	r3, #1
 8007860:	2300      	movcc	r3, #0
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d006      	beq.n	8007876 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x34>
  	m_iCurrentIdx = -1;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	22ff      	movs	r2, #255	; 0xff
 800786c:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	611a      	str	r2, [r3, #16]
  	return;
 8007874:	e00d      	b.n	8007892 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x50>
  }

  //Set current font details as required
  m_iCurrentIdx = uIdx;
 8007876:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[uIdx];
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	78fa      	ldrb	r2, [r7, #3]
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f7f9 ff58 	bl	800173a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 800788a:	4603      	mov	r3, r0
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	611a      	str	r2, [r3, #16]
}
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	bd90      	pop	{r4, r7, pc}

08007898 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>:

//QAS_LCD_FontMgr::getSpaceWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of the space character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getSpaceWidth(void) const {
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	da01      	bge.n	80078ae <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x16>
		return 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e003      	b.n	80078b6 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x1e>
	return m_pCurrent->m_uSpaceWidth;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80078b4:	b2db      	uxtb	r3, r3
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>:

//QAS_LCD_FontMgr::getCharGap
//QAS_LCD_FontMgr Data Methods
//
//Returns the width is pixels of the gap between each character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getCharGap(void) const {
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	da01      	bge.n	80078d8 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x16>
		return 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e003      	b.n	80078e0 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x1e>
	return m_pCurrent->m_uCharGap;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80078de:	b2db      	uxtb	r3, r3
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <_ZN15QAS_LCD_FontMgr12getCharWidthEc>:
//QAS_LCD_FontMgr::getCharWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of a specific character for the currently selected font.
//If no font is currently selected, or an invalid character is selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getCharWidth(char ch) {
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
  if (m_iCurrentIdx < 0)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	da01      	bge.n	8007906 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x1a>
    return 0;
 8007902:	2300      	movs	r3, #0
 8007904:	e01a      	b.n	800793c <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x50>
  uint16_t uWidth = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	81fb      	strh	r3, [r7, #14]
  if (ch == 32) {
 800790a:	78fb      	ldrb	r3, [r7, #3]
 800790c:	2b20      	cmp	r3, #32
 800790e:	d104      	bne.n	800791a <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x2e>
    uWidth = m_pCurrent->m_uSpaceWidth;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007916:	81fb      	strh	r3, [r7, #14]
 8007918:	e00f      	b.n	800793a <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
  } else if ((ch >= 33) && (ch <= 126)) {
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	2b20      	cmp	r3, #32
 800791e:	d90c      	bls.n	800793a <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	2b7e      	cmp	r3, #126	; 0x7e
 8007924:	d809      	bhi.n	800793a <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
    uWidth = m_pCurrent->m_pDesc[ch-33].uWidth;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800792c:	78f9      	ldrb	r1, [r7, #3]
 800792e:	4b06      	ldr	r3, [pc, #24]	; (8007948 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x5c>)
 8007930:	440b      	add	r3, r1
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	81fb      	strh	r3, [r7, #14]
  }
  return uWidth;
 800793a:	89fb      	ldrh	r3, [r7, #14]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	3fffffdf 	.word	0x3fffffdf

0800794c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>:
//QAS_LCD_FontMgr::getStringWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns is width in pixels for a specific C-style string based on the currently selected font.
//If no font is currently selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getStringWidth(const char* str) {
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint16_t uWidth = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	81fb      	strh	r3, [r7, #14]
  uint16_t uLength = strlen(str);
 800795a:	6838      	ldr	r0, [r7, #0]
 800795c:	f7f8 fc70 	bl	8000240 <strlen>
 8007960:	4603      	mov	r3, r0
 8007962:	817b      	strh	r3, [r7, #10]
  uint8_t  uChar;

  if ((uLength == 0) || (m_iCurrentIdx < 0))
 8007964:	897b      	ldrh	r3, [r7, #10]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d004      	beq.n	8007974 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x28>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	da01      	bge.n	8007978 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x2c>
    return uWidth;
 8007974:	89fb      	ldrh	r3, [r7, #14]
 8007976:	e03b      	b.n	80079f0 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xa4>

  for (uint8_t i=0; i<uLength; i++) {
 8007978:	2300      	movs	r3, #0
 800797a:	737b      	strb	r3, [r7, #13]
 800797c:	7b7a      	ldrb	r2, [r7, #13]
 800797e:	897b      	ldrh	r3, [r7, #10]
 8007980:	429a      	cmp	r2, r3
 8007982:	da2e      	bge.n	80079e2 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x96>
    uChar = (uint8_t)str[i];
 8007984:	7b7b      	ldrb	r3, [r7, #13]
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	4413      	add	r3, r2
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	727b      	strb	r3, [r7, #9]
    if (uChar == 32) {
 800798e:	7a7b      	ldrb	r3, [r7, #9]
 8007990:	2b20      	cmp	r3, #32
 8007992:	d10b      	bne.n	80079ac <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x60>
      uWidth += (m_pCurrent->m_uSpaceWidth + m_pCurrent->m_uCharGap);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80079a0:	4413      	add	r3, r2
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	89fb      	ldrh	r3, [r7, #14]
 80079a6:	4413      	add	r3, r2
 80079a8:	81fb      	strh	r3, [r7, #14]
 80079aa:	e016      	b.n	80079da <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
    } else if ((uChar >= 33) && (uChar <= 126)) {
 80079ac:	7a7b      	ldrb	r3, [r7, #9]
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	d913      	bls.n	80079da <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
 80079b2:	7a7b      	ldrb	r3, [r7, #9]
 80079b4:	2b7e      	cmp	r3, #126	; 0x7e
 80079b6:	d810      	bhi.n	80079da <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
      uWidth += (m_pCurrent->m_pDesc[uChar-33].uWidth + m_pCurrent->m_uCharGap);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079be:	7a79      	ldrb	r1, [r7, #9]
 80079c0:	4b0d      	ldr	r3, [pc, #52]	; (80079f8 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xac>)
 80079c2:	440b      	add	r3, r1
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	881a      	ldrh	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80079d0:	4413      	add	r3, r2
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	89fb      	ldrh	r3, [r7, #14]
 80079d6:	4413      	add	r3, r2
 80079d8:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i=0; i<uLength; i++) {
 80079da:	7b7b      	ldrb	r3, [r7, #13]
 80079dc:	3301      	adds	r3, #1
 80079de:	737b      	strb	r3, [r7, #13]
 80079e0:	e7cc      	b.n	800797c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x30>
    }
  }
  uWidth -= m_pCurrent->m_uCharGap;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80079e8:	89fa      	ldrh	r2, [r7, #14]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	81fb      	strh	r3, [r7, #14]
  return uWidth;
 80079ee:	89fb      	ldrh	r3, [r7, #14]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	3fffffdf 	.word	0x3fffffdf

080079fc <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>:
//QAS_LCD_FontMgr::setDrawBuffer
//QAS_LCD_FontMgr Data Methods
//
//Sets the current frame buffer for text to be rendered to
//This method is to be called by QAS_LCD::imp_SetDrawBuffer() method
void QAS_LCD_FontMgr::setDrawBuffer(QAD_LTDC_Buffer* pBuffer) {
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  m_pBuffer = pBuffer;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	615a      	str	r2, [r3, #20]
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>:
//QAS_LCD_FontMgr::setDrawColor
//QAS_LCD_FontMgr Data Methods
//
//Sets the current color for text rendering
//This method is to be called by QAS_LCD::imp_setDrawColor() method
void QAS_LCD_FontMgr::setDrawColor(uint16_t uColor) {
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	807b      	strh	r3, [r7, #2]
  m_uColor = uColor;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	887a      	ldrh	r2, [r7, #2]
 8007a28:	831a      	strh	r2, [r3, #24]
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>:
//
//Used to draw a center-aligned string of characters using the currently selected font/typeface
//String will be drawn to currently selected draw buffer with currently selected draw color
//cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
//str  - The C-style string to be drawn
void QAS_LCD_FontMgr::drawStrC(QAT_Vector2_16 cPos, const char* str) {
 8007a36:	b590      	push	{r4, r7, lr}
 8007a38:	b089      	sub	sp, #36	; 0x24
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
  if ((m_pBuffer == NULL) || (m_iCurrentIdx < 0))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d067      	beq.n	8007b1a <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	db62      	blt.n	8007b1a <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
    return;

  uint8_t uLen = strlen(str);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7f8 fbf3 	bl	8000240 <strlen>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	77bb      	strb	r3, [r7, #30]
  if (uLen < 0) return;

  QAT_Vector2_16 cDrawPos = cPos;
 8007a5e:	f107 0314 	add.w	r3, r7, #20
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7f9 fa04 	bl	8000e72 <_ZN14QAT_Vector2_16C1ERKS_>
  cDrawPos.x -= (getStringWidth(str) / 2);
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f7ff ff6d 	bl	800794c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>
 8007a72:	4603      	mov	r3, r0
 8007a74:	085b      	lsrs	r3, r3, #1
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	8aba      	ldrh	r2, [r7, #20]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 8007a82:	2300      	movs	r3, #0
 8007a84:	77fb      	strb	r3, [r7, #31]
 8007a86:	7ffa      	ldrb	r2, [r7, #31]
 8007a88:	7fbb      	ldrb	r3, [r7, #30]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d246      	bcs.n	8007b1c <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe6>
  	if ((str[i] >= 33) && (str[i] <= 126)) {
 8007a8e:	7ffb      	ldrb	r3, [r7, #31]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	4413      	add	r3, r2
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	2b20      	cmp	r3, #32
 8007a98:	d92c      	bls.n	8007af4 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
 8007a9a:	7ffb      	ldrb	r3, [r7, #31]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b7e      	cmp	r3, #126	; 0x7e
 8007aa4:	d826      	bhi.n	8007af4 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
      drawCharP(cDrawPos, str[i]);
 8007aa6:	f107 0214 	add.w	r2, r7, #20
 8007aaa:	f107 0318 	add.w	r3, r7, #24
 8007aae:	4611      	mov	r1, r2
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7f9 f9de 	bl	8000e72 <_ZN14QAT_Vector2_16C1ERKS_>
 8007ab6:	7ffb      	ldrb	r3, [r7, #31]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	4413      	add	r3, r2
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	f107 0318 	add.w	r3, r7, #24
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 f82c 	bl	8007b22 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>
      cDrawPos.x += getCharWidth(str[i]) + getCharGap();
 8007aca:	7ffb      	ldrb	r3, [r7, #31]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	4413      	add	r3, r2
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f7ff ff09 	bl	80078ec <_ZN15QAS_LCD_FontMgr12getCharWidthEc>
 8007ada:	4603      	mov	r3, r0
 8007adc:	461c      	mov	r4, r3
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f7ff feef 	bl	80078c2 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	4423      	add	r3, r4
 8007ae8:	8aba      	ldrh	r2, [r7, #20]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	4413      	add	r3, r2
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	82bb      	strh	r3, [r7, #20]
 8007af2:	e00e      	b.n	8007b12 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xdc>
  	} else {
  		cDrawPos.x += getSpaceWidth() + getCharGap();
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f7ff fecf 	bl	8007898 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>
 8007afa:	4603      	mov	r3, r0
 8007afc:	461c      	mov	r4, r3
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f7ff fedf 	bl	80078c2 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 8007b04:	4603      	mov	r3, r0
 8007b06:	4423      	add	r3, r4
 8007b08:	8aba      	ldrh	r2, [r7, #20]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	4413      	add	r3, r2
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 8007b12:	7ffb      	ldrb	r3, [r7, #31]
 8007b14:	3301      	adds	r3, #1
 8007b16:	77fb      	strb	r3, [r7, #31]
 8007b18:	e7b5      	b.n	8007a86 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0x50>
    return;
 8007b1a:	bf00      	nop
  	}
  }
}
 8007b1c:	3724      	adds	r7, #36	; 0x24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd90      	pop	{r4, r7, pc}

08007b22 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>:
//QAS_LCD_FontMgr::drawCharP
//QAS_LCD_FontMgr Private Rendering Method
//
//Used to draw an individual character based on selected font's bitmap data
//This method is to be used by drawChar(), drawStrL(), drawStrC() and drawStrR() methods
void QAS_LCD_FontMgr::drawCharP(QAT_Vector2_16 cPos, char ch) {
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b08a      	sub	sp, #40	; 0x28
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	71fb      	strb	r3, [r7, #7]
  uint16_t uLetter = (uint8_t)ch - 33;
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	3b21      	subs	r3, #33	; 0x21
 8007b36:	83bb      	strh	r3, [r7, #28]
  uint16_t uWidth  = m_pCurrent->m_pDesc[uLetter].uWidth;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b3e:	8bbb      	ldrh	r3, [r7, #28]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	837b      	strh	r3, [r7, #26]
  uint32_t uOffset = m_pCurrent->m_pDesc[uLetter].uOffset;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b4e:	8bbb      	ldrh	r3, [r7, #28]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	885b      	ldrh	r3, [r3, #2]
 8007b56:	627b      	str	r3, [r7, #36]	; 0x24

  uint8_t uLine;
  uint8_t uLineInc;
  uint32_t uCur;

  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007b5e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	6912      	ldr	r2, [r2, #16]
 8007b66:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	da54      	bge.n	8007c16 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xf4>
    uLineInc = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uCur = cPos.x+((cPos.y+uHeight)*QAD_LTDC_WIDTH);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	4619      	mov	r1, r3
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	885b      	ldrh	r3, [r3, #2]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007b82:	4413      	add	r3, r2
 8007b84:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007b88:	fb02 f303 	mul.w	r3, r2, r3
 8007b8c:	440b      	add	r3, r1
 8007b8e:	617b      	str	r3, [r7, #20]
    for (uint16_t i=0; i<uWidth; i++) {
 8007b90:	2300      	movs	r3, #0
 8007b92:	83fb      	strh	r3, [r7, #30]
 8007b94:	8bfa      	ldrh	r2, [r7, #30]
 8007b96:	8b7b      	ldrh	r3, [r7, #26]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d236      	bcs.n	8007c0a <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe8>
      if (uLineInc == 0) {
 8007b9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x98>
        uLine = m_pCurrent->m_pData[uOffset];
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	4413      	add	r3, r2
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uOffset++;
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (uLine & 0x01)
 8007bba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00c      	beq.n	8007be0 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xbe>
        m_pBuffer->pixel[uCur+i] = m_uColor;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	695a      	ldr	r2, [r3, #20]
 8007bca:	8bf9      	ldrh	r1, [r7, #30]
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	440b      	add	r3, r1
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	441a      	add	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3318      	adds	r3, #24
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4610      	mov	r0, r2
 8007bdc:	f7ff fb30 	bl	8007240 <_ZN18QAT_Pixel_ARGB4444aSERKt>
      uLine = uLine >> 1;
 8007be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007be4:	105b      	asrs	r3, r3, #1
 8007be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      uLineInc++;
 8007bea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007bee:	3301      	adds	r3, #1
 8007bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (uLineInc > 7)
 8007bf4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007bf8:	2b07      	cmp	r3, #7
 8007bfa:	d902      	bls.n	8007c02 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe0>
        uLineInc = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    for (uint16_t i=0; i<uWidth; i++) {
 8007c02:	8bfb      	ldrh	r3, [r7, #30]
 8007c04:	3301      	adds	r3, #1
 8007c06:	83fb      	strh	r3, [r7, #30]
 8007c08:	e7c4      	b.n	8007b94 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x72>
  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 8007c0a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007c0e:	3301      	adds	r3, #1
 8007c10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007c14:	e7a3      	b.n	8007b5e <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x3c>
    }
  }
}
 8007c16:	bf00      	nop
 8007c18:	3728      	adds	r7, #40	; 0x28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d00c      	beq.n	8007c4e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	f000 f823 	bl	8007c88 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	1d1a      	adds	r2, r3, #4
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	605a      	str	r2, [r3, #4]
      }
 8007c4c:	e008      	b.n	8007c60 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f82d 	bl	8007cae <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>
 8007c54:	4603      	mov	r3, r0
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f84e 	bl	8007cfc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	f107 030c 	add.w	r3, r7, #12
 8007c76:	4611      	mov	r1, r2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 f8fb 	bl	8007e74 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f908 	bl	8007eaa <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 f90d 	bl	8007ec0 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8007ca6:	bf00      	nop
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	1d1a      	adds	r2, r3, #4
 8007cba:	f107 030c 	add.w	r3, r7, #12
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 f8d7 	bl	8007e74 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 f805 	bl	8007ce6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8007cdc:	4603      	mov	r3, r0
      }
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8007cee:	2301      	movs	r3, #1
      }
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8007cfc:	b5b0      	push	{r4, r5, r7, lr}
 8007cfe:	b08c      	sub	sp, #48	; 0x30
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8007d08:	4a59      	ldr	r2, [pc, #356]	; (8007e70 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f8ed 	bl	8007eec <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>
 8007d12:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f7ff ffa1 	bl	8007c68 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>
 8007d26:	4603      	mov	r3, r0
 8007d28:	617b      	str	r3, [r7, #20]
 8007d2a:	f107 0214 	add.w	r2, r7, #20
 8007d2e:	f107 0308 	add.w	r3, r7, #8
 8007d32:	4611      	mov	r1, r2
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 f920 	bl	8007f7a <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 f92e 	bl	8007fa4 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>
 8007d48:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8007d4e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	18d5      	adds	r5, r2, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f8a6 	bl	8007eaa <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	461a      	mov	r2, r3
 8007d62:	4629      	mov	r1, r5
 8007d64:	4620      	mov	r0, r4
 8007d66:	f7ff ff8f 	bl	8007c88 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8007d6e:	f7ff ffaf 	bl	8007cd0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d027      	beq.n	8007dc8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007d78:	f107 0308 	add.w	r3, r7, #8
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 f889 	bl	8007e94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007d82:	4603      	mov	r3, r0
 8007d84:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7f9 fd8e 	bl	80018aa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007d8e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	4621      	mov	r1, r4
 8007d94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d96:	f000 f919 	bl	8007fcc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8007d9a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8007d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9e:	3304      	adds	r3, #4
 8007da0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8007da2:	f107 0308 	add.w	r3, r7, #8
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f874 	bl	8007e94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007dac:	4603      	mov	r3, r0
 8007dae:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7f9 fd79 	bl	80018aa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007db8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8007dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dbc:	6a39      	ldr	r1, [r7, #32]
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f000 f904 	bl	8007fcc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8007dc4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007dc6:	e026      	b.n	8007e16 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8007dc8:	f107 0308 	add.w	r3, r7, #8
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 f861 	bl	8007e94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7f9 fd66 	bl	80018aa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007dde:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	4621      	mov	r1, r4
 8007de4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007de6:	f000 f905 	bl	8007ff4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007dea:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8007dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dee:	3304      	adds	r3, #4
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8007df2:	f107 0308 	add.w	r3, r7, #8
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 f84c 	bl	8007e94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7f9 fd51 	bl	80018aa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007e08:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8007e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e0c:	6a39      	ldr	r1, [r7, #32]
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 f8f0 	bl	8007ff4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007e14:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8007e16:	f7ff ff5b 	bl	8007cd0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	f083 0301 	eor.w	r3, r3, #1
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7f9 fd3e 	bl	80018aa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	461a      	mov	r2, r3
 8007e32:	6a39      	ldr	r1, [r7, #32]
 8007e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e36:	f7f9 fd43 	bl	80018c0 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8007e3a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8007e46:	461a      	mov	r2, r3
 8007e48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e4a:	f7f9 fd1b 	bl	8001884 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e58:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	441a      	add	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	609a      	str	r2, [r3, #8]
    }
 8007e66:	bf00      	nop
 8007e68:	3730      	adds	r7, #48	; 0x30
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	08009664 	.word	0x08009664

08007e74 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8007ec0:	b590      	push	{r4, r7, lr}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff ffec 	bl	8007eaa <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	681c      	ldr	r4, [r3, #0]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	2004      	movs	r0, #4
 8007edc:	f7ff fbc1 	bl	8007662 <_ZnwjPv>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	601c      	str	r4, [r3, #0]
 8007ee4:	bf00      	nop
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd90      	pop	{r4, r7, pc}

08007eec <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8007eec:	b590      	push	{r4, r7, lr}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 f894 	bl	8008026 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007efe:	4604      	mov	r4, r0
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7f9 fc0a 	bl	800171a <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007f06:	4603      	mov	r3, r0
 8007f08:	1ae2      	subs	r2, r4, r3
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	bf34      	ite	cc
 8007f10:	2301      	movcc	r3, #1
 8007f12:	2300      	movcs	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fd9d 	bl	8008a5a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7f9 fbfa 	bl	800171a <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007f26:	4604      	mov	r4, r0
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f7f9 fbf6 	bl	800171a <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	613b      	str	r3, [r7, #16]
 8007f32:	f107 0208 	add.w	r2, r7, #8
 8007f36:	f107 0310 	add.w	r3, r7, #16
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 f883 	bl	8008048 <_ZSt3maxIjERKT_S2_S2_>
 8007f42:	4603      	mov	r3, r0
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4423      	add	r3, r4
 8007f48:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7f9 fbe5 	bl	800171a <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007f50:	4602      	mov	r2, r0
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d306      	bcc.n	8007f66 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f000 f864 	bl	8008026 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d904      	bls.n	8007f70 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x84>
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 f85d 	bl	8008026 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	e000      	b.n	8007f72 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x86>
 8007f70:	697b      	ldr	r3, [r7, #20]
      }
 8007f72:	4618      	mov	r0, r3
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd90      	pop	{r4, r7, pc}

08007f7a <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007f7a:	b590      	push	{r4, r7, lr}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff ff85 	bl	8007e94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	681c      	ldr	r4, [r3, #0]
 8007f8e:	6838      	ldr	r0, [r7, #0]
 8007f90:	f7ff ff80 	bl	8007e94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007f94:	4603      	mov	r3, r0
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	1ae3      	subs	r3, r4, r3
 8007f9a:	109b      	asrs	r3, r3, #2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd90      	pop	{r4, r7, pc}

08007fa4 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d006      	beq.n	8007fc2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x1e>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 f859 	bl	8008070 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	e000      	b.n	8007fc4 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x20>
 8007fc2:	2300      	movs	r3, #0
      }
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8007fcc:	b590      	push	{r4, r7, lr}
 8007fce:	b089      	sub	sp, #36	; 0x24
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
 8007fd8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8007fda:	f88d 4000 	strb.w	r4, [sp]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 f852 	bl	800808e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8007fea:	4603      	mov	r3, r0
      }
 8007fec:	4618      	mov	r0, r3
 8007fee:	371c      	adds	r7, #28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd90      	pop	{r4, r7, pc}

08007ff4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8007ff4:	b590      	push	{r4, r7, lr}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f000 f855 	bl	80080b2 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 8008008:	4604      	mov	r4, r0
 800800a:	68b8      	ldr	r0, [r7, #8]
 800800c:	f000 f851 	bl	80080b2 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 8008010:	4601      	mov	r1, r0
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	4620      	mov	r0, r4
 8008018:	f000 f85a 	bl	80080d0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800801c:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	bd90      	pop	{r4, r7, pc}

08008026 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 f878 	bl	8008126 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8008036:	4603      	mov	r3, r0
 8008038:	4618      	mov	r0, r3
 800803a:	f000 f85a 	bl	80080f2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>
 800803e:	4603      	mov	r3, r0
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	429a      	cmp	r2, r3
 800805c:	d201      	bcs.n	8008062 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	e000      	b.n	8008064 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8008062:	687b      	ldr	r3, [r7, #4]
    }
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800807a:	2200      	movs	r2, #0
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f85c 	bl	800813c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>
 8008084:	4603      	mov	r3, r0
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	60f8      	str	r0, [r7, #12]
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	607a      	str	r2, [r7, #4]
 800809a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	68b9      	ldr	r1, [r7, #8]
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 f868 	bl	8008178 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 80080a8:	4603      	mov	r3, r0
      }
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80080ba:	f107 030c 	add.w	r3, r7, #12
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 f876 	bl	80081b2 <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	68b9      	ldr	r1, [r7, #8]
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 f874 	bl	80081d0 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 80080e8:	4603      	mov	r3, r0
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80080fa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80080fe:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f889 	bl	8008218 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>
 8008106:	4603      	mov	r3, r0
 8008108:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800810a:	f107 0208 	add.w	r2, r7, #8
 800810e:	f107 030c 	add.w	r3, r7, #12
 8008112:	4611      	mov	r1, r2
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f88b 	bl	8008230 <_ZSt3minIjERKT_S2_S2_>
 800811a:	4603      	mov	r3, r0
 800811c:	681b      	ldr	r3, [r3, #0]
      }
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4618      	mov	r0, r3
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 f885 	bl	8008258 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 800814e:	4602      	mov	r2, r0
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	4293      	cmp	r3, r2
 8008154:	bf8c      	ite	hi
 8008156:	2301      	movhi	r3, #1
 8008158:	2300      	movls	r3, #0
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8008160:	f000 fc78 	bl	8008a54 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4618      	mov	r0, r3
 800816a:	f000 fc5d 	bl	8008a28 <_Znwj>
 800816e:	4603      	mov	r3, r0
      }
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8008178:	b5b0      	push	{r4, r5, r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 f872 	bl	8008270 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800818c:	4604      	mov	r4, r0
 800818e:	68b8      	ldr	r0, [r7, #8]
 8008190:	f000 f86e 	bl	8008270 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8008194:	4605      	mov	r5, r0
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f86a 	bl	8008270 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800819c:	4602      	mov	r2, r0
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	4629      	mov	r1, r5
 80081a2:	4620      	mov	r0, r4
 80081a4:	f000 f86f 	bl	8008286 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80081a8:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bdb0      	pop	{r4, r5, r7, pc}

080081b2 <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>:
      move_iterator(iterator_type __i)
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80081dc:	2301      	movs	r3, #1
 80081de:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	68b9      	ldr	r1, [r7, #8]
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 f86c 	bl	80082c2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>
 80081ea:	4603      	mov	r3, r0
    }
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8008200:	2301      	movs	r3, #1
 8008202:	75fb      	strb	r3, [r7, #23]
			     && __is_pointer<_II>::__value
			     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
			      _Category>::__copy_m(__first, __last, __result);
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	68b9      	ldr	r1, [r7, #8]
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 f86a 	bl	80082e2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>
 800820e:	4603      	mov	r3, r0
    }
 8008210:	4618      	mov	r0, r3
 8008212:	3718      	adds	r7, #24
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f819 	bl	8008258 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 8008226:	4603      	mov	r3, r0
 8008228:	4618      	mov	r0, r3
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d201      	bcs.n	800824a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	e000      	b.n	800824c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800824a:	687b      	ldr	r3, [r7, #4]
    }
 800824c:	4618      	mov	r0, r3
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8008260:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>:
    __niter_base(_Iterator __it)
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4618      	mov	r0, r3
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8008286:	b580      	push	{r7, lr}
 8008288:	b086      	sub	sp, #24
 800828a:	af00      	add	r7, sp, #0
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	60b9      	str	r1, [r7, #8]
 8008290:	607a      	str	r2, [r7, #4]
 8008292:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	109b      	asrs	r3, r3, #2
 800829c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	dd06      	ble.n	80082b2 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	461a      	mov	r2, r3
 80082aa:	68f9      	ldr	r1, [r7, #12]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fc47 	bl	8008b40 <memmove>
      return __result + __count;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	4413      	add	r3, r2
    }
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	60f8      	str	r0, [r7, #12]
 80082ca:	60b9      	str	r1, [r7, #8]
 80082cc:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	68b9      	ldr	r1, [r7, #8]
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 f822 	bl	800831c <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 80082d8:	4603      	mov	r3, r0
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b086      	sub	sp, #24
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	109b      	asrs	r3, r3, #2
 80082f6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d006      	beq.n	800830c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	461a      	mov	r2, r3
 8008304:	68f9      	ldr	r1, [r7, #12]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fc1a 	bl	8008b40 <memmove>
	  return __result + _Num;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	4413      	add	r3, r2
	}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800831c:	b590      	push	{r4, r7, lr}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 f80f 	bl	800834c <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800832e:	4604      	mov	r4, r0
 8008330:	68b8      	ldr	r0, [r7, #8]
 8008332:	f000 f80b 	bl	800834c <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8008336:	4603      	mov	r3, r0
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	4619      	mov	r1, r3
 800833c:	4620      	mov	r0, r4
 800833e:	f000 f816 	bl	800836e <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 8008342:	4603      	mov	r3, r0
    }
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	bd90      	pop	{r4, r7, pc}

0800834c <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8008354:	1d3b      	adds	r3, r7, #4
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f82c 	bl	80083b4 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>
 800835c:	4603      	mov	r3, r0
 800835e:	4618      	mov	r0, r3
 8008360:	f000 f834 	bl	80083cc <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>
 8008364:	4603      	mov	r3, r0
 8008366:	4618      	mov	r0, r3
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800836e:	b5b0      	push	{r4, r5, r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f7ff ff78 	bl	8008270 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8008380:	4604      	mov	r4, r0
 8008382:	68b8      	ldr	r0, [r7, #8]
 8008384:	f7ff ff74 	bl	8008270 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8008388:	4605      	mov	r5, r0
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff ff6f 	bl	8008270 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8008392:	4603      	mov	r3, r0
 8008394:	461a      	mov	r2, r3
 8008396:	4629      	mov	r1, r5
 8008398:	4620      	mov	r0, r4
 800839a:	f7ff ff2b 	bl	80081f4 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 800839e:	4602      	mov	r2, r0
 80083a0:	1d3b      	adds	r3, r7, #4
 80083a2:	4611      	mov	r1, r2
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 f81c 	bl	80083e2 <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>
 80083aa:	4603      	mov	r3, r0
    }
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bdb0      	pop	{r4, r5, r7, pc}

080083b4 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>:
      base() const
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]
    { return __res; }
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	4618      	mov	r0, r3
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	7b1b      	ldrb	r3, [r3, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	e010      	b.n	8008432 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	4798      	blx	r3
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 8008426:	7bfb      	ldrb	r3, [r7, #15]
 8008428:	e003      	b.n	8008432 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3308      	adds	r3, #8
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	4798      	blx	r3
}
 8008452:	bf00      	nop
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <_ZN19QAS_Serial_Dev_Base8txStringEPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txString(const char* str) {
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 8008464:	6838      	ldr	r0, [r7, #0]
 8008466:	f7f7 feeb 	bl	8000240 <strlen>
 800846a:	4603      	mov	r3, r0
 800846c:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 800846e:	2300      	movs	r3, #0
 8008470:	81fb      	strh	r3, [r7, #14]
 8008472:	89fa      	ldrh	r2, [r7, #14]
 8008474:	89bb      	ldrh	r3, [r7, #12]
 8008476:	429a      	cmp	r2, r3
 8008478:	d20f      	bcs.n	800849a <_ZN19QAS_Serial_Dev_Base8txStringEPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3304      	adds	r3, #4
 800847e:	4618      	mov	r0, r3
 8008480:	f000 f861 	bl	8008546 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008484:	89fb      	ldrh	r3, [r7, #14]
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	4413      	add	r3, r2
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	4619      	mov	r1, r3
 800848e:	f000 fa09 	bl	80088a4 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 8008492:	89fb      	ldrh	r3, [r7, #14]
 8008494:	3301      	adds	r3, #1
 8008496:	81fb      	strh	r3, [r7, #14]
 8008498:	e7eb      	b.n	8008472 <_ZN19QAS_Serial_Dev_Base8txStringEPKc+0x18>
  }
  imp_txStart();
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	330c      	adds	r3, #12
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
}
 80084a6:	bf00      	nop
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 80084b8:	6838      	ldr	r0, [r7, #0]
 80084ba:	f7f7 fec1 	bl	8000240 <strlen>
 80084be:	4603      	mov	r3, r0
 80084c0:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 80084c2:	2300      	movs	r3, #0
 80084c4:	81fb      	strh	r3, [r7, #14]
 80084c6:	89fa      	ldrh	r2, [r7, #14]
 80084c8:	89bb      	ldrh	r3, [r7, #12]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d20f      	bcs.n	80084ee <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	3304      	adds	r3, #4
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f837 	bl	8008546 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80084d8:	89fb      	ldrh	r3, [r7, #14]
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	4413      	add	r3, r2
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	4619      	mov	r1, r3
 80084e2:	f000 f9df 	bl	80088a4 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 80084e6:	89fb      	ldrh	r3, [r7, #14]
 80084e8:	3301      	adds	r3, #1
 80084ea:	81fb      	strh	r3, [r7, #14]
 80084ec:	e7eb      	b.n	80084c6 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	3304      	adds	r3, #4
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 f827 	bl	8008546 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80084f8:	4603      	mov	r3, r0
 80084fa:	210d      	movs	r1, #13
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 f9d1 	bl	80088a4 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	330c      	adds	r3, #12
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	4798      	blx	r3
}
 800850e:	bf00      	nop
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	3304      	adds	r3, #4
 8008522:	4618      	mov	r0, r3
 8008524:	f000 f80f 	bl	8008546 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008528:	4603      	mov	r3, r0
 800852a:	210d      	movs	r1, #13
 800852c:	4618      	mov	r0, r3
 800852e:	f000 f9b9 	bl	80088a4 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	330c      	adds	r3, #12
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
}
 800853e:	bf00      	nop
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
	return get();
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f805 	bl	800855e <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 8008554:	4603      	mov	r3, r0
      }
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800855e:	b580      	push	{r7, lr}
 8008560:	b082      	sub	sp, #8
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f805 	bl	8008578 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 800856e:	4603      	mov	r3, r0
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4618      	mov	r0, r3
 8008584:	f000 f806 	bl	8008594 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008588:	4603      	mov	r3, r0
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 f805 	bl	80085ae <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80085a4:	4603      	mov	r3, r0
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b082      	sub	sp, #8
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f805 	bl	80085c6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 80085bc:	4603      	mov	r3, r0
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 f805 	bl	80085e0 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 80085d6:	4603      	mov	r3, r0
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4618      	mov	r0, r3
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b082      	sub	sp, #8
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	3314      	adds	r3, #20
 8008604:	4618      	mov	r0, r3
 8008606:	f000 f8e2 	bl	80087ce <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800860a:	4603      	mov	r3, r0
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe fa5c 	bl	8006aca <_ZN8QAD_UART4initEv>
 8008612:	4603      	mov	r3, r0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3314      	adds	r3, #20
 8008628:	4618      	mov	r0, r3
 800862a:	f000 f8d0 	bl	80087ce <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800862e:	4603      	mov	r3, r0
 8008630:	4618      	mov	r0, r3
 8008632:	f7fe fa74 	bl	8006b1e <_ZN8QAD_UART6deinitEv>
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 800863e:	b590      	push	{r4, r7, lr}
 8008640:	b0a5      	sub	sp, #148	; 0x94
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	3314      	adds	r3, #20
 800864c:	4618      	mov	r0, r3
 800864e:	f000 f8be 	bl	80087ce <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008652:	4603      	mov	r3, r0
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe fa78 	bl	8006b4a <_ZN8QAD_UART9getHandleEv>
 800865a:	4602      	mov	r2, r0
 800865c:	f107 0308 	add.w	r3, r7, #8
 8008660:	4611      	mov	r1, r2
 8008662:	2284      	movs	r2, #132	; 0x84
 8008664:	4618      	mov	r0, r3
 8008666:	f000 fa5d 	bl	8008b24 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b20      	cmp	r3, #32
 8008674:	bf0c      	ite	eq
 8008676:	2301      	moveq	r3, #1
 8008678:	2300      	movne	r3, #0
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01e      	beq.n	80086be <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x80>
  	uint8_t uData = m_pUART->dataRX();
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3314      	adds	r3, #20
 8008684:	4618      	mov	r0, r3
 8008686:	f000 f8a2 	bl	80087ce <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800868a:	4603      	mov	r3, r0
 800868c:	4618      	mov	r0, r3
 800868e:	f7fe fad0 	bl	8006c32 <_ZN8QAD_UART6dataRXEv>
 8008692:	4603      	mov	r3, r0
 8008694:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  	if (m_eRXState)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	7b9b      	ldrb	r3, [r3, #14]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00b      	beq.n	80086b8 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3308      	adds	r3, #8
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7ff ff4e 	bl	8008546 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80086aa:	4602      	mov	r2, r0
 80086ac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80086b0:	4619      	mov	r1, r3
 80086b2:	4610      	mov	r0, r2
 80086b4:	f000 f8f6 	bl	80088a4 <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2220      	movs	r2, #32
 80086bc:	621a      	str	r2, [r3, #32]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c6:	2b80      	cmp	r3, #128	; 0x80
 80086c8:	bf0c      	ite	eq
 80086ca:	2301      	moveq	r3, #1
 80086cc:	2300      	movne	r3, #0
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d034      	beq.n	800873e <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x100>
  	if (!m_pTXFIFO->empty()) {
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff ff34 	bl	8008546 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80086de:	4603      	mov	r3, r0
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 f8cc 	bl	800887e <_ZN14QAT_FIFOBuffer5emptyEv>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	bf0c      	ite	eq
 80086ec:	2301      	moveq	r3, #1
 80086ee:	2300      	movne	r3, #0
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d014      	beq.n	8008720 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe2>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3314      	adds	r3, #20
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 f867 	bl	80087ce <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008700:	4604      	mov	r4, r0
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3304      	adds	r3, #4
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff ff1d 	bl	8008546 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800870c:	4603      	mov	r3, r0
 800870e:	4618      	mov	r0, r3
 8008710:	f000 f8ec 	bl	80088ec <_ZN14QAT_FIFOBuffer3popEv>
 8008714:	4603      	mov	r3, r0
 8008716:	4619      	mov	r1, r3
 8008718:	4620      	mov	r0, r4
 800871a:	f7fe fa7a 	bl	8006c12 <_ZN8QAD_UART6dataTXEh>
 800871e:	e00b      	b.n	8008738 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfa>
  	} else {
      m_pUART->stopTX();
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3314      	adds	r3, #20
 8008724:	4618      	mov	r0, r3
 8008726:	f000 f852 	bl	80087ce <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800872a:	4603      	mov	r3, r0
 800872c:	4618      	mov	r0, r3
 800872e:	f7fe fa2e 	bl	8006b8e <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2280      	movs	r2, #128	; 0x80
 800873c:	621a      	str	r2, [r3, #32]
  }
}
 800873e:	bf00      	nop
 8008740:	3794      	adds	r7, #148	; 0x94
 8008742:	46bd      	mov	sp, r7
 8008744:	bd90      	pop	{r4, r7, pc}

08008746 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 8008746:	b580      	push	{r7, lr}
 8008748:	b082      	sub	sp, #8
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	3314      	adds	r3, #20
 8008752:	4618      	mov	r0, r3
 8008754:	f000 f83b 	bl	80087ce <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008758:	4603      	mov	r3, r0
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe fa01 	bl	8006b62 <_ZN8QAD_UART7startTXEv>
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3314      	adds	r3, #20
 8008774:	4618      	mov	r0, r3
 8008776:	f000 f82a 	bl	80087ce <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800877a:	4603      	mov	r3, r0
 800877c:	4618      	mov	r0, r3
 800877e:	f7fe fa06 	bl	8006b8e <_ZN8QAD_UART6stopTXEv>
}
 8008782:	bf00      	nop
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	3314      	adds	r3, #20
 8008796:	4618      	mov	r0, r3
 8008798:	f000 f819 	bl	80087ce <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800879c:	4603      	mov	r3, r0
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fa0b 	bl	8006bba <_ZN8QAD_UART7startRXEv>
}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3314      	adds	r3, #20
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 f808 	bl	80087ce <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80087be:	4603      	mov	r3, r0
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fe fa10 	bl	8006be6 <_ZN8QAD_UART6stopRXEv>
}
 80087c6:	bf00      	nop
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
	return get();
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f805 	bl	80087e6 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 80087dc:	4603      	mov	r3, r0
      }
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 f805 	bl	8008800 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 80087f6:	4603      	mov	r3, r0
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4618      	mov	r0, r3
 800880c:	f000 f806 	bl	800881c <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008810:	4603      	mov	r3, r0
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f805 	bl	8008836 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800882c:	4603      	mov	r3, r0
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008836:	b580      	push	{r7, lr}
 8008838:	b082      	sub	sp, #8
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f805 	bl	800884e <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 8008844:	4603      	mov	r3, r0
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4618      	mov	r0, r3
 800885a:	f000 f805 	bl	8008868 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 800885e:	4603      	mov	r3, r0
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4618      	mov	r0, r3
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	88da      	ldrh	r2, [r3, #6]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	891b      	ldrh	r3, [r3, #8]
 800888e:	429a      	cmp	r2, r3
 8008890:	d101      	bne.n	8008896 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	891b      	ldrh	r3, [r3, #8]
 80088b6:	4619      	mov	r1, r3
 80088b8:	4610      	mov	r0, r2
 80088ba:	f000 f847 	bl	800894c <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 80088be:	4602      	mov	r2, r0
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	889a      	ldrh	r2, [r3, #4]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	891b      	ldrh	r3, [r3, #8]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d906      	bls.n	80088de <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	891b      	ldrh	r3, [r3, #8]
 80088d4:	3301      	adds	r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 80088dc:	e002      	b.n	80088e4 <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	811a      	strh	r2, [r3, #8]
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff ffc2 	bl	800887e <_ZN14QAT_FIFOBuffer5emptyEv>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	bf0c      	ite	eq
 8008900:	2301      	moveq	r3, #1
 8008902:	2300      	movne	r3, #0
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d01b      	beq.n	8008942 <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	88db      	ldrh	r3, [r3, #6]
 8008910:	4619      	mov	r1, r3
 8008912:	4610      	mov	r0, r2
 8008914:	f000 f81a 	bl	800894c <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8008918:	4603      	mov	r3, r0
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	889a      	ldrh	r2, [r3, #4]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	88db      	ldrh	r3, [r3, #6]
 8008926:	429a      	cmp	r2, r3
 8008928:	d906      	bls.n	8008938 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	88db      	ldrh	r3, [r3, #6]
 800892e:	3301      	adds	r3, #1
 8008930:	b29a      	uxth	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	80da      	strh	r2, [r3, #6]
 8008936:	e002      	b.n	800893e <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	80da      	strh	r2, [r3, #6]
		return uData;
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	e000      	b.n	8008944 <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
	return get()[__i];
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f807 	bl	800896a <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800895c:	4602      	mov	r2, r0
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	4413      	add	r3, r2
      }
 8008962:	4618      	mov	r0, r3
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4618      	mov	r0, r3
 8008976:	f000 f805 	bl	8008984 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800897a:	4603      	mov	r3, r0
 800897c:	4618      	mov	r0, r3
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f806 	bl	80089a0 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008994:	4603      	mov	r3, r0
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 f805 	bl	80089ba <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80089b0:	4603      	mov	r3, r0
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f805 	bl	80089d2 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 80089c8:	4603      	mov	r3, r0
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b082      	sub	sp, #8
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 f805 	bl	80089ec <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 80089e2:	4603      	mov	r3, r0
 80089e4:	4618      	mov	r0, r3
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4618      	mov	r0, r3
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <_ZdlPv>:
 8008a02:	f000 b887 	b.w	8008b14 <free>

08008a06 <_ZdlPvj>:
 8008a06:	f7ff bffc 	b.w	8008a02 <_ZdlPv>

08008a0a <__cxa_guard_acquire>:
 8008a0a:	6803      	ldr	r3, [r0, #0]
 8008a0c:	07db      	lsls	r3, r3, #31
 8008a0e:	d406      	bmi.n	8008a1e <__cxa_guard_acquire+0x14>
 8008a10:	7843      	ldrb	r3, [r0, #1]
 8008a12:	b103      	cbz	r3, 8008a16 <__cxa_guard_acquire+0xc>
 8008a14:	deff      	udf	#255	; 0xff
 8008a16:	2301      	movs	r3, #1
 8008a18:	7043      	strb	r3, [r0, #1]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	4770      	bx	lr
 8008a1e:	2000      	movs	r0, #0
 8008a20:	4770      	bx	lr

08008a22 <__cxa_guard_release>:
 8008a22:	2301      	movs	r3, #1
 8008a24:	6003      	str	r3, [r0, #0]
 8008a26:	4770      	bx	lr

08008a28 <_Znwj>:
 8008a28:	2801      	cmp	r0, #1
 8008a2a:	bf38      	it	cc
 8008a2c:	2001      	movcc	r0, #1
 8008a2e:	b510      	push	{r4, lr}
 8008a30:	4604      	mov	r4, r0
 8008a32:	4620      	mov	r0, r4
 8008a34:	f000 f866 	bl	8008b04 <malloc>
 8008a38:	b930      	cbnz	r0, 8008a48 <_Znwj+0x20>
 8008a3a:	f000 f823 	bl	8008a84 <_ZSt15get_new_handlerv>
 8008a3e:	b908      	cbnz	r0, 8008a44 <_Znwj+0x1c>
 8008a40:	f000 f828 	bl	8008a94 <abort>
 8008a44:	4780      	blx	r0
 8008a46:	e7f4      	b.n	8008a32 <_Znwj+0xa>
 8008a48:	bd10      	pop	{r4, pc}

08008a4a <_Znaj>:
 8008a4a:	f7ff bfed 	b.w	8008a28 <_Znwj>

08008a4e <__cxa_pure_virtual>:
 8008a4e:	b508      	push	{r3, lr}
 8008a50:	f000 f812 	bl	8008a78 <_ZSt9terminatev>

08008a54 <_ZSt17__throw_bad_allocv>:
 8008a54:	b508      	push	{r3, lr}
 8008a56:	f000 f81d 	bl	8008a94 <abort>

08008a5a <_ZSt20__throw_length_errorPKc>:
 8008a5a:	b508      	push	{r3, lr}
 8008a5c:	f000 f81a 	bl	8008a94 <abort>

08008a60 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008a60:	b508      	push	{r3, lr}
 8008a62:	4780      	blx	r0
 8008a64:	f000 f816 	bl	8008a94 <abort>

08008a68 <_ZSt13get_terminatev>:
 8008a68:	4b02      	ldr	r3, [pc, #8]	; (8008a74 <_ZSt13get_terminatev+0xc>)
 8008a6a:	6818      	ldr	r0, [r3, #0]
 8008a6c:	f3bf 8f5b 	dmb	ish
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	2000000c 	.word	0x2000000c

08008a78 <_ZSt9terminatev>:
 8008a78:	b508      	push	{r3, lr}
 8008a7a:	f7ff fff5 	bl	8008a68 <_ZSt13get_terminatev>
 8008a7e:	f7ff ffef 	bl	8008a60 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08008a84 <_ZSt15get_new_handlerv>:
 8008a84:	4b02      	ldr	r3, [pc, #8]	; (8008a90 <_ZSt15get_new_handlerv+0xc>)
 8008a86:	6818      	ldr	r0, [r3, #0]
 8008a88:	f3bf 8f5b 	dmb	ish
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	20000310 	.word	0x20000310

08008a94 <abort>:
 8008a94:	b508      	push	{r3, lr}
 8008a96:	2006      	movs	r0, #6
 8008a98:	f000 f956 	bl	8008d48 <raise>
 8008a9c:	2001      	movs	r0, #1
 8008a9e:	f7f9 f92a 	bl	8001cf6 <_exit>

08008aa2 <atexit>:
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	4601      	mov	r1, r0
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 b991 	b.w	8008dd0 <__register_exitproc>
	...

08008ab0 <__errno>:
 8008ab0:	4b01      	ldr	r3, [pc, #4]	; (8008ab8 <__errno+0x8>)
 8008ab2:	6818      	ldr	r0, [r3, #0]
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	20000010 	.word	0x20000010

08008abc <__libc_init_array>:
 8008abc:	b570      	push	{r4, r5, r6, lr}
 8008abe:	4d0d      	ldr	r5, [pc, #52]	; (8008af4 <__libc_init_array+0x38>)
 8008ac0:	4c0d      	ldr	r4, [pc, #52]	; (8008af8 <__libc_init_array+0x3c>)
 8008ac2:	1b64      	subs	r4, r4, r5
 8008ac4:	10a4      	asrs	r4, r4, #2
 8008ac6:	2600      	movs	r6, #0
 8008ac8:	42a6      	cmp	r6, r4
 8008aca:	d109      	bne.n	8008ae0 <__libc_init_array+0x24>
 8008acc:	4d0b      	ldr	r5, [pc, #44]	; (8008afc <__libc_init_array+0x40>)
 8008ace:	4c0c      	ldr	r4, [pc, #48]	; (8008b00 <__libc_init_array+0x44>)
 8008ad0:	f000 fd0e 	bl	80094f0 <_init>
 8008ad4:	1b64      	subs	r4, r4, r5
 8008ad6:	10a4      	asrs	r4, r4, #2
 8008ad8:	2600      	movs	r6, #0
 8008ada:	42a6      	cmp	r6, r4
 8008adc:	d105      	bne.n	8008aea <__libc_init_array+0x2e>
 8008ade:	bd70      	pop	{r4, r5, r6, pc}
 8008ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae4:	4798      	blx	r3
 8008ae6:	3601      	adds	r6, #1
 8008ae8:	e7ee      	b.n	8008ac8 <__libc_init_array+0xc>
 8008aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aee:	4798      	blx	r3
 8008af0:	3601      	adds	r6, #1
 8008af2:	e7f2      	b.n	8008ada <__libc_init_array+0x1e>
 8008af4:	0800cc78 	.word	0x0800cc78
 8008af8:	0800cc78 	.word	0x0800cc78
 8008afc:	0800cc78 	.word	0x0800cc78
 8008b00:	0800cc7c 	.word	0x0800cc7c

08008b04 <malloc>:
 8008b04:	4b02      	ldr	r3, [pc, #8]	; (8008b10 <malloc+0xc>)
 8008b06:	4601      	mov	r1, r0
 8008b08:	6818      	ldr	r0, [r3, #0]
 8008b0a:	f000 b88b 	b.w	8008c24 <_malloc_r>
 8008b0e:	bf00      	nop
 8008b10:	20000010 	.word	0x20000010

08008b14 <free>:
 8008b14:	4b02      	ldr	r3, [pc, #8]	; (8008b20 <free+0xc>)
 8008b16:	4601      	mov	r1, r0
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	f000 b833 	b.w	8008b84 <_free_r>
 8008b1e:	bf00      	nop
 8008b20:	20000010 	.word	0x20000010

08008b24 <memcpy>:
 8008b24:	440a      	add	r2, r1
 8008b26:	4291      	cmp	r1, r2
 8008b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b2c:	d100      	bne.n	8008b30 <memcpy+0xc>
 8008b2e:	4770      	bx	lr
 8008b30:	b510      	push	{r4, lr}
 8008b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b3a:	4291      	cmp	r1, r2
 8008b3c:	d1f9      	bne.n	8008b32 <memcpy+0xe>
 8008b3e:	bd10      	pop	{r4, pc}

08008b40 <memmove>:
 8008b40:	4288      	cmp	r0, r1
 8008b42:	b510      	push	{r4, lr}
 8008b44:	eb01 0402 	add.w	r4, r1, r2
 8008b48:	d902      	bls.n	8008b50 <memmove+0x10>
 8008b4a:	4284      	cmp	r4, r0
 8008b4c:	4623      	mov	r3, r4
 8008b4e:	d807      	bhi.n	8008b60 <memmove+0x20>
 8008b50:	1e43      	subs	r3, r0, #1
 8008b52:	42a1      	cmp	r1, r4
 8008b54:	d008      	beq.n	8008b68 <memmove+0x28>
 8008b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b5e:	e7f8      	b.n	8008b52 <memmove+0x12>
 8008b60:	4402      	add	r2, r0
 8008b62:	4601      	mov	r1, r0
 8008b64:	428a      	cmp	r2, r1
 8008b66:	d100      	bne.n	8008b6a <memmove+0x2a>
 8008b68:	bd10      	pop	{r4, pc}
 8008b6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b72:	e7f7      	b.n	8008b64 <memmove+0x24>

08008b74 <memset>:
 8008b74:	4402      	add	r2, r0
 8008b76:	4603      	mov	r3, r0
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d100      	bne.n	8008b7e <memset+0xa>
 8008b7c:	4770      	bx	lr
 8008b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b82:	e7f9      	b.n	8008b78 <memset+0x4>

08008b84 <_free_r>:
 8008b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b86:	2900      	cmp	r1, #0
 8008b88:	d048      	beq.n	8008c1c <_free_r+0x98>
 8008b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b8e:	9001      	str	r0, [sp, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f1a1 0404 	sub.w	r4, r1, #4
 8008b96:	bfb8      	it	lt
 8008b98:	18e4      	addlt	r4, r4, r3
 8008b9a:	f000 f97f 	bl	8008e9c <__malloc_lock>
 8008b9e:	4a20      	ldr	r2, [pc, #128]	; (8008c20 <_free_r+0x9c>)
 8008ba0:	9801      	ldr	r0, [sp, #4]
 8008ba2:	6813      	ldr	r3, [r2, #0]
 8008ba4:	4615      	mov	r5, r2
 8008ba6:	b933      	cbnz	r3, 8008bb6 <_free_r+0x32>
 8008ba8:	6063      	str	r3, [r4, #4]
 8008baa:	6014      	str	r4, [r2, #0]
 8008bac:	b003      	add	sp, #12
 8008bae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bb2:	f000 b979 	b.w	8008ea8 <__malloc_unlock>
 8008bb6:	42a3      	cmp	r3, r4
 8008bb8:	d90b      	bls.n	8008bd2 <_free_r+0x4e>
 8008bba:	6821      	ldr	r1, [r4, #0]
 8008bbc:	1862      	adds	r2, r4, r1
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	bf04      	itt	eq
 8008bc2:	681a      	ldreq	r2, [r3, #0]
 8008bc4:	685b      	ldreq	r3, [r3, #4]
 8008bc6:	6063      	str	r3, [r4, #4]
 8008bc8:	bf04      	itt	eq
 8008bca:	1852      	addeq	r2, r2, r1
 8008bcc:	6022      	streq	r2, [r4, #0]
 8008bce:	602c      	str	r4, [r5, #0]
 8008bd0:	e7ec      	b.n	8008bac <_free_r+0x28>
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	b10b      	cbz	r3, 8008bdc <_free_r+0x58>
 8008bd8:	42a3      	cmp	r3, r4
 8008bda:	d9fa      	bls.n	8008bd2 <_free_r+0x4e>
 8008bdc:	6811      	ldr	r1, [r2, #0]
 8008bde:	1855      	adds	r5, r2, r1
 8008be0:	42a5      	cmp	r5, r4
 8008be2:	d10b      	bne.n	8008bfc <_free_r+0x78>
 8008be4:	6824      	ldr	r4, [r4, #0]
 8008be6:	4421      	add	r1, r4
 8008be8:	1854      	adds	r4, r2, r1
 8008bea:	42a3      	cmp	r3, r4
 8008bec:	6011      	str	r1, [r2, #0]
 8008bee:	d1dd      	bne.n	8008bac <_free_r+0x28>
 8008bf0:	681c      	ldr	r4, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	6053      	str	r3, [r2, #4]
 8008bf6:	4421      	add	r1, r4
 8008bf8:	6011      	str	r1, [r2, #0]
 8008bfa:	e7d7      	b.n	8008bac <_free_r+0x28>
 8008bfc:	d902      	bls.n	8008c04 <_free_r+0x80>
 8008bfe:	230c      	movs	r3, #12
 8008c00:	6003      	str	r3, [r0, #0]
 8008c02:	e7d3      	b.n	8008bac <_free_r+0x28>
 8008c04:	6825      	ldr	r5, [r4, #0]
 8008c06:	1961      	adds	r1, r4, r5
 8008c08:	428b      	cmp	r3, r1
 8008c0a:	bf04      	itt	eq
 8008c0c:	6819      	ldreq	r1, [r3, #0]
 8008c0e:	685b      	ldreq	r3, [r3, #4]
 8008c10:	6063      	str	r3, [r4, #4]
 8008c12:	bf04      	itt	eq
 8008c14:	1949      	addeq	r1, r1, r5
 8008c16:	6021      	streq	r1, [r4, #0]
 8008c18:	6054      	str	r4, [r2, #4]
 8008c1a:	e7c7      	b.n	8008bac <_free_r+0x28>
 8008c1c:	b003      	add	sp, #12
 8008c1e:	bd30      	pop	{r4, r5, pc}
 8008c20:	20000314 	.word	0x20000314

08008c24 <_malloc_r>:
 8008c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c26:	1ccd      	adds	r5, r1, #3
 8008c28:	f025 0503 	bic.w	r5, r5, #3
 8008c2c:	3508      	adds	r5, #8
 8008c2e:	2d0c      	cmp	r5, #12
 8008c30:	bf38      	it	cc
 8008c32:	250c      	movcc	r5, #12
 8008c34:	2d00      	cmp	r5, #0
 8008c36:	4606      	mov	r6, r0
 8008c38:	db01      	blt.n	8008c3e <_malloc_r+0x1a>
 8008c3a:	42a9      	cmp	r1, r5
 8008c3c:	d903      	bls.n	8008c46 <_malloc_r+0x22>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	6033      	str	r3, [r6, #0]
 8008c42:	2000      	movs	r0, #0
 8008c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c46:	f000 f929 	bl	8008e9c <__malloc_lock>
 8008c4a:	4921      	ldr	r1, [pc, #132]	; (8008cd0 <_malloc_r+0xac>)
 8008c4c:	680a      	ldr	r2, [r1, #0]
 8008c4e:	4614      	mov	r4, r2
 8008c50:	b99c      	cbnz	r4, 8008c7a <_malloc_r+0x56>
 8008c52:	4f20      	ldr	r7, [pc, #128]	; (8008cd4 <_malloc_r+0xb0>)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	b923      	cbnz	r3, 8008c62 <_malloc_r+0x3e>
 8008c58:	4621      	mov	r1, r4
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f000 f83c 	bl	8008cd8 <_sbrk_r>
 8008c60:	6038      	str	r0, [r7, #0]
 8008c62:	4629      	mov	r1, r5
 8008c64:	4630      	mov	r0, r6
 8008c66:	f000 f837 	bl	8008cd8 <_sbrk_r>
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	d123      	bne.n	8008cb6 <_malloc_r+0x92>
 8008c6e:	230c      	movs	r3, #12
 8008c70:	6033      	str	r3, [r6, #0]
 8008c72:	4630      	mov	r0, r6
 8008c74:	f000 f918 	bl	8008ea8 <__malloc_unlock>
 8008c78:	e7e3      	b.n	8008c42 <_malloc_r+0x1e>
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	1b5b      	subs	r3, r3, r5
 8008c7e:	d417      	bmi.n	8008cb0 <_malloc_r+0x8c>
 8008c80:	2b0b      	cmp	r3, #11
 8008c82:	d903      	bls.n	8008c8c <_malloc_r+0x68>
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	441c      	add	r4, r3
 8008c88:	6025      	str	r5, [r4, #0]
 8008c8a:	e004      	b.n	8008c96 <_malloc_r+0x72>
 8008c8c:	6863      	ldr	r3, [r4, #4]
 8008c8e:	42a2      	cmp	r2, r4
 8008c90:	bf0c      	ite	eq
 8008c92:	600b      	streq	r3, [r1, #0]
 8008c94:	6053      	strne	r3, [r2, #4]
 8008c96:	4630      	mov	r0, r6
 8008c98:	f000 f906 	bl	8008ea8 <__malloc_unlock>
 8008c9c:	f104 000b 	add.w	r0, r4, #11
 8008ca0:	1d23      	adds	r3, r4, #4
 8008ca2:	f020 0007 	bic.w	r0, r0, #7
 8008ca6:	1ac2      	subs	r2, r0, r3
 8008ca8:	d0cc      	beq.n	8008c44 <_malloc_r+0x20>
 8008caa:	1a1b      	subs	r3, r3, r0
 8008cac:	50a3      	str	r3, [r4, r2]
 8008cae:	e7c9      	b.n	8008c44 <_malloc_r+0x20>
 8008cb0:	4622      	mov	r2, r4
 8008cb2:	6864      	ldr	r4, [r4, #4]
 8008cb4:	e7cc      	b.n	8008c50 <_malloc_r+0x2c>
 8008cb6:	1cc4      	adds	r4, r0, #3
 8008cb8:	f024 0403 	bic.w	r4, r4, #3
 8008cbc:	42a0      	cmp	r0, r4
 8008cbe:	d0e3      	beq.n	8008c88 <_malloc_r+0x64>
 8008cc0:	1a21      	subs	r1, r4, r0
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f000 f808 	bl	8008cd8 <_sbrk_r>
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d1dd      	bne.n	8008c88 <_malloc_r+0x64>
 8008ccc:	e7cf      	b.n	8008c6e <_malloc_r+0x4a>
 8008cce:	bf00      	nop
 8008cd0:	20000314 	.word	0x20000314
 8008cd4:	20000318 	.word	0x20000318

08008cd8 <_sbrk_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4d06      	ldr	r5, [pc, #24]	; (8008cf4 <_sbrk_r+0x1c>)
 8008cdc:	2300      	movs	r3, #0
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	602b      	str	r3, [r5, #0]
 8008ce4:	f7f9 f812 	bl	8001d0c <_sbrk>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d102      	bne.n	8008cf2 <_sbrk_r+0x1a>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	b103      	cbz	r3, 8008cf2 <_sbrk_r+0x1a>
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	200003bc 	.word	0x200003bc

08008cf8 <_raise_r>:
 8008cf8:	291f      	cmp	r1, #31
 8008cfa:	b538      	push	{r3, r4, r5, lr}
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	460d      	mov	r5, r1
 8008d00:	d904      	bls.n	8008d0c <_raise_r+0x14>
 8008d02:	2316      	movs	r3, #22
 8008d04:	6003      	str	r3, [r0, #0]
 8008d06:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d0e:	b112      	cbz	r2, 8008d16 <_raise_r+0x1e>
 8008d10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d14:	b94b      	cbnz	r3, 8008d2a <_raise_r+0x32>
 8008d16:	4620      	mov	r0, r4
 8008d18:	f000 f830 	bl	8008d7c <_getpid_r>
 8008d1c:	462a      	mov	r2, r5
 8008d1e:	4601      	mov	r1, r0
 8008d20:	4620      	mov	r0, r4
 8008d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d26:	f000 b817 	b.w	8008d58 <_kill_r>
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d00a      	beq.n	8008d44 <_raise_r+0x4c>
 8008d2e:	1c59      	adds	r1, r3, #1
 8008d30:	d103      	bne.n	8008d3a <_raise_r+0x42>
 8008d32:	2316      	movs	r3, #22
 8008d34:	6003      	str	r3, [r0, #0]
 8008d36:	2001      	movs	r0, #1
 8008d38:	e7e7      	b.n	8008d0a <_raise_r+0x12>
 8008d3a:	2400      	movs	r4, #0
 8008d3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d40:	4628      	mov	r0, r5
 8008d42:	4798      	blx	r3
 8008d44:	2000      	movs	r0, #0
 8008d46:	e7e0      	b.n	8008d0a <_raise_r+0x12>

08008d48 <raise>:
 8008d48:	4b02      	ldr	r3, [pc, #8]	; (8008d54 <raise+0xc>)
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	6818      	ldr	r0, [r3, #0]
 8008d4e:	f7ff bfd3 	b.w	8008cf8 <_raise_r>
 8008d52:	bf00      	nop
 8008d54:	20000010 	.word	0x20000010

08008d58 <_kill_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4d07      	ldr	r5, [pc, #28]	; (8008d78 <_kill_r+0x20>)
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	4604      	mov	r4, r0
 8008d60:	4608      	mov	r0, r1
 8008d62:	4611      	mov	r1, r2
 8008d64:	602b      	str	r3, [r5, #0]
 8008d66:	f7f8 ffb6 	bl	8001cd6 <_kill>
 8008d6a:	1c43      	adds	r3, r0, #1
 8008d6c:	d102      	bne.n	8008d74 <_kill_r+0x1c>
 8008d6e:	682b      	ldr	r3, [r5, #0]
 8008d70:	b103      	cbz	r3, 8008d74 <_kill_r+0x1c>
 8008d72:	6023      	str	r3, [r4, #0]
 8008d74:	bd38      	pop	{r3, r4, r5, pc}
 8008d76:	bf00      	nop
 8008d78:	200003bc 	.word	0x200003bc

08008d7c <_getpid_r>:
 8008d7c:	f7f8 bfa3 	b.w	8001cc6 <_getpid>

08008d80 <siprintf>:
 8008d80:	b40e      	push	{r1, r2, r3}
 8008d82:	b500      	push	{lr}
 8008d84:	b09c      	sub	sp, #112	; 0x70
 8008d86:	ab1d      	add	r3, sp, #116	; 0x74
 8008d88:	9002      	str	r0, [sp, #8]
 8008d8a:	9006      	str	r0, [sp, #24]
 8008d8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d90:	4809      	ldr	r0, [pc, #36]	; (8008db8 <siprintf+0x38>)
 8008d92:	9107      	str	r1, [sp, #28]
 8008d94:	9104      	str	r1, [sp, #16]
 8008d96:	4909      	ldr	r1, [pc, #36]	; (8008dbc <siprintf+0x3c>)
 8008d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d9c:	9105      	str	r1, [sp, #20]
 8008d9e:	6800      	ldr	r0, [r0, #0]
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	a902      	add	r1, sp, #8
 8008da4:	f000 f8e2 	bl	8008f6c <_svfiprintf_r>
 8008da8:	9b02      	ldr	r3, [sp, #8]
 8008daa:	2200      	movs	r2, #0
 8008dac:	701a      	strb	r2, [r3, #0]
 8008dae:	b01c      	add	sp, #112	; 0x70
 8008db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008db4:	b003      	add	sp, #12
 8008db6:	4770      	bx	lr
 8008db8:	20000010 	.word	0x20000010
 8008dbc:	ffff0208 	.word	0xffff0208

08008dc0 <strcpy>:
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dc6:	f803 2b01 	strb.w	r2, [r3], #1
 8008dca:	2a00      	cmp	r2, #0
 8008dcc:	d1f9      	bne.n	8008dc2 <strcpy+0x2>
 8008dce:	4770      	bx	lr

08008dd0 <__register_exitproc>:
 8008dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dd4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8008e90 <__register_exitproc+0xc0>
 8008dd8:	4606      	mov	r6, r0
 8008dda:	f8d8 0000 	ldr.w	r0, [r8]
 8008dde:	461f      	mov	r7, r3
 8008de0:	460d      	mov	r5, r1
 8008de2:	4691      	mov	r9, r2
 8008de4:	f000 f856 	bl	8008e94 <__retarget_lock_acquire_recursive>
 8008de8:	4b25      	ldr	r3, [pc, #148]	; (8008e80 <__register_exitproc+0xb0>)
 8008dea:	681c      	ldr	r4, [r3, #0]
 8008dec:	b934      	cbnz	r4, 8008dfc <__register_exitproc+0x2c>
 8008dee:	4c25      	ldr	r4, [pc, #148]	; (8008e84 <__register_exitproc+0xb4>)
 8008df0:	601c      	str	r4, [r3, #0]
 8008df2:	4b25      	ldr	r3, [pc, #148]	; (8008e88 <__register_exitproc+0xb8>)
 8008df4:	b113      	cbz	r3, 8008dfc <__register_exitproc+0x2c>
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8008dfc:	6863      	ldr	r3, [r4, #4]
 8008dfe:	2b1f      	cmp	r3, #31
 8008e00:	dd07      	ble.n	8008e12 <__register_exitproc+0x42>
 8008e02:	f8d8 0000 	ldr.w	r0, [r8]
 8008e06:	f000 f847 	bl	8008e98 <__retarget_lock_release_recursive>
 8008e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e12:	b34e      	cbz	r6, 8008e68 <__register_exitproc+0x98>
 8008e14:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8008e18:	b988      	cbnz	r0, 8008e3e <__register_exitproc+0x6e>
 8008e1a:	4b1c      	ldr	r3, [pc, #112]	; (8008e8c <__register_exitproc+0xbc>)
 8008e1c:	b923      	cbnz	r3, 8008e28 <__register_exitproc+0x58>
 8008e1e:	f8d8 0000 	ldr.w	r0, [r8]
 8008e22:	f000 f838 	bl	8008e96 <__retarget_lock_release>
 8008e26:	e7f0      	b.n	8008e0a <__register_exitproc+0x3a>
 8008e28:	f44f 7084 	mov.w	r0, #264	; 0x108
 8008e2c:	f7ff fe6a 	bl	8008b04 <malloc>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d0f4      	beq.n	8008e1e <__register_exitproc+0x4e>
 8008e34:	2300      	movs	r3, #0
 8008e36:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8008e3a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8008e3e:	6863      	ldr	r3, [r4, #4]
 8008e40:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8008e44:	2201      	movs	r2, #1
 8008e46:	409a      	lsls	r2, r3
 8008e48:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8008e4c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8008e50:	4313      	orrs	r3, r2
 8008e52:	2e02      	cmp	r6, #2
 8008e54:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8008e58:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8008e5c:	bf02      	ittt	eq
 8008e5e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8008e62:	431a      	orreq	r2, r3
 8008e64:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8008e68:	6863      	ldr	r3, [r4, #4]
 8008e6a:	f8d8 0000 	ldr.w	r0, [r8]
 8008e6e:	1c5a      	adds	r2, r3, #1
 8008e70:	3302      	adds	r3, #2
 8008e72:	6062      	str	r2, [r4, #4]
 8008e74:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8008e78:	f000 f80e 	bl	8008e98 <__retarget_lock_release_recursive>
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	e7c6      	b.n	8008e0e <__register_exitproc+0x3e>
 8008e80:	200003a8 	.word	0x200003a8
 8008e84:	2000031c 	.word	0x2000031c
 8008e88:	00000000 	.word	0x00000000
 8008e8c:	08008b05 	.word	0x08008b05
 8008e90:	20000074 	.word	0x20000074

08008e94 <__retarget_lock_acquire_recursive>:
 8008e94:	4770      	bx	lr

08008e96 <__retarget_lock_release>:
 8008e96:	4770      	bx	lr

08008e98 <__retarget_lock_release_recursive>:
 8008e98:	4770      	bx	lr
	...

08008e9c <__malloc_lock>:
 8008e9c:	4801      	ldr	r0, [pc, #4]	; (8008ea4 <__malloc_lock+0x8>)
 8008e9e:	f7ff bff9 	b.w	8008e94 <__retarget_lock_acquire_recursive>
 8008ea2:	bf00      	nop
 8008ea4:	200003b4 	.word	0x200003b4

08008ea8 <__malloc_unlock>:
 8008ea8:	4801      	ldr	r0, [pc, #4]	; (8008eb0 <__malloc_unlock+0x8>)
 8008eaa:	f7ff bff5 	b.w	8008e98 <__retarget_lock_release_recursive>
 8008eae:	bf00      	nop
 8008eb0:	200003b4 	.word	0x200003b4

08008eb4 <__ssputs_r>:
 8008eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb8:	688e      	ldr	r6, [r1, #8]
 8008eba:	429e      	cmp	r6, r3
 8008ebc:	4682      	mov	sl, r0
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	4690      	mov	r8, r2
 8008ec2:	461f      	mov	r7, r3
 8008ec4:	d838      	bhi.n	8008f38 <__ssputs_r+0x84>
 8008ec6:	898a      	ldrh	r2, [r1, #12]
 8008ec8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ecc:	d032      	beq.n	8008f34 <__ssputs_r+0x80>
 8008ece:	6825      	ldr	r5, [r4, #0]
 8008ed0:	6909      	ldr	r1, [r1, #16]
 8008ed2:	eba5 0901 	sub.w	r9, r5, r1
 8008ed6:	6965      	ldr	r5, [r4, #20]
 8008ed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008edc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	444b      	add	r3, r9
 8008ee4:	106d      	asrs	r5, r5, #1
 8008ee6:	429d      	cmp	r5, r3
 8008ee8:	bf38      	it	cc
 8008eea:	461d      	movcc	r5, r3
 8008eec:	0553      	lsls	r3, r2, #21
 8008eee:	d531      	bpl.n	8008f54 <__ssputs_r+0xa0>
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7ff fe97 	bl	8008c24 <_malloc_r>
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	b950      	cbnz	r0, 8008f10 <__ssputs_r+0x5c>
 8008efa:	230c      	movs	r3, #12
 8008efc:	f8ca 3000 	str.w	r3, [sl]
 8008f00:	89a3      	ldrh	r3, [r4, #12]
 8008f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f06:	81a3      	strh	r3, [r4, #12]
 8008f08:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f10:	6921      	ldr	r1, [r4, #16]
 8008f12:	464a      	mov	r2, r9
 8008f14:	f7ff fe06 	bl	8008b24 <memcpy>
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f22:	81a3      	strh	r3, [r4, #12]
 8008f24:	6126      	str	r6, [r4, #16]
 8008f26:	6165      	str	r5, [r4, #20]
 8008f28:	444e      	add	r6, r9
 8008f2a:	eba5 0509 	sub.w	r5, r5, r9
 8008f2e:	6026      	str	r6, [r4, #0]
 8008f30:	60a5      	str	r5, [r4, #8]
 8008f32:	463e      	mov	r6, r7
 8008f34:	42be      	cmp	r6, r7
 8008f36:	d900      	bls.n	8008f3a <__ssputs_r+0x86>
 8008f38:	463e      	mov	r6, r7
 8008f3a:	4632      	mov	r2, r6
 8008f3c:	6820      	ldr	r0, [r4, #0]
 8008f3e:	4641      	mov	r1, r8
 8008f40:	f7ff fdfe 	bl	8008b40 <memmove>
 8008f44:	68a3      	ldr	r3, [r4, #8]
 8008f46:	6822      	ldr	r2, [r4, #0]
 8008f48:	1b9b      	subs	r3, r3, r6
 8008f4a:	4432      	add	r2, r6
 8008f4c:	60a3      	str	r3, [r4, #8]
 8008f4e:	6022      	str	r2, [r4, #0]
 8008f50:	2000      	movs	r0, #0
 8008f52:	e7db      	b.n	8008f0c <__ssputs_r+0x58>
 8008f54:	462a      	mov	r2, r5
 8008f56:	f000 fa9d 	bl	8009494 <_realloc_r>
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d1e1      	bne.n	8008f24 <__ssputs_r+0x70>
 8008f60:	6921      	ldr	r1, [r4, #16]
 8008f62:	4650      	mov	r0, sl
 8008f64:	f7ff fe0e 	bl	8008b84 <_free_r>
 8008f68:	e7c7      	b.n	8008efa <__ssputs_r+0x46>
	...

08008f6c <_svfiprintf_r>:
 8008f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f70:	4698      	mov	r8, r3
 8008f72:	898b      	ldrh	r3, [r1, #12]
 8008f74:	061b      	lsls	r3, r3, #24
 8008f76:	b09d      	sub	sp, #116	; 0x74
 8008f78:	4607      	mov	r7, r0
 8008f7a:	460d      	mov	r5, r1
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	d50e      	bpl.n	8008f9e <_svfiprintf_r+0x32>
 8008f80:	690b      	ldr	r3, [r1, #16]
 8008f82:	b963      	cbnz	r3, 8008f9e <_svfiprintf_r+0x32>
 8008f84:	2140      	movs	r1, #64	; 0x40
 8008f86:	f7ff fe4d 	bl	8008c24 <_malloc_r>
 8008f8a:	6028      	str	r0, [r5, #0]
 8008f8c:	6128      	str	r0, [r5, #16]
 8008f8e:	b920      	cbnz	r0, 8008f9a <_svfiprintf_r+0x2e>
 8008f90:	230c      	movs	r3, #12
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	f04f 30ff 	mov.w	r0, #4294967295
 8008f98:	e0d1      	b.n	800913e <_svfiprintf_r+0x1d2>
 8008f9a:	2340      	movs	r3, #64	; 0x40
 8008f9c:	616b      	str	r3, [r5, #20]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fa2:	2320      	movs	r3, #32
 8008fa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fac:	2330      	movs	r3, #48	; 0x30
 8008fae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009158 <_svfiprintf_r+0x1ec>
 8008fb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fb6:	f04f 0901 	mov.w	r9, #1
 8008fba:	4623      	mov	r3, r4
 8008fbc:	469a      	mov	sl, r3
 8008fbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fc2:	b10a      	cbz	r2, 8008fc8 <_svfiprintf_r+0x5c>
 8008fc4:	2a25      	cmp	r2, #37	; 0x25
 8008fc6:	d1f9      	bne.n	8008fbc <_svfiprintf_r+0x50>
 8008fc8:	ebba 0b04 	subs.w	fp, sl, r4
 8008fcc:	d00b      	beq.n	8008fe6 <_svfiprintf_r+0x7a>
 8008fce:	465b      	mov	r3, fp
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	f7ff ff6d 	bl	8008eb4 <__ssputs_r>
 8008fda:	3001      	adds	r0, #1
 8008fdc:	f000 80aa 	beq.w	8009134 <_svfiprintf_r+0x1c8>
 8008fe0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe2:	445a      	add	r2, fp
 8008fe4:	9209      	str	r2, [sp, #36]	; 0x24
 8008fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 80a2 	beq.w	8009134 <_svfiprintf_r+0x1c8>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ffa:	f10a 0a01 	add.w	sl, sl, #1
 8008ffe:	9304      	str	r3, [sp, #16]
 8009000:	9307      	str	r3, [sp, #28]
 8009002:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009006:	931a      	str	r3, [sp, #104]	; 0x68
 8009008:	4654      	mov	r4, sl
 800900a:	2205      	movs	r2, #5
 800900c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009010:	4851      	ldr	r0, [pc, #324]	; (8009158 <_svfiprintf_r+0x1ec>)
 8009012:	f7f7 f91d 	bl	8000250 <memchr>
 8009016:	9a04      	ldr	r2, [sp, #16]
 8009018:	b9d8      	cbnz	r0, 8009052 <_svfiprintf_r+0xe6>
 800901a:	06d0      	lsls	r0, r2, #27
 800901c:	bf44      	itt	mi
 800901e:	2320      	movmi	r3, #32
 8009020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009024:	0711      	lsls	r1, r2, #28
 8009026:	bf44      	itt	mi
 8009028:	232b      	movmi	r3, #43	; 0x2b
 800902a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800902e:	f89a 3000 	ldrb.w	r3, [sl]
 8009032:	2b2a      	cmp	r3, #42	; 0x2a
 8009034:	d015      	beq.n	8009062 <_svfiprintf_r+0xf6>
 8009036:	9a07      	ldr	r2, [sp, #28]
 8009038:	4654      	mov	r4, sl
 800903a:	2000      	movs	r0, #0
 800903c:	f04f 0c0a 	mov.w	ip, #10
 8009040:	4621      	mov	r1, r4
 8009042:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009046:	3b30      	subs	r3, #48	; 0x30
 8009048:	2b09      	cmp	r3, #9
 800904a:	d94e      	bls.n	80090ea <_svfiprintf_r+0x17e>
 800904c:	b1b0      	cbz	r0, 800907c <_svfiprintf_r+0x110>
 800904e:	9207      	str	r2, [sp, #28]
 8009050:	e014      	b.n	800907c <_svfiprintf_r+0x110>
 8009052:	eba0 0308 	sub.w	r3, r0, r8
 8009056:	fa09 f303 	lsl.w	r3, r9, r3
 800905a:	4313      	orrs	r3, r2
 800905c:	9304      	str	r3, [sp, #16]
 800905e:	46a2      	mov	sl, r4
 8009060:	e7d2      	b.n	8009008 <_svfiprintf_r+0x9c>
 8009062:	9b03      	ldr	r3, [sp, #12]
 8009064:	1d19      	adds	r1, r3, #4
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	9103      	str	r1, [sp, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	bfbb      	ittet	lt
 800906e:	425b      	neglt	r3, r3
 8009070:	f042 0202 	orrlt.w	r2, r2, #2
 8009074:	9307      	strge	r3, [sp, #28]
 8009076:	9307      	strlt	r3, [sp, #28]
 8009078:	bfb8      	it	lt
 800907a:	9204      	strlt	r2, [sp, #16]
 800907c:	7823      	ldrb	r3, [r4, #0]
 800907e:	2b2e      	cmp	r3, #46	; 0x2e
 8009080:	d10c      	bne.n	800909c <_svfiprintf_r+0x130>
 8009082:	7863      	ldrb	r3, [r4, #1]
 8009084:	2b2a      	cmp	r3, #42	; 0x2a
 8009086:	d135      	bne.n	80090f4 <_svfiprintf_r+0x188>
 8009088:	9b03      	ldr	r3, [sp, #12]
 800908a:	1d1a      	adds	r2, r3, #4
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	9203      	str	r2, [sp, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	bfb8      	it	lt
 8009094:	f04f 33ff 	movlt.w	r3, #4294967295
 8009098:	3402      	adds	r4, #2
 800909a:	9305      	str	r3, [sp, #20]
 800909c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009168 <_svfiprintf_r+0x1fc>
 80090a0:	7821      	ldrb	r1, [r4, #0]
 80090a2:	2203      	movs	r2, #3
 80090a4:	4650      	mov	r0, sl
 80090a6:	f7f7 f8d3 	bl	8000250 <memchr>
 80090aa:	b140      	cbz	r0, 80090be <_svfiprintf_r+0x152>
 80090ac:	2340      	movs	r3, #64	; 0x40
 80090ae:	eba0 000a 	sub.w	r0, r0, sl
 80090b2:	fa03 f000 	lsl.w	r0, r3, r0
 80090b6:	9b04      	ldr	r3, [sp, #16]
 80090b8:	4303      	orrs	r3, r0
 80090ba:	3401      	adds	r4, #1
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c2:	4826      	ldr	r0, [pc, #152]	; (800915c <_svfiprintf_r+0x1f0>)
 80090c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090c8:	2206      	movs	r2, #6
 80090ca:	f7f7 f8c1 	bl	8000250 <memchr>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d038      	beq.n	8009144 <_svfiprintf_r+0x1d8>
 80090d2:	4b23      	ldr	r3, [pc, #140]	; (8009160 <_svfiprintf_r+0x1f4>)
 80090d4:	bb1b      	cbnz	r3, 800911e <_svfiprintf_r+0x1b2>
 80090d6:	9b03      	ldr	r3, [sp, #12]
 80090d8:	3307      	adds	r3, #7
 80090da:	f023 0307 	bic.w	r3, r3, #7
 80090de:	3308      	adds	r3, #8
 80090e0:	9303      	str	r3, [sp, #12]
 80090e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e4:	4433      	add	r3, r6
 80090e6:	9309      	str	r3, [sp, #36]	; 0x24
 80090e8:	e767      	b.n	8008fba <_svfiprintf_r+0x4e>
 80090ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ee:	460c      	mov	r4, r1
 80090f0:	2001      	movs	r0, #1
 80090f2:	e7a5      	b.n	8009040 <_svfiprintf_r+0xd4>
 80090f4:	2300      	movs	r3, #0
 80090f6:	3401      	adds	r4, #1
 80090f8:	9305      	str	r3, [sp, #20]
 80090fa:	4619      	mov	r1, r3
 80090fc:	f04f 0c0a 	mov.w	ip, #10
 8009100:	4620      	mov	r0, r4
 8009102:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009106:	3a30      	subs	r2, #48	; 0x30
 8009108:	2a09      	cmp	r2, #9
 800910a:	d903      	bls.n	8009114 <_svfiprintf_r+0x1a8>
 800910c:	2b00      	cmp	r3, #0
 800910e:	d0c5      	beq.n	800909c <_svfiprintf_r+0x130>
 8009110:	9105      	str	r1, [sp, #20]
 8009112:	e7c3      	b.n	800909c <_svfiprintf_r+0x130>
 8009114:	fb0c 2101 	mla	r1, ip, r1, r2
 8009118:	4604      	mov	r4, r0
 800911a:	2301      	movs	r3, #1
 800911c:	e7f0      	b.n	8009100 <_svfiprintf_r+0x194>
 800911e:	ab03      	add	r3, sp, #12
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	462a      	mov	r2, r5
 8009124:	4b0f      	ldr	r3, [pc, #60]	; (8009164 <_svfiprintf_r+0x1f8>)
 8009126:	a904      	add	r1, sp, #16
 8009128:	4638      	mov	r0, r7
 800912a:	f3af 8000 	nop.w
 800912e:	1c42      	adds	r2, r0, #1
 8009130:	4606      	mov	r6, r0
 8009132:	d1d6      	bne.n	80090e2 <_svfiprintf_r+0x176>
 8009134:	89ab      	ldrh	r3, [r5, #12]
 8009136:	065b      	lsls	r3, r3, #25
 8009138:	f53f af2c 	bmi.w	8008f94 <_svfiprintf_r+0x28>
 800913c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800913e:	b01d      	add	sp, #116	; 0x74
 8009140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009144:	ab03      	add	r3, sp, #12
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	462a      	mov	r2, r5
 800914a:	4b06      	ldr	r3, [pc, #24]	; (8009164 <_svfiprintf_r+0x1f8>)
 800914c:	a904      	add	r1, sp, #16
 800914e:	4638      	mov	r0, r7
 8009150:	f000 f87a 	bl	8009248 <_printf_i>
 8009154:	e7eb      	b.n	800912e <_svfiprintf_r+0x1c2>
 8009156:	bf00      	nop
 8009158:	0800cc3c 	.word	0x0800cc3c
 800915c:	0800cc46 	.word	0x0800cc46
 8009160:	00000000 	.word	0x00000000
 8009164:	08008eb5 	.word	0x08008eb5
 8009168:	0800cc42 	.word	0x0800cc42

0800916c <_printf_common>:
 800916c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009170:	4616      	mov	r6, r2
 8009172:	4699      	mov	r9, r3
 8009174:	688a      	ldr	r2, [r1, #8]
 8009176:	690b      	ldr	r3, [r1, #16]
 8009178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800917c:	4293      	cmp	r3, r2
 800917e:	bfb8      	it	lt
 8009180:	4613      	movlt	r3, r2
 8009182:	6033      	str	r3, [r6, #0]
 8009184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009188:	4607      	mov	r7, r0
 800918a:	460c      	mov	r4, r1
 800918c:	b10a      	cbz	r2, 8009192 <_printf_common+0x26>
 800918e:	3301      	adds	r3, #1
 8009190:	6033      	str	r3, [r6, #0]
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	0699      	lsls	r1, r3, #26
 8009196:	bf42      	ittt	mi
 8009198:	6833      	ldrmi	r3, [r6, #0]
 800919a:	3302      	addmi	r3, #2
 800919c:	6033      	strmi	r3, [r6, #0]
 800919e:	6825      	ldr	r5, [r4, #0]
 80091a0:	f015 0506 	ands.w	r5, r5, #6
 80091a4:	d106      	bne.n	80091b4 <_printf_common+0x48>
 80091a6:	f104 0a19 	add.w	sl, r4, #25
 80091aa:	68e3      	ldr	r3, [r4, #12]
 80091ac:	6832      	ldr	r2, [r6, #0]
 80091ae:	1a9b      	subs	r3, r3, r2
 80091b0:	42ab      	cmp	r3, r5
 80091b2:	dc26      	bgt.n	8009202 <_printf_common+0x96>
 80091b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091b8:	1e13      	subs	r3, r2, #0
 80091ba:	6822      	ldr	r2, [r4, #0]
 80091bc:	bf18      	it	ne
 80091be:	2301      	movne	r3, #1
 80091c0:	0692      	lsls	r2, r2, #26
 80091c2:	d42b      	bmi.n	800921c <_printf_common+0xb0>
 80091c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091c8:	4649      	mov	r1, r9
 80091ca:	4638      	mov	r0, r7
 80091cc:	47c0      	blx	r8
 80091ce:	3001      	adds	r0, #1
 80091d0:	d01e      	beq.n	8009210 <_printf_common+0xa4>
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	68e5      	ldr	r5, [r4, #12]
 80091d6:	6832      	ldr	r2, [r6, #0]
 80091d8:	f003 0306 	and.w	r3, r3, #6
 80091dc:	2b04      	cmp	r3, #4
 80091de:	bf08      	it	eq
 80091e0:	1aad      	subeq	r5, r5, r2
 80091e2:	68a3      	ldr	r3, [r4, #8]
 80091e4:	6922      	ldr	r2, [r4, #16]
 80091e6:	bf0c      	ite	eq
 80091e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091ec:	2500      	movne	r5, #0
 80091ee:	4293      	cmp	r3, r2
 80091f0:	bfc4      	itt	gt
 80091f2:	1a9b      	subgt	r3, r3, r2
 80091f4:	18ed      	addgt	r5, r5, r3
 80091f6:	2600      	movs	r6, #0
 80091f8:	341a      	adds	r4, #26
 80091fa:	42b5      	cmp	r5, r6
 80091fc:	d11a      	bne.n	8009234 <_printf_common+0xc8>
 80091fe:	2000      	movs	r0, #0
 8009200:	e008      	b.n	8009214 <_printf_common+0xa8>
 8009202:	2301      	movs	r3, #1
 8009204:	4652      	mov	r2, sl
 8009206:	4649      	mov	r1, r9
 8009208:	4638      	mov	r0, r7
 800920a:	47c0      	blx	r8
 800920c:	3001      	adds	r0, #1
 800920e:	d103      	bne.n	8009218 <_printf_common+0xac>
 8009210:	f04f 30ff 	mov.w	r0, #4294967295
 8009214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009218:	3501      	adds	r5, #1
 800921a:	e7c6      	b.n	80091aa <_printf_common+0x3e>
 800921c:	18e1      	adds	r1, r4, r3
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	2030      	movs	r0, #48	; 0x30
 8009222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009226:	4422      	add	r2, r4
 8009228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800922c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009230:	3302      	adds	r3, #2
 8009232:	e7c7      	b.n	80091c4 <_printf_common+0x58>
 8009234:	2301      	movs	r3, #1
 8009236:	4622      	mov	r2, r4
 8009238:	4649      	mov	r1, r9
 800923a:	4638      	mov	r0, r7
 800923c:	47c0      	blx	r8
 800923e:	3001      	adds	r0, #1
 8009240:	d0e6      	beq.n	8009210 <_printf_common+0xa4>
 8009242:	3601      	adds	r6, #1
 8009244:	e7d9      	b.n	80091fa <_printf_common+0x8e>
	...

08009248 <_printf_i>:
 8009248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800924c:	460c      	mov	r4, r1
 800924e:	4691      	mov	r9, r2
 8009250:	7e27      	ldrb	r7, [r4, #24]
 8009252:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009254:	2f78      	cmp	r7, #120	; 0x78
 8009256:	4680      	mov	r8, r0
 8009258:	469a      	mov	sl, r3
 800925a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800925e:	d807      	bhi.n	8009270 <_printf_i+0x28>
 8009260:	2f62      	cmp	r7, #98	; 0x62
 8009262:	d80a      	bhi.n	800927a <_printf_i+0x32>
 8009264:	2f00      	cmp	r7, #0
 8009266:	f000 80d8 	beq.w	800941a <_printf_i+0x1d2>
 800926a:	2f58      	cmp	r7, #88	; 0x58
 800926c:	f000 80a3 	beq.w	80093b6 <_printf_i+0x16e>
 8009270:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009278:	e03a      	b.n	80092f0 <_printf_i+0xa8>
 800927a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800927e:	2b15      	cmp	r3, #21
 8009280:	d8f6      	bhi.n	8009270 <_printf_i+0x28>
 8009282:	a001      	add	r0, pc, #4	; (adr r0, 8009288 <_printf_i+0x40>)
 8009284:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009288:	080092e1 	.word	0x080092e1
 800928c:	080092f5 	.word	0x080092f5
 8009290:	08009271 	.word	0x08009271
 8009294:	08009271 	.word	0x08009271
 8009298:	08009271 	.word	0x08009271
 800929c:	08009271 	.word	0x08009271
 80092a0:	080092f5 	.word	0x080092f5
 80092a4:	08009271 	.word	0x08009271
 80092a8:	08009271 	.word	0x08009271
 80092ac:	08009271 	.word	0x08009271
 80092b0:	08009271 	.word	0x08009271
 80092b4:	08009401 	.word	0x08009401
 80092b8:	08009325 	.word	0x08009325
 80092bc:	080093e3 	.word	0x080093e3
 80092c0:	08009271 	.word	0x08009271
 80092c4:	08009271 	.word	0x08009271
 80092c8:	08009423 	.word	0x08009423
 80092cc:	08009271 	.word	0x08009271
 80092d0:	08009325 	.word	0x08009325
 80092d4:	08009271 	.word	0x08009271
 80092d8:	08009271 	.word	0x08009271
 80092dc:	080093eb 	.word	0x080093eb
 80092e0:	680b      	ldr	r3, [r1, #0]
 80092e2:	1d1a      	adds	r2, r3, #4
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	600a      	str	r2, [r1, #0]
 80092e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092f0:	2301      	movs	r3, #1
 80092f2:	e0a3      	b.n	800943c <_printf_i+0x1f4>
 80092f4:	6825      	ldr	r5, [r4, #0]
 80092f6:	6808      	ldr	r0, [r1, #0]
 80092f8:	062e      	lsls	r6, r5, #24
 80092fa:	f100 0304 	add.w	r3, r0, #4
 80092fe:	d50a      	bpl.n	8009316 <_printf_i+0xce>
 8009300:	6805      	ldr	r5, [r0, #0]
 8009302:	600b      	str	r3, [r1, #0]
 8009304:	2d00      	cmp	r5, #0
 8009306:	da03      	bge.n	8009310 <_printf_i+0xc8>
 8009308:	232d      	movs	r3, #45	; 0x2d
 800930a:	426d      	negs	r5, r5
 800930c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009310:	485e      	ldr	r0, [pc, #376]	; (800948c <_printf_i+0x244>)
 8009312:	230a      	movs	r3, #10
 8009314:	e019      	b.n	800934a <_printf_i+0x102>
 8009316:	f015 0f40 	tst.w	r5, #64	; 0x40
 800931a:	6805      	ldr	r5, [r0, #0]
 800931c:	600b      	str	r3, [r1, #0]
 800931e:	bf18      	it	ne
 8009320:	b22d      	sxthne	r5, r5
 8009322:	e7ef      	b.n	8009304 <_printf_i+0xbc>
 8009324:	680b      	ldr	r3, [r1, #0]
 8009326:	6825      	ldr	r5, [r4, #0]
 8009328:	1d18      	adds	r0, r3, #4
 800932a:	6008      	str	r0, [r1, #0]
 800932c:	0628      	lsls	r0, r5, #24
 800932e:	d501      	bpl.n	8009334 <_printf_i+0xec>
 8009330:	681d      	ldr	r5, [r3, #0]
 8009332:	e002      	b.n	800933a <_printf_i+0xf2>
 8009334:	0669      	lsls	r1, r5, #25
 8009336:	d5fb      	bpl.n	8009330 <_printf_i+0xe8>
 8009338:	881d      	ldrh	r5, [r3, #0]
 800933a:	4854      	ldr	r0, [pc, #336]	; (800948c <_printf_i+0x244>)
 800933c:	2f6f      	cmp	r7, #111	; 0x6f
 800933e:	bf0c      	ite	eq
 8009340:	2308      	moveq	r3, #8
 8009342:	230a      	movne	r3, #10
 8009344:	2100      	movs	r1, #0
 8009346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800934a:	6866      	ldr	r6, [r4, #4]
 800934c:	60a6      	str	r6, [r4, #8]
 800934e:	2e00      	cmp	r6, #0
 8009350:	bfa2      	ittt	ge
 8009352:	6821      	ldrge	r1, [r4, #0]
 8009354:	f021 0104 	bicge.w	r1, r1, #4
 8009358:	6021      	strge	r1, [r4, #0]
 800935a:	b90d      	cbnz	r5, 8009360 <_printf_i+0x118>
 800935c:	2e00      	cmp	r6, #0
 800935e:	d04d      	beq.n	80093fc <_printf_i+0x1b4>
 8009360:	4616      	mov	r6, r2
 8009362:	fbb5 f1f3 	udiv	r1, r5, r3
 8009366:	fb03 5711 	mls	r7, r3, r1, r5
 800936a:	5dc7      	ldrb	r7, [r0, r7]
 800936c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009370:	462f      	mov	r7, r5
 8009372:	42bb      	cmp	r3, r7
 8009374:	460d      	mov	r5, r1
 8009376:	d9f4      	bls.n	8009362 <_printf_i+0x11a>
 8009378:	2b08      	cmp	r3, #8
 800937a:	d10b      	bne.n	8009394 <_printf_i+0x14c>
 800937c:	6823      	ldr	r3, [r4, #0]
 800937e:	07df      	lsls	r7, r3, #31
 8009380:	d508      	bpl.n	8009394 <_printf_i+0x14c>
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	6861      	ldr	r1, [r4, #4]
 8009386:	4299      	cmp	r1, r3
 8009388:	bfde      	ittt	le
 800938a:	2330      	movle	r3, #48	; 0x30
 800938c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009390:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009394:	1b92      	subs	r2, r2, r6
 8009396:	6122      	str	r2, [r4, #16]
 8009398:	f8cd a000 	str.w	sl, [sp]
 800939c:	464b      	mov	r3, r9
 800939e:	aa03      	add	r2, sp, #12
 80093a0:	4621      	mov	r1, r4
 80093a2:	4640      	mov	r0, r8
 80093a4:	f7ff fee2 	bl	800916c <_printf_common>
 80093a8:	3001      	adds	r0, #1
 80093aa:	d14c      	bne.n	8009446 <_printf_i+0x1fe>
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295
 80093b0:	b004      	add	sp, #16
 80093b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b6:	4835      	ldr	r0, [pc, #212]	; (800948c <_printf_i+0x244>)
 80093b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	680e      	ldr	r6, [r1, #0]
 80093c0:	061f      	lsls	r7, r3, #24
 80093c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80093c6:	600e      	str	r6, [r1, #0]
 80093c8:	d514      	bpl.n	80093f4 <_printf_i+0x1ac>
 80093ca:	07d9      	lsls	r1, r3, #31
 80093cc:	bf44      	itt	mi
 80093ce:	f043 0320 	orrmi.w	r3, r3, #32
 80093d2:	6023      	strmi	r3, [r4, #0]
 80093d4:	b91d      	cbnz	r5, 80093de <_printf_i+0x196>
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	f023 0320 	bic.w	r3, r3, #32
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	2310      	movs	r3, #16
 80093e0:	e7b0      	b.n	8009344 <_printf_i+0xfc>
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	f043 0320 	orr.w	r3, r3, #32
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	2378      	movs	r3, #120	; 0x78
 80093ec:	4828      	ldr	r0, [pc, #160]	; (8009490 <_printf_i+0x248>)
 80093ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093f2:	e7e3      	b.n	80093bc <_printf_i+0x174>
 80093f4:	065e      	lsls	r6, r3, #25
 80093f6:	bf48      	it	mi
 80093f8:	b2ad      	uxthmi	r5, r5
 80093fa:	e7e6      	b.n	80093ca <_printf_i+0x182>
 80093fc:	4616      	mov	r6, r2
 80093fe:	e7bb      	b.n	8009378 <_printf_i+0x130>
 8009400:	680b      	ldr	r3, [r1, #0]
 8009402:	6826      	ldr	r6, [r4, #0]
 8009404:	6960      	ldr	r0, [r4, #20]
 8009406:	1d1d      	adds	r5, r3, #4
 8009408:	600d      	str	r5, [r1, #0]
 800940a:	0635      	lsls	r5, r6, #24
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	d501      	bpl.n	8009414 <_printf_i+0x1cc>
 8009410:	6018      	str	r0, [r3, #0]
 8009412:	e002      	b.n	800941a <_printf_i+0x1d2>
 8009414:	0671      	lsls	r1, r6, #25
 8009416:	d5fb      	bpl.n	8009410 <_printf_i+0x1c8>
 8009418:	8018      	strh	r0, [r3, #0]
 800941a:	2300      	movs	r3, #0
 800941c:	6123      	str	r3, [r4, #16]
 800941e:	4616      	mov	r6, r2
 8009420:	e7ba      	b.n	8009398 <_printf_i+0x150>
 8009422:	680b      	ldr	r3, [r1, #0]
 8009424:	1d1a      	adds	r2, r3, #4
 8009426:	600a      	str	r2, [r1, #0]
 8009428:	681e      	ldr	r6, [r3, #0]
 800942a:	6862      	ldr	r2, [r4, #4]
 800942c:	2100      	movs	r1, #0
 800942e:	4630      	mov	r0, r6
 8009430:	f7f6 ff0e 	bl	8000250 <memchr>
 8009434:	b108      	cbz	r0, 800943a <_printf_i+0x1f2>
 8009436:	1b80      	subs	r0, r0, r6
 8009438:	6060      	str	r0, [r4, #4]
 800943a:	6863      	ldr	r3, [r4, #4]
 800943c:	6123      	str	r3, [r4, #16]
 800943e:	2300      	movs	r3, #0
 8009440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009444:	e7a8      	b.n	8009398 <_printf_i+0x150>
 8009446:	6923      	ldr	r3, [r4, #16]
 8009448:	4632      	mov	r2, r6
 800944a:	4649      	mov	r1, r9
 800944c:	4640      	mov	r0, r8
 800944e:	47d0      	blx	sl
 8009450:	3001      	adds	r0, #1
 8009452:	d0ab      	beq.n	80093ac <_printf_i+0x164>
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	079b      	lsls	r3, r3, #30
 8009458:	d413      	bmi.n	8009482 <_printf_i+0x23a>
 800945a:	68e0      	ldr	r0, [r4, #12]
 800945c:	9b03      	ldr	r3, [sp, #12]
 800945e:	4298      	cmp	r0, r3
 8009460:	bfb8      	it	lt
 8009462:	4618      	movlt	r0, r3
 8009464:	e7a4      	b.n	80093b0 <_printf_i+0x168>
 8009466:	2301      	movs	r3, #1
 8009468:	4632      	mov	r2, r6
 800946a:	4649      	mov	r1, r9
 800946c:	4640      	mov	r0, r8
 800946e:	47d0      	blx	sl
 8009470:	3001      	adds	r0, #1
 8009472:	d09b      	beq.n	80093ac <_printf_i+0x164>
 8009474:	3501      	adds	r5, #1
 8009476:	68e3      	ldr	r3, [r4, #12]
 8009478:	9903      	ldr	r1, [sp, #12]
 800947a:	1a5b      	subs	r3, r3, r1
 800947c:	42ab      	cmp	r3, r5
 800947e:	dcf2      	bgt.n	8009466 <_printf_i+0x21e>
 8009480:	e7eb      	b.n	800945a <_printf_i+0x212>
 8009482:	2500      	movs	r5, #0
 8009484:	f104 0619 	add.w	r6, r4, #25
 8009488:	e7f5      	b.n	8009476 <_printf_i+0x22e>
 800948a:	bf00      	nop
 800948c:	0800cc4d 	.word	0x0800cc4d
 8009490:	0800cc5e 	.word	0x0800cc5e

08009494 <_realloc_r>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	4607      	mov	r7, r0
 8009498:	4614      	mov	r4, r2
 800949a:	460e      	mov	r6, r1
 800949c:	b921      	cbnz	r1, 80094a8 <_realloc_r+0x14>
 800949e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094a2:	4611      	mov	r1, r2
 80094a4:	f7ff bbbe 	b.w	8008c24 <_malloc_r>
 80094a8:	b922      	cbnz	r2, 80094b4 <_realloc_r+0x20>
 80094aa:	f7ff fb6b 	bl	8008b84 <_free_r>
 80094ae:	4625      	mov	r5, r4
 80094b0:	4628      	mov	r0, r5
 80094b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094b4:	f000 f814 	bl	80094e0 <_malloc_usable_size_r>
 80094b8:	42a0      	cmp	r0, r4
 80094ba:	d20f      	bcs.n	80094dc <_realloc_r+0x48>
 80094bc:	4621      	mov	r1, r4
 80094be:	4638      	mov	r0, r7
 80094c0:	f7ff fbb0 	bl	8008c24 <_malloc_r>
 80094c4:	4605      	mov	r5, r0
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d0f2      	beq.n	80094b0 <_realloc_r+0x1c>
 80094ca:	4631      	mov	r1, r6
 80094cc:	4622      	mov	r2, r4
 80094ce:	f7ff fb29 	bl	8008b24 <memcpy>
 80094d2:	4631      	mov	r1, r6
 80094d4:	4638      	mov	r0, r7
 80094d6:	f7ff fb55 	bl	8008b84 <_free_r>
 80094da:	e7e9      	b.n	80094b0 <_realloc_r+0x1c>
 80094dc:	4635      	mov	r5, r6
 80094de:	e7e7      	b.n	80094b0 <_realloc_r+0x1c>

080094e0 <_malloc_usable_size_r>:
 80094e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e4:	1f18      	subs	r0, r3, #4
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bfbc      	itt	lt
 80094ea:	580b      	ldrlt	r3, [r1, r0]
 80094ec:	18c0      	addlt	r0, r0, r3
 80094ee:	4770      	bx	lr

080094f0 <_init>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	bf00      	nop
 80094f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f6:	bc08      	pop	{r3}
 80094f8:	469e      	mov	lr, r3
 80094fa:	4770      	bx	lr

080094fc <_fini>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	bf00      	nop
 8009500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009502:	bc08      	pop	{r3}
 8009504:	469e      	mov	lr, r3
 8009506:	4770      	bx	lr
