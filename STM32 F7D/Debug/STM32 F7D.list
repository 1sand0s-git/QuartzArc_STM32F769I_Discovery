
STM32 F7D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008838  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036f4  08008a30  08008a30  00018a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c124  0800c124  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c124  0800c124  0001c124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c12c  0800c12c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c12c  0800c12c  0001c12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c130  0800c130  0001c130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000078  0800c1ac  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0800c1ac  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_line   000203cd  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0003bddf  00000000  00000000  00040473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007912  00000000  00000000  0007c252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001898  00000000  00000000  00083b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00147fcc  00000000  00000000  00085400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000016e0  00000000  00000000  001cd3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a121  00000000  00000000  001ceab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00208bd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e58  00000000  00000000  00208c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000078 	.word	0x20000078
 8000214:	00000000 	.word	0x00000000
 8000218:	08008a18 	.word	0x08008a18

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000007c 	.word	0x2000007c
 8000234:	08008a18 	.word	0x08008a18

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000546:	490e      	ldr	r1, [pc, #56]	; (8000580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000548:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800055c:	4c0b      	ldr	r4, [pc, #44]	; (800058c <LoopFillZerobss+0x26>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800056a:	f001 fae7 	bl	8001b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056e:	f008 f877 	bl	8008660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000572:	f000 fd59 	bl	8001028 <main>
  bx  lr    
 8000576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000578:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000580:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000584:	0800c134 	.word	0x0800c134
  ldr r2, =_sbss
 8000588:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800058c:	200003a4 	.word	0x200003a4

08000590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC_IRQHandler>
	...

08000594 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000598:	f3bf 8f4f 	dsb	sy
}
 800059c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800059e:	f3bf 8f6f 	isb	sy
}
 80005a2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <SCB_EnableICache+0x48>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b2:	f3bf 8f6f 	isb	sy
}
 80005b6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <SCB_EnableICache+0x48>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <SCB_EnableICache+0x48>)
 80005be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c4:	f3bf 8f4f 	dsb	sy
}
 80005c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ca:	f3bf 8f6f 	isb	sy
}
 80005ce:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <SCB_EnableDCache+0x9c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <SCB_EnableDCache+0x9c>)
 80005f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005fa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	0b5b      	lsrs	r3, r3, #13
 8000600:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000604:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	08db      	lsrs	r3, r3, #3
 800060a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800060e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	015a      	lsls	r2, r3, #5
 8000614:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000618:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061e:	4917      	ldr	r1, [pc, #92]	; (800067c <SCB_EnableDCache+0x9c>)
 8000620:	4313      	orrs	r3, r2
 8000622:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1e5a      	subs	r2, r3, #1
 800062a:	60ba      	str	r2, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf14      	ite	ne
 8000630:	2301      	movne	r3, #1
 8000632:	2300      	moveq	r3, #0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d000      	beq.n	800063c <SCB_EnableDCache+0x5c>
      do {
 800063a:	e7e9      	b.n	8000610 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	1e5a      	subs	r2, r3, #1
 8000640:	60fa      	str	r2, [r7, #12]
 8000642:	2b00      	cmp	r3, #0
 8000644:	bf14      	ite	ne
 8000646:	2301      	movne	r3, #1
 8000648:	2300      	moveq	r3, #0
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d000      	beq.n	8000652 <SCB_EnableDCache+0x72>
    do {
 8000650:	e7d9      	b.n	8000606 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000652:	f3bf 8f4f 	dsb	sy
}
 8000656:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <SCB_EnableDCache+0x9c>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <SCB_EnableDCache+0x9c>)
 800065e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000662:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000664:	f3bf 8f4f 	dsb	sy
}
 8000668:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800066a:	f3bf 8f6f 	isb	sy
}
 800066e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks
//Also enables all GPIO ports, and both DMA1 and DMA2 peripherals
//
//Returns QA_OK if successful, or QA_Fail if initialization failed
QA_Result SystemInitialize(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b0c6      	sub	sp, #280	; 0x118
 8000684:	af00      	add	r7, sp, #0

  //------------------------------------
  //Enable CPU Instruction & Data Caches
  SCB_EnableICache();
 8000686:	f7ff ff85 	bl	8000594 <SCB_EnableICache>
  SCB_EnableDCache();
 800068a:	f7ff ffa9 	bl	80005e0 <SCB_EnableDCache>

	//----------------------
	//Enable ART Accelerator
  __HAL_FLASH_ART_ENABLE();
 800068e:	4b67      	ldr	r3, [pc, #412]	; (800082c <_Z16SystemInitializev+0x1ac>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a66      	ldr	r2, [pc, #408]	; (800082c <_Z16SystemInitializev+0x1ac>)
 8000694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000698:	6013      	str	r3, [r2, #0]

  //---------------------
  //Enable Flash Prefetch
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800069a:	4b64      	ldr	r3, [pc, #400]	; (800082c <_Z16SystemInitializev+0x1ac>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a63      	ldr	r2, [pc, #396]	; (800082c <_Z16SystemInitializev+0x1ac>)
 80006a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a4:	6013      	str	r3, [r2, #0]

  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a6:	2003      	movs	r0, #3
 80006a8:	f001 fe1a 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  //------------
  //Init SysTick
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f001 fcaf 	bl	8002010 <HAL_InitTick>

  //------------------------------
  //Configure LSE Drive Capability
  HAL_PWR_EnableBkUpAccess();
 80006b2:	f003 f9ad 	bl	8003a10 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b6:	4b5e      	ldr	r3, [pc, #376]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006ba:	4a5d      	ldr	r2, [pc, #372]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006bc:	f023 0318 	bic.w	r3, r3, #24
 80006c0:	6713      	str	r3, [r2, #112]	; 0x70

  //------------------------------------------------
  //Configure Main Internal Regulator Output Voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b5b      	ldr	r3, [pc, #364]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	4a5a      	ldr	r2, [pc, #360]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	6413      	str	r3, [r2, #64]	; 0x40
 80006ce:	4b58      	ldr	r3, [pc, #352]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006da:	4b56      	ldr	r3, [pc, #344]	; (8000834 <_Z16SystemInitializev+0x1b4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a55      	ldr	r2, [pc, #340]	; (8000834 <_Z16SystemInitializev+0x1b4>)
 80006e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	4b53      	ldr	r3, [pc, #332]	; (8000834 <_Z16SystemInitializev+0x1b4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80006f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  //
  //Configure High Speed External (HSE) oscillator to be used for primary system clocks, and setup primary PLL to provide a 216MHz clock
  //Configure Low Speed External (LSE) oscillator to be used for clock source for Real Timer Clock (RTC) peripheral
  //NOTE: HSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 25MHz oscillator (labeled X2 on the PCB)
  //      LSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 32.768kHz oscillator (labeled X3 on the PCB)
  RCC_OscInitTypeDef RCC_OscInit = {0};
 80006f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006f6:	2234      	movs	r2, #52	; 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f008 f80c 	bl	8008718 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | //Define HSE (High Speed External) oscillator to be configured (used for main system clock)
 8000700:	2305      	movs	r3, #5
 8000702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  		                         RCC_OSCILLATORTYPE_LSE;  //Define LSE (Low Speed External) oscillator to be configured (used for RTC - Real Time Clock)
  RCC_OscInit.HSEState       = RCC_HSE_ON;              //Enable HSE
 8000706:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800070a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInit.LSEState       = RCC_LSE_ON;              //Enable LSE
 800070e:	2301      	movs	r3, #1
 8000710:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;              //Enable primary PLL
 8000714:	2302      	movs	r3, #2
 8000716:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;       //Set primary PLL source to HSE
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    //Set primary PLL values required for 216Mhz system clock
  RCC_OscInit.PLL.PLLM       = 25;
 8000722:	2319      	movs	r3, #25
 8000724:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInit.PLL.PLLN       = 432;
 8000728:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800072c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInit.PLL.PLLQ       = 4;
 8000736:	2304      	movs	r3, #4
 8000738:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {  //Initialize Oscillators using values in init structure
 800073c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000740:	4618      	mov	r0, r3
 8000742:	f003 f9c5 	bl	8003ad0 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <_Z16SystemInitializev+0xda>
  	return QA_Fail;
 8000756:	2301      	movs	r3, #1
 8000758:	e123      	b.n	80009a2 <_Z16SystemInitializev+0x322>
  }

  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b35      	ldr	r3, [pc, #212]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	4a34      	ldr	r2, [pc, #208]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6453      	str	r3, [r2, #68]	; 0x44
 8000766:	4b32      	ldr	r3, [pc, #200]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
 8000770:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  //---------------------
  //Enable Overdrive Mode
  //
  //This is required to provide best system stability given that we are running at the maximum clock rate of 216MHz for the STM32F769I device
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000772:	f003 f95d 	bl	8003a30 <HAL_PWREx_EnableOverDrive>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf14      	ite	ne
 800077c:	2301      	movne	r3, #1
 800077e:	2300      	moveq	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <_Z16SystemInitializev+0x10a>
  	return QA_Fail;
 8000786:	2301      	movs	r3, #1
 8000788:	e10b      	b.n	80009a2 <_Z16SystemInitializev+0x322>
  }

  //---------------------------
  //Initialize CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 800078a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |      //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 800079a:	230f      	movs	r3, #15
 800079c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  		                         RCC_CLOCKTYPE_SYSCLK |
                               RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;  //Define primary PLL clock as system clock source
 80007a0:	2302      	movs	r3, #2
 80007a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;          //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 216MHz
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV4;            //Set clock divider for peripheral bus 1 (APB1), DIV4 provides an APB1 frequency of 54MHz
 80007ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                                                         //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 108MHz

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;            //Set clock divider for peripheral bus 2 (APB2), DIV2 provides an APB2 frequency of 108MHz
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                                                         //NOTE: APB2 timer clocks are clock doubled, providing APB2 timers with 216MHz clocks

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_7) != HAL_OK) { //Initialize system clocks using required values, and setting Flash latency to 7 cycles
 80007bc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007c0:	2107      	movs	r1, #7
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fc32 	bl	800402c <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf14      	ite	ne
 80007ce:	2301      	movne	r3, #1
 80007d0:	2300      	moveq	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <_Z16SystemInitializev+0x15c>
  	return QA_Fail;
 80007d8:	2301      	movs	r3, #1
 80007da:	e0e2      	b.n	80009a2 <_Z16SystemInitializev+0x322>
  }

  //----------------------------
  //Initialize Peripheral Clocks
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 80007dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007e0:	2290      	movs	r2, #144	; 0x90
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f007 ff97 	bl	8008718 <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC |
 80007ea:	2328      	movs	r3, #40	; 0x28
 80007ec:	643b      	str	r3, [r7, #64]	; 0x40
  		                                     RCC_PERIPHCLK_LTDC;

    //Define settings for PLLSAI, as this PLL is also used as the clock source for the LTDC peripheral which we require to run the LCD screen
	RCC_PeriphClkInit.PLLSAI.PLLSAIN       = 384;
 80007ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007f2:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_PeriphClkInit.PLLSAI.PLLSAIP       = RCC_PLLSAIP_DIV8;
 80007f4:	2303      	movs	r3, #3
 80007f6:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_PeriphClkInit.PLLSAI.PLLSAIR       = 7;
 80007f8:	2307      	movs	r3, #7
 80007fa:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_PeriphClkInit.PLLSAI.PLLSAIQ       = 8;
 80007fc:	2308      	movs	r3, #8
 80007fe:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_PeriphClkInit.PLLSAIDivQ           = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_PeriphClkInit.PLLSAIDivR           = RCC_PLLSAIDIVR_2;
 8000804:	2300      	movs	r3, #0
 8000806:	66fb      	str	r3, [r7, #108]	; 0x6c

  RCC_PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE; //Set the LSE oscillator as the clock source for the Real Time Clock
 8000808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK) { //Initialize the peripheral clocks used the required values
 800080e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fde0 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d007      	beq.n	8000838 <_Z16SystemInitializev+0x1b8>
  	return QA_Fail;
 8000828:	2301      	movs	r3, #1
 800082a:	e0ba      	b.n	80009a2 <_Z16SystemInitializev+0x322>
 800082c:	40023c00 	.word	0x40023c00
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000
  }

  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b5c      	ldr	r3, [pc, #368]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	4a5b      	ldr	r2, [pc, #364]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	6313      	str	r3, [r2, #48]	; 0x30
 8000844:	4b59      	ldr	r3, [pc, #356]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
 800084e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000850:	4b56      	ldr	r3, [pc, #344]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a55      	ldr	r2, [pc, #340]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
 800085c:	4b53      	ldr	r3, [pc, #332]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	f003 0302 	and.w	r3, r3, #2
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000868:	4b50      	ldr	r3, [pc, #320]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	4a4f      	ldr	r2, [pc, #316]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6313      	str	r3, [r2, #48]	; 0x30
 8000874:	4b4d      	ldr	r3, [pc, #308]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
 800087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000880:	4b4a      	ldr	r3, [pc, #296]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	4a49      	ldr	r2, [pc, #292]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	6313      	str	r3, [r2, #48]	; 0x30
 800088c:	4b47      	ldr	r3, [pc, #284]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	f003 0308 	and.w	r3, r3, #8
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000898:	4b44      	ldr	r3, [pc, #272]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a43      	ldr	r2, [pc, #268]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b41      	ldr	r3, [pc, #260]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b0:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a3d      	ldr	r2, [pc, #244]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 0320 	and.w	r3, r3, #32
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c8:	4b38      	ldr	r3, [pc, #224]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a37      	ldr	r2, [pc, #220]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80008dc:	f107 0318 	add.w	r3, r7, #24
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	f107 0318 	add.w	r3, r7, #24
 80008e6:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a27      	ldr	r2, [pc, #156]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800090e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a1f      	ldr	r2, [pc, #124]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4a17      	ldr	r2, [pc, #92]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800094e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000952:	6313      	str	r3, [r2, #48]	; 0x30
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	681b      	ldr	r3, [r3, #0]

  //-----------------
  //Enable DMA Clocks
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800096e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000972:	6313      	str	r3, [r2, #48]	; 0x30
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000978:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800098a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800098e:	6313      	str	r3, [r2, #48]	; 0x30
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000998:	463b      	mov	r3, r7
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	463b      	mov	r3, r7
 800099e:	681b      	ldr	r3, [r3, #0]

  //Return
  return QA_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800

080009b0 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HardFault_Handler+0x1c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f005 f8c6 	bl	8005b5a <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <HardFault_Handler+0x20>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f005 f8c1 	bl	8005b5a <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 80009d8:	e7fe      	b.n	80009d8 <HardFault_Handler+0x18>
 80009da:	bf00      	nop
 80009dc:	2000012c 	.word	0x2000012c
 80009e0:	20000130 	.word	0x20000130

080009e4 <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <MemManage_Handler+0x1c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f005 f8b4 	bl	8005b5a <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <MemManage_Handler+0x20>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 f8af 	bl	8005b5a <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x18>
 80009fe:	bf00      	nop
 8000a00:	2000012c 	.word	0x2000012c
 8000a04:	20000130 	.word	0x20000130

08000a08 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <BusFault_Handler+0x1c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f005 f8a2 	bl	8005b5a <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <BusFault_Handler+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f005 f89d 	bl	8005b5a <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000a20:	e7fe      	b.n	8000a20 <BusFault_Handler+0x18>
 8000a22:	bf00      	nop
 8000a24:	2000012c 	.word	0x2000012c
 8000a28:	20000130 	.word	0x20000130

08000a2c <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <UsageFault_Handler+0x1c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f005 f890 	bl	8005b5a <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <UsageFault_Handler+0x20>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f005 f88b 	bl	8005b5a <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x18>
 8000a46:	bf00      	nop
 8000a48:	2000012c 	.word	0x2000012c
 8000a4c:	20000130 	.word	0x20000130

08000a50 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000a7e:	f001 faf7 	bl	8002070 <HAL_IncTick>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <USART1_IRQHandler>:
  //Interrupt Handler Functions


//USART1_IRQHandler
//Interrupt Handler Function
void USART1_IRQHandler(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL);
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <USART1_IRQHandler+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 facd 	bl	8008032 <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000138 	.word	0x20000138

08000aa0 <_ZN7QAD_FMCC1Ev>:

	//------------
	//Constructors

	//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_FMC() :
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	  m_eState(QA_NotInitialized) {}
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2204      	movs	r2, #4
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2208      	movs	r2, #8
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2220      	movs	r2, #32
 8000ad0:	619a      	str	r2, [r3, #24]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2230      	movs	r2, #48	; 0x30
 8000ad6:	61da      	str	r2, [r3, #28]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f240 6203 	movw	r2, #1539	; 0x603
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <_ZN7QAD_FMC3getEv>:

	//-----------------
	//Singleton Methods
  //
	//Used to retrieve a reference to the singleton class
  static QAD_FMC& get(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  	static QAD_FMC instance;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <_ZN7QAD_FMC3getEv+0x48>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	f3bf 8f5b 	dmb	ish
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf0c      	ite	eq
 8000b22:	2301      	moveq	r3, #1
 8000b24:	2300      	movne	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d010      	beq.n	8000b4e <_ZN7QAD_FMC3getEv+0x42>
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <_ZN7QAD_FMC3getEv+0x48>)
 8000b2e:	f007 fd3e 	bl	80085ae <__cxa_guard_acquire>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bf14      	ite	ne
 8000b38:	2301      	movne	r3, #1
 8000b3a:	2300      	moveq	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d005      	beq.n	8000b4e <_ZN7QAD_FMC3getEv+0x42>
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <_ZN7QAD_FMC3getEv+0x4c>)
 8000b44:	f7ff ffac 	bl	8000aa0 <_ZN7QAD_FMCC1Ev>
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <_ZN7QAD_FMC3getEv+0x48>)
 8000b4a:	f007 fd3c 	bl	80085c6 <__cxa_guard_release>
  	return instance;
 8000b4e:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <_ZN7QAD_FMC3getEv+0x4c>)
  }
 8000b50:	4618      	mov	r0, r3
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000fc 	.word	0x200000fc
 8000b58:	20000094 	.word	0x20000094

08000b5c <_ZN7QAD_FMC4initEv>:

  //NOTE: No deinitialization method is supplied due to SDRAM being seen as a primary system component
  //in this codebase and is required for operation of systems such as LCD among others

  //Used to initialize the FMC peripheral and SDRAM module
  static QA_Result init(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000b60:	f7ff ffd4 	bl	8000b0c <_ZN7QAD_FMC3getEv>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 fe76 	bl	8005858 <_ZN7QAD_FMC8imp_initEv>
 8000b6c:	4603      	mov	r3, r0
  }
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_ZN7QAD_FMC4testEv>:
  //Memory Testing Methods

  //Used to perform a memory test of the SDRAM module
  //Performs a full read and write test of all 16 megabytes of the SDRAM
  //Returns QA_OK if memory test is successful, or QA_Fail if not successful
  static QA_Result test(void) {
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
  	return get().imp_test();
 8000b76:	f7ff ffc9 	bl	8000b0c <_ZN7QAD_FMC3getEv>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f004 ff87 	bl	8005a90 <_ZN7QAD_FMC8imp_testEv>
 8000b82:	4603      	mov	r3, r0
  }
 8000b84:	4618      	mov	r0, r3
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 8000b94:	887a      	ldrh	r2, [r7, #2]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fbf0 	bl	8001380 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	809a      	strh	r2, [r3, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	80da      	strh	r2, [r3, #6]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	811a      	strh	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4603      	mov	r3, r0
 8000bcc:	817b      	strh	r3, [r7, #10]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	813b      	strh	r3, [r7, #8]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3304      	adds	r3, #4
 8000be0:	f107 020a 	add.w	r2, r7, #10
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fbe6 	bl	80013b8 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3308      	adds	r3, #8
 8000bf0:	f107 0208 	add.w	r2, r7, #8
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fbde 	bl	80013b8 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	731a      	strb	r2, [r3, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2200      	movs	r2, #0
 8000c06:	735a      	strb	r2, [r3, #13]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	739a      	strb	r2, [r3, #14]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	79fa      	ldrb	r2, [r7, #7]
 8000c12:	73da      	strb	r2, [r3, #15]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	08008b70 	.word	0x08008b70

08000c24 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	769a      	strb	r2, [r3, #26]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2225      	movs	r2, #37	; 0x25
 8000c80:	76da      	strb	r2, [r3, #27]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	331c      	adds	r3, #28
 8000c86:	2284      	movs	r2, #132	; 0x84
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f007 fd44 	bl	8008718 <memset>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	8b99      	ldrh	r1, [r3, #28]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	8bda      	ldrh	r2, [r3, #30]
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f7ff ff7b 	bl	8000bbc <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	741a      	strb	r2, [r3, #16]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3314      	adds	r3, #20
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fb86 	bl	80013ee <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	0800c108 	.word	0x0800c108

08000cf0 <_ZN14QAT_Vector2_16C1Ett>:
	//Default constructor. Sets both X and Y components to zero
  QAT_Vector2_16() :
    val(0) {}

  //Constructor used to set individual X and Y components
  QAT_Vector2_16(uint16_t x, uint16_t y) :
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	803b      	strh	r3, [r7, #0]
    x(x), y(y) {}
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	887a      	ldrh	r2, [r7, #2]
 8000d04:	801a      	strh	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	883a      	ldrh	r2, [r7, #0]
 8000d0a:	805a      	strh	r2, [r3, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_ZN14QAT_Vector2_16C1ERKS_>:

  //Copy Constructor
  //Copies data as single 32bit value for performance reasons
  QAT_Vector2_16(const QAT_Vector2_16& other) :
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
    val(other.val) {}
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 fb7d 	bl	8001442 <_ZNSaIP12QAS_LCD_FontED1Ev>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 fb60 	bl	8001422 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ffeb 	bl	8000d52 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_ZN15QAS_LCD_FontMgrC1Ev>:

	//--------------------------
	//Constructors / Destructors

	//Default constructor, which clears all data to default on class construction
	QAS_LCD_FontMgr() :
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
		m_iCurrentIdx(-1),
		m_pCurrent(NULL),
		m_pBuffer(NULL),
		m_uColor(0x0000) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ffeb 	bl	8000d6c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	22ff      	movs	r2, #255	; 0xff
 8000d9a:	731a      	strb	r2, [r3, #12]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	831a      	strh	r2, [r3, #24]
		m_vFonts.clear();
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fb86 	bl	80014c2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
	}
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_ZN15QAS_LCD_FontMgrD1Ev>:

	//Class destructor which iterates through all fonts stored in m_vFonts vector and
	//deletes/deallocates them to prevent memory leaks when class is destroyed
	~QAS_LCD_FontMgr() {
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	7bfc      	ldrb	r4, [r7, #15]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 fb84 	bl	80014de <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	bf34      	ite	cc
 8000ddc:	2301      	movcc	r3, #1
 8000dde:	2300      	movcs	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d011      	beq.n	8000e0a <_ZN15QAS_LCD_FontMgrD1Ev+0x4a>
			delete m_vFonts[i];
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7bfa      	ldrb	r2, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fb86 	bl	80014fe <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8000df2:	4603      	mov	r3, r0
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <_ZN15QAS_LCD_FontMgrD1Ev+0x42>
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f007 fbd4 	bl	80085aa <_ZdlPvj>
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	3301      	adds	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e7e0      	b.n	8000dcc <_ZN15QAS_LCD_FontMgrD1Ev+0xc>
	~QAS_LCD_FontMgr() {
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fb3d 	bl	800148c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>
		}
	}
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}

08000e1c <_ZN7QAS_LCDC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAS_LCD() :
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_pDrawBuffer(NULL),
		m_uDrawColor(0x0000) {}
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	811a      	strh	r2, [r3, #8]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	330c      	adds	r3, #12
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ffa3 	bl	8000d86 <_ZN15QAS_LCD_FontMgrC1Ev>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_ZN7QAS_LCDD1Ev>:
class QAS_LCD {
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	330c      	adds	r3, #12
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ffb2 	bl	8000dc0 <_ZN15QAS_LCD_FontMgrD1Ev>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <__tcf_0>:
  //-----------------
  //Singleton Methods
  //
  //Used to retrieve a reference to the singleton class
  static QAS_LCD& get() {
  	static QAS_LCD instance;
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4801      	ldr	r0, [pc, #4]	; (8000e74 <__tcf_0+0xc>)
 8000e6e:	f7ff ffec 	bl	8000e4a <_ZN7QAS_LCDD1Ev>
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000100 	.word	0x20000100

08000e78 <_ZN7QAS_LCD3getEv>:
  static QAS_LCD& get() {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  	static QAS_LCD instance;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <_ZN7QAS_LCD3getEv+0x50>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	f3bf 8f5b 	dmb	ish
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2301      	moveq	r3, #1
 8000e90:	2300      	movne	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d013      	beq.n	8000ec0 <_ZN7QAS_LCD3getEv+0x48>
 8000e98:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <_ZN7QAS_LCD3getEv+0x50>)
 8000e9a:	f007 fb88 	bl	80085ae <__cxa_guard_acquire>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bf14      	ite	ne
 8000ea4:	2301      	movne	r3, #1
 8000ea6:	2300      	moveq	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d008      	beq.n	8000ec0 <_ZN7QAS_LCD3getEv+0x48>
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <_ZN7QAS_LCD3getEv+0x54>)
 8000eb0:	f7ff ffb4 	bl	8000e1c <_ZN7QAS_LCDC1Ev>
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <_ZN7QAS_LCD3getEv+0x50>)
 8000eb6:	f007 fb86 	bl	80085c6 <__cxa_guard_release>
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <_ZN7QAS_LCD3getEv+0x58>)
 8000ebc:	f007 fbc3 	bl	8008646 <atexit>
  	return instance;
 8000ec0:	4b02      	ldr	r3, [pc, #8]	; (8000ecc <_ZN7QAS_LCD3getEv+0x54>)
  }
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000128 	.word	0x20000128
 8000ecc:	20000100 	.word	0x20000100
 8000ed0:	08000e69 	.word	0x08000e69

08000ed4 <_ZN7QAS_LCD4initEv>:
	//----------------------
	//Initialization Methods

  //Used to initialize the LTDC peripheral and setup Font Manager class
  //Returns QA_OK if initialization successful, or QA_Fail if initialization fails
  static QA_Result init(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000ed8:	f7ff ffce 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f005 fffe 	bl	8006ee0 <_ZN7QAS_LCD8imp_initEv>
 8000ee4:	4603      	mov	r3, r0
  }
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_ZN7QAS_LCD10flipLayer0Ev>:
	//-----------------------
	//Rendering Setup Methods

  //Used to flip the front and back buffer for layer 0
  //See QAD_LTDC.hpp for more details
  static void flipLayer0(void) {
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  	get().imp_flipLayer0();
 8000eee:	f7ff ffc3 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f006 f859 	bl	8006fac <_ZN7QAS_LCD14imp_flipLayer0Ev>
  }
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_ZN7QAS_LCD10flipLayer1Ev>:

  //Used to flip the front and back buffer for layer 1
  //See QAD_LTDC.hpp for more details
  static void flipLayer1(void) {
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  	get().imp_flipLayer1();
 8000f02:	f7ff ffb9 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f006 f859 	bl	8006fc0 <_ZN7QAS_LCD14imp_flipLayer1Ev>
  }
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>:

  //Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
  //eLayer - Sets whether the current draw buffer is layer 0 or layer 1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
  static void setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	71fb      	strb	r3, [r7, #7]
  	get().imp_setDrawBuffer(eLayer);
 8000f1c:	f7ff ffac 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000f20:	4602      	mov	r2, r0
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f006 f854 	bl	8006fd4 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>
  }
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_ZN7QAS_LCD12setDrawColorEt>:

  //Used to set the current draw color
  //uColor - A 16bit ARGB4444 color value
  static void setDrawColor(uint16_t uColor) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
  	get().imp_setDrawColor(uColor);
 8000f3e:	f7ff ff9b 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000f42:	4602      	mov	r2, r0
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4610      	mov	r0, r2
 8000f4a:	f006 f868 	bl	800701e <_ZN7QAS_LCD16imp_setDrawColorEt>
  }
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_ZN7QAS_LCD11clearBufferEv>:

	//-----------------
	//Rendering Methods

  //Used to clear the currently selected draw buffer to the currently selected draw color
  static void clearBuffer(void) {
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  	get().imp_clearBuffer();
 8000f5a:	f7ff ff8d 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f006 f873 	bl	800704c <_ZN7QAS_LCD15imp_clearBufferEv>
  }
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>:
  }

  //Used to draw a non-filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
  static void drawRect(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  	get().imp_drawRect(cStart, cEnd);
 8000f74:	f7ff ff80 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f006 f884 	bl	800708c <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>
  }
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>:

  //Used to draw a filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
  static void drawRectFill(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  	get().imp_drawRectFill(cStart, cEnd);
 8000f96:	f7ff ff6f 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f006 f901 	bl	80071a8 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>
  }
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_ZN7QAS_LCD13setFontByNameEPKc>:
	//Font Rendering Methods

  //Used to set the selected font/typeface to be used for text rendering
  //strName - A C-style string containing the name of the font to be selected. This must match one of the
  //          fonts stored in the font manager, otherwise no font will be selected
  static void setFontByName(const char* strName) {
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  	get().m_cFontMgr.setFontByName(strName);
 8000fb6:	f7ff ff5f 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	330c      	adds	r3, #12
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f006 fa13 	bl	80073ec <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>
  }
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_ZN7QAS_LCD14setFontByIndexEh>:

  //Used to set the selected font/typeface to be used for text rendering
  //uIdx - The index of the fond to be selected, based on the array of fonts stored in the font manager
  static void setFontByIndex(uint8_t uIdx) {
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
  	get().m_cFontMgr.setFontByIndex(uIdx);
 8000fd8:	f7ff ff4e 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	330c      	adds	r3, #12
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f006 fa28 	bl	800743a <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>
  }
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>:

  //Used to draw a center-aligned string of characters using the currently selected font/typeface
  //String will be drawn to currently selected draw buffer with currently selected draw color
  //cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
  //str  - The C-style string to be drawn
  static void drawStrC(QAT_Vector2_16 cPos, const char* str) {
 8000ff2:	b590      	push	{r4, r7, lr}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  	get().m_cFontMgr.drawStrC(cPos, str);
 8000ffc:	f7ff ff3c 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8001000:	4603      	mov	r3, r0
 8001002:	f103 040c 	add.w	r4, r3, #12
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fe84 	bl	8000d1a <_ZN14QAT_Vector2_16C1ERKS_>
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	4620      	mov	r0, r4
 800101c:	f006 fb07 	bl	800762e <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>
  }
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}

08001028 <main>:
//main
//Application Entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f769nihx.s
int main(void) {
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b095      	sub	sp, #84	; 0x54
 800102c:	af00      	add	r7, sp, #0
  //System Initialization

	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method
	if (SystemInitialize()) {
 800102e:	f7ff fb27 	bl	8000680 <_Z16SystemInitializev>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf14      	ite	ne
 8001038:	2301      	movne	r3, #1
 800103a:	2300      	moveq	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d000      	beq.n	8001044 <main+0x1c>
	  while (1) {}
 8001042:	e7fe      	b.n	8001042 <main+0x1a>


	//----------------------------------
	//Initialize the User LEDs using the QAD_GPIO_Output driver class.
	//QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PORT, QAD_USER_LED_RED_GPIO_PIN and QAD_USERLED_GREEN_GPIO_PIN are defined in setup.hpp
  GPIO_UserLED_Red   = new QAD_GPIO_Output(QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_RED_GPIO_PIN);
 8001044:	2014      	movs	r0, #20
 8001046:	f007 fac1 	bl	80085cc <_Znwj>
 800104a:	4603      	mov	r3, r0
 800104c:	461c      	mov	r4, r3
 800104e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001052:	49ba      	ldr	r1, [pc, #744]	; (800133c <main+0x314>)
 8001054:	4620      	mov	r0, r4
 8001056:	f004 fd5f 	bl	8005b18 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 800105a:	4bb9      	ldr	r3, [pc, #740]	; (8001340 <main+0x318>)
 800105c:	601c      	str	r4, [r3, #0]
  GPIO_UserLED_Green = new QAD_GPIO_Output(QAD_USERLED_GREEN_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PIN);
 800105e:	2014      	movs	r0, #20
 8001060:	f007 fab4 	bl	80085cc <_Znwj>
 8001064:	4603      	mov	r3, r0
 8001066:	461c      	mov	r4, r3
 8001068:	2220      	movs	r2, #32
 800106a:	49b4      	ldr	r1, [pc, #720]	; (800133c <main+0x314>)
 800106c:	4620      	mov	r0, r4
 800106e:	f004 fd53 	bl	8005b18 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8001072:	4bb4      	ldr	r3, [pc, #720]	; (8001344 <main+0x31c>)
 8001074:	601c      	str	r4, [r3, #0]


	//----------------------------------
  //Initialize the User Button using the QAD_GPIO_Input driver class.
  //QAD_USERBUTTON_GPIO_PORT and QAD_USERBUTTON_GPIO_PIN are defined in setup.hpp
  GPIO_UserButton = new QAD_GPIO_Input(QAD_USERBUTTON_GPIO_PORT, QAD_USERBUTTON_GPIO_PIN);
 8001076:	2010      	movs	r0, #16
 8001078:	f007 faa8 	bl	80085cc <_Znwj>
 800107c:	4603      	mov	r3, r0
 800107e:	461c      	mov	r4, r3
 8001080:	2201      	movs	r2, #1
 8001082:	49b1      	ldr	r1, [pc, #708]	; (8001348 <main+0x320>)
 8001084:	4620      	mov	r0, r4
 8001086:	f004 fdcd 	bl	8005c24 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>
 800108a:	4bb0      	ldr	r3, [pc, #704]	; (800134c <main+0x324>)
 800108c:	601c      	str	r4, [r3, #0]
  //Initialize UART1, which is used to communicate over serial via the STLINK connection
  //Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

  //Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART1;
 800108e:	2300      	movs	r3, #0
 8001090:	703b      	strb	r3, [r7, #0]
  sSerialInit.sUART_Init.baudrate    = QAD_UART1_BAUDRATE;
 8001092:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001096:	607b      	str	r3, [r7, #4]
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART1;
 8001098:	2309      	movs	r3, #9
 800109a:	723b      	strb	r3, [r7, #8]
  sSerialInit.sUART_Init.txgpio      = QAD_UART1_TX_PORT;
 800109c:	4baa      	ldr	r3, [pc, #680]	; (8001348 <main+0x320>)
 800109e:	60fb      	str	r3, [r7, #12]
  sSerialInit.sUART_Init.txpin       = QAD_UART1_TX_PIN;
 80010a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a4:	823b      	strh	r3, [r7, #16]
  sSerialInit.sUART_Init.txaf        = QAD_UART1_TX_AF;
 80010a6:	2307      	movs	r3, #7
 80010a8:	74bb      	strb	r3, [r7, #18]
  sSerialInit.sUART_Init.rxgpio      = QAD_UART1_RX_PORT;
 80010aa:	4ba7      	ldr	r3, [pc, #668]	; (8001348 <main+0x320>)
 80010ac:	617b      	str	r3, [r7, #20]
  sSerialInit.sUART_Init.rxpin       = QAD_UART1_RX_PIN;
 80010ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b2:	833b      	strh	r3, [r7, #24]
  sSerialInit.sUART_Init.rxaf        = QAD_UART1_RX_AF;
 80010b4:	2307      	movs	r3, #7
 80010b6:	76bb      	strb	r3, [r7, #26]
  sSerialInit.uTXFIFO_Size           = QAD_UART1_TX_FIFOSIZE;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	83bb      	strh	r3, [r7, #28]
  sSerialInit.uRXFIFO_Size           = QAD_UART1_RX_FIFOSIZE;
 80010be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c2:	83fb      	strh	r3, [r7, #30]

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 80010c4:	2018      	movs	r0, #24
 80010c6:	f007 fa81 	bl	80085cc <_Znwj>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461c      	mov	r4, r3
 80010ce:	463b      	mov	r3, r7
 80010d0:	4619      	mov	r1, r3
 80010d2:	4620      	mov	r0, r4
 80010d4:	f7ff fdea 	bl	8000cac <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 80010d8:	4b9d      	ldr	r3, [pc, #628]	; (8001350 <main+0x328>)
 80010da:	601c      	str	r4, [r3, #0]

  //If initialization failed the turn on User LED and enter infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 80010dc:	4b9c      	ldr	r3, [pc, #624]	; (8001350 <main+0x328>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f006 ff85 	bl	8007ff2 <_ZN19QAS_Serial_Dev_Base4initEPv>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	bf0c      	ite	eq
 80010ee:	2301      	moveq	r3, #1
 80010f0:	2300      	movne	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <main+0xdc>
  	GPIO_UserLED_Red->on();
 80010f8:	4b91      	ldr	r3, [pc, #580]	; (8001340 <main+0x318>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 fd2c 	bl	8005b5a <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8001102:	e7fe      	b.n	8001102 <main+0xda>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8001104:	4b92      	ldr	r3, [pc, #584]	; (8001350 <main+0x328>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f006 ffd6 	bl	80080ba <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F769I Discovery Booting...");
 800110e:	4b90      	ldr	r3, [pc, #576]	; (8001350 <main+0x328>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4990      	ldr	r1, [pc, #576]	; (8001354 <main+0x32c>)
 8001114:	4618      	mov	r0, r3
 8001116:	f006 ff9c 	bl	8008052 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>



	//----------------------------------
  //Initialize FMC / SDRAM driver using the QAD_FMC singleton driver class
  if (QAD_FMC::init() == QA_OK) {
 800111a:	f7ff fd1f 	bl	8000b5c <_ZN7QAD_FMC4initEv>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	bf0c      	ite	eq
 8001124:	2301      	moveq	r3, #1
 8001126:	2300      	movne	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d02c      	beq.n	8001188 <main+0x160>

  	//If initialization passed then output message via serial
    UART_STLink->txStringCR("SDRAM: Initialized");
 800112e:	4b88      	ldr	r3, [pc, #544]	; (8001350 <main+0x328>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4989      	ldr	r1, [pc, #548]	; (8001358 <main+0x330>)
 8001134:	4618      	mov	r0, r3
 8001136:	f006 ff8c 	bl	8008052 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

    //Test SDRAM to confirm correct operation
  	if (QAD_FMC::test() == QA_OK) {
 800113a:	f7ff fd1a 	bl	8000b72 <_ZN7QAD_FMC4testEv>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf0c      	ite	eq
 8001144:	2301      	moveq	r3, #1
 8001146:	2300      	movne	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d010      	beq.n	8001170 <main+0x148>

  		//If SDRAM test passed then output message via serial
  		UART_STLink->txStringCR("SDRAM: Test Passed");
 800114e:	4b80      	ldr	r3, [pc, #512]	; (8001350 <main+0x328>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4982      	ldr	r1, [pc, #520]	; (800135c <main+0x334>)
 8001154:	4618      	mov	r0, r3
 8001156:	f006 ff7c 	bl	8008052 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


	//----------------------------------
  //Initialize LCD using QAS_LCD singleton class.
  //This will also initialize LTDC and DSI peripherals, and also initialize otm8009a display controller
  if (QAS_LCD::init()) {
 800115a:	f7ff febb 	bl	8000ed4 <_ZN7QAS_LCD4initEv>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	bf14      	ite	ne
 8001164:	2301      	movne	r3, #1
 8001166:	2300      	moveq	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d01e      	beq.n	80011ac <main+0x184>
 800116e:	e017      	b.n	80011a0 <main+0x178>
  		UART_STLink->txStringCR("SDRAM: Test Failed");
 8001170:	4b77      	ldr	r3, [pc, #476]	; (8001350 <main+0x328>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	497a      	ldr	r1, [pc, #488]	; (8001360 <main+0x338>)
 8001176:	4618      	mov	r0, r3
 8001178:	f006 ff6b 	bl	8008052 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  		GPIO_UserLED_Red->on();
 800117c:	4b70      	ldr	r3, [pc, #448]	; (8001340 <main+0x318>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f004 fcea 	bl	8005b5a <_ZN15QAD_GPIO_Output2onEv>
  		while(1) {}
 8001186:	e7fe      	b.n	8001186 <main+0x15e>
    UART_STLink->txStringCR("SDRAM: Initialization failed");
 8001188:	4b71      	ldr	r3, [pc, #452]	; (8001350 <main+0x328>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4975      	ldr	r1, [pc, #468]	; (8001364 <main+0x33c>)
 800118e:	4618      	mov	r0, r3
 8001190:	f006 ff5f 	bl	8008052 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
    GPIO_UserLED_Red->on();
 8001194:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <main+0x318>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f004 fcde 	bl	8005b5a <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 800119e:	e7fe      	b.n	800119e <main+0x176>
  	UART_STLink->txStringCR("LCD: Initialization failed");
 80011a0:	4b6b      	ldr	r3, [pc, #428]	; (8001350 <main+0x328>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4970      	ldr	r1, [pc, #448]	; (8001368 <main+0x340>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f006 ff53 	bl	8008052 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  }
  UART_STLink->txStringCR("LCD: Initialized");
 80011ac:	4b68      	ldr	r3, [pc, #416]	; (8001350 <main+0x328>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	496e      	ldr	r1, [pc, #440]	; (800136c <main+0x344>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f006 ff4d 	bl	8008052 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //Test rendering methods to confirm LCD and rendering subsystem are working correctly

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer0);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff feaa 	bl	8000f12 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0xFFFF);
 80011be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011c2:	f7ff feb7 	bl	8000f34 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 80011c6:	f7ff fec6 	bl	8000f56 <_ZN7QAS_LCD11clearBufferEv>

  //Shapes
  QAS_LCD::setDrawColor(0xF003);
 80011ca:	f24f 0003 	movw	r0, #61443	; 0xf003
 80011ce:	f7ff feb1 	bl	8000f34 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRectFill(QAT_Vector2_16(40, 40), QAT_Vector2_16(760, 440));
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	2228      	movs	r2, #40	; 0x28
 80011d8:	2128      	movs	r1, #40	; 0x28
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd88 	bl	8000cf0 <_ZN14QAT_Vector2_16C1Ett>
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80011e8:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fd7f 	bl	8000cf0 <_ZN14QAT_Vector2_16C1Ett>
 80011f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fec5 	bl	8000f8c <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawColor(0xFFFF);
 8001202:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001206:	f7ff fe95 	bl	8000f34 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRect(QAT_Vector2_16(50, 50), QAT_Vector2_16(750, 430));
 800120a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120e:	2232      	movs	r2, #50	; 0x32
 8001210:	2132      	movs	r1, #50	; 0x32
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fd6c 	bl	8000cf0 <_ZN14QAT_Vector2_16C1Ett>
 8001218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121c:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8001220:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fd63 	bl	8000cf0 <_ZN14QAT_Vector2_16C1Ett>
 800122a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800122e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe98 	bl	8000f6a <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer1);
 800123a:	2001      	movs	r0, #1
 800123c:	f7ff fe69 	bl	8000f12 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0x0000);
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff fe77 	bl	8000f34 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 8001246:	f7ff fe86 	bl	8000f56 <_ZN7QAS_LCD11clearBufferEv>

  QAS_LCD::setDrawColor(0xFBFB);
 800124a:	f64f 30fb 	movw	r0, #64507	; 0xfbfb
 800124e:	f7ff fe71 	bl	8000f34 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::setFontByName("SegoeUI12pt");
 8001252:	4847      	ldr	r0, [pc, #284]	; (8001370 <main+0x348>)
 8001254:	f7ff feab 	bl	8000fae <_ZN7QAS_LCD13setFontByNameEPKc>
  //QAS_LCD::setFontByIndex(0);
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 150), "Hello World!");
 8001258:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800125c:	2296      	movs	r2, #150	; 0x96
 800125e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fd44 	bl	8000cf0 <_ZN14QAT_Vector2_16C1Ett>
 8001268:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800126c:	4941      	ldr	r1, [pc, #260]	; (8001374 <main+0x34c>)
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff febf 	bl	8000ff2 <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::setDrawColor(0xFBBF);
 8001274:	f64f 30bf 	movw	r0, #64447	; 0xfbbf
 8001278:	f7ff fe5c 	bl	8000f34 <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("SegoeUI20ptSB");
  QAS_LCD::setFontByIndex(1);
 800127c:	2001      	movs	r0, #1
 800127e:	f7ff fea6 	bl	8000fce <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 250), "Welcome to 1s and 0s");
 8001282:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001286:	22fa      	movs	r2, #250	; 0xfa
 8001288:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fd2f 	bl	8000cf0 <_ZN14QAT_Vector2_16C1Ett>
 8001292:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001296:	4938      	ldr	r1, [pc, #224]	; (8001378 <main+0x350>)
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff feaa 	bl	8000ff2 <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::setDrawColor(0xFFBB);
 800129e:	f64f 70bb 	movw	r0, #65467	; 0xffbb
 80012a2:	f7ff fe47 	bl	8000f34 <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("ShowcardGothic18pt");
  QAS_LCD::setFontByIndex(2);
 80012a6:	2002      	movs	r0, #2
 80012a8:	f7ff fe91 	bl	8000fce <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 350), "Test Font");
 80012ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012b0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80012b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fd19 	bl	8000cf0 <_ZN14QAT_Vector2_16C1Ett>
 80012be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012c2:	492e      	ldr	r1, [pc, #184]	; (800137c <main+0x354>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe94 	bl	8000ff2 <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::flipLayer0();
 80012ca:	f7ff fe0e 	bl	8000eea <_ZN7QAS_LCD10flipLayer0Ev>
  QAS_LCD::flipLayer1();
 80012ce:	f7ff fe16 	bl	8000efe <_ZN7QAS_LCD10flipLayer1Ev>
  //Processing Loop

  //Create processing loop timing variables
  uint32_t uTicks;
  uint32_t uCurTick;
  uint32_t uNewTick = HAL_GetTick();
 80012d2:	f000 fee1 	bl	8002098 <HAL_GetTick>
 80012d6:	64b8      	str	r0, [r7, #72]	; 0x48
  uint32_t uOldTick = uNewTick;
 80012d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012da:	643b      	str	r3, [r7, #64]	; 0x40

  //Create task timing variables
  uint32_t uHeartbeatTicks = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	647b      	str	r3, [r7, #68]	; 0x44

  	//----------------------------------
  	//Frame Timing
  	//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
  	//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 80012e0:	f000 feda 	bl	8002098 <HAL_GetTick>
 80012e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 80012e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d012      	beq.n	8001314 <main+0x2ec>
    	uOldTick = uNewTick;
 80012ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012f0:	643b      	str	r3, [r7, #64]	; 0x40
    	uNewTick = uCurTick;
 80012f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f4:	64bb      	str	r3, [r7, #72]	; 0x48
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 80012f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d205      	bcs.n	800130a <main+0x2e2>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 80012fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	3b01      	subs	r3, #1
 8001306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001308:	e006      	b.n	8001318 <main+0x2f0>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 800130a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800130c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001312:	e001      	b.n	8001318 <main+0x2f0>
    	}

    } else {
    	uTicks = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the green User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //has become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8001318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800131a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800131c:	4413      	add	r3, r2
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) {
 8001320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001322:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001326:	d3db      	bcc.n	80012e0 <main+0x2b8>
    	GPIO_UserLED_Green->toggle();
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <main+0x31c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fc3a 	bl	8005ba6 <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;
 8001332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001334:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001338:	647b      	str	r3, [r7, #68]	; 0x44
    uCurTick = HAL_GetTick();
 800133a:	e7d1      	b.n	80012e0 <main+0x2b8>
 800133c:	40022400 	.word	0x40022400
 8001340:	2000012c 	.word	0x2000012c
 8001344:	20000130 	.word	0x20000130
 8001348:	40020000 	.word	0x40020000
 800134c:	20000134 	.word	0x20000134
 8001350:	20000138 	.word	0x20000138
 8001354:	08008a30 	.word	0x08008a30
 8001358:	08008a50 	.word	0x08008a50
 800135c:	08008a64 	.word	0x08008a64
 8001360:	08008a78 	.word	0x08008a78
 8001364:	08008a8c 	.word	0x08008a8c
 8001368:	08008aac 	.word	0x08008aac
 800136c:	08008ac8 	.word	0x08008ac8
 8001370:	08008adc 	.word	0x08008adc
 8001374:	08008ae8 	.word	0x08008ae8
 8001378:	08008af8 	.word	0x08008af8
 800137c:	08008b10 	.word	0x08008b10

08001380 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 800138a:	683c      	ldr	r4, [r7, #0]
 800138c:	4620      	mov	r0, r4
 800138e:	f007 f92e 	bl	80085ee <_Znaj>
 8001392:	4603      	mov	r3, r0
 8001394:	4618      	mov	r0, r3
 8001396:	4602      	mov	r2, r0
 8001398:	1e63      	subs	r3, r4, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	db04      	blt.n	80013a8 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 800139e:	2100      	movs	r1, #0
 80013a0:	7011      	strb	r1, [r2, #0]
 80013a2:	3201      	adds	r2, #1
 80013a4:	3b01      	subs	r3, #1
 80013a6:	e7f8      	b.n	800139a <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 80013a8:	4601      	mov	r1, r0
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f8b7 	bl	800151e <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd90      	pop	{r4, r7, pc}

080013b8 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80013c2:	6838      	ldr	r0, [r7, #0]
 80013c4:	f000 f8c7 	bl	8001556 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80013c8:	4603      	mov	r3, r0
 80013ca:	881c      	ldrh	r4, [r3, #0]
 80013cc:	200c      	movs	r0, #12
 80013ce:	f007 f8fd 	bl	80085cc <_Znwj>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461d      	mov	r5, r3
 80013d6:	4621      	mov	r1, r4
 80013d8:	4628      	mov	r0, r5
 80013da:	f7ff fbd5 	bl	8000b88 <_ZN14QAT_FIFOBufferC1Et>
 80013de:	4629      	mov	r1, r5
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f8c3 	bl	800156c <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bdb0      	pop	{r4, r5, r7, pc}

080013ee <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80013ee:	b5b0      	push	{r4, r5, r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80013f8:	6838      	ldr	r0, [r7, #0]
 80013fa:	f000 f8d3 	bl	80015a4 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 80013fe:	4605      	mov	r5, r0
 8001400:	20a4      	movs	r0, #164	; 0xa4
 8001402:	f007 f8e3 	bl	80085cc <_Znwj>
 8001406:	4603      	mov	r3, r0
 8001408:	461c      	mov	r4, r3
 800140a:	4629      	mov	r1, r5
 800140c:	4620      	mov	r0, r4
 800140e:	f7ff fc09 	bl	8000c24 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 8001412:	4621      	mov	r1, r4
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f8d0 	bl	80015ba <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bdb0      	pop	{r4, r5, r7, pc}

08001422 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f8e1 	bl	80015f2 <_ZNSaIP12QAS_LCD_FontEC1Ev>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f8e9 	bl	800160a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_ZNSaIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f8f1 	bl	8001632 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8001472:	461a      	mov	r2, r3
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f8e7 	bl	8001648 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      }
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fc5c 	bl	8000d3a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800148c:	b5b0      	push	{r4, r5, r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681c      	ldr	r4, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f8e5 	bl	800166e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 80014a4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80014a6:	461a      	mov	r2, r3
 80014a8:	4629      	mov	r1, r5
 80014aa:	4620      	mov	r0, r4
 80014ac:	f000 f8ea 	bl	8001684 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ffd1 	bl	800145a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bdb0      	pop	{r4, r5, r7, pc}

080014c2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4619      	mov	r1, r3
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f8e5 	bl	80016a0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	109b      	asrs	r3, r3, #2
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
      }
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6839      	ldr	r1, [r7, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f8d8 	bl	80016e2 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f8df 	bl	800170a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800154c:	4603      	mov	r3, r0
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6839      	ldr	r1, [r7, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f8d2 	bl	8001724 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f8d9 	bl	800174c <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800159a:	4603      	mov	r3, r0
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6839      	ldr	r1, [r7, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f8cc 	bl	8001766 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f8d3 	bl	800178e <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_ZNSaIP12QAS_LCD_FontEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f8d4 	bl	80017a8 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
	{ }
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
	if (__p)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	4618      	mov	r0, r3
 8001662:	f000 f8ac 	bl	80017be <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>
      }
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 f8a2 	bl	80017dc <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>
    }
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	109b      	asrs	r3, r3, #2
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00e      	beq.n	80016da <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ffd3 	bl	800166e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 80016c8:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80016ca:	461a      	mov	r2, r3
 80016cc:	4621      	mov	r1, r4
 80016ce:	6838      	ldr	r0, [r7, #0]
 80016d0:	f7ff ffd8 	bl	8001684 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}

080016e2 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f881 	bl	80017f6 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff21 	bl	800153c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80016fa:	4602      	mov	r2, r0
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 f87b 	bl	8001810 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800171a:	4603      	mov	r3, r0
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f879 	bl	8001828 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ff27 	bl	800158a <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 800173c:	4602      	mov	r2, r0
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f873 	bl	8001842 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800175c:	4603      	mov	r3, r0
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f871 	bl	800185a <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff2d 	bl	80015d8 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 800177e:	4602      	mov	r2, r0
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	f000 f86b 	bl	8001874 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800179e:	4603      	mov	r3, r0
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f85c 	bl	800188c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80017e6:	6839      	ldr	r1, [r7, #0]
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f85c 	bl	80018a6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>
    }
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	f000 f85b 	bl	80018bc <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f85f 	bl	80018dc <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 800181e:	4603      	mov	r3, r0
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f85f 	bl	80018f6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f863 	bl	8001916 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 8001850:	4603      	mov	r3, r0
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	f000 f863 	bl	8001930 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f867 	bl	8001950 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 8001882:	4603      	mov	r3, r0
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8001898:	68b8      	ldr	r0, [r7, #8]
 800189a:	f006 fe84 	bl	80085a6 <_ZdlPv>
      }
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f850 	bl	800196a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f858 	bl	8001982 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f859 	bl	800199e <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f858 	bl	80019b4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f860 	bl	80019cc <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f861 	bl	80019e8 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 8001926:	4603      	mov	r3, r0
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f860 	bl	80019fe <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f868 	bl	8001a16 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f869 	bl	8001a32 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 8001960:	4603      	mov	r3, r0
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f868 	bl	8001a48 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f84e 	bl	8001a5e <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f834 	bl	8001a74 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
	return 1;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_kill>:

int _kill(int pid, int sig)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001aa4:	f006 fdd6 	bl	8008654 <__errno>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2216      	movs	r2, #22
 8001aac:	601a      	str	r2, [r3, #0]
	return -1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_exit>:

void _exit (int status)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffe7 	bl	8001a9a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001acc:	e7fe      	b.n	8001acc <_exit+0x12>
	...

08001ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <_sbrk+0x5c>)
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <_sbrk+0x60>)
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <_sbrk+0x64>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <_sbrk+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d207      	bcs.n	8001b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b00:	f006 fda8 	bl	8008654 <__errno>
 8001b04:	4603      	mov	r3, r0
 8001b06:	220c      	movs	r2, #12
 8001b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	e009      	b.n	8001b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <_sbrk+0x64>)
 8001b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20080000 	.word	0x20080000
 8001b30:	00000400 	.word	0x00000400
 8001b34:	2000013c 	.word	0x2000013c
 8001b38:	200003a8 	.word	0x200003a8

08001b3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <SystemInit+0x20>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <SystemInit+0x20>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001b6a:	49c1      	ldr	r1, [pc, #772]	; (8001e70 <OTM8009A_Init+0x310>)
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f004 fce1 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001b72:	49c0      	ldr	r1, [pc, #768]	; (8001e74 <OTM8009A_Init+0x314>)
 8001b74:	2003      	movs	r0, #3
 8001b76:	f004 fcdd 	bl	8006534 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001b7a:	49bf      	ldr	r1, [pc, #764]	; (8001e78 <OTM8009A_Init+0x318>)
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f004 fcd9 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001b82:	49be      	ldr	r1, [pc, #760]	; (8001e7c <OTM8009A_Init+0x31c>)
 8001b84:	2002      	movs	r0, #2
 8001b86:	f004 fcd5 	bl	8006534 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001b8a:	49bb      	ldr	r1, [pc, #748]	; (8001e78 <OTM8009A_Init+0x318>)
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f004 fcd1 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001b92:	49bb      	ldr	r1, [pc, #748]	; (8001e80 <OTM8009A_Init+0x320>)
 8001b94:	2000      	movs	r0, #0
 8001b96:	f004 fccd 	bl	8006534 <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f000 fa88 	bl	80020b0 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001ba0:	49b8      	ldr	r1, [pc, #736]	; (8001e84 <OTM8009A_Init+0x324>)
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f004 fcc6 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001ba8:	49b7      	ldr	r1, [pc, #732]	; (8001e88 <OTM8009A_Init+0x328>)
 8001baa:	2000      	movs	r0, #0
 8001bac:	f004 fcc2 	bl	8006534 <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8001bb0:	200a      	movs	r0, #10
 8001bb2:	f000 fa7d 	bl	80020b0 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8001bb6:	49b5      	ldr	r1, [pc, #724]	; (8001e8c <OTM8009A_Init+0x32c>)
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f004 fcbb 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001bbe:	49b4      	ldr	r1, [pc, #720]	; (8001e90 <OTM8009A_Init+0x330>)
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f004 fcb7 	bl	8006534 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8001bc6:	49b3      	ldr	r1, [pc, #716]	; (8001e94 <OTM8009A_Init+0x334>)
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f004 fcb3 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001bce:	49b2      	ldr	r1, [pc, #712]	; (8001e98 <OTM8009A_Init+0x338>)
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f004 fcaf 	bl	8006534 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8001bd6:	49b1      	ldr	r1, [pc, #708]	; (8001e9c <OTM8009A_Init+0x33c>)
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f004 fcab 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001bde:	49b0      	ldr	r1, [pc, #704]	; (8001ea0 <OTM8009A_Init+0x340>)
 8001be0:	2000      	movs	r0, #0
 8001be2:	f004 fca7 	bl	8006534 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001be6:	49a2      	ldr	r1, [pc, #648]	; (8001e70 <OTM8009A_Init+0x310>)
 8001be8:	2000      	movs	r0, #0
 8001bea:	f004 fca3 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8001bee:	49ad      	ldr	r1, [pc, #692]	; (8001ea4 <OTM8009A_Init+0x344>)
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f004 fc9f 	bl	8006534 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001bf6:	49ac      	ldr	r1, [pc, #688]	; (8001ea8 <OTM8009A_Init+0x348>)
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f004 fc9b 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8001bfe:	49ab      	ldr	r1, [pc, #684]	; (8001eac <OTM8009A_Init+0x34c>)
 8001c00:	2000      	movs	r0, #0
 8001c02:	f004 fc97 	bl	8006534 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001c06:	49aa      	ldr	r1, [pc, #680]	; (8001eb0 <OTM8009A_Init+0x350>)
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f004 fc93 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8001c0e:	49a9      	ldr	r1, [pc, #676]	; (8001eb4 <OTM8009A_Init+0x354>)
 8001c10:	2000      	movs	r0, #0
 8001c12:	f004 fc8f 	bl	8006534 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001c16:	49a8      	ldr	r1, [pc, #672]	; (8001eb8 <OTM8009A_Init+0x358>)
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f004 fc8b 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8001c1e:	49a7      	ldr	r1, [pc, #668]	; (8001ebc <OTM8009A_Init+0x35c>)
 8001c20:	2000      	movs	r0, #0
 8001c22:	f004 fc87 	bl	8006534 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001c26:	49a6      	ldr	r1, [pc, #664]	; (8001ec0 <OTM8009A_Init+0x360>)
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f004 fc83 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001c2e:	499a      	ldr	r1, [pc, #616]	; (8001e98 <OTM8009A_Init+0x338>)
 8001c30:	2000      	movs	r0, #0
 8001c32:	f004 fc7f 	bl	8006534 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001c36:	498e      	ldr	r1, [pc, #568]	; (8001e70 <OTM8009A_Init+0x310>)
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f004 fc7b 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8001c3e:	49a1      	ldr	r1, [pc, #644]	; (8001ec4 <OTM8009A_Init+0x364>)
 8001c40:	2002      	movs	r0, #2
 8001c42:	f004 fc77 	bl	8006534 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001c46:	49a0      	ldr	r1, [pc, #640]	; (8001ec8 <OTM8009A_Init+0x368>)
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f004 fc73 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8001c4e:	499f      	ldr	r1, [pc, #636]	; (8001ecc <OTM8009A_Init+0x36c>)
 8001c50:	2000      	movs	r0, #0
 8001c52:	f004 fc6f 	bl	8006534 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001c56:	499e      	ldr	r1, [pc, #632]	; (8001ed0 <OTM8009A_Init+0x370>)
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f004 fc6b 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001c5e:	499d      	ldr	r1, [pc, #628]	; (8001ed4 <OTM8009A_Init+0x374>)
 8001c60:	2000      	movs	r0, #0
 8001c62:	f004 fc67 	bl	8006534 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001c66:	499c      	ldr	r1, [pc, #624]	; (8001ed8 <OTM8009A_Init+0x378>)
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f004 fc63 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001c6e:	499b      	ldr	r1, [pc, #620]	; (8001edc <OTM8009A_Init+0x37c>)
 8001c70:	2000      	movs	r0, #0
 8001c72:	f004 fc5f 	bl	8006534 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001c76:	498c      	ldr	r1, [pc, #560]	; (8001ea8 <OTM8009A_Init+0x348>)
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f004 fc5b 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001c7e:	4998      	ldr	r1, [pc, #608]	; (8001ee0 <OTM8009A_Init+0x380>)
 8001c80:	2000      	movs	r0, #0
 8001c82:	f004 fc57 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001c86:	498a      	ldr	r1, [pc, #552]	; (8001eb0 <OTM8009A_Init+0x350>)
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f004 fc53 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001c8e:	4995      	ldr	r1, [pc, #596]	; (8001ee4 <OTM8009A_Init+0x384>)
 8001c90:	2000      	movs	r0, #0
 8001c92:	f004 fc4f 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8001c96:	4994      	ldr	r1, [pc, #592]	; (8001ee8 <OTM8009A_Init+0x388>)
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f004 fc4b 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001c9e:	4993      	ldr	r1, [pc, #588]	; (8001eec <OTM8009A_Init+0x38c>)
 8001ca0:	2002      	movs	r0, #2
 8001ca2:	f004 fc47 	bl	8006534 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001ca6:	4974      	ldr	r1, [pc, #464]	; (8001e78 <OTM8009A_Init+0x318>)
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f004 fc43 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001cae:	4990      	ldr	r1, [pc, #576]	; (8001ef0 <OTM8009A_Init+0x390>)
 8001cb0:	2006      	movs	r0, #6
 8001cb2:	f004 fc3f 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001cb6:	498f      	ldr	r1, [pc, #572]	; (8001ef4 <OTM8009A_Init+0x394>)
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f004 fc3b 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001cbe:	498e      	ldr	r1, [pc, #568]	; (8001ef8 <OTM8009A_Init+0x398>)
 8001cc0:	200e      	movs	r0, #14
 8001cc2:	f004 fc37 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001cc6:	498d      	ldr	r1, [pc, #564]	; (8001efc <OTM8009A_Init+0x39c>)
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f004 fc33 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001cce:	498c      	ldr	r1, [pc, #560]	; (8001f00 <OTM8009A_Init+0x3a0>)
 8001cd0:	200e      	movs	r0, #14
 8001cd2:	f004 fc2f 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001cd6:	498b      	ldr	r1, [pc, #556]	; (8001f04 <OTM8009A_Init+0x3a4>)
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f004 fc2b 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001cde:	498a      	ldr	r1, [pc, #552]	; (8001f08 <OTM8009A_Init+0x3a8>)
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	f004 fc27 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001ce6:	4989      	ldr	r1, [pc, #548]	; (8001f0c <OTM8009A_Init+0x3ac>)
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f004 fc23 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001cee:	4988      	ldr	r1, [pc, #544]	; (8001f10 <OTM8009A_Init+0x3b0>)
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f004 fc1f 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001cf6:	4960      	ldr	r1, [pc, #384]	; (8001e78 <OTM8009A_Init+0x318>)
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f004 fc1b 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8001cfe:	4985      	ldr	r1, [pc, #532]	; (8001f14 <OTM8009A_Init+0x3b4>)
 8001d00:	200a      	movs	r0, #10
 8001d02:	f004 fc17 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001d06:	4984      	ldr	r1, [pc, #528]	; (8001f18 <OTM8009A_Init+0x3b8>)
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f004 fc13 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8001d0e:	4983      	ldr	r1, [pc, #524]	; (8001f1c <OTM8009A_Init+0x3bc>)
 8001d10:	200f      	movs	r0, #15
 8001d12:	f004 fc0f 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001d16:	4977      	ldr	r1, [pc, #476]	; (8001ef4 <OTM8009A_Init+0x394>)
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f004 fc0b 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8001d1e:	4980      	ldr	r1, [pc, #512]	; (8001f20 <OTM8009A_Init+0x3c0>)
 8001d20:	200f      	movs	r0, #15
 8001d22:	f004 fc07 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001d26:	4975      	ldr	r1, [pc, #468]	; (8001efc <OTM8009A_Init+0x39c>)
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f004 fc03 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8001d2e:	497d      	ldr	r1, [pc, #500]	; (8001f24 <OTM8009A_Init+0x3c4>)
 8001d30:	200a      	movs	r0, #10
 8001d32:	f004 fbff 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001d36:	4973      	ldr	r1, [pc, #460]	; (8001f04 <OTM8009A_Init+0x3a4>)
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f004 fbfb 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8001d3e:	497a      	ldr	r1, [pc, #488]	; (8001f28 <OTM8009A_Init+0x3c8>)
 8001d40:	200f      	movs	r0, #15
 8001d42:	f004 fbf7 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001d46:	4971      	ldr	r1, [pc, #452]	; (8001f0c <OTM8009A_Init+0x3ac>)
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f004 fbf3 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8001d4e:	4977      	ldr	r1, [pc, #476]	; (8001f2c <OTM8009A_Init+0x3cc>)
 8001d50:	200f      	movs	r0, #15
 8001d52:	f004 fbef 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8001d56:	4976      	ldr	r1, [pc, #472]	; (8001f30 <OTM8009A_Init+0x3d0>)
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f004 fbeb 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001d5e:	4975      	ldr	r1, [pc, #468]	; (8001f34 <OTM8009A_Init+0x3d4>)
 8001d60:	200a      	movs	r0, #10
 8001d62:	f004 fbe7 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8001d66:	4974      	ldr	r1, [pc, #464]	; (8001f38 <OTM8009A_Init+0x3d8>)
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f004 fbe3 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001d6e:	4973      	ldr	r1, [pc, #460]	; (8001f3c <OTM8009A_Init+0x3dc>)
 8001d70:	200a      	movs	r0, #10
 8001d72:	f004 fbdf 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001d76:	4940      	ldr	r1, [pc, #256]	; (8001e78 <OTM8009A_Init+0x318>)
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f004 fbdb 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001d7e:	4970      	ldr	r1, [pc, #448]	; (8001f40 <OTM8009A_Init+0x3e0>)
 8001d80:	200a      	movs	r0, #10
 8001d82:	f004 fbd7 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001d86:	4964      	ldr	r1, [pc, #400]	; (8001f18 <OTM8009A_Init+0x3b8>)
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f004 fbd3 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001d8e:	496d      	ldr	r1, [pc, #436]	; (8001f44 <OTM8009A_Init+0x3e4>)
 8001d90:	200f      	movs	r0, #15
 8001d92:	f004 fbcf 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001d96:	4957      	ldr	r1, [pc, #348]	; (8001ef4 <OTM8009A_Init+0x394>)
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f004 fbcb 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001d9e:	496a      	ldr	r1, [pc, #424]	; (8001f48 <OTM8009A_Init+0x3e8>)
 8001da0:	200f      	movs	r0, #15
 8001da2:	f004 fbc7 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001da6:	4955      	ldr	r1, [pc, #340]	; (8001efc <OTM8009A_Init+0x39c>)
 8001da8:	2000      	movs	r0, #0
 8001daa:	f004 fbc3 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001dae:	4967      	ldr	r1, [pc, #412]	; (8001f4c <OTM8009A_Init+0x3ec>)
 8001db0:	200a      	movs	r0, #10
 8001db2:	f004 fbbf 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001db6:	4953      	ldr	r1, [pc, #332]	; (8001f04 <OTM8009A_Init+0x3a4>)
 8001db8:	2000      	movs	r0, #0
 8001dba:	f004 fbbb 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001dbe:	4964      	ldr	r1, [pc, #400]	; (8001f50 <OTM8009A_Init+0x3f0>)
 8001dc0:	200f      	movs	r0, #15
 8001dc2:	f004 fbb7 	bl	8006534 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001dc6:	4951      	ldr	r1, [pc, #324]	; (8001f0c <OTM8009A_Init+0x3ac>)
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f004 fbb3 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8001dce:	4961      	ldr	r1, [pc, #388]	; (8001f54 <OTM8009A_Init+0x3f4>)
 8001dd0:	200f      	movs	r0, #15
 8001dd2:	f004 fbaf 	bl	8006534 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001dd6:	4934      	ldr	r1, [pc, #208]	; (8001ea8 <OTM8009A_Init+0x348>)
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f004 fbab 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8001dde:	495e      	ldr	r1, [pc, #376]	; (8001f58 <OTM8009A_Init+0x3f8>)
 8001de0:	2000      	movs	r0, #0
 8001de2:	f004 fba7 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8001de6:	495d      	ldr	r1, [pc, #372]	; (8001f5c <OTM8009A_Init+0x3fc>)
 8001de8:	2000      	movs	r0, #0
 8001dea:	f004 fba3 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8001dee:	495c      	ldr	r1, [pc, #368]	; (8001f60 <OTM8009A_Init+0x400>)
 8001df0:	2000      	movs	r0, #0
 8001df2:	f004 fb9f 	bl	8006534 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8001df6:	495b      	ldr	r1, [pc, #364]	; (8001f64 <OTM8009A_Init+0x404>)
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f004 fb9b 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8001dfe:	495a      	ldr	r1, [pc, #360]	; (8001f68 <OTM8009A_Init+0x408>)
 8001e00:	2000      	movs	r0, #0
 8001e02:	f004 fb97 	bl	8006534 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001e06:	491a      	ldr	r1, [pc, #104]	; (8001e70 <OTM8009A_Init+0x310>)
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f004 fb93 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8001e0e:	4957      	ldr	r1, [pc, #348]	; (8001f6c <OTM8009A_Init+0x40c>)
 8001e10:	2003      	movs	r0, #3
 8001e12:	f004 fb8f 	bl	8006534 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001e16:	4916      	ldr	r1, [pc, #88]	; (8001e70 <OTM8009A_Init+0x310>)
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f004 fb8b 	bl	8006534 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001e1e:	4914      	ldr	r1, [pc, #80]	; (8001e70 <OTM8009A_Init+0x310>)
 8001e20:	2000      	movs	r0, #0
 8001e22:	f004 fb87 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001e26:	4952      	ldr	r1, [pc, #328]	; (8001f70 <OTM8009A_Init+0x410>)
 8001e28:	2010      	movs	r0, #16
 8001e2a:	f004 fb83 	bl	8006534 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001e2e:	4910      	ldr	r1, [pc, #64]	; (8001e70 <OTM8009A_Init+0x310>)
 8001e30:	2000      	movs	r0, #0
 8001e32:	f004 fb7f 	bl	8006534 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001e36:	494f      	ldr	r1, [pc, #316]	; (8001f74 <OTM8009A_Init+0x414>)
 8001e38:	2010      	movs	r0, #16
 8001e3a:	f004 fb7b 	bl	8006534 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8001e3e:	494e      	ldr	r1, [pc, #312]	; (8001f78 <OTM8009A_Init+0x418>)
 8001e40:	2000      	movs	r0, #0
 8001e42:	f004 fb77 	bl	8006534 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  HAL_Delay(120);
 8001e46:	2078      	movs	r0, #120	; 0x78
 8001e48:	f000 f932 	bl	80020b0 <HAL_Delay>

  switch(ColorCoding)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <OTM8009A_Init+0x304>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	f040 8095 	bne.w	8001f84 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001e5a:	4948      	ldr	r1, [pc, #288]	; (8001f7c <OTM8009A_Init+0x41c>)
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f004 fb69 	bl	8006534 <DSI_IO_WriteCmd>
    break;
 8001e62:	e090      	b.n	8001f86 <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8001e64:	4946      	ldr	r1, [pc, #280]	; (8001f80 <OTM8009A_Init+0x420>)
 8001e66:	2000      	movs	r0, #0
 8001e68:	f004 fb64 	bl	8006534 <DSI_IO_WriteCmd>
    break;
 8001e6c:	e08b      	b.n	8001f86 <OTM8009A_Init+0x426>
 8001e6e:	bf00      	nop
 8001e70:	08008cec 	.word	0x08008cec
 8001e74:	08008ba4 	.word	0x08008ba4
 8001e78:	08008cf0 	.word	0x08008cf0
 8001e7c:	08008ba8 	.word	0x08008ba8
 8001e80:	08008cf4 	.word	0x08008cf4
 8001e84:	08008cf8 	.word	0x08008cf8
 8001e88:	08008cfc 	.word	0x08008cfc
 8001e8c:	08008d00 	.word	0x08008d00
 8001e90:	08008d04 	.word	0x08008d04
 8001e94:	08008d08 	.word	0x08008d08
 8001e98:	08008d0c 	.word	0x08008d0c
 8001e9c:	08008d10 	.word	0x08008d10
 8001ea0:	08008d14 	.word	0x08008d14
 8001ea4:	08008d18 	.word	0x08008d18
 8001ea8:	08008d1c 	.word	0x08008d1c
 8001eac:	08008d20 	.word	0x08008d20
 8001eb0:	08008d24 	.word	0x08008d24
 8001eb4:	08008d28 	.word	0x08008d28
 8001eb8:	08008d2c 	.word	0x08008d2c
 8001ebc:	08008d30 	.word	0x08008d30
 8001ec0:	08008d34 	.word	0x08008d34
 8001ec4:	08008bd4 	.word	0x08008bd4
 8001ec8:	08008d38 	.word	0x08008d38
 8001ecc:	08008d3c 	.word	0x08008d3c
 8001ed0:	08008d40 	.word	0x08008d40
 8001ed4:	08008d44 	.word	0x08008d44
 8001ed8:	08008d48 	.word	0x08008d48
 8001edc:	08008d4c 	.word	0x08008d4c
 8001ee0:	08008d50 	.word	0x08008d50
 8001ee4:	08008d54 	.word	0x08008d54
 8001ee8:	08008d58 	.word	0x08008d58
 8001eec:	08008bd8 	.word	0x08008bd8
 8001ef0:	08008bdc 	.word	0x08008bdc
 8001ef4:	08008d5c 	.word	0x08008d5c
 8001ef8:	08008be4 	.word	0x08008be4
 8001efc:	08008d60 	.word	0x08008d60
 8001f00:	08008bf4 	.word	0x08008bf4
 8001f04:	08008d64 	.word	0x08008d64
 8001f08:	08008c04 	.word	0x08008c04
 8001f0c:	08008d68 	.word	0x08008d68
 8001f10:	08008da0 	.word	0x08008da0
 8001f14:	08008c10 	.word	0x08008c10
 8001f18:	08008d6c 	.word	0x08008d6c
 8001f1c:	08008c1c 	.word	0x08008c1c
 8001f20:	08008c2c 	.word	0x08008c2c
 8001f24:	08008c3c 	.word	0x08008c3c
 8001f28:	08008c48 	.word	0x08008c48
 8001f2c:	08008c58 	.word	0x08008c58
 8001f30:	08008d70 	.word	0x08008d70
 8001f34:	08008c68 	.word	0x08008c68
 8001f38:	08008d74 	.word	0x08008d74
 8001f3c:	08008c74 	.word	0x08008c74
 8001f40:	08008c80 	.word	0x08008c80
 8001f44:	08008c8c 	.word	0x08008c8c
 8001f48:	08008c9c 	.word	0x08008c9c
 8001f4c:	08008cac 	.word	0x08008cac
 8001f50:	08008cb8 	.word	0x08008cb8
 8001f54:	08008cc8 	.word	0x08008cc8
 8001f58:	08008da4 	.word	0x08008da4
 8001f5c:	08008da8 	.word	0x08008da8
 8001f60:	08008dac 	.word	0x08008dac
 8001f64:	08008db0 	.word	0x08008db0
 8001f68:	08008db4 	.word	0x08008db4
 8001f6c:	08008cd8 	.word	0x08008cd8
 8001f70:	08008bac 	.word	0x08008bac
 8001f74:	08008bc0 	.word	0x08008bc0
 8001f78:	08008d78 	.word	0x08008d78
 8001f7c:	08008d7c 	.word	0x08008d7c
 8001f80:	08008d80 	.word	0x08008d80
  default :
    break;
 8001f84:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10b      	bne.n	8001fa4 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001f8c:	4916      	ldr	r1, [pc, #88]	; (8001fe8 <OTM8009A_Init+0x488>)
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f004 fad0 	bl	8006534 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8001f94:	4915      	ldr	r1, [pc, #84]	; (8001fec <OTM8009A_Init+0x48c>)
 8001f96:	2004      	movs	r0, #4
 8001f98:	f004 facc 	bl	8006534 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001f9c:	4914      	ldr	r1, [pc, #80]	; (8001ff0 <OTM8009A_Init+0x490>)
 8001f9e:	2004      	movs	r0, #4
 8001fa0:	f004 fac8 	bl	8006534 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8001fa4:	4913      	ldr	r1, [pc, #76]	; (8001ff4 <OTM8009A_Init+0x494>)
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f004 fac4 	bl	8006534 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8001fac:	4912      	ldr	r1, [pc, #72]	; (8001ff8 <OTM8009A_Init+0x498>)
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f004 fac0 	bl	8006534 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8001fb4:	4911      	ldr	r1, [pc, #68]	; (8001ffc <OTM8009A_Init+0x49c>)
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f004 fabc 	bl	8006534 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8001fbc:	4910      	ldr	r1, [pc, #64]	; (8002000 <OTM8009A_Init+0x4a0>)
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f004 fab8 	bl	8006534 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8001fc4:	490f      	ldr	r1, [pc, #60]	; (8002004 <OTM8009A_Init+0x4a4>)
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f004 fab4 	bl	8006534 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001fcc:	490e      	ldr	r1, [pc, #56]	; (8002008 <OTM8009A_Init+0x4a8>)
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f004 fab0 	bl	8006534 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8001fd4:	490d      	ldr	r1, [pc, #52]	; (800200c <OTM8009A_Init+0x4ac>)
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f004 faac 	bl	8006534 <DSI_IO_WriteCmd>

  return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	08008d84 	.word	0x08008d84
 8001fec:	08008cdc 	.word	0x08008cdc
 8001ff0:	08008ce4 	.word	0x08008ce4
 8001ff4:	08008d88 	.word	0x08008d88
 8001ff8:	08008d8c 	.word	0x08008d8c
 8001ffc:	08008d90 	.word	0x08008d90
 8002000:	08008d94 	.word	0x08008d94
 8002004:	08008d98 	.word	0x08008d98
 8002008:	08008cec 	.word	0x08008cec
 800200c:	08008d9c 	.word	0x08008d9c

08002010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x54>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x58>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002026:	fbb3 f3f1 	udiv	r3, r3, r1
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f999 	bl	8002366 <HAL_SYSTICK_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00e      	b.n	800205c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b0f      	cmp	r3, #15
 8002042:	d80a      	bhi.n	800205a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002044:	2200      	movs	r2, #0
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f000 f953 	bl	80022f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002050:	4a06      	ldr	r2, [pc, #24]	; (800206c <HAL_InitTick+0x5c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000000 	.word	0x20000000
 8002068:	20000008 	.word	0x20000008
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_IncTick+0x20>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_IncTick+0x24>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4413      	add	r3, r2
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <HAL_IncTick+0x24>)
 8002082:	6013      	str	r3, [r2, #0]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000008 	.word	0x20000008
 8002094:	20000390 	.word	0x20000390

08002098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_GetTick+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000390 	.word	0x20000390

080020b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff ffee 	bl	8002098 <HAL_GetTick>
 80020bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d005      	beq.n	80020d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_Delay+0x44>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d6:	bf00      	nop
 80020d8:	f7ff ffde 	bl	8002098 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d8f7      	bhi.n	80020d8 <HAL_Delay+0x28>
  {
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000008 	.word	0x20000008

080020f8 <__NVIC_SetPriorityGrouping>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <__NVIC_SetPriorityGrouping+0x40>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	4313      	orrs	r3, r2
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x40>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00
 800213c:	05fa0000 	.word	0x05fa0000

08002140 <__NVIC_GetPriorityGrouping>:
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_EnableIRQ>:
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db0b      	blt.n	8002186 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	4907      	ldr	r1, [pc, #28]	; (8002194 <__NVIC_EnableIRQ+0x38>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2001      	movs	r0, #1
 800217e:	fa00 f202 	lsl.w	r2, r0, r2
 8002182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000e100 	.word	0xe000e100

08002198 <__NVIC_DisableIRQ>:
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db12      	blt.n	80021d0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	490a      	ldr	r1, [pc, #40]	; (80021dc <__NVIC_DisableIRQ+0x44>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	3320      	adds	r3, #32
 80021c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80021c4:	f3bf 8f4f 	dsb	sy
}
 80021c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021ca:	f3bf 8f6f 	isb	sy
}
 80021ce:	bf00      	nop
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <__NVIC_SetPriority>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db0a      	blt.n	800220a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	490c      	ldr	r1, [pc, #48]	; (800222c <__NVIC_SetPriority+0x4c>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	440b      	add	r3, r1
 8002204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002208:	e00a      	b.n	8002220 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4908      	ldr	r1, [pc, #32]	; (8002230 <__NVIC_SetPriority+0x50>)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3b04      	subs	r3, #4
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	440b      	add	r3, r1
 800221e:	761a      	strb	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <NVIC_EncodePriority>:
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f1c3 0307 	rsb	r3, r3, #7
 800224e:	2b04      	cmp	r3, #4
 8002250:	bf28      	it	cs
 8002252:	2304      	movcs	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3304      	adds	r3, #4
 800225a:	2b06      	cmp	r3, #6
 800225c:	d902      	bls.n	8002264 <NVIC_EncodePriority+0x30>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3b03      	subs	r3, #3
 8002262:	e000      	b.n	8002266 <NVIC_EncodePriority+0x32>
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	401a      	ands	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800227c:	f04f 31ff 	mov.w	r1, #4294967295
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43d9      	mvns	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	4313      	orrs	r3, r2
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ac:	d301      	bcc.n	80022b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00f      	b.n	80022d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <SysTick_Config+0x40>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ba:	210f      	movs	r1, #15
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f7ff ff8e 	bl	80021e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <SysTick_Config+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <SysTick_Config+0x40>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff05 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff1a 	bl	8002140 <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff8e 	bl	8002234 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5d 	bl	80021e0 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff0d 	bl	800215c <__NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff1d 	bl	8002198 <__NVIC_DisableIRQ>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ff94 	bl	800229c <SysTick_Config>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	019a      	lsls	r2, r3, #6
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	431a      	orrs	r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	431a      	orrs	r2, r3
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431a      	orrs	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80023be:	f7ff fe6b 	bl	8002098 <HAL_GetTick>
 80023c2:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80023c4:	e009      	b.n	80023da <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80023c6:	f7ff fe67 	bl	8002098 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d4:	d901      	bls.n	80023da <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e015      	b.n	8002406 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ee      	beq.n	80023c6 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	019a      	lsls	r2, r3, #6
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	ea42 0103 	orr.w	r1, r2, r3
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	041a      	lsls	r2, r3, #16
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e106      	b.n	8002632 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7c5b      	ldrb	r3, [r3, #17]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f97c 	bl	800272c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2203      	movs	r2, #3
 8002438:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800244e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800245a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002462:	f7ff fe19 	bl	8002098 <HAL_GetTick>
 8002466:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002468:	e009      	b.n	800247e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800246a:	f7ff fe15 	bl	8002098 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002478:	d901      	bls.n	800247e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0d9      	b.n	8002632 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0ed      	beq.n	800246a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_DSI_Init+0x22c>)
 800249c:	400b      	ands	r3, r1
 800249e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	009a      	lsls	r2, r3, #2
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	02db      	lsls	r3, r3, #11
 80024b6:	431a      	orrs	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	041b      	lsls	r3, r3, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024f2:	f7ff fdd1 	bl	8002098 <HAL_GetTick>
 80024f6:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80024f8:	e009      	b.n	800250e <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80024fa:	f7ff fdcd 	bl	8002098 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002508:	d901      	bls.n	800250e <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e091      	b.n	8002632 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0ed      	beq.n	80024fa <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0206 	orr.w	r2, r2, #6
 800252e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0203 	bic.w	r2, r2, #3
 8002542:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0201 	orr.w	r2, r2, #1
 800255c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0203 	bic.w	r2, r2, #3
 8002570:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002598:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6899      	ldr	r1, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <HAL_DSI_Init+0x1aa>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	e000      	b.n	80025bc <HAL_DSI_Init+0x1ac>
 80025ba:	2301      	movs	r3, #1
 80025bc:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <HAL_DSI_Init+0x230>)
 80025c2:	fb02 f203 	mul.w	r2, r2, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	409a      	lsls	r2, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80025f2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	430a      	orrs	r2, r1
 8002606:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2200      	movs	r2, #0
 800261a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	fffc8603 	.word	0xfffc8603
 8002640:	003d0900 	.word	0x003d0900

08002644 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e066      	b.n	8002724 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2203      	movs	r2, #3
 800265a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0208 	bic.w	r2, r2, #8
 8002670:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0206 	bic.w	r2, r2, #6
 80026b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80026f6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f818 	bl	8002740 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	7c1b      	ldrb	r3, [r3, #16]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_DSI_ConfigVideoMode+0x16>
 8002766:	2302      	movs	r3, #2
 8002768:	e1ee      	b.n	8002b48 <HAL_DSI_ConfigVideoMode+0x3f4>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0203 	bic.w	r2, r2, #3
 80027a2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b8b      	ldr	r3, [pc, #556]	; (80029f0 <HAL_DSI_ConfigVideoMode+0x29c>)
 80027c2:	400b      	ands	r3, r1
 80027c4:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4b84      	ldr	r3, [pc, #528]	; (80029f4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80027e4:	400b      	ands	r3, r1
 80027e6:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b7b      	ldr	r3, [pc, #492]	; (80029f4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8002806:	400b      	ands	r3, r1
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0203 	bic.w	r2, r2, #3
 800282a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68d9      	ldr	r1, [r3, #12]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0207 	bic.w	r2, r2, #7
 800284c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6959      	ldr	r1, [r3, #20]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	431a      	orrs	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 020f 	bic.w	r2, r2, #15
 800287a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6919      	ldr	r1, [r3, #16]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 020e 	bic.w	r2, r2, #14
 800289e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	005a      	lsls	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d110      	bne.n	80028e4 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d0:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6919      	ldr	r1, [r3, #16]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b42      	ldr	r3, [pc, #264]	; (80029f8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80028f0:	400b      	ands	r3, r1
 80028f2:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b39      	ldr	r3, [pc, #228]	; (80029f8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8002912:	400b      	ands	r3, r1
 8002914:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b32      	ldr	r3, [pc, #200]	; (80029fc <HAL_DSI_ConfigVideoMode+0x2a8>)
 8002934:	400b      	ands	r3, r1
 8002936:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002956:	400b      	ands	r3, r1
 8002958:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002978:	400b      	ands	r3, r1
 800297a:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800299a:	400b      	ands	r3, r1
 800299c:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_DSI_ConfigVideoMode+0x29c>)
 80029bc:	400b      	ands	r3, r1
 80029be:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ec:	e00a      	b.n	8002a04 <HAL_DSI_ConfigVideoMode+0x2b0>
 80029ee:	bf00      	nop
 80029f0:	ffffc000 	.word	0xffffc000
 80029f4:	ffffe000 	.word	0xffffe000
 80029f8:	fffff000 	.word	0xfffff000
 80029fc:	ffff8000 	.word	0xffff8000
 8002a00:	fffffc00 	.word	0xfffffc00
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002a1a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6999      	ldr	r1, [r3, #24]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a26:	041a      	lsls	r2, r3, #16
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a3e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6999      	ldr	r1, [r3, #24]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a60:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a82:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	7c1b      	ldrb	r3, [r3, #16]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_DSI_Start+0x14>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e02b      	b.n	8002bc0 <HAL_DSI_Start+0x6c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0208 	orr.w	r2, r2, #8
 8002ba4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7c1b      	ldrb	r3, [r3, #16]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_DSI_Stop+0x14>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e02b      	b.n	8002c38 <HAL_DSI_Stop+0x6c>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0208 	bic.w	r2, r2, #8
 8002c1c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	7c1b      	ldrb	r3, [r3, #16]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_DSI_ShortWrite+0x1a>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e010      	b.n	8002c80 <HAL_DSI_ShortWrite+0x3c>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f7ff fb9e 	bl	80023b0 <DSI_ShortWrite>
 8002c74:	4603      	mov	r3, r0
 8002c76:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	741a      	strb	r2, [r3, #16]

  return status;
 8002c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08c      	sub	sp, #48	; 0x30
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8002c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c98:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	7c1b      	ldrb	r3, [r3, #16]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_DSI_LongWrite+0x1e>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e084      	b.n	8002db0 <HAL_DSI_LongWrite+0x128>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cac:	f7ff f9f4 	bl	8002098 <HAL_GetTick>
 8002cb0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002cb2:	e00c      	b.n	8002cce <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002cb4:	f7ff f9f0 	bl	8002098 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc2:	d904      	bls.n	8002cce <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e070      	b.n	8002db0 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0eb      	beq.n	8002cb4 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	bf28      	it	cs
 8002ce6:	2303      	movcs	r3, #3
 8002ce8:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
 8002cee:	e00f      	b.n	8002d10 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	623b      	str	r3, [r7, #32]
 8002d10:	6a3a      	ldr	r2, [r7, #32]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d3eb      	bcc.n	8002cf0 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8002d30:	e028      	b.n	8002d84 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	bf28      	it	cs
 8002d38:	2304      	movcs	r3, #4
 8002d3a:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	e00e      	b.n	8002d64 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	3301      	adds	r3, #1
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	6a3a      	ldr	r2, [r7, #32]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d3ec      	bcc.n	8002d46 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8002d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1d3      	bne.n	8002d32 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002d92:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	3301      	adds	r3, #1
 8002d98:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	f7ff faeb 	bl	800237e <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3728      	adds	r7, #40	; 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	e175      	b.n	80030c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002dd8:	2201      	movs	r2, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4013      	ands	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	f040 8164 	bne.w	80030be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d00b      	beq.n	8002e16 <HAL_GPIO_Init+0x5e>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d007      	beq.n	8002e16 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e0a:	2b11      	cmp	r3, #17
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b12      	cmp	r3, #18
 8002e14:	d130      	bne.n	8002e78 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	2203      	movs	r2, #3
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 0201 	and.w	r2, r3, #1
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2203      	movs	r2, #3
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x100>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b12      	cmp	r3, #18
 8002eb6:	d123      	bne.n	8002f00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	08da      	lsrs	r2, r3, #3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3208      	adds	r2, #8
 8002ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	220f      	movs	r2, #15
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	08da      	lsrs	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3208      	adds	r2, #8
 8002efa:	69b9      	ldr	r1, [r7, #24]
 8002efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0203 	and.w	r2, r3, #3
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80be 	beq.w	80030be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f42:	4b66      	ldr	r3, [pc, #408]	; (80030dc <HAL_GPIO_Init+0x324>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	4a65      	ldr	r2, [pc, #404]	; (80030dc <HAL_GPIO_Init+0x324>)
 8002f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4e:	4b63      	ldr	r3, [pc, #396]	; (80030dc <HAL_GPIO_Init+0x324>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f5a:	4a61      	ldr	r2, [pc, #388]	; (80030e0 <HAL_GPIO_Init+0x328>)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	3302      	adds	r3, #2
 8002f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	220f      	movs	r2, #15
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a58      	ldr	r2, [pc, #352]	; (80030e4 <HAL_GPIO_Init+0x32c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d037      	beq.n	8002ff6 <HAL_GPIO_Init+0x23e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a57      	ldr	r2, [pc, #348]	; (80030e8 <HAL_GPIO_Init+0x330>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d031      	beq.n	8002ff2 <HAL_GPIO_Init+0x23a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a56      	ldr	r2, [pc, #344]	; (80030ec <HAL_GPIO_Init+0x334>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d02b      	beq.n	8002fee <HAL_GPIO_Init+0x236>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a55      	ldr	r2, [pc, #340]	; (80030f0 <HAL_GPIO_Init+0x338>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d025      	beq.n	8002fea <HAL_GPIO_Init+0x232>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a54      	ldr	r2, [pc, #336]	; (80030f4 <HAL_GPIO_Init+0x33c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d01f      	beq.n	8002fe6 <HAL_GPIO_Init+0x22e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a53      	ldr	r2, [pc, #332]	; (80030f8 <HAL_GPIO_Init+0x340>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d019      	beq.n	8002fe2 <HAL_GPIO_Init+0x22a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_GPIO_Init+0x344>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_GPIO_Init+0x226>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a51      	ldr	r2, [pc, #324]	; (8003100 <HAL_GPIO_Init+0x348>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00d      	beq.n	8002fda <HAL_GPIO_Init+0x222>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a50      	ldr	r2, [pc, #320]	; (8003104 <HAL_GPIO_Init+0x34c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <HAL_GPIO_Init+0x21e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a4f      	ldr	r2, [pc, #316]	; (8003108 <HAL_GPIO_Init+0x350>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_GPIO_Init+0x21a>
 8002fce:	2309      	movs	r3, #9
 8002fd0:	e012      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fd2:	230a      	movs	r3, #10
 8002fd4:	e010      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	e00e      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fda:	2307      	movs	r3, #7
 8002fdc:	e00c      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fde:	2306      	movs	r3, #6
 8002fe0:	e00a      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fe2:	2305      	movs	r3, #5
 8002fe4:	e008      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fea:	2303      	movs	r3, #3
 8002fec:	e004      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e002      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_GPIO_Init+0x240>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	f002 0203 	and.w	r2, r2, #3
 8002ffe:	0092      	lsls	r2, r2, #2
 8003000:	4093      	lsls	r3, r2
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003008:	4935      	ldr	r1, [pc, #212]	; (80030e0 <HAL_GPIO_Init+0x328>)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3302      	adds	r3, #2
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003016:	4b3d      	ldr	r3, [pc, #244]	; (800310c <HAL_GPIO_Init+0x354>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800303a:	4a34      	ldr	r2, [pc, #208]	; (800310c <HAL_GPIO_Init+0x354>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003040:	4b32      	ldr	r3, [pc, #200]	; (800310c <HAL_GPIO_Init+0x354>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003064:	4a29      	ldr	r2, [pc, #164]	; (800310c <HAL_GPIO_Init+0x354>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800306a:	4b28      	ldr	r3, [pc, #160]	; (800310c <HAL_GPIO_Init+0x354>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308e:	4a1f      	ldr	r2, [pc, #124]	; (800310c <HAL_GPIO_Init+0x354>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003094:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_GPIO_Init+0x354>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b8:	4a14      	ldr	r2, [pc, #80]	; (800310c <HAL_GPIO_Init+0x354>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3301      	adds	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b0f      	cmp	r3, #15
 80030c8:	f67f ae86 	bls.w	8002dd8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40013800 	.word	0x40013800
 80030e4:	40020000 	.word	0x40020000
 80030e8:	40020400 	.word	0x40020400
 80030ec:	40020800 	.word	0x40020800
 80030f0:	40020c00 	.word	0x40020c00
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40021400 	.word	0x40021400
 80030fc:	40021800 	.word	0x40021800
 8003100:	40021c00 	.word	0x40021c00
 8003104:	40022000 	.word	0x40022000
 8003108:	40022400 	.word	0x40022400
 800310c:	40013c00 	.word	0x40013c00

08003110 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	e0d9      	b.n	80032e0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800312c:	2201      	movs	r2, #1
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4013      	ands	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	429a      	cmp	r2, r3
 8003144:	f040 80c9 	bne.w	80032da <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003148:	4a6b      	ldr	r2, [pc, #428]	; (80032f8 <HAL_GPIO_DeInit+0x1e8>)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	089b      	lsrs	r3, r3, #2
 800314e:	3302      	adds	r3, #2
 8003150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003154:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	220f      	movs	r2, #15
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	4013      	ands	r3, r2
 8003168:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a63      	ldr	r2, [pc, #396]	; (80032fc <HAL_GPIO_DeInit+0x1ec>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d037      	beq.n	80031e2 <HAL_GPIO_DeInit+0xd2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a62      	ldr	r2, [pc, #392]	; (8003300 <HAL_GPIO_DeInit+0x1f0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d031      	beq.n	80031de <HAL_GPIO_DeInit+0xce>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a61      	ldr	r2, [pc, #388]	; (8003304 <HAL_GPIO_DeInit+0x1f4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d02b      	beq.n	80031da <HAL_GPIO_DeInit+0xca>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a60      	ldr	r2, [pc, #384]	; (8003308 <HAL_GPIO_DeInit+0x1f8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d025      	beq.n	80031d6 <HAL_GPIO_DeInit+0xc6>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a5f      	ldr	r2, [pc, #380]	; (800330c <HAL_GPIO_DeInit+0x1fc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01f      	beq.n	80031d2 <HAL_GPIO_DeInit+0xc2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a5e      	ldr	r2, [pc, #376]	; (8003310 <HAL_GPIO_DeInit+0x200>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d019      	beq.n	80031ce <HAL_GPIO_DeInit+0xbe>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a5d      	ldr	r2, [pc, #372]	; (8003314 <HAL_GPIO_DeInit+0x204>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <HAL_GPIO_DeInit+0xba>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a5c      	ldr	r2, [pc, #368]	; (8003318 <HAL_GPIO_DeInit+0x208>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00d      	beq.n	80031c6 <HAL_GPIO_DeInit+0xb6>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a5b      	ldr	r2, [pc, #364]	; (800331c <HAL_GPIO_DeInit+0x20c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <HAL_GPIO_DeInit+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a5a      	ldr	r2, [pc, #360]	; (8003320 <HAL_GPIO_DeInit+0x210>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_GPIO_DeInit+0xae>
 80031ba:	2309      	movs	r3, #9
 80031bc:	e012      	b.n	80031e4 <HAL_GPIO_DeInit+0xd4>
 80031be:	230a      	movs	r3, #10
 80031c0:	e010      	b.n	80031e4 <HAL_GPIO_DeInit+0xd4>
 80031c2:	2308      	movs	r3, #8
 80031c4:	e00e      	b.n	80031e4 <HAL_GPIO_DeInit+0xd4>
 80031c6:	2307      	movs	r3, #7
 80031c8:	e00c      	b.n	80031e4 <HAL_GPIO_DeInit+0xd4>
 80031ca:	2306      	movs	r3, #6
 80031cc:	e00a      	b.n	80031e4 <HAL_GPIO_DeInit+0xd4>
 80031ce:	2305      	movs	r3, #5
 80031d0:	e008      	b.n	80031e4 <HAL_GPIO_DeInit+0xd4>
 80031d2:	2304      	movs	r3, #4
 80031d4:	e006      	b.n	80031e4 <HAL_GPIO_DeInit+0xd4>
 80031d6:	2303      	movs	r3, #3
 80031d8:	e004      	b.n	80031e4 <HAL_GPIO_DeInit+0xd4>
 80031da:	2302      	movs	r3, #2
 80031dc:	e002      	b.n	80031e4 <HAL_GPIO_DeInit+0xd4>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_GPIO_DeInit+0xd4>
 80031e2:	2300      	movs	r3, #0
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	f002 0203 	and.w	r2, r2, #3
 80031ea:	0092      	lsls	r2, r2, #2
 80031ec:	4093      	lsls	r3, r2
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d132      	bne.n	800325a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80031f4:	4b4b      	ldr	r3, [pc, #300]	; (8003324 <HAL_GPIO_DeInit+0x214>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	4949      	ldr	r1, [pc, #292]	; (8003324 <HAL_GPIO_DeInit+0x214>)
 80031fe:	4013      	ands	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003202:	4b48      	ldr	r3, [pc, #288]	; (8003324 <HAL_GPIO_DeInit+0x214>)
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	43db      	mvns	r3, r3
 800320a:	4946      	ldr	r1, [pc, #280]	; (8003324 <HAL_GPIO_DeInit+0x214>)
 800320c:	4013      	ands	r3, r2
 800320e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003210:	4b44      	ldr	r3, [pc, #272]	; (8003324 <HAL_GPIO_DeInit+0x214>)
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	43db      	mvns	r3, r3
 8003218:	4942      	ldr	r1, [pc, #264]	; (8003324 <HAL_GPIO_DeInit+0x214>)
 800321a:	4013      	ands	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800321e:	4b41      	ldr	r3, [pc, #260]	; (8003324 <HAL_GPIO_DeInit+0x214>)
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	43db      	mvns	r3, r3
 8003226:	493f      	ldr	r1, [pc, #252]	; (8003324 <HAL_GPIO_DeInit+0x214>)
 8003228:	4013      	ands	r3, r2
 800322a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	220f      	movs	r2, #15
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800323c:	4a2e      	ldr	r2, [pc, #184]	; (80032f8 <HAL_GPIO_DeInit+0x1e8>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3302      	adds	r3, #2
 8003244:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	43da      	mvns	r2, r3
 800324c:	482a      	ldr	r0, [pc, #168]	; (80032f8 <HAL_GPIO_DeInit+0x1e8>)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	400a      	ands	r2, r1
 8003254:	3302      	adds	r3, #2
 8003256:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2103      	movs	r1, #3
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	401a      	ands	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	08da      	lsrs	r2, r3, #3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3208      	adds	r2, #8
 8003278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	08d2      	lsrs	r2, r2, #3
 8003290:	4019      	ands	r1, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3208      	adds	r2, #8
 8003296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2103      	movs	r1, #3
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	401a      	ands	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	2101      	movs	r1, #1
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	401a      	ands	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	2103      	movs	r1, #3
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	401a      	ands	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3301      	adds	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b0f      	cmp	r3, #15
 80032e4:	f67f af22 	bls.w	800312c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40013800 	.word	0x40013800
 80032fc:	40020000 	.word	0x40020000
 8003300:	40020400 	.word	0x40020400
 8003304:	40020800 	.word	0x40020800
 8003308:	40020c00 	.word	0x40020c00
 800330c:	40021000 	.word	0x40021000
 8003310:	40021400 	.word	0x40021400
 8003314:	40021800 	.word	0x40021800
 8003318:	40021c00 	.word	0x40021c00
 800331c:	40022000 	.word	0x40022000
 8003320:	40022400 	.word	0x40022400
 8003324:	40013c00 	.word	0x40013c00

08003328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	807b      	strh	r3, [r7, #2]
 8003334:	4613      	mov	r3, r2
 8003336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003338:	787b      	ldrb	r3, [r7, #1]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003344:	e003      	b.n	800334e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003346:	887b      	ldrh	r3, [r7, #2]
 8003348:	041a      	lsls	r2, r3, #16
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	619a      	str	r2, [r3, #24]
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0bf      	b.n	80034ee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f8d2 	bl	800352c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800339e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6999      	ldr	r1, [r3, #24]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b4a      	ldr	r3, [pc, #296]	; (80034f8 <HAL_LTDC_Init+0x19c>)
 80033d0:	400b      	ands	r3, r1
 80033d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6899      	ldr	r1, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68d9      	ldr	r1, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b3e      	ldr	r3, [pc, #248]	; (80034f8 <HAL_LTDC_Init+0x19c>)
 80033fe:	400b      	ands	r3, r1
 8003400:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	041b      	lsls	r3, r3, #16
 8003408:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68d9      	ldr	r1, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1a      	ldr	r2, [r3, #32]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6919      	ldr	r1, [r3, #16]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b33      	ldr	r3, [pc, #204]	; (80034f8 <HAL_LTDC_Init+0x19c>)
 800342c:	400b      	ands	r3, r1
 800342e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6919      	ldr	r1, [r3, #16]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6959      	ldr	r1, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_LTDC_Init+0x19c>)
 800345a:	400b      	ands	r3, r1
 800345c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6959      	ldr	r1, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800348c:	041b      	lsls	r3, r3, #16
 800348e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0206 	orr.w	r2, r2, #6
 80034ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	f000f800 	.word	0xf000f800

080034fc <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f81b 	bl	8003540 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003554:	b5b0      	push	{r4, r5, r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_LTDC_ConfigLayer+0x1a>
 800356a:	2302      	movs	r3, #2
 800356c:	e02c      	b.n	80035c8 <HAL_LTDC_ConfigLayer+0x74>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2202      	movs	r2, #2
 800357a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2134      	movs	r1, #52	; 0x34
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4614      	mov	r4, r2
 8003592:	461d      	mov	r5, r3
 8003594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800359a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800359c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800359e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a0:	682b      	ldr	r3, [r5, #0]
 80035a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f847 	bl	800363c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2201      	movs	r2, #1
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bdb0      	pop	{r4, r5, r7, pc}

080035d0 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_LTDC_SetAddress+0x1a>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e024      	b.n	8003634 <HAL_LTDC_SetAddress+0x64>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2202      	movs	r2, #2
 80035f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2234      	movs	r2, #52	; 0x34
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	3338      	adds	r3, #56	; 0x38
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6979      	ldr	r1, [r7, #20]
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f811 	bl	800363c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2201      	movs	r2, #1
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	0c1b      	lsrs	r3, r3, #16
 8003654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003658:	4413      	add	r3, r2
 800365a:	041b      	lsls	r3, r3, #16
 800365c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	01db      	lsls	r3, r3, #7
 8003668:	4413      	add	r3, r2
 800366a:	3384      	adds	r3, #132	; 0x84
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	4611      	mov	r1, r2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	01d2      	lsls	r2, r2, #7
 8003678:	440a      	add	r2, r1
 800367a:	3284      	adds	r2, #132	; 0x84
 800367c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003680:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003692:	4413      	add	r3, r2
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4619      	mov	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	01db      	lsls	r3, r3, #7
 80036a0:	440b      	add	r3, r1
 80036a2:	3384      	adds	r3, #132	; 0x84
 80036a4:	4619      	mov	r1, r3
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ba:	4413      	add	r3, r2
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	01db      	lsls	r3, r3, #7
 80036ca:	4413      	add	r3, r2
 80036cc:	3384      	adds	r3, #132	; 0x84
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	4611      	mov	r1, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	01d2      	lsls	r2, r2, #7
 80036da:	440a      	add	r2, r1
 80036dc:	3284      	adds	r2, #132	; 0x84
 80036de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80036e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f2:	4413      	add	r3, r2
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4619      	mov	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	01db      	lsls	r3, r3, #7
 8003700:	440b      	add	r3, r1
 8003702:	3384      	adds	r3, #132	; 0x84
 8003704:	4619      	mov	r1, r3
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4313      	orrs	r3, r2
 800370a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	01db      	lsls	r3, r3, #7
 8003716:	4413      	add	r3, r2
 8003718:	3384      	adds	r3, #132	; 0x84
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	4611      	mov	r1, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	01d2      	lsls	r2, r2, #7
 8003726:	440a      	add	r2, r1
 8003728:	3284      	adds	r2, #132	; 0x84
 800372a:	f023 0307 	bic.w	r3, r3, #7
 800372e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	01db      	lsls	r3, r3, #7
 800373a:	4413      	add	r3, r2
 800373c:	3384      	adds	r3, #132	; 0x84
 800373e:	461a      	mov	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	061b      	lsls	r3, r3, #24
 8003760:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	01db      	lsls	r3, r3, #7
 800376c:	4413      	add	r3, r2
 800376e:	3384      	adds	r3, #132	; 0x84
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	01db      	lsls	r3, r3, #7
 800377c:	4413      	add	r3, r2
 800377e:	3384      	adds	r3, #132	; 0x84
 8003780:	461a      	mov	r2, r3
 8003782:	2300      	movs	r3, #0
 8003784:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800378c:	461a      	mov	r2, r3
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	431a      	orrs	r2, r3
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	431a      	orrs	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4619      	mov	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	01db      	lsls	r3, r3, #7
 80037a0:	440b      	add	r3, r1
 80037a2:	3384      	adds	r3, #132	; 0x84
 80037a4:	4619      	mov	r1, r3
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	01db      	lsls	r3, r3, #7
 80037b6:	4413      	add	r3, r2
 80037b8:	3384      	adds	r3, #132	; 0x84
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	4611      	mov	r1, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	01d2      	lsls	r2, r2, #7
 80037c6:	440a      	add	r2, r1
 80037c8:	3284      	adds	r2, #132	; 0x84
 80037ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	01db      	lsls	r3, r3, #7
 80037da:	4413      	add	r3, r2
 80037dc:	3384      	adds	r3, #132	; 0x84
 80037de:	461a      	mov	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	01db      	lsls	r3, r3, #7
 80037f0:	4413      	add	r3, r2
 80037f2:	3384      	adds	r3, #132	; 0x84
 80037f4:	69da      	ldr	r2, [r3, #28]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4619      	mov	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	01db      	lsls	r3, r3, #7
 8003800:	440b      	add	r3, r1
 8003802:	3384      	adds	r3, #132	; 0x84
 8003804:	4619      	mov	r1, r3
 8003806:	4b58      	ldr	r3, [pc, #352]	; (8003968 <LTDC_SetConfig+0x32c>)
 8003808:	4013      	ands	r3, r2
 800380a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	68f9      	ldr	r1, [r7, #12]
 8003816:	6809      	ldr	r1, [r1, #0]
 8003818:	4608      	mov	r0, r1
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	01c9      	lsls	r1, r1, #7
 800381e:	4401      	add	r1, r0
 8003820:	3184      	adds	r1, #132	; 0x84
 8003822:	4313      	orrs	r3, r2
 8003824:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	01db      	lsls	r3, r3, #7
 8003830:	4413      	add	r3, r2
 8003832:	3384      	adds	r3, #132	; 0x84
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	01db      	lsls	r3, r3, #7
 8003840:	4413      	add	r3, r2
 8003842:	3384      	adds	r3, #132	; 0x84
 8003844:	461a      	mov	r2, r3
 8003846:	2300      	movs	r3, #0
 8003848:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	01db      	lsls	r3, r3, #7
 8003854:	4413      	add	r3, r2
 8003856:	3384      	adds	r3, #132	; 0x84
 8003858:	461a      	mov	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003868:	2304      	movs	r3, #4
 800386a:	61fb      	str	r3, [r7, #28]
 800386c:	e01b      	b.n	80038a6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d102      	bne.n	800387c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003876:	2303      	movs	r3, #3
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	e014      	b.n	80038a6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d00b      	beq.n	800389c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003888:	2b02      	cmp	r3, #2
 800388a:	d007      	beq.n	800389c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003890:	2b03      	cmp	r3, #3
 8003892:	d003      	beq.n	800389c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003898:	2b07      	cmp	r3, #7
 800389a:	d102      	bne.n	80038a2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800389c:	2302      	movs	r3, #2
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	e001      	b.n	80038a6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80038a2:	2301      	movs	r3, #1
 80038a4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	01db      	lsls	r3, r3, #7
 80038b0:	4413      	add	r3, r2
 80038b2:	3384      	adds	r3, #132	; 0x84
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	4611      	mov	r1, r2
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	01d2      	lsls	r2, r2, #7
 80038c0:	440a      	add	r2, r1
 80038c2:	3284      	adds	r2, #132	; 0x84
 80038c4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80038c8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	fb02 f303 	mul.w	r3, r2, r3
 80038d4:	041a      	lsls	r2, r3, #16
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	1acb      	subs	r3, r1, r3
 80038e0:	69f9      	ldr	r1, [r7, #28]
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	3303      	adds	r3, #3
 80038e8:	68f9      	ldr	r1, [r7, #12]
 80038ea:	6809      	ldr	r1, [r1, #0]
 80038ec:	4608      	mov	r0, r1
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	01c9      	lsls	r1, r1, #7
 80038f2:	4401      	add	r1, r0
 80038f4:	3184      	adds	r1, #132	; 0x84
 80038f6:	4313      	orrs	r3, r2
 80038f8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	01db      	lsls	r3, r3, #7
 8003904:	4413      	add	r3, r2
 8003906:	3384      	adds	r3, #132	; 0x84
 8003908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4619      	mov	r1, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	01db      	lsls	r3, r3, #7
 8003914:	440b      	add	r3, r1
 8003916:	3384      	adds	r3, #132	; 0x84
 8003918:	4619      	mov	r1, r3
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <LTDC_SetConfig+0x330>)
 800391c:	4013      	ands	r3, r2
 800391e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	01db      	lsls	r3, r3, #7
 800392a:	4413      	add	r3, r2
 800392c:	3384      	adds	r3, #132	; 0x84
 800392e:	461a      	mov	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	01db      	lsls	r3, r3, #7
 8003940:	4413      	add	r3, r2
 8003942:	3384      	adds	r3, #132	; 0x84
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	4611      	mov	r1, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	01d2      	lsls	r2, r2, #7
 8003950:	440a      	add	r2, r1
 8003952:	3284      	adds	r2, #132	; 0x84
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6013      	str	r3, [r2, #0]
}
 800395a:	bf00      	nop
 800395c:	3724      	adds	r7, #36	; 0x24
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	fffff8f8 	.word	0xfffff8f8
 800396c:	fffff800 	.word	0xfffff800

08003970 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8003982:	2200      	movs	r2, #0
 8003984:	e001      	b.n	800398a <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8003986:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d102      	bne.n	800399c <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8003996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800399a:	e000      	b.n	800399e <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800399c:	2200      	movs	r2, #0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d102      	bne.n	80039b0 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80039aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039ae:	e000      	b.n	80039b2 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80039b0:	2200      	movs	r2, #0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	1e5a      	subs	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	4413      	add	r3, r2
 80039ca:	1e5a      	subs	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	441a      	add	r2, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	4413      	add	r3, r2
 80039e0:	1e5a      	subs	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	441a      	add	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	441a      	add	r2, r3
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	4413      	add	r3, r2
 80039fc:	1e5a      	subs	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40007000 	.word	0x40007000

08003a30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3a:	4b23      	ldr	r3, [pc, #140]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4a22      	ldr	r2, [pc, #136]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6413      	str	r3, [r2, #64]	; 0x40
 8003a46:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a52:	4b1e      	ldr	r3, [pc, #120]	; (8003acc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a5e:	f7fe fb1b 	bl	8002098 <HAL_GetTick>
 8003a62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a64:	e009      	b.n	8003a7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a66:	f7fe fb17 	bl	8002098 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a74:	d901      	bls.n	8003a7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e022      	b.n	8003ac0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a7a:	4b14      	ldr	r3, [pc, #80]	; (8003acc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a86:	d1ee      	bne.n	8003a66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a88:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0f      	ldr	r2, [pc, #60]	; (8003acc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a94:	f7fe fb00 	bl	8002098 <HAL_GetTick>
 8003a98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a9a:	e009      	b.n	8003ab0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a9c:	f7fe fafc 	bl	8002098 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aaa:	d901      	bls.n	8003ab0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e007      	b.n	8003ac0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003abc:	d1ee      	bne.n	8003a9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40007000 	.word	0x40007000

08003ad0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e29b      	b.n	800401e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 8087 	beq.w	8003c02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af4:	4b96      	ldr	r3, [pc, #600]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 030c 	and.w	r3, r3, #12
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d00c      	beq.n	8003b1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b00:	4b93      	ldr	r3, [pc, #588]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d112      	bne.n	8003b32 <HAL_RCC_OscConfig+0x62>
 8003b0c:	4b90      	ldr	r3, [pc, #576]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b18:	d10b      	bne.n	8003b32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1a:	4b8d      	ldr	r3, [pc, #564]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d06c      	beq.n	8003c00 <HAL_RCC_OscConfig+0x130>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d168      	bne.n	8003c00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e275      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3a:	d106      	bne.n	8003b4a <HAL_RCC_OscConfig+0x7a>
 8003b3c:	4b84      	ldr	r3, [pc, #528]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a83      	ldr	r2, [pc, #524]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	e02e      	b.n	8003ba8 <HAL_RCC_OscConfig+0xd8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x9c>
 8003b52:	4b7f      	ldr	r3, [pc, #508]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a7e      	ldr	r2, [pc, #504]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b7c      	ldr	r3, [pc, #496]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a7b      	ldr	r2, [pc, #492]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e01d      	b.n	8003ba8 <HAL_RCC_OscConfig+0xd8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0xc0>
 8003b76:	4b76      	ldr	r3, [pc, #472]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a75      	ldr	r2, [pc, #468]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b73      	ldr	r3, [pc, #460]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a72      	ldr	r2, [pc, #456]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e00b      	b.n	8003ba8 <HAL_RCC_OscConfig+0xd8>
 8003b90:	4b6f      	ldr	r3, [pc, #444]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a6e      	ldr	r2, [pc, #440]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b6c      	ldr	r3, [pc, #432]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a6b      	ldr	r2, [pc, #428]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d013      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fa72 	bl	8002098 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fe fa6e 	bl	8002098 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e229      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	4b61      	ldr	r3, [pc, #388]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0xe8>
 8003bd6:	e014      	b.n	8003c02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fa5e 	bl	8002098 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be0:	f7fe fa5a 	bl	8002098 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	; 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e215      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf2:	4b57      	ldr	r3, [pc, #348]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x110>
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d069      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c0e:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1a:	4b4d      	ldr	r3, [pc, #308]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d11c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x190>
 8003c26:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d116      	bne.n	8003c60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c32:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <HAL_RCC_OscConfig+0x17a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d001      	beq.n	8003c4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e1e9      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4a:	4b41      	ldr	r3, [pc, #260]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	493d      	ldr	r1, [pc, #244]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5e:	e040      	b.n	8003ce2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d023      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c68:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a38      	ldr	r2, [pc, #224]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe fa10 	bl	8002098 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7c:	f7fe fa0c 	bl	8002098 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1c7      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8e:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9a:	4b2d      	ldr	r3, [pc, #180]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4929      	ldr	r1, [pc, #164]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]
 8003cae:	e018      	b.n	8003ce2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb0:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a26      	ldr	r2, [pc, #152]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003cb6:	f023 0301 	bic.w	r3, r3, #1
 8003cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fe f9ec 	bl	8002098 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc4:	f7fe f9e8 	bl	8002098 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1a3      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd6:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d038      	beq.n	8003d60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d019      	beq.n	8003d2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf6:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfa:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d02:	f7fe f9c9 	bl	8002098 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0a:	f7fe f9c5 	bl	8002098 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e180      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x23a>
 8003d28:	e01a      	b.n	8003d60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2e:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <HAL_RCC_OscConfig+0x280>)
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d36:	f7fe f9af 	bl	8002098 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3e:	f7fe f9ab 	bl	8002098 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d903      	bls.n	8003d54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e166      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
 8003d50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d54:	4b92      	ldr	r3, [pc, #584]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1ee      	bne.n	8003d3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80a4 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6e:	4b8c      	ldr	r3, [pc, #560]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10d      	bne.n	8003d96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7a:	4b89      	ldr	r3, [pc, #548]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a88      	ldr	r2, [pc, #544]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
 8003d86:	4b86      	ldr	r3, [pc, #536]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d96:	4b83      	ldr	r3, [pc, #524]	; (8003fa4 <HAL_RCC_OscConfig+0x4d4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d118      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003da2:	4b80      	ldr	r3, [pc, #512]	; (8003fa4 <HAL_RCC_OscConfig+0x4d4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7f      	ldr	r2, [pc, #508]	; (8003fa4 <HAL_RCC_OscConfig+0x4d4>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dae:	f7fe f973 	bl	8002098 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db6:	f7fe f96f 	bl	8002098 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b64      	cmp	r3, #100	; 0x64
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e12a      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc8:	4b76      	ldr	r3, [pc, #472]	; (8003fa4 <HAL_RCC_OscConfig+0x4d4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d106      	bne.n	8003dea <HAL_RCC_OscConfig+0x31a>
 8003ddc:	4b70      	ldr	r3, [pc, #448]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a6f      	ldr	r2, [pc, #444]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
 8003de8:	e02d      	b.n	8003e46 <HAL_RCC_OscConfig+0x376>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x33c>
 8003df2:	4b6b      	ldr	r3, [pc, #428]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a6a      	ldr	r2, [pc, #424]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfe:	4b68      	ldr	r3, [pc, #416]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4a67      	ldr	r2, [pc, #412]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0a:	e01c      	b.n	8003e46 <HAL_RCC_OscConfig+0x376>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d10c      	bne.n	8003e2e <HAL_RCC_OscConfig+0x35e>
 8003e14:	4b62      	ldr	r3, [pc, #392]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	4a61      	ldr	r2, [pc, #388]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003e1a:	f043 0304 	orr.w	r3, r3, #4
 8003e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e20:	4b5f      	ldr	r3, [pc, #380]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e24:	4a5e      	ldr	r2, [pc, #376]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2c:	e00b      	b.n	8003e46 <HAL_RCC_OscConfig+0x376>
 8003e2e:	4b5c      	ldr	r3, [pc, #368]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	4a5b      	ldr	r2, [pc, #364]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3a:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	4a58      	ldr	r2, [pc, #352]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d015      	beq.n	8003e7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4e:	f7fe f923 	bl	8002098 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fe f91f 	bl	8002098 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e0d8      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6c:	4b4c      	ldr	r3, [pc, #304]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ee      	beq.n	8003e56 <HAL_RCC_OscConfig+0x386>
 8003e78:	e014      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7a:	f7fe f90d 	bl	8002098 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fe f909 	bl	8002098 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0c2      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e98:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d105      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eaa:	4b3d      	ldr	r3, [pc, #244]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a3c      	ldr	r2, [pc, #240]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80ae 	beq.w	800401c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec0:	4b37      	ldr	r3, [pc, #220]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d06d      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d14b      	bne.n	8003f6c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed4:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a31      	ldr	r2, [pc, #196]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fe f8da 	bl	8002098 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fe f8d6 	bl	8002098 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e091      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efa:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69da      	ldr	r2, [r3, #28]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	019b      	lsls	r3, r3, #6
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	041b      	lsls	r3, r3, #16
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	061b      	lsls	r3, r3, #24
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	071b      	lsls	r3, r3, #28
 8003f32:	491b      	ldr	r1, [pc, #108]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f38:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fe f8a8 	bl	8002098 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fe f8a4 	bl	8002098 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e05f      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x47c>
 8003f6a:	e057      	b.n	800401c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a0b      	ldr	r2, [pc, #44]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fe f88e 	bl	8002098 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fe f88a 	bl	8002098 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e045      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f92:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <HAL_RCC_OscConfig+0x4d0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4b0>
 8003f9e:	e03d      	b.n	800401c <HAL_RCC_OscConfig+0x54c>
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fa8:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <HAL_RCC_OscConfig+0x558>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d030      	beq.n	8004018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d129      	bne.n	8004018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d122      	bne.n	8004018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd8:	4013      	ands	r3, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d119      	bne.n	8004018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d10f      	bne.n	8004018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d107      	bne.n	8004018 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800

0800402c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0d0      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004044:	4b6a      	ldr	r3, [pc, #424]	; (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d910      	bls.n	8004074 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b67      	ldr	r3, [pc, #412]	; (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 020f 	bic.w	r2, r3, #15
 800405a:	4965      	ldr	r1, [pc, #404]	; (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004062:	4b63      	ldr	r3, [pc, #396]	; (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0b8      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d020      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800408c:	4b59      	ldr	r3, [pc, #356]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4a58      	ldr	r2, [pc, #352]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004092:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004096:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040a4:	4b53      	ldr	r3, [pc, #332]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4a52      	ldr	r2, [pc, #328]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b0:	4b50      	ldr	r3, [pc, #320]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	494d      	ldr	r1, [pc, #308]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d040      	beq.n	8004150 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d6:	4b47      	ldr	r3, [pc, #284]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d115      	bne.n	800410e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e07f      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ee:	4b41      	ldr	r3, [pc, #260]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e073      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fe:	4b3d      	ldr	r3, [pc, #244]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e06b      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410e:	4b39      	ldr	r3, [pc, #228]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 0203 	bic.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4936      	ldr	r1, [pc, #216]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	4313      	orrs	r3, r2
 800411e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004120:	f7fd ffba 	bl	8002098 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004126:	e00a      	b.n	800413e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004128:	f7fd ffb6 	bl	8002098 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	; 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e053      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413e:	4b2d      	ldr	r3, [pc, #180]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 020c 	and.w	r2, r3, #12
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	429a      	cmp	r2, r3
 800414e:	d1eb      	bne.n	8004128 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004150:	4b27      	ldr	r3, [pc, #156]	; (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d210      	bcs.n	8004180 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 020f 	bic.w	r2, r3, #15
 8004166:	4922      	ldr	r1, [pc, #136]	; (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b20      	ldr	r3, [pc, #128]	; (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e032      	b.n	80041e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800418c:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4916      	ldr	r1, [pc, #88]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041aa:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	490e      	ldr	r1, [pc, #56]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041be:	f000 f821 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80041c2:	4602      	mov	r2, r0
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	490a      	ldr	r1, [pc, #40]	; (80041f8 <HAL_RCC_ClockConfig+0x1cc>)
 80041d0:	5ccb      	ldrb	r3, [r1, r3]
 80041d2:	fa22 f303 	lsr.w	r3, r2, r3
 80041d6:	4a09      	ldr	r2, [pc, #36]	; (80041fc <HAL_RCC_ClockConfig+0x1d0>)
 80041d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041da:	4b09      	ldr	r3, [pc, #36]	; (8004200 <HAL_RCC_ClockConfig+0x1d4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fd ff16 	bl	8002010 <HAL_InitTick>

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40023c00 	.word	0x40023c00
 80041f4:	40023800 	.word	0x40023800
 80041f8:	08008b8c 	.word	0x08008b8c
 80041fc:	20000000 	.word	0x20000000
 8004200:	20000004 	.word	0x20000004

08004204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004204:	b5b0      	push	{r4, r5, r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800420a:	2100      	movs	r1, #0
 800420c:	6079      	str	r1, [r7, #4]
 800420e:	2100      	movs	r1, #0
 8004210:	60f9      	str	r1, [r7, #12]
 8004212:	2100      	movs	r1, #0
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004216:	2100      	movs	r1, #0
 8004218:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800421a:	4952      	ldr	r1, [pc, #328]	; (8004364 <HAL_RCC_GetSysClockFreq+0x160>)
 800421c:	6889      	ldr	r1, [r1, #8]
 800421e:	f001 010c 	and.w	r1, r1, #12
 8004222:	2908      	cmp	r1, #8
 8004224:	d00d      	beq.n	8004242 <HAL_RCC_GetSysClockFreq+0x3e>
 8004226:	2908      	cmp	r1, #8
 8004228:	f200 8094 	bhi.w	8004354 <HAL_RCC_GetSysClockFreq+0x150>
 800422c:	2900      	cmp	r1, #0
 800422e:	d002      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0x32>
 8004230:	2904      	cmp	r1, #4
 8004232:	d003      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0x38>
 8004234:	e08e      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004236:	4b4c      	ldr	r3, [pc, #304]	; (8004368 <HAL_RCC_GetSysClockFreq+0x164>)
 8004238:	60bb      	str	r3, [r7, #8]
      break;
 800423a:	e08e      	b.n	800435a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800423c:	4b4b      	ldr	r3, [pc, #300]	; (800436c <HAL_RCC_GetSysClockFreq+0x168>)
 800423e:	60bb      	str	r3, [r7, #8]
      break;
 8004240:	e08b      	b.n	800435a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004242:	4948      	ldr	r1, [pc, #288]	; (8004364 <HAL_RCC_GetSysClockFreq+0x160>)
 8004244:	6849      	ldr	r1, [r1, #4]
 8004246:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800424a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800424c:	4945      	ldr	r1, [pc, #276]	; (8004364 <HAL_RCC_GetSysClockFreq+0x160>)
 800424e:	6849      	ldr	r1, [r1, #4]
 8004250:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004254:	2900      	cmp	r1, #0
 8004256:	d024      	beq.n	80042a2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004258:	4942      	ldr	r1, [pc, #264]	; (8004364 <HAL_RCC_GetSysClockFreq+0x160>)
 800425a:	6849      	ldr	r1, [r1, #4]
 800425c:	0989      	lsrs	r1, r1, #6
 800425e:	4608      	mov	r0, r1
 8004260:	f04f 0100 	mov.w	r1, #0
 8004264:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004268:	f04f 0500 	mov.w	r5, #0
 800426c:	ea00 0204 	and.w	r2, r0, r4
 8004270:	ea01 0305 	and.w	r3, r1, r5
 8004274:	493d      	ldr	r1, [pc, #244]	; (800436c <HAL_RCC_GetSysClockFreq+0x168>)
 8004276:	fb01 f003 	mul.w	r0, r1, r3
 800427a:	2100      	movs	r1, #0
 800427c:	fb01 f102 	mul.w	r1, r1, r2
 8004280:	1844      	adds	r4, r0, r1
 8004282:	493a      	ldr	r1, [pc, #232]	; (800436c <HAL_RCC_GetSysClockFreq+0x168>)
 8004284:	fba2 0101 	umull	r0, r1, r2, r1
 8004288:	1863      	adds	r3, r4, r1
 800428a:	4619      	mov	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	461a      	mov	r2, r3
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	f7fb ffd8 	bl	8000248 <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4613      	mov	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e04a      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a2:	4b30      	ldr	r3, [pc, #192]	; (8004364 <HAL_RCC_GetSysClockFreq+0x160>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	099b      	lsrs	r3, r3, #6
 80042a8:	461a      	mov	r2, r3
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	ea02 0400 	and.w	r4, r2, r0
 80042ba:	ea03 0501 	and.w	r5, r3, r1
 80042be:	4620      	mov	r0, r4
 80042c0:	4629      	mov	r1, r5
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	014b      	lsls	r3, r1, #5
 80042cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042d0:	0142      	lsls	r2, r0, #5
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	1b00      	subs	r0, r0, r4
 80042d8:	eb61 0105 	sbc.w	r1, r1, r5
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	018b      	lsls	r3, r1, #6
 80042e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042ea:	0182      	lsls	r2, r0, #6
 80042ec:	1a12      	subs	r2, r2, r0
 80042ee:	eb63 0301 	sbc.w	r3, r3, r1
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	00d9      	lsls	r1, r3, #3
 80042fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004300:	00d0      	lsls	r0, r2, #3
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	1912      	adds	r2, r2, r4
 8004308:	eb45 0303 	adc.w	r3, r5, r3
 800430c:	f04f 0000 	mov.w	r0, #0
 8004310:	f04f 0100 	mov.w	r1, #0
 8004314:	0299      	lsls	r1, r3, #10
 8004316:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800431a:	0290      	lsls	r0, r2, #10
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4610      	mov	r0, r2
 8004322:	4619      	mov	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	461a      	mov	r2, r3
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	f7fb ff8c 	bl	8000248 <__aeabi_uldivmod>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4613      	mov	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <HAL_RCC_GetSysClockFreq+0x160>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	0c1b      	lsrs	r3, r3, #16
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	3301      	adds	r3, #1
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004350:	60bb      	str	r3, [r7, #8]
      break;
 8004352:	e002      	b.n	800435a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004354:	4b04      	ldr	r3, [pc, #16]	; (8004368 <HAL_RCC_GetSysClockFreq+0x164>)
 8004356:	60bb      	str	r3, [r7, #8]
      break;
 8004358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800435a:	68bb      	ldr	r3, [r7, #8]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bdb0      	pop	{r4, r5, r7, pc}
 8004364:	40023800 	.word	0x40023800
 8004368:	00f42400 	.word	0x00f42400
 800436c:	017d7840 	.word	0x017d7840

08004370 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004374:	4b03      	ldr	r3, [pc, #12]	; (8004384 <HAL_RCC_GetHCLKFreq+0x14>)
 8004376:	681b      	ldr	r3, [r3, #0]
}
 8004378:	4618      	mov	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	20000000 	.word	0x20000000

08004388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800438c:	f7ff fff0 	bl	8004370 <HAL_RCC_GetHCLKFreq>
 8004390:	4602      	mov	r2, r0
 8004392:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	0a9b      	lsrs	r3, r3, #10
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	4903      	ldr	r1, [pc, #12]	; (80043ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800439e:	5ccb      	ldrb	r3, [r1, r3]
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40023800 	.word	0x40023800
 80043ac:	08008b9c 	.word	0x08008b9c

080043b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043b4:	f7ff ffdc 	bl	8004370 <HAL_RCC_GetHCLKFreq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	0b5b      	lsrs	r3, r3, #13
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	4903      	ldr	r1, [pc, #12]	; (80043d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043c6:	5ccb      	ldrb	r3, [r1, r3]
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40023800 	.word	0x40023800
 80043d4:	08008b9c 	.word	0x08008b9c

080043d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d012      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004400:	4b69      	ldr	r3, [pc, #420]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a68      	ldr	r2, [pc, #416]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004406:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800440a:	6093      	str	r3, [r2, #8]
 800440c:	4b66      	ldr	r3, [pc, #408]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004414:	4964      	ldr	r1, [pc, #400]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004416:	4313      	orrs	r3, r2
 8004418:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004422:	2301      	movs	r3, #1
 8004424:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d017      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004432:	4b5d      	ldr	r3, [pc, #372]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004438:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004440:	4959      	ldr	r1, [pc, #356]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004450:	d101      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004452:	2301      	movs	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800445e:	2301      	movs	r3, #1
 8004460:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d017      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800446e:	4b4e      	ldr	r3, [pc, #312]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004474:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	494a      	ldr	r1, [pc, #296]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800448c:	d101      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800448e:	2301      	movs	r3, #1
 8004490:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800449a:	2301      	movs	r3, #1
 800449c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 808b 	beq.w	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044bc:	4b3a      	ldr	r3, [pc, #232]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	4a39      	ldr	r2, [pc, #228]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c6:	6413      	str	r3, [r2, #64]	; 0x40
 80044c8:	4b37      	ldr	r3, [pc, #220]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044d4:	4b35      	ldr	r3, [pc, #212]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a34      	ldr	r2, [pc, #208]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e0:	f7fd fdda 	bl	8002098 <HAL_GetTick>
 80044e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e8:	f7fd fdd6 	bl	8002098 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	; 0x64
 80044f4:	d901      	bls.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e38f      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044fa:	4b2c      	ldr	r3, [pc, #176]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004506:	4b28      	ldr	r3, [pc, #160]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d035      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	429a      	cmp	r2, r3
 8004522:	d02e      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004524:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800452e:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800453a:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	4a1a      	ldr	r2, [pc, #104]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004544:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004546:	4a18      	ldr	r2, [pc, #96]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800454c:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b01      	cmp	r3, #1
 8004556:	d114      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fd fd9e 	bl	8002098 <HAL_GetTick>
 800455c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455e:	e00a      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004560:	f7fd fd9a 	bl	8002098 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	; 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e351      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004576:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0ee      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458e:	d111      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800459e:	400b      	ands	r3, r1
 80045a0:	4901      	ldr	r1, [pc, #4]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
 80045a6:	e00b      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40007000 	.word	0x40007000
 80045b0:	0ffffcff 	.word	0x0ffffcff
 80045b4:	4bb3      	ldr	r3, [pc, #716]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4ab2      	ldr	r2, [pc, #712]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045be:	6093      	str	r3, [r2, #8]
 80045c0:	4bb0      	ldr	r3, [pc, #704]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045cc:	49ad      	ldr	r1, [pc, #692]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d010      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045de:	4ba9      	ldr	r3, [pc, #676]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e4:	4aa7      	ldr	r2, [pc, #668]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045ee:	4ba5      	ldr	r3, [pc, #660]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	49a2      	ldr	r1, [pc, #648]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800460c:	4b9d      	ldr	r3, [pc, #628]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800461a:	499a      	ldr	r1, [pc, #616]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800462e:	4b95      	ldr	r3, [pc, #596]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004634:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800463c:	4991      	ldr	r1, [pc, #580]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004650:	4b8c      	ldr	r3, [pc, #560]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800465e:	4989      	ldr	r1, [pc, #548]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004672:	4b84      	ldr	r3, [pc, #528]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	4980      	ldr	r1, [pc, #512]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004694:	4b7b      	ldr	r3, [pc, #492]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469a:	f023 0203 	bic.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	4978      	ldr	r1, [pc, #480]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046b6:	4b73      	ldr	r3, [pc, #460]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046bc:	f023 020c 	bic.w	r2, r3, #12
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c4:	496f      	ldr	r1, [pc, #444]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046d8:	4b6a      	ldr	r3, [pc, #424]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e6:	4967      	ldr	r1, [pc, #412]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046fa:	4b62      	ldr	r3, [pc, #392]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004700:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004708:	495e      	ldr	r1, [pc, #376]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800471c:	4b59      	ldr	r3, [pc, #356]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004722:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	4956      	ldr	r1, [pc, #344]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800473e:	4b51      	ldr	r3, [pc, #324]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004744:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	494d      	ldr	r1, [pc, #308]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004760:	4b48      	ldr	r3, [pc, #288]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476e:	4945      	ldr	r1, [pc, #276]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004782:	4b40      	ldr	r3, [pc, #256]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004790:	493c      	ldr	r1, [pc, #240]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047a4:	4b37      	ldr	r3, [pc, #220]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b2:	4934      	ldr	r1, [pc, #208]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d011      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047c6:	4b2f      	ldr	r3, [pc, #188]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047d4:	492b      	ldr	r1, [pc, #172]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e4:	d101      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047e6:	2301      	movs	r3, #1
 80047e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047f6:	2301      	movs	r3, #1
 80047f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004806:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004814:	491b      	ldr	r1, [pc, #108]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00b      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004828:	4b16      	ldr	r3, [pc, #88]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004838:	4912      	ldr	r1, [pc, #72]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00b      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800484c:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485c:	4909      	ldr	r1, [pc, #36]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00f      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004876:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004880:	e002      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	4986      	ldr	r1, [pc, #536]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00b      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800489c:	4b81      	ldr	r3, [pc, #516]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ac:	497d      	ldr	r1, [pc, #500]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d006      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 80d6 	beq.w	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048c8:	4b76      	ldr	r3, [pc, #472]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a75      	ldr	r2, [pc, #468]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d4:	f7fd fbe0 	bl	8002098 <HAL_GetTick>
 80048d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048dc:	f7fd fbdc 	bl	8002098 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e195      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048ee:	4b6d      	ldr	r3, [pc, #436]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d021      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490a:	2b00      	cmp	r3, #0
 800490c:	d11d      	bne.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800490e:	4b65      	ldr	r3, [pc, #404]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800491c:	4b61      	ldr	r3, [pc, #388]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004922:	0e1b      	lsrs	r3, r3, #24
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	019a      	lsls	r2, r3, #6
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	041b      	lsls	r3, r3, #16
 8004934:	431a      	orrs	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	061b      	lsls	r3, r3, #24
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	071b      	lsls	r3, r3, #28
 8004942:	4958      	ldr	r1, [pc, #352]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d004      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02e      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004974:	d129      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004976:	4b4b      	ldr	r3, [pc, #300]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004984:	4b47      	ldr	r3, [pc, #284]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498a:	0f1b      	lsrs	r3, r3, #28
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	019a      	lsls	r2, r3, #6
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	041b      	lsls	r3, r3, #16
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	061b      	lsls	r3, r3, #24
 80049a4:	431a      	orrs	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	071b      	lsls	r3, r3, #28
 80049aa:	493e      	ldr	r1, [pc, #248]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049b2:	4b3c      	ldr	r3, [pc, #240]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b8:	f023 021f 	bic.w	r2, r3, #31
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	3b01      	subs	r3, #1
 80049c2:	4938      	ldr	r1, [pc, #224]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01d      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049d6:	4b33      	ldr	r3, [pc, #204]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049dc:	0e1b      	lsrs	r3, r3, #24
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049e4:	4b2f      	ldr	r3, [pc, #188]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ea:	0f1b      	lsrs	r3, r3, #28
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	019a      	lsls	r2, r3, #6
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	041b      	lsls	r3, r3, #16
 80049fe:	431a      	orrs	r2, r3
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	061b      	lsls	r3, r3, #24
 8004a04:	431a      	orrs	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	071b      	lsls	r3, r3, #28
 8004a0a:	4926      	ldr	r1, [pc, #152]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d011      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	019a      	lsls	r2, r3, #6
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	061b      	lsls	r3, r3, #24
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	071b      	lsls	r3, r3, #28
 8004a3a:	491a      	ldr	r1, [pc, #104]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a42:	4b18      	ldr	r3, [pc, #96]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a17      	ldr	r2, [pc, #92]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4e:	f7fd fb23 	bl	8002098 <HAL_GetTick>
 8004a52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a56:	f7fd fb1f 	bl	8002098 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b64      	cmp	r3, #100	; 0x64
 8004a62:	d901      	bls.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e0d8      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a68:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	f040 80ce 	bne.w	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a88:	f7fd fb06 	bl	8002098 <HAL_GetTick>
 8004a8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a8e:	e00b      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a90:	f7fd fb02 	bl	8002098 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b64      	cmp	r3, #100	; 0x64
 8004a9c:	d904      	bls.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e0bb      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aa8:	4b5e      	ldr	r3, [pc, #376]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab4:	d0ec      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d02e      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d12a      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ade:	4b51      	ldr	r3, [pc, #324]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	0c1b      	lsrs	r3, r3, #16
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004aec:	4b4d      	ldr	r3, [pc, #308]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	0f1b      	lsrs	r3, r3, #28
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	019a      	lsls	r2, r3, #6
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	061b      	lsls	r3, r3, #24
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	071b      	lsls	r3, r3, #28
 8004b12:	4944      	ldr	r1, [pc, #272]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b1a:	4b42      	ldr	r3, [pc, #264]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	493d      	ldr	r1, [pc, #244]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d022      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b48:	d11d      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b4a:	4b36      	ldr	r3, [pc, #216]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b50:	0e1b      	lsrs	r3, r3, #24
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b58:	4b32      	ldr	r3, [pc, #200]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	0f1b      	lsrs	r3, r3, #28
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	019a      	lsls	r2, r3, #6
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	431a      	orrs	r2, r3
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	061b      	lsls	r3, r3, #24
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	071b      	lsls	r3, r3, #28
 8004b7e:	4929      	ldr	r1, [pc, #164]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d028      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b92:	4b24      	ldr	r3, [pc, #144]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	0e1b      	lsrs	r3, r3, #24
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ba0:	4b20      	ldr	r3, [pc, #128]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	0c1b      	lsrs	r3, r3, #16
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	019a      	lsls	r2, r3, #6
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	041b      	lsls	r3, r3, #16
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	061b      	lsls	r3, r3, #24
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	071b      	lsls	r3, r3, #28
 8004bc6:	4917      	ldr	r1, [pc, #92]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bce:	4b15      	ldr	r3, [pc, #84]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	4911      	ldr	r1, [pc, #68]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004be4:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a0e      	ldr	r2, [pc, #56]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf0:	f7fd fa52 	bl	8002098 <HAL_GetTick>
 8004bf4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bf8:	f7fd fa4e 	bl	8002098 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	; 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e007      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c16:	d1ef      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3720      	adds	r7, #32
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40023800 	.word	0x40023800

08004c28 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e025      	b.n	8004c88 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d106      	bne.n	8004c56 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f81d 	bl	8004c90 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f000 fccb 	bl	8005604 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	461a      	mov	r2, r3
 8004c78:	6839      	ldr	r1, [r7, #0]
 8004c7a:	f000 fd35 	bl	80056e8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d101      	bne.n	8004cc0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e018      	b.n	8004cf2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fd89 	bl	80057e8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d104      	bne.n	8004ce8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2205      	movs	r2, #5
 8004ce2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004ce6:	e003      	b.n	8004cf0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d101      	bne.n	8004d14 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
 8004d12:	e00e      	b.n	8004d32 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6839      	ldr	r1, [r7, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fd84 	bl	8005830 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e040      	b.n	8004dce <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d106      	bne.n	8004d62 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f873 	bl	8004e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2224      	movs	r2, #36	; 0x24
 8004d66:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f879 	bl	8004e70 <UART_SetConfig>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e022      	b.n	8004dce <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 facf 	bl	8005334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004da4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004db4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0201 	orr.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fb56 	bl	8005478 <UART_CheckIdleState>
 8004dcc:	4603      	mov	r3, r0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e02b      	b.n	8004e40 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2224      	movs	r2, #36	; 0x24
 8004dec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0201 	bic.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2200      	movs	r2, #0
 8004e14:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f820 	bl	8004e5c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4ba7      	ldr	r3, [pc, #668]	; (8005138 <UART_SetConfig+0x2c8>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	6979      	ldr	r1, [r7, #20]
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a95      	ldr	r2, [pc, #596]	; (800513c <UART_SetConfig+0x2cc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d120      	bne.n	8004f2e <UART_SetConfig+0xbe>
 8004eec:	4b94      	ldr	r3, [pc, #592]	; (8005140 <UART_SetConfig+0x2d0>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d816      	bhi.n	8004f28 <UART_SetConfig+0xb8>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <UART_SetConfig+0x90>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f11 	.word	0x08004f11
 8004f04:	08004f1d 	.word	0x08004f1d
 8004f08:	08004f17 	.word	0x08004f17
 8004f0c:	08004f23 	.word	0x08004f23
 8004f10:	2301      	movs	r3, #1
 8004f12:	77fb      	strb	r3, [r7, #31]
 8004f14:	e14f      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f16:	2302      	movs	r3, #2
 8004f18:	77fb      	strb	r3, [r7, #31]
 8004f1a:	e14c      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	e149      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f22:	2308      	movs	r3, #8
 8004f24:	77fb      	strb	r3, [r7, #31]
 8004f26:	e146      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e143      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a84      	ldr	r2, [pc, #528]	; (8005144 <UART_SetConfig+0x2d4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d132      	bne.n	8004f9e <UART_SetConfig+0x12e>
 8004f38:	4b81      	ldr	r3, [pc, #516]	; (8005140 <UART_SetConfig+0x2d0>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b0c      	cmp	r3, #12
 8004f44:	d828      	bhi.n	8004f98 <UART_SetConfig+0x128>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <UART_SetConfig+0xdc>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f81 	.word	0x08004f81
 8004f50:	08004f99 	.word	0x08004f99
 8004f54:	08004f99 	.word	0x08004f99
 8004f58:	08004f99 	.word	0x08004f99
 8004f5c:	08004f8d 	.word	0x08004f8d
 8004f60:	08004f99 	.word	0x08004f99
 8004f64:	08004f99 	.word	0x08004f99
 8004f68:	08004f99 	.word	0x08004f99
 8004f6c:	08004f87 	.word	0x08004f87
 8004f70:	08004f99 	.word	0x08004f99
 8004f74:	08004f99 	.word	0x08004f99
 8004f78:	08004f99 	.word	0x08004f99
 8004f7c:	08004f93 	.word	0x08004f93
 8004f80:	2300      	movs	r3, #0
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e117      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f86:	2302      	movs	r3, #2
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e114      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e111      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f92:	2308      	movs	r3, #8
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e10e      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e10b      	b.n	80051b6 <UART_SetConfig+0x346>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a69      	ldr	r2, [pc, #420]	; (8005148 <UART_SetConfig+0x2d8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d120      	bne.n	8004fea <UART_SetConfig+0x17a>
 8004fa8:	4b65      	ldr	r3, [pc, #404]	; (8005140 <UART_SetConfig+0x2d0>)
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fb2:	2b30      	cmp	r3, #48	; 0x30
 8004fb4:	d013      	beq.n	8004fde <UART_SetConfig+0x16e>
 8004fb6:	2b30      	cmp	r3, #48	; 0x30
 8004fb8:	d814      	bhi.n	8004fe4 <UART_SetConfig+0x174>
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d009      	beq.n	8004fd2 <UART_SetConfig+0x162>
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d810      	bhi.n	8004fe4 <UART_SetConfig+0x174>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <UART_SetConfig+0x15c>
 8004fc6:	2b10      	cmp	r3, #16
 8004fc8:	d006      	beq.n	8004fd8 <UART_SetConfig+0x168>
 8004fca:	e00b      	b.n	8004fe4 <UART_SetConfig+0x174>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e0f1      	b.n	80051b6 <UART_SetConfig+0x346>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	e0ee      	b.n	80051b6 <UART_SetConfig+0x346>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e0eb      	b.n	80051b6 <UART_SetConfig+0x346>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	77fb      	strb	r3, [r7, #31]
 8004fe2:	e0e8      	b.n	80051b6 <UART_SetConfig+0x346>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e0e5      	b.n	80051b6 <UART_SetConfig+0x346>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a57      	ldr	r2, [pc, #348]	; (800514c <UART_SetConfig+0x2dc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d120      	bne.n	8005036 <UART_SetConfig+0x1c6>
 8004ff4:	4b52      	ldr	r3, [pc, #328]	; (8005140 <UART_SetConfig+0x2d0>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8005000:	d013      	beq.n	800502a <UART_SetConfig+0x1ba>
 8005002:	2bc0      	cmp	r3, #192	; 0xc0
 8005004:	d814      	bhi.n	8005030 <UART_SetConfig+0x1c0>
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d009      	beq.n	800501e <UART_SetConfig+0x1ae>
 800500a:	2b80      	cmp	r3, #128	; 0x80
 800500c:	d810      	bhi.n	8005030 <UART_SetConfig+0x1c0>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <UART_SetConfig+0x1a8>
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d006      	beq.n	8005024 <UART_SetConfig+0x1b4>
 8005016:	e00b      	b.n	8005030 <UART_SetConfig+0x1c0>
 8005018:	2300      	movs	r3, #0
 800501a:	77fb      	strb	r3, [r7, #31]
 800501c:	e0cb      	b.n	80051b6 <UART_SetConfig+0x346>
 800501e:	2302      	movs	r3, #2
 8005020:	77fb      	strb	r3, [r7, #31]
 8005022:	e0c8      	b.n	80051b6 <UART_SetConfig+0x346>
 8005024:	2304      	movs	r3, #4
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	e0c5      	b.n	80051b6 <UART_SetConfig+0x346>
 800502a:	2308      	movs	r3, #8
 800502c:	77fb      	strb	r3, [r7, #31]
 800502e:	e0c2      	b.n	80051b6 <UART_SetConfig+0x346>
 8005030:	2310      	movs	r3, #16
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e0bf      	b.n	80051b6 <UART_SetConfig+0x346>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a45      	ldr	r2, [pc, #276]	; (8005150 <UART_SetConfig+0x2e0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d125      	bne.n	800508c <UART_SetConfig+0x21c>
 8005040:	4b3f      	ldr	r3, [pc, #252]	; (8005140 <UART_SetConfig+0x2d0>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800504e:	d017      	beq.n	8005080 <UART_SetConfig+0x210>
 8005050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005054:	d817      	bhi.n	8005086 <UART_SetConfig+0x216>
 8005056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505a:	d00b      	beq.n	8005074 <UART_SetConfig+0x204>
 800505c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005060:	d811      	bhi.n	8005086 <UART_SetConfig+0x216>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <UART_SetConfig+0x1fe>
 8005066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800506a:	d006      	beq.n	800507a <UART_SetConfig+0x20a>
 800506c:	e00b      	b.n	8005086 <UART_SetConfig+0x216>
 800506e:	2300      	movs	r3, #0
 8005070:	77fb      	strb	r3, [r7, #31]
 8005072:	e0a0      	b.n	80051b6 <UART_SetConfig+0x346>
 8005074:	2302      	movs	r3, #2
 8005076:	77fb      	strb	r3, [r7, #31]
 8005078:	e09d      	b.n	80051b6 <UART_SetConfig+0x346>
 800507a:	2304      	movs	r3, #4
 800507c:	77fb      	strb	r3, [r7, #31]
 800507e:	e09a      	b.n	80051b6 <UART_SetConfig+0x346>
 8005080:	2308      	movs	r3, #8
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e097      	b.n	80051b6 <UART_SetConfig+0x346>
 8005086:	2310      	movs	r3, #16
 8005088:	77fb      	strb	r3, [r7, #31]
 800508a:	e094      	b.n	80051b6 <UART_SetConfig+0x346>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a30      	ldr	r2, [pc, #192]	; (8005154 <UART_SetConfig+0x2e4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d125      	bne.n	80050e2 <UART_SetConfig+0x272>
 8005096:	4b2a      	ldr	r3, [pc, #168]	; (8005140 <UART_SetConfig+0x2d0>)
 8005098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a4:	d017      	beq.n	80050d6 <UART_SetConfig+0x266>
 80050a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050aa:	d817      	bhi.n	80050dc <UART_SetConfig+0x26c>
 80050ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b0:	d00b      	beq.n	80050ca <UART_SetConfig+0x25a>
 80050b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b6:	d811      	bhi.n	80050dc <UART_SetConfig+0x26c>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <UART_SetConfig+0x254>
 80050bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c0:	d006      	beq.n	80050d0 <UART_SetConfig+0x260>
 80050c2:	e00b      	b.n	80050dc <UART_SetConfig+0x26c>
 80050c4:	2301      	movs	r3, #1
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e075      	b.n	80051b6 <UART_SetConfig+0x346>
 80050ca:	2302      	movs	r3, #2
 80050cc:	77fb      	strb	r3, [r7, #31]
 80050ce:	e072      	b.n	80051b6 <UART_SetConfig+0x346>
 80050d0:	2304      	movs	r3, #4
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e06f      	b.n	80051b6 <UART_SetConfig+0x346>
 80050d6:	2308      	movs	r3, #8
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e06c      	b.n	80051b6 <UART_SetConfig+0x346>
 80050dc:	2310      	movs	r3, #16
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e069      	b.n	80051b6 <UART_SetConfig+0x346>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1c      	ldr	r2, [pc, #112]	; (8005158 <UART_SetConfig+0x2e8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d137      	bne.n	800515c <UART_SetConfig+0x2ec>
 80050ec:	4b14      	ldr	r3, [pc, #80]	; (8005140 <UART_SetConfig+0x2d0>)
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050fa:	d017      	beq.n	800512c <UART_SetConfig+0x2bc>
 80050fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005100:	d817      	bhi.n	8005132 <UART_SetConfig+0x2c2>
 8005102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005106:	d00b      	beq.n	8005120 <UART_SetConfig+0x2b0>
 8005108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800510c:	d811      	bhi.n	8005132 <UART_SetConfig+0x2c2>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <UART_SetConfig+0x2aa>
 8005112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005116:	d006      	beq.n	8005126 <UART_SetConfig+0x2b6>
 8005118:	e00b      	b.n	8005132 <UART_SetConfig+0x2c2>
 800511a:	2300      	movs	r3, #0
 800511c:	77fb      	strb	r3, [r7, #31]
 800511e:	e04a      	b.n	80051b6 <UART_SetConfig+0x346>
 8005120:	2302      	movs	r3, #2
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	e047      	b.n	80051b6 <UART_SetConfig+0x346>
 8005126:	2304      	movs	r3, #4
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e044      	b.n	80051b6 <UART_SetConfig+0x346>
 800512c:	2308      	movs	r3, #8
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e041      	b.n	80051b6 <UART_SetConfig+0x346>
 8005132:	2310      	movs	r3, #16
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e03e      	b.n	80051b6 <UART_SetConfig+0x346>
 8005138:	efff69f3 	.word	0xefff69f3
 800513c:	40011000 	.word	0x40011000
 8005140:	40023800 	.word	0x40023800
 8005144:	40004400 	.word	0x40004400
 8005148:	40004800 	.word	0x40004800
 800514c:	40004c00 	.word	0x40004c00
 8005150:	40005000 	.word	0x40005000
 8005154:	40011400 	.word	0x40011400
 8005158:	40007800 	.word	0x40007800
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a71      	ldr	r2, [pc, #452]	; (8005328 <UART_SetConfig+0x4b8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d125      	bne.n	80051b2 <UART_SetConfig+0x342>
 8005166:	4b71      	ldr	r3, [pc, #452]	; (800532c <UART_SetConfig+0x4bc>)
 8005168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005170:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005174:	d017      	beq.n	80051a6 <UART_SetConfig+0x336>
 8005176:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800517a:	d817      	bhi.n	80051ac <UART_SetConfig+0x33c>
 800517c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005180:	d00b      	beq.n	800519a <UART_SetConfig+0x32a>
 8005182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005186:	d811      	bhi.n	80051ac <UART_SetConfig+0x33c>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <UART_SetConfig+0x324>
 800518c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005190:	d006      	beq.n	80051a0 <UART_SetConfig+0x330>
 8005192:	e00b      	b.n	80051ac <UART_SetConfig+0x33c>
 8005194:	2300      	movs	r3, #0
 8005196:	77fb      	strb	r3, [r7, #31]
 8005198:	e00d      	b.n	80051b6 <UART_SetConfig+0x346>
 800519a:	2302      	movs	r3, #2
 800519c:	77fb      	strb	r3, [r7, #31]
 800519e:	e00a      	b.n	80051b6 <UART_SetConfig+0x346>
 80051a0:	2304      	movs	r3, #4
 80051a2:	77fb      	strb	r3, [r7, #31]
 80051a4:	e007      	b.n	80051b6 <UART_SetConfig+0x346>
 80051a6:	2308      	movs	r3, #8
 80051a8:	77fb      	strb	r3, [r7, #31]
 80051aa:	e004      	b.n	80051b6 <UART_SetConfig+0x346>
 80051ac:	2310      	movs	r3, #16
 80051ae:	77fb      	strb	r3, [r7, #31]
 80051b0:	e001      	b.n	80051b6 <UART_SetConfig+0x346>
 80051b2:	2310      	movs	r3, #16
 80051b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051be:	d15b      	bne.n	8005278 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80051c0:	7ffb      	ldrb	r3, [r7, #31]
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d827      	bhi.n	8005216 <UART_SetConfig+0x3a6>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <UART_SetConfig+0x35c>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	080051f9 	.word	0x080051f9
 80051d4:	08005201 	.word	0x08005201
 80051d8:	08005217 	.word	0x08005217
 80051dc:	08005207 	.word	0x08005207
 80051e0:	08005217 	.word	0x08005217
 80051e4:	08005217 	.word	0x08005217
 80051e8:	08005217 	.word	0x08005217
 80051ec:	0800520f 	.word	0x0800520f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f0:	f7ff f8ca 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 80051f4:	61b8      	str	r0, [r7, #24]
        break;
 80051f6:	e013      	b.n	8005220 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f8:	f7ff f8da 	bl	80043b0 <HAL_RCC_GetPCLK2Freq>
 80051fc:	61b8      	str	r0, [r7, #24]
        break;
 80051fe:	e00f      	b.n	8005220 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005200:	4b4b      	ldr	r3, [pc, #300]	; (8005330 <UART_SetConfig+0x4c0>)
 8005202:	61bb      	str	r3, [r7, #24]
        break;
 8005204:	e00c      	b.n	8005220 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005206:	f7fe fffd 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 800520a:	61b8      	str	r0, [r7, #24]
        break;
 800520c:	e008      	b.n	8005220 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005212:	61bb      	str	r3, [r7, #24]
        break;
 8005214:	e004      	b.n	8005220 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	77bb      	strb	r3, [r7, #30]
        break;
 800521e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d074      	beq.n	8005310 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	005a      	lsls	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	441a      	add	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	fbb2 f3f3 	udiv	r3, r2, r3
 800523a:	b29b      	uxth	r3, r3
 800523c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b0f      	cmp	r3, #15
 8005242:	d916      	bls.n	8005272 <UART_SetConfig+0x402>
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524a:	d212      	bcs.n	8005272 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f023 030f 	bic.w	r3, r3, #15
 8005254:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	b29b      	uxth	r3, r3
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	b29a      	uxth	r2, r3
 8005262:	89fb      	ldrh	r3, [r7, #14]
 8005264:	4313      	orrs	r3, r2
 8005266:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	89fa      	ldrh	r2, [r7, #14]
 800526e:	60da      	str	r2, [r3, #12]
 8005270:	e04e      	b.n	8005310 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	77bb      	strb	r3, [r7, #30]
 8005276:	e04b      	b.n	8005310 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005278:	7ffb      	ldrb	r3, [r7, #31]
 800527a:	2b08      	cmp	r3, #8
 800527c:	d827      	bhi.n	80052ce <UART_SetConfig+0x45e>
 800527e:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x414>)
 8005280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052b9 	.word	0x080052b9
 8005290:	080052cf 	.word	0x080052cf
 8005294:	080052bf 	.word	0x080052bf
 8005298:	080052cf 	.word	0x080052cf
 800529c:	080052cf 	.word	0x080052cf
 80052a0:	080052cf 	.word	0x080052cf
 80052a4:	080052c7 	.word	0x080052c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a8:	f7ff f86e 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 80052ac:	61b8      	str	r0, [r7, #24]
        break;
 80052ae:	e013      	b.n	80052d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b0:	f7ff f87e 	bl	80043b0 <HAL_RCC_GetPCLK2Freq>
 80052b4:	61b8      	str	r0, [r7, #24]
        break;
 80052b6:	e00f      	b.n	80052d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b8:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <UART_SetConfig+0x4c0>)
 80052ba:	61bb      	str	r3, [r7, #24]
        break;
 80052bc:	e00c      	b.n	80052d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052be:	f7fe ffa1 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80052c2:	61b8      	str	r0, [r7, #24]
        break;
 80052c4:	e008      	b.n	80052d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ca:	61bb      	str	r3, [r7, #24]
        break;
 80052cc:	e004      	b.n	80052d8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	77bb      	strb	r3, [r7, #30]
        break;
 80052d6:	bf00      	nop
    }

    if (pclk != 0U)
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d018      	beq.n	8005310 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	085a      	lsrs	r2, r3, #1
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	441a      	add	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	d908      	bls.n	800530c <UART_SetConfig+0x49c>
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005300:	d204      	bcs.n	800530c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	e001      	b.n	8005310 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800531c:	7fbb      	ldrb	r3, [r7, #30]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40007c00 	.word	0x40007c00
 800532c:	40023800 	.word	0x40023800
 8005330:	00f42400 	.word	0x00f42400

08005334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01a      	beq.n	800544a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005432:	d10a      	bne.n	800544a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  }
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af02      	add	r7, sp, #8
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005488:	f7fc fe06 	bl	8002098 <HAL_GetTick>
 800548c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b08      	cmp	r3, #8
 800549a:	d10e      	bne.n	80054ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800549c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f82d 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e023      	b.n	8005502 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d10e      	bne.n	80054e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f817 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e00d      	b.n	8005502 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	4613      	mov	r3, r2
 8005518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800551a:	e05e      	b.n	80055da <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005522:	d05a      	beq.n	80055da <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005524:	f7fc fdb8 	bl	8002098 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	429a      	cmp	r2, r3
 8005532:	d302      	bcc.n	800553a <UART_WaitOnFlagUntilTimeout+0x30>
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d11b      	bne.n	8005572 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005548:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0201 	bic.w	r2, r2, #1
 8005558:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2220      	movs	r2, #32
 8005564:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e043      	b.n	80055fa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d02c      	beq.n	80055da <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558e:	d124      	bne.n	80055da <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005598:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0201 	bic.w	r2, r2, #1
 80055b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e00f      	b.n	80055fa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	bf0c      	ite	eq
 80055ea:	2301      	moveq	r3, #1
 80055ec:	2300      	movne	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d091      	beq.n	800551c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d027      	beq.n	800566e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4b2f      	ldr	r3, [pc, #188]	; (80056e4 <FMC_SDRAM_Init+0xe0>)
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005634:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800563a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005640:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005646:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800564c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005652:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005658:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800565e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e032      	b.n	80056d4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800567a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005684:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800568a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <FMC_SDRAM_Init+0xe0>)
 800569c:	4013      	ands	r3, r2
 800569e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80056a8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80056ae:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80056b4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80056ba:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80056c0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	ffff8000 	.word	0xffff8000

080056e8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d02e      	beq.n	8005760 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800570e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	3b01      	subs	r3, #1
 800571c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800571e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	3b01      	subs	r3, #1
 8005726:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005728:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	3b01      	subs	r3, #1
 8005730:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005732:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	3b01      	subs	r3, #1
 800573a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800573c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	3b01      	subs	r3, #1
 8005744:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005746:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	3b01      	subs	r3, #1
 800574e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005750:	4313      	orrs	r3, r2
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	609a      	str	r2, [r3, #8]
 800575e:	e039      	b.n	80057d4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4b1e      	ldr	r3, [pc, #120]	; (80057e4 <FMC_SDRAM_Timing_Init+0xfc>)
 800576a:	4013      	ands	r3, r2
 800576c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	3b01      	subs	r3, #1
 8005774:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	3b01      	subs	r3, #1
 800577c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800577e:	4313      	orrs	r3, r2
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005792:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	3b01      	subs	r3, #1
 80057a0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80057a2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80057ac:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80057b6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	3b01      	subs	r3, #1
 80057be:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80057c0:	4313      	orrs	r3, r2
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	ff0f0fff 	.word	0xff0f0fff

080057e8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	4b0c      	ldr	r3, [pc, #48]	; (800582c <FMC_SDRAM_SendCommand+0x44>)
 80057fa:	4013      	ands	r3, r2
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	6811      	ldr	r1, [r2, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	6852      	ldr	r2, [r2, #4]
 8005804:	4311      	orrs	r1, r2
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	6892      	ldr	r2, [r2, #8]
 800580a:	3a01      	subs	r2, #1
 800580c:	0152      	lsls	r2, r2, #5
 800580e:	4311      	orrs	r1, r2
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	68d2      	ldr	r2, [r2, #12]
 8005814:	0252      	lsls	r2, r2, #9
 8005816:	430a      	orrs	r2, r1
 8005818:	431a      	orrs	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	ffc00000 	.word	0xffc00000

08005830 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695a      	ldr	r2, [r3, #20]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <_ZN7QAD_FMC8imp_initEv>:
//QAD_FMC Initialization Method
//
//To be called from static method init()
//Used to initialize the required GPIOs, FMC driver and SDRAM module
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAD_FMC::imp_init() {
 8005858:	b580      	push	{r7, lr}
 800585a:	b094      	sub	sp, #80	; 0x50
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]

	//Return if FMC driver is already initialized
	if (m_eState)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <_ZN7QAD_FMC8imp_initEv+0x16>
		return QA_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	e0fc      	b.n	8005a68 <_ZN7QAD_FMC8imp_initEv+0x210>


	//----------------
	//Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 800586e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	605a      	str	r2, [r3, #4]
 8005878:	609a      	str	r2, [r3, #8]
 800587a:	60da      	str	r2, [r3, #12]
 800587c:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set pins as alternate function in push-pull mode
 800587e:	2302      	movs	r3, #2
 8005880:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistors on pins
 8005882:	2301      	movs	r3, #1
 8005884:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set pin speed to very high
 8005886:	2303      	movs	r3, #3
 8005888:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_Init.Alternate = GPIO_AF12_FMC;              //Set alternate function to suit use with FMC peripheral
 800588a:	230c      	movs	r3, #12
 800588c:	64fb      	str	r3, [r7, #76]	; 0x4c

	  //Initialize required pins from GPIO port D
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 800588e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_Init);
 8005894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005898:	4619      	mov	r1, r3
 800589a:	4875      	ldr	r0, [pc, #468]	; (8005a70 <_ZN7QAD_FMC8imp_initEv+0x218>)
 800589c:	f7fd fa8c 	bl	8002db8 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port E
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80058a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80058a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 80058a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058aa:	4619      	mov	r1, r3
 80058ac:	4871      	ldr	r0, [pc, #452]	; (8005a74 <_ZN7QAD_FMC8imp_initEv+0x21c>)
 80058ae:	f7fd fa83 	bl	8002db8 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port F
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80058b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_Init);
 80058b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058bc:	4619      	mov	r1, r3
 80058be:	486e      	ldr	r0, [pc, #440]	; (8005a78 <_ZN7QAD_FMC8imp_initEv+0x220>)
 80058c0:	f7fd fa7a 	bl	8002db8 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port G
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 80058c4:	f248 1337 	movw	r3, #33079	; 0x8137
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_Init);
 80058ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058ce:	4619      	mov	r1, r3
 80058d0:	486a      	ldr	r0, [pc, #424]	; (8005a7c <_ZN7QAD_FMC8imp_initEv+0x224>)
 80058d2:	f7fd fa71 	bl	8002db8 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port H
	GPIO_Init.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80058d6:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_Init);
 80058dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058e0:	4619      	mov	r1, r3
 80058e2:	4867      	ldr	r0, [pc, #412]	; (8005a80 <_ZN7QAD_FMC8imp_initEv+0x228>)
 80058e4:	f7fd fa68 	bl	8002db8 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port I
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
 80058e8:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_Init);
 80058ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058f2:	4619      	mov	r1, r3
 80058f4:	4863      	ldr	r0, [pc, #396]	; (8005a84 <_ZN7QAD_FMC8imp_initEv+0x22c>)
 80058f6:	f7fd fa5f 	bl	8002db8 <HAL_GPIO_Init>

	//-------------------------
	//Initialize FMC Peripheral

	//Initialize FMC Clock
	__HAL_RCC_FMC_CLK_ENABLE();
 80058fa:	4b63      	ldr	r3, [pc, #396]	; (8005a88 <_ZN7QAD_FMC8imp_initEv+0x230>)
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	4a62      	ldr	r2, [pc, #392]	; (8005a88 <_ZN7QAD_FMC8imp_initEv+0x230>)
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	6393      	str	r3, [r2, #56]	; 0x38
 8005906:	4b60      	ldr	r3, [pc, #384]	; (8005a88 <_ZN7QAD_FMC8imp_initEv+0x230>)
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]

	//Fill FMC initialization details into Handle structure
	//NOTE: The settings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	m_sHandle.Instance                = FMC_SDRAM_DEVICE;                     //Set FMC SDRAM Device as required instance
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a5d      	ldr	r2, [pc, #372]	; (8005a8c <_ZN7QAD_FMC8imp_initEv+0x234>)
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.SDBank             = FMC_SDRAM_BANK1;                      //Set SDRAM as being connected to FMCs SDRAM bank 1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;          //Set size of column address to 8 bits
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	639a      	str	r2, [r3, #56]	; 0x38
	m_sHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;            //Set size of row address to 12 bits
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2204      	movs	r2, #4
 8005928:	63da      	str	r2, [r3, #60]	; 0x3c
	m_sHandle.Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;           //Set data bus width to 32 bits
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	641a      	str	r2, [r3, #64]	; 0x40
	m_sHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;         //Set number of SDRAM module internal banks to 4
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2240      	movs	r2, #64	; 0x40
 8005934:	645a      	str	r2, [r3, #68]	; 0x44
	m_sHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;              //Set column address strobe (CAS) latency to 3 cycles
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800593c:	649a      	str	r2, [r3, #72]	; 0x48
	m_sHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;   //Disable write protection, as we want to be able to both read and write to SDRAM
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;             //Set SDRAM clock period to 2 clock cycles
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800594a:	651a      	str	r2, [r3, #80]	; 0x50
	m_sHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;              //Enable read burst
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005952:	655a      	str	r2, [r3, #84]	; 0x54
	m_sHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;              //Set read pipe delay to 0 clock cycles
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	659a      	str	r2, [r3, #88]	; 0x58

	//Fill SDRAM timing details into timing structure
	//NOTE: The timings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	FMC_SDRAM_TimingTypeDef SDRAM_Timing = {0};
 800595a:	f107 0320 	add.w	r3, r7, #32
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	605a      	str	r2, [r3, #4]
 8005964:	609a      	str	r2, [r3, #8]
 8005966:	60da      	str	r2, [r3, #12]
 8005968:	611a      	str	r2, [r3, #16]
 800596a:	615a      	str	r2, [r3, #20]
 800596c:	619a      	str	r2, [r3, #24]
	SDRAM_Timing.LoadToActiveDelay    = 2;  //Set delay between a Load Mode Register command and an Active or Refresh command to 2 clock cycles
 800596e:	2302      	movs	r3, #2
 8005970:	623b      	str	r3, [r7, #32]
	SDRAM_Timing.ExitSelfRefreshDelay = 7;  //Set delay between releasing Self Refresh command and issuing of Active command to 7 clock cycles
 8005972:	2307      	movs	r3, #7
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
	SDRAM_Timing.SelfRefreshTime      = 4;  //Set minimum Self Refresh period to 4 clock cycles
 8005976:	2304      	movs	r3, #4
 8005978:	62bb      	str	r3, [r7, #40]	; 0x28
	SDRAM_Timing.RowCycleDelay        = 7;  //Set delay between Refresh command and Activate command, or between consecutive Refresh commands to 7 clock cycles
 800597a:	2307      	movs	r3, #7
 800597c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SDRAM_Timing.WriteRecoveryTime    = 2;  //Set Write Recovery Time to 2 clock cycles
 800597e:	2302      	movs	r3, #2
 8005980:	633b      	str	r3, [r7, #48]	; 0x30
	SDRAM_Timing.RPDelay              = 2;  //Set delay between a Precharge command and any other command to 2 clock cycles
 8005982:	2302      	movs	r3, #2
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
	SDRAM_Timing.RCDDelay             = 2;  //Set delay between an Activate command and a Read/Write command to 2 clock cycles
 8005986:	2302      	movs	r3, #2
 8005988:	63bb      	str	r3, [r7, #56]	; 0x38

	//Initialize the FMC peripheral using the required settings and timings to suit the specific SDRAM module
	if (HAL_SDRAM_Init(&m_sHandle, &SDRAM_Timing) != HAL_OK) {
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3330      	adds	r3, #48	; 0x30
 800598e:	f107 0220 	add.w	r2, r7, #32
 8005992:	4611      	mov	r1, r2
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff f947 	bl	8004c28 <HAL_SDRAM_Init>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	bf14      	ite	ne
 80059a0:	2301      	movne	r3, #1
 80059a2:	2300      	moveq	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <_ZN7QAD_FMC8imp_initEv+0x156>
		return QA_Fail;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e05c      	b.n	8005a68 <_ZN7QAD_FMC8imp_initEv+0x210>
	}

  //-------------------
	//Initialize SDRAM IC

	FMC_SDRAM_CommandTypeDef  SDRAM_Cmd = {0};
 80059ae:	f107 0310 	add.w	r3, r7, #16
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	605a      	str	r2, [r3, #4]
 80059b8:	609a      	str	r2, [r3, #8]
 80059ba:	60da      	str	r2, [r3, #12]

		//Send command to SDRAM module to enable its clock
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;   //Set to Clock Enable Command
 80059bc:	2301      	movs	r3, #1
 80059be:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80059c0:	2310      	movs	r3, #16
 80059c2:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 80059c4:	2301      	movs	r3, #1
 80059c6:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 80059cc:	f107 0310 	add.w	r3, r7, #16
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f890 	bl	8005af8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Delay for 1ms to allow time for SDRAM clock to enable
	HAL_Delay(1);
 80059d8:	2001      	movs	r0, #1
 80059da:	f7fc fb69 	bl	80020b0 <HAL_Delay>

		//Send command to SDRAM module to precharge all banks
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_PALL;  //Set to Precharge All command
 80059de:	2302      	movs	r3, #2
 80059e0:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80059e2:	2310      	movs	r3, #16
 80059e4:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 80059e6:	2301      	movs	r3, #1
 80059e8:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 80059ee:	f107 0310 	add.w	r3, r7, #16
 80059f2:	4619      	mov	r1, r3
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f87f 	bl	8005af8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Send command to SDRAM module to Configure Auto Refresh
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; //Set to Auto Refresh Mode command
 80059fa:	2303      	movs	r3, #3
 80059fc:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80059fe:	2310      	movs	r3, #16
 8005a00:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 8;                              //Set number of consecutive auto refresh commands to 8
 8005a02:	2308      	movs	r3, #8
 8005a04:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8005a0a:	f107 0310 	add.w	r3, r7, #16
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f871 	bl	8005af8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Program Mode Register
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;        //Set to Load Mode Register command
 8005a16:	2304      	movs	r3, #4
 8005a18:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005a1a:	2310      	movs	r3, #16
 8005a1c:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681a      	ldr	r2, [r3, #0]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8005a2a:	431a      	orrs	r2, r3
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69db      	ldr	r3, [r3, #28]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 8005a30:	431a      	orrs	r2, r3
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 8005a36:	431a      	orrs	r2, r3
																		 m_uModeReg_WriteBurst_Single;   //Set write burst length to 1 32bit word
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 8005a3c:	4313      	orrs	r3, r2
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8005a3e:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8005a40:	f107 0310 	add.w	r3, r7, #16
 8005a44:	4619      	mov	r1, r3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f856 	bl	8005af8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>


	//---------------------------------
	//Program SDRAM module refresh rate
	HAL_SDRAM_ProgramRefreshRate(&m_sHandle, m_uRefresh);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	4619      	mov	r1, r3
 8005a58:	4610      	mov	r0, r2
 8005a5a:	f7ff f94e 	bl	8004cfa <HAL_SDRAM_ProgramRefreshRate>

	//Set Driver State
	m_eState = QA_Initialized; //Set driver as being initializeed
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	//Return
	return QA_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3750      	adds	r7, #80	; 0x50
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40020c00 	.word	0x40020c00
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40021400 	.word	0x40021400
 8005a7c:	40021800 	.word	0x40021800
 8005a80:	40021c00 	.word	0x40021c00
 8005a84:	40022000 	.word	0x40022000
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	a0000140 	.word	0xa0000140

08005a90 <_ZN7QAD_FMC8imp_testEv>:
//QAD_FMC::imp_test
//QAD_FMC Test Method
//
//Used to perform read and write test of full 16 megabytes of SDRAM
//Returns QA_OK if test passes, or QA_Fail if test is not successful
QA_Result QAD_FMC::imp_test(void) {
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]

	//Write values to whole 16 megabytes of SDRAM
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aa2:	d209      	bcs.n	8005ab8 <_ZN7QAD_FMC8imp_testEv+0x28>
		QAD_FMC_Data->words[i] = i;
 8005aa4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e7f1      	b.n	8005a9c <_ZN7QAD_FMC8imp_testEv+0xc>
	}

	//Read values from while 16 megabytes of SDRAM, and confirm that they match the values that were written to it
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60bb      	str	r3, [r7, #8]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ac2:	d212      	bcs.n	8005aea <_ZN7QAD_FMC8imp_testEv+0x5a>

		//If data read doesn't match data written then return QA_Fail
		if (QAD_FMC_Data->words[i] != i)
 8005ac4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	bf14      	ite	ne
 8005ad4:	2301      	movne	r3, #1
 8005ad6:	2300      	moveq	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <_ZN7QAD_FMC8imp_testEv+0x52>
			return QA_Fail;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e004      	b.n	8005aec <_ZN7QAD_FMC8imp_testEv+0x5c>
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	60bb      	str	r3, [r7, #8]
 8005ae8:	e7e8      	b.n	8005abc <_ZN7QAD_FMC8imp_testEv+0x2c>
	}

	//Return QA_OK as if we reach this point then the test has passed
	return QA_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>:
//QAD_FMC::cmd
//QAD_FMC Initialization Method
//
//Used to send commands to SDRAM module
//pCmd - FMC_SDRAM_CommandTypeDef containing details of command to be sent to SDRAM module
void QAD_FMC::cmd(FMC_SDRAM_CommandTypeDef& pCmd) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
	HAL_SDRAM_SendCommand(&m_sHandle, &pCmd, 0);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3330      	adds	r3, #48	; 0x30
 8005b06:	2200      	movs	r2, #0
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff f8ca 	bl	8004ca4 <HAL_SDRAM_SendCommand>
}
 8005b10:	bf00      	nop
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	88fa      	ldrh	r2, [r7, #6]
 8005b30:	809a      	strh	r2, [r3, #4]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	719a      	strb	r2, [r3, #6]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	609a      	str	r2, [r3, #8]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	60da      	str	r2, [r3, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f841 	bl	8005bd2 <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b082      	sub	sp, #8
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	889b      	ldrh	r3, [r3, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	f7fd fbdb 	bl	8003328 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	741a      	strb	r2, [r3, #16]
}
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	889b      	ldrh	r3, [r3, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	4619      	mov	r1, r3
 8005b94:	f7fd fbc8 	bl	8003328 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	741a      	strb	r2, [r3, #16]
}
 8005b9e:	bf00      	nop
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	7c1b      	ldrb	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d107      	bne.n	8005bca <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7ff ffe0 	bl	8005b80 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8005bc0:	e003      	b.n	8005bca <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff ffc9 	bl	8005b5a <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8005bc8:	bf00      	nop
	}
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b088      	sub	sp, #32
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8005bda:	f107 030c 	add.w	r3, r7, #12
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	605a      	str	r2, [r3, #4]
 8005be4:	609a      	str	r2, [r3, #8]
 8005be6:	60da      	str	r2, [r3, #12]
 8005be8:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	889b      	ldrh	r3, [r3, #4]
 8005bee:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	799b      	ldrb	r3, [r3, #6]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8005bf8:	2311      	movs	r3, #17
 8005bfa:	e000      	b.n	8005bfe <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f107 020c 	add.w	r2, r7, #12
 8005c14:	4611      	mov	r1, r2
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fd f8ce 	bl	8002db8 <HAL_GPIO_Init>
}
 8005c1c:	bf00      	nop
 8005c1e:	3720      	adds	r7, #32
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Input Constructor
//
//This method will initialize the required GPIO pin with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Input::QAD_GPIO_Input(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	80fb      	strh	r3, [r7, #6]
		m_pGPIO(pGPIO),
		m_uPin(uPin),
		m_ePullMode(QAD_GPIO_PullMode_NoPull) {
 8005c32:	4a0a      	ldr	r2, [pc, #40]	; (8005c5c <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft+0x38>)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	605a      	str	r2, [r3, #4]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	88fa      	ldrh	r2, [r7, #6]
 8005c42:	811a      	strh	r2, [r3, #8]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	60da      	str	r2, [r3, #12]

	//Initialize the GPIO pin
	periphInit();
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 f817 	bl	8005c7e <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	08008dc0 	.word	0x08008dc0

08005c60 <_ZN14QAD_GPIO_Input11setPullModeE17QAD_GPIO_PullMode>:
//QAD_GPIO_Input::setPullMode
//QAD_GPIO_Input Control Method
//
//Sets new pull mode (Pull-up, Pull-down or No-pull)
//ePull - New pull mode. Member of QAD_GPIO_PullMode as defined in QAD_GPIO.hpp
void QAD_GPIO_Input::setPullMode(QAD_GPIO_PullMode ePull) {
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]

	//Store new Pull mode setting
	m_ePullMode = ePull;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	60da      	str	r2, [r3, #12]

	//Reinitialize peripheral with new Pull mode
	periphInit();
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f804 	bl	8005c7e <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <_ZN14QAD_GPIO_Input10periphInitEv>:
//QAD_GPIO_Input::periphInit
//QAD_GPIO_Input Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Input::periphInit(void) {
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b088      	sub	sp, #32
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_Init = {0};
 8005c86:	f107 030c 	add.w	r3, r7, #12
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	605a      	str	r2, [r3, #4]
 8005c90:	609a      	str	r2, [r3, #8]
 8005c92:	60da      	str	r2, [r3, #12]
 8005c94:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	891b      	ldrh	r3, [r3, #8]
 8005c9a:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = GPIO_MODE_INPUT;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f107 020c 	add.w	r2, r7, #12
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fd f87f 	bl	8002db8 <HAL_GPIO_Init>
}
 8005cba:	bf00      	nop
 8005cbc:	3720      	adds	r7, #32
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <_ZN8QAD_LTDCC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_LTDC() :
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized) {}
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f646 3225 	movw	r2, #27429	; 0x6b25
 8005cd6:	605a      	str	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f24f 4224 	movw	r2, #62500	; 0xf424
 8005cde:	609a      	str	r2, [r3, #8]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f643 5209 	movw	r2, #15625	; 0x3d09
 8005ce6:	60da      	str	r2, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4618      	mov	r0, r3
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <_ZN8QAD_LTDC3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_LTDC& get(void) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
		static QAD_LTDC instance;
 8005cfc:	4b10      	ldr	r3, [pc, #64]	; (8005d40 <_ZN8QAD_LTDC3getEv+0x48>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f3bf 8f5b 	dmb	ish
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	bf0c      	ite	eq
 8005d0e:	2301      	moveq	r3, #1
 8005d10:	2300      	movne	r3, #0
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d010      	beq.n	8005d3a <_ZN8QAD_LTDC3getEv+0x42>
 8005d18:	4809      	ldr	r0, [pc, #36]	; (8005d40 <_ZN8QAD_LTDC3getEv+0x48>)
 8005d1a:	f002 fc48 	bl	80085ae <__cxa_guard_acquire>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bf14      	ite	ne
 8005d24:	2301      	movne	r3, #1
 8005d26:	2300      	moveq	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <_ZN8QAD_LTDC3getEv+0x42>
 8005d2e:	4805      	ldr	r0, [pc, #20]	; (8005d44 <_ZN8QAD_LTDC3getEv+0x4c>)
 8005d30:	f7ff ffc7 	bl	8005cc2 <_ZN8QAD_LTDCC1Ev>
 8005d34:	4802      	ldr	r0, [pc, #8]	; (8005d40 <_ZN8QAD_LTDC3getEv+0x48>)
 8005d36:	f002 fc46 	bl	80085c6 <__cxa_guard_release>
		return instance;
 8005d3a:	4b02      	ldr	r3, [pc, #8]	; (8005d44 <_ZN8QAD_LTDC3getEv+0x4c>)
	}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	2000028c 	.word	0x2000028c
 8005d44:	20000140 	.word	0x20000140

08005d48 <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>:
	//Communication Methods

	//Used to allow OTM8009A driver (in otm8009a.h file) to communicate with OTM8009A display controller via DSI
	//uNumParams - The number of parameters being supplied
	//pParams    - Pointer to the list of parameters to be supplied
	static void dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
		get().imp_dsi_IO_WriteCmd(uNumParams, pParams);
 8005d52:	f7ff ffd1 	bl	8005cf8 <_ZN8QAD_LTDC3getEv>
 8005d56:	4603      	mov	r3, r0
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 faeb 	bl	8006338 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>
	}
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <_ZN8QAD_LTDC8imp_initEv>:
//QAD_LTDC Initialization Method
//
//To be called from static method init()
//Used to initialize the DSI and LTDC peripherals, LTDC layers, the OTM8009A display controller and the required reset and backlight control GPIO pins
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails.
QA_Result QAD_LTDC::imp_init(void) {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b0a2      	sub	sp, #136	; 0x88
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]

  //Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 8005d74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	605a      	str	r2, [r3, #4]
 8005d7e:	609a      	str	r2, [r3, #8]
 8005d80:	60da      	str	r2, [r3, #12]
 8005d82:	611a      	str	r2, [r3, #16]

	  //Initialize Backlight Control Pin
	GPIO_Init.Pin    = QAD_LTDC_BACKLIGHT_PIN;          //Set pin number. (QAD_LTDC_BACKLIGHT_PIN is defined in setup.hpp)
 8005d84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d88:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLDOWN;                   //Enable pull-down resistor so backlight defaults to off
 8005d8e:	2302      	movs	r3, #2
 8005d90:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 8005d92:	2300      	movs	r3, #0
 8005d94:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_BACKLIGHT_PORT, &GPIO_Init); //Initialize pin. (QAD_LTDC_BACKLIGHT_PORT is defined in setup.hpp)
 8005d96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4897      	ldr	r0, [pc, #604]	; (8005ffc <_ZN8QAD_LTDC8imp_initEv+0x290>)
 8005d9e:	f7fd f80b 	bl	8002db8 <HAL_GPIO_Init>

		//Initialize OTM8009A Controller Reset Pin
	GPIO_Init.Pin    = QAD_LTDC_RESET_PIN;              //Set pin number. (QAD_LTDC_RESET_PIN is defined in setup.hpp)
 8005da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da6:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 8005da8:	2301      	movs	r3, #1
 8005daa:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLUP;                     //Enable pull-up resistor as reset is active-low
 8005dac:	2301      	movs	r3, #1
 8005dae:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 8005db0:	2300      	movs	r3, #0
 8005db2:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_RESET_PORT, &GPIO_Init);     //Initialize pin. (QAD_LTDC_RESET_PORT is defined in setup.hpp)
 8005db4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005db8:	4619      	mov	r1, r3
 8005dba:	4891      	ldr	r0, [pc, #580]	; (8006000 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8005dbc:	f7fc fffc 	bl	8002db8 <HAL_GPIO_Init>


	//Reset OTM8009A Controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET); //Pull reset pin low
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dc6:	488e      	ldr	r0, [pc, #568]	; (8006000 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8005dc8:	f7fd faae 	bl	8003328 <HAL_GPIO_WritePin>
	HAL_Delay(20);                                                              //Delay for 20ms to allow for reset process
 8005dcc:	2014      	movs	r0, #20
 8005dce:	f7fc f96f 	bl	80020b0 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);   //Pull reset pin high
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dd8:	4889      	ldr	r0, [pc, #548]	; (8006000 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8005dda:	f7fd faa5 	bl	8003328 <HAL_GPIO_WritePin>
	HAL_Delay(10);                                                              //Delay for 10ms to allow reset process time to complete
 8005dde:	200a      	movs	r0, #10
 8005de0:	f7fc f966 	bl	80020b0 <HAL_Delay>


	//Initialize LTDC Peripheral Clock
	__HAL_RCC_LTDC_CLK_ENABLE();
 8005de4:	4b87      	ldr	r3, [pc, #540]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de8:	4a86      	ldr	r2, [pc, #536]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005dea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dee:	6453      	str	r3, [r2, #68]	; 0x44
 8005df0:	4b84      	ldr	r3, [pc, #528]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_LTDC_FORCE_RESET();
 8005dfc:	4b81      	ldr	r3, [pc, #516]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	4a80      	ldr	r2, [pc, #512]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005e02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e06:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_LTDC_RELEASE_RESET();
 8005e08:	4b7e      	ldr	r3, [pc, #504]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	4a7d      	ldr	r2, [pc, #500]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005e0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e12:	6253      	str	r3, [r2, #36]	; 0x24

	//Initialize DSI Peripheral Clock
	__HAL_RCC_DSI_CLK_ENABLE();
 8005e14:	4b7b      	ldr	r3, [pc, #492]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e18:	4a7a      	ldr	r2, [pc, #488]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005e1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e1e:	6453      	str	r3, [r2, #68]	; 0x44
 8005e20:	4b78      	ldr	r3, [pc, #480]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DSI_FORCE_RESET();
 8005e2c:	4b75      	ldr	r3, [pc, #468]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	4a74      	ldr	r2, [pc, #464]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005e32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e36:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_DSI_RELEASE_RESET();
 8005e38:	4b72      	ldr	r3, [pc, #456]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	4a71      	ldr	r2, [pc, #452]	; (8006004 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005e3e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005e42:	6253      	str	r3, [r2, #36]	; 0x24

	//Prepare Instances for DSI and LTDC handles (required if needing to call imp_deinit() due to failed initialization)
  m_sDSIHandle.Instance = DSI;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a70      	ldr	r2, [pc, #448]	; (8006008 <_ZN8QAD_LTDC8imp_initEv+0x29c>)
 8005e48:	611a      	str	r2, [r3, #16]
  m_sLTDCHandle.Instance = LTDC;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a6f      	ldr	r2, [pc, #444]	; (800600c <_ZN8QAD_LTDC8imp_initEv+0x2a0>)
 8005e4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  //-------------------------
  //Initialize DSI peripheral

  //Confirm DSI is currently uninitialized
  HAL_DSI_DeInit(&m_sDSIHandle);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	3310      	adds	r3, #16
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fc fbf4 	bl	8002644 <HAL_DSI_DeInit>

  //Fill out DSI PLL Initialization structure as required for DSI to operate at required clock speed
  DSI_PLLInitTypeDef DSI_PLLInit = {0};
 8005e5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	605a      	str	r2, [r3, #4]
 8005e66:	609a      	str	r2, [r3, #8]
  DSI_PLLInit.PLLNDIV = 100;
 8005e68:	2364      	movs	r3, #100	; 0x64
 8005e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  DSI_PLLInit.PLLIDF  = DSI_PLL_IN_DIV5;
 8005e6c:	2305      	movs	r3, #5
 8005e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  DSI_PLLInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8005e70:	2300      	movs	r3, #0
 8005e72:	653b      	str	r3, [r7, #80]	; 0x50

  //Fill out required DSI initialization details
  m_sDSIHandle.Init.NumberOfLanes = DSI_TWO_DATA_LANES;                   //Set DSI as using two data lanes
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	61da      	str	r2, [r3, #28]
  m_sDSIHandle.Init.TXEscapeCkdiv = m_uLCDLaneByteClk / m_uLCDClkDivisor; //Set TX Escape Clock Division
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	619a      	str	r2, [r3, #24]

  //Initialize DSI, calling imp_deinit() if initialization fails
  if (HAL_DSI_Init(&m_sDSIHandle, &DSI_PLLInit) != HAL_OK) {
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	3310      	adds	r3, #16
 8005e8e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e92:	4611      	mov	r1, r2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fc fabb 	bl	8002410 <HAL_DSI_Init>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	bf14      	ite	ne
 8005ea0:	2301      	movne	r3, #1
 8005ea2:	2300      	moveq	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d004      	beq.n	8005eb4 <_ZN8QAD_LTDC8imp_initEv+0x148>
  	imp_deinit();
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f9e4 	bl	8006278 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e1db      	b.n	800626c <_ZN8QAD_LTDC8imp_initEv+0x500>

  //----------------------------------
  //Initialize DSI video configuration

  //Generate base DSI timing parameters
  uint32_t HACT = QAD_LTDC_WIDTH;    //Horizontal Active period in pixels
 8005eb4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t VACT = QAD_LTDC_HEIGHT;   //Vertical Active period in pixels
 8005ebc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005ec0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t VSA  = 12;                //Period that vertical sync is active in pixels
 8005ec4:	230c      	movs	r3, #12
 8005ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t VBP  = 12;                //Vertical Back Porch in pixels
 8005ec8:	230c      	movs	r3, #12
 8005eca:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t VFP  = 12;                //Vertical Front Porch in pixels
 8005ecc:	230c      	movs	r3, #12
 8005ece:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t HSA  = 63;                //Period that horizontal sync is active in pixels
 8005ed0:	233f      	movs	r3, #63	; 0x3f
 8005ed2:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t HBP  = 120;               //Horizontal Back Porch in pixels
 8005ed4:	2378      	movs	r3, #120	; 0x78
 8005ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t HFP  = 120;               //Horizontal Front Porch in pixels
 8005ed8:	2378      	movs	r3, #120	; 0x78
 8005eda:	66bb      	str	r3, [r7, #104]	; 0x68

  //Fill out details of DSI Configuration Handle
  m_sDSICfgHandle.VirtualChannelID             = 0;                                      //Set virtual channel ID
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  m_sDSICfgHandle.ColorCoding                  = DSI_RGB888;                             //Set pixel format to 24bit RGB (8bits for each Red, Green and Blue)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2205      	movs	r2, #5
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
  m_sDSICfgHandle.VSPolarity                   = DSI_VSYNC_ACTIVE_HIGH;                  //Set Vertical Sync signal to active high
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	64da      	str	r2, [r3, #76]	; 0x4c
  m_sDSICfgHandle.HSPolarity                   = DSI_HSYNC_ACTIVE_HIGH;                  //Set Horizontal Sync signal to active high
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	649a      	str	r2, [r3, #72]	; 0x48
  m_sDSICfgHandle.DEPolarity                   = DSI_DATA_ENABLE_ACTIVE_HIGH;            //Set Data Enable signal to active high
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	651a      	str	r2, [r3, #80]	; 0x50
  m_sDSICfgHandle.Mode                         = DSI_VID_MODE_BURST;                     //Set Video Mode to burst mode
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2202      	movs	r2, #2
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38
  m_sDSICfgHandle.NullPacketSize               = 0xFFF;                                  //Set null packet size
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005f06:	645a      	str	r2, [r3, #68]	; 0x44
  m_sDSICfgHandle.NumberOfChunks               = 0;                                      //Set number of chunks
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	641a      	str	r2, [r3, #64]	; 0x40
  m_sDSICfgHandle.PacketSize                   = HACT;                                   //Set packet size to horizontal active period
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005f14:	63da      	str	r2, [r3, #60]	; 0x3c

  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005f1c:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 8005f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	655a      	str	r2, [r3, #84]	; 0x54

  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005f32:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 8005f3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	659a      	str	r2, [r3, #88]	; 0x58

  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8005f42:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f48:	441a      	add	r2, r3
 8005f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4c:	441a      	add	r2, r3
 8005f4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f50:	4413      	add	r3, r2
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6892      	ldr	r2, [r2, #8]
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8005f56:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	fbb2 f2f3 	udiv	r2, r2, r3
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	65da      	str	r2, [r3, #92]	; 0x5c

  m_sDSICfgHandle.VerticalSyncActive           = VSA;                                    //Set duration for vertical sync signal
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f6a:	661a      	str	r2, [r3, #96]	; 0x60
  m_sDSICfgHandle.VerticalBackPorch            = VBP;                                    //Set duration for vertical back porch
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f70:	665a      	str	r2, [r3, #100]	; 0x64
  m_sDSICfgHandle.VerticalFrontPorch           = VFP;                                    //Set duration for vertical front porch
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005f76:	669a      	str	r2, [r3, #104]	; 0x68
  m_sDSICfgHandle.VerticalActive               = VACT;                                   //Set duration of vertical active period
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f7e:	66da      	str	r2, [r3, #108]	; 0x6c

  m_sDSICfgHandle.LPCommandEnable              = DSI_LP_COMMAND_ENABLE;  //Enable DSI low power command
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005f86:	671a      	str	r2, [r3, #112]	; 0x70
  m_sDSICfgHandle.LPLargestPacketSize          = 16;                     //Set largest packet size for low power commands during VSA, VBP and VFP periods.
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2210      	movs	r2, #16
 8005f8c:	675a      	str	r2, [r3, #116]	; 0x74
  m_sDSICfgHandle.LPVACTLargestPacketSize      = 0;                      //Set largest packet size for low power commands during VACT period
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	679a      	str	r2, [r3, #120]	; 0x78
  m_sDSICfgHandle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;      //Enable low power horizontal front porch
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f9a:	67da      	str	r2, [r3, #124]	; 0x7c
  m_sDSICfgHandle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;      //Enable low power horizontal back porch
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  m_sDSICfgHandle.LPVerticalActiveEnable       = DSI_LP_VACT_ENABLE;     //Enable low power vertical active
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  m_sDSICfgHandle.LPVerticalFrontPorchEnable   = DSI_LP_VFP_ENABLE;      //Enable low power vertical front porch
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  m_sDSICfgHandle.LPVerticalBackPorchEnable    = DSI_LP_VBP_ENABLE;      //Enable low power vertical back porch
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  m_sDSICfgHandle.LPVerticalSyncActiveEnable   = DSI_LP_VSYNC_ENABLE;    //Enable low power vertical sync
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  //Configure DSI Video Mode,
  if (HAL_DSI_ConfigVideoMode(&m_sDSIHandle, &m_sDSICfgHandle) != HAL_OK) {
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f103 0210 	add.w	r2, r3, #16
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	332c      	adds	r3, #44	; 0x2c
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	f7fc fbba 	bl	8002754 <HAL_DSI_ConfigVideoMode>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	bf14      	ite	ne
 8005fe6:	2301      	movne	r3, #1
 8005fe8:	2300      	moveq	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00f      	beq.n	8006010 <_ZN8QAD_LTDC8imp_initEv+0x2a4>
  	imp_deinit();
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f941 	bl	8006278 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e138      	b.n	800626c <_ZN8QAD_LTDC8imp_initEv+0x500>
 8005ffa:	bf00      	nop
 8005ffc:	40022000 	.word	0x40022000
 8006000:	40022400 	.word	0x40022400
 8006004:	40023800 	.word	0x40023800
 8006008:	40016c00 	.word	0x40016c00
 800600c:	40016800 	.word	0x40016800

  //--------------------------
  //Initialize LTDC Peripheral

  //Fill out details for LTDC initialization
  m_sLTDCHandle.Init.HorizontalSync     = (HSA - 1);                              //Set horizontal syncronization width
 8006010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006012:	1e5a      	subs	r2, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  m_sLTDCHandle.Init.AccumulatedHBP     = (HSA + HBP - 1);                        //Set accumulated horizontal back porch width
 800601a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800601c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601e:	4413      	add	r3, r2
 8006020:	1e5a      	subs	r2, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  m_sLTDCHandle.Init.AccumulatedActiveW = (QAD_LTDC_WIDTH + HSA + HBP - 1);       //Set accumulated active width
 8006028:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800602a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602c:	4413      	add	r3, r2
 800602e:	f203 321f 	addw	r2, r3, #799	; 0x31f
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  m_sLTDCHandle.Init.TotalWidth         = (QAD_LTDC_WIDTH + HSA + HBP + HFP - 1); //Set total width
 8006038:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800603a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800603c:	441a      	add	r2, r3
 800603e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006040:	4413      	add	r3, r2
 8006042:	f203 321f 	addw	r2, r3, #799	; 0x31f
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  m_sLTDCHandle.LayerCfg->ImageWidth    = QAD_LTDC_WIDTH;                         //Sets the frame buffer line length (in pixels)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006052:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  m_sLTDCHandle.LayerCfg->ImageHeight   = QAD_LTDC_HEIGHT;                        //Sets the number of frame buffer lines (height in pixels)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800605c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  m_sLTDCHandle.Init.Backcolor.Red      = 0;                                      //Set background color red value
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
  m_sLTDCHandle.Init.Backcolor.Green    = 0;                                      //Set background color green value
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
  m_sLTDCHandle.Init.Backcolor.Blue     = 255;                                    //Set background color blue value
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	22ff      	movs	r2, #255	; 0xff
 8006074:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  m_sLTDCHandle.Init.PCPolarity         = LTDC_PCPOLARITY_IPC;                    //Set pixel clock polarity to non-inverted
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  //Complete initialization structre details based on DSI Configuration, calling imp_deinit() if failed
  if (HAL_LTDC_StructInitFromVideoConfig(&m_sLTDCHandle, &m_sDSICfgHandle) != HAL_OK) {
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	332c      	adds	r3, #44	; 0x2c
 800608a:	4619      	mov	r1, r3
 800608c:	4610      	mov	r0, r2
 800608e:	f7fd fc6f 	bl	8003970 <HAL_LTDCEx_StructInitFromVideoConfig>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	bf14      	ite	ne
 8006098:	2301      	movne	r3, #1
 800609a:	2300      	moveq	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <_ZN8QAD_LTDC8imp_initEv+0x340>
  	imp_deinit();
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f8e8 	bl	8006278 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e0df      	b.n	800626c <_ZN8QAD_LTDC8imp_initEv+0x500>
  }

  //Initialize LTDC Peripheral
  if (HAL_LTDC_Init(&m_sLTDCHandle) != HAL_OK) {
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3398      	adds	r3, #152	; 0x98
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fd f953 	bl	800335c <HAL_LTDC_Init>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bf14      	ite	ne
 80060bc:	2301      	movne	r3, #1
 80060be:	2300      	moveq	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d004      	beq.n	80060d0 <_ZN8QAD_LTDC8imp_initEv+0x364>
  	imp_deinit();
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f8d6 	bl	8006278 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0cd      	b.n	800626c <_ZN8QAD_LTDC8imp_initEv+0x500>

    //-------
    //Layer 0

  //Set pointer address for layer 0 double buffer
  m_pLayer0Ptr = (void*)0xC0000000;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80060d6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

  //Clear Layer Config structure
  LTDC_Layer = {0};
 80060da:	f107 0314 	add.w	r3, r7, #20
 80060de:	2234      	movs	r2, #52	; 0x34
 80060e0:	2100      	movs	r1, #0
 80060e2:	4618      	mov	r0, r3
 80060e4:	f002 fb18 	bl	8008718 <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 80060ec:	f44f 7348 	mov.w	r3, #800	; 0x320
 80060f0:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 80060f6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80060fa:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 80060fc:	2304      	movs	r3, #4
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006106:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 8006108:	23ff      	movs	r3, #255	; 0xff
 800610a:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 800610c:	2300      	movs	r3, #0
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 8006122:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006126:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 8006128:	2307      	movs	r3, #7
 800612a:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 800612c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006130:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 8006132:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006136:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 0 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 0) != HAL_OK) {
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3398      	adds	r3, #152	; 0x98
 800613c:	f107 0114 	add.w	r1, r7, #20
 8006140:	2200      	movs	r2, #0
 8006142:	4618      	mov	r0, r3
 8006144:	f7fd fa06 	bl	8003554 <HAL_LTDC_ConfigLayer>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	bf14      	ite	ne
 800614e:	2301      	movne	r3, #1
 8006150:	2300      	moveq	r3, #0
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <_ZN8QAD_LTDC8imp_initEv+0x3f6>
		imp_deinit();
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f88d 	bl	8006278 <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 800615e:	2301      	movs	r3, #1
 8006160:	e084      	b.n	800626c <_ZN8QAD_LTDC8imp_initEv+0x500>

	  //-------
	  //Layer 1

  //Set pointer address for layer 1 doube buffer
	m_pLayer1Ptr = (void*)((uint32_t)m_pLayer0Ptr + (QAD_LTDC_BUFFERSIZE*2));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006168:	461a      	mov	r2, r3
 800616a:	4b42      	ldr	r3, [pc, #264]	; (8006274 <_ZN8QAD_LTDC8imp_initEv+0x508>)
 800616c:	4413      	add	r3, r2
 800616e:	461a      	mov	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  //Clear Layer Config structure
  LTDC_Layer = {0};
 8006176:	f107 0314 	add.w	r3, r7, #20
 800617a:	2234      	movs	r2, #52	; 0x34
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f002 faca 	bl	8008718 <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 8006184:	2300      	movs	r3, #0
 8006186:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 8006188:	f44f 7348 	mov.w	r3, #800	; 0x320
 800618c:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 8006192:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006196:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 8006198:	2304      	movs	r3, #4
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80061a2:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 80061a4:	23ff      	movs	r3, #255	; 0xff
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 80061a8:	2300      	movs	r3, #0
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 80061be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80061c2:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 80061c4:	2307      	movs	r3, #7
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 80061c8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80061cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 80061ce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80061d2:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 1 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 1) != HAL_OK) {
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3398      	adds	r3, #152	; 0x98
 80061d8:	f107 0114 	add.w	r1, r7, #20
 80061dc:	2201      	movs	r2, #1
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fd f9b8 	bl	8003554 <HAL_LTDC_ConfigLayer>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bf14      	ite	ne
 80061ea:	2301      	movne	r3, #1
 80061ec:	2300      	moveq	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <_ZN8QAD_LTDC8imp_initEv+0x492>
		imp_deinit();
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f83f 	bl	8006278 <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e036      	b.n	800626c <_ZN8QAD_LTDC8imp_initEv+0x500>
	}


	//-------------------------------
	//Enable LTDC Layer 0 and Layer 1
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 0);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006204:	3384      	adds	r3, #132	; 0x84
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 800620e:	3284      	adds	r2, #132	; 0x84
 8006210:	f043 0301 	orr.w	r3, r3, #1
 8006214:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 1);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800621c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8006228:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800622c:	f043 0301 	orr.w	r3, r3, #1
 8006230:	6013      	str	r3, [r2, #0]


	//---------------------
	//Enable DSI Peripheral
	HAL_DSI_Start(&m_sDSIHandle);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3310      	adds	r3, #16
 8006236:	4618      	mov	r0, r3
 8006238:	f7fc fc8c 	bl	8002b54 <HAL_DSI_Start>


	//--------------------------------------
	//Initialize OTM8009A Display Controller
	OTM8009A_Init(OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 800623c:	2101      	movs	r1, #1
 800623e:	2000      	movs	r0, #0
 8006240:	f7fb fc8e 	bl	8001b60 <OTM8009A_Init>


	//-------------------------------
	//Set Initial Frame Buffer States
	m_eLayer0Back  = QAD_LTDC_Buffer1;   //Set initial layer 0 back buffer as being buffer 1 in double buffer pair
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	m_eLayer0Front = QAD_LTDC_Buffer0;   //Set initial layer 0 front buffer as being buffer 0 in double buffer pair
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	m_eLayer1Back  = QAD_LTDC_Buffer1;   //Set initial layer 1 back buffer as being buffer 1 in double buffer pair
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	m_eLayer1Front = QAD_LTDC_Buffer0;   //Set initial layer 1 front buffer as being buffer 0 in double buffer pair
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b


	//Set Driver State as being initialized
	m_eInitState = QA_Initialized;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	701a      	strb	r2, [r3, #0]

	//Return
	return QA_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3788      	adds	r7, #136	; 0x88
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	00177000 	.word	0x00177000

08006278 <_ZN8QAD_LTDC10imp_deinitEv>:
//QAD_LTDC::imp_deinit
//QAD_LTDC Initialization Method
//
//To be called from static method deinit(), or from imp_init() in the event of a failed initialization
//Used to deinitialize the DSI and LTDC peripherals, LTDC layers, reset display controller and deinitialize reset and backlight GPIO pins
void QAD_LTDC::imp_deinit(void) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]

	//----------------------
	//Disable DSI Peripheral
	HAL_DSI_Stop(&m_sDSIHandle);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3310      	adds	r3, #16
 8006284:	4618      	mov	r0, r3
 8006286:	f7fc fca1 	bl	8002bcc <HAL_DSI_Stop>


	//-------------------
	//Disable LTDC Layers
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 1);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006290:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 800629c:	f502 7282 	add.w	r2, r2, #260	; 0x104
 80062a0:	f023 0301 	bic.w	r3, r3, #1
 80062a4:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 0);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062ac:	3384      	adds	r3, #132	; 0x84
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80062b6:	3284      	adds	r2, #132	; 0x84
 80062b8:	f023 0301 	bic.w	r3, r3, #1
 80062bc:	6013      	str	r3, [r2, #0]


	//----------------------------
	//Deinitialize LTDC Peripheral
	HAL_LTDC_DeInit(&m_sLTDCHandle);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3398      	adds	r3, #152	; 0x98
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fd f91a 	bl	80034fc <HAL_LTDC_DeInit>


	//---------------------------
	//Deinitialize DSI Peripheral
	HAL_DSI_DeInit(&m_sDSIHandle);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3310      	adds	r3, #16
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fc f9b9 	bl	8002644 <HAL_DSI_DeInit>


	//---------------------------
	//Disable DSI and LTDC Clocks
	__HAL_RCC_DSI_CLK_DISABLE();
 80062d2:	4b16      	ldr	r3, [pc, #88]	; (800632c <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	4a15      	ldr	r2, [pc, #84]	; (800632c <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 80062d8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80062dc:	6453      	str	r3, [r2, #68]	; 0x44
	__HAL_RCC_LTDC_CLK_DISABLE();
 80062de:	4b13      	ldr	r3, [pc, #76]	; (800632c <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	4a12      	ldr	r2, [pc, #72]	; (800632c <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 80062e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062e8:	6453      	str	r3, [r2, #68]	; 0x44


	//------------------------
	//Reset Display controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET);
 80062ea:	2200      	movs	r2, #0
 80062ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062f0:	480f      	ldr	r0, [pc, #60]	; (8006330 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 80062f2:	f7fd f819 	bl	8003328 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80062f6:	2014      	movs	r0, #20
 80062f8:	f7fb feda 	bl	80020b0 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);
 80062fc:	2201      	movs	r2, #1
 80062fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006302:	480b      	ldr	r0, [pc, #44]	; (8006330 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 8006304:	f7fd f810 	bl	8003328 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8006308:	200a      	movs	r0, #10
 800630a:	f7fb fed1 	bl	80020b0 <HAL_Delay>


	//--------------------------------------------------
	//Deinitialize Reset and Backlight control GPIO Pins
	HAL_GPIO_DeInit(QAD_LTDC_BACKLIGHT_PORT, QAD_LTDC_BACKLIGHT_PIN);
 800630e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006312:	4808      	ldr	r0, [pc, #32]	; (8006334 <_ZN8QAD_LTDC10imp_deinitEv+0xbc>)
 8006314:	f7fc fefc 	bl	8003110 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN);
 8006318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800631c:	4804      	ldr	r0, [pc, #16]	; (8006330 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 800631e:	f7fc fef7 	bl	8003110 <HAL_GPIO_DeInit>

}
 8006322:	bf00      	nop
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40023800 	.word	0x40023800
 8006330:	40022400 	.word	0x40022400
 8006334:	40022000 	.word	0x40022000

08006338 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>:
  //DSI Command Methods


//QAD_LTDC::imp_dsi_IO_WriteCmd
//DSI Command Methods
void QAD_LTDC::imp_dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
	if (uNumParams <= 1) {
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d80f      	bhi.n	800636a <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x32>
		HAL_DSI_ShortWrite(&m_sDSIHandle, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f103 0010 	add.w	r0, r3, #16
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3301      	adds	r3, #1
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	4613      	mov	r3, r2
 8006360:	2215      	movs	r2, #21
 8006362:	2100      	movs	r1, #0
 8006364:	f7fc fc6e 	bl	8002c44 <HAL_DSI_ShortWrite>
	} else {
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
	}
}
 8006368:	e00f      	b.n	800638a <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x52>
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f103 0010 	add.w	r0, r3, #16
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	4413      	add	r3, r2
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	9200      	str	r2, [sp, #0]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2239      	movs	r2, #57	; 0x39
 8006384:	2100      	movs	r1, #0
 8006386:	f7fc fc7f 	bl	8002c88 <HAL_DSI_LongWrite>
}
 800638a:	bf00      	nop
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>:
  //------------------------------
  //QAD_LTDC Layer Control Methods

//QAD_LTDC::imp_flipLayer0Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer0Buffers(void) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d032      	beq.n	800640a <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x76>
  	return;

  switch (m_eLayer0Front) {
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x20>
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d017      	beq.n	80063e2 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x4e>
 80063b2:	e02b      	b.n	800640c <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer0Back  = QAD_LTDC_Buffer0;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer1;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80063ca:	461a      	mov	r2, r3
 80063cc:	4b11      	ldr	r3, [pc, #68]	; (8006414 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x80>)
 80063ce:	4413      	add	r3, r2
 80063d0:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3398      	adds	r3, #152	; 0x98
 80063d6:	2200      	movs	r2, #0
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fd f8f8 	bl	80035d0 <HAL_LTDC_SetAddress>
    	break;
 80063e0:	e014      	b.n	800640c <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer0Back  = QAD_LTDC_Buffer1;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer0;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80063f8:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3398      	adds	r3, #152	; 0x98
 80063fe:	2200      	movs	r2, #0
 8006400:	68f9      	ldr	r1, [r7, #12]
 8006402:	4618      	mov	r0, r3
 8006404:	f7fd f8e4 	bl	80035d0 <HAL_LTDC_SetAddress>
    	break;
 8006408:	e000      	b.n	800640c <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
  	return;
 800640a:	bf00      	nop
    }
  }
}
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	000bb800 	.word	0x000bb800

08006418 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>:


//QAD_LTDC::imp_flipLayer1Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer1Buffers(void) {
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d032      	beq.n	800648e <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x76>
  	return;

  switch (m_eLayer1Front) {
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x20>
 8006432:	2b01      	cmp	r3, #1
 8006434:	d017      	beq.n	8006466 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x4e>
 8006436:	e02b      	b.n	8006490 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer1Back  = QAD_LTDC_Buffer0;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer1;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800644e:	461a      	mov	r2, r3
 8006450:	4b11      	ldr	r3, [pc, #68]	; (8006498 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x80>)
 8006452:	4413      	add	r3, r2
 8006454:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3398      	adds	r3, #152	; 0x98
 800645a:	2201      	movs	r2, #1
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	4618      	mov	r0, r3
 8006460:	f7fd f8b6 	bl	80035d0 <HAL_LTDC_SetAddress>
    	break;
 8006464:	e014      	b.n	8006490 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer1Back  = QAD_LTDC_Buffer1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer0;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800647c:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3398      	adds	r3, #152	; 0x98
 8006482:	2201      	movs	r2, #1
 8006484:	68f9      	ldr	r1, [r7, #12]
 8006486:	4618      	mov	r0, r3
 8006488:	f7fd f8a2 	bl	80035d0 <HAL_LTDC_SetAddress>
    	break;
 800648c:	e000      	b.n	8006490 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
  	return;
 800648e:	bf00      	nop
    }
  }
}
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	000bb800 	.word	0x000bb800

0800649c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>:
}


//QAD_LTDC::imp_getLayer0BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer0BackBuffer(void) {
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x14>
		return NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e013      	b.n	80064d8 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>

	switch (m_eLayer0Back) {
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x24>
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d004      	beq.n	80064c8 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x2c>
 80064be:	e00a      	b.n	80064d6 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer0Ptr;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80064c6:	e007      	b.n	80064d8 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80064ce:	461a      	mov	r2, r3
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x48>)
 80064d2:	4413      	add	r3, r2
 80064d4:	e000      	b.n	80064d8 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	000bb800 	.word	0x000bb800

080064e8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>:
}


//QAD_LTDC::imp_getLayer1BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer1BackBuffer(void) {
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x14>
		return NULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	e013      	b.n	8006524 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>

	switch (m_eLayer1Back) {
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x24>
 8006506:	2b01      	cmp	r3, #1
 8006508:	d004      	beq.n	8006514 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x2c>
 800650a:	e00a      	b.n	8006522 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer1Ptr;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006512:	e007      	b.n	8006524 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800651a:	461a      	mov	r2, r3
 800651c:	4b04      	ldr	r3, [pc, #16]	; (8006530 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x48>)
 800651e:	4413      	add	r3, r2
 8006520:	e000      	b.n	8006524 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	000bb800 	.word	0x000bb800

08006534 <DSI_IO_WriteCmd>:

//DSI_IO_WriteCmd
//OTM8009A Display Controller Communication Methods
//Used by the OTM8009A initialization method in the otm8009a.h file
//Calls the static dsi_IO_WriteCmd method in the QAD_LTDC driver class
void DSI_IO_WriteCmd(uint32_t NbrParam, uint8_t* pParams) {
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  QAD_LTDC::dsi_IO_WriteCmd(NbrParam, pParams);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff fc01 	bl	8005d48 <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 8006554:	4b10      	ldr	r3, [pc, #64]	; (8006598 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	f3bf 8f5b 	dmb	ish
 800655c:	b2db      	uxtb	r3, r3
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	bf0c      	ite	eq
 8006566:	2301      	moveq	r3, #1
 8006568:	2300      	movne	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d010      	beq.n	8006592 <_ZN11QAD_UARTMgr3getEv+0x42>
 8006570:	4809      	ldr	r0, [pc, #36]	; (8006598 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8006572:	f002 f81c 	bl	80085ae <__cxa_guard_acquire>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	bf14      	ite	ne
 800657c:	2301      	movne	r3, #1
 800657e:	2300      	moveq	r3, #0
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <_ZN11QAD_UARTMgr3getEv+0x42>
 8006586:	4805      	ldr	r0, [pc, #20]	; (800659c <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8006588:	f000 fa3e 	bl	8006a08 <_ZN11QAD_UARTMgrC1Ev>
 800658c:	4802      	ldr	r0, [pc, #8]	; (8006598 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800658e:	f002 f81a 	bl	80085c6 <__cxa_guard_release>
		return instance;
 8006592:	4b02      	ldr	r3, [pc, #8]	; (800659c <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 8006594:	4618      	mov	r0, r3
 8006596:	bd80      	pop	{r7, pc}
 8006598:	200002f0 	.word	0x200002f0
 800659c:	20000290 	.word	0x20000290

080065a0 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	4603      	mov	r3, r0
 80065a8:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80065aa:	79fb      	ldrb	r3, [r7, #7]
 80065ac:	2b07      	cmp	r3, #7
 80065ae:	d901      	bls.n	80065b4 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 80065b0:	2302      	movs	r3, #2
 80065b2:	e00a      	b.n	80065ca <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 80065b4:	f7ff ffcc 	bl	8006550 <_ZN11QAD_UARTMgr3getEv>
 80065b8:	4601      	mov	r1, r0
 80065ba:	79fa      	ldrb	r2, [r7, #7]
 80065bc:	4613      	mov	r3, r2
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	3301      	adds	r3, #1
 80065c8:	781b      	ldrb	r3, [r3, #0]
	}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f769xx.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	4603      	mov	r3, r0
 80065da:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	2b07      	cmp	r3, #7
 80065e0:	d901      	bls.n	80065e6 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	e00a      	b.n	80065fc <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 80065e6:	f7ff ffb3 	bl	8006550 <_ZN11QAD_UARTMgr3getEv>
 80065ea:	4601      	mov	r1, r0
 80065ec:	79fa      	ldrb	r2, [r7, #7]
 80065ee:	4613      	mov	r3, r2
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	3304      	adds	r3, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
	}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	2b07      	cmp	r3, #7
 8006612:	d902      	bls.n	800661a <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 8006614:	f06f 0309 	mvn.w	r3, #9
 8006618:	e00b      	b.n	8006632 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 800661a:	f7ff ff99 	bl	8006550 <_ZN11QAD_UARTMgr3getEv>
 800661e:	4601      	mov	r1, r0
 8006620:	79fa      	ldrb	r2, [r7, #7]
 8006622:	4613      	mov	r3, r2
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	4413      	add	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	440b      	add	r3, r1
 800662c:	3308      	adds	r3, #8
 800662e:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Management Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static void registerUART(QAD_UART_Periph eUART) {
 800663a:	b580      	push	{r7, lr}
 800663c:	b082      	sub	sp, #8
 800663e:	af00      	add	r7, sp, #0
 8006640:	4603      	mov	r3, r0
 8006642:	71fb      	strb	r3, [r7, #7]
		get().imp_registerUART(eUART);
 8006644:	f7ff ff84 	bl	8006550 <_ZN11QAD_UARTMgr3getEv>
 8006648:	4602      	mov	r2, r0
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	4619      	mov	r1, r3
 800664e:	4610      	mov	r0, r2
 8006650:	f000 fa5c 	bl	8006b0c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
	}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	4603      	mov	r3, r0
 8006664:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 8006666:	f7ff ff73 	bl	8006550 <_ZN11QAD_UARTMgr3getEv>
 800666a:	4602      	mov	r2, r0
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f000 fa74 	bl	8006b5e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	4603      	mov	r3, r0
 8006686:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8006688:	f7ff ff62 	bl	8006550 <_ZN11QAD_UARTMgr3getEv>
 800668c:	4602      	mov	r2, r0
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	4619      	mov	r1, r3
 8006692:	4610      	mov	r0, r2
 8006694:	f000 fa7e 	bl	8006b94 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 80066aa:	f7ff ff51 	bl	8006550 <_ZN11QAD_UARTMgr3getEv>
 80066ae:	4602      	mov	r2, r0
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	4619      	mov	r1, r3
 80066b4:	4610      	mov	r0, r2
 80066b6:	f000 fb5f 	bl	8006d78 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 80066ba:	bf00      	nop
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or QA_Fail if initialization has failed
QA_Result QAD_UART::init(void) {
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
	if (QAD_UARTMgr::getState(m_eUART))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff ff66 	bl	80065a0 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bf14      	ite	ne
 80066da:	2301      	movne	r3, #1
 80066dc:	2300      	moveq	r3, #0
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 80066e4:	2302      	movs	r3, #2
 80066e6:	e012      	b.n	800670e <_ZN8QAD_UART4initEv+0x4c>

  QAD_UARTMgr::registerUART(m_eUART);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff ffa4 	bl	800663a <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>
  QA_Result eRes = periphInit();
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f8a7 	bl	8006846 <_ZN8QAD_UART10periphInitEv>
 80066f8:	4603      	mov	r3, r0
 80066fa:	73fb      	strb	r3, [r7, #15]

  if (eRes)
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d004      	beq.n	800670c <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff ffa8 	bl	800665c <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
  return eRes;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <_ZN8QAD_UART6deinitEv+0x24>
  	return;

  periphDeinit(DeinitFull);
 8006726:	2101      	movs	r1, #1
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f924 	bl	8006976 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
  QAD_UARTMgr::deregisterUART(m_eUART);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff ff92 	bl	800665c <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 8006738:	e000      	b.n	800673c <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 800673a:	bf00      	nop
}
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	331c      	adds	r3, #28
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006770:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Active;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800679c:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Inactive;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	f042 0220 	orr.w	r2, r2, #32
 80067c8:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Active;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	f022 0220 	bic.w	r2, r2, #32
 80067f4:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Inactive;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART transmit data register (TDR)
void QAD_UART::dataTX(uint8_t uData) {
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	460b      	mov	r3, r1
 8006814:	70fb      	strb	r3, [r7, #3]
  m_sHandle.Instance->TDR = uData;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART receive data register (RDR)
uint8_t QAD_UART::dataRX(void) {
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  return m_sHandle.Instance->RDR;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	b2db      	uxtb	r3, r3
}
 800683a:	4618      	mov	r0, r3
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 8006846:	b580      	push	{r7, lr}
 8006848:	b088      	sub	sp, #32
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 800684e:	f107 030c 	add.w	r3, r7, #12
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	605a      	str	r2, [r3, #4]
 8006858:	609a      	str	r2, [r3, #8]
 800685a:	60da      	str	r2, [r3, #12]
 800685c:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	8a1b      	ldrh	r3, [r3, #16]
 8006862:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 8006864:	2302      	movs	r3, #2
 8006866:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 800686c:	2303      	movs	r3, #3
 800686e:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	7c9b      	ldrb	r3, [r3, #18]
 8006874:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f107 020c 	add.w	r2, r7, #12
 800687e:	4611      	mov	r1, r2
 8006880:	4618      	mov	r0, r3
 8006882:	f7fc fa99 	bl	8002db8 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	8b1b      	ldrh	r3, [r3, #24]
 800688a:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 800688c:	2302      	movs	r3, #2
 800688e:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8006890:	2301      	movs	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8006894:	2303      	movs	r3, #3
 8006896:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	7e9b      	ldrb	r3, [r3, #26]
 800689c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	f107 020c 	add.w	r2, r7, #12
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fc fa85 	bl	8002db8 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	785b      	ldrb	r3, [r3, #1]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff fee3 	bl	800667e <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff fe88 	bl	80065d2 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 80068c2:	4602      	mov	r2, r0
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	220c      	movs	r2, #12
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	331c      	adds	r3, #28
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fe fa1e 	bl	8004d3a <HAL_UART_Init>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	bf14      	ite	ne
 8006904:	2301      	movne	r3, #1
 8006906:	2300      	moveq	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 800690e:	2100      	movs	r1, #0
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f830 	bl	8006976 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8006916:	2301      	movs	r3, #1
 8006918:	e029      	b.n	800696e <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	f042 0201 	orr.w	r2, r2, #1
 8006928:	601a      	str	r2, [r3, #0]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	785b      	ldrb	r3, [r3, #1]
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff fe68 	bl	8006604 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8006934:	4603      	mov	r3, r0
 8006936:	4618      	mov	r0, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	7a1b      	ldrb	r3, [r3, #8]
 800693c:	2200      	movs	r2, #0
 800693e:	4619      	mov	r1, r3
 8006940:	f7fb fcd9 	bl	80022f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	785b      	ldrb	r3, [r3, #1]
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff fe5b 	bl	8006604 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 800694e:	4603      	mov	r3, r0
 8006950:	4618      	mov	r0, r3
 8006952:	f7fb fcec 	bl	800232e <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  //Return
  return QA_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3720      	adds	r7, #32
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//QAD_UART Private Initialization Method
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	460b      	mov	r3, r1
 8006980:	70fb      	strb	r3, [r7, #3]

	//Disable IRQs
	//Check if full deinitialization is required
	if (eDeinitMode) {
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01b      	beq.n	80069c0 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff fefc 	bl	8006786 <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff ff25 	bl	80067de <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	785b      	ldrb	r3, [r3, #1]
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fe33 	bl	8006604 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 800699e:	4603      	mov	r3, r0
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fb fcd2 	bl	800234a <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	f022 0201 	bic.w	r2, r2, #1
 80069b4:	601a      	str	r2, [r3, #0]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	331c      	adds	r3, #28
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe fa0b 	bl	8004dd6 <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fe6b 	bl	80066a0 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695a      	ldr	r2, [r3, #20]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	8b1b      	ldrh	r3, [r3, #24]
 80069d2:	4619      	mov	r1, r3
 80069d4:	4610      	mov	r0, r2
 80069d6:	f7fc fb9b 	bl	8003110 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	8a1b      	ldrh	r3, [r3, #16]
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f7fc fb93 	bl	8003110 <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	701a      	strb	r2, [r3, #0]
}
 8006a00:	bf00      	nop
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method is a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8006a10:	2300      	movs	r3, #0
 8006a12:	73fb      	strb	r3, [r7, #15]
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	2b07      	cmp	r3, #7
 8006a18:	d80d      	bhi.n	8006a36 <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 8006a1a:	7bfa      	ldrb	r2, [r7, #15]
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	3301      	adds	r3, #1
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	3301      	adds	r3, #1
 8006a32:	73fb      	strb	r3, [r7, #15]
 8006a34:	e7ee      	b.n	8006a14 <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART3].eUART = QAD_UART3;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2202      	movs	r2, #2
 8006a46:	761a      	strb	r2, [r3, #24]
	m_sUARTs[QAD_UART4].eUART = QAD_UART4;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2203      	movs	r2, #3
 8006a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sUARTs[QAD_UART5].eUART = QAD_UART5;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2204      	movs	r2, #4
 8006a54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2205      	movs	r2, #5
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	m_sUARTs[QAD_UART7].eUART = QAD_UART7;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2206      	movs	r2, #6
 8006a64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	m_sUARTs[QAD_UART8].eUART = QAD_UART8;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2207      	movs	r2, #7
 8006a6c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a1e      	ldr	r2, [pc, #120]	; (8006aec <_ZN11QAD_UARTMgrC1Ev+0xe4>)
 8006a74:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a1d      	ldr	r2, [pc, #116]	; (8006af0 <_ZN11QAD_UARTMgrC1Ev+0xe8>)
 8006a7a:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART3].pInstance = USART3;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a1d      	ldr	r2, [pc, #116]	; (8006af4 <_ZN11QAD_UARTMgrC1Ev+0xec>)
 8006a80:	61da      	str	r2, [r3, #28]
	m_sUARTs[QAD_UART4].pInstance = UART4;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a1c      	ldr	r2, [pc, #112]	; (8006af8 <_ZN11QAD_UARTMgrC1Ev+0xf0>)
 8006a86:	629a      	str	r2, [r3, #40]	; 0x28
	m_sUARTs[QAD_UART5].pInstance = UART5;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a1c      	ldr	r2, [pc, #112]	; (8006afc <_ZN11QAD_UARTMgrC1Ev+0xf4>)
 8006a8c:	635a      	str	r2, [r3, #52]	; 0x34
	m_sUARTs[QAD_UART6].pInstance = USART6;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a1b      	ldr	r2, [pc, #108]	; (8006b00 <_ZN11QAD_UARTMgrC1Ev+0xf8>)
 8006a92:	641a      	str	r2, [r3, #64]	; 0x40
	m_sUARTs[QAD_UART7].pInstance = UART7;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1b      	ldr	r2, [pc, #108]	; (8006b04 <_ZN11QAD_UARTMgrC1Ev+0xfc>)
 8006a98:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sUARTs[QAD_UART8].pInstance = UART8;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a1a      	ldr	r2, [pc, #104]	; (8006b08 <_ZN11QAD_UARTMgrC1Ev+0x100>)
 8006a9e:	659a      	str	r2, [r3, #88]	; 0x58

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2225      	movs	r2, #37	; 0x25
 8006aa4:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2226      	movs	r2, #38	; 0x26
 8006aaa:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART3].eIRQ = USART3_IRQn;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2227      	movs	r2, #39	; 0x27
 8006ab0:	f883 2020 	strb.w	r2, [r3, #32]
	m_sUARTs[QAD_UART4].eIRQ = UART4_IRQn;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2234      	movs	r2, #52	; 0x34
 8006ab8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	m_sUARTs[QAD_UART5].eIRQ = UART5_IRQn;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2235      	movs	r2, #53	; 0x35
 8006ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2247      	movs	r2, #71	; 0x47
 8006ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sUARTs[QAD_UART7].eIRQ = UART7_IRQn;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2252      	movs	r2, #82	; 0x52
 8006ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	m_sUARTs[QAD_UART8].eIRQ = UART8_IRQn;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2253      	movs	r2, #83	; 0x53
 8006ad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

}
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40011000 	.word	0x40011000
 8006af0:	40004400 	.word	0x40004400
 8006af4:	40004800 	.word	0x40004800
 8006af8:	40004c00 	.word	0x40004c00
 8006afc:	40005000 	.word	0x40005000
 8006b00:	40011400 	.word	0x40011400
 8006b04:	40007800 	.word	0x40007800
 8006b08:	40007c00 	.word	0x40007c00

08006b0c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	2b07      	cmp	r3, #7
 8006b1c:	d901      	bls.n	8006b22 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e017      	b.n	8006b52 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 8006b22:	78fa      	ldrb	r2, [r7, #3]
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	4613      	mov	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	440b      	add	r3, r1
 8006b30:	3301      	adds	r3, #1
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e00a      	b.n	8006b52 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 8006b3c:	78fa      	ldrb	r2, [r7, #3]
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	4613      	mov	r3, r2
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	440b      	add	r3, r1
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	460b      	mov	r3, r1
 8006b68:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	2b07      	cmp	r3, #7
 8006b6e:	d80a      	bhi.n	8006b86 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	3301      	adds	r3, #1
 8006b80:	2200      	movs	r2, #0
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	e000      	b.n	8006b88 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 8006b86:	bf00      	nop
}
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
	...

08006b94 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 8006b94:	b480      	push	{r7}
 8006b96:	b08b      	sub	sp, #44	; 0x2c
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	2b08      	cmp	r3, #8
 8006ba4:	f200 80df 	bhi.w	8006d66 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
 8006ba8:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1c>)
 8006baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bae:	bf00      	nop
 8006bb0:	08006bd5 	.word	0x08006bd5
 8006bb4:	08006c07 	.word	0x08006c07
 8006bb8:	08006c39 	.word	0x08006c39
 8006bbc:	08006c6b 	.word	0x08006c6b
 8006bc0:	08006c9d 	.word	0x08006c9d
 8006bc4:	08006ccf 	.word	0x08006ccf
 8006bc8:	08006d01 	.word	0x08006d01
 8006bcc:	08006d33 	.word	0x08006d33
 8006bd0:	08006d65 	.word	0x08006d65
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 8006bd4:	4b67      	ldr	r3, [pc, #412]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd8:	4a66      	ldr	r2, [pc, #408]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bda:	f043 0310 	orr.w	r3, r3, #16
 8006bde:	6453      	str	r3, [r2, #68]	; 0x44
 8006be0:	4b64      	ldr	r3, [pc, #400]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be4:	f003 0310 	and.w	r3, r3, #16
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_USART1_FORCE_RESET();
 8006bec:	4b61      	ldr	r3, [pc, #388]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	4a60      	ldr	r2, [pc, #384]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bf2:	f043 0310 	orr.w	r3, r3, #16
 8006bf6:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 8006bf8:	4b5e      	ldr	r3, [pc, #376]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	4a5d      	ldr	r2, [pc, #372]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bfe:	f023 0310 	bic.w	r3, r3, #16
 8006c02:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8006c04:	e0af      	b.n	8006d66 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 8006c06:	4b5b      	ldr	r3, [pc, #364]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	4a5a      	ldr	r2, [pc, #360]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c10:	6413      	str	r3, [r2, #64]	; 0x40
 8006c12:	4b58      	ldr	r3, [pc, #352]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1a:	623b      	str	r3, [r7, #32]
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_USART2_FORCE_RESET();
 8006c1e:	4b55      	ldr	r3, [pc, #340]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	4a54      	ldr	r2, [pc, #336]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c28:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 8006c2a:	4b52      	ldr	r3, [pc, #328]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	4a51      	ldr	r2, [pc, #324]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c34:	6213      	str	r3, [r2, #32]
      break;
 8006c36:	e096      	b.n	8006d66 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_ENABLE();
 8006c38:	4b4e      	ldr	r3, [pc, #312]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	4a4d      	ldr	r2, [pc, #308]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c42:	6413      	str	r3, [r2, #64]	; 0x40
 8006c44:	4b4b      	ldr	r3, [pc, #300]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	69fb      	ldr	r3, [r7, #28]
      __HAL_RCC_USART3_FORCE_RESET();
 8006c50:	4b48      	ldr	r3, [pc, #288]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	4a47      	ldr	r2, [pc, #284]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c5a:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART3_RELEASE_RESET();
 8006c5c:	4b45      	ldr	r3, [pc, #276]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	4a44      	ldr	r2, [pc, #272]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c66:	6213      	str	r3, [r2, #32]
      break;
 8006c68:	e07d      	b.n	8006d66 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_ENABLE();
 8006c6a:	4b42      	ldr	r3, [pc, #264]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	4a41      	ldr	r2, [pc, #260]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c74:	6413      	str	r3, [r2, #64]	; 0x40
 8006c76:	4b3f      	ldr	r3, [pc, #252]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	69bb      	ldr	r3, [r7, #24]
      __HAL_RCC_UART4_FORCE_RESET();
 8006c82:	4b3c      	ldr	r3, [pc, #240]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	4a3b      	ldr	r2, [pc, #236]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c8c:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART4_RELEASE_RESET();
 8006c8e:	4b39      	ldr	r3, [pc, #228]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	4a38      	ldr	r2, [pc, #224]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c94:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006c98:	6213      	str	r3, [r2, #32]
      break;
 8006c9a:	e064      	b.n	8006d66 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_ENABLE();
 8006c9c:	4b35      	ldr	r3, [pc, #212]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca0:	4a34      	ldr	r2, [pc, #208]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8006ca8:	4b32      	ldr	r3, [pc, #200]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_UART5_FORCE_RESET();
 8006cb4:	4b2f      	ldr	r3, [pc, #188]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	4a2e      	ldr	r2, [pc, #184]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cbe:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART5_RELEASE_RESET();
 8006cc0:	4b2c      	ldr	r3, [pc, #176]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	4a2b      	ldr	r2, [pc, #172]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cc6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006cca:	6213      	str	r3, [r2, #32]
      break;
 8006ccc:	e04b      	b.n	8006d66 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 8006cce:	4b29      	ldr	r3, [pc, #164]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd2:	4a28      	ldr	r2, [pc, #160]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cd4:	f043 0320 	orr.w	r3, r3, #32
 8006cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8006cda:	4b26      	ldr	r3, [pc, #152]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	613b      	str	r3, [r7, #16]
 8006ce4:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART6_FORCE_RESET();
 8006ce6:	4b23      	ldr	r3, [pc, #140]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	4a22      	ldr	r2, [pc, #136]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cec:	f043 0320 	orr.w	r3, r3, #32
 8006cf0:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 8006cf2:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	4a1f      	ldr	r2, [pc, #124]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cf8:	f023 0320 	bic.w	r3, r3, #32
 8006cfc:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8006cfe:	e032      	b.n	8006d66 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_ENABLE();
 8006d00:	4b1c      	ldr	r3, [pc, #112]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	4a1b      	ldr	r2, [pc, #108]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d0c:	4b19      	ldr	r3, [pc, #100]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_UART7_FORCE_RESET();
 8006d18:	4b16      	ldr	r3, [pc, #88]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	4a15      	ldr	r2, [pc, #84]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d22:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART7_RELEASE_RESET();
 8006d24:	4b13      	ldr	r3, [pc, #76]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	4a12      	ldr	r2, [pc, #72]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d2e:	6213      	str	r3, [r2, #32]
      break;
 8006d30:	e019      	b.n	8006d66 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_ENABLE();
 8006d32:	4b10      	ldr	r3, [pc, #64]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	4a0f      	ldr	r2, [pc, #60]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d46:	60bb      	str	r3, [r7, #8]
 8006d48:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_UART8_FORCE_RESET();
 8006d4a:	4b0a      	ldr	r3, [pc, #40]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	4a09      	ldr	r2, [pc, #36]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d54:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART8_RELEASE_RESET();
 8006d56:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	4a06      	ldr	r2, [pc, #24]	; (8006d74 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d60:	6213      	str	r3, [r2, #32]
      break;
 8006d62:	e000      	b.n	8006d66 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UARTNone):
    	break;
 8006d64:	bf00      	nop
  }
}
 8006d66:	bf00      	nop
 8006d68:	372c      	adds	r7, #44	; 0x2c
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	40023800 	.word	0x40023800

08006d78 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8006d84:	78fb      	ldrb	r3, [r7, #3]
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d84d      	bhi.n	8006e26 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
 8006d8a:	a201      	add	r2, pc, #4	; (adr r2, 8006d90 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 8006d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006dc3 	.word	0x08006dc3
 8006d98:	08006dd1 	.word	0x08006dd1
 8006d9c:	08006ddf 	.word	0x08006ddf
 8006da0:	08006ded 	.word	0x08006ded
 8006da4:	08006dfb 	.word	0x08006dfb
 8006da8:	08006e09 	.word	0x08006e09
 8006dac:	08006e17 	.word	0x08006e17
 8006db0:	08006e25 	.word	0x08006e25
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 8006db4:	4b1f      	ldr	r3, [pc, #124]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db8:	4a1e      	ldr	r2, [pc, #120]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006dba:	f023 0310 	bic.w	r3, r3, #16
 8006dbe:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8006dc0:	e031      	b.n	8006e26 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 8006dc2:	4b1c      	ldr	r3, [pc, #112]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc6:	4a1b      	ldr	r2, [pc, #108]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006dc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006dcc:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006dce:	e02a      	b.n	8006e26 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_DISABLE();
 8006dd0:	4b18      	ldr	r3, [pc, #96]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	4a17      	ldr	r2, [pc, #92]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dda:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006ddc:	e023      	b.n	8006e26 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_DISABLE();
 8006dde:	4b15      	ldr	r3, [pc, #84]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	4a14      	ldr	r2, [pc, #80]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006de4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006de8:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006dea:	e01c      	b.n	8006e26 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_DISABLE();
 8006dec:	4b11      	ldr	r3, [pc, #68]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	4a10      	ldr	r2, [pc, #64]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006df2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006df6:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006df8:	e015      	b.n	8006e26 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 8006dfa:	4b0e      	ldr	r3, [pc, #56]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfe:	4a0d      	ldr	r2, [pc, #52]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006e00:	f023 0320 	bic.w	r3, r3, #32
 8006e04:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8006e06:	e00e      	b.n	8006e26 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_DISABLE();
 8006e08:	4b0a      	ldr	r3, [pc, #40]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0c:	4a09      	ldr	r2, [pc, #36]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006e0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e12:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006e14:	e007      	b.n	8006e26 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_DISABLE();
 8006e16:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	4a06      	ldr	r2, [pc, #24]	; (8006e34 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e20:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006e22:	e000      	b.n	8006e26 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UARTNone):
    	break;
 8006e24:	bf00      	nop
  }
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40023800 	.word	0x40023800

08006e38 <_ZN18QAT_Pixel_ARGB4444aSERKt>:
		m_uPxl = other.pxl();
		return *this;
	}

	//Assignment operator to accept a 16bit pixel value
	QAT_Pixel_ARGB4444& operator=(const uint16_t& other) {
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
		m_uPxl = other;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	881a      	ldrh	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	801a      	strh	r2, [r3, #0]
		return *this;
 8006e4a:	687b      	ldr	r3, [r7, #4]
	}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <_ZN18QAT_Pixel_ARGB44443pxlEt>:
	uint16_t pxl(void) const {
		return m_uPxl;
	}

	//Sets the current 16bit pixel value
	void pxl(uint16_t pxl) {
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	460b      	mov	r3, r1
 8006e62:	807b      	strh	r3, [r7, #2]
		m_uPxl = pxl;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	887a      	ldrh	r2, [r7, #2]
 8006e68:	801a      	strh	r2, [r3, #0]
	}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <_ZN8QAD_LTDC4initEv>:
	static QA_Result init(void) {
 8006e76:	b580      	push	{r7, lr}
 8006e78:	af00      	add	r7, sp, #0
		return get().imp_init();
 8006e7a:	f7fe ff3d 	bl	8005cf8 <_ZN8QAD_LTDC3getEv>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe ff73 	bl	8005d6c <_ZN8QAD_LTDC8imp_initEv>
 8006e86:	4603      	mov	r3, r0
	}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <_ZN8QAD_LTDC17flipLayer0BuffersEv>:
	//---------------------
	//Layer Control Methods

	//Used to flip the front and back buffer for layer 0
	//To be used at the end of rendering visual elements to layer 0 in order for them to become visible on the LCD display
	static void flipLayer0Buffers(void) {
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
		get().imp_flipLayer0Buffers();
 8006e90:	f7fe ff32 	bl	8005cf8 <_ZN8QAD_LTDC3getEv>
 8006e94:	4603      	mov	r3, r0
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff fa7c 	bl	8006394 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>
	}
 8006e9c:	bf00      	nop
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <_ZN8QAD_LTDC17flipLayer1BuffersEv>:

	//Used to flip the front and back buffer for layer 1
	//To be used at the end of rendering visual elements to layer 1 in order for them to become visible on the LCD display
	static void flipLayer1Buffers(void) {
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
		get().imp_flipLayer1Buffers();
 8006ea4:	f7fe ff28 	bl	8005cf8 <_ZN8QAD_LTDC3getEv>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff fab4 	bl	8006418 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>
	}
 8006eb0:	bf00      	nop
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <_ZN8QAD_LTDC19getLayer0BackBufferEv>:
	static void* getLayer0BackBufferPtr(void) {
		return get().imp_getLayer0BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 0
	static QAD_LTDC_Buffer* getLayer0BackBuffer(void) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
		return get().imp_getLayer0BackBuffer();
 8006eb8:	f7fe ff1e 	bl	8005cf8 <_ZN8QAD_LTDC3getEv>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff faec 	bl	800649c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>
 8006ec4:	4603      	mov	r3, r0
	}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <_ZN8QAD_LTDC19getLayer1BackBufferEv>:
	static void* getLayer1BackBufferPtr(void) {
		return get().imp_getLayer1BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 1
	static QAD_LTDC_Buffer* getLayer1BackBuffer(void) {
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	af00      	add	r7, sp, #0
		return get().imp_getLayer1BackBuffer();
 8006ece:	f7fe ff13 	bl	8005cf8 <_ZN8QAD_LTDC3getEv>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7ff fb07 	bl	80064e8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>
 8006eda:	4603      	mov	r3, r0
	}
 8006edc:	4618      	mov	r0, r3
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <_ZN7QAS_LCD8imp_initEv>:
//QAS_LCD Initialization Method
//
//To be called from static method init()
//To be used to initialize the LTDC peripheral and setup the Font Manager class
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAS_LCD::imp_init(void) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af04      	add	r7, sp, #16
 8006ee6:	6078      	str	r0, [r7, #4]

	//Return if system is already initialized
	if (m_eInitState) {
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <_ZN7QAS_LCD8imp_initEv+0x14>
  	return QA_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e044      	b.n	8006f7e <_ZN7QAS_LCD8imp_initEv+0x9e>
  }

	//Initialize LTDC driver class, returning QA_Fail if LTDC doesn't initialize successfully
	if (QAD_LTDC::init())
 8006ef4:	f7ff ffbf 	bl	8006e76 <_ZN8QAD_LTDC4initEv>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bf14      	ite	ne
 8006efe:	2301      	movne	r3, #1
 8006f00:	2300      	moveq	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <_ZN7QAS_LCD8imp_initEv+0x2c>
		return QA_Fail;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e038      	b.n	8006f7e <_ZN7QAS_LCD8imp_initEv+0x9e>


	//Setup font manager
	m_cFontMgr.clear();  //Clear font manager
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 fa2e 	bl	8007372 <_ZN15QAS_LCD_FontMgr5clearEv>

	  //Add SegoeUI 12pt font (defined in QAS_LCD_Fonts_SegoeUI12pt.hpp)
	m_cFontMgr.add("SegoeUI12pt",
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f103 000c 	add.w	r0, r3, #12
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	9302      	str	r3, [sp, #8]
 8006f20:	2303      	movs	r3, #3
 8006f22:	9301      	str	r3, [sp, #4]
 8006f24:	2311      	movs	r3, #17
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	4b17      	ldr	r3, [pc, #92]	; (8006f88 <_ZN7QAS_LCD8imp_initEv+0xa8>)
 8006f2a:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <_ZN7QAS_LCD8imp_initEv+0xac>)
 8006f2c:	4918      	ldr	r1, [pc, #96]	; (8006f90 <_ZN7QAS_LCD8imp_initEv+0xb0>)
 8006f2e:	f000 f9f9 	bl	8007324 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI12pt_Height,
								 QAS_LCD_Fonts_SegoeUI12pt_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI12pt_CharGap);

	  //Add SegoeUI 20pt Semi-bold font (defined in QAS_LCD_Fonts_SegoeUI20ptSB.hpp)
	m_cFontMgr.add("SegoeUI20ptSB",
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f103 000c 	add.w	r0, r3, #12
 8006f38:	2303      	movs	r3, #3
 8006f3a:	9302      	str	r3, [sp, #8]
 8006f3c:	2305      	movs	r3, #5
 8006f3e:	9301      	str	r3, [sp, #4]
 8006f40:	231b      	movs	r3, #27
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	4b13      	ldr	r3, [pc, #76]	; (8006f94 <_ZN7QAS_LCD8imp_initEv+0xb4>)
 8006f46:	4a14      	ldr	r2, [pc, #80]	; (8006f98 <_ZN7QAS_LCD8imp_initEv+0xb8>)
 8006f48:	4914      	ldr	r1, [pc, #80]	; (8006f9c <_ZN7QAS_LCD8imp_initEv+0xbc>)
 8006f4a:	f000 f9eb 	bl	8007324 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI20ptSB_Height,
								 QAS_LCD_Fonts_SegoeUI20ptSB_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI20ptSB_CharGap);

	  //Add Showcard Gothic 18pt font (defined in QAS_LCD_Fonts_ShowcardGothic18pt.hpp)
	m_cFontMgr.add("ShowcardGothic18pt",
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f103 000c 	add.w	r0, r3, #12
 8006f54:	2302      	movs	r3, #2
 8006f56:	9302      	str	r3, [sp, #8]
 8006f58:	2302      	movs	r3, #2
 8006f5a:	9301      	str	r3, [sp, #4]
 8006f5c:	231a      	movs	r3, #26
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <_ZN7QAS_LCD8imp_initEv+0xc0>)
 8006f62:	4a10      	ldr	r2, [pc, #64]	; (8006fa4 <_ZN7QAS_LCD8imp_initEv+0xc4>)
 8006f64:	4910      	ldr	r1, [pc, #64]	; (8006fa8 <_ZN7QAS_LCD8imp_initEv+0xc8>)
 8006f66:	f000 f9dd 	bl	8007324 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_ShowcardGothic18pt_SpaceWidth,
								 QAS_LCD_Fonts_ShowcardGothic18pt_CharGap);


	//Set System State
	m_eInitState = QA_Initialized; //Set system as now being initialized
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	701a      	strb	r2, [r3, #0]

	//Set initial data
	m_pDrawBuffer = NULL;   //Set current draw buffer to NULL
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	605a      	str	r2, [r3, #4]
	m_uDrawColor  = 0x0000; //Set current draw color to transparent black
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	811a      	strh	r2, [r3, #8]

	//Return
	return QA_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	08008f3c 	.word	0x08008f3c
 8006f8c:	08008dc4 	.word	0x08008dc4
 8006f90:	08008b1c 	.word	0x08008b1c
 8006f94:	08009838 	.word	0x08009838
 8006f98:	080096c0 	.word	0x080096c0
 8006f9c:	08008b28 	.word	0x08008b28
 8006fa0:	0800ad34 	.word	0x0800ad34
 8006fa4:	0800abbc 	.word	0x0800abbc
 8006fa8:	08008b38 	.word	0x08008b38

08006fac <_ZN7QAS_LCD14imp_flipLayer0Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer0()
//Used to flip the front and back buffer for layer 0
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer0(void) {
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer0Buffers();
 8006fb4:	f7ff ff6a 	bl	8006e8c <_ZN8QAD_LTDC17flipLayer0BuffersEv>
}
 8006fb8:	bf00      	nop
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <_ZN7QAS_LCD14imp_flipLayer1Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer1()
//Used to flip the front and back buffer for layer 1
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer1(void) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer1Buffers();
 8006fc8:	f7ff ff6a 	bl	8006ea0 <_ZN8QAD_LTDC17flipLayer1BuffersEv>
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method setDrawBuffer()
//Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
//eLayer - Sets whether the current draw buffer is layer 0 or layer1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
void QAS_LCD::imp_setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]

	//Retrieve required Back Buffer pointer based on selected layer and store to m_pDrawBuffer
	switch (eLayer) {
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x18>
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d006      	beq.n	8006ff8 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x24>
 8006fea:	e00b      	b.n	8007004 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer0):
	  	m_pDrawBuffer = QAD_LTDC::getLayer0BackBuffer();
 8006fec:	f7ff ff62 	bl	8006eb4 <_ZN8QAD_LTDC19getLayer0BackBufferEv>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	605a      	str	r2, [r3, #4]
	  	break;
 8006ff6:	e005      	b.n	8007004 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer1):
	  	m_pDrawBuffer = QAD_LTDC::getLayer1BackBuffer();
 8006ff8:	f7ff ff67 	bl	8006eca <_ZN8QAD_LTDC19getLayer1BackBufferEv>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	605a      	str	r2, [r3, #4]
	  	break;
 8007002:	bf00      	nop
	}

	//Set currently selected draw buffer to Font Manager as well, to be used for text rendering methods
	m_cFontMgr.setDrawBuffer(m_pDrawBuffer);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f103 020c 	add.w	r2, r3, #12
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	4619      	mov	r1, r3
 8007010:	4610      	mov	r0, r2
 8007012:	f000 faef 	bl	80075f4 <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>
}
 8007016:	bf00      	nop
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <_ZN7QAS_LCD16imp_setDrawColorEt>:
//QAS_LCD::imp_setDrawColor
//QAS_LCD Rendering Setup Method
//
//To be called from either of the two static setDrawColor() methods
//Sets the current color to be used for rendering methods
void QAS_LCD::imp_setDrawColor(uint16_t uColor) {
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	460b      	mov	r3, r1
 8007028:	807b      	strh	r3, [r7, #2]

	//Store new draw color
	m_uDrawColor = uColor;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	887a      	ldrh	r2, [r7, #2]
 800702e:	811a      	strh	r2, [r3, #8]

	//Set currently selected draw color to Font Manager as well, to be used for text rendering methods
  m_cFontMgr.setDrawColor(m_uDrawColor);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f103 020c 	add.w	r2, r3, #12
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	891b      	ldrh	r3, [r3, #8]
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f000 fae7 	bl	8007610 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>
}
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <_ZN7QAS_LCD15imp_clearBufferEv>:
//QAS_LCD::imp_clearBuffer
//QAS_LCD Rendering Method
//
//To be called from static clearBuffer() method
//Used to clear the currently selected buffer to the currently selected draw color
void QAS_LCD::imp_clearBuffer(void) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 8007054:	2300      	movs	r3, #0
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4a0b      	ldr	r2, [pc, #44]	; (8007088 <_ZN7QAS_LCD15imp_clearBufferEv+0x3c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d80e      	bhi.n	800707e <_ZN7QAS_LCD15imp_clearBufferEv+0x32>
  	m_pDrawBuffer->pixel[i] = m_uDrawColor;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	441a      	add	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3308      	adds	r3, #8
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f7ff fee1 	bl	8006e38 <_ZN18QAT_Pixel_ARGB4444aSERKt>
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3301      	adds	r3, #1
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	e7ec      	b.n	8007058 <_ZN7QAS_LCD15imp_clearBufferEv+0xc>
}
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	0005dbff 	.word	0x0005dbff

0800708c <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>:
//
//To be called by static drawRect() method
//Used to draw a non-filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
void QAS_LCD::imp_drawRect(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 800708c:	b580      	push	{r7, lr}
 800708e:	b08c      	sub	sp, #48	; 0x30
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.y) {
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	881a      	ldrh	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	885b      	ldrh	r3, [r3, #2]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d206      	bcs.n	80070b2 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80070b0:	e005      	b.n	80070be <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.y;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	885b      	ldrh	r3, [r3, #2]
 80070b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.y;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	885b      	ldrh	r3, [r3, #2]
 80070bc:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	885a      	ldrh	r2, [r3, #2]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	885b      	ldrh	r3, [r3, #2]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d206      	bcs.n	80070d8 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	885b      	ldrh	r3, [r3, #2]
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	885b      	ldrh	r3, [r3, #2]
 80070d4:	623b      	str	r3, [r7, #32]
 80070d6:	e005      	b.n	80070e4 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	885b      	ldrh	r3, [r3, #2]
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	885b      	ldrh	r3, [r3, #2]
 80070e2:	623b      	str	r3, [r7, #32]
  }

  //Top & Bottom
  uint32_t yt = ys*QAD_LTDC_WIDTH;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80070ea:	fb02 f303 	mul.w	r3, r2, r3
 80070ee:	617b      	str	r3, [r7, #20]
  uint32_t yb = ye*QAD_LTDC_WIDTH;
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80070f6:	fb02 f303 	mul.w	r3, r2, r3
 80070fa:	613b      	str	r3, [r7, #16]
  for (uint32_t x=xs; x<(xe+1); x++) {
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	61fb      	str	r3, [r7, #28]
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	3301      	adds	r3, #1
 8007104:	69fa      	ldr	r2, [r7, #28]
 8007106:	429a      	cmp	r2, r3
 8007108:	d21d      	bcs.n	8007146 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xba>
    m_pDrawBuffer->pixel[x+yt].pxl(m_uDrawColor);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	69f9      	ldr	r1, [r7, #28]
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	440b      	add	r3, r1
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	441a      	add	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	891b      	ldrh	r3, [r3, #8]
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f7ff fe9a 	bl	8006e58 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[x+yb].pxl(m_uDrawColor);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	69f9      	ldr	r1, [r7, #28]
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	440b      	add	r3, r1
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	441a      	add	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	891b      	ldrh	r3, [r3, #8]
 8007136:	4619      	mov	r1, r3
 8007138:	4610      	mov	r0, r2
 800713a:	f7ff fe8d 	bl	8006e58 <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t x=xs; x<(xe+1); x++) {
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	3301      	adds	r3, #1
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	e7dc      	b.n	8007100 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x74>
  }

  //Left & Right
  for (uint32_t y=(ys+1); y<ye; y++) {
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	3301      	adds	r3, #1
 800714a:	61bb      	str	r3, [r7, #24]
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	429a      	cmp	r2, r3
 8007152:	d225      	bcs.n	80071a0 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x114>
    m_pDrawBuffer->pixel[xs+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800715e:	fb01 f103 	mul.w	r1, r1, r3
 8007162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007164:	440b      	add	r3, r1
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	441a      	add	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	891b      	ldrh	r3, [r3, #8]
 800716e:	4619      	mov	r1, r3
 8007170:	4610      	mov	r0, r2
 8007172:	f7ff fe71 	bl	8006e58 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[xe+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007180:	fb01 f103 	mul.w	r1, r1, r3
 8007184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007186:	440b      	add	r3, r1
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	441a      	add	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	891b      	ldrh	r3, [r3, #8]
 8007190:	4619      	mov	r1, r3
 8007192:	4610      	mov	r0, r2
 8007194:	f7ff fe60 	bl	8006e58 <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t y=(ys+1); y<ye; y++) {
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	3301      	adds	r3, #1
 800719c:	61bb      	str	r3, [r7, #24]
 800719e:	e7d5      	b.n	800714c <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xc0>
  }
}
 80071a0:	bf00      	nop
 80071a2:	3730      	adds	r7, #48	; 0x30
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>:
//
//To be called by static drawRectFill() method
//Used to draw a filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
void QAS_LCD::imp_drawRectFill(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08c      	sub	sp, #48	; 0x30
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	881a      	ldrh	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d206      	bcs.n	80071ce <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80071cc:	e005      	b.n	80071da <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.x;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.x;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	885a      	ldrh	r2, [r3, #2]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	885b      	ldrh	r3, [r3, #2]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d206      	bcs.n	80071f4 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	885b      	ldrh	r3, [r3, #2]
 80071f0:	623b      	str	r3, [r7, #32]
 80071f2:	e005      	b.n	8007200 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	885b      	ldrh	r3, [r3, #2]
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	885b      	ldrh	r3, [r3, #2]
 80071fe:	623b      	str	r3, [r7, #32]
  }

  uint32_t yofs;
  for (uint32_t y=ys; y<(ye+1); y++) {
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	61fb      	str	r3, [r7, #28]
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	3301      	adds	r3, #1
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	429a      	cmp	r2, r3
 800720c:	d221      	bcs.n	8007252 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xaa>
    yofs = y*QAD_LTDC_WIDTH;
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007214:	fb02 f303 	mul.w	r3, r2, r3
 8007218:	617b      	str	r3, [r7, #20]
    for (uint32_t x=xs; x<(xe+1); x++) {
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007220:	3301      	adds	r3, #1
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	429a      	cmp	r2, r3
 8007226:	d210      	bcs.n	800724a <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xa2>
      m_pDrawBuffer->pixel[x+yofs].pxl(m_uDrawColor);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	69b9      	ldr	r1, [r7, #24]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	440b      	add	r3, r1
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	441a      	add	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	891b      	ldrh	r3, [r3, #8]
 800723a:	4619      	mov	r1, r3
 800723c:	4610      	mov	r0, r2
 800723e:	f7ff fe0b 	bl	8006e58 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    for (uint32_t x=xs; x<(xe+1); x++) {
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	3301      	adds	r3, #1
 8007246:	61bb      	str	r3, [r7, #24]
 8007248:	e7e9      	b.n	800721e <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x76>
  for (uint32_t y=ys; y<(ye+1); y++) {
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	3301      	adds	r3, #1
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	e7d8      	b.n	8007204 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x5c>
    }
  }
}
 8007252:	bf00      	nop
 8007254:	3730      	adds	r7, #48	; 0x30
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	6039      	str	r1, [r7, #0]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>:
	QAS_LCD_Font(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t& uHeight, uint16_t& uSpaceWidth, uint16_t& uCharGap) :
 8007272:	b580      	push	{r7, lr}
 8007274:	b086      	sub	sp, #24
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	607a      	str	r2, [r7, #4]
 800727e:	603b      	str	r3, [r7, #0]
		m_uCharGap(uCharGap) {
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	881a      	ldrh	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	871a      	strh	r2, [r3, #56]	; 0x38
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	881a      	ldrh	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007292:	881a      	ldrh	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	879a      	strh	r2, [r3, #60]	; 0x3c
		m_pDesc = (QAS_LCD_FontDesc*)pDesc;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	631a      	str	r2, [r3, #48]	; 0x30
		m_pData = (uint8_t*)pData;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	635a      	str	r2, [r3, #52]	; 0x34
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 80072a4:	2300      	movs	r3, #0
 80072a6:	75fb      	strb	r3, [r7, #23]
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	2b2f      	cmp	r3, #47	; 0x2f
 80072ac:	d807      	bhi.n	80072be <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x4c>
			m_cName[i] = 0;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	2100      	movs	r1, #0
 80072b4:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
 80072b8:	3301      	adds	r3, #1
 80072ba:	75fb      	strb	r3, [r7, #23]
 80072bc:	e7f4      	b.n	80072a8 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x36>
		strcpy(m_cName, strName);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	68b9      	ldr	r1, [r7, #8]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fb2e 	bl	8008924 <strcpy>
	}
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <_ZN12QAS_LCD_FonteqEPKc>:
	bool operator==(const char* strName) {
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
		uint8_t uLen = strlen(strName);
 80072dc:	6838      	ldr	r0, [r7, #0]
 80072de:	f7f8 ffab 	bl	8000238 <strlen>
 80072e2:	4603      	mov	r3, r0
 80072e4:	73bb      	strb	r3, [r7, #14]
		uint8_t uIdxLen = (uLen < QAS_LCD_FONTNAME_LENGTH) ? uLen : QAS_LCD_FONTNAME_LENGTH;
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	2b30      	cmp	r3, #48	; 0x30
 80072ea:	bf28      	it	cs
 80072ec:	2330      	movcs	r3, #48	; 0x30
 80072ee:	737b      	strb	r3, [r7, #13]
		for (uint8_t i=0; i<uIdxLen; i++) {
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]
 80072f4:	7bfa      	ldrb	r2, [r7, #15]
 80072f6:	7b7b      	ldrb	r3, [r7, #13]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d20e      	bcs.n	800731a <_ZN12QAS_LCD_FonteqEPKc+0x48>
			if (m_cName[i] != strName[i])
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	5cd2      	ldrb	r2, [r2, r3]
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	440b      	add	r3, r1
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d001      	beq.n	8007312 <_ZN12QAS_LCD_FonteqEPKc+0x40>
				return false;
 800730e:	2300      	movs	r3, #0
 8007310:	e004      	b.n	800731c <_ZN12QAS_LCD_FonteqEPKc+0x4a>
		for (uint8_t i=0; i<uIdxLen; i++) {
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	3301      	adds	r3, #1
 8007316:	73fb      	strb	r3, [r7, #15]
 8007318:	e7ec      	b.n	80072f4 <_ZN12QAS_LCD_FonteqEPKc+0x22>
		return true;
 800731a:	2301      	movs	r3, #1
	}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>:
//pDesc       - a pointer to an array of QAS_LCD_FontDesc structures for the font
//pData       - a pointer to an array of uint8_t values storing the bitmap data for the font
//uHeight     - the height in pixels of the font
//uSpaceWidth - the width in pixels of the space character of the font
//uCharGap    - the width in pixels of the gap between each character when rendering strings of characters
void QAS_LCD_FontMgr::add(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t uHeight, uint16_t uSpaceWidth, uint16_t uCharGap) {
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b08b      	sub	sp, #44	; 0x2c
 8007328:	af04      	add	r7, sp, #16
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	603b      	str	r3, [r7, #0]

	//Create the QAS_LCD_Font class for the new font, providing the required details
	QAS_LCD_Font* cFont = new QAS_LCD_Font(strName, pDesc, pData, uHeight, uSpaceWidth, uCharGap);
 8007332:	2040      	movs	r0, #64	; 0x40
 8007334:	f001 f94a 	bl	80085cc <_Znwj>
 8007338:	4603      	mov	r3, r0
 800733a:	461c      	mov	r4, r3
 800733c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007340:	9302      	str	r3, [sp, #8]
 8007342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	4620      	mov	r0, r4
 8007356:	f7ff ff8c 	bl	8007272 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>
 800735a:	617c      	str	r4, [r7, #20]

	//Add the pointer to the font class to the m_vFonts vector
  m_vFonts.push_back(cFont);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f107 0214 	add.w	r2, r7, #20
 8007362:	4611      	mov	r1, r2
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fa56 	bl	8007816 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>
}
 800736a:	bf00      	nop
 800736c:	371c      	adds	r7, #28
 800736e:	46bd      	mov	sp, r7
 8007370:	bd90      	pop	{r4, r7, pc}

08007372 <_ZN15QAS_LCD_FontMgr5clearEv>:

//QAS_LCD_FontMgr::clear
//QAS_LCD_FontMgr Management Method
//
//Used to clear all fonts from the font manager
void QAS_LCD_FontMgr::clear(void) {
 8007372:	b580      	push	{r7, lr}
 8007374:	b082      	sub	sp, #8
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  m_vFonts.clear();
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4618      	mov	r0, r3
 800737e:	f7fa f8a0 	bl	80014c2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <_ZN15QAS_LCD_FontMgr4findEPKc>:
//QAS_LCD_FontMgr Management Method
//
//Used to find if a font exists in the Font Manager
//strName - The name of the font to search for
//Returns -1 if a matching font is not found, or the index of the font if it is gound
int8_t QAS_LCD_FontMgr::find(const char* strName) {
 800738a:	b590      	push	{r4, r7, lr}
 800738c:	b085      	sub	sp, #20
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	6039      	str	r1, [r7, #0]
  int8_t iIdx = -1;
 8007394:	23ff      	movs	r3, #255	; 0xff
 8007396:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 8007398:	2300      	movs	r3, #0
 800739a:	73bb      	strb	r3, [r7, #14]
 800739c:	7bbc      	ldrb	r4, [r7, #14]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fa f89c 	bl	80014de <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 80073a6:	4603      	mov	r3, r0
 80073a8:	429c      	cmp	r4, r3
 80073aa:	bf34      	ite	cc
 80073ac:	2301      	movcc	r3, #1
 80073ae:	2300      	movcs	r3, #0
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d014      	beq.n	80073e0 <_ZN15QAS_LCD_FontMgr4findEPKc+0x56>
  	if (*m_vFonts[i] == strName) {
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	7bba      	ldrb	r2, [r7, #14]
 80073ba:	4611      	mov	r1, r2
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fa f89e 	bl	80014fe <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 80073c2:	4603      	mov	r3, r0
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff ff82 	bl	80072d2 <_ZN12QAS_LCD_FonteqEPKc>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <_ZN15QAS_LCD_FontMgr4findEPKc+0x4e>
  		iIdx = i;
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	3301      	adds	r3, #1
 80073dc:	73bb      	strb	r3, [r7, #14]
 80073de:	e7dd      	b.n	800739c <_ZN15QAS_LCD_FontMgr4findEPKc+0x12>
  	}
  return iIdx;
 80073e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd90      	pop	{r4, r7, pc}

080073ec <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>:
//QAS_LCD_FontMgr::setFontByName
//QAS_LCD_FontMgr Management Method
//
//Used to set the current selected font
//strName - The name of the font to select
void QAS_LCD_FontMgr::setFontByName(const char* strName) {
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]

	//Search for matching font
	int8_t iIdx = find(strName);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff ffc6 	bl	800738a <_ZN15QAS_LCD_FontMgr4findEPKc>
 80073fe:	4603      	mov	r3, r0
 8007400:	73fb      	strb	r3, [r7, #15]

	//If no matching font is found then set current font to none
  if (iIdx < 0) {
 8007402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007406:	2b00      	cmp	r3, #0
 8007408:	da06      	bge.n	8007418 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x2c>
  	m_iCurrentIdx = -1;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	22ff      	movs	r2, #255	; 0xff
 800740e:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	611a      	str	r2, [r3, #16]
  	return;
 8007416:	e00d      	b.n	8007434 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x48>
  }

  //If a matching font is found then set details as required
  m_iCurrentIdx = iIdx;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	7bfa      	ldrb	r2, [r7, #15]
 800741c:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[iIdx];
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007424:	4611      	mov	r1, r2
 8007426:	4618      	mov	r0, r3
 8007428:	f7fa f869 	bl	80014fe <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 800742c:	4603      	mov	r3, r0
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	611a      	str	r2, [r3, #16]
}
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>:
//QAS_LCD_FontMgr::setFontByIndex
//QAS_LCD_FontMgr Management Method
//
//Used to set the currently selected font
//uIdx - The index of the font to select
void QAS_LCD_FontMgr::setFontByIndex(uint8_t uIdx) {
 800743a:	b590      	push	{r4, r7, lr}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	460b      	mov	r3, r1
 8007444:	70fb      	strb	r3, [r7, #3]

	//If uIdx is outside of the range of fonts currently stored in m_vFonts index then set current font to none
  if (uIdx >= m_vFonts.size()) {
 8007446:	78fc      	ldrb	r4, [r7, #3]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4618      	mov	r0, r3
 800744c:	f7fa f847 	bl	80014de <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007450:	4603      	mov	r3, r0
 8007452:	429c      	cmp	r4, r3
 8007454:	bf2c      	ite	cs
 8007456:	2301      	movcs	r3, #1
 8007458:	2300      	movcc	r3, #0
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d006      	beq.n	800746e <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x34>
  	m_iCurrentIdx = -1;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	22ff      	movs	r2, #255	; 0xff
 8007464:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	611a      	str	r2, [r3, #16]
  	return;
 800746c:	e00d      	b.n	800748a <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x50>
  }

  //Set current font details as required
  m_iCurrentIdx = uIdx;
 800746e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[uIdx];
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	78fa      	ldrb	r2, [r7, #3]
 800747a:	4611      	mov	r1, r2
 800747c:	4618      	mov	r0, r3
 800747e:	f7fa f83e 	bl	80014fe <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8007482:	4603      	mov	r3, r0
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	611a      	str	r2, [r3, #16]
}
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	bd90      	pop	{r4, r7, pc}

08007490 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>:

//QAS_LCD_FontMgr::getSpaceWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of the space character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getSpaceWidth(void) const {
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	da01      	bge.n	80074a6 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x16>
		return 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	e003      	b.n	80074ae <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x1e>
	return m_pCurrent->m_uSpaceWidth;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80074ac:	b2db      	uxtb	r3, r3
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <_ZNK15QAS_LCD_FontMgr10getCharGapEv>:

//QAS_LCD_FontMgr::getCharGap
//QAS_LCD_FontMgr Data Methods
//
//Returns the width is pixels of the gap between each character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getCharGap(void) const {
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	da01      	bge.n	80074d0 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x16>
		return 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	e003      	b.n	80074d8 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x1e>
	return m_pCurrent->m_uCharGap;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80074d6:	b2db      	uxtb	r3, r3
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <_ZN15QAS_LCD_FontMgr12getCharWidthEc>:
//QAS_LCD_FontMgr::getCharWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of a specific character for the currently selected font.
//If no font is currently selected, or an invalid character is selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getCharWidth(char ch) {
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  if (m_iCurrentIdx < 0)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	da01      	bge.n	80074fe <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x1a>
    return 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	e01a      	b.n	8007534 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x50>
  uint16_t uWidth = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	81fb      	strh	r3, [r7, #14]
  if (ch == 32) {
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	2b20      	cmp	r3, #32
 8007506:	d104      	bne.n	8007512 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x2e>
    uWidth = m_pCurrent->m_uSpaceWidth;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800750e:	81fb      	strh	r3, [r7, #14]
 8007510:	e00f      	b.n	8007532 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
  } else if ((ch >= 33) && (ch <= 126)) {
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	2b20      	cmp	r3, #32
 8007516:	d90c      	bls.n	8007532 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	2b7e      	cmp	r3, #126	; 0x7e
 800751c:	d809      	bhi.n	8007532 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
    uWidth = m_pCurrent->m_pDesc[ch-33].uWidth;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007524:	78f9      	ldrb	r1, [r7, #3]
 8007526:	4b06      	ldr	r3, [pc, #24]	; (8007540 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x5c>)
 8007528:	440b      	add	r3, r1
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	81fb      	strh	r3, [r7, #14]
  }
  return uWidth;
 8007532:	89fb      	ldrh	r3, [r7, #14]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	3fffffdf 	.word	0x3fffffdf

08007544 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>:
//QAS_LCD_FontMgr::getStringWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns is width in pixels for a specific C-style string based on the currently selected font.
//If no font is currently selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getStringWidth(const char* str) {
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint16_t uWidth = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	81fb      	strh	r3, [r7, #14]
  uint16_t uLength = strlen(str);
 8007552:	6838      	ldr	r0, [r7, #0]
 8007554:	f7f8 fe70 	bl	8000238 <strlen>
 8007558:	4603      	mov	r3, r0
 800755a:	817b      	strh	r3, [r7, #10]
  uint8_t  uChar;

  if ((uLength == 0) || (m_iCurrentIdx < 0))
 800755c:	897b      	ldrh	r3, [r7, #10]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d004      	beq.n	800756c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x28>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	da01      	bge.n	8007570 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x2c>
    return uWidth;
 800756c:	89fb      	ldrh	r3, [r7, #14]
 800756e:	e03b      	b.n	80075e8 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xa4>

  for (uint8_t i=0; i<uLength; i++) {
 8007570:	2300      	movs	r3, #0
 8007572:	737b      	strb	r3, [r7, #13]
 8007574:	7b7a      	ldrb	r2, [r7, #13]
 8007576:	897b      	ldrh	r3, [r7, #10]
 8007578:	429a      	cmp	r2, r3
 800757a:	da2e      	bge.n	80075da <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x96>
    uChar = (uint8_t)str[i];
 800757c:	7b7b      	ldrb	r3, [r7, #13]
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	4413      	add	r3, r2
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	727b      	strb	r3, [r7, #9]
    if (uChar == 32) {
 8007586:	7a7b      	ldrb	r3, [r7, #9]
 8007588:	2b20      	cmp	r3, #32
 800758a:	d10b      	bne.n	80075a4 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x60>
      uWidth += (m_pCurrent->m_uSpaceWidth + m_pCurrent->m_uCharGap);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007598:	4413      	add	r3, r2
 800759a:	b29a      	uxth	r2, r3
 800759c:	89fb      	ldrh	r3, [r7, #14]
 800759e:	4413      	add	r3, r2
 80075a0:	81fb      	strh	r3, [r7, #14]
 80075a2:	e016      	b.n	80075d2 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
    } else if ((uChar >= 33) && (uChar <= 126)) {
 80075a4:	7a7b      	ldrb	r3, [r7, #9]
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d913      	bls.n	80075d2 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
 80075aa:	7a7b      	ldrb	r3, [r7, #9]
 80075ac:	2b7e      	cmp	r3, #126	; 0x7e
 80075ae:	d810      	bhi.n	80075d2 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
      uWidth += (m_pCurrent->m_pDesc[uChar-33].uWidth + m_pCurrent->m_uCharGap);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075b6:	7a79      	ldrb	r1, [r7, #9]
 80075b8:	4b0d      	ldr	r3, [pc, #52]	; (80075f0 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xac>)
 80075ba:	440b      	add	r3, r1
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	881a      	ldrh	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80075c8:	4413      	add	r3, r2
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	89fb      	ldrh	r3, [r7, #14]
 80075ce:	4413      	add	r3, r2
 80075d0:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i=0; i<uLength; i++) {
 80075d2:	7b7b      	ldrb	r3, [r7, #13]
 80075d4:	3301      	adds	r3, #1
 80075d6:	737b      	strb	r3, [r7, #13]
 80075d8:	e7cc      	b.n	8007574 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x30>
    }
  }
  uWidth -= m_pCurrent->m_uCharGap;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80075e0:	89fa      	ldrh	r2, [r7, #14]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	81fb      	strh	r3, [r7, #14]
  return uWidth;
 80075e6:	89fb      	ldrh	r3, [r7, #14]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	3fffffdf 	.word	0x3fffffdf

080075f4 <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>:
//QAS_LCD_FontMgr::setDrawBuffer
//QAS_LCD_FontMgr Data Methods
//
//Sets the current frame buffer for text to be rendered to
//This method is to be called by QAS_LCD::imp_SetDrawBuffer() method
void QAS_LCD_FontMgr::setDrawBuffer(QAD_LTDC_Buffer* pBuffer) {
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  m_pBuffer = pBuffer;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	615a      	str	r2, [r3, #20]
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>:
//QAS_LCD_FontMgr::setDrawColor
//QAS_LCD_FontMgr Data Methods
//
//Sets the current color for text rendering
//This method is to be called by QAS_LCD::imp_setDrawColor() method
void QAS_LCD_FontMgr::setDrawColor(uint16_t uColor) {
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	807b      	strh	r3, [r7, #2]
  m_uColor = uColor;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	887a      	ldrh	r2, [r7, #2]
 8007620:	831a      	strh	r2, [r3, #24]
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>:
//
//Used to draw a center-aligned string of characters using the currently selected font/typeface
//String will be drawn to currently selected draw buffer with currently selected draw color
//cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
//str  - The C-style string to be drawn
void QAS_LCD_FontMgr::drawStrC(QAT_Vector2_16 cPos, const char* str) {
 800762e:	b590      	push	{r4, r7, lr}
 8007630:	b089      	sub	sp, #36	; 0x24
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
  if ((m_pBuffer == NULL) || (m_iCurrentIdx < 0))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d067      	beq.n	8007712 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	db62      	blt.n	8007712 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
    return;

  uint8_t uLen = strlen(str);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7f8 fdf3 	bl	8000238 <strlen>
 8007652:	4603      	mov	r3, r0
 8007654:	77bb      	strb	r3, [r7, #30]
  if (uLen < 0) return;

  QAT_Vector2_16 cDrawPos = cPos;
 8007656:	f107 0314 	add.w	r3, r7, #20
 800765a:	68b9      	ldr	r1, [r7, #8]
 800765c:	4618      	mov	r0, r3
 800765e:	f7f9 fb5c 	bl	8000d1a <_ZN14QAT_Vector2_16C1ERKS_>
  cDrawPos.x -= (getStringWidth(str) / 2);
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f7ff ff6d 	bl	8007544 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>
 800766a:	4603      	mov	r3, r0
 800766c:	085b      	lsrs	r3, r3, #1
 800766e:	b29b      	uxth	r3, r3
 8007670:	8aba      	ldrh	r2, [r7, #20]
 8007672:	b29b      	uxth	r3, r3
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	b29b      	uxth	r3, r3
 8007678:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 800767a:	2300      	movs	r3, #0
 800767c:	77fb      	strb	r3, [r7, #31]
 800767e:	7ffa      	ldrb	r2, [r7, #31]
 8007680:	7fbb      	ldrb	r3, [r7, #30]
 8007682:	429a      	cmp	r2, r3
 8007684:	d246      	bcs.n	8007714 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe6>
  	if ((str[i] >= 33) && (str[i] <= 126)) {
 8007686:	7ffb      	ldrb	r3, [r7, #31]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	4413      	add	r3, r2
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b20      	cmp	r3, #32
 8007690:	d92c      	bls.n	80076ec <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
 8007692:	7ffb      	ldrb	r3, [r7, #31]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	4413      	add	r3, r2
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2b7e      	cmp	r3, #126	; 0x7e
 800769c:	d826      	bhi.n	80076ec <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
      drawCharP(cDrawPos, str[i]);
 800769e:	f107 0214 	add.w	r2, r7, #20
 80076a2:	f107 0318 	add.w	r3, r7, #24
 80076a6:	4611      	mov	r1, r2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7f9 fb36 	bl	8000d1a <_ZN14QAT_Vector2_16C1ERKS_>
 80076ae:	7ffb      	ldrb	r3, [r7, #31]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	4413      	add	r3, r2
 80076b4:	781a      	ldrb	r2, [r3, #0]
 80076b6:	f107 0318 	add.w	r3, r7, #24
 80076ba:	4619      	mov	r1, r3
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f82c 	bl	800771a <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>
      cDrawPos.x += getCharWidth(str[i]) + getCharGap();
 80076c2:	7ffb      	ldrb	r3, [r7, #31]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	4413      	add	r3, r2
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	4619      	mov	r1, r3
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f7ff ff09 	bl	80074e4 <_ZN15QAS_LCD_FontMgr12getCharWidthEc>
 80076d2:	4603      	mov	r3, r0
 80076d4:	461c      	mov	r4, r3
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff feef 	bl	80074ba <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 80076dc:	4603      	mov	r3, r0
 80076de:	4423      	add	r3, r4
 80076e0:	8aba      	ldrh	r2, [r7, #20]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	4413      	add	r3, r2
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	82bb      	strh	r3, [r7, #20]
 80076ea:	e00e      	b.n	800770a <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xdc>
  	} else {
  		cDrawPos.x += getSpaceWidth() + getCharGap();
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7ff fecf 	bl	8007490 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>
 80076f2:	4603      	mov	r3, r0
 80076f4:	461c      	mov	r4, r3
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f7ff fedf 	bl	80074ba <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 80076fc:	4603      	mov	r3, r0
 80076fe:	4423      	add	r3, r4
 8007700:	8aba      	ldrh	r2, [r7, #20]
 8007702:	b29b      	uxth	r3, r3
 8007704:	4413      	add	r3, r2
 8007706:	b29b      	uxth	r3, r3
 8007708:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 800770a:	7ffb      	ldrb	r3, [r7, #31]
 800770c:	3301      	adds	r3, #1
 800770e:	77fb      	strb	r3, [r7, #31]
 8007710:	e7b5      	b.n	800767e <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0x50>
    return;
 8007712:	bf00      	nop
  	}
  }
}
 8007714:	3724      	adds	r7, #36	; 0x24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd90      	pop	{r4, r7, pc}

0800771a <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>:
//QAS_LCD_FontMgr::drawCharP
//QAS_LCD_FontMgr Private Rendering Method
//
//Used to draw an individual character based on selected font's bitmap data
//This method is to be used by drawChar(), drawStrL(), drawStrC() and drawStrR() methods
void QAS_LCD_FontMgr::drawCharP(QAT_Vector2_16 cPos, char ch) {
 800771a:	b580      	push	{r7, lr}
 800771c:	b08a      	sub	sp, #40	; 0x28
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	4613      	mov	r3, r2
 8007726:	71fb      	strb	r3, [r7, #7]
  uint16_t uLetter = (uint8_t)ch - 33;
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	b29b      	uxth	r3, r3
 800772c:	3b21      	subs	r3, #33	; 0x21
 800772e:	83bb      	strh	r3, [r7, #28]
  uint16_t uWidth  = m_pCurrent->m_pDesc[uLetter].uWidth;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007736:	8bbb      	ldrh	r3, [r7, #28]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	837b      	strh	r3, [r7, #26]
  uint32_t uOffset = m_pCurrent->m_pDesc[uLetter].uOffset;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007746:	8bbb      	ldrh	r3, [r7, #28]
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	885b      	ldrh	r3, [r3, #2]
 800774e:	627b      	str	r3, [r7, #36]	; 0x24

  uint8_t uLine;
  uint8_t uLineInc;
  uint32_t uCur;

  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 8007750:	2300      	movs	r3, #0
 8007752:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007756:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	6912      	ldr	r2, [r2, #16]
 800775e:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8007760:	4293      	cmp	r3, r2
 8007762:	da54      	bge.n	800780e <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xf4>
    uLineInc = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uCur = cPos.x+((cPos.y+uHeight)*QAD_LTDC_WIDTH);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	4619      	mov	r1, r3
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	885b      	ldrh	r3, [r3, #2]
 8007774:	461a      	mov	r2, r3
 8007776:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800777a:	4413      	add	r3, r2
 800777c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007780:	fb02 f303 	mul.w	r3, r2, r3
 8007784:	440b      	add	r3, r1
 8007786:	617b      	str	r3, [r7, #20]
    for (uint16_t i=0; i<uWidth; i++) {
 8007788:	2300      	movs	r3, #0
 800778a:	83fb      	strh	r3, [r7, #30]
 800778c:	8bfa      	ldrh	r2, [r7, #30]
 800778e:	8b7b      	ldrh	r3, [r7, #26]
 8007790:	429a      	cmp	r2, r3
 8007792:	d236      	bcs.n	8007802 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe8>
      if (uLineInc == 0) {
 8007794:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x98>
        uLine = m_pCurrent->m_pData[uOffset];
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	4413      	add	r3, r2
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uOffset++;
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	3301      	adds	r3, #1
 80077b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (uLine & 0x01)
 80077b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00c      	beq.n	80077d8 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xbe>
        m_pBuffer->pixel[uCur+i] = m_uColor;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	695a      	ldr	r2, [r3, #20]
 80077c2:	8bf9      	ldrh	r1, [r7, #30]
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	440b      	add	r3, r1
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	441a      	add	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3318      	adds	r3, #24
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f7ff fb30 	bl	8006e38 <_ZN18QAT_Pixel_ARGB4444aSERKt>
      uLine = uLine >> 1;
 80077d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077dc:	105b      	asrs	r3, r3, #1
 80077de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      uLineInc++;
 80077e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80077e6:	3301      	adds	r3, #1
 80077e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (uLineInc > 7)
 80077ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80077f0:	2b07      	cmp	r3, #7
 80077f2:	d902      	bls.n	80077fa <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe0>
        uLineInc = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    for (uint16_t i=0; i<uWidth; i++) {
 80077fa:	8bfb      	ldrh	r3, [r7, #30]
 80077fc:	3301      	adds	r3, #1
 80077fe:	83fb      	strh	r3, [r7, #30]
 8007800:	e7c4      	b.n	800778c <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x72>
  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 8007802:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007806:	3301      	adds	r3, #1
 8007808:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800780c:	e7a3      	b.n	8007756 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x3c>
    }
  }
}
 800780e:	bf00      	nop
 8007810:	3728      	adds	r7, #40	; 0x28
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8007816:	b580      	push	{r7, lr}
 8007818:	b082      	sub	sp, #8
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	429a      	cmp	r2, r3
 800782a:	d00c      	beq.n	8007846 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	4619      	mov	r1, r3
 8007836:	f000 f823 	bl	8007880 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	1d1a      	adds	r2, r3, #4
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	605a      	str	r2, [r3, #4]
      }
 8007844:	e008      	b.n	8007858 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f82d 	bl	80078a6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>
 800784c:	4603      	mov	r3, r0
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f84e 	bl	80078f4 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	f107 030c 	add.w	r3, r7, #12
 800786e:	4611      	mov	r1, r2
 8007870:	4618      	mov	r0, r3
 8007872:	f000 f8fb 	bl	8007a6c <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f908 	bl	8007aa2 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8007892:	4603      	mov	r3, r0
 8007894:	461a      	mov	r2, r3
 8007896:	68b9      	ldr	r1, [r7, #8]
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f90d 	bl	8007ab8 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 800789e:	bf00      	nop
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b084      	sub	sp, #16
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	1d1a      	adds	r2, r3, #4
 80078b2:	f107 030c 	add.w	r3, r7, #12
 80078b6:	4611      	mov	r1, r2
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 f8d7 	bl	8007a6c <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 f805 	bl	80078de <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80078d4:	4603      	mov	r3, r0
      }
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80078e6:	2301      	movs	r3, #1
      }
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80078f4:	b5b0      	push	{r4, r5, r7, lr}
 80078f6:	b08c      	sub	sp, #48	; 0x30
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8007900:	4a59      	ldr	r2, [pc, #356]	; (8007a68 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8007902:	2101      	movs	r1, #1
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 f8ed 	bl	8007ae4 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>
 800790a:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff ffa1 	bl	8007860 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>
 800791e:	4603      	mov	r3, r0
 8007920:	617b      	str	r3, [r7, #20]
 8007922:	f107 0214 	add.w	r2, r7, #20
 8007926:	f107 0308 	add.w	r3, r7, #8
 800792a:	4611      	mov	r1, r2
 800792c:	4618      	mov	r0, r3
 800792e:	f000 f920 	bl	8007b72 <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8007932:	4603      	mov	r3, r0
 8007934:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800793a:	4618      	mov	r0, r3
 800793c:	f000 f92e 	bl	8007b9c <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>
 8007940:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8007946:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	18d5      	adds	r5, r2, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f8a6 	bl	8007aa2 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8007956:	4603      	mov	r3, r0
 8007958:	461a      	mov	r2, r3
 800795a:	4629      	mov	r1, r5
 800795c:	4620      	mov	r0, r4
 800795e:	f7ff ff8f 	bl	8007880 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8007962:	2300      	movs	r3, #0
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8007966:	f7ff ffaf 	bl	80078c8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d027      	beq.n	80079c0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007970:	f107 0308 	add.w	r3, r7, #8
 8007974:	4618      	mov	r0, r3
 8007976:	f000 f889 	bl	8007a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800797a:	4603      	mov	r3, r0
 800797c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4618      	mov	r0, r3
 8007982:	f7f9 fe74 	bl	800166e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007986:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	4621      	mov	r1, r4
 800798c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800798e:	f000 f919 	bl	8007bc4 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8007992:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8007994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007996:	3304      	adds	r3, #4
 8007998:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800799a:	f107 0308 	add.w	r3, r7, #8
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 f874 	bl	8007a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 80079a4:	4603      	mov	r3, r0
 80079a6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7f9 fe5f 	bl	800166e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 80079b0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80079b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079b4:	6a39      	ldr	r1, [r7, #32]
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 f904 	bl	8007bc4 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80079bc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80079be:	e026      	b.n	8007a0e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80079c0:	f107 0308 	add.w	r3, r7, #8
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 f861 	bl	8007a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 80079ca:	4603      	mov	r3, r0
 80079cc:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7f9 fe4c 	bl	800166e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 80079d6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	4621      	mov	r1, r4
 80079dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079de:	f000 f905 	bl	8007bec <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 80079e2:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80079e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e6:	3304      	adds	r3, #4
 80079e8:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80079ea:	f107 0308 	add.w	r3, r7, #8
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 f84c 	bl	8007a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 80079f4:	4603      	mov	r3, r0
 80079f6:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7f9 fe37 	bl	800166e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007a00:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8007a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a04:	6a39      	ldr	r1, [r7, #32]
 8007a06:	4620      	mov	r0, r4
 8007a08:	f000 f8f0 	bl	8007bec <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007a0c:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8007a0e:	f7ff ff5b 	bl	80078c8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 8007a12:	4603      	mov	r3, r0
 8007a14:	f083 0301 	eor.w	r3, r3, #1
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d009      	beq.n	8007a32 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7f9 fe24 	bl	800166e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007a26:	4603      	mov	r3, r0
 8007a28:	461a      	mov	r2, r3
 8007a2a:	6a39      	ldr	r1, [r7, #32]
 8007a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a2e:	f7f9 fe29 	bl	8001684 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8007a32:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8007a3e:	461a      	mov	r2, r3
 8007a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a42:	f7f9 fe01 	bl	8001648 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a50:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8007a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	441a      	add	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	609a      	str	r2, [r3, #8]
    }
 8007a5e:	bf00      	nop
 8007a60:	3730      	adds	r7, #48	; 0x30
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bdb0      	pop	{r4, r5, r7, pc}
 8007a66:	bf00      	nop
 8007a68:	08008b4c 	.word	0x08008b4c

08007a6c <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4618      	mov	r0, r3
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8007ab8:	b590      	push	{r4, r7, lr}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7ff ffec 	bl	8007aa2 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8007aca:	4603      	mov	r3, r0
 8007acc:	681c      	ldr	r4, [r3, #0]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	2004      	movs	r0, #4
 8007ad4:	f7ff fbc1 	bl	800725a <_ZnwjPv>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	601c      	str	r4, [r3, #0]
 8007adc:	bf00      	nop
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd90      	pop	{r4, r7, pc}

08007ae4 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8007ae4:	b590      	push	{r4, r7, lr}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 f894 	bl	8007c1e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007af6:	4604      	mov	r4, r0
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f7f9 fcf0 	bl	80014de <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007afe:	4603      	mov	r3, r0
 8007b00:	1ae2      	subs	r2, r4, r3
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	bf34      	ite	cc
 8007b08:	2301      	movcc	r3, #1
 8007b0a:	2300      	movcs	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fd73 	bl	80085fe <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f7f9 fce0 	bl	80014de <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007b1e:	4604      	mov	r4, r0
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f7f9 fcdc 	bl	80014de <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007b26:	4603      	mov	r3, r0
 8007b28:	613b      	str	r3, [r7, #16]
 8007b2a:	f107 0208 	add.w	r2, r7, #8
 8007b2e:	f107 0310 	add.w	r3, r7, #16
 8007b32:	4611      	mov	r1, r2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 f883 	bl	8007c40 <_ZSt3maxIjERKT_S2_S2_>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4423      	add	r3, r4
 8007b40:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f7f9 fccb 	bl	80014de <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d306      	bcc.n	8007b5e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 f864 	bl	8007c1e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007b56:	4602      	mov	r2, r0
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d904      	bls.n	8007b68 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x84>
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 f85d 	bl	8007c1e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007b64:	4603      	mov	r3, r0
 8007b66:	e000      	b.n	8007b6a <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x86>
 8007b68:	697b      	ldr	r3, [r7, #20]
      }
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd90      	pop	{r4, r7, pc}

08007b72 <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007b72:	b590      	push	{r4, r7, lr}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff ff85 	bl	8007a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007b82:	4603      	mov	r3, r0
 8007b84:	681c      	ldr	r4, [r3, #0]
 8007b86:	6838      	ldr	r0, [r7, #0]
 8007b88:	f7ff ff80 	bl	8007a8c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	1ae3      	subs	r3, r4, r3
 8007b92:	109b      	asrs	r3, r3, #2
 8007b94:	4618      	mov	r0, r3
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd90      	pop	{r4, r7, pc}

08007b9c <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d006      	beq.n	8007bba <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x1e>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 f859 	bl	8007c68 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	e000      	b.n	8007bbc <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x20>
 8007bba:	2300      	movs	r3, #0
      }
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8007bc4:	b590      	push	{r4, r7, lr}
 8007bc6:	b089      	sub	sp, #36	; 0x24
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
 8007bd0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8007bd2:	f88d 4000 	strb.w	r4, [sp]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	68b9      	ldr	r1, [r7, #8]
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 f852 	bl	8007c86 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8007be2:	4603      	mov	r3, r0
      }
 8007be4:	4618      	mov	r0, r3
 8007be6:	371c      	adds	r7, #28
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd90      	pop	{r4, r7, pc}

08007bec <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8007bec:	b590      	push	{r4, r7, lr}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f855 	bl	8007caa <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 8007c00:	4604      	mov	r4, r0
 8007c02:	68b8      	ldr	r0, [r7, #8]
 8007c04:	f000 f851 	bl	8007caa <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 8007c08:	4601      	mov	r1, r0
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 f85a 	bl	8007cc8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8007c14:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd90      	pop	{r4, r7, pc}

08007c1e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 f878 	bl	8007d1e <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 f85a 	bl	8007cea <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>
 8007c36:	4603      	mov	r3, r0
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d201      	bcs.n	8007c5a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	e000      	b.n	8007c5c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8007c5a:	687b      	ldr	r3, [r7, #4]
    }
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007c72:	2200      	movs	r2, #0
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f85c 	bl	8007d34 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	607a      	str	r2, [r7, #4]
 8007c92:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	68b9      	ldr	r1, [r7, #8]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 f868 	bl	8007d70 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007ca0:	4603      	mov	r3, r0
      }
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8007cb2:	f107 030c 	add.w	r3, r7, #12
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f000 f876 	bl	8007daa <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 f874 	bl	8007dc8 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8007cf2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007cf6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f889 	bl	8007e10 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007d02:	f107 0208 	add.w	r2, r7, #8
 8007d06:	f107 030c 	add.w	r3, r7, #12
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 f88b 	bl	8007e28 <_ZSt3minIjERKT_S2_S2_>
 8007d12:	4603      	mov	r3, r0
 8007d14:	681b      	ldr	r3, [r3, #0]
      }
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f885 	bl	8007e50 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 8007d46:	4602      	mov	r2, r0
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	bf8c      	ite	hi
 8007d4e:	2301      	movhi	r3, #1
 8007d50:	2300      	movls	r3, #0
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007d58:	f000 fc4e 	bl	80085f8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fc33 	bl	80085cc <_Znwj>
 8007d66:	4603      	mov	r3, r0
      }
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007d70:	b5b0      	push	{r4, r5, r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 f872 	bl	8007e68 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007d84:	4604      	mov	r4, r0
 8007d86:	68b8      	ldr	r0, [r7, #8]
 8007d88:	f000 f86e 	bl	8007e68 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f86a 	bl	8007e68 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007d94:	4602      	mov	r2, r0
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	4629      	mov	r1, r5
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f000 f86f 	bl	8007e7e <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8007da0:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bdb0      	pop	{r4, r5, r7, pc}

08007daa <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>:
      move_iterator(iterator_type __i)
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	68b9      	ldr	r1, [r7, #8]
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f86c 	bl	8007eba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>
 8007de2:	4603      	mov	r3, r0
    }
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8007df8:	2301      	movs	r3, #1
 8007dfa:	75fb      	strb	r3, [r7, #23]
			     && __is_pointer<_II>::__value
			     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
			      _Category>::__copy_m(__first, __last, __result);
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	68b9      	ldr	r1, [r7, #8]
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 f86a 	bl	8007eda <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>
 8007e06:	4603      	mov	r3, r0
    }
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f819 	bl	8007e50 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	4618      	mov	r0, r3
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d201      	bcs.n	8007e42 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	e000      	b.n	8007e44 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007e42:	687b      	ldr	r3, [r7, #4]
    }
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007e58:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>:
    __niter_base(_Iterator __it)
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b086      	sub	sp, #24
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
 8007e8a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	109b      	asrs	r3, r3, #2
 8007e94:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dd06      	ble.n	8007eaa <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	68f9      	ldr	r1, [r7, #12]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fc1d 	bl	80086e4 <memmove>
      return __result + __count;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	4413      	add	r3, r2
    }
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	68b9      	ldr	r1, [r7, #8]
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 f822 	bl	8007f14 <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	60f8      	str	r0, [r7, #12]
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	109b      	asrs	r3, r3, #2
 8007eee:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d006      	beq.n	8007f04 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	461a      	mov	r2, r3
 8007efc:	68f9      	ldr	r1, [r7, #12]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fbf0 	bl	80086e4 <memmove>
	  return __result + _Num;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	4413      	add	r3, r2
	}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8007f14:	b590      	push	{r4, r7, lr}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f80f 	bl	8007f44 <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007f26:	4604      	mov	r4, r0
 8007f28:	68b8      	ldr	r0, [r7, #8]
 8007f2a:	f000 f80b 	bl	8007f44 <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	4619      	mov	r1, r3
 8007f34:	4620      	mov	r0, r4
 8007f36:	f000 f816 	bl	8007f66 <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 8007f3a:	4603      	mov	r3, r0
    }
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd90      	pop	{r4, r7, pc}

08007f44 <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8007f4c:	1d3b      	adds	r3, r7, #4
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 f82c 	bl	8007fac <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>
 8007f54:	4603      	mov	r3, r0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 f834 	bl	8007fc4 <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007f66:	b5b0      	push	{r4, r5, r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f7ff ff78 	bl	8007e68 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007f78:	4604      	mov	r4, r0
 8007f7a:	68b8      	ldr	r0, [r7, #8]
 8007f7c:	f7ff ff74 	bl	8007e68 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007f80:	4605      	mov	r5, r0
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff ff6f 	bl	8007e68 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	4629      	mov	r1, r5
 8007f90:	4620      	mov	r0, r4
 8007f92:	f7ff ff2b 	bl	8007dec <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 8007f96:	4602      	mov	r2, r0
 8007f98:	1d3b      	adds	r3, r7, #4
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f81c 	bl	8007fda <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>
 8007fa2:	4603      	mov	r3, r0
    }
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bdb0      	pop	{r4, r5, r7, pc}

08007fac <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>:
      base() const
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	7b1b      	ldrb	r3, [r3, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	e010      	b.n	800802a <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	4798      	blx	r3
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	e003      	b.n	800802a <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3308      	adds	r3, #8
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 800805c:	6838      	ldr	r0, [r7, #0]
 800805e:	f7f8 f8eb 	bl	8000238 <strlen>
 8008062:	4603      	mov	r3, r0
 8008064:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 8008066:	2300      	movs	r3, #0
 8008068:	81fb      	strh	r3, [r7, #14]
 800806a:	89fa      	ldrh	r2, [r7, #14]
 800806c:	89bb      	ldrh	r3, [r7, #12]
 800806e:	429a      	cmp	r2, r3
 8008070:	d20f      	bcs.n	8008092 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	3304      	adds	r3, #4
 8008076:	4618      	mov	r0, r3
 8008078:	f000 f837 	bl	80080ea <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800807c:	89fb      	ldrh	r3, [r7, #14]
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	4413      	add	r3, r2
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	4619      	mov	r1, r3
 8008086:	f000 f9df 	bl	8008448 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 800808a:	89fb      	ldrh	r3, [r7, #14]
 800808c:	3301      	adds	r3, #1
 800808e:	81fb      	strh	r3, [r7, #14]
 8008090:	e7eb      	b.n	800806a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3304      	adds	r3, #4
 8008096:	4618      	mov	r0, r3
 8008098:	f000 f827 	bl	80080ea <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800809c:	4603      	mov	r3, r0
 800809e:	210d      	movs	r1, #13
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 f9d1 	bl	8008448 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	330c      	adds	r3, #12
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	4798      	blx	r3
}
 80080b2:	bf00      	nop
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3304      	adds	r3, #4
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 f80f 	bl	80080ea <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80080cc:	4603      	mov	r3, r0
 80080ce:	210d      	movs	r1, #13
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 f9b9 	bl	8008448 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	330c      	adds	r3, #12
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
	return get();
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f805 	bl	8008102 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 80080f8:	4603      	mov	r3, r0
      }
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4618      	mov	r0, r3
 800810e:	f000 f805 	bl	800811c <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8008112:	4603      	mov	r3, r0
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4618      	mov	r0, r3
 8008128:	f000 f806 	bl	8008138 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800812c:	4603      	mov	r3, r0
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4618      	mov	r0, r3
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4618      	mov	r0, r3
 8008144:	f000 f805 	bl	8008152 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008148:	4603      	mov	r3, r0
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f805 	bl	800816a <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 8008160:	4603      	mov	r3, r0
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4618      	mov	r0, r3
 8008176:	f000 f805 	bl	8008184 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 800817a:	4603      	mov	r3, r0
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4618      	mov	r0, r3
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3314      	adds	r3, #20
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 f8e2 	bl	8008372 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80081ae:	4603      	mov	r3, r0
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe fa86 	bl	80066c2 <_ZN8QAD_UART4initEv>
 80081b6:	4603      	mov	r3, r0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3314      	adds	r3, #20
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 f8d0 	bl	8008372 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80081d2:	4603      	mov	r3, r0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fe fa9e 	bl	8006716 <_ZN8QAD_UART6deinitEv>
}
 80081da:	bf00      	nop
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 80081e2:	b590      	push	{r4, r7, lr}
 80081e4:	b0a5      	sub	sp, #148	; 0x94
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	3314      	adds	r3, #20
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 f8be 	bl	8008372 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80081f6:	4603      	mov	r3, r0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fe faa2 	bl	8006742 <_ZN8QAD_UART9getHandleEv>
 80081fe:	4602      	mov	r2, r0
 8008200:	f107 0308 	add.w	r3, r7, #8
 8008204:	4611      	mov	r1, r2
 8008206:	2284      	movs	r2, #132	; 0x84
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fa5d 	bl	80086c8 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	f003 0320 	and.w	r3, r3, #32
 8008216:	2b20      	cmp	r3, #32
 8008218:	bf0c      	ite	eq
 800821a:	2301      	moveq	r3, #1
 800821c:	2300      	movne	r3, #0
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01e      	beq.n	8008262 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x80>
  	uint8_t uData = m_pUART->dataRX();
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	3314      	adds	r3, #20
 8008228:	4618      	mov	r0, r3
 800822a:	f000 f8a2 	bl	8008372 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800822e:	4603      	mov	r3, r0
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe fafa 	bl	800682a <_ZN8QAD_UART6dataRXEv>
 8008236:	4603      	mov	r3, r0
 8008238:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  	if (m_eRXState)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	7b9b      	ldrb	r3, [r3, #14]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00b      	beq.n	800825c <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3308      	adds	r3, #8
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff ff4e 	bl	80080ea <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800824e:	4602      	mov	r2, r0
 8008250:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008254:	4619      	mov	r1, r3
 8008256:	4610      	mov	r0, r2
 8008258:	f000 f8f6 	bl	8008448 <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2220      	movs	r2, #32
 8008260:	621a      	str	r2, [r3, #32]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826a:	2b80      	cmp	r3, #128	; 0x80
 800826c:	bf0c      	ite	eq
 800826e:	2301      	moveq	r3, #1
 8008270:	2300      	movne	r3, #0
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b00      	cmp	r3, #0
 8008276:	d034      	beq.n	80082e2 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x100>
  	if (!m_pTXFIFO->empty()) {
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3304      	adds	r3, #4
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff ff34 	bl	80080ea <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008282:	4603      	mov	r3, r0
 8008284:	4618      	mov	r0, r3
 8008286:	f000 f8cc 	bl	8008422 <_ZN14QAT_FIFOBuffer5emptyEv>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	bf0c      	ite	eq
 8008290:	2301      	moveq	r3, #1
 8008292:	2300      	movne	r3, #0
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d014      	beq.n	80082c4 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe2>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3314      	adds	r3, #20
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 f867 	bl	8008372 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80082a4:	4604      	mov	r4, r0
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff ff1d 	bl	80080ea <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80082b0:	4603      	mov	r3, r0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 f8ec 	bl	8008490 <_ZN14QAT_FIFOBuffer3popEv>
 80082b8:	4603      	mov	r3, r0
 80082ba:	4619      	mov	r1, r3
 80082bc:	4620      	mov	r0, r4
 80082be:	f7fe faa4 	bl	800680a <_ZN8QAD_UART6dataTXEh>
 80082c2:	e00b      	b.n	80082dc <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfa>
  	} else {
      m_pUART->stopTX();
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3314      	adds	r3, #20
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 f852 	bl	8008372 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80082ce:	4603      	mov	r3, r0
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fe fa58 	bl	8006786 <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2280      	movs	r2, #128	; 0x80
 80082e0:	621a      	str	r2, [r3, #32]
  }
}
 80082e2:	bf00      	nop
 80082e4:	3794      	adds	r7, #148	; 0x94
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd90      	pop	{r4, r7, pc}

080082ea <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3314      	adds	r3, #20
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 f83b 	bl	8008372 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80082fc:	4603      	mov	r3, r0
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fa2b 	bl	800675a <_ZN8QAD_UART7startTXEv>
}
 8008304:	bf00      	nop
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3314      	adds	r3, #20
 8008318:	4618      	mov	r0, r3
 800831a:	f000 f82a 	bl	8008372 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800831e:	4603      	mov	r3, r0
 8008320:	4618      	mov	r0, r3
 8008322:	f7fe fa30 	bl	8006786 <_ZN8QAD_UART6stopTXEv>
}
 8008326:	bf00      	nop
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3314      	adds	r3, #20
 800833a:	4618      	mov	r0, r3
 800833c:	f000 f819 	bl	8008372 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008340:	4603      	mov	r3, r0
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe fa35 	bl	80067b2 <_ZN8QAD_UART7startRXEv>
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3314      	adds	r3, #20
 800835c:	4618      	mov	r0, r3
 800835e:	f000 f808 	bl	8008372 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008362:	4603      	mov	r3, r0
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe fa3a 	bl	80067de <_ZN8QAD_UART6stopRXEv>
}
 800836a:	bf00      	nop
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8008372:	b580      	push	{r7, lr}
 8008374:	b082      	sub	sp, #8
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
	return get();
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f805 	bl	800838a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 8008380:	4603      	mov	r3, r0
      }
 8008382:	4618      	mov	r0, r3
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 f805 	bl	80083a4 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 800839a:	4603      	mov	r3, r0
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 f806 	bl	80083c0 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80083b4:	4603      	mov	r3, r0
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 f805 	bl	80083da <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80083d0:	4603      	mov	r3, r0
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80083da:	b580      	push	{r7, lr}
 80083dc:	b082      	sub	sp, #8
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f805 	bl	80083f2 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 80083e8:	4603      	mov	r3, r0
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 f805 	bl	800840c <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 8008402:	4603      	mov	r3, r0
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4618      	mov	r0, r3
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	88da      	ldrh	r2, [r3, #6]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	891b      	ldrh	r3, [r3, #8]
 8008432:	429a      	cmp	r2, r3
 8008434:	d101      	bne.n	800843a <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 8008436:	2301      	movs	r3, #1
 8008438:	e000      	b.n	800843c <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	891b      	ldrh	r3, [r3, #8]
 800845a:	4619      	mov	r1, r3
 800845c:	4610      	mov	r0, r2
 800845e:	f000 f847 	bl	80084f0 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8008462:	4602      	mov	r2, r0
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	889a      	ldrh	r2, [r3, #4]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	891b      	ldrh	r3, [r3, #8]
 8008470:	429a      	cmp	r2, r3
 8008472:	d906      	bls.n	8008482 <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	891b      	ldrh	r3, [r3, #8]
 8008478:	3301      	adds	r3, #1
 800847a:	b29a      	uxth	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 8008480:	e002      	b.n	8008488 <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	811a      	strh	r2, [r3, #8]
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff ffc2 	bl	8008422 <_ZN14QAT_FIFOBuffer5emptyEv>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	bf0c      	ite	eq
 80084a4:	2301      	moveq	r3, #1
 80084a6:	2300      	movne	r3, #0
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d01b      	beq.n	80084e6 <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	88db      	ldrh	r3, [r3, #6]
 80084b4:	4619      	mov	r1, r3
 80084b6:	4610      	mov	r0, r2
 80084b8:	f000 f81a 	bl	80084f0 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 80084bc:	4603      	mov	r3, r0
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	889a      	ldrh	r2, [r3, #4]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	88db      	ldrh	r3, [r3, #6]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d906      	bls.n	80084dc <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	88db      	ldrh	r3, [r3, #6]
 80084d2:	3301      	adds	r3, #1
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	80da      	strh	r2, [r3, #6]
 80084da:	e002      	b.n	80084e2 <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	80da      	strh	r2, [r3, #6]
		return uData;
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	e000      	b.n	80084e8 <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
	return get()[__i];
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f807 	bl	800850e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8008500:	4602      	mov	r2, r0
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	4413      	add	r3, r2
      }
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 f805 	bl	8008528 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800851e:	4603      	mov	r3, r0
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f806 	bl	8008544 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008538:	4603      	mov	r3, r0
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4618      	mov	r0, r3
 8008550:	f000 f805 	bl	800855e <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008554:	4603      	mov	r3, r0
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800855e:	b580      	push	{r7, lr}
 8008560:	b082      	sub	sp, #8
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f805 	bl	8008576 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 800856c:	4603      	mov	r3, r0
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4618      	mov	r0, r3
 8008582:	f000 f805 	bl	8008590 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 8008586:	4603      	mov	r3, r0
 8008588:	4618      	mov	r0, r3
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <_ZdlPv>:
 80085a6:	f000 b887 	b.w	80086b8 <free>

080085aa <_ZdlPvj>:
 80085aa:	f7ff bffc 	b.w	80085a6 <_ZdlPv>

080085ae <__cxa_guard_acquire>:
 80085ae:	6803      	ldr	r3, [r0, #0]
 80085b0:	07db      	lsls	r3, r3, #31
 80085b2:	d406      	bmi.n	80085c2 <__cxa_guard_acquire+0x14>
 80085b4:	7843      	ldrb	r3, [r0, #1]
 80085b6:	b103      	cbz	r3, 80085ba <__cxa_guard_acquire+0xc>
 80085b8:	deff      	udf	#255	; 0xff
 80085ba:	2301      	movs	r3, #1
 80085bc:	7043      	strb	r3, [r0, #1]
 80085be:	4618      	mov	r0, r3
 80085c0:	4770      	bx	lr
 80085c2:	2000      	movs	r0, #0
 80085c4:	4770      	bx	lr

080085c6 <__cxa_guard_release>:
 80085c6:	2301      	movs	r3, #1
 80085c8:	6003      	str	r3, [r0, #0]
 80085ca:	4770      	bx	lr

080085cc <_Znwj>:
 80085cc:	2801      	cmp	r0, #1
 80085ce:	bf38      	it	cc
 80085d0:	2001      	movcc	r0, #1
 80085d2:	b510      	push	{r4, lr}
 80085d4:	4604      	mov	r4, r0
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 f866 	bl	80086a8 <malloc>
 80085dc:	b930      	cbnz	r0, 80085ec <_Znwj+0x20>
 80085de:	f000 f823 	bl	8008628 <_ZSt15get_new_handlerv>
 80085e2:	b908      	cbnz	r0, 80085e8 <_Znwj+0x1c>
 80085e4:	f000 f828 	bl	8008638 <abort>
 80085e8:	4780      	blx	r0
 80085ea:	e7f4      	b.n	80085d6 <_Znwj+0xa>
 80085ec:	bd10      	pop	{r4, pc}

080085ee <_Znaj>:
 80085ee:	f7ff bfed 	b.w	80085cc <_Znwj>

080085f2 <__cxa_pure_virtual>:
 80085f2:	b508      	push	{r3, lr}
 80085f4:	f000 f812 	bl	800861c <_ZSt9terminatev>

080085f8 <_ZSt17__throw_bad_allocv>:
 80085f8:	b508      	push	{r3, lr}
 80085fa:	f000 f81d 	bl	8008638 <abort>

080085fe <_ZSt20__throw_length_errorPKc>:
 80085fe:	b508      	push	{r3, lr}
 8008600:	f000 f81a 	bl	8008638 <abort>

08008604 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008604:	b508      	push	{r3, lr}
 8008606:	4780      	blx	r0
 8008608:	f000 f816 	bl	8008638 <abort>

0800860c <_ZSt13get_terminatev>:
 800860c:	4b02      	ldr	r3, [pc, #8]	; (8008618 <_ZSt13get_terminatev+0xc>)
 800860e:	6818      	ldr	r0, [r3, #0]
 8008610:	f3bf 8f5b 	dmb	ish
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	2000000c 	.word	0x2000000c

0800861c <_ZSt9terminatev>:
 800861c:	b508      	push	{r3, lr}
 800861e:	f7ff fff5 	bl	800860c <_ZSt13get_terminatev>
 8008622:	f7ff ffef 	bl	8008604 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08008628 <_ZSt15get_new_handlerv>:
 8008628:	4b02      	ldr	r3, [pc, #8]	; (8008634 <_ZSt15get_new_handlerv+0xc>)
 800862a:	6818      	ldr	r0, [r3, #0]
 800862c:	f3bf 8f5b 	dmb	ish
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	200002f4 	.word	0x200002f4

08008638 <abort>:
 8008638:	b508      	push	{r3, lr}
 800863a:	2006      	movs	r0, #6
 800863c:	f000 f956 	bl	80088ec <raise>
 8008640:	2001      	movs	r0, #1
 8008642:	f7f9 fa3a 	bl	8001aba <_exit>

08008646 <atexit>:
 8008646:	2300      	movs	r3, #0
 8008648:	4601      	mov	r1, r0
 800864a:	461a      	mov	r2, r3
 800864c:	4618      	mov	r0, r3
 800864e:	f000 b971 	b.w	8008934 <__register_exitproc>
	...

08008654 <__errno>:
 8008654:	4b01      	ldr	r3, [pc, #4]	; (800865c <__errno+0x8>)
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	20000010 	.word	0x20000010

08008660 <__libc_init_array>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	4d0d      	ldr	r5, [pc, #52]	; (8008698 <__libc_init_array+0x38>)
 8008664:	4c0d      	ldr	r4, [pc, #52]	; (800869c <__libc_init_array+0x3c>)
 8008666:	1b64      	subs	r4, r4, r5
 8008668:	10a4      	asrs	r4, r4, #2
 800866a:	2600      	movs	r6, #0
 800866c:	42a6      	cmp	r6, r4
 800866e:	d109      	bne.n	8008684 <__libc_init_array+0x24>
 8008670:	4d0b      	ldr	r5, [pc, #44]	; (80086a0 <__libc_init_array+0x40>)
 8008672:	4c0c      	ldr	r4, [pc, #48]	; (80086a4 <__libc_init_array+0x44>)
 8008674:	f000 f9d0 	bl	8008a18 <_init>
 8008678:	1b64      	subs	r4, r4, r5
 800867a:	10a4      	asrs	r4, r4, #2
 800867c:	2600      	movs	r6, #0
 800867e:	42a6      	cmp	r6, r4
 8008680:	d105      	bne.n	800868e <__libc_init_array+0x2e>
 8008682:	bd70      	pop	{r4, r5, r6, pc}
 8008684:	f855 3b04 	ldr.w	r3, [r5], #4
 8008688:	4798      	blx	r3
 800868a:	3601      	adds	r6, #1
 800868c:	e7ee      	b.n	800866c <__libc_init_array+0xc>
 800868e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008692:	4798      	blx	r3
 8008694:	3601      	adds	r6, #1
 8008696:	e7f2      	b.n	800867e <__libc_init_array+0x1e>
 8008698:	0800c12c 	.word	0x0800c12c
 800869c:	0800c12c 	.word	0x0800c12c
 80086a0:	0800c12c 	.word	0x0800c12c
 80086a4:	0800c130 	.word	0x0800c130

080086a8 <malloc>:
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <malloc+0xc>)
 80086aa:	4601      	mov	r1, r0
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	f000 b88b 	b.w	80087c8 <_malloc_r>
 80086b2:	bf00      	nop
 80086b4:	20000010 	.word	0x20000010

080086b8 <free>:
 80086b8:	4b02      	ldr	r3, [pc, #8]	; (80086c4 <free+0xc>)
 80086ba:	4601      	mov	r1, r0
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	f000 b833 	b.w	8008728 <_free_r>
 80086c2:	bf00      	nop
 80086c4:	20000010 	.word	0x20000010

080086c8 <memcpy>:
 80086c8:	440a      	add	r2, r1
 80086ca:	4291      	cmp	r1, r2
 80086cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80086d0:	d100      	bne.n	80086d4 <memcpy+0xc>
 80086d2:	4770      	bx	lr
 80086d4:	b510      	push	{r4, lr}
 80086d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086de:	4291      	cmp	r1, r2
 80086e0:	d1f9      	bne.n	80086d6 <memcpy+0xe>
 80086e2:	bd10      	pop	{r4, pc}

080086e4 <memmove>:
 80086e4:	4288      	cmp	r0, r1
 80086e6:	b510      	push	{r4, lr}
 80086e8:	eb01 0402 	add.w	r4, r1, r2
 80086ec:	d902      	bls.n	80086f4 <memmove+0x10>
 80086ee:	4284      	cmp	r4, r0
 80086f0:	4623      	mov	r3, r4
 80086f2:	d807      	bhi.n	8008704 <memmove+0x20>
 80086f4:	1e43      	subs	r3, r0, #1
 80086f6:	42a1      	cmp	r1, r4
 80086f8:	d008      	beq.n	800870c <memmove+0x28>
 80086fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008702:	e7f8      	b.n	80086f6 <memmove+0x12>
 8008704:	4402      	add	r2, r0
 8008706:	4601      	mov	r1, r0
 8008708:	428a      	cmp	r2, r1
 800870a:	d100      	bne.n	800870e <memmove+0x2a>
 800870c:	bd10      	pop	{r4, pc}
 800870e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008716:	e7f7      	b.n	8008708 <memmove+0x24>

08008718 <memset>:
 8008718:	4402      	add	r2, r0
 800871a:	4603      	mov	r3, r0
 800871c:	4293      	cmp	r3, r2
 800871e:	d100      	bne.n	8008722 <memset+0xa>
 8008720:	4770      	bx	lr
 8008722:	f803 1b01 	strb.w	r1, [r3], #1
 8008726:	e7f9      	b.n	800871c <memset+0x4>

08008728 <_free_r>:
 8008728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800872a:	2900      	cmp	r1, #0
 800872c:	d048      	beq.n	80087c0 <_free_r+0x98>
 800872e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008732:	9001      	str	r0, [sp, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	f1a1 0404 	sub.w	r4, r1, #4
 800873a:	bfb8      	it	lt
 800873c:	18e4      	addlt	r4, r4, r3
 800873e:	f000 f95f 	bl	8008a00 <__malloc_lock>
 8008742:	4a20      	ldr	r2, [pc, #128]	; (80087c4 <_free_r+0x9c>)
 8008744:	9801      	ldr	r0, [sp, #4]
 8008746:	6813      	ldr	r3, [r2, #0]
 8008748:	4615      	mov	r5, r2
 800874a:	b933      	cbnz	r3, 800875a <_free_r+0x32>
 800874c:	6063      	str	r3, [r4, #4]
 800874e:	6014      	str	r4, [r2, #0]
 8008750:	b003      	add	sp, #12
 8008752:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008756:	f000 b959 	b.w	8008a0c <__malloc_unlock>
 800875a:	42a3      	cmp	r3, r4
 800875c:	d90b      	bls.n	8008776 <_free_r+0x4e>
 800875e:	6821      	ldr	r1, [r4, #0]
 8008760:	1862      	adds	r2, r4, r1
 8008762:	4293      	cmp	r3, r2
 8008764:	bf04      	itt	eq
 8008766:	681a      	ldreq	r2, [r3, #0]
 8008768:	685b      	ldreq	r3, [r3, #4]
 800876a:	6063      	str	r3, [r4, #4]
 800876c:	bf04      	itt	eq
 800876e:	1852      	addeq	r2, r2, r1
 8008770:	6022      	streq	r2, [r4, #0]
 8008772:	602c      	str	r4, [r5, #0]
 8008774:	e7ec      	b.n	8008750 <_free_r+0x28>
 8008776:	461a      	mov	r2, r3
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	b10b      	cbz	r3, 8008780 <_free_r+0x58>
 800877c:	42a3      	cmp	r3, r4
 800877e:	d9fa      	bls.n	8008776 <_free_r+0x4e>
 8008780:	6811      	ldr	r1, [r2, #0]
 8008782:	1855      	adds	r5, r2, r1
 8008784:	42a5      	cmp	r5, r4
 8008786:	d10b      	bne.n	80087a0 <_free_r+0x78>
 8008788:	6824      	ldr	r4, [r4, #0]
 800878a:	4421      	add	r1, r4
 800878c:	1854      	adds	r4, r2, r1
 800878e:	42a3      	cmp	r3, r4
 8008790:	6011      	str	r1, [r2, #0]
 8008792:	d1dd      	bne.n	8008750 <_free_r+0x28>
 8008794:	681c      	ldr	r4, [r3, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	6053      	str	r3, [r2, #4]
 800879a:	4421      	add	r1, r4
 800879c:	6011      	str	r1, [r2, #0]
 800879e:	e7d7      	b.n	8008750 <_free_r+0x28>
 80087a0:	d902      	bls.n	80087a8 <_free_r+0x80>
 80087a2:	230c      	movs	r3, #12
 80087a4:	6003      	str	r3, [r0, #0]
 80087a6:	e7d3      	b.n	8008750 <_free_r+0x28>
 80087a8:	6825      	ldr	r5, [r4, #0]
 80087aa:	1961      	adds	r1, r4, r5
 80087ac:	428b      	cmp	r3, r1
 80087ae:	bf04      	itt	eq
 80087b0:	6819      	ldreq	r1, [r3, #0]
 80087b2:	685b      	ldreq	r3, [r3, #4]
 80087b4:	6063      	str	r3, [r4, #4]
 80087b6:	bf04      	itt	eq
 80087b8:	1949      	addeq	r1, r1, r5
 80087ba:	6021      	streq	r1, [r4, #0]
 80087bc:	6054      	str	r4, [r2, #4]
 80087be:	e7c7      	b.n	8008750 <_free_r+0x28>
 80087c0:	b003      	add	sp, #12
 80087c2:	bd30      	pop	{r4, r5, pc}
 80087c4:	200002f8 	.word	0x200002f8

080087c8 <_malloc_r>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	1ccd      	adds	r5, r1, #3
 80087cc:	f025 0503 	bic.w	r5, r5, #3
 80087d0:	3508      	adds	r5, #8
 80087d2:	2d0c      	cmp	r5, #12
 80087d4:	bf38      	it	cc
 80087d6:	250c      	movcc	r5, #12
 80087d8:	2d00      	cmp	r5, #0
 80087da:	4606      	mov	r6, r0
 80087dc:	db01      	blt.n	80087e2 <_malloc_r+0x1a>
 80087de:	42a9      	cmp	r1, r5
 80087e0:	d903      	bls.n	80087ea <_malloc_r+0x22>
 80087e2:	230c      	movs	r3, #12
 80087e4:	6033      	str	r3, [r6, #0]
 80087e6:	2000      	movs	r0, #0
 80087e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ea:	f000 f909 	bl	8008a00 <__malloc_lock>
 80087ee:	4921      	ldr	r1, [pc, #132]	; (8008874 <_malloc_r+0xac>)
 80087f0:	680a      	ldr	r2, [r1, #0]
 80087f2:	4614      	mov	r4, r2
 80087f4:	b99c      	cbnz	r4, 800881e <_malloc_r+0x56>
 80087f6:	4f20      	ldr	r7, [pc, #128]	; (8008878 <_malloc_r+0xb0>)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	b923      	cbnz	r3, 8008806 <_malloc_r+0x3e>
 80087fc:	4621      	mov	r1, r4
 80087fe:	4630      	mov	r0, r6
 8008800:	f000 f83c 	bl	800887c <_sbrk_r>
 8008804:	6038      	str	r0, [r7, #0]
 8008806:	4629      	mov	r1, r5
 8008808:	4630      	mov	r0, r6
 800880a:	f000 f837 	bl	800887c <_sbrk_r>
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	d123      	bne.n	800885a <_malloc_r+0x92>
 8008812:	230c      	movs	r3, #12
 8008814:	6033      	str	r3, [r6, #0]
 8008816:	4630      	mov	r0, r6
 8008818:	f000 f8f8 	bl	8008a0c <__malloc_unlock>
 800881c:	e7e3      	b.n	80087e6 <_malloc_r+0x1e>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	1b5b      	subs	r3, r3, r5
 8008822:	d417      	bmi.n	8008854 <_malloc_r+0x8c>
 8008824:	2b0b      	cmp	r3, #11
 8008826:	d903      	bls.n	8008830 <_malloc_r+0x68>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	441c      	add	r4, r3
 800882c:	6025      	str	r5, [r4, #0]
 800882e:	e004      	b.n	800883a <_malloc_r+0x72>
 8008830:	6863      	ldr	r3, [r4, #4]
 8008832:	42a2      	cmp	r2, r4
 8008834:	bf0c      	ite	eq
 8008836:	600b      	streq	r3, [r1, #0]
 8008838:	6053      	strne	r3, [r2, #4]
 800883a:	4630      	mov	r0, r6
 800883c:	f000 f8e6 	bl	8008a0c <__malloc_unlock>
 8008840:	f104 000b 	add.w	r0, r4, #11
 8008844:	1d23      	adds	r3, r4, #4
 8008846:	f020 0007 	bic.w	r0, r0, #7
 800884a:	1ac2      	subs	r2, r0, r3
 800884c:	d0cc      	beq.n	80087e8 <_malloc_r+0x20>
 800884e:	1a1b      	subs	r3, r3, r0
 8008850:	50a3      	str	r3, [r4, r2]
 8008852:	e7c9      	b.n	80087e8 <_malloc_r+0x20>
 8008854:	4622      	mov	r2, r4
 8008856:	6864      	ldr	r4, [r4, #4]
 8008858:	e7cc      	b.n	80087f4 <_malloc_r+0x2c>
 800885a:	1cc4      	adds	r4, r0, #3
 800885c:	f024 0403 	bic.w	r4, r4, #3
 8008860:	42a0      	cmp	r0, r4
 8008862:	d0e3      	beq.n	800882c <_malloc_r+0x64>
 8008864:	1a21      	subs	r1, r4, r0
 8008866:	4630      	mov	r0, r6
 8008868:	f000 f808 	bl	800887c <_sbrk_r>
 800886c:	3001      	adds	r0, #1
 800886e:	d1dd      	bne.n	800882c <_malloc_r+0x64>
 8008870:	e7cf      	b.n	8008812 <_malloc_r+0x4a>
 8008872:	bf00      	nop
 8008874:	200002f8 	.word	0x200002f8
 8008878:	200002fc 	.word	0x200002fc

0800887c <_sbrk_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4d06      	ldr	r5, [pc, #24]	; (8008898 <_sbrk_r+0x1c>)
 8008880:	2300      	movs	r3, #0
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	602b      	str	r3, [r5, #0]
 8008888:	f7f9 f922 	bl	8001ad0 <_sbrk>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_sbrk_r+0x1a>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_sbrk_r+0x1a>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	200003a0 	.word	0x200003a0

0800889c <_raise_r>:
 800889c:	291f      	cmp	r1, #31
 800889e:	b538      	push	{r3, r4, r5, lr}
 80088a0:	4604      	mov	r4, r0
 80088a2:	460d      	mov	r5, r1
 80088a4:	d904      	bls.n	80088b0 <_raise_r+0x14>
 80088a6:	2316      	movs	r3, #22
 80088a8:	6003      	str	r3, [r0, #0]
 80088aa:	f04f 30ff 	mov.w	r0, #4294967295
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80088b2:	b112      	cbz	r2, 80088ba <_raise_r+0x1e>
 80088b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088b8:	b94b      	cbnz	r3, 80088ce <_raise_r+0x32>
 80088ba:	4620      	mov	r0, r4
 80088bc:	f000 f830 	bl	8008920 <_getpid_r>
 80088c0:	462a      	mov	r2, r5
 80088c2:	4601      	mov	r1, r0
 80088c4:	4620      	mov	r0, r4
 80088c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088ca:	f000 b817 	b.w	80088fc <_kill_r>
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d00a      	beq.n	80088e8 <_raise_r+0x4c>
 80088d2:	1c59      	adds	r1, r3, #1
 80088d4:	d103      	bne.n	80088de <_raise_r+0x42>
 80088d6:	2316      	movs	r3, #22
 80088d8:	6003      	str	r3, [r0, #0]
 80088da:	2001      	movs	r0, #1
 80088dc:	e7e7      	b.n	80088ae <_raise_r+0x12>
 80088de:	2400      	movs	r4, #0
 80088e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088e4:	4628      	mov	r0, r5
 80088e6:	4798      	blx	r3
 80088e8:	2000      	movs	r0, #0
 80088ea:	e7e0      	b.n	80088ae <_raise_r+0x12>

080088ec <raise>:
 80088ec:	4b02      	ldr	r3, [pc, #8]	; (80088f8 <raise+0xc>)
 80088ee:	4601      	mov	r1, r0
 80088f0:	6818      	ldr	r0, [r3, #0]
 80088f2:	f7ff bfd3 	b.w	800889c <_raise_r>
 80088f6:	bf00      	nop
 80088f8:	20000010 	.word	0x20000010

080088fc <_kill_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4d07      	ldr	r5, [pc, #28]	; (800891c <_kill_r+0x20>)
 8008900:	2300      	movs	r3, #0
 8008902:	4604      	mov	r4, r0
 8008904:	4608      	mov	r0, r1
 8008906:	4611      	mov	r1, r2
 8008908:	602b      	str	r3, [r5, #0]
 800890a:	f7f9 f8c6 	bl	8001a9a <_kill>
 800890e:	1c43      	adds	r3, r0, #1
 8008910:	d102      	bne.n	8008918 <_kill_r+0x1c>
 8008912:	682b      	ldr	r3, [r5, #0]
 8008914:	b103      	cbz	r3, 8008918 <_kill_r+0x1c>
 8008916:	6023      	str	r3, [r4, #0]
 8008918:	bd38      	pop	{r3, r4, r5, pc}
 800891a:	bf00      	nop
 800891c:	200003a0 	.word	0x200003a0

08008920 <_getpid_r>:
 8008920:	f7f9 b8b3 	b.w	8001a8a <_getpid>

08008924 <strcpy>:
 8008924:	4603      	mov	r3, r0
 8008926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800892a:	f803 2b01 	strb.w	r2, [r3], #1
 800892e:	2a00      	cmp	r2, #0
 8008930:	d1f9      	bne.n	8008926 <strcpy+0x2>
 8008932:	4770      	bx	lr

08008934 <__register_exitproc>:
 8008934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008938:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80089f4 <__register_exitproc+0xc0>
 800893c:	4606      	mov	r6, r0
 800893e:	f8d8 0000 	ldr.w	r0, [r8]
 8008942:	461f      	mov	r7, r3
 8008944:	460d      	mov	r5, r1
 8008946:	4691      	mov	r9, r2
 8008948:	f000 f856 	bl	80089f8 <__retarget_lock_acquire_recursive>
 800894c:	4b25      	ldr	r3, [pc, #148]	; (80089e4 <__register_exitproc+0xb0>)
 800894e:	681c      	ldr	r4, [r3, #0]
 8008950:	b934      	cbnz	r4, 8008960 <__register_exitproc+0x2c>
 8008952:	4c25      	ldr	r4, [pc, #148]	; (80089e8 <__register_exitproc+0xb4>)
 8008954:	601c      	str	r4, [r3, #0]
 8008956:	4b25      	ldr	r3, [pc, #148]	; (80089ec <__register_exitproc+0xb8>)
 8008958:	b113      	cbz	r3, 8008960 <__register_exitproc+0x2c>
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8008960:	6863      	ldr	r3, [r4, #4]
 8008962:	2b1f      	cmp	r3, #31
 8008964:	dd07      	ble.n	8008976 <__register_exitproc+0x42>
 8008966:	f8d8 0000 	ldr.w	r0, [r8]
 800896a:	f000 f847 	bl	80089fc <__retarget_lock_release_recursive>
 800896e:	f04f 30ff 	mov.w	r0, #4294967295
 8008972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008976:	b34e      	cbz	r6, 80089cc <__register_exitproc+0x98>
 8008978:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800897c:	b988      	cbnz	r0, 80089a2 <__register_exitproc+0x6e>
 800897e:	4b1c      	ldr	r3, [pc, #112]	; (80089f0 <__register_exitproc+0xbc>)
 8008980:	b923      	cbnz	r3, 800898c <__register_exitproc+0x58>
 8008982:	f8d8 0000 	ldr.w	r0, [r8]
 8008986:	f000 f838 	bl	80089fa <__retarget_lock_release>
 800898a:	e7f0      	b.n	800896e <__register_exitproc+0x3a>
 800898c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8008990:	f7ff fe8a 	bl	80086a8 <malloc>
 8008994:	2800      	cmp	r0, #0
 8008996:	d0f4      	beq.n	8008982 <__register_exitproc+0x4e>
 8008998:	2300      	movs	r3, #0
 800899a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800899e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80089a2:	6863      	ldr	r3, [r4, #4]
 80089a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80089a8:	2201      	movs	r2, #1
 80089aa:	409a      	lsls	r2, r3
 80089ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80089b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80089b4:	4313      	orrs	r3, r2
 80089b6:	2e02      	cmp	r6, #2
 80089b8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80089bc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80089c0:	bf02      	ittt	eq
 80089c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80089c6:	431a      	orreq	r2, r3
 80089c8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80089cc:	6863      	ldr	r3, [r4, #4]
 80089ce:	f8d8 0000 	ldr.w	r0, [r8]
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	3302      	adds	r3, #2
 80089d6:	6062      	str	r2, [r4, #4]
 80089d8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80089dc:	f000 f80e 	bl	80089fc <__retarget_lock_release_recursive>
 80089e0:	2000      	movs	r0, #0
 80089e2:	e7c6      	b.n	8008972 <__register_exitproc+0x3e>
 80089e4:	2000038c 	.word	0x2000038c
 80089e8:	20000300 	.word	0x20000300
 80089ec:	00000000 	.word	0x00000000
 80089f0:	080086a9 	.word	0x080086a9
 80089f4:	20000074 	.word	0x20000074

080089f8 <__retarget_lock_acquire_recursive>:
 80089f8:	4770      	bx	lr

080089fa <__retarget_lock_release>:
 80089fa:	4770      	bx	lr

080089fc <__retarget_lock_release_recursive>:
 80089fc:	4770      	bx	lr
	...

08008a00 <__malloc_lock>:
 8008a00:	4801      	ldr	r0, [pc, #4]	; (8008a08 <__malloc_lock+0x8>)
 8008a02:	f7ff bff9 	b.w	80089f8 <__retarget_lock_acquire_recursive>
 8008a06:	bf00      	nop
 8008a08:	20000398 	.word	0x20000398

08008a0c <__malloc_unlock>:
 8008a0c:	4801      	ldr	r0, [pc, #4]	; (8008a14 <__malloc_unlock+0x8>)
 8008a0e:	f7ff bff5 	b.w	80089fc <__retarget_lock_release_recursive>
 8008a12:	bf00      	nop
 8008a14:	20000398 	.word	0x20000398

08008a18 <_init>:
 8008a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1a:	bf00      	nop
 8008a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a1e:	bc08      	pop	{r3}
 8008a20:	469e      	mov	lr, r3
 8008a22:	4770      	bx	lr

08008a24 <_fini>:
 8008a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a26:	bf00      	nop
 8008a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2a:	bc08      	pop	{r3}
 8008a2c:	469e      	mov	lr, r3
 8008a2e:	4770      	bx	lr
