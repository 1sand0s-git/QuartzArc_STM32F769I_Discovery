
STM32 F7D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfe0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003988  0800e1e0  0800e1e0  0001e1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b68  08011b68  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08011b68  08011b68  00021b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b70  08011b70  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b70  08011b70  00021b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b74  08011b74  00021b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08011b78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  20000078  08011bf0  00030078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08011bf0  000305a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002f579  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0004f254  00000000  00000000  0005f61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009cc1  00000000  00000000  000ae873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002558  00000000  00000000  000b8538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014de02  00000000  00000000  000baa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000022d0  00000000  00000000  00208898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c872  00000000  00000000  0020ab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002473da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6f4  00000000  00000000  00247430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e1c8 	.word	0x0800e1c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	0800e1c8 	.word	0x0800e1c8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000620 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000604:	4c0b      	ldr	r4, [pc, #44]	; (8000634 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000612:	f002 f8ed 	bl	80027f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000616:	f00d f8bd 	bl	800d794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800061a:	f000 fffb 	bl	8001614 <main>
  bx  lr    
 800061e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000620:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800062c:	08011b78 	.word	0x08011b78
  ldr r2, =_sbss
 8000630:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000634:	200005a0 	.word	0x200005a0

08000638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC_IRQHandler>
	...

0800063c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000640:	f3bf 8f4f 	dsb	sy
}
 8000644:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000646:	f3bf 8f6f 	isb	sy
}
 800064a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <SCB_EnableICache+0x48>)
 800064e:	2200      	movs	r2, #0
 8000650:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000654:	f3bf 8f4f 	dsb	sy
}
 8000658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800065a:	f3bf 8f6f 	isb	sy
}
 800065e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SCB_EnableICache+0x48>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SCB_EnableICache+0x48>)
 8000666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000690:	2200      	movs	r2, #0
 8000692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000696:	f3bf 8f4f 	dsb	sy
}
 800069a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <SCB_EnableDCache+0x9c>)
 800069e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	0b5b      	lsrs	r3, r3, #13
 80006a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	015a      	lsls	r2, r3, #5
 80006bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80006c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006c6:	4917      	ldr	r1, [pc, #92]	; (8000724 <SCB_EnableDCache+0x9c>)
 80006c8:	4313      	orrs	r3, r2
 80006ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	1e5a      	subs	r2, r3, #1
 80006d2:	60ba      	str	r2, [r7, #8]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d000      	beq.n	80006e4 <SCB_EnableDCache+0x5c>
      do {
 80006e2:	e7e9      	b.n	80006b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	60fa      	str	r2, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d000      	beq.n	80006fa <SCB_EnableDCache+0x72>
    do {
 80006f8:	e7d9      	b.n	80006ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80006fa:	f3bf 8f4f 	dsb	sy
}
 80006fe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800070a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800070c:	f3bf 8f4f 	dsb	sy
}
 8000710:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000712:	f3bf 8f6f 	isb	sy
}
 8000716:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks
//Also enables all GPIO ports, and both DMA1 and DMA2 peripherals
//
//Returns QA_OK if successful, or QA_Fail if initialization failed
QA_Result SystemInitialize(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b0c6      	sub	sp, #280	; 0x118
 800072c:	af00      	add	r7, sp, #0

  //------------------------------------
  //Enable CPU Instruction & Data Caches
  SCB_EnableICache();
 800072e:	f7ff ff85 	bl	800063c <SCB_EnableICache>
  SCB_EnableDCache();
 8000732:	f7ff ffa9 	bl	8000688 <SCB_EnableDCache>

	//----------------------
	//Enable ART Accelerator
  __HAL_FLASH_ART_ENABLE();
 8000736:	4b67      	ldr	r3, [pc, #412]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a66      	ldr	r2, [pc, #408]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 800073c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000740:	6013      	str	r3, [r2, #0]

  //---------------------
  //Enable Flash Prefetch
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000742:	4b64      	ldr	r3, [pc, #400]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a63      	ldr	r2, [pc, #396]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074c:	6013      	str	r3, [r2, #0]

  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074e:	2003      	movs	r0, #3
 8000750:	f002 fc20 	bl	8002f94 <HAL_NVIC_SetPriorityGrouping>

  //------------
  //Init SysTick
  HAL_InitTick(TICK_INT_PRIORITY);
 8000754:	2000      	movs	r0, #0
 8000756:	f002 fab5 	bl	8002cc4 <HAL_InitTick>

  //------------------------------
  //Configure LSE Drive Capability
  HAL_PWR_EnableBkUpAccess();
 800075a:	f004 fb81 	bl	8004e60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800075e:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000762:	4a5d      	ldr	r2, [pc, #372]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000764:	f023 0318 	bic.w	r3, r3, #24
 8000768:	6713      	str	r3, [r2, #112]	; 0x70

  //------------------------------------------------
  //Configure Main Internal Regulator Output Voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b5b      	ldr	r3, [pc, #364]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a5a      	ldr	r2, [pc, #360]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b58      	ldr	r3, [pc, #352]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000782:	4b56      	ldr	r3, [pc, #344]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a55      	ldr	r2, [pc, #340]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	4b53      	ldr	r3, [pc, #332]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
 8000798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  //
  //Configure High Speed External (HSE) oscillator to be used for primary system clocks, and setup primary PLL to provide a 216MHz clock
  //Configure Low Speed External (LSE) oscillator to be used for clock source for Real Timer Clock (RTC) peripheral
  //NOTE: HSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 25MHz oscillator (labeled X2 on the PCB)
  //      LSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 32.768kHz oscillator (labeled X3 on the PCB)
  RCC_OscInitTypeDef RCC_OscInit = {0};
 800079a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800079e:	2234      	movs	r2, #52	; 0x34
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00d f852 	bl	800d84c <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | //Define HSE (High Speed External) oscillator to be configured (used for main system clock)
 80007a8:	2305      	movs	r3, #5
 80007aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  		                         RCC_OSCILLATORTYPE_LSE;  //Define LSE (Low Speed External) oscillator to be configured (used for RTC - Real Time Clock)
  RCC_OscInit.HSEState       = RCC_HSE_ON;              //Enable HSE
 80007ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInit.LSEState       = RCC_LSE_ON;              //Enable LSE
 80007b6:	2301      	movs	r3, #1
 80007b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;              //Enable primary PLL
 80007bc:	2302      	movs	r3, #2
 80007be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;       //Set primary PLL source to HSE
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    //Set primary PLL values required for 216Mhz system clock
  RCC_OscInit.PLL.PLLM       = 25;
 80007ca:	2319      	movs	r3, #25
 80007cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInit.PLL.PLLN       = 432;
 80007d0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80007d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInit.PLL.PLLQ       = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {  //Initialize Oscillators using values in init structure
 80007e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f005 f81d 	bl	8005828 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <_Z16SystemInitializev+0xda>
  	return QA_Fail;
 80007fe:	2301      	movs	r3, #1
 8000800:	e123      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a34      	ldr	r2, [pc, #208]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
 8000818:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  //---------------------
  //Enable Overdrive Mode
  //
  //This is required to provide best system stability given that we are running at the maximum clock rate of 216MHz for the STM32F769I device
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800081a:	f004 fb31 	bl	8004e80 <HAL_PWREx_EnableOverDrive>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	bf14      	ite	ne
 8000824:	2301      	movne	r3, #1
 8000826:	2300      	moveq	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <_Z16SystemInitializev+0x10a>
  	return QA_Fail;
 800082e:	2301      	movs	r3, #1
 8000830:	e10b      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //---------------------------
  //Initialize CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000832:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |      //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 8000842:	230f      	movs	r3, #15
 8000844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  		                         RCC_CLOCKTYPE_SYSCLK |
                               RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;  //Define primary PLL clock as system clock source
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;          //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 216MHz
 800084e:	2300      	movs	r3, #0
 8000850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV4;            //Set clock divider for peripheral bus 1 (APB1), DIV4 provides an APB1 frequency of 54MHz
 8000854:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                                                         //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 108MHz

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;            //Set clock divider for peripheral bus 2 (APB2), DIV2 provides an APB2 frequency of 108MHz
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                                                         //NOTE: APB2 timer clocks are clock doubled, providing APB2 timers with 216MHz clocks

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_7) != HAL_OK) { //Initialize system clocks using required values, and setting Flash latency to 7 cycles
 8000864:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000868:	2107      	movs	r1, #7
 800086a:	4618      	mov	r0, r3
 800086c:	f005 fa8a 	bl	8005d84 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf14      	ite	ne
 8000876:	2301      	movne	r3, #1
 8000878:	2300      	moveq	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <_Z16SystemInitializev+0x15c>
  	return QA_Fail;
 8000880:	2301      	movs	r3, #1
 8000882:	e0e2      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //----------------------------
  //Initialize Peripheral Clocks
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 8000884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000888:	2290      	movs	r2, #144	; 0x90
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f00c ffdd 	bl	800d84c <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC |
 8000892:	2328      	movs	r3, #40	; 0x28
 8000894:	643b      	str	r3, [r7, #64]	; 0x40
  		                                     RCC_PERIPHCLK_LTDC;

    //Define settings for PLLSAI, as this PLL is also used as the clock source for the LTDC peripheral which we require to run the LCD screen
	RCC_PeriphClkInit.PLLSAI.PLLSAIN       = 384;
 8000896:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800089a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_PeriphClkInit.PLLSAI.PLLSAIP       = RCC_PLLSAIP_DIV8;
 800089c:	2303      	movs	r3, #3
 800089e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_PeriphClkInit.PLLSAI.PLLSAIR       = 7;
 80008a0:	2307      	movs	r3, #7
 80008a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_PeriphClkInit.PLLSAI.PLLSAIQ       = 8;
 80008a4:	2308      	movs	r3, #8
 80008a6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_PeriphClkInit.PLLSAIDivQ           = 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_PeriphClkInit.PLLSAIDivR           = RCC_PLLSAIDIVR_2;
 80008ac:	2300      	movs	r3, #0
 80008ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  RCC_PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE; //Set the LSE oscillator as the clock source for the Real Time Clock
 80008b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b4:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK) { //Initialize the peripheral clocks used the required values
 80008b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ba:	4618      	mov	r0, r3
 80008bc:	f005 fc38 	bl	8006130 <HAL_RCCEx_PeriphCLKConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bf14      	ite	ne
 80008c6:	2301      	movne	r3, #1
 80008c8:	2300      	moveq	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d007      	beq.n	80008e0 <_Z16SystemInitializev+0x1b8>
  	return QA_Fail;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e0ba      	b.n	8000a4a <_Z16SystemInitializev+0x322>
 80008d4:	40023c00 	.word	0x40023c00
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000
  }

  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b5c      	ldr	r3, [pc, #368]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a5b      	ldr	r2, [pc, #364]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
 80008ec:	4b59      	ldr	r3, [pc, #356]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
 80008f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b56      	ldr	r3, [pc, #344]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a55      	ldr	r2, [pc, #340]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b53      	ldr	r3, [pc, #332]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000910:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a4f      	ldr	r2, [pc, #316]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000928:	4b4a      	ldr	r3, [pc, #296]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a49      	ldr	r2, [pc, #292]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000940:	4b44      	ldr	r3, [pc, #272]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a43      	ldr	r2, [pc, #268]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000958:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a3d      	ldr	r2, [pc, #244]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
 800096e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
 800099c:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a27      	ldr	r2, [pc, #156]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	681b      	ldr	r3, [r3, #0]

  //-----------------
  //Enable DMA Clocks
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000a40:	463b      	mov	r3, r7
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	463b      	mov	r3, r7
 8000a46:	681b      	ldr	r3, [r3, #0]

  //Return
  return QA_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800

08000a58 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HardFault_Handler+0x1c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f008 fc74 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HardFault_Handler+0x20>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f008 fc6f 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000a80:	e7fe      	b.n	8000a80 <HardFault_Handler+0x18>
 8000a82:	bf00      	nop
 8000a84:	200002f0 	.word	0x200002f0
 8000a88:	200002f4 	.word	0x200002f4

08000a8c <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MemManage_Handler+0x1c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f008 fc62 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <MemManage_Handler+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f008 fc5d 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x18>
 8000aa6:	bf00      	nop
 8000aa8:	200002f0 	.word	0x200002f0
 8000aac:	200002f4 	.word	0x200002f4

08000ab0 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <BusFault_Handler+0x1c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f008 fc50 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <BusFault_Handler+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f008 fc4b 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000ac8:	e7fe      	b.n	8000ac8 <BusFault_Handler+0x18>
 8000aca:	bf00      	nop
 8000acc:	200002f0 	.word	0x200002f0
 8000ad0:	200002f4 	.word	0x200002f4

08000ad4 <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <UsageFault_Handler+0x1c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f008 fc3e 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <UsageFault_Handler+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f008 fc39 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x18>
 8000aee:	bf00      	nop
 8000af0:	200002f0 	.word	0x200002f0
 8000af4:	200002f4 	.word	0x200002f4

08000af8 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000b26:	f002 f8fd 	bl	8002d24 <HAL_IncTick>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <USART1_IRQHandler>:
  //Interrupt Handler Functions


//USART1_IRQHandler
//Interrupt Handler Function
void USART1_IRQHandler(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL);
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <USART1_IRQHandler+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f00c fb13 	bl	800d166 <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200002fc 	.word	0x200002fc

08000b48 <_ZN7QAD_FMCC1Ev>:

	//------------
	//Constructors

	//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_FMC() :
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	  m_eState(QA_NotInitialized) {}
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2202      	movs	r2, #2
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2204      	movs	r2, #4
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2208      	movs	r2, #8
 8000b72:	615a      	str	r2, [r3, #20]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2220      	movs	r2, #32
 8000b78:	619a      	str	r2, [r3, #24]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2230      	movs	r2, #48	; 0x30
 8000b7e:	61da      	str	r2, [r3, #28]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f240 6203 	movw	r2, #1539	; 0x603
 8000ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <_ZN7QAD_FMC3getEv>:

	//-----------------
	//Singleton Methods
  //
	//Used to retrieve a reference to the singleton class
  static QAD_FMC& get(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  	static QAD_FMC instance;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	f3bf 8f5b 	dmb	ish
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d010      	beq.n	8000bfe <_ZN7QAD_FMC3getEv+0x42>
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bde:	f00c fd80 	bl	800d6e2 <__cxa_guard_acquire>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bf14      	ite	ne
 8000be8:	2301      	movne	r3, #1
 8000bea:	2300      	moveq	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d005      	beq.n	8000bfe <_ZN7QAD_FMC3getEv+0x42>
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <_ZN7QAD_FMC3getEv+0x4c>)
 8000bf4:	f7ff ffa8 	bl	8000b48 <_ZN7QAD_FMCC1Ev>
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bfa:	f00c fd7e 	bl	800d6fa <__cxa_guard_release>
  	return instance;
 8000bfe:	4b02      	ldr	r3, [pc, #8]	; (8000c08 <_ZN7QAD_FMC3getEv+0x4c>)
  }
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000100 	.word	0x20000100
 8000c08:	20000094 	.word	0x20000094

08000c0c <_ZN7QAD_FMC4initEv>:

  //NOTE: No deinitialization method is supplied due to SDRAM being seen as a primary system component
  //in this codebase and is required for operation of systems such as LCD among others

  //Used to initialize the FMC peripheral and SDRAM module
  static QA_Result init(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000c10:	f7ff ffd4 	bl	8000bbc <_ZN7QAD_FMC3getEv>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 fa1e 	bl	8009058 <_ZN7QAD_FMC8imp_initEv>
 8000c1c:	4603      	mov	r3, r0
  }
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_ZN7QAD_FMC4testEv>:
  //Memory Testing Methods

  //Used to perform a memory test of the SDRAM module
  //Performs a full read and write test of all 16 megabytes of the SDRAM
  //Returns QA_OK if memory test is successful, or QA_Fail if not successful
  static QA_Result test(void) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  	return get().imp_test();
 8000c26:	f7ff ffc9 	bl	8000bbc <_ZN7QAD_FMC3getEv>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f008 fb2f 	bl	8009290 <_ZN7QAD_FMC8imp_testEv>
 8000c32:	4603      	mov	r3, r0
  }
 8000c34:	4618      	mov	r0, r3
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_ZN7QAD_RNGC1Ev>:
	//-----------
	//Constructor

	//As this is a private method within a singleton class, this method will be called the
	//first time the static get() method is called.
	QAD_RNG() :
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_sHandle({0}) {}
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <_ZN7QAD_RNG3getEv>:

  //-----------------
  //Singleton Methods
  //
  //Used to retrieve a reference to the singleton class
  static QAD_RNG& get(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  	static QAD_RNG instance;
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	f3bf 8f5b 	dmb	ish
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf0c      	ite	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	2300      	movne	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d010      	beq.n	8000ca6 <_ZN7QAD_RNG3getEv+0x42>
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000c86:	f00c fd2c 	bl	800d6e2 <__cxa_guard_acquire>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bf14      	ite	ne
 8000c90:	2301      	movne	r3, #1
 8000c92:	2300      	moveq	r3, #0
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <_ZN7QAD_RNG3getEv+0x42>
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <_ZN7QAD_RNG3getEv+0x4c>)
 8000c9c:	f7ff ffcc 	bl	8000c38 <_ZN7QAD_RNGC1Ev>
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000ca2:	f00c fd2a 	bl	800d6fa <__cxa_guard_release>
  	return instance;
 8000ca6:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <_ZN7QAD_RNG3getEv+0x4c>)
  }
 8000ca8:	4618      	mov	r0, r3
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000118 	.word	0x20000118
 8000cb0:	20000104 	.word	0x20000104

08000cb4 <_ZN7QAD_RNG4initEv>:
  //----------------------
  //Initialization Methods

  //Used to initialize the RNG peripheral
  //Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
  static QA_Result init(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000cb8:	f7ff ffd4 	bl	8000c64 <_ZN7QAD_RNG3getEv>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f00a f86e 	bl	800ada0 <_ZN7QAD_RNG8imp_initEv>
 8000cc4:	4603      	mov	r3, r0
  }
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_ZN7QAD_RTCC1Ev>:
	//------------
	//Constructors

	//As this is a private method within a singleton class, this method will be called the
	//first time the static get() method is called
	QAD_RTC() :
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
		m_eInitState(QA_NotInitialized),
		m_sHandle({0}) {}
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3304      	adds	r3, #4
 8000cdc:	2220      	movs	r2, #32
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f00c fdb3 	bl	800d84c <memset>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_ZN7QAD_RTC3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_RTC& get(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
		static QAD_RTC instance;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_ZN7QAD_RTC3getEv+0x48>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	f3bf 8f5b 	dmb	ish
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bf0c      	ite	eq
 8000d06:	2301      	moveq	r3, #1
 8000d08:	2300      	movne	r3, #0
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d010      	beq.n	8000d32 <_ZN7QAD_RTC3getEv+0x42>
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <_ZN7QAD_RTC3getEv+0x48>)
 8000d12:	f00c fce6 	bl	800d6e2 <__cxa_guard_acquire>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	2301      	movne	r3, #1
 8000d1e:	2300      	moveq	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <_ZN7QAD_RTC3getEv+0x42>
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <_ZN7QAD_RTC3getEv+0x4c>)
 8000d28:	f7ff ffcf 	bl	8000cca <_ZN7QAD_RTCC1Ev>
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <_ZN7QAD_RTC3getEv+0x48>)
 8000d2e:	f00c fce4 	bl	800d6fa <__cxa_guard_release>
		return instance;
 8000d32:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <_ZN7QAD_RTC3getEv+0x4c>)
	}
 8000d34:	4618      	mov	r0, r3
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000015c 	.word	0x2000015c
 8000d3c:	2000011c 	.word	0x2000011c

08000d40 <_ZN7QAD_RTC4initEv>:
	//----------------------
	//Initialization Methods

	//Used to initialize the RTC peripheral
	//Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
	static QA_Result init(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
		return get().imp_init();
 8000d44:	f7ff ffd4 	bl	8000cf0 <_ZN7QAD_RTC3getEv>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f00a f86e 	bl	800ae2c <_ZN7QAD_RTC8imp_initEv>
 8000d50:	4603      	mov	r3, r0
	}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_ZN7QAD_I2CC1ER18QAD_I2C_InitStruct>:
		//--------------------------
		//Constructors / Destructors

	QAD_I2C() = delete;                      //Delete the default class constructor, as we need an initialization structure to be provided on class creation.

	QAD_I2C(QAD_I2C_InitStruct& sInit) :     //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
		m_pSDA_GPIO(sInit.pSDA_GPIO),
		m_uSDA_Pin(sInit.uSDA_Pin),
		m_uSDA_AF(sInit.uSDA_AF),
		m_eIRQ_Event(I2C1_EV_IRQn),
		m_eIRQ_Error(I2C1_ER_IRQn),
		m_sHandle({0}) {}
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d66:	801a      	strh	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	709a      	strb	r2, [r3, #2]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2202      	movs	r2, #2
 8000d72:	70da      	strb	r2, [r3, #3]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	711a      	strb	r2, [r3, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	715a      	strb	r2, [r3, #5]
		m_eI2C(sInit.eI2C),
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	781a      	ldrb	r2, [r3, #0]
		m_sHandle({0}) {}
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	719a      	strb	r2, [r3, #6]
		m_uIRQPriority_Event(sInit.uIRQPriority_Event),
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	785a      	ldrb	r2, [r3, #1]
		m_sHandle({0}) {}
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	71da      	strb	r2, [r3, #7]
		m_uIRQPriority_Error(sInit.uIRQPriority_Error),
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	789a      	ldrb	r2, [r3, #2]
		m_sHandle({0}) {}
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	721a      	strb	r2, [r3, #8]
		m_uTiming(sInit.uTiming),
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685a      	ldr	r2, [r3, #4]
		m_sHandle({0}) {}
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	60da      	str	r2, [r3, #12]
		m_eAddressingMode(sInit.eAddressingMode),
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
		m_sHandle({0}) {}
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	611a      	str	r2, [r3, #16]
		m_eDualAddressingMode(sInit.eDualAddressingMode),
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68da      	ldr	r2, [r3, #12]
		m_sHandle({0}) {}
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	615a      	str	r2, [r3, #20]
		m_eGeneralCallMode(sInit.eGeneralCallMode),
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	691a      	ldr	r2, [r3, #16]
		m_sHandle({0}) {}
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	619a      	str	r2, [r3, #24]
		m_eNoStretchMode(sInit.eNoStretchMode),
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	695a      	ldr	r2, [r3, #20]
		m_sHandle({0}) {}
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	61da      	str	r2, [r3, #28]
		m_uOwnAddress1(sInit.uOwnAddress1),
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	8b1a      	ldrh	r2, [r3, #24]
		m_sHandle({0}) {}
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	841a      	strh	r2, [r3, #32]
		m_uOwnAddress2(sInit.uOwnAddress2),
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	8b5a      	ldrh	r2, [r3, #26]
		m_sHandle({0}) {}
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	845a      	strh	r2, [r3, #34]	; 0x22
		m_pSCL_GPIO(sInit.pSCL_GPIO),
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	69da      	ldr	r2, [r3, #28]
		m_sHandle({0}) {}
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
		m_uSCL_Pin(sInit.uSCL_Pin),
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	8c1a      	ldrh	r2, [r3, #32]
		m_sHandle({0}) {}
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	851a      	strh	r2, [r3, #40]	; 0x28
		m_uSCL_AF(sInit.uSCL_AF),
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		m_sHandle({0}) {}
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		m_pSDA_GPIO(sInit.pSDA_GPIO),
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		m_sHandle({0}) {}
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
		m_uSDA_Pin(sInit.uSDA_Pin),
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
		m_sHandle({0}) {}
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	861a      	strh	r2, [r3, #48]	; 0x30
		m_uSDA_AF(sInit.uSDA_AF),
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
		m_sHandle({0}) {}
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	221f      	movs	r2, #31
 8000e0c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2220      	movs	r2, #32
 8000e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3338      	adds	r3, #56	; 0x38
 8000e1c:	224c      	movs	r2, #76	; 0x4c
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f00c fd13 	bl	800d84c <memset>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_ZN14QAT_Vector2_16C1Ett>:
	//Default constructor. Sets both X and Y components to zero
  QAT_Vector2_16() :
    val(0) {}

  //Constructor used to set individual X and Y components
  QAT_Vector2_16(uint16_t x, uint16_t y) :
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	803b      	strh	r3, [r7, #0]
    x(x), y(y) {}
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	883a      	ldrh	r2, [r7, #0]
 8000e4a:	805a      	strh	r2, [r3, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_ZN14QAT_Vector2_16C1ERKS_>:

  //Copy Constructor
  //Copies data as single 32bit value for performance reasons
  QAT_Vector2_16(const QAT_Vector2_16& other) :
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
    val(other.val) {}
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_ZN10QAD_FT6206C1Ev>:


	//------------
	//Constructors

	QAD_FT6206() :
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
	  m_cI2C(NULL),
		m_eInitState(QA_NotInitialized) {}
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2254      	movs	r2, #84	; 0x54
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2270      	movs	r2, #112	; 0x70
 8000e8c:	705a      	strb	r2, [r3, #1]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	22a8      	movs	r2, #168	; 0xa8
 8000e92:	709a      	strb	r2, [r3, #2]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	22a4      	movs	r2, #164	; 0xa4
 8000e98:	70da      	strb	r2, [r3, #3]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	711a      	strb	r2, [r3, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	715a      	strb	r2, [r3, #5]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2209      	movs	r2, #9
 8000eaa:	719a      	strb	r2, [r3, #6]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2211      	movs	r2, #17
 8000eb0:	71da      	strb	r2, [r3, #7]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	721a      	strb	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	725a      	strb	r2, [r3, #9]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	729a      	strb	r2, [r3, #10]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	72da      	strb	r2, [r3, #11]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f640 2228 	movw	r2, #2600	; 0xa28
 8000ed0:	819a      	strh	r2, [r3, #12]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	751a      	strb	r2, [r3, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_ZN10QAD_FT62063getEv>:


	//-----------------
	//Singleton Methods

	static QAD_FT6206& get(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
		static QAD_FT6206 instance;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <_ZN10QAD_FT62063getEv+0x48>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	f3bf 8f5b 	dmb	ish
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf0c      	ite	eq
 8000f02:	2301      	moveq	r3, #1
 8000f04:	2300      	movne	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d010      	beq.n	8000f2e <_ZN10QAD_FT62063getEv+0x42>
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <_ZN10QAD_FT62063getEv+0x48>)
 8000f0e:	f00c fbe8 	bl	800d6e2 <__cxa_guard_acquire>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf14      	ite	ne
 8000f18:	2301      	movne	r3, #1
 8000f1a:	2300      	moveq	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <_ZN10QAD_FT62063getEv+0x42>
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <_ZN10QAD_FT62063getEv+0x4c>)
 8000f24:	f7ff ffa9 	bl	8000e7a <_ZN10QAD_FT6206C1Ev>
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <_ZN10QAD_FT62063getEv+0x48>)
 8000f2a:	f00c fbe6 	bl	800d6fa <__cxa_guard_release>
		return instance;
 8000f2e:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <_ZN10QAD_FT62063getEv+0x4c>)
	}
 8000f30:	4618      	mov	r0, r3
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000194 	.word	0x20000194
 8000f38:	20000160 	.word	0x20000160

08000f3c <_ZN10QAD_FT62064initEP7QAD_I2C>:


	//----------------------
	//Initialization Methods

	static QA_Result init(QAD_I2C* cI2C) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
		return get().imp_init(cI2C);
 8000f44:	f7ff ffd2 	bl	8000eec <_ZN10QAD_FT62063getEv>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f007 ffeb 	bl	8008f28 <_ZN10QAD_FT62068imp_initEP7QAD_I2C>
 8000f52:	4603      	mov	r3, r0
	}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_ZN11QAD_QuadSPIC1Ev>:


	//------------
	//Constructors

	QAD_QuadSPI() :
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
		m_eInitState(QA_NotInitialized),
		m_eMemoryMappedState(QAD_QuadSPI_MemoryMapped_Disabled) {}
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f92:	615a      	str	r2, [r3, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f9a:	619a      	str	r2, [r3, #24]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
 8000fa2:	61da      	str	r2, [r3, #28]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2020 	strb.w	r2, [r3, #32]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <_ZN11QAD_QuadSPI3getEv>:
	QAD_QuadSPI& operator=(const QAD_QuadSPI& other) = delete;


	//-----------------
	//Singleton Methods
	static QAD_QuadSPI& get(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
		static QAD_QuadSPI instance;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <_ZN11QAD_QuadSPI3getEv+0x48>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f3bf 8f5b 	dmb	ish
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	bf0c      	ite	eq
 8000fda:	2301      	moveq	r3, #1
 8000fdc:	2300      	movne	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d010      	beq.n	8001006 <_ZN11QAD_QuadSPI3getEv+0x42>
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <_ZN11QAD_QuadSPI3getEv+0x48>)
 8000fe6:	f00c fb7c 	bl	800d6e2 <__cxa_guard_acquire>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	bf14      	ite	ne
 8000ff0:	2301      	movne	r3, #1
 8000ff2:	2300      	moveq	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <_ZN11QAD_QuadSPI3getEv+0x42>
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <_ZN11QAD_QuadSPI3getEv+0x4c>)
 8000ffc:	f7ff ffae 	bl	8000f5c <_ZN11QAD_QuadSPIC1Ev>
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <_ZN11QAD_QuadSPI3getEv+0x48>)
 8001002:	f00c fb7a 	bl	800d6fa <__cxa_guard_release>
		return instance;
 8001006:	4b02      	ldr	r3, [pc, #8]	; (8001010 <_ZN11QAD_QuadSPI3getEv+0x4c>)
	}
 8001008:	4618      	mov	r0, r3
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000208 	.word	0x20000208
 8001010:	20000198 	.word	0x20000198

08001014 <_ZN11QAD_QuadSPI4initEv>:


	//----------------------
	//Initialization Methods

	static QA_Result init(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
		return get().imp_init();
 8001018:	f7ff ffd4 	bl	8000fc4 <_ZN11QAD_QuadSPI3getEv>
 800101c:	4603      	mov	r3, r0
 800101e:	4618      	mov	r0, r3
 8001020:	f009 f8f9 	bl	800a216 <_ZN11QAD_QuadSPI8imp_initEv>
 8001024:	4603      	mov	r3, r0
	}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}

0800102a <_ZN9QAD_SDMMCC1Ev>:


	//------------
	//Constructors

	QAD_SDMMC() :
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
		m_uSizeMB(0),
		m_uBlockCount(0),
		m_uBlockSize(0),
		m_uType(0),
		m_uVersion(0),
		m_uClass(0) {}
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2264      	movs	r2, #100	; 0x64
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	711a      	strb	r2, [r3, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	715a      	strb	r2, [r3, #5]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	f04f 0300 	mov.w	r3, #0
 800104e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_ZN9QAD_SDMMC3getEv>:
	QAD_SDMMC& operator=(const QAD_SDMMC& other) = delete;


	//-----------------
	//Singleton Methods
	static QAD_SDMMC& get(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
		static QAD_SDMMC instance;
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <_ZN9QAD_SDMMC3getEv+0x48>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	f3bf 8f5b 	dmb	ish
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	bf0c      	ite	eq
 800109a:	2301      	moveq	r3, #1
 800109c:	2300      	movne	r3, #0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d010      	beq.n	80010c6 <_ZN9QAD_SDMMC3getEv+0x42>
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <_ZN9QAD_SDMMC3getEv+0x48>)
 80010a6:	f00c fb1c 	bl	800d6e2 <__cxa_guard_acquire>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf14      	ite	ne
 80010b0:	2301      	movne	r3, #1
 80010b2:	2300      	moveq	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <_ZN9QAD_SDMMC3getEv+0x42>
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <_ZN9QAD_SDMMC3getEv+0x4c>)
 80010bc:	f7ff ffb5 	bl	800102a <_ZN9QAD_SDMMCC1Ev>
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <_ZN9QAD_SDMMC3getEv+0x48>)
 80010c2:	f00c fb1a 	bl	800d6fa <__cxa_guard_release>
		return instance;
 80010c6:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <_ZN9QAD_SDMMC3getEv+0x4c>)
	}
 80010c8:	4618      	mov	r0, r3
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200002c0 	.word	0x200002c0
 80010d0:	20000210 	.word	0x20000210

080010d4 <_ZN9QAD_SDMMC4initEv>:


	//----------------------
	//Initialization Methods

	static QA_Result init(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
		return get().imp_init();
 80010d8:	f7ff ffd4 	bl	8001084 <_ZN9QAD_SDMMC3getEv>
 80010dc:	4603      	mov	r3, r0
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 ff29 	bl	800af36 <_ZN9QAD_SDMMC8imp_initEv>
 80010e4:	4603      	mov	r3, r0
	}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_ZN9QAD_SDMMC7processEv>:


	//-----------------
	//Processing Method

	static QA_Result process(void) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
		return get().imp_process();
 80010ee:	f7ff ffc9 	bl	8001084 <_ZN9QAD_SDMMC3getEv>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f009 ffbb 	bl	800b070 <_ZN9QAD_SDMMC11imp_processEv>
 80010fa:	4603      	mov	r3, r0
	}
 80010fc:	4618      	mov	r0, r3
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_ZN9QAD_SDMMC14getCardPresentEv>:


	//------------
	//Card Methods

	static QAD_SDMMC_CardPresence getCardPresent(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
		return get().imp_getCardPresent();
 8001104:	f7ff ffbe 	bl	8001084 <_ZN9QAD_SDMMC3getEv>
 8001108:	4603      	mov	r3, r0
 800110a:	4618      	mov	r0, r3
 800110c:	f009 ffe2 	bl	800b0d4 <_ZN9QAD_SDMMC18imp_getCardPresentEv>
 8001110:	4603      	mov	r3, r0
	}
 8001112:	4618      	mov	r0, r3
 8001114:	bd80      	pop	{r7, pc}

08001116 <_ZN9QAD_SDMMC12getCardStateEv>:

	static QAD_SDMMC_CardState getCardState(void) {
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
		return get().m_eCardState;
 800111a:	f7ff ffb3 	bl	8001084 <_ZN9QAD_SDMMC3getEv>
 800111e:	4603      	mov	r3, r0
 8001120:	795b      	ldrb	r3, [r3, #5]
	}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}

08001126 <_ZN9QAD_SDMMC13getCardSizeMBEv>:

	static uint64_t getCardSize(void) {
		return get().m_uSize;
	}

	static uint32_t getCardSizeMB(void) {
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
		return get().m_uSizeMB;
 800112a:	f7ff ffab 	bl	8001084 <_ZN9QAD_SDMMC3getEv>
 800112e:	4603      	mov	r3, r0
 8001130:	691b      	ldr	r3, [r3, #16]
	}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}

08001136 <_ZN9QAD_SDMMC12getBlockSizeEv>:

	static uint32_t getBlockSize(void) {
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
		return get().m_uBlockSize;
 800113a:	f7ff ffa3 	bl	8001084 <_ZN9QAD_SDMMC3getEv>
 800113e:	4603      	mov	r3, r0
 8001140:	699b      	ldr	r3, [r3, #24]
	}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}

08001146 <_ZN9QAD_SDMMC13getBlockCountEv>:

	static uint32_t getBlockCount(void) {
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0
		return get().m_uBlockCount;
 800114a:	f7ff ff9b 	bl	8001084 <_ZN9QAD_SDMMC3getEv>
 800114e:	4603      	mov	r3, r0
 8001150:	695b      	ldr	r3, [r3, #20]
	}
 8001152:	4618      	mov	r0, r3
 8001154:	bd80      	pop	{r7, pc}

08001156 <_ZN9QAD_SDMMC11getCardTypeEv>:

	static uint32_t getCardType(void) {
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
		return get().m_uType;
 800115a:	f7ff ff93 	bl	8001084 <_ZN9QAD_SDMMC3getEv>
 800115e:	4603      	mov	r3, r0
 8001160:	69db      	ldr	r3, [r3, #28]
	}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}

08001166 <_ZN9QAD_SDMMC14getCardVersionEv>:

	static uint32_t getCardVersion(void) {
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
		return get().m_uVersion;
 800116a:	f7ff ff8b 	bl	8001084 <_ZN9QAD_SDMMC3getEv>
 800116e:	4603      	mov	r3, r0
 8001170:	6a1b      	ldr	r3, [r3, #32]
	}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}

08001176 <_ZN9QAD_SDMMC12getCardClassEv>:

	static uint32_t getCardClass(void) {
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
		return get().m_uClass;
 800117a:	f7ff ff83 	bl	8001084 <_ZN9QAD_SDMMC3getEv>
 800117e:	4603      	mov	r3, r0
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}

08001186 <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	460b      	mov	r3, r1
 8001190:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f000 ff4b 	bl	8002034 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	887a      	ldrh	r2, [r7, #2]
 80011a2:	809a      	strh	r2, [r3, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	80da      	strh	r2, [r3, #6]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	811a      	strh	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	4608      	mov	r0, r1
 80011c6:	4611      	mov	r1, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	817b      	strh	r3, [r7, #10]
 80011ce:	460b      	mov	r3, r1
 80011d0:	813b      	strh	r3, [r7, #8]
 80011d2:	4613      	mov	r3, r2
 80011d4:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3304      	adds	r3, #4
 80011e0:	f107 020a 	add.w	r2, r7, #10
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 ff40 	bl	800206c <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3308      	adds	r3, #8
 80011f0:	f107 0208 	add.w	r2, r7, #8
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 ff38 	bl	800206c <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	731a      	strb	r2, [r3, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	735a      	strb	r2, [r3, #13]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2200      	movs	r2, #0
 800120c:	739a      	strb	r2, [r3, #14]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	73da      	strb	r2, [r3, #15]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	0800e580 	.word	0x0800e580

08001224 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	769a      	strb	r2, [r3, #26]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2225      	movs	r2, #37	; 0x25
 8001280:	76da      	strb	r2, [r3, #27]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	331c      	adds	r3, #28
 8001286:	2284      	movs	r2, #132	; 0x84
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f00c fade 	bl	800d84c <memset>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	8b99      	ldrh	r1, [r3, #28]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	8bda      	ldrh	r2, [r3, #30]
 80012c0:	2300      	movs	r3, #0
 80012c2:	f7ff ff7b 	bl	80011bc <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 80012c6:	4a09      	ldr	r2, [pc, #36]	; (80012ec <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	741a      	strb	r2, [r3, #16]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3314      	adds	r3, #20
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fee0 	bl	80020a2 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	08011b18 	.word	0x08011b18

080012f0 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 fefc 	bl	80020f6 <_ZNSaIP12QAS_LCD_FontED1Ev>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fedf 	bl	80020d6 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ffeb 	bl	8001308 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_ZN15QAS_LCD_FontMgrC1Ev>:

	//--------------------------
	//Constructors / Destructors

	//Default constructor, which clears all data to default on class construction
	QAS_LCD_FontMgr() :
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
		m_iCurrentIdx(-1),
		m_pCurrent(NULL),
		m_pBuffer(NULL),
		m_uColor(0x0000) {
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ffeb 	bl	8001322 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	731a      	strb	r2, [r3, #12]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	831a      	strh	r2, [r3, #24]
		m_vFonts.clear();
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 ff05 	bl	8002176 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
	}
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <_ZN15QAS_LCD_FontMgrD1Ev>:

	//Class destructor which iterates through all fonts stored in m_vFonts vector and
	//deletes/deallocates them to prevent memory leaks when class is destroyed
	~QAS_LCD_FontMgr() {
 8001376:	b590      	push	{r4, r7, lr}
 8001378:	b085      	sub	sp, #20
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	7bfc      	ldrb	r4, [r7, #15]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	f000 ff03 	bl	8002192 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800138c:	4603      	mov	r3, r0
 800138e:	429c      	cmp	r4, r3
 8001390:	bf34      	ite	cc
 8001392:	2301      	movcc	r3, #1
 8001394:	2300      	movcs	r3, #0
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d011      	beq.n	80013c0 <_ZN15QAS_LCD_FontMgrD1Ev+0x4a>
			delete m_vFonts[i];
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 ff05 	bl	80021b2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 80013a8:	4603      	mov	r3, r0
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <_ZN15QAS_LCD_FontMgrD1Ev+0x42>
 80013b0:	2140      	movs	r1, #64	; 0x40
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00c f993 	bl	800d6de <_ZdlPvj>
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	3301      	adds	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e7e0      	b.n	8001382 <_ZN15QAS_LCD_FontMgrD1Ev+0xc>
	~QAS_LCD_FontMgr() {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 febc 	bl	8002140 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>
		}
	}
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}

080013d2 <_ZN7QAS_LCDC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAS_LCD() :
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_pDrawBuffer(NULL),
		m_uDrawColor(0x0000) {}
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	811a      	strh	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	330c      	adds	r3, #12
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ffa3 	bl	800133c <_ZN15QAS_LCD_FontMgrC1Ev>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_ZN7QAS_LCDD1Ev>:
class QAS_LCD {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	330c      	adds	r3, #12
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ffb2 	bl	8001376 <_ZN15QAS_LCD_FontMgrD1Ev>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <__tcf_0>:
  //-----------------
  //Singleton Methods
  //
  //Used to retrieve a reference to the singleton class
  static QAS_LCD& get() {
  	static QAS_LCD instance;
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
 8001420:	4801      	ldr	r0, [pc, #4]	; (8001428 <__tcf_0+0xc>)
 8001422:	f7ff ffed 	bl	8001400 <_ZN7QAS_LCDD1Ev>
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200002c4 	.word	0x200002c4

0800142c <_ZN7QAS_LCD3getEv>:
  static QAS_LCD& get() {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  	static QAS_LCD instance;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <_ZN7QAS_LCD3getEv+0x50>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	f3bf 8f5b 	dmb	ish
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf0c      	ite	eq
 8001442:	2301      	moveq	r3, #1
 8001444:	2300      	movne	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d013      	beq.n	8001474 <_ZN7QAS_LCD3getEv+0x48>
 800144c:	480b      	ldr	r0, [pc, #44]	; (800147c <_ZN7QAS_LCD3getEv+0x50>)
 800144e:	f00c f948 	bl	800d6e2 <__cxa_guard_acquire>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf14      	ite	ne
 8001458:	2301      	movne	r3, #1
 800145a:	2300      	moveq	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d008      	beq.n	8001474 <_ZN7QAS_LCD3getEv+0x48>
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <_ZN7QAS_LCD3getEv+0x54>)
 8001464:	f7ff ffb5 	bl	80013d2 <_ZN7QAS_LCDC1Ev>
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <_ZN7QAS_LCD3getEv+0x50>)
 800146a:	f00c f946 	bl	800d6fa <__cxa_guard_release>
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <_ZN7QAS_LCD3getEv+0x58>)
 8001470:	f00c f983 	bl	800d77a <atexit>
  	return instance;
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <_ZN7QAS_LCD3getEv+0x54>)
  }
 8001476:	4618      	mov	r0, r3
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200002ec 	.word	0x200002ec
 8001480:	200002c4 	.word	0x200002c4
 8001484:	0800141d 	.word	0x0800141d

08001488 <_ZN7QAS_LCD4initEv>:
	//----------------------
	//Initialization Methods

  //Used to initialize the LTDC peripheral and setup Font Manager class
  //Returns QA_OK if initialization successful, or QA_Fail if initialization fails
  static QA_Result init(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  	return get().imp_init();
 800148c:	f7ff ffce 	bl	800142c <_ZN7QAS_LCD3getEv>
 8001490:	4603      	mov	r3, r0
 8001492:	4618      	mov	r0, r3
 8001494:	f00a fd54 	bl	800bf40 <_ZN7QAS_LCD8imp_initEv>
 8001498:	4603      	mov	r3, r0
  }
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}

0800149e <_ZN7QAS_LCD10flipLayer0Ev>:
	//-----------------------
	//Rendering Setup Methods

  //Used to flip the front and back buffer for layer 0
  //See QAD_LTDC.hpp for more details
  static void flipLayer0(void) {
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  	get().imp_flipLayer0();
 80014a2:	f7ff ffc3 	bl	800142c <_ZN7QAS_LCD3getEv>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00a fdaf 	bl	800c00c <_ZN7QAS_LCD14imp_flipLayer0Ev>
  }
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_ZN7QAS_LCD10flipLayer1Ev>:

  //Used to flip the front and back buffer for layer 1
  //See QAD_LTDC.hpp for more details
  static void flipLayer1(void) {
 80014b2:	b580      	push	{r7, lr}
 80014b4:	af00      	add	r7, sp, #0
  	get().imp_flipLayer1();
 80014b6:	f7ff ffb9 	bl	800142c <_ZN7QAS_LCD3getEv>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4618      	mov	r0, r3
 80014be:	f00a fdaf 	bl	800c020 <_ZN7QAS_LCD14imp_flipLayer1Ev>
  }
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>:

  //Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
  //eLayer - Sets whether the current draw buffer is layer 0 or layer 1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
  static void setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  	get().imp_setDrawBuffer(eLayer);
 80014d0:	f7ff ffac 	bl	800142c <_ZN7QAS_LCD3getEv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	4619      	mov	r1, r3
 80014da:	4610      	mov	r0, r2
 80014dc:	f00a fdaa 	bl	800c034 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>
  }
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_ZN7QAS_LCD12setDrawColorEt>:

  //Used to set the current draw color
  //uColor - A 16bit ARGB4444 color value
  static void setDrawColor(uint16_t uColor) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
  	get().imp_setDrawColor(uColor);
 80014f2:	f7ff ff9b 	bl	800142c <_ZN7QAS_LCD3getEv>
 80014f6:	4602      	mov	r2, r0
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	4619      	mov	r1, r3
 80014fc:	4610      	mov	r0, r2
 80014fe:	f00a fdbe 	bl	800c07e <_ZN7QAS_LCD16imp_setDrawColorEt>
  }
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_ZN7QAS_LCD11clearBufferEv>:

	//-----------------
	//Rendering Methods

  //Used to clear the currently selected draw buffer to the currently selected draw color
  static void clearBuffer(void) {
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
  	get().imp_clearBuffer();
 800150e:	f7ff ff8d 	bl	800142c <_ZN7QAS_LCD3getEv>
 8001512:	4603      	mov	r3, r0
 8001514:	4618      	mov	r0, r3
 8001516:	f00a fdc9 	bl	800c0ac <_ZN7QAS_LCD15imp_clearBufferEv>
  }
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}

0800151e <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>:
  }

  //Used to draw a non-filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
  static void drawRect(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
  	get().imp_drawRect(cStart, cEnd);
 8001528:	f7ff ff80 	bl	800142c <_ZN7QAS_LCD3getEv>
 800152c:	4603      	mov	r3, r0
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	f00a fdda 	bl	800c0ec <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>
  }
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>:

  //Used to draw a filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
  static void drawRectFill(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  	get().imp_drawRectFill(cStart, cEnd);
 800154a:	f7ff ff6f 	bl	800142c <_ZN7QAS_LCD3getEv>
 800154e:	4603      	mov	r3, r0
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	f00a fe57 	bl	800c208 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>
  }
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_ZN7QAS_LCD13setFontByNameEPKc>:
	//Font Rendering Methods

  //Used to set the selected font/typeface to be used for text rendering
  //strName - A C-style string containing the name of the font to be selected. This must match one of the
  //          fonts stored in the font manager, otherwise no font will be selected
  static void setFontByName(const char* strName) {
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  	get().m_cFontMgr.setFontByName(strName);
 800156a:	f7ff ff5f 	bl	800142c <_ZN7QAS_LCD3getEv>
 800156e:	4603      	mov	r3, r0
 8001570:	330c      	adds	r3, #12
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	f00a ff69 	bl	800c44c <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>
  }
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <_ZN7QAS_LCD14setFontByIndexEh>:

  //Used to set the selected font/typeface to be used for text rendering
  //uIdx - The index of the fond to be selected, based on the array of fonts stored in the font manager
  static void setFontByIndex(uint8_t uIdx) {
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
  	get().m_cFontMgr.setFontByIndex(uIdx);
 800158c:	f7ff ff4e 	bl	800142c <_ZN7QAS_LCD3getEv>
 8001590:	4603      	mov	r3, r0
 8001592:	330c      	adds	r3, #12
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f00a ff7e 	bl	800c49a <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>
  }
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>:

  //Used to draw a left-aligned string of characters using the currently selected font/typeface
  //String will be drawn to currently selected draw buffer with currently selected draw color
  //cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-left location of the string to be drawn
  //str  - The C-style string to be drawn
  static void drawStrL(QAT_Vector2_16 cPos, const char* str) {
 80015a6:	b590      	push	{r4, r7, lr}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  	get().m_cFontMgr.drawStrL(cPos, str);
 80015b0:	f7ff ff3c 	bl	800142c <_ZN7QAS_LCD3getEv>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f103 040c 	add.w	r4, r3, #12
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fc4a 	bl	8000e5a <_ZN14QAT_Vector2_16C1ERKS_>
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	4620      	mov	r0, r4
 80015d0:	f00b f85d 	bl	800c68e <_ZN15QAS_LCD_FontMgr8drawStrLE14QAT_Vector2_16PKc>
  }
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}

080015dc <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>:

  //Used to draw a center-aligned string of characters using the currently selected font/typeface
  //String will be drawn to currently selected draw buffer with currently selected draw color
  //cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
  //str  - The C-style string to be drawn
  static void drawStrC(QAT_Vector2_16 cPos, const char* str) {
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  	get().m_cFontMgr.drawStrC(cPos, str);
 80015e6:	f7ff ff21 	bl	800142c <_ZN7QAS_LCD3getEv>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f103 040c 	add.w	r4, r3, #12
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fc2f 	bl	8000e5a <_ZN14QAT_Vector2_16C1ERKS_>
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	4619      	mov	r1, r3
 8001604:	4620      	mov	r0, r4
 8001606:	f00b f8ac 	bl	800c762 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>
  }
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}
	...

08001614 <main>:
//main
//Application Entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f769nihx.s
int main(void) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b0e0      	sub	sp, #384	; 0x180
 8001618:	af00      	add	r7, sp, #0
  //System Initialization

	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method
	if (SystemInitialize()) {
 800161a:	f7ff f885 	bl	8000728 <_Z16SystemInitializev>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf14      	ite	ne
 8001624:	2301      	movne	r3, #1
 8001626:	2300      	moveq	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d000      	beq.n	8001630 <main+0x1c>
	  while (1) {}
 800162e:	e7fe      	b.n	800162e <main+0x1a>
  }

  //Initialize Drivers
	if (QA_DriverInit()) {
 8001630:	f000 fa84 	bl	8001b3c <_Z13QA_DriverInitv>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf14      	ite	ne
 800163a:	2301      	movne	r3, #1
 800163c:	2300      	moveq	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d000      	beq.n	8001646 <main+0x32>
		while (1) {}
 8001644:	e7fe      	b.n	8001644 <main+0x30>
	}
	UART_STLink->txStringCR("Drivers Initialized OK");
 8001646:	4b9c      	ldr	r3, [pc, #624]	; (80018b8 <main+0x2a4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	499c      	ldr	r1, [pc, #624]	; (80018bc <main+0x2a8>)
 800164c:	4618      	mov	r0, r3
 800164e:	f00b fd9a 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
	UART_STLink->txCR();
 8001652:	4b99      	ldr	r3, [pc, #612]	; (80018b8 <main+0x2a4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f00b fdc9 	bl	800d1ee <_ZN19QAS_Serial_Dev_Base4txCREv>

	//Initialize Systems
	if (QA_SystemInit()) {
 800165c:	f000 fc4a 	bl	8001ef4 <_Z13QA_SystemInitv>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	bf14      	ite	ne
 8001666:	2301      	movne	r3, #1
 8001668:	2300      	moveq	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <main+0x6a>
		UART_STLink->txStringCR("Systems Initialization Failed");
 8001670:	4b91      	ldr	r3, [pc, #580]	; (80018b8 <main+0x2a4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4992      	ldr	r1, [pc, #584]	; (80018c0 <main+0x2ac>)
 8001676:	4618      	mov	r0, r3
 8001678:	f00b fd85 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
		while (1) {}
 800167c:	e7fe      	b.n	800167c <main+0x68>
	}
	UART_STLink->txStringCR("Systems Initialized OK");
 800167e:	4b8e      	ldr	r3, [pc, #568]	; (80018b8 <main+0x2a4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4990      	ldr	r1, [pc, #576]	; (80018c4 <main+0x2b0>)
 8001684:	4618      	mov	r0, r3
 8001686:	f00b fd7e 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  //Processing Loop

  //Create processing loop timing variables
  uint32_t uTicks;
  uint32_t uCurTick;
  uint32_t uNewTick = HAL_GetTick();
 800168a:	f001 fb5f 	bl	8002d4c <HAL_GetTick>
 800168e:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
  uint32_t uOldTick = uNewTick;
 8001692:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001696:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

  //Create task timing variables
  uint32_t uSDCardTicks = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  uint32_t uLCDTicks = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

  uint32_t uHeartbeatTicks = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

  	//----------------------------------
  	//Frame Timing
  	//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
  	//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 80016ac:	f001 fb4e 	bl	8002d4c <HAL_GetTick>
 80016b0:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 80016b4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80016b8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80016bc:	429a      	cmp	r2, r3
 80016be:	d01e      	beq.n	80016fe <main+0xea>
    	uOldTick = uNewTick;
 80016c0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80016c4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    	uNewTick = uCurTick;
 80016c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80016cc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 80016d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80016d8:	429a      	cmp	r2, r3
 80016da:	d208      	bcs.n	80016ee <main+0xda>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 80016dc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016e0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	3b01      	subs	r3, #1
 80016e8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016ec:	e00a      	b.n	8001704 <main+0xf0>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 80016ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016fc:	e002      	b.n	8001704 <main+0xf0>
    	}

    } else {
    	uTicks = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    }


    //Update SDCard
    uSDCardTicks += uTicks;
 8001704:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001708:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800170c:	4413      	add	r3, r2
 800170e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    if (uSDCardTicks >= QA_FT_SDCardTickThreshold) {
 8001712:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001716:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800171a:	d307      	bcc.n	800172c <main+0x118>
      QAD_SDMMC::process();
 800171c:	f7ff fce5 	bl	80010ea <_ZN9QAD_SDMMC7processEv>
    	uSDCardTicks -= QA_FT_SDCardTickThreshold;
 8001720:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001724:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001728:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    }


    //Update LCD
    uLCDTicks += uTicks;
 800172c:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8001730:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001734:	4413      	add	r3, r2
 8001736:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    if (uLCDTicks >= QA_FT_LCDTickThreshold) {
 800173a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800173e:	2b20      	cmp	r3, #32
 8001740:	f240 81cd 	bls.w	8001ade <main+0x4ca>

    	char strLCD[256];

      QAS_LCD::setDrawBuffer(QAD_LTDC_Layer0);
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff febe 	bl	80014c6 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
      QAS_LCD::setDrawColor(0xF333);
 800174a:	f24f 3033 	movw	r0, #62259	; 0xf333
 800174e:	f7ff fecb 	bl	80014e8 <_ZN7QAS_LCD12setDrawColorEt>
      QAS_LCD::clearBuffer();
 8001752:	f7ff feda 	bl	800150a <_ZN7QAS_LCD11clearBufferEv>

      QAS_LCD::setDrawColor(0xF000);
 8001756:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800175a:	f7ff fec5 	bl	80014e8 <_ZN7QAS_LCD12setDrawColorEt>
      QAS_LCD::drawRectFill(QAT_Vector2_16(40, 40), QAT_Vector2_16(760, 440));
 800175e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001762:	2228      	movs	r2, #40	; 0x28
 8001764:	2128      	movs	r1, #40	; 0x28
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fb62 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 800176c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001770:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001774:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fb59 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 800177e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001782:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fed9 	bl	8001540 <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>

      QAS_LCD::setFontByIndex(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f7ff fef7 	bl	8001582 <_ZN7QAS_LCD14setFontByIndexEh>
      QAS_LCD::setDrawColor(0xFFFF);
 8001794:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001798:	f7ff fea6 	bl	80014e8 <_ZN7QAS_LCD12setDrawColorEt>
      QAS_LCD::drawStrC(QAT_Vector2_16(400, 45), "SD Card Test");
 800179c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80017a0:	222d      	movs	r2, #45	; 0x2d
 80017a2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fb42 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 80017ac:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80017b0:	4945      	ldr	r1, [pc, #276]	; (80018c8 <main+0x2b4>)
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff12 	bl	80015dc <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

        //Card Presence
      QAS_LCD::drawStrL(QAT_Vector2_16(50, 80), "Card Present:");
 80017b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017bc:	2250      	movs	r2, #80	; 0x50
 80017be:	2132      	movs	r1, #50	; 0x32
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fb35 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 80017c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017ca:	4940      	ldr	r1, [pc, #256]	; (80018cc <main+0x2b8>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff feea 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>
      if (QAD_SDMMC::getCardPresent())
 80017d2:	f7ff fc95 	bl	8001100 <_ZN9QAD_SDMMC14getCardPresentEv>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf14      	ite	ne
 80017dc:	2301      	movne	r3, #1
 80017de:	2300      	moveq	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00e      	beq.n	8001804 <main+0x1f0>
      	QAS_LCD::drawStrL(QAT_Vector2_16(400, 80), "Card Present"); else
 80017e6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80017ea:	2250      	movs	r2, #80	; 0x50
 80017ec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fb1d 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 80017f6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80017fa:	4935      	ldr	r1, [pc, #212]	; (80018d0 <main+0x2bc>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fed2 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>
 8001802:	e00d      	b.n	8001820 <main+0x20c>
      	QAS_LCD::drawStrL(QAT_Vector2_16(400, 80), "No Card");
 8001804:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001808:	2250      	movs	r2, #80	; 0x50
 800180a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fb0e 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001814:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001818:	492e      	ldr	r1, [pc, #184]	; (80018d4 <main+0x2c0>)
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fec3 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>

        //Card State
      QAS_LCD::drawStrL(QAT_Vector2_16(50, 110), "Card State:");
 8001820:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001824:	226e      	movs	r2, #110	; 0x6e
 8001826:	2132      	movs	r1, #50	; 0x32
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fb01 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 800182e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001832:	4929      	ldr	r1, [pc, #164]	; (80018d8 <main+0x2c4>)
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff feb6 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>
      QAD_SDMMC_CardState eState = QAD_SDMMC::getCardState();
 800183a:	f7ff fc6c 	bl	8001116 <_ZN9QAD_SDMMC12getCardStateEv>
 800183e:	4603      	mov	r3, r0
 8001840:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
      if (eState == QAD_SDMMC_State_NoCard)
 8001844:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10e      	bne.n	800186a <main+0x256>
      	QAS_LCD::drawStrL(QAT_Vector2_16(400, 110), "No Card");
 800184c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001850:	226e      	movs	r2, #110	; 0x6e
 8001852:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff faea 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 800185c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001860:	491c      	ldr	r1, [pc, #112]	; (80018d4 <main+0x2c0>)
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fe9f 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>
 8001868:	e128      	b.n	8001abc <main+0x4a8>
      else if (eState == QAD_SDMMC_State_PeripheralError)
 800186a:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800186e:	2b02      	cmp	r3, #2
 8001870:	d10e      	bne.n	8001890 <main+0x27c>
      	QAS_LCD::drawStrL(QAT_Vector2_16(400, 110), "Peripheral Error");
 8001872:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001876:	226e      	movs	r2, #110	; 0x6e
 8001878:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fad7 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001882:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001886:	4915      	ldr	r1, [pc, #84]	; (80018dc <main+0x2c8>)
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fe8c 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>
 800188e:	e115      	b.n	8001abc <main+0x4a8>
      else if (eState == QAD_SDMMC_State_CardError)
 8001890:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8001894:	2b01      	cmp	r3, #1
 8001896:	d125      	bne.n	80018e4 <main+0x2d0>
      	QAS_LCD::drawStrL(QAT_Vector2_16(400, 110), "Card Error");
 8001898:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800189c:	226e      	movs	r2, #110	; 0x6e
 800189e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fac4 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 80018a8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018ac:	490c      	ldr	r1, [pc, #48]	; (80018e0 <main+0x2cc>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fe79 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>
 80018b4:	e102      	b.n	8001abc <main+0x4a8>
 80018b6:	bf00      	nop
 80018b8:	200002fc 	.word	0x200002fc
 80018bc:	0800e1e0 	.word	0x0800e1e0
 80018c0:	0800e1f8 	.word	0x0800e1f8
 80018c4:	0800e218 	.word	0x0800e218
 80018c8:	0800e230 	.word	0x0800e230
 80018cc:	0800e240 	.word	0x0800e240
 80018d0:	0800e250 	.word	0x0800e250
 80018d4:	0800e260 	.word	0x0800e260
 80018d8:	0800e268 	.word	0x0800e268
 80018dc:	0800e274 	.word	0x0800e274
 80018e0:	0800e288 	.word	0x0800e288
      else {

      	QAS_LCD::drawStrL(QAT_Vector2_16(400, 110), "Mounted");
 80018e4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80018e8:	226e      	movs	r2, #110	; 0x6e
 80018ea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fa9e 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 80018f4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80018f8:	4985      	ldr	r1, [pc, #532]	; (8001b10 <main+0x4fc>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fe53 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>

      	//Size
      	QAS_LCD::drawStrL(QAT_Vector2_16(50, 150), "Card Size:");
 8001900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001904:	2296      	movs	r2, #150	; 0x96
 8001906:	2132      	movs	r1, #50	; 0x32
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fa91 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 800190e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001912:	4980      	ldr	r1, [pc, #512]	; (8001b14 <main+0x500>)
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fe46 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>
      	sprintf(strLCD, "%lu MB", QAD_SDMMC::getCardSizeMB());
 800191a:	f7ff fc04 	bl	8001126 <_ZN9QAD_SDMMC13getCardSizeMBEv>
 800191e:	4602      	mov	r2, r0
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	497d      	ldr	r1, [pc, #500]	; (8001b18 <main+0x504>)
 8001924:	4618      	mov	r0, r3
 8001926:	f00c f897 	bl	800da58 <siprintf>
      	QAS_LCD::drawStrL(QAT_Vector2_16(400, 150), strLCD);
 800192a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800192e:	2296      	movs	r2, #150	; 0x96
 8001930:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fa7b 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 800193a:	1d3a      	adds	r2, r7, #4
 800193c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fe2f 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>

      	//Block Size
      	QAS_LCD::drawStrL(QAT_Vector2_16(50, 190), "Block Size:");
 8001948:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800194c:	22be      	movs	r2, #190	; 0xbe
 800194e:	2132      	movs	r1, #50	; 0x32
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fa6d 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001956:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800195a:	4970      	ldr	r1, [pc, #448]	; (8001b1c <main+0x508>)
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fe22 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>
      	sprintf(strLCD, "%lu bytes", QAD_SDMMC::getBlockSize());
 8001962:	f7ff fbe8 	bl	8001136 <_ZN9QAD_SDMMC12getBlockSizeEv>
 8001966:	4602      	mov	r2, r0
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	496d      	ldr	r1, [pc, #436]	; (8001b20 <main+0x50c>)
 800196c:	4618      	mov	r0, r3
 800196e:	f00c f873 	bl	800da58 <siprintf>
      	QAS_LCD::drawStrL(QAT_Vector2_16(400, 190), strLCD);
 8001972:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001976:	22be      	movs	r2, #190	; 0xbe
 8001978:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fa57 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001982:	1d3a      	adds	r2, r7, #4
 8001984:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fe0b 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>

      	//Block Count
      	QAS_LCD::drawStrL(QAT_Vector2_16(50, 220), "Block Count:");
 8001990:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001994:	22dc      	movs	r2, #220	; 0xdc
 8001996:	2132      	movs	r1, #50	; 0x32
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fa49 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 800199e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80019a2:	4960      	ldr	r1, [pc, #384]	; (8001b24 <main+0x510>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fdfe 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>
      	sprintf(strLCD, "%lu", QAD_SDMMC::getBlockCount());
 80019aa:	f7ff fbcc 	bl	8001146 <_ZN9QAD_SDMMC13getBlockCountEv>
 80019ae:	4602      	mov	r2, r0
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	495d      	ldr	r1, [pc, #372]	; (8001b28 <main+0x514>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00c f84f 	bl	800da58 <siprintf>
      	QAS_LCD::drawStrL(QAT_Vector2_16(400, 220), strLCD);
 80019ba:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80019be:	22dc      	movs	r2, #220	; 0xdc
 80019c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fa33 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 80019ca:	1d3a      	adds	r2, r7, #4
 80019cc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fde7 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>

      	//Card Type
      	QAS_LCD::drawStrL(QAT_Vector2_16(50, 270), "Card Type:");
 80019d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80019dc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80019e0:	2132      	movs	r1, #50	; 0x32
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fa24 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 80019e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80019ec:	494f      	ldr	r1, [pc, #316]	; (8001b2c <main+0x518>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fdd9 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>
      	sprintf(strLCD, "%lu", QAD_SDMMC::getCardType());
 80019f4:	f7ff fbaf 	bl	8001156 <_ZN9QAD_SDMMC11getCardTypeEv>
 80019f8:	4602      	mov	r2, r0
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	494a      	ldr	r1, [pc, #296]	; (8001b28 <main+0x514>)
 80019fe:	4618      	mov	r0, r3
 8001a00:	f00c f82a 	bl	800da58 <siprintf>
      	QAS_LCD::drawStrL(QAT_Vector2_16(400, 270), strLCD);
 8001a04:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001a08:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001a0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fa0d 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001a16:	1d3a      	adds	r2, r7, #4
 8001a18:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fdc1 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>

      	//Card Version
      	QAS_LCD::drawStrL(QAT_Vector2_16(50, 300), "Card Version:");
 8001a24:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001a28:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a2c:	2132      	movs	r1, #50	; 0x32
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f9fe 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001a34:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001a38:	493d      	ldr	r1, [pc, #244]	; (8001b30 <main+0x51c>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fdb3 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>
      	sprintf(strLCD, "%lu", QAD_SDMMC::getCardVersion());
 8001a40:	f7ff fb91 	bl	8001166 <_ZN9QAD_SDMMC14getCardVersionEv>
 8001a44:	4602      	mov	r2, r0
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4937      	ldr	r1, [pc, #220]	; (8001b28 <main+0x514>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f00c f804 	bl	800da58 <siprintf>
      	QAS_LCD::drawStrL(QAT_Vector2_16(400, 300), strLCD);
 8001a50:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001a54:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a58:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f9e7 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001a62:	1d3a      	adds	r2, r7, #4
 8001a64:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fd9b 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>

      	//Card Class
      	QAS_LCD::drawStrL(QAT_Vector2_16(50, 330), "Card Class:");
 8001a70:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001a74:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001a78:	2132      	movs	r1, #50	; 0x32
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f9d8 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001a80:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001a84:	492b      	ldr	r1, [pc, #172]	; (8001b34 <main+0x520>)
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fd8d 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>
      	sprintf(strLCD, "%lu", QAD_SDMMC::getCardClass());
 8001a8c:	f7ff fb73 	bl	8001176 <_ZN9QAD_SDMMC12getCardClassEv>
 8001a90:	4602      	mov	r2, r0
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	4924      	ldr	r1, [pc, #144]	; (8001b28 <main+0x514>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f00b ffde 	bl	800da58 <siprintf>
      	QAS_LCD::drawStrL(QAT_Vector2_16(400, 330), strLCD);
 8001a9c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001aa0:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001aa4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f9c1 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001aae:	1d3a      	adds	r2, r7, #4
 8001ab0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fd75 	bl	80015a6 <_ZN7QAS_LCD8drawStrLE14QAT_Vector2_16PKc>
      }

      QAS_LCD::setDrawBuffer(QAD_LTDC_Layer1);
 8001abc:	2001      	movs	r0, #1
 8001abe:	f7ff fd02 	bl	80014c6 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
      QAS_LCD::setDrawColor(0x0000);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff fd10 	bl	80014e8 <_ZN7QAS_LCD12setDrawColorEt>
      QAS_LCD::clearBuffer();
 8001ac8:	f7ff fd1f 	bl	800150a <_ZN7QAS_LCD11clearBufferEv>

      QAS_LCD::flipLayer0();
 8001acc:	f7ff fce7 	bl	800149e <_ZN7QAS_LCD10flipLayer0Ev>
      QAS_LCD::flipLayer1();
 8001ad0:	f7ff fcef 	bl	80014b2 <_ZN7QAS_LCD10flipLayer1Ev>

    	uLCDTicks -= QA_FT_LCDTickThreshold;
 8001ad4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001ad8:	3b21      	subs	r3, #33	; 0x21
 8001ada:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the green User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //has become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8001ade:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8001ae2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) {
 8001aec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001af0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001af4:	f4ff adda 	bcc.w	80016ac <main+0x98>
    	GPIO_UserLED_Green->toggle();
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <main+0x524>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f007 fc54 	bl	80093aa <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;
 8001b02:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001b06:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001b0a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    }

  }
 8001b0e:	e5cd      	b.n	80016ac <main+0x98>
 8001b10:	0800e294 	.word	0x0800e294
 8001b14:	0800e29c 	.word	0x0800e29c
 8001b18:	0800e2a8 	.word	0x0800e2a8
 8001b1c:	0800e2b0 	.word	0x0800e2b0
 8001b20:	0800e2bc 	.word	0x0800e2bc
 8001b24:	0800e2c8 	.word	0x0800e2c8
 8001b28:	0800e2d8 	.word	0x0800e2d8
 8001b2c:	0800e2dc 	.word	0x0800e2dc
 8001b30:	0800e2e8 	.word	0x0800e2e8
 8001b34:	0800e2f8 	.word	0x0800e2f8
 8001b38:	200002f4 	.word	0x200002f4

08001b3c <_Z13QA_DriverInitv>:
	//-------------------------------
	//System Initialization Functions

//QA_DriverInit
//System Initialization Function
QA_Result QA_DriverInit(void) {
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b095      	sub	sp, #84	; 0x54
 8001b40:	af00      	add	r7, sp, #0

	//----------------------------------
	//Initialize the User LEDs using the QAD_GPIO_Output driver class.
	//QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PORT, QAD_USER_LED_RED_GPIO_PIN and QAD_USERLED_GREEN_GPIO_PIN are defined in setup.hpp
  GPIO_UserLED_Red   = new QAD_GPIO_Output(QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_RED_GPIO_PIN);
 8001b42:	2014      	movs	r0, #20
 8001b44:	f00b fddc 	bl	800d700 <_Znwj>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461c      	mov	r4, r3
 8001b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b50:	49a8      	ldr	r1, [pc, #672]	; (8001df4 <_Z13QA_DriverInitv+0x2b8>)
 8001b52:	4620      	mov	r0, r4
 8001b54:	f007 fbe2 	bl	800931c <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8001b58:	4ba7      	ldr	r3, [pc, #668]	; (8001df8 <_Z13QA_DriverInitv+0x2bc>)
 8001b5a:	601c      	str	r4, [r3, #0]
  GPIO_UserLED_Green = new QAD_GPIO_Output(QAD_USERLED_GREEN_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PIN);
 8001b5c:	2014      	movs	r0, #20
 8001b5e:	f00b fdcf 	bl	800d700 <_Znwj>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461c      	mov	r4, r3
 8001b66:	2220      	movs	r2, #32
 8001b68:	49a2      	ldr	r1, [pc, #648]	; (8001df4 <_Z13QA_DriverInitv+0x2b8>)
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f007 fbd6 	bl	800931c <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8001b70:	4ba2      	ldr	r3, [pc, #648]	; (8001dfc <_Z13QA_DriverInitv+0x2c0>)
 8001b72:	601c      	str	r4, [r3, #0]


	//----------------------------------
  //Initialize the User Button using the QAD_GPIO_Input driver class.
  //QAD_USERBUTTON_GPIO_PORT and QAD_USERBUTTON_GPIO_PIN are defined in setup.hpp
  GPIO_UserButton = new QAD_GPIO_Input(QAD_USERBUTTON_GPIO_PORT, QAD_USERBUTTON_GPIO_PIN);
 8001b74:	2010      	movs	r0, #16
 8001b76:	f00b fdc3 	bl	800d700 <_Znwj>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461c      	mov	r4, r3
 8001b7e:	2201      	movs	r2, #1
 8001b80:	499f      	ldr	r1, [pc, #636]	; (8001e00 <_Z13QA_DriverInitv+0x2c4>)
 8001b82:	4620      	mov	r0, r4
 8001b84:	f007 fc50 	bl	8009428 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>
 8001b88:	4b9e      	ldr	r3, [pc, #632]	; (8001e04 <_Z13QA_DriverInitv+0x2c8>)
 8001b8a:	601c      	str	r4, [r3, #0]
  //Initialize UART1, which is used to communicate over serial via the STLINK connection
  //Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

  //Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sSerialInit.sUART_Init.baudrate    = QAD_UART1_BAUDRATE;
 8001b92:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART1;
 8001b98:	2309      	movs	r3, #9
 8001b9a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sSerialInit.sUART_Init.txgpio      = QAD_UART1_TX_PORT;
 8001b9e:	4b98      	ldr	r3, [pc, #608]	; (8001e00 <_Z13QA_DriverInitv+0x2c4>)
 8001ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSerialInit.sUART_Init.txpin       = QAD_UART1_TX_PIN;
 8001ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  sSerialInit.sUART_Init.txaf        = QAD_UART1_TX_AF;
 8001baa:	2307      	movs	r3, #7
 8001bac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  sSerialInit.sUART_Init.rxgpio      = QAD_UART1_RX_PORT;
 8001bb0:	4b93      	ldr	r3, [pc, #588]	; (8001e00 <_Z13QA_DriverInitv+0x2c4>)
 8001bb2:	647b      	str	r3, [r7, #68]	; 0x44
  sSerialInit.sUART_Init.rxpin       = QAD_UART1_RX_PIN;
 8001bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  sSerialInit.sUART_Init.rxaf        = QAD_UART1_RX_AF;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  sSerialInit.uTXFIFO_Size           = QAD_UART1_TX_FIFOSIZE;
 8001bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  sSerialInit.uRXFIFO_Size           = QAD_UART1_RX_FIFOSIZE;
 8001bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 8001bd2:	2018      	movs	r0, #24
 8001bd4:	f00b fd94 	bl	800d700 <_Znwj>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461c      	mov	r4, r3
 8001bdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001be0:	4619      	mov	r1, r3
 8001be2:	4620      	mov	r0, r4
 8001be4:	f7ff fb62 	bl	80012ac <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 8001be8:	4b87      	ldr	r3, [pc, #540]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001bea:	601c      	str	r4, [r3, #0]

  //If initialization failed the turn on User LED and enter infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 8001bec:	4b86      	ldr	r3, [pc, #536]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f00b fa97 	bl	800d126 <_ZN19QAS_Serial_Dev_Base4initEPv>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	bf0c      	ite	eq
 8001bfe:	2301      	moveq	r3, #1
 8001c00:	2300      	movne	r3, #0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <_Z13QA_DriverInitv+0xda>
  	GPIO_UserLED_Red->on();
 8001c08:	4b7b      	ldr	r3, [pc, #492]	; (8001df8 <_Z13QA_DriverInitv+0x2bc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f007 fba6 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
  	return QA_Fail;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e15b      	b.n	8001ece <_Z13QA_DriverInitv+0x392>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8001c16:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f00b fae7 	bl	800d1ee <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F769I Discovery Booting...");
 8001c20:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4979      	ldr	r1, [pc, #484]	; (8001e0c <_Z13QA_DriverInitv+0x2d0>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f00b faad 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>



	//----------------------------------
  //Initialize FMC / SDRAM driver using the QAD_FMC singleton driver class
  if (QAD_FMC::init() == QA_OK) {
 8001c2c:	f7fe ffee 	bl	8000c0c <_ZN7QAD_FMC4initEv>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf0c      	ite	eq
 8001c36:	2301      	moveq	r3, #1
 8001c38:	2300      	movne	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d02d      	beq.n	8001c9c <_Z13QA_DriverInitv+0x160>

  	//If initialization passed then output message via serial
    UART_STLink->txStringCR("SDRAM: Initialized");
 8001c40:	4b71      	ldr	r3, [pc, #452]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4972      	ldr	r1, [pc, #456]	; (8001e10 <_Z13QA_DriverInitv+0x2d4>)
 8001c46:	4618      	mov	r0, r3
 8001c48:	f00b fa9d 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

    //Test SDRAM to confirm correct operation
  	if (QAD_FMC::test() == QA_OK) {
 8001c4c:	f7fe ffe9 	bl	8000c22 <_ZN7QAD_FMC4testEv>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d010      	beq.n	8001c82 <_Z13QA_DriverInitv+0x146>

  		//If SDRAM test passed then output message via serial
  		UART_STLink->txStringCR("SDRAM: Test Passed");
 8001c60:	4b69      	ldr	r3, [pc, #420]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	496b      	ldr	r1, [pc, #428]	; (8001e14 <_Z13QA_DriverInitv+0x2d8>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00b fa8d 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  }


  //---------------
  //Init RNG Driver
  if (QAD_RNG::init()) {
 8001c6c:	f7ff f822 	bl	8000cb4 <_ZN7QAD_RNG4initEv>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf14      	ite	ne
 8001c76:	2301      	movne	r3, #1
 8001c78:	2300      	moveq	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d027      	beq.n	8001cd0 <_Z13QA_DriverInitv+0x194>
 8001c80:	e019      	b.n	8001cb6 <_Z13QA_DriverInitv+0x17a>
  		UART_STLink->txStringCR("SDRAM: Test Failed");
 8001c82:	4b61      	ldr	r3, [pc, #388]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4964      	ldr	r1, [pc, #400]	; (8001e18 <_Z13QA_DriverInitv+0x2dc>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f00b fa7c 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  		GPIO_UserLED_Red->on();
 8001c8e:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <_Z13QA_DriverInitv+0x2bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f007 fb63 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
    	return QA_Fail;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e118      	b.n	8001ece <_Z13QA_DriverInitv+0x392>
    UART_STLink->txStringCR("SDRAM: Initialization failed");
 8001c9c:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	495e      	ldr	r1, [pc, #376]	; (8001e1c <_Z13QA_DriverInitv+0x2e0>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00b fa6f 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
    GPIO_UserLED_Red->on();
 8001ca8:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <_Z13QA_DriverInitv+0x2bc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f007 fb56 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
  	return QA_Fail;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e10b      	b.n	8001ece <_Z13QA_DriverInitv+0x392>
  	UART_STLink->txStringCR("RNG: Initialization Failed");
 8001cb6:	4b54      	ldr	r3, [pc, #336]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4959      	ldr	r1, [pc, #356]	; (8001e20 <_Z13QA_DriverInitv+0x2e4>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f00b fa62 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 8001cc2:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <_Z13QA_DriverInitv+0x2bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f007 fb49 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
  	return QA_Fail;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0fe      	b.n	8001ece <_Z13QA_DriverInitv+0x392>
  }
  UART_STLink->txStringCR("RNG: Initialized");
 8001cd0:	4b4d      	ldr	r3, [pc, #308]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4953      	ldr	r1, [pc, #332]	; (8001e24 <_Z13QA_DriverInitv+0x2e8>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f00b fa55 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  //---------------
  //Init RTC Driver
  if (QAD_RTC::init()) {
 8001cdc:	f7ff f830 	bl	8000d40 <_ZN7QAD_RTC4initEv>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf14      	ite	ne
 8001ce6:	2301      	movne	r3, #1
 8001ce8:	2300      	moveq	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00c      	beq.n	8001d0a <_Z13QA_DriverInitv+0x1ce>
  	UART_STLink->txStringCR("RTC: Initialization Failed");
 8001cf0:	4b45      	ldr	r3, [pc, #276]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	494c      	ldr	r1, [pc, #304]	; (8001e28 <_Z13QA_DriverInitv+0x2ec>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f00b fa45 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 8001cfc:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <_Z13QA_DriverInitv+0x2bc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f007 fb2c 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
  	return QA_Fail;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0e1      	b.n	8001ece <_Z13QA_DriverInitv+0x392>
  }
  UART_STLink->txStringCR("RTC: Initialized");
 8001d0a:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4947      	ldr	r1, [pc, #284]	; (8001e2c <_Z13QA_DriverInitv+0x2f0>)
 8001d10:	4618      	mov	r0, r3
 8001d12:	f00b fa38 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  //---------------------
  //Initialize System I2C
  QAD_I2C_InitStruct I2C_Init;
  I2C_Init.eI2C                = QAD_I2C4;
 8001d16:	2303      	movs	r3, #3
 8001d18:	713b      	strb	r3, [r7, #4]
  I2C_Init.uIRQPriority_Event  = 0xE;
 8001d1a:	230e      	movs	r3, #14
 8001d1c:	717b      	strb	r3, [r7, #5]
  I2C_Init.uIRQPriority_Error  = 0xE;
 8001d1e:	230e      	movs	r3, #14
 8001d20:	71bb      	strb	r3, [r7, #6]
  I2C_Init.uTiming             = 40912732;
 8001d22:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <_Z13QA_DriverInitv+0x2f4>)
 8001d24:	60bb      	str	r3, [r7, #8]
  I2C_Init.eAddressingMode     = QAD_I2C_AddressingMode_7Bit;
 8001d26:	2301      	movs	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
  I2C_Init.eDualAddressingMode = QAD_I2C_DualAddressingMode_Disable;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  I2C_Init.eGeneralCallMode    = QAD_I2C_GeneralCallMode_Disable;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  I2C_Init.eNoStretchMode      = QAD_I2C_NoStretchMode_Disable;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  I2C_Init.uOwnAddress1        = 0x0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	83bb      	strh	r3, [r7, #28]
  I2C_Init.uOwnAddress2        = 0x0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	83fb      	strh	r3, [r7, #30]
  I2C_Init.pSCL_GPIO           = GPIOD;
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <_Z13QA_DriverInitv+0x2f8>)
 8001d40:	623b      	str	r3, [r7, #32]
  I2C_Init.uSCL_Pin            = GPIO_PIN_12;
 8001d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d46:	84bb      	strh	r3, [r7, #36]	; 0x24
  I2C_Init.uSCL_AF             = GPIO_AF4_I2C4;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  I2C_Init.pSDA_GPIO           = GPIOB;
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <_Z13QA_DriverInitv+0x2fc>)
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_Init.uSDA_Pin            = GPIO_PIN_7;
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	85bb      	strh	r3, [r7, #44]	; 0x2c
  I2C_Init.uSDA_AF             = GPIO_AF11_I2C4;
 8001d56:	230b      	movs	r3, #11
 8001d58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  I2C_System = new QAD_I2C(I2C_Init);
 8001d5c:	2084      	movs	r0, #132	; 0x84
 8001d5e:	f00b fccf 	bl	800d700 <_Znwj>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461c      	mov	r4, r3
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7fe fff3 	bl	8000d56 <_ZN7QAD_I2CC1ER18QAD_I2C_InitStruct>
 8001d70:	4b32      	ldr	r3, [pc, #200]	; (8001e3c <_Z13QA_DriverInitv+0x300>)
 8001d72:	601c      	str	r4, [r3, #0]

  if (I2C_System->init()) {
 8001d74:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <_Z13QA_DriverInitv+0x300>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f007 fc7c 	bl	8009676 <_ZN7QAD_I2C4initEv>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf14      	ite	ne
 8001d84:	2301      	movne	r3, #1
 8001d86:	2300      	moveq	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00c      	beq.n	8001da8 <_Z13QA_DriverInitv+0x26c>
  	UART_STLink->txStringCR("System I2C: Initialization Failed");
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	492b      	ldr	r1, [pc, #172]	; (8001e40 <_Z13QA_DriverInitv+0x304>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f00b f9f6 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <_Z13QA_DriverInitv+0x2bc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f007 fadd 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
  	return QA_Fail;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e092      	b.n	8001ece <_Z13QA_DriverInitv+0x392>
  }
  I2C_System->start();
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <_Z13QA_DriverInitv+0x300>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f007 fc8d 	bl	80096cc <_ZN7QAD_I2C5startEv>
  UART_STLink->txStringCR("System I2C: Initialized and Started");
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4923      	ldr	r1, [pc, #140]	; (8001e44 <_Z13QA_DriverInitv+0x308>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f00b f9e4 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  //----------------------------------
  //Initialize FT6206 Touch Controller
  if (QAD_FT6206::init(I2C_System)) {
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <_Z13QA_DriverInitv+0x300>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f8ba 	bl	8000f3c <_ZN10QAD_FT62064initEP7QAD_I2C>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	bf14      	ite	ne
 8001dce:	2301      	movne	r3, #1
 8001dd0:	2300      	moveq	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d039      	beq.n	8001e4c <_Z13QA_DriverInitv+0x310>
  	UART_STLink->txStringCR("FT6206: Initialization Failed");
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <_Z13QA_DriverInitv+0x2cc>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	491a      	ldr	r1, [pc, #104]	; (8001e48 <_Z13QA_DriverInitv+0x30c>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f00b f9d1 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <_Z13QA_DriverInitv+0x2bc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f007 fab8 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
  	return QA_Fail;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e06d      	b.n	8001ece <_Z13QA_DriverInitv+0x392>
 8001df2:	bf00      	nop
 8001df4:	40022400 	.word	0x40022400
 8001df8:	200002f0 	.word	0x200002f0
 8001dfc:	200002f4 	.word	0x200002f4
 8001e00:	40020000 	.word	0x40020000
 8001e04:	200002f8 	.word	0x200002f8
 8001e08:	200002fc 	.word	0x200002fc
 8001e0c:	0800e304 	.word	0x0800e304
 8001e10:	0800e324 	.word	0x0800e324
 8001e14:	0800e338 	.word	0x0800e338
 8001e18:	0800e34c 	.word	0x0800e34c
 8001e1c:	0800e360 	.word	0x0800e360
 8001e20:	0800e380 	.word	0x0800e380
 8001e24:	0800e39c 	.word	0x0800e39c
 8001e28:	0800e3b0 	.word	0x0800e3b0
 8001e2c:	0800e3cc 	.word	0x0800e3cc
 8001e30:	0270475c 	.word	0x0270475c
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	40020400 	.word	0x40020400
 8001e3c:	20000300 	.word	0x20000300
 8001e40:	0800e3e0 	.word	0x0800e3e0
 8001e44:	0800e404 	.word	0x0800e404
 8001e48:	0800e428 	.word	0x0800e428
  }
  UART_STLink->txStringCR("FT6206: Initialized");
 8001e4c:	4b22      	ldr	r3, [pc, #136]	; (8001ed8 <_Z13QA_DriverInitv+0x39c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4922      	ldr	r1, [pc, #136]	; (8001edc <_Z13QA_DriverInitv+0x3a0>)
 8001e52:	4618      	mov	r0, r3
 8001e54:	f00b f997 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  //-----------------------------------
  //Initialize QuadSPI / MX25L512 Flash
  if (QAD_QuadSPI::init()) {
 8001e58:	f7ff f8dc 	bl	8001014 <_ZN11QAD_QuadSPI4initEv>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bf14      	ite	ne
 8001e62:	2301      	movne	r3, #1
 8001e64:	2300      	moveq	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00c      	beq.n	8001e86 <_Z13QA_DriverInitv+0x34a>
  	UART_STLink->txStringCR("QuadSPI: Initialization Failed");
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <_Z13QA_DriverInitv+0x39c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	491b      	ldr	r1, [pc, #108]	; (8001ee0 <_Z13QA_DriverInitv+0x3a4>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	f00b f987 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <_Z13QA_DriverInitv+0x3a8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f007 fa6e 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
  	return QA_Fail;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e023      	b.n	8001ece <_Z13QA_DriverInitv+0x392>
  }
  UART_STLink->txStringCR("QuadSPI: Initialized");
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <_Z13QA_DriverInitv+0x39c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4917      	ldr	r1, [pc, #92]	; (8001ee8 <_Z13QA_DriverInitv+0x3ac>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00b f97a 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  //--------------------------------
  //Initialize SDMMC / SDCard Driver
  if (QAD_SDMMC::init()) {
 8001e92:	f7ff f91f 	bl	80010d4 <_ZN9QAD_SDMMC4initEv>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00c      	beq.n	8001ec0 <_Z13QA_DriverInitv+0x384>
  	UART_STLink->txStringCR("SDMMC: Initialization Failed");
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <_Z13QA_DriverInitv+0x39c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4910      	ldr	r1, [pc, #64]	; (8001eec <_Z13QA_DriverInitv+0x3b0>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f00b f96a 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <_Z13QA_DriverInitv+0x3a8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f007 fa51 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
  	return QA_Fail;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e006      	b.n	8001ece <_Z13QA_DriverInitv+0x392>
  }
  UART_STLink->txStringCR("SDMMC: Initialized");
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <_Z13QA_DriverInitv+0x39c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	490a      	ldr	r1, [pc, #40]	; (8001ef0 <_Z13QA_DriverInitv+0x3b4>)
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f00b f95d 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  //Return
  return QA_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3754      	adds	r7, #84	; 0x54
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd90      	pop	{r4, r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200002fc 	.word	0x200002fc
 8001edc:	0800e448 	.word	0x0800e448
 8001ee0:	0800e45c 	.word	0x0800e45c
 8001ee4:	200002f0 	.word	0x200002f0
 8001ee8:	0800e47c 	.word	0x0800e47c
 8001eec:	0800e494 	.word	0x0800e494
 8001ef0:	0800e4b4 	.word	0x0800e4b4

08001ef4 <_Z13QA_SystemInitv>:


//QA_SystemInit
//System Initialization Function
QA_Result QA_SystemInit(void) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0

	//----------------------------------
  //Initialize LCD using QAS_LCD singleton class.
  //This will also initialize LTDC and DSI peripherals, and also initialize otm8009a display controller
  if (QAS_LCD::init()) {
 8001efa:	f7ff fac5 	bl	8001488 <_ZN7QAS_LCD4initEv>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf14      	ite	ne
 8001f04:	2301      	movne	r3, #1
 8001f06:	2300      	moveq	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <_Z13QA_SystemInitv+0x2a>
  	UART_STLink->txStringCR("LCD: Initialization failed");
 8001f0e:	4b43      	ldr	r3, [pc, #268]	; (800201c <_Z13QA_SystemInitv+0x128>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4943      	ldr	r1, [pc, #268]	; (8002020 <_Z13QA_SystemInitv+0x12c>)
 8001f14:	4618      	mov	r0, r3
 8001f16:	f00b f936 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	return QA_Fail;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e079      	b.n	8002012 <_Z13QA_SystemInitv+0x11e>
  }
  UART_STLink->txStringCR("LCD: Initialized");
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	; (800201c <_Z13QA_SystemInitv+0x128>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4940      	ldr	r1, [pc, #256]	; (8002024 <_Z13QA_SystemInitv+0x130>)
 8001f24:	4618      	mov	r0, r3
 8001f26:	f00b f92e 	bl	800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //Test rendering methods to confirm LCD and rendering subsystem are working correctly

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer0);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f7ff facb 	bl	80014c6 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0xFFFF);
 8001f30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f34:	f7ff fad8 	bl	80014e8 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 8001f38:	f7ff fae7 	bl	800150a <_ZN7QAS_LCD11clearBufferEv>

  //Shapes
  QAS_LCD::setDrawColor(0xF003);
 8001f3c:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001f40:	f7ff fad2 	bl	80014e8 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRectFill(QAT_Vector2_16(40, 40), QAT_Vector2_16(760, 440));
 8001f44:	463b      	mov	r3, r7
 8001f46:	2228      	movs	r2, #40	; 0x28
 8001f48:	2128      	movs	r1, #40	; 0x28
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe ff70 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001f56:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe ff68 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001f60:	1d3a      	adds	r2, r7, #4
 8001f62:	463b      	mov	r3, r7
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff faea 	bl	8001540 <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawColor(0xFFFF);
 8001f6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f70:	f7ff faba 	bl	80014e8 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRect(QAT_Vector2_16(50, 50), QAT_Vector2_16(750, 430));
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	2232      	movs	r2, #50	; 0x32
 8001f7a:	2132      	movs	r1, #50	; 0x32
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe ff57 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8001f8a:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe ff4e 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001f94:	f107 020c 	add.w	r2, r7, #12
 8001f98:	f107 0308 	add.w	r3, r7, #8
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fabd 	bl	800151e <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer1);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7ff fa8e 	bl	80014c6 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0x0000);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f7ff fa9c 	bl	80014e8 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 8001fb0:	f7ff faab 	bl	800150a <_ZN7QAS_LCD11clearBufferEv>

  QAS_LCD::setDrawColor(0xFBFB);
 8001fb4:	f64f 30fb 	movw	r0, #64507	; 0xfbfb
 8001fb8:	f7ff fa96 	bl	80014e8 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::setFontByName("SegoeUI12pt");
 8001fbc:	481a      	ldr	r0, [pc, #104]	; (8002028 <_Z13QA_SystemInitv+0x134>)
 8001fbe:	f7ff fad0 	bl	8001562 <_ZN7QAS_LCD13setFontByNameEPKc>
  //QAS_LCD::setFontByIndex(0);
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 150), "Hello World!");
 8001fc2:	f107 0310 	add.w	r3, r7, #16
 8001fc6:	2296      	movs	r2, #150	; 0x96
 8001fc8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe ff2f 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001fd2:	f107 0310 	add.w	r3, r7, #16
 8001fd6:	4915      	ldr	r1, [pc, #84]	; (800202c <_Z13QA_SystemInitv+0x138>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff faff 	bl	80015dc <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::setDrawColor(0xFBBF);
 8001fde:	f64f 30bf 	movw	r0, #64447	; 0xfbbf
 8001fe2:	f7ff fa81 	bl	80014e8 <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("SegoeUI20ptSB");
  QAS_LCD::setFontByIndex(1);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7ff facb 	bl	8001582 <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 250), "Welcome to 1s and 0s");
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	22fa      	movs	r2, #250	; 0xfa
 8001ff2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe ff1a 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	490b      	ldr	r1, [pc, #44]	; (8002030 <_Z13QA_SystemInitv+0x13c>)
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff faea 	bl	80015dc <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>
  /*QAS_LCD::setDrawColor(0xFFBB);
  //QAS_LCD::setFontByName("ShowcardGothic18pt");
  QAS_LCD::setFontByIndex(2);
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 350), "Test Font");*/

  QAS_LCD::flipLayer0();
 8002008:	f7ff fa49 	bl	800149e <_ZN7QAS_LCD10flipLayer0Ev>
  QAS_LCD::flipLayer1();
 800200c:	f7ff fa51 	bl	80014b2 <_ZN7QAS_LCD10flipLayer1Ev>

  //Return
  return QA_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200002fc 	.word	0x200002fc
 8002020:	0800e4c8 	.word	0x0800e4c8
 8002024:	0800e4e4 	.word	0x0800e4e4
 8002028:	0800e4f8 	.word	0x0800e4f8
 800202c:	0800e504 	.word	0x0800e504
 8002030:	0800e514 	.word	0x0800e514

08002034 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 800203e:	683c      	ldr	r4, [r7, #0]
 8002040:	4620      	mov	r0, r4
 8002042:	f00b fb6e 	bl	800d722 <_Znaj>
 8002046:	4603      	mov	r3, r0
 8002048:	4618      	mov	r0, r3
 800204a:	4602      	mov	r2, r0
 800204c:	1e63      	subs	r3, r4, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	db04      	blt.n	800205c <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8002052:	2100      	movs	r1, #0
 8002054:	7011      	strb	r1, [r2, #0]
 8002056:	3201      	adds	r2, #1
 8002058:	3b01      	subs	r3, #1
 800205a:	e7f8      	b.n	800204e <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 800205c:	4601      	mov	r1, r0
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8b7 	bl	80021d2 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bd90      	pop	{r4, r7, pc}

0800206c <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800206c:	b5b0      	push	{r4, r5, r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8002076:	6838      	ldr	r0, [r7, #0]
 8002078:	f000 f8c7 	bl	800220a <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 800207c:	4603      	mov	r3, r0
 800207e:	881c      	ldrh	r4, [r3, #0]
 8002080:	200c      	movs	r0, #12
 8002082:	f00b fb3d 	bl	800d700 <_Znwj>
 8002086:	4603      	mov	r3, r0
 8002088:	461d      	mov	r5, r3
 800208a:	4621      	mov	r1, r4
 800208c:	4628      	mov	r0, r5
 800208e:	f7ff f87a 	bl	8001186 <_ZN14QAT_FIFOBufferC1Et>
 8002092:	4629      	mov	r1, r5
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f8c3 	bl	8002220 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bdb0      	pop	{r4, r5, r7, pc}

080020a2 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80020a2:	b5b0      	push	{r4, r5, r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80020ac:	6838      	ldr	r0, [r7, #0]
 80020ae:	f000 f8d3 	bl	8002258 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 80020b2:	4605      	mov	r5, r0
 80020b4:	20a4      	movs	r0, #164	; 0xa4
 80020b6:	f00b fb23 	bl	800d700 <_Znwj>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461c      	mov	r4, r3
 80020be:	4629      	mov	r1, r5
 80020c0:	4620      	mov	r0, r4
 80020c2:	f7ff f8af 	bl	8001224 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 80020c6:	4621      	mov	r1, r4
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f8d0 	bl	800226e <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bdb0      	pop	{r4, r5, r7, pc}

080020d6 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8e1 	bl	80022a6 <_ZNSaIP12QAS_LCD_FontEC1Ev>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f8e9 	bl	80022be <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_ZNSaIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f8f1 	bl	80022e6 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002126:	461a      	mov	r2, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f8e7 	bl	80022fc <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      }
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff f8dd 	bl	80012f0 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002140:	b5b0      	push	{r4, r5, r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681c      	ldr	r4, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f8e5 	bl	8002322 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8002158:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800215a:	461a      	mov	r2, r3
 800215c:	4629      	mov	r1, r5
 800215e:	4620      	mov	r0, r4
 8002160:	f000 f8ea 	bl	8002338 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ffd1 	bl	800210e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bdb0      	pop	{r4, r5, r7, pc}

08002176 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f8e5 	bl	8002354 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	109b      	asrs	r3, r3, #2
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
      }
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6839      	ldr	r1, [r7, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 f8d8 	bl	8002396 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f8df 	bl	80023be <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002200:	4603      	mov	r3, r0
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6839      	ldr	r1, [r7, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f8d2 	bl	80023d8 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4618      	mov	r0, r3
 800224a:	f000 f8d9 	bl	8002400 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800224e:	4603      	mov	r3, r0
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6839      	ldr	r1, [r7, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f8cc 	bl	800241a <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f8d3 	bl	8002442 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800229c:	4603      	mov	r3, r0
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_ZNSaIP12QAS_LCD_FontEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f8d4 	bl	800245c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
	{ }
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
	if (__p)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f8ac 	bl	8002472 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>
      }
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f8a2 	bl	8002490 <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>
    }
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	109b      	asrs	r3, r3, #2
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00e      	beq.n	800238e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ffd3 	bl	8002322 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800237c:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800237e:	461a      	mov	r2, r3
 8002380:	4621      	mov	r1, r4
 8002382:	6838      	ldr	r0, [r7, #0]
 8002384:	f7ff ffd8 	bl	8002338 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}

08002396 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f881 	bl	80024aa <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff21 	bl	80021f0 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f87b 	bl	80024c4 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f879 	bl	80024dc <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ff27 	bl	800223e <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 80023f0:	4602      	mov	r2, r0
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f873 	bl	80024f6 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002410:	4603      	mov	r3, r0
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f871 	bl	800250e <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff2d 	bl	800228c <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8002432:	4602      	mov	r2, r0
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4618      	mov	r0, r3
 800244e:	f000 f86b 	bl	8002528 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002452:	4603      	mov	r3, r0
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f85c 	bl	8002540 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>
 8002488:	bf00      	nop
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800249a:	6839      	ldr	r1, [r7, #0]
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f85c 	bl	800255a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>
    }
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f85b 	bl	8002570 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f85f 	bl	8002590 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f85f 	bl	80025aa <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f863 	bl	80025ca <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 8002504:	4603      	mov	r3, r0
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4618      	mov	r0, r3
 800251a:	f000 f863 	bl	80025e4 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f867 	bl	8002604 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 8002536:	4603      	mov	r3, r0
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 800254c:	68b8      	ldr	r0, [r7, #8]
 800254e:	f00b f8c4 	bl	800d6da <_ZdlPv>
      }
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f850 	bl	800261e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f858 	bl	8002636 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f859 	bl	8002652 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f858 	bl	8002668 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f860 	bl	8002680 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 f861 	bl	800269c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 80025da:	4603      	mov	r3, r0
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f860 	bl	80026b2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f868 	bl	80026ca <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f869 	bl	80026e6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 8002614:	4603      	mov	r3, r0
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f868 	bl	80026fc <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f84e 	bl	8002712 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f834 	bl	8002728 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
      : _Head() { }
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
	return 1;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <_kill>:

int _kill(int pid, int sig)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002758:	f00b f816 	bl	800d788 <__errno>
 800275c:	4603      	mov	r3, r0
 800275e:	2216      	movs	r2, #22
 8002760:	601a      	str	r2, [r3, #0]
	return -1;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <_exit>:

void _exit (int status)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002776:	f04f 31ff 	mov.w	r1, #4294967295
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ffe7 	bl	800274e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002780:	e7fe      	b.n	8002780 <_exit+0x12>
	...

08002784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <_sbrk+0x5c>)
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <_sbrk+0x60>)
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <_sbrk+0x64>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <_sbrk+0x68>)
 80027a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <_sbrk+0x64>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d207      	bcs.n	80027c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b4:	f00a ffe8 	bl	800d788 <__errno>
 80027b8:	4603      	mov	r3, r0
 80027ba:	220c      	movs	r2, #12
 80027bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	e009      	b.n	80027d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <_sbrk+0x64>)
 80027d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027d6:	68fb      	ldr	r3, [r7, #12]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20080000 	.word	0x20080000
 80027e4:	00000400 	.word	0x00000400
 80027e8:	20000304 	.word	0x20000304
 80027ec:	200005a0 	.word	0x200005a0

080027f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <SystemInit+0x20>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <SystemInit+0x20>)
 80027fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800281e:	49c1      	ldr	r1, [pc, #772]	; (8002b24 <OTM8009A_Init+0x310>)
 8002820:	2000      	movs	r0, #0
 8002822:	f007 fceb 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8002826:	49c0      	ldr	r1, [pc, #768]	; (8002b28 <OTM8009A_Init+0x314>)
 8002828:	2003      	movs	r0, #3
 800282a:	f007 fce7 	bl	800a1fc <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800282e:	49bf      	ldr	r1, [pc, #764]	; (8002b2c <OTM8009A_Init+0x318>)
 8002830:	2000      	movs	r0, #0
 8002832:	f007 fce3 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8002836:	49be      	ldr	r1, [pc, #760]	; (8002b30 <OTM8009A_Init+0x31c>)
 8002838:	2002      	movs	r0, #2
 800283a:	f007 fcdf 	bl	800a1fc <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800283e:	49bb      	ldr	r1, [pc, #748]	; (8002b2c <OTM8009A_Init+0x318>)
 8002840:	2000      	movs	r0, #0
 8002842:	f007 fcdb 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8002846:	49bb      	ldr	r1, [pc, #748]	; (8002b34 <OTM8009A_Init+0x320>)
 8002848:	2000      	movs	r0, #0
 800284a:	f007 fcd7 	bl	800a1fc <DSI_IO_WriteCmd>
  HAL_Delay(10);
 800284e:	200a      	movs	r0, #10
 8002850:	f000 fa88 	bl	8002d64 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8002854:	49b8      	ldr	r1, [pc, #736]	; (8002b38 <OTM8009A_Init+0x324>)
 8002856:	2000      	movs	r0, #0
 8002858:	f007 fcd0 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 800285c:	49b7      	ldr	r1, [pc, #732]	; (8002b3c <OTM8009A_Init+0x328>)
 800285e:	2000      	movs	r0, #0
 8002860:	f007 fccc 	bl	800a1fc <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8002864:	200a      	movs	r0, #10
 8002866:	f000 fa7d 	bl	8002d64 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800286a:	49b5      	ldr	r1, [pc, #724]	; (8002b40 <OTM8009A_Init+0x32c>)
 800286c:	2000      	movs	r0, #0
 800286e:	f007 fcc5 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8002872:	49b4      	ldr	r1, [pc, #720]	; (8002b44 <OTM8009A_Init+0x330>)
 8002874:	2000      	movs	r0, #0
 8002876:	f007 fcc1 	bl	800a1fc <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800287a:	49b3      	ldr	r1, [pc, #716]	; (8002b48 <OTM8009A_Init+0x334>)
 800287c:	2000      	movs	r0, #0
 800287e:	f007 fcbd 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8002882:	49b2      	ldr	r1, [pc, #712]	; (8002b4c <OTM8009A_Init+0x338>)
 8002884:	2000      	movs	r0, #0
 8002886:	f007 fcb9 	bl	800a1fc <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800288a:	49b1      	ldr	r1, [pc, #708]	; (8002b50 <OTM8009A_Init+0x33c>)
 800288c:	2000      	movs	r0, #0
 800288e:	f007 fcb5 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8002892:	49b0      	ldr	r1, [pc, #704]	; (8002b54 <OTM8009A_Init+0x340>)
 8002894:	2000      	movs	r0, #0
 8002896:	f007 fcb1 	bl	800a1fc <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800289a:	49a2      	ldr	r1, [pc, #648]	; (8002b24 <OTM8009A_Init+0x310>)
 800289c:	2000      	movs	r0, #0
 800289e:	f007 fcad 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80028a2:	49ad      	ldr	r1, [pc, #692]	; (8002b58 <OTM8009A_Init+0x344>)
 80028a4:	2000      	movs	r0, #0
 80028a6:	f007 fca9 	bl	800a1fc <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80028aa:	49ac      	ldr	r1, [pc, #688]	; (8002b5c <OTM8009A_Init+0x348>)
 80028ac:	2000      	movs	r0, #0
 80028ae:	f007 fca5 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80028b2:	49ab      	ldr	r1, [pc, #684]	; (8002b60 <OTM8009A_Init+0x34c>)
 80028b4:	2000      	movs	r0, #0
 80028b6:	f007 fca1 	bl	800a1fc <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80028ba:	49aa      	ldr	r1, [pc, #680]	; (8002b64 <OTM8009A_Init+0x350>)
 80028bc:	2000      	movs	r0, #0
 80028be:	f007 fc9d 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80028c2:	49a9      	ldr	r1, [pc, #676]	; (8002b68 <OTM8009A_Init+0x354>)
 80028c4:	2000      	movs	r0, #0
 80028c6:	f007 fc99 	bl	800a1fc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80028ca:	49a8      	ldr	r1, [pc, #672]	; (8002b6c <OTM8009A_Init+0x358>)
 80028cc:	2000      	movs	r0, #0
 80028ce:	f007 fc95 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80028d2:	49a7      	ldr	r1, [pc, #668]	; (8002b70 <OTM8009A_Init+0x35c>)
 80028d4:	2000      	movs	r0, #0
 80028d6:	f007 fc91 	bl	800a1fc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80028da:	49a6      	ldr	r1, [pc, #664]	; (8002b74 <OTM8009A_Init+0x360>)
 80028dc:	2000      	movs	r0, #0
 80028de:	f007 fc8d 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80028e2:	499a      	ldr	r1, [pc, #616]	; (8002b4c <OTM8009A_Init+0x338>)
 80028e4:	2000      	movs	r0, #0
 80028e6:	f007 fc89 	bl	800a1fc <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80028ea:	498e      	ldr	r1, [pc, #568]	; (8002b24 <OTM8009A_Init+0x310>)
 80028ec:	2000      	movs	r0, #0
 80028ee:	f007 fc85 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80028f2:	49a1      	ldr	r1, [pc, #644]	; (8002b78 <OTM8009A_Init+0x364>)
 80028f4:	2002      	movs	r0, #2
 80028f6:	f007 fc81 	bl	800a1fc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80028fa:	49a0      	ldr	r1, [pc, #640]	; (8002b7c <OTM8009A_Init+0x368>)
 80028fc:	2000      	movs	r0, #0
 80028fe:	f007 fc7d 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8002902:	499f      	ldr	r1, [pc, #636]	; (8002b80 <OTM8009A_Init+0x36c>)
 8002904:	2000      	movs	r0, #0
 8002906:	f007 fc79 	bl	800a1fc <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800290a:	499e      	ldr	r1, [pc, #632]	; (8002b84 <OTM8009A_Init+0x370>)
 800290c:	2000      	movs	r0, #0
 800290e:	f007 fc75 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8002912:	499d      	ldr	r1, [pc, #628]	; (8002b88 <OTM8009A_Init+0x374>)
 8002914:	2000      	movs	r0, #0
 8002916:	f007 fc71 	bl	800a1fc <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 800291a:	499c      	ldr	r1, [pc, #624]	; (8002b8c <OTM8009A_Init+0x378>)
 800291c:	2000      	movs	r0, #0
 800291e:	f007 fc6d 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8002922:	499b      	ldr	r1, [pc, #620]	; (8002b90 <OTM8009A_Init+0x37c>)
 8002924:	2000      	movs	r0, #0
 8002926:	f007 fc69 	bl	800a1fc <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800292a:	498c      	ldr	r1, [pc, #560]	; (8002b5c <OTM8009A_Init+0x348>)
 800292c:	2000      	movs	r0, #0
 800292e:	f007 fc65 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8002932:	4998      	ldr	r1, [pc, #608]	; (8002b94 <OTM8009A_Init+0x380>)
 8002934:	2000      	movs	r0, #0
 8002936:	f007 fc61 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800293a:	498a      	ldr	r1, [pc, #552]	; (8002b64 <OTM8009A_Init+0x350>)
 800293c:	2000      	movs	r0, #0
 800293e:	f007 fc5d 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8002942:	4995      	ldr	r1, [pc, #596]	; (8002b98 <OTM8009A_Init+0x384>)
 8002944:	2000      	movs	r0, #0
 8002946:	f007 fc59 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 800294a:	4994      	ldr	r1, [pc, #592]	; (8002b9c <OTM8009A_Init+0x388>)
 800294c:	2000      	movs	r0, #0
 800294e:	f007 fc55 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8002952:	4993      	ldr	r1, [pc, #588]	; (8002ba0 <OTM8009A_Init+0x38c>)
 8002954:	2002      	movs	r0, #2
 8002956:	f007 fc51 	bl	800a1fc <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800295a:	4974      	ldr	r1, [pc, #464]	; (8002b2c <OTM8009A_Init+0x318>)
 800295c:	2000      	movs	r0, #0
 800295e:	f007 fc4d 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8002962:	4990      	ldr	r1, [pc, #576]	; (8002ba4 <OTM8009A_Init+0x390>)
 8002964:	2006      	movs	r0, #6
 8002966:	f007 fc49 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800296a:	498f      	ldr	r1, [pc, #572]	; (8002ba8 <OTM8009A_Init+0x394>)
 800296c:	2000      	movs	r0, #0
 800296e:	f007 fc45 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8002972:	498e      	ldr	r1, [pc, #568]	; (8002bac <OTM8009A_Init+0x398>)
 8002974:	200e      	movs	r0, #14
 8002976:	f007 fc41 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800297a:	498d      	ldr	r1, [pc, #564]	; (8002bb0 <OTM8009A_Init+0x39c>)
 800297c:	2000      	movs	r0, #0
 800297e:	f007 fc3d 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8002982:	498c      	ldr	r1, [pc, #560]	; (8002bb4 <OTM8009A_Init+0x3a0>)
 8002984:	200e      	movs	r0, #14
 8002986:	f007 fc39 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800298a:	498b      	ldr	r1, [pc, #556]	; (8002bb8 <OTM8009A_Init+0x3a4>)
 800298c:	2000      	movs	r0, #0
 800298e:	f007 fc35 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8002992:	498a      	ldr	r1, [pc, #552]	; (8002bbc <OTM8009A_Init+0x3a8>)
 8002994:	200a      	movs	r0, #10
 8002996:	f007 fc31 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800299a:	4989      	ldr	r1, [pc, #548]	; (8002bc0 <OTM8009A_Init+0x3ac>)
 800299c:	2000      	movs	r0, #0
 800299e:	f007 fc2d 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80029a2:	4988      	ldr	r1, [pc, #544]	; (8002bc4 <OTM8009A_Init+0x3b0>)
 80029a4:	2000      	movs	r0, #0
 80029a6:	f007 fc29 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80029aa:	4960      	ldr	r1, [pc, #384]	; (8002b2c <OTM8009A_Init+0x318>)
 80029ac:	2000      	movs	r0, #0
 80029ae:	f007 fc25 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80029b2:	4985      	ldr	r1, [pc, #532]	; (8002bc8 <OTM8009A_Init+0x3b4>)
 80029b4:	200a      	movs	r0, #10
 80029b6:	f007 fc21 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80029ba:	4984      	ldr	r1, [pc, #528]	; (8002bcc <OTM8009A_Init+0x3b8>)
 80029bc:	2000      	movs	r0, #0
 80029be:	f007 fc1d 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80029c2:	4983      	ldr	r1, [pc, #524]	; (8002bd0 <OTM8009A_Init+0x3bc>)
 80029c4:	200f      	movs	r0, #15
 80029c6:	f007 fc19 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80029ca:	4977      	ldr	r1, [pc, #476]	; (8002ba8 <OTM8009A_Init+0x394>)
 80029cc:	2000      	movs	r0, #0
 80029ce:	f007 fc15 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80029d2:	4980      	ldr	r1, [pc, #512]	; (8002bd4 <OTM8009A_Init+0x3c0>)
 80029d4:	200f      	movs	r0, #15
 80029d6:	f007 fc11 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80029da:	4975      	ldr	r1, [pc, #468]	; (8002bb0 <OTM8009A_Init+0x39c>)
 80029dc:	2000      	movs	r0, #0
 80029de:	f007 fc0d 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80029e2:	497d      	ldr	r1, [pc, #500]	; (8002bd8 <OTM8009A_Init+0x3c4>)
 80029e4:	200a      	movs	r0, #10
 80029e6:	f007 fc09 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80029ea:	4973      	ldr	r1, [pc, #460]	; (8002bb8 <OTM8009A_Init+0x3a4>)
 80029ec:	2000      	movs	r0, #0
 80029ee:	f007 fc05 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80029f2:	497a      	ldr	r1, [pc, #488]	; (8002bdc <OTM8009A_Init+0x3c8>)
 80029f4:	200f      	movs	r0, #15
 80029f6:	f007 fc01 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80029fa:	4971      	ldr	r1, [pc, #452]	; (8002bc0 <OTM8009A_Init+0x3ac>)
 80029fc:	2000      	movs	r0, #0
 80029fe:	f007 fbfd 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8002a02:	4977      	ldr	r1, [pc, #476]	; (8002be0 <OTM8009A_Init+0x3cc>)
 8002a04:	200f      	movs	r0, #15
 8002a06:	f007 fbf9 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8002a0a:	4976      	ldr	r1, [pc, #472]	; (8002be4 <OTM8009A_Init+0x3d0>)
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f007 fbf5 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8002a12:	4975      	ldr	r1, [pc, #468]	; (8002be8 <OTM8009A_Init+0x3d4>)
 8002a14:	200a      	movs	r0, #10
 8002a16:	f007 fbf1 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8002a1a:	4974      	ldr	r1, [pc, #464]	; (8002bec <OTM8009A_Init+0x3d8>)
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f007 fbed 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8002a22:	4973      	ldr	r1, [pc, #460]	; (8002bf0 <OTM8009A_Init+0x3dc>)
 8002a24:	200a      	movs	r0, #10
 8002a26:	f007 fbe9 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002a2a:	4940      	ldr	r1, [pc, #256]	; (8002b2c <OTM8009A_Init+0x318>)
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f007 fbe5 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8002a32:	4970      	ldr	r1, [pc, #448]	; (8002bf4 <OTM8009A_Init+0x3e0>)
 8002a34:	200a      	movs	r0, #10
 8002a36:	f007 fbe1 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8002a3a:	4964      	ldr	r1, [pc, #400]	; (8002bcc <OTM8009A_Init+0x3b8>)
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f007 fbdd 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8002a42:	496d      	ldr	r1, [pc, #436]	; (8002bf8 <OTM8009A_Init+0x3e4>)
 8002a44:	200f      	movs	r0, #15
 8002a46:	f007 fbd9 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002a4a:	4957      	ldr	r1, [pc, #348]	; (8002ba8 <OTM8009A_Init+0x394>)
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f007 fbd5 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8002a52:	496a      	ldr	r1, [pc, #424]	; (8002bfc <OTM8009A_Init+0x3e8>)
 8002a54:	200f      	movs	r0, #15
 8002a56:	f007 fbd1 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002a5a:	4955      	ldr	r1, [pc, #340]	; (8002bb0 <OTM8009A_Init+0x39c>)
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f007 fbcd 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8002a62:	4967      	ldr	r1, [pc, #412]	; (8002c00 <OTM8009A_Init+0x3ec>)
 8002a64:	200a      	movs	r0, #10
 8002a66:	f007 fbc9 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002a6a:	4953      	ldr	r1, [pc, #332]	; (8002bb8 <OTM8009A_Init+0x3a4>)
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f007 fbc5 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8002a72:	4964      	ldr	r1, [pc, #400]	; (8002c04 <OTM8009A_Init+0x3f0>)
 8002a74:	200f      	movs	r0, #15
 8002a76:	f007 fbc1 	bl	800a1fc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002a7a:	4951      	ldr	r1, [pc, #324]	; (8002bc0 <OTM8009A_Init+0x3ac>)
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f007 fbbd 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8002a82:	4961      	ldr	r1, [pc, #388]	; (8002c08 <OTM8009A_Init+0x3f4>)
 8002a84:	200f      	movs	r0, #15
 8002a86:	f007 fbb9 	bl	800a1fc <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002a8a:	4934      	ldr	r1, [pc, #208]	; (8002b5c <OTM8009A_Init+0x348>)
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f007 fbb5 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8002a92:	495e      	ldr	r1, [pc, #376]	; (8002c0c <OTM8009A_Init+0x3f8>)
 8002a94:	2000      	movs	r0, #0
 8002a96:	f007 fbb1 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8002a9a:	495d      	ldr	r1, [pc, #372]	; (8002c10 <OTM8009A_Init+0x3fc>)
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f007 fbad 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8002aa2:	495c      	ldr	r1, [pc, #368]	; (8002c14 <OTM8009A_Init+0x400>)
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f007 fba9 	bl	800a1fc <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8002aaa:	495b      	ldr	r1, [pc, #364]	; (8002c18 <OTM8009A_Init+0x404>)
 8002aac:	2000      	movs	r0, #0
 8002aae:	f007 fba5 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8002ab2:	495a      	ldr	r1, [pc, #360]	; (8002c1c <OTM8009A_Init+0x408>)
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f007 fba1 	bl	800a1fc <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002aba:	491a      	ldr	r1, [pc, #104]	; (8002b24 <OTM8009A_Init+0x310>)
 8002abc:	2000      	movs	r0, #0
 8002abe:	f007 fb9d 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8002ac2:	4957      	ldr	r1, [pc, #348]	; (8002c20 <OTM8009A_Init+0x40c>)
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	f007 fb99 	bl	800a1fc <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002aca:	4916      	ldr	r1, [pc, #88]	; (8002b24 <OTM8009A_Init+0x310>)
 8002acc:	2000      	movs	r0, #0
 8002ace:	f007 fb95 	bl	800a1fc <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002ad2:	4914      	ldr	r1, [pc, #80]	; (8002b24 <OTM8009A_Init+0x310>)
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f007 fb91 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8002ada:	4952      	ldr	r1, [pc, #328]	; (8002c24 <OTM8009A_Init+0x410>)
 8002adc:	2010      	movs	r0, #16
 8002ade:	f007 fb8d 	bl	800a1fc <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002ae2:	4910      	ldr	r1, [pc, #64]	; (8002b24 <OTM8009A_Init+0x310>)
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f007 fb89 	bl	800a1fc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8002aea:	494f      	ldr	r1, [pc, #316]	; (8002c28 <OTM8009A_Init+0x414>)
 8002aec:	2010      	movs	r0, #16
 8002aee:	f007 fb85 	bl	800a1fc <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8002af2:	494e      	ldr	r1, [pc, #312]	; (8002c2c <OTM8009A_Init+0x418>)
 8002af4:	2000      	movs	r0, #0
 8002af6:	f007 fb81 	bl	800a1fc <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  HAL_Delay(120);
 8002afa:	2078      	movs	r0, #120	; 0x78
 8002afc:	f000 f932 	bl	8002d64 <HAL_Delay>

  switch(ColorCoding)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <OTM8009A_Init+0x304>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	f040 8095 	bne.w	8002c38 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8002b0e:	4948      	ldr	r1, [pc, #288]	; (8002c30 <OTM8009A_Init+0x41c>)
 8002b10:	2000      	movs	r0, #0
 8002b12:	f007 fb73 	bl	800a1fc <DSI_IO_WriteCmd>
    break;
 8002b16:	e090      	b.n	8002c3a <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8002b18:	4946      	ldr	r1, [pc, #280]	; (8002c34 <OTM8009A_Init+0x420>)
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f007 fb6e 	bl	800a1fc <DSI_IO_WriteCmd>
    break;
 8002b20:	e08b      	b.n	8002c3a <OTM8009A_Init+0x426>
 8002b22:	bf00      	nop
 8002b24:	0800e6fc 	.word	0x0800e6fc
 8002b28:	0800e5b4 	.word	0x0800e5b4
 8002b2c:	0800e700 	.word	0x0800e700
 8002b30:	0800e5b8 	.word	0x0800e5b8
 8002b34:	0800e704 	.word	0x0800e704
 8002b38:	0800e708 	.word	0x0800e708
 8002b3c:	0800e70c 	.word	0x0800e70c
 8002b40:	0800e710 	.word	0x0800e710
 8002b44:	0800e714 	.word	0x0800e714
 8002b48:	0800e718 	.word	0x0800e718
 8002b4c:	0800e71c 	.word	0x0800e71c
 8002b50:	0800e720 	.word	0x0800e720
 8002b54:	0800e724 	.word	0x0800e724
 8002b58:	0800e728 	.word	0x0800e728
 8002b5c:	0800e72c 	.word	0x0800e72c
 8002b60:	0800e730 	.word	0x0800e730
 8002b64:	0800e734 	.word	0x0800e734
 8002b68:	0800e738 	.word	0x0800e738
 8002b6c:	0800e73c 	.word	0x0800e73c
 8002b70:	0800e740 	.word	0x0800e740
 8002b74:	0800e744 	.word	0x0800e744
 8002b78:	0800e5e4 	.word	0x0800e5e4
 8002b7c:	0800e748 	.word	0x0800e748
 8002b80:	0800e74c 	.word	0x0800e74c
 8002b84:	0800e750 	.word	0x0800e750
 8002b88:	0800e754 	.word	0x0800e754
 8002b8c:	0800e758 	.word	0x0800e758
 8002b90:	0800e75c 	.word	0x0800e75c
 8002b94:	0800e760 	.word	0x0800e760
 8002b98:	0800e764 	.word	0x0800e764
 8002b9c:	0800e768 	.word	0x0800e768
 8002ba0:	0800e5e8 	.word	0x0800e5e8
 8002ba4:	0800e5ec 	.word	0x0800e5ec
 8002ba8:	0800e76c 	.word	0x0800e76c
 8002bac:	0800e5f4 	.word	0x0800e5f4
 8002bb0:	0800e770 	.word	0x0800e770
 8002bb4:	0800e604 	.word	0x0800e604
 8002bb8:	0800e774 	.word	0x0800e774
 8002bbc:	0800e614 	.word	0x0800e614
 8002bc0:	0800e778 	.word	0x0800e778
 8002bc4:	0800e7b0 	.word	0x0800e7b0
 8002bc8:	0800e620 	.word	0x0800e620
 8002bcc:	0800e77c 	.word	0x0800e77c
 8002bd0:	0800e62c 	.word	0x0800e62c
 8002bd4:	0800e63c 	.word	0x0800e63c
 8002bd8:	0800e64c 	.word	0x0800e64c
 8002bdc:	0800e658 	.word	0x0800e658
 8002be0:	0800e668 	.word	0x0800e668
 8002be4:	0800e780 	.word	0x0800e780
 8002be8:	0800e678 	.word	0x0800e678
 8002bec:	0800e784 	.word	0x0800e784
 8002bf0:	0800e684 	.word	0x0800e684
 8002bf4:	0800e690 	.word	0x0800e690
 8002bf8:	0800e69c 	.word	0x0800e69c
 8002bfc:	0800e6ac 	.word	0x0800e6ac
 8002c00:	0800e6bc 	.word	0x0800e6bc
 8002c04:	0800e6c8 	.word	0x0800e6c8
 8002c08:	0800e6d8 	.word	0x0800e6d8
 8002c0c:	0800e7b4 	.word	0x0800e7b4
 8002c10:	0800e7b8 	.word	0x0800e7b8
 8002c14:	0800e7bc 	.word	0x0800e7bc
 8002c18:	0800e7c0 	.word	0x0800e7c0
 8002c1c:	0800e7c4 	.word	0x0800e7c4
 8002c20:	0800e6e8 	.word	0x0800e6e8
 8002c24:	0800e5bc 	.word	0x0800e5bc
 8002c28:	0800e5d0 	.word	0x0800e5d0
 8002c2c:	0800e788 	.word	0x0800e788
 8002c30:	0800e78c 	.word	0x0800e78c
 8002c34:	0800e790 	.word	0x0800e790
  default :
    break;
 8002c38:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d10b      	bne.n	8002c58 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8002c40:	4916      	ldr	r1, [pc, #88]	; (8002c9c <OTM8009A_Init+0x488>)
 8002c42:	2000      	movs	r0, #0
 8002c44:	f007 fada 	bl	800a1fc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8002c48:	4915      	ldr	r1, [pc, #84]	; (8002ca0 <OTM8009A_Init+0x48c>)
 8002c4a:	2004      	movs	r0, #4
 8002c4c:	f007 fad6 	bl	800a1fc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8002c50:	4914      	ldr	r1, [pc, #80]	; (8002ca4 <OTM8009A_Init+0x490>)
 8002c52:	2004      	movs	r0, #4
 8002c54:	f007 fad2 	bl	800a1fc <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8002c58:	4913      	ldr	r1, [pc, #76]	; (8002ca8 <OTM8009A_Init+0x494>)
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f007 face 	bl	800a1fc <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8002c60:	4912      	ldr	r1, [pc, #72]	; (8002cac <OTM8009A_Init+0x498>)
 8002c62:	2000      	movs	r0, #0
 8002c64:	f007 faca 	bl	800a1fc <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8002c68:	4911      	ldr	r1, [pc, #68]	; (8002cb0 <OTM8009A_Init+0x49c>)
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f007 fac6 	bl	800a1fc <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8002c70:	4910      	ldr	r1, [pc, #64]	; (8002cb4 <OTM8009A_Init+0x4a0>)
 8002c72:	2000      	movs	r0, #0
 8002c74:	f007 fac2 	bl	800a1fc <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002c78:	490f      	ldr	r1, [pc, #60]	; (8002cb8 <OTM8009A_Init+0x4a4>)
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f007 fabe 	bl	800a1fc <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <OTM8009A_Init+0x4a8>)
 8002c82:	2000      	movs	r0, #0
 8002c84:	f007 faba 	bl	800a1fc <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8002c88:	490d      	ldr	r1, [pc, #52]	; (8002cc0 <OTM8009A_Init+0x4ac>)
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f007 fab6 	bl	800a1fc <DSI_IO_WriteCmd>

  return 0;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	0800e794 	.word	0x0800e794
 8002ca0:	0800e6ec 	.word	0x0800e6ec
 8002ca4:	0800e6f4 	.word	0x0800e6f4
 8002ca8:	0800e798 	.word	0x0800e798
 8002cac:	0800e79c 	.word	0x0800e79c
 8002cb0:	0800e7a0 	.word	0x0800e7a0
 8002cb4:	0800e7a4 	.word	0x0800e7a4
 8002cb8:	0800e7a8 	.word	0x0800e7a8
 8002cbc:	0800e6fc 	.word	0x0800e6fc
 8002cc0:	0800e7ac 	.word	0x0800e7ac

08002cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_InitTick+0x54>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_InitTick+0x58>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f999 	bl	800301a <HAL_SYSTICK_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00e      	b.n	8002d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b0f      	cmp	r3, #15
 8002cf6:	d80a      	bhi.n	8002d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f000 f953 	bl	8002faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d04:	4a06      	ldr	r2, [pc, #24]	; (8002d20 <HAL_InitTick+0x5c>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e000      	b.n	8002d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000008 	.word	0x20000008
 8002d20:	20000004 	.word	0x20000004

08002d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_IncTick+0x20>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_IncTick+0x24>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <HAL_IncTick+0x24>)
 8002d36:	6013      	str	r3, [r2, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000008 	.word	0x20000008
 8002d48:	2000058c 	.word	0x2000058c

08002d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d50:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <HAL_GetTick+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	2000058c 	.word	0x2000058c

08002d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff ffee 	bl	8002d4c <HAL_GetTick>
 8002d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d005      	beq.n	8002d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_Delay+0x44>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d8a:	bf00      	nop
 8002d8c:	f7ff ffde 	bl	8002d4c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d8f7      	bhi.n	8002d8c <HAL_Delay+0x28>
  {
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000008 	.word	0x20000008

08002dac <__NVIC_SetPriorityGrouping>:
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <__NVIC_SetPriorityGrouping+0x40>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dda:	4a04      	ldr	r2, [pc, #16]	; (8002dec <__NVIC_SetPriorityGrouping+0x40>)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	60d3      	str	r3, [r2, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00
 8002df0:	05fa0000 	.word	0x05fa0000

08002df4 <__NVIC_GetPriorityGrouping>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df8:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <__NVIC_GetPriorityGrouping+0x18>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	f003 0307 	and.w	r3, r3, #7
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <__NVIC_EnableIRQ>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	db0b      	blt.n	8002e3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	f003 021f 	and.w	r2, r3, #31
 8002e28:	4907      	ldr	r1, [pc, #28]	; (8002e48 <__NVIC_EnableIRQ+0x38>)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2001      	movs	r0, #1
 8002e32:	fa00 f202 	lsl.w	r2, r0, r2
 8002e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e000e100 	.word	0xe000e100

08002e4c <__NVIC_DisableIRQ>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db12      	blt.n	8002e84 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	490a      	ldr	r1, [pc, #40]	; (8002e90 <__NVIC_DisableIRQ+0x44>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e72:	3320      	adds	r3, #32
 8002e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e78:	f3bf 8f4f 	dsb	sy
}
 8002e7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e7e:	f3bf 8f6f 	isb	sy
}
 8002e82:	bf00      	nop
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <__NVIC_SetPriority>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db0a      	blt.n	8002ebe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	490c      	ldr	r1, [pc, #48]	; (8002ee0 <__NVIC_SetPriority+0x4c>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ebc:	e00a      	b.n	8002ed4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4908      	ldr	r1, [pc, #32]	; (8002ee4 <__NVIC_SetPriority+0x50>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	3b04      	subs	r3, #4
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	761a      	strb	r2, [r3, #24]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000e100 	.word	0xe000e100
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <NVIC_EncodePriority>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f1c3 0307 	rsb	r3, r3, #7
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	bf28      	it	cs
 8002f06:	2304      	movcs	r3, #4
 8002f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d902      	bls.n	8002f18 <NVIC_EncodePriority+0x30>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3b03      	subs	r3, #3
 8002f16:	e000      	b.n	8002f1a <NVIC_EncodePriority+0x32>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f30:	f04f 31ff 	mov.w	r1, #4294967295
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43d9      	mvns	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	4313      	orrs	r3, r2
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f60:	d301      	bcc.n	8002f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00f      	b.n	8002f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f66:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <SysTick_Config+0x40>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6e:	210f      	movs	r1, #15
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f7ff ff8e 	bl	8002e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <SysTick_Config+0x40>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7e:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <SysTick_Config+0x40>)
 8002f80:	2207      	movs	r2, #7
 8002f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000e010 	.word	0xe000e010

08002f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff05 	bl	8002dac <__NVIC_SetPriorityGrouping>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fbc:	f7ff ff1a 	bl	8002df4 <__NVIC_GetPriorityGrouping>
 8002fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	6978      	ldr	r0, [r7, #20]
 8002fc8:	f7ff ff8e 	bl	8002ee8 <NVIC_EncodePriority>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff5d 	bl	8002e94 <__NVIC_SetPriority>
}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff0d 	bl	8002e10 <__NVIC_EnableIRQ>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	4603      	mov	r3, r0
 8003006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff1d 	bl	8002e4c <__NVIC_DisableIRQ>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ff94 	bl	8002f50 <SysTick_Config>
 8003028:	4603      	mov	r3, r0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	019a      	lsls	r2, r3, #6
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	431a      	orrs	r2, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	431a      	orrs	r2, r3
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	431a      	orrs	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003072:	f7ff fe6b 	bl	8002d4c <HAL_GetTick>
 8003076:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003078:	e009      	b.n	800308e <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800307a:	f7ff fe67 	bl	8002d4c <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003088:	d901      	bls.n	800308e <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e015      	b.n	80030ba <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0ee      	beq.n	800307a <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	019a      	lsls	r2, r3, #6
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	021b      	lsls	r3, r3, #8
 80030a8:	ea42 0103 	orr.w	r1, r2, r3
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	041a      	lsls	r2, r3, #16
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e106      	b.n	80032e6 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7c5b      	ldrb	r3, [r3, #17]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f97c 	bl	80033e0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2203      	movs	r2, #3
 80030ec:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003102:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800310e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003116:	f7ff fe19 	bl	8002d4c <HAL_GetTick>
 800311a:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800311c:	e009      	b.n	8003132 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800311e:	f7ff fe15 	bl	8002d4c <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800312c:	d901      	bls.n	8003132 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e0d9      	b.n	80032e6 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800313a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0ed      	beq.n	800311e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <HAL_DSI_Init+0x22c>)
 8003150:	400b      	ands	r3, r1
 8003152:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	009a      	lsls	r2, r3, #2
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	02db      	lsls	r3, r3, #11
 800316a:	431a      	orrs	r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	041b      	lsls	r3, r3, #16
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031a6:	f7ff fdd1 	bl	8002d4c <HAL_GetTick>
 80031aa:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80031ac:	e009      	b.n	80031c2 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80031ae:	f7ff fdcd 	bl	8002d4c <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031bc:	d901      	bls.n	80031c2 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e091      	b.n	80032e6 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0ed      	beq.n	80031ae <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0206 	orr.w	r2, r2, #6
 80031e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0203 	bic.w	r2, r2, #3
 80031f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0201 	orr.w	r2, r2, #1
 8003210:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0203 	bic.w	r2, r2, #3
 8003224:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800324c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <HAL_DSI_Init+0x1aa>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	e000      	b.n	8003270 <HAL_DSI_Init+0x1ac>
 800326e:	2301      	movs	r3, #1
 8003270:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4a1f      	ldr	r2, [pc, #124]	; (80032f4 <HAL_DSI_Init+0x230>)
 8003276:	fb02 f203 	mul.w	r2, r2, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	409a      	lsls	r2, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80032a6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	fffc8603 	.word	0xfffc8603
 80032f4:	003d0900 	.word	0x003d0900

080032f8 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e066      	b.n	80033d8 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2203      	movs	r2, #3
 800330e:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0208 	bic.w	r2, r2, #8
 8003324:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	605a      	str	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0206 	bic.w	r2, r2, #6
 800336a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80033aa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80033b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f818 	bl	80033f4 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	7c1b      	ldrb	r3, [r3, #16]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_DSI_ConfigVideoMode+0x16>
 800341a:	2302      	movs	r3, #2
 800341c:	e1ee      	b.n	80037fc <HAL_DSI_ConfigVideoMode+0x3f4>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0201 	bic.w	r2, r2, #1
 8003444:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0203 	bic.w	r2, r2, #3
 8003456:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b8b      	ldr	r3, [pc, #556]	; (80036a4 <HAL_DSI_ConfigVideoMode+0x29c>)
 8003476:	400b      	ands	r3, r1
 8003478:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4b84      	ldr	r3, [pc, #528]	; (80036a8 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003498:	400b      	ands	r3, r1
 800349a:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b7b      	ldr	r3, [pc, #492]	; (80036a8 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80034ba:	400b      	ands	r3, r1
 80034bc:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	699a      	ldr	r2, [r3, #24]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0203 	bic.w	r2, r2, #3
 80034de:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68d9      	ldr	r1, [r3, #12]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0207 	bic.w	r2, r2, #7
 8003500:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6959      	ldr	r1, [r3, #20]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	431a      	orrs	r2, r3
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 020f 	bic.w	r2, r2, #15
 800352e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6919      	ldr	r1, [r3, #16]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 020e 	bic.w	r2, r2, #14
 8003552:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	005a      	lsls	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b03      	cmp	r3, #3
 8003574:	d110      	bne.n	8003598 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003584:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6919      	ldr	r1, [r3, #16]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b42      	ldr	r3, [pc, #264]	; (80036ac <HAL_DSI_ConfigVideoMode+0x2a4>)
 80035a4:	400b      	ands	r3, r1
 80035a6:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b39      	ldr	r3, [pc, #228]	; (80036ac <HAL_DSI_ConfigVideoMode+0x2a4>)
 80035c6:	400b      	ands	r3, r1
 80035c8:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <HAL_DSI_ConfigVideoMode+0x2a8>)
 80035e8:	400b      	ands	r3, r1
 80035ea:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800360a:	400b      	ands	r3, r1
 800360c:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800362c:	400b      	ands	r3, r1
 800362e:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800364e:	400b      	ands	r3, r1
 8003650:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <HAL_DSI_ConfigVideoMode+0x29c>)
 8003670:	400b      	ands	r3, r1
 8003672:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a0:	e00a      	b.n	80036b8 <HAL_DSI_ConfigVideoMode+0x2b0>
 80036a2:	bf00      	nop
 80036a4:	ffffc000 	.word	0xffffc000
 80036a8:	ffffe000 	.word	0xffffe000
 80036ac:	fffff000 	.word	0xfffff000
 80036b0:	ffff8000 	.word	0xffff8000
 80036b4:	fffffc00 	.word	0xfffffc00
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80036ce:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6999      	ldr	r1, [r3, #24]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036da:	041a      	lsls	r2, r3, #16
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036f2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6999      	ldr	r1, [r3, #24]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003714:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003736:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003758:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800379c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	7c1b      	ldrb	r3, [r3, #16]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_DSI_Start+0x14>
 8003818:	2302      	movs	r3, #2
 800381a:	e02b      	b.n	8003874 <HAL_DSI_Start+0x6c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003844:	2300      	movs	r3, #0
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0208 	orr.w	r2, r2, #8
 8003858:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7c1b      	ldrb	r3, [r3, #16]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_DSI_Stop+0x14>
 8003890:	2302      	movs	r3, #2
 8003892:	e02b      	b.n	80038ec <HAL_DSI_Stop+0x6c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80038bc:	2300      	movs	r3, #0
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0208 	bic.w	r2, r2, #8
 80038d0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	7c1b      	ldrb	r3, [r3, #16]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_DSI_ShortWrite+0x1a>
 800390e:	2302      	movs	r3, #2
 8003910:	e010      	b.n	8003934 <HAL_DSI_ShortWrite+0x3c>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f7ff fb9e 	bl	8003064 <DSI_ShortWrite>
 8003928:	4603      	mov	r3, r0
 800392a:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	741a      	strb	r2, [r3, #16]

  return status;
 8003932:	7dfb      	ldrb	r3, [r7, #23]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08c      	sub	sp, #48	; 0x30
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394c:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	7c1b      	ldrb	r3, [r3, #16]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_DSI_LongWrite+0x1e>
 8003956:	2302      	movs	r3, #2
 8003958:	e084      	b.n	8003a64 <HAL_DSI_LongWrite+0x128>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003960:	f7ff f9f4 	bl	8002d4c <HAL_GetTick>
 8003964:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003966:	e00c      	b.n	8003982 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003968:	f7ff f9f0 	bl	8002d4c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003976:	d904      	bls.n	8003982 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e070      	b.n	8003a64 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0eb      	beq.n	8003968 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b03      	cmp	r3, #3
 8003998:	bf28      	it	cs
 800399a:	2303      	movcs	r3, #3
 800399c:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800399e:	2300      	movs	r3, #0
 80039a0:	623b      	str	r3, [r7, #32]
 80039a2:	e00f      	b.n	80039c4 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	4413      	add	r3, r2
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	3301      	adds	r3, #1
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	3301      	adds	r3, #1
 80039c2:	623b      	str	r3, [r7, #32]
 80039c4:	6a3a      	ldr	r2, [r7, #32]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d3eb      	bcc.n	80039a4 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80039e4:	e028      	b.n	8003a38 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	bf28      	it	cs
 80039ec:	2304      	movcs	r3, #4
 80039ee:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	623b      	str	r3, [r7, #32]
 80039f8:	e00e      	b.n	8003a18 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	4413      	add	r3, r2
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	3301      	adds	r3, #1
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	6a3a      	ldr	r2, [r7, #32]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d3ec      	bcc.n	80039fa <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4413      	add	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1d3      	bne.n	80039e6 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003a46:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	4613      	mov	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	f7ff faeb 	bl	8003032 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3728      	adds	r7, #40	; 0x28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	; 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
 8003a8a:	e175      	b.n	8003d78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	f040 8164 	bne.w	8003d72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d00b      	beq.n	8003aca <HAL_GPIO_Init+0x5e>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d007      	beq.n	8003aca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003abe:	2b11      	cmp	r3, #17
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b12      	cmp	r3, #18
 8003ac8:	d130      	bne.n	8003b2c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b00:	2201      	movs	r2, #1
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 0201 	and.w	r2, r3, #1
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	2203      	movs	r2, #3
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x100>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b12      	cmp	r3, #18
 8003b6a:	d123      	bne.n	8003bb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	08da      	lsrs	r2, r3, #3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3208      	adds	r2, #8
 8003b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	220f      	movs	r2, #15
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	08da      	lsrs	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3208      	adds	r2, #8
 8003bae:	69b9      	ldr	r1, [r7, #24]
 8003bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0203 	and.w	r2, r3, #3
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80be 	beq.w	8003d72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf6:	4b66      	ldr	r3, [pc, #408]	; (8003d90 <HAL_GPIO_Init+0x324>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	4a65      	ldr	r2, [pc, #404]	; (8003d90 <HAL_GPIO_Init+0x324>)
 8003bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c00:	6453      	str	r3, [r2, #68]	; 0x44
 8003c02:	4b63      	ldr	r3, [pc, #396]	; (8003d90 <HAL_GPIO_Init+0x324>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c0e:	4a61      	ldr	r2, [pc, #388]	; (8003d94 <HAL_GPIO_Init+0x328>)
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	3302      	adds	r3, #2
 8003c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	220f      	movs	r2, #15
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a58      	ldr	r2, [pc, #352]	; (8003d98 <HAL_GPIO_Init+0x32c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d037      	beq.n	8003caa <HAL_GPIO_Init+0x23e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a57      	ldr	r2, [pc, #348]	; (8003d9c <HAL_GPIO_Init+0x330>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d031      	beq.n	8003ca6 <HAL_GPIO_Init+0x23a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a56      	ldr	r2, [pc, #344]	; (8003da0 <HAL_GPIO_Init+0x334>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d02b      	beq.n	8003ca2 <HAL_GPIO_Init+0x236>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a55      	ldr	r2, [pc, #340]	; (8003da4 <HAL_GPIO_Init+0x338>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d025      	beq.n	8003c9e <HAL_GPIO_Init+0x232>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a54      	ldr	r2, [pc, #336]	; (8003da8 <HAL_GPIO_Init+0x33c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01f      	beq.n	8003c9a <HAL_GPIO_Init+0x22e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a53      	ldr	r2, [pc, #332]	; (8003dac <HAL_GPIO_Init+0x340>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d019      	beq.n	8003c96 <HAL_GPIO_Init+0x22a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a52      	ldr	r2, [pc, #328]	; (8003db0 <HAL_GPIO_Init+0x344>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d013      	beq.n	8003c92 <HAL_GPIO_Init+0x226>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a51      	ldr	r2, [pc, #324]	; (8003db4 <HAL_GPIO_Init+0x348>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00d      	beq.n	8003c8e <HAL_GPIO_Init+0x222>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a50      	ldr	r2, [pc, #320]	; (8003db8 <HAL_GPIO_Init+0x34c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d007      	beq.n	8003c8a <HAL_GPIO_Init+0x21e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a4f      	ldr	r2, [pc, #316]	; (8003dbc <HAL_GPIO_Init+0x350>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d101      	bne.n	8003c86 <HAL_GPIO_Init+0x21a>
 8003c82:	2309      	movs	r3, #9
 8003c84:	e012      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c86:	230a      	movs	r3, #10
 8003c88:	e010      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	e00e      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c8e:	2307      	movs	r3, #7
 8003c90:	e00c      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c92:	2306      	movs	r3, #6
 8003c94:	e00a      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c96:	2305      	movs	r3, #5
 8003c98:	e008      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c9a:	2304      	movs	r3, #4
 8003c9c:	e006      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e004      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e002      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <HAL_GPIO_Init+0x240>
 8003caa:	2300      	movs	r3, #0
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	f002 0203 	and.w	r2, r2, #3
 8003cb2:	0092      	lsls	r2, r2, #2
 8003cb4:	4093      	lsls	r3, r2
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003cbc:	4935      	ldr	r1, [pc, #212]	; (8003d94 <HAL_GPIO_Init+0x328>)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	089b      	lsrs	r3, r3, #2
 8003cc2:	3302      	adds	r3, #2
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cca:	4b3d      	ldr	r3, [pc, #244]	; (8003dc0 <HAL_GPIO_Init+0x354>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cee:	4a34      	ldr	r2, [pc, #208]	; (8003dc0 <HAL_GPIO_Init+0x354>)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cf4:	4b32      	ldr	r3, [pc, #200]	; (8003dc0 <HAL_GPIO_Init+0x354>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d18:	4a29      	ldr	r2, [pc, #164]	; (8003dc0 <HAL_GPIO_Init+0x354>)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d1e:	4b28      	ldr	r3, [pc, #160]	; (8003dc0 <HAL_GPIO_Init+0x354>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d42:	4a1f      	ldr	r2, [pc, #124]	; (8003dc0 <HAL_GPIO_Init+0x354>)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d48:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <HAL_GPIO_Init+0x354>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d6c:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <HAL_GPIO_Init+0x354>)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3301      	adds	r3, #1
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2b0f      	cmp	r3, #15
 8003d7c:	f67f ae86 	bls.w	8003a8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	3724      	adds	r7, #36	; 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40013800 	.word	0x40013800
 8003d98:	40020000 	.word	0x40020000
 8003d9c:	40020400 	.word	0x40020400
 8003da0:	40020800 	.word	0x40020800
 8003da4:	40020c00 	.word	0x40020c00
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40021400 	.word	0x40021400
 8003db0:	40021800 	.word	0x40021800
 8003db4:	40021c00 	.word	0x40021c00
 8003db8:	40022000 	.word	0x40022000
 8003dbc:	40022400 	.word	0x40022400
 8003dc0:	40013c00 	.word	0x40013c00

08003dc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	e0d9      	b.n	8003f94 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003de0:	2201      	movs	r2, #1
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4013      	ands	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	f040 80c9 	bne.w	8003f8e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003dfc:	4a6b      	ldr	r2, [pc, #428]	; (8003fac <HAL_GPIO_DeInit+0x1e8>)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	089b      	lsrs	r3, r3, #2
 8003e02:	3302      	adds	r3, #2
 8003e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e08:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	220f      	movs	r2, #15
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a63      	ldr	r2, [pc, #396]	; (8003fb0 <HAL_GPIO_DeInit+0x1ec>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d037      	beq.n	8003e96 <HAL_GPIO_DeInit+0xd2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a62      	ldr	r2, [pc, #392]	; (8003fb4 <HAL_GPIO_DeInit+0x1f0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d031      	beq.n	8003e92 <HAL_GPIO_DeInit+0xce>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a61      	ldr	r2, [pc, #388]	; (8003fb8 <HAL_GPIO_DeInit+0x1f4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d02b      	beq.n	8003e8e <HAL_GPIO_DeInit+0xca>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a60      	ldr	r2, [pc, #384]	; (8003fbc <HAL_GPIO_DeInit+0x1f8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d025      	beq.n	8003e8a <HAL_GPIO_DeInit+0xc6>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a5f      	ldr	r2, [pc, #380]	; (8003fc0 <HAL_GPIO_DeInit+0x1fc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01f      	beq.n	8003e86 <HAL_GPIO_DeInit+0xc2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a5e      	ldr	r2, [pc, #376]	; (8003fc4 <HAL_GPIO_DeInit+0x200>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d019      	beq.n	8003e82 <HAL_GPIO_DeInit+0xbe>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a5d      	ldr	r2, [pc, #372]	; (8003fc8 <HAL_GPIO_DeInit+0x204>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <HAL_GPIO_DeInit+0xba>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a5c      	ldr	r2, [pc, #368]	; (8003fcc <HAL_GPIO_DeInit+0x208>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00d      	beq.n	8003e7a <HAL_GPIO_DeInit+0xb6>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a5b      	ldr	r2, [pc, #364]	; (8003fd0 <HAL_GPIO_DeInit+0x20c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d007      	beq.n	8003e76 <HAL_GPIO_DeInit+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a5a      	ldr	r2, [pc, #360]	; (8003fd4 <HAL_GPIO_DeInit+0x210>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <HAL_GPIO_DeInit+0xae>
 8003e6e:	2309      	movs	r3, #9
 8003e70:	e012      	b.n	8003e98 <HAL_GPIO_DeInit+0xd4>
 8003e72:	230a      	movs	r3, #10
 8003e74:	e010      	b.n	8003e98 <HAL_GPIO_DeInit+0xd4>
 8003e76:	2308      	movs	r3, #8
 8003e78:	e00e      	b.n	8003e98 <HAL_GPIO_DeInit+0xd4>
 8003e7a:	2307      	movs	r3, #7
 8003e7c:	e00c      	b.n	8003e98 <HAL_GPIO_DeInit+0xd4>
 8003e7e:	2306      	movs	r3, #6
 8003e80:	e00a      	b.n	8003e98 <HAL_GPIO_DeInit+0xd4>
 8003e82:	2305      	movs	r3, #5
 8003e84:	e008      	b.n	8003e98 <HAL_GPIO_DeInit+0xd4>
 8003e86:	2304      	movs	r3, #4
 8003e88:	e006      	b.n	8003e98 <HAL_GPIO_DeInit+0xd4>
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e004      	b.n	8003e98 <HAL_GPIO_DeInit+0xd4>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e002      	b.n	8003e98 <HAL_GPIO_DeInit+0xd4>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <HAL_GPIO_DeInit+0xd4>
 8003e96:	2300      	movs	r3, #0
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	f002 0203 	and.w	r2, r2, #3
 8003e9e:	0092      	lsls	r2, r2, #2
 8003ea0:	4093      	lsls	r3, r2
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d132      	bne.n	8003f0e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ea8:	4b4b      	ldr	r3, [pc, #300]	; (8003fd8 <HAL_GPIO_DeInit+0x214>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	4949      	ldr	r1, [pc, #292]	; (8003fd8 <HAL_GPIO_DeInit+0x214>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003eb6:	4b48      	ldr	r3, [pc, #288]	; (8003fd8 <HAL_GPIO_DeInit+0x214>)
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	4946      	ldr	r1, [pc, #280]	; (8003fd8 <HAL_GPIO_DeInit+0x214>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ec4:	4b44      	ldr	r3, [pc, #272]	; (8003fd8 <HAL_GPIO_DeInit+0x214>)
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	4942      	ldr	r1, [pc, #264]	; (8003fd8 <HAL_GPIO_DeInit+0x214>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ed2:	4b41      	ldr	r3, [pc, #260]	; (8003fd8 <HAL_GPIO_DeInit+0x214>)
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	493f      	ldr	r1, [pc, #252]	; (8003fd8 <HAL_GPIO_DeInit+0x214>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	220f      	movs	r2, #15
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003ef0:	4a2e      	ldr	r2, [pc, #184]	; (8003fac <HAL_GPIO_DeInit+0x1e8>)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	089b      	lsrs	r3, r3, #2
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	43da      	mvns	r2, r3
 8003f00:	482a      	ldr	r0, [pc, #168]	; (8003fac <HAL_GPIO_DeInit+0x1e8>)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	089b      	lsrs	r3, r3, #2
 8003f06:	400a      	ands	r2, r1
 8003f08:	3302      	adds	r3, #2
 8003f0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	2103      	movs	r1, #3
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	401a      	ands	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	08da      	lsrs	r2, r3, #3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3208      	adds	r2, #8
 8003f2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	220f      	movs	r2, #15
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	08d2      	lsrs	r2, r2, #3
 8003f44:	4019      	ands	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3208      	adds	r2, #8
 8003f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2103      	movs	r1, #3
 8003f58:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	401a      	ands	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	2101      	movs	r1, #1
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	401a      	ands	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	2103      	movs	r1, #3
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	401a      	ands	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3301      	adds	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b0f      	cmp	r3, #15
 8003f98:	f67f af22 	bls.w	8003de0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40013800 	.word	0x40013800
 8003fb0:	40020000 	.word	0x40020000
 8003fb4:	40020400 	.word	0x40020400
 8003fb8:	40020800 	.word	0x40020800
 8003fbc:	40020c00 	.word	0x40020c00
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40021400 	.word	0x40021400
 8003fc8:	40021800 	.word	0x40021800
 8003fcc:	40021c00 	.word	0x40021c00
 8003fd0:	40022000 	.word	0x40022000
 8003fd4:	40022400 	.word	0x40022400
 8003fd8:	40013c00 	.word	0x40013c00

08003fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	887b      	ldrh	r3, [r7, #2]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e001      	b.n	8003ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	807b      	strh	r3, [r7, #2]
 8004018:	4613      	mov	r3, r2
 800401a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800401c:	787b      	ldrb	r3, [r7, #1]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004028:	e003      	b.n	8004032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800402a:	887b      	ldrh	r3, [r7, #2]
 800402c:	041a      	lsls	r2, r3, #16
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	619a      	str	r2, [r3, #24]
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e07f      	b.n	8004152 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f8a9 	bl	80041be <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2224      	movs	r2, #36	; 0x24
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004090:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d107      	bne.n	80040ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	e006      	b.n	80040c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d104      	bne.n	80040da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b1d      	ldr	r3, [pc, #116]	; (800415c <HAL_I2C_Init+0x11c>)
 80040e6:	430b      	orrs	r3, r1
 80040e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	ea42 0103 	orr.w	r1, r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	021a      	lsls	r2, r3, #8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69d9      	ldr	r1, [r3, #28]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1a      	ldr	r2, [r3, #32]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	02008000 	.word	0x02008000

08004160 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e021      	b.n	80041b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2224      	movs	r2, #36	; 0x24
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f821 	bl	80041d2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	4608      	mov	r0, r1
 80041f2:	4611      	mov	r1, r2
 80041f4:	461a      	mov	r2, r3
 80041f6:	4603      	mov	r3, r0
 80041f8:	817b      	strh	r3, [r7, #10]
 80041fa:	460b      	mov	r3, r1
 80041fc:	813b      	strh	r3, [r7, #8]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b20      	cmp	r3, #32
 800420c:	f040 80fd 	bne.w	800440a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_I2C_Mem_Read+0x34>
 8004216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004222:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0f1      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_I2C_Mem_Read+0x4e>
 8004232:	2302      	movs	r3, #2
 8004234:	e0ea      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800423e:	f7fe fd85 	bl	8002d4c <HAL_GetTick>
 8004242:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2319      	movs	r3, #25
 800424a:	2201      	movs	r2, #1
 800424c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f95b 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0d5      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2222      	movs	r2, #34	; 0x22
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2240      	movs	r2, #64	; 0x40
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a3a      	ldr	r2, [r7, #32]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004288:	88f8      	ldrh	r0, [r7, #6]
 800428a:	893a      	ldrh	r2, [r7, #8]
 800428c:	8979      	ldrh	r1, [r7, #10]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	4603      	mov	r3, r0
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f8bf 	bl	800441c <I2C_RequestMemoryRead>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0ad      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2bff      	cmp	r3, #255	; 0xff
 80042b8:	d90e      	bls.n	80042d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	22ff      	movs	r2, #255	; 0xff
 80042be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	8979      	ldrh	r1, [r7, #10]
 80042c8:	4b52      	ldr	r3, [pc, #328]	; (8004414 <HAL_I2C_Mem_Read+0x22c>)
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fa3d 	bl	8004750 <I2C_TransferConfig>
 80042d6:	e00f      	b.n	80042f8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	8979      	ldrh	r1, [r7, #10]
 80042ea:	4b4a      	ldr	r3, [pc, #296]	; (8004414 <HAL_I2C_Mem_Read+0x22c>)
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fa2c 	bl	8004750 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	2200      	movs	r2, #0
 8004300:	2104      	movs	r1, #4
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f902 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e07c      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d034      	beq.n	80043b8 <HAL_I2C_Mem_Read+0x1d0>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004352:	2b00      	cmp	r3, #0
 8004354:	d130      	bne.n	80043b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	2200      	movs	r2, #0
 800435e:	2180      	movs	r1, #128	; 0x80
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f8d3 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e04d      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	2bff      	cmp	r3, #255	; 0xff
 8004378:	d90e      	bls.n	8004398 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	22ff      	movs	r2, #255	; 0xff
 800437e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004384:	b2da      	uxtb	r2, r3
 8004386:	8979      	ldrh	r1, [r7, #10]
 8004388:	2300      	movs	r3, #0
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f9dd 	bl	8004750 <I2C_TransferConfig>
 8004396:	e00f      	b.n	80043b8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	8979      	ldrh	r1, [r7, #10]
 80043aa:	2300      	movs	r3, #0
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f9cc 	bl	8004750 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d19a      	bne.n	80042f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f920 	bl	800460c <I2C_WaitOnSTOPFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e01a      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2220      	movs	r2, #32
 80043dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6859      	ldr	r1, [r3, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_I2C_Mem_Read+0x230>)
 80043ea:	400b      	ands	r3, r1
 80043ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2220      	movs	r2, #32
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
  }
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	80002400 	.word	0x80002400
 8004418:	fe00e800 	.word	0xfe00e800

0800441c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	4608      	mov	r0, r1
 8004426:	4611      	mov	r1, r2
 8004428:	461a      	mov	r2, r3
 800442a:	4603      	mov	r3, r0
 800442c:	817b      	strh	r3, [r7, #10]
 800442e:	460b      	mov	r3, r1
 8004430:	813b      	strh	r3, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	8979      	ldrh	r1, [r7, #10]
 800443c:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <I2C_RequestMemoryRead+0xa4>)
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	2300      	movs	r3, #0
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f984 	bl	8004750 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	69b9      	ldr	r1, [r7, #24]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f89d 	bl	800458c <I2C_WaitOnTXISFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e02c      	b.n	80044b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d105      	bne.n	800446e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004462:	893b      	ldrh	r3, [r7, #8]
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	629a      	str	r2, [r3, #40]	; 0x28
 800446c:	e015      	b.n	800449a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800446e:	893b      	ldrh	r3, [r7, #8]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	b29b      	uxth	r3, r3
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	69b9      	ldr	r1, [r7, #24]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f883 	bl	800458c <I2C_WaitOnTXISFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e012      	b.n	80044b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004490:	893b      	ldrh	r3, [r7, #8]
 8004492:	b2da      	uxtb	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2140      	movs	r1, #64	; 0x40
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f831 	bl	800450c <I2C_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	80002000 	.word	0x80002000

080044c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d103      	bne.n	80044e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2200      	movs	r2, #0
 80044e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d007      	beq.n	8004500 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	619a      	str	r2, [r3, #24]
  }
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800451c:	e022      	b.n	8004564 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d01e      	beq.n	8004564 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004526:	f7fe fc11 	bl	8002d4c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d302      	bcc.n	800453c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d113      	bne.n	8004564 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	f043 0220 	orr.w	r2, r3, #32
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e00f      	b.n	8004584 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4013      	ands	r3, r2
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	429a      	cmp	r2, r3
 8004572:	bf0c      	ite	eq
 8004574:	2301      	moveq	r3, #1
 8004576:	2300      	movne	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	429a      	cmp	r2, r3
 8004580:	d0cd      	beq.n	800451e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004598:	e02c      	b.n	80045f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f870 	bl	8004684 <I2C_IsAcknowledgeFailed>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e02a      	b.n	8004604 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b4:	d01e      	beq.n	80045f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b6:	f7fe fbc9 	bl	8002d4c <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d302      	bcc.n	80045cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d113      	bne.n	80045f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e007      	b.n	8004604 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d1cb      	bne.n	800459a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004618:	e028      	b.n	800466c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f830 	bl	8004684 <I2C_IsAcknowledgeFailed>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e026      	b.n	800467c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462e:	f7fe fb8d 	bl	8002d4c <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	429a      	cmp	r2, r3
 800463c:	d302      	bcc.n	8004644 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d113      	bne.n	800466c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004648:	f043 0220 	orr.w	r2, r3, #32
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e007      	b.n	800467c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b20      	cmp	r3, #32
 8004678:	d1cf      	bne.n	800461a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b10      	cmp	r3, #16
 800469c:	d151      	bne.n	8004742 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800469e:	e022      	b.n	80046e6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d01e      	beq.n	80046e6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a8:	f7fe fb50 	bl	8002d4c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d302      	bcc.n	80046be <I2C_IsAcknowledgeFailed+0x3a>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d113      	bne.n	80046e6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	f043 0220 	orr.w	r2, r3, #32
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e02e      	b.n	8004744 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d1d5      	bne.n	80046a0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2210      	movs	r2, #16
 80046fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2220      	movs	r2, #32
 8004702:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7ff fedd 	bl	80044c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6859      	ldr	r1, [r3, #4]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b0d      	ldr	r3, [pc, #52]	; (800474c <I2C_IsAcknowledgeFailed+0xc8>)
 8004716:	400b      	ands	r3, r1
 8004718:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	f043 0204 	orr.w	r2, r3, #4
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	fe00e800 	.word	0xfe00e800

08004750 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	460b      	mov	r3, r1
 800475c:	817b      	strh	r3, [r7, #10]
 800475e:	4613      	mov	r3, r2
 8004760:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	0d5b      	lsrs	r3, r3, #21
 800476c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004770:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <I2C_TransferConfig+0x58>)
 8004772:	430b      	orrs	r3, r1
 8004774:	43db      	mvns	r3, r3
 8004776:	ea02 0103 	and.w	r1, r2, r3
 800477a:	897b      	ldrh	r3, [r7, #10]
 800477c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004780:	7a7b      	ldrb	r3, [r7, #9]
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	431a      	orrs	r2, r3
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	431a      	orrs	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800479a:	bf00      	nop
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	03ff63ff 	.word	0x03ff63ff

080047ac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e0bf      	b.n	800493e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8d2 	bl	800497c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80047ee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6999      	ldr	r1, [r3, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004804:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6899      	ldr	r1, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b4a      	ldr	r3, [pc, #296]	; (8004948 <HAL_LTDC_Init+0x19c>)
 8004820:	400b      	ands	r3, r1
 8004822:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	041b      	lsls	r3, r3, #16
 800482a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6899      	ldr	r1, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68d9      	ldr	r1, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4b3e      	ldr	r3, [pc, #248]	; (8004948 <HAL_LTDC_Init+0x19c>)
 800484e:	400b      	ands	r3, r1
 8004850:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	041b      	lsls	r3, r3, #16
 8004858:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68d9      	ldr	r1, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1a      	ldr	r2, [r3, #32]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6919      	ldr	r1, [r3, #16]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4b33      	ldr	r3, [pc, #204]	; (8004948 <HAL_LTDC_Init+0x19c>)
 800487c:	400b      	ands	r3, r1
 800487e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6919      	ldr	r1, [r3, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6959      	ldr	r1, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	4b27      	ldr	r3, [pc, #156]	; (8004948 <HAL_LTDC_Init+0x19c>)
 80048aa:	400b      	ands	r3, r1
 80048ac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6959      	ldr	r1, [r3, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80048dc:	041b      	lsls	r3, r3, #16
 80048de:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0206 	orr.w	r2, r2, #6
 800491a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	f000f800 	.word	0xf000f800

0800494c <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f81b 	bl	8004990 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049a4:	b5b0      	push	{r4, r5, r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_LTDC_ConfigLayer+0x1a>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e02c      	b.n	8004a18 <HAL_LTDC_ConfigLayer+0x74>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2202      	movs	r2, #2
 80049ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2134      	movs	r1, #52	; 0x34
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	4413      	add	r3, r2
 80049da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4614      	mov	r4, r2
 80049e2:	461d      	mov	r5, r3
 80049e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f847 	bl	8004a8c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2201      	movs	r2, #1
 8004a04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bdb0      	pop	{r4, r5, r7, pc}

08004a20 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_LTDC_SetAddress+0x1a>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e024      	b.n	8004a84 <HAL_LTDC_SetAddress+0x64>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2234      	movs	r2, #52	; 0x34
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	3338      	adds	r3, #56	; 0x38
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6979      	ldr	r1, [r7, #20]
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f811 	bl	8004a8c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b089      	sub	sp, #36	; 0x24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	0c1b      	lsrs	r3, r3, #16
 8004aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa8:	4413      	add	r3, r2
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	01db      	lsls	r3, r3, #7
 8004ab8:	4413      	add	r3, r2
 8004aba:	3384      	adds	r3, #132	; 0x84
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	01d2      	lsls	r2, r2, #7
 8004ac8:	440a      	add	r2, r1
 8004aca:	3284      	adds	r2, #132	; 0x84
 8004acc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004ad0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	0c1b      	lsrs	r3, r3, #16
 8004ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae2:	4413      	add	r3, r2
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4619      	mov	r1, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	01db      	lsls	r3, r3, #7
 8004af0:	440b      	add	r3, r1
 8004af2:	3384      	adds	r3, #132	; 0x84
 8004af4:	4619      	mov	r1, r3
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b0a:	4413      	add	r3, r2
 8004b0c:	041b      	lsls	r3, r3, #16
 8004b0e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	01db      	lsls	r3, r3, #7
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3384      	adds	r3, #132	; 0x84
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	4611      	mov	r1, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	01d2      	lsls	r2, r2, #7
 8004b2a:	440a      	add	r2, r1
 8004b2c:	3284      	adds	r2, #132	; 0x84
 8004b2e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b32:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b42:	4413      	add	r3, r2
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	01db      	lsls	r3, r3, #7
 8004b50:	440b      	add	r3, r1
 8004b52:	3384      	adds	r3, #132	; 0x84
 8004b54:	4619      	mov	r1, r3
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	01db      	lsls	r3, r3, #7
 8004b66:	4413      	add	r3, r2
 8004b68:	3384      	adds	r3, #132	; 0x84
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	4611      	mov	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	01d2      	lsls	r2, r2, #7
 8004b76:	440a      	add	r2, r1
 8004b78:	3284      	adds	r2, #132	; 0x84
 8004b7a:	f023 0307 	bic.w	r3, r3, #7
 8004b7e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	01db      	lsls	r3, r3, #7
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3384      	adds	r3, #132	; 0x84
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004ba6:	041b      	lsls	r3, r3, #16
 8004ba8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	061b      	lsls	r3, r3, #24
 8004bb0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	01db      	lsls	r3, r3, #7
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3384      	adds	r3, #132	; 0x84
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	01db      	lsls	r3, r3, #7
 8004bcc:	4413      	add	r3, r2
 8004bce:	3384      	adds	r3, #132	; 0x84
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bdc:	461a      	mov	r2, r3
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4619      	mov	r1, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	01db      	lsls	r3, r3, #7
 8004bf0:	440b      	add	r3, r1
 8004bf2:	3384      	adds	r3, #132	; 0x84
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	01db      	lsls	r3, r3, #7
 8004c06:	4413      	add	r3, r2
 8004c08:	3384      	adds	r3, #132	; 0x84
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	4611      	mov	r1, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	01d2      	lsls	r2, r2, #7
 8004c16:	440a      	add	r2, r1
 8004c18:	3284      	adds	r2, #132	; 0x84
 8004c1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c1e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	01db      	lsls	r3, r3, #7
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3384      	adds	r3, #132	; 0x84
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	01db      	lsls	r3, r3, #7
 8004c40:	4413      	add	r3, r2
 8004c42:	3384      	adds	r3, #132	; 0x84
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	01db      	lsls	r3, r3, #7
 8004c50:	440b      	add	r3, r1
 8004c52:	3384      	adds	r3, #132	; 0x84
 8004c54:	4619      	mov	r1, r3
 8004c56:	4b58      	ldr	r3, [pc, #352]	; (8004db8 <LTDC_SetConfig+0x32c>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	68f9      	ldr	r1, [r7, #12]
 8004c66:	6809      	ldr	r1, [r1, #0]
 8004c68:	4608      	mov	r0, r1
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	01c9      	lsls	r1, r1, #7
 8004c6e:	4401      	add	r1, r0
 8004c70:	3184      	adds	r1, #132	; 0x84
 8004c72:	4313      	orrs	r3, r2
 8004c74:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	01db      	lsls	r3, r3, #7
 8004c80:	4413      	add	r3, r2
 8004c82:	3384      	adds	r3, #132	; 0x84
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	01db      	lsls	r3, r3, #7
 8004c90:	4413      	add	r3, r2
 8004c92:	3384      	adds	r3, #132	; 0x84
 8004c94:	461a      	mov	r2, r3
 8004c96:	2300      	movs	r3, #0
 8004c98:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	01db      	lsls	r3, r3, #7
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3384      	adds	r3, #132	; 0x84
 8004ca8:	461a      	mov	r2, r3
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004cb8:	2304      	movs	r3, #4
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e01b      	b.n	8004cf6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d102      	bne.n	8004ccc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	e014      	b.n	8004cf6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d00b      	beq.n	8004cec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d007      	beq.n	8004cec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d003      	beq.n	8004cec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ce8:	2b07      	cmp	r3, #7
 8004cea:	d102      	bne.n	8004cf2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004cec:	2302      	movs	r3, #2
 8004cee:	61fb      	str	r3, [r7, #28]
 8004cf0:	e001      	b.n	8004cf6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	01db      	lsls	r3, r3, #7
 8004d00:	4413      	add	r3, r2
 8004d02:	3384      	adds	r3, #132	; 0x84
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	6812      	ldr	r2, [r2, #0]
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	01d2      	lsls	r2, r2, #7
 8004d10:	440a      	add	r2, r1
 8004d12:	3284      	adds	r2, #132	; 0x84
 8004d14:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004d18:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	fb02 f303 	mul.w	r3, r2, r3
 8004d24:	041a      	lsls	r2, r3, #16
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	1acb      	subs	r3, r1, r3
 8004d30:	69f9      	ldr	r1, [r7, #28]
 8004d32:	fb01 f303 	mul.w	r3, r1, r3
 8004d36:	3303      	adds	r3, #3
 8004d38:	68f9      	ldr	r1, [r7, #12]
 8004d3a:	6809      	ldr	r1, [r1, #0]
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	01c9      	lsls	r1, r1, #7
 8004d42:	4401      	add	r1, r0
 8004d44:	3184      	adds	r1, #132	; 0x84
 8004d46:	4313      	orrs	r3, r2
 8004d48:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	01db      	lsls	r3, r3, #7
 8004d54:	4413      	add	r3, r2
 8004d56:	3384      	adds	r3, #132	; 0x84
 8004d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4619      	mov	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	01db      	lsls	r3, r3, #7
 8004d64:	440b      	add	r3, r1
 8004d66:	3384      	adds	r3, #132	; 0x84
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <LTDC_SetConfig+0x330>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	01db      	lsls	r3, r3, #7
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3384      	adds	r3, #132	; 0x84
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	01db      	lsls	r3, r3, #7
 8004d90:	4413      	add	r3, r2
 8004d92:	3384      	adds	r3, #132	; 0x84
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	01d2      	lsls	r2, r2, #7
 8004da0:	440a      	add	r2, r1
 8004da2:	3284      	adds	r2, #132	; 0x84
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	6013      	str	r3, [r2, #0]
}
 8004daa:	bf00      	nop
 8004dac:	3724      	adds	r7, #36	; 0x24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	fffff8f8 	.word	0xfffff8f8
 8004dbc:	fffff800 	.word	0xfffff800

08004dc0 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	e001      	b.n	8004dda <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8004dd6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8004de6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004dea:	e000      	b.n	8004dee <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8004dec:	2200      	movs	r2, #0
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8004dfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dfe:	e000      	b.n	8004e02 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8004e00:	2200      	movs	r2, #0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0a:	1e5a      	subs	r2, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	4413      	add	r3, r2
 8004e1a:	1e5a      	subs	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	441a      	add	r2, r3
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	4413      	add	r3, r2
 8004e30:	1e5a      	subs	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	441a      	add	r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	441a      	add	r2, r3
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	4413      	add	r3, r2
 8004e4c:	1e5a      	subs	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e64:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a04      	ldr	r2, [pc, #16]	; (8004e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e6e:	6013      	str	r3, [r2, #0]
}
 8004e70:	bf00      	nop
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40007000 	.word	0x40007000

08004e80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e8a:	4b23      	ldr	r3, [pc, #140]	; (8004f18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	4a22      	ldr	r2, [pc, #136]	; (8004f18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e94:	6413      	str	r3, [r2, #64]	; 0x40
 8004e96:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ea2:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004eae:	f7fd ff4d 	bl	8002d4c <HAL_GetTick>
 8004eb2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004eb4:	e009      	b.n	8004eca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004eb6:	f7fd ff49 	bl	8002d4c <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ec4:	d901      	bls.n	8004eca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e022      	b.n	8004f10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed6:	d1ee      	bne.n	8004eb6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ed8:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a0f      	ldr	r2, [pc, #60]	; (8004f1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ee4:	f7fd ff32 	bl	8002d4c <HAL_GetTick>
 8004ee8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004eea:	e009      	b.n	8004f00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004eec:	f7fd ff2e 	bl	8002d4c <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004efa:	d901      	bls.n	8004f00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e007      	b.n	8004f10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f00:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f0c:	d1ee      	bne.n	8004eec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	40007000 	.word	0x40007000

08004f20 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f28:	f7fd ff10 	bl	8002d4c <HAL_GetTick>
 8004f2c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e067      	b.n	8005008 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f887 	bl	8005060 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004f52:	f241 3188 	movw	r1, #5000	; 0x1388
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa9a 	bl	8005490 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	021a      	lsls	r2, r3, #8
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2120      	movs	r1, #32
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fa92 	bl	80054ac <QSPI_WaitFlagStateUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004f8c:	7afb      	ldrb	r3, [r7, #11]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d135      	bne.n	8004ffe <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <HAL_QSPI_Init+0xf0>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6852      	ldr	r2, [r2, #4]
 8004fa0:	0611      	lsls	r1, r2, #24
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	68d2      	ldr	r2, [r2, #12]
 8004fa6:	4311      	orrs	r1, r2
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	69d2      	ldr	r2, [r2, #28]
 8004fac:	4311      	orrs	r1, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6a12      	ldr	r2, [r2, #32]
 8004fb2:	4311      	orrs	r1, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	4b14      	ldr	r3, [pc, #80]	; (8005014 <HAL_QSPI_Init+0xf4>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6912      	ldr	r2, [r2, #16]
 8004fca:	0411      	lsls	r1, r2, #16
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6952      	ldr	r2, [r2, #20]
 8004fd0:	4311      	orrs	r1, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6992      	ldr	r2, [r2, #24]
 8004fd6:	4311      	orrs	r1, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005006:	7afb      	ldrb	r3, [r7, #11]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	00ffff2f 	.word	0x00ffff2f
 8005014:	ffe0f8fe 	.word	0xffe0f8fe

08005018 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e016      	b.n	8005058 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0201 	bic.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f81a 	bl	8005074 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_QSPI_MspInit>:
  * @brief Initialize the QSPI MSP.
  * @param hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_QSPI_MspDeInit>:
  * @brief DeInitialize the QSPI MSP.
  * @param hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005094:	f7fd fe5a 	bl	8002d4c <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_QSPI_Command+0x22>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e048      	b.n	800513c <HAL_QSPI_Command+0xb4>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d137      	bne.n	800512e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2200      	movs	r2, #0
 80050d4:	2120      	movs	r1, #32
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 f9e8 	bl	80054ac <QSPI_WaitFlagStateUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d125      	bne.n	8005132 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80050e6:	2200      	movs	r2, #0
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 fa15 	bl	800551a <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d115      	bne.n	8005124 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2201      	movs	r2, #1
 8005100:	2102      	movs	r1, #2
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f9d2 	bl	80054ac <QSPI_WaitFlagStateUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800510c:	7dfb      	ldrb	r3, [r7, #23]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10f      	bne.n	8005132 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2202      	movs	r2, #2
 8005118:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005122:	e006      	b.n	8005132 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800512c:	e001      	b.n	8005132 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800512e:	2302      	movs	r3, #2
 8005130:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800513a:	7dfb      	ldrb	r3, [r7, #23]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	; 0x28
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005154:	f7fd fdfa 	bl	8002d4c <HAL_GetTick>
 8005158:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3320      	adds	r3, #32
 8005160:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <HAL_QSPI_Transmit+0x2e>
 800516e:	2302      	movs	r3, #2
 8005170:	e076      	b.n	8005260 <HAL_QSPI_Transmit+0x11c>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b01      	cmp	r3, #1
 8005184:	d165      	bne.n	8005252 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d056      	beq.n	8005240 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2212      	movs	r2, #18
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80051c6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80051c8:	e01b      	b.n	8005202 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	2201      	movs	r2, #1
 80051d2:	2104      	movs	r1, #4
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f969 	bl	80054ac <QSPI_WaitFlagStateUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80051de:	7ffb      	ldrb	r3, [r7, #31]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d113      	bne.n	800520c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	781a      	ldrb	r2, [r3, #0]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	1e5a      	subs	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1df      	bne.n	80051ca <HAL_QSPI_Transmit+0x86>
 800520a:	e000      	b.n	800520e <HAL_QSPI_Transmit+0xca>
          break;
 800520c:	bf00      	nop
      }

      if (status == HAL_OK)
 800520e:	7ffb      	ldrb	r3, [r7, #31]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d110      	bne.n	8005236 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2201      	movs	r2, #1
 800521c:	2102      	movs	r1, #2
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f944 	bl	80054ac <QSPI_WaitFlagStateUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005228:	7ffb      	ldrb	r3, [r7, #31]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d103      	bne.n	8005236 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2202      	movs	r2, #2
 8005234:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800523e:	e00a      	b.n	8005256 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005244:	f043 0208 	orr.w	r2, r3, #8
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	77fb      	strb	r3, [r7, #31]
 8005250:	e001      	b.n	8005256 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005252:	2302      	movs	r3, #2
 8005254:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800525e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3720      	adds	r7, #32
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005278:	f7fd fd68 	bl	8002d4c <HAL_GetTick>
 800527c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3320      	adds	r3, #32
 800528c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <HAL_QSPI_Receive+0x36>
 800529a:	2302      	movs	r3, #2
 800529c:	e07d      	b.n	800539a <HAL_QSPI_Receive+0x132>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d16c      	bne.n	800538c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d05d      	beq.n	800537a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2222      	movs	r2, #34	; 0x22
 80052c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80052f6:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005300:	e01c      	b.n	800533c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	2201      	movs	r2, #1
 800530a:	2106      	movs	r1, #6
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f8cd 	bl	80054ac <QSPI_WaitFlagStateUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8005316:	7ffb      	ldrb	r3, [r7, #31]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d114      	bne.n	8005346 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	7812      	ldrb	r2, [r2, #0]
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	1e5a      	subs	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1de      	bne.n	8005302 <HAL_QSPI_Receive+0x9a>
 8005344:	e000      	b.n	8005348 <HAL_QSPI_Receive+0xe0>
          break;
 8005346:	bf00      	nop
      }

      if (status == HAL_OK)
 8005348:	7ffb      	ldrb	r3, [r7, #31]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d110      	bne.n	8005370 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	2201      	movs	r2, #1
 8005356:	2102      	movs	r1, #2
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f8a7 	bl	80054ac <QSPI_WaitFlagStateUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005362:	7ffb      	ldrb	r3, [r7, #31]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d103      	bne.n	8005370 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2202      	movs	r2, #2
 800536e:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005378:	e00a      	b.n	8005390 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	f043 0208 	orr.w	r2, r3, #8
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	77fb      	strb	r3, [r7, #31]
 800538a:	e001      	b.n	8005390 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800538c:	2302      	movs	r3, #2
 800538e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005398:	7ffb      	ldrb	r3, [r7, #31]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b088      	sub	sp, #32
 80053a6:	af02      	add	r7, sp, #8
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
 80053ae:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80053b0:	f7fd fccc 	bl	8002d4c <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_QSPI_AutoPolling+0x24>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e060      	b.n	8005488 <HAL_QSPI_AutoPolling+0xe6>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d14f      	bne.n	800547a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2242      	movs	r2, #66	; 0x42
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	2200      	movs	r2, #0
 80053f0:	2120      	movs	r1, #32
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 f85a 	bl	80054ac <QSPI_WaitFlagStateUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80053fc:	7dfb      	ldrb	r3, [r7, #23]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d13d      	bne.n	800547e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6812      	ldr	r2, [r2, #0]
 800540a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6852      	ldr	r2, [r2, #4]
 8005414:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6892      	ldr	r2, [r2, #8]
 800541e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	431a      	orrs	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005438:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005442:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f866 	bl	800551a <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2201      	movs	r2, #1
 8005456:	2108      	movs	r1, #8
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f827 	bl	80054ac <QSPI_WaitFlagStateUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2208      	movs	r2, #8
 800546e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005478:	e001      	b.n	800547e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800547a:	2302      	movs	r3, #2
 800547c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005486:	7dfb      	ldrb	r3, [r7, #23]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	649a      	str	r2, [r3, #72]	; 0x48
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	4613      	mov	r3, r2
 80054ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80054bc:	e01a      	b.n	80054f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d016      	beq.n	80054f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c6:	f7fd fc41 	bl	8002d4c <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d302      	bcc.n	80054dc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2204      	movs	r2, #4
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e8:	f043 0201 	orr.w	r2, r3, #1
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e00e      	b.n	8005512 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4013      	ands	r3, r2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bf14      	ite	ne
 8005502:	2301      	movne	r3, #1
 8005504:	2300      	moveq	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	429a      	cmp	r2, r3
 800550e:	d1d6      	bne.n	80054be <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800551a:	b480      	push	{r7}
 800551c:	b085      	sub	sp, #20
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <QSPI_Config+0x28>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005534:	d005      	beq.n	8005542 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3a01      	subs	r2, #1
 8005540:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 80b9 	beq.w	80056be <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d05f      	beq.n	8005614 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	6892      	ldr	r2, [r2, #8]
 800555c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d031      	beq.n	80055ca <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	431a      	orrs	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005574:	431a      	orrs	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	431a      	orrs	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	049b      	lsls	r3, r3, #18
 8005582:	431a      	orrs	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	431a      	orrs	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	431a      	orrs	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	431a      	orrs	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	431a      	orrs	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	ea42 0103 	orr.w	r1, r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055ba:	f000 812e 	beq.w	800581a <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	6852      	ldr	r2, [r2, #4]
 80055c6:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80055c8:	e127      	b.n	800581a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	431a      	orrs	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d8:	431a      	orrs	r2, r3
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	431a      	orrs	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	049b      	lsls	r3, r3, #18
 80055e6:	431a      	orrs	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	431a      	orrs	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	431a      	orrs	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	431a      	orrs	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	ea42 0103 	orr.w	r1, r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	430a      	orrs	r2, r1
 8005610:	615a      	str	r2, [r3, #20]
}
 8005612:	e102      	b.n	800581a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d02e      	beq.n	800567a <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	431a      	orrs	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562a:	431a      	orrs	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	431a      	orrs	r2, r3
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	049b      	lsls	r3, r3, #18
 8005638:	431a      	orrs	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	431a      	orrs	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	431a      	orrs	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	431a      	orrs	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	431a      	orrs	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	ea42 0103 	orr.w	r1, r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	430a      	orrs	r2, r1
 8005662:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800566a:	f000 80d6 	beq.w	800581a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	6852      	ldr	r2, [r2, #4]
 8005676:	619a      	str	r2, [r3, #24]
}
 8005678:	e0cf      	b.n	800581a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	431a      	orrs	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005688:	431a      	orrs	r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	431a      	orrs	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	049b      	lsls	r3, r3, #18
 8005696:	431a      	orrs	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	431a      	orrs	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	431a      	orrs	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	ea42 0103 	orr.w	r1, r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	615a      	str	r2, [r3, #20]
}
 80056bc:	e0ad      	b.n	800581a <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d058      	beq.n	8005778 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	6892      	ldr	r2, [r2, #8]
 80056ce:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d02d      	beq.n	8005734 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	431a      	orrs	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e6:	431a      	orrs	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	431a      	orrs	r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	049b      	lsls	r3, r3, #18
 80056f4:	431a      	orrs	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	431a      	orrs	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	431a      	orrs	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	431a      	orrs	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	ea42 0103 	orr.w	r1, r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	430a      	orrs	r2, r1
 800571e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005726:	d078      	beq.n	800581a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	6852      	ldr	r2, [r2, #4]
 8005730:	619a      	str	r2, [r3, #24]
}
 8005732:	e072      	b.n	800581a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	431a      	orrs	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	431a      	orrs	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	431a      	orrs	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	049b      	lsls	r3, r3, #18
 8005750:	431a      	orrs	r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	431a      	orrs	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	431a      	orrs	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	431a      	orrs	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	ea42 0103 	orr.w	r1, r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	430a      	orrs	r2, r1
 8005774:	615a      	str	r2, [r3, #20]
}
 8005776:	e050      	b.n	800581a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d02a      	beq.n	80057d6 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	431a      	orrs	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578e:	431a      	orrs	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	431a      	orrs	r2, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	049b      	lsls	r3, r3, #18
 800579c:	431a      	orrs	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	ea42 0103 	orr.w	r1, r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	430a      	orrs	r2, r1
 80057c0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80057c8:	d027      	beq.n	800581a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	6852      	ldr	r2, [r2, #4]
 80057d2:	619a      	str	r2, [r3, #24]
}
 80057d4:	e021      	b.n	800581a <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01d      	beq.n	800581a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e6:	431a      	orrs	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	431a      	orrs	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	431a      	orrs	r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	049b      	lsls	r3, r3, #18
 80057fa:	431a      	orrs	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	431a      	orrs	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	431a      	orrs	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	ea42 0103 	orr.w	r1, r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	430a      	orrs	r2, r1
 8005818:	615a      	str	r2, [r3, #20]
}
 800581a:	bf00      	nop
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005830:	2300      	movs	r3, #0
 8005832:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e29b      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8087 	beq.w	800595a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800584c:	4b96      	ldr	r3, [pc, #600]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 030c 	and.w	r3, r3, #12
 8005854:	2b04      	cmp	r3, #4
 8005856:	d00c      	beq.n	8005872 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005858:	4b93      	ldr	r3, [pc, #588]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 030c 	and.w	r3, r3, #12
 8005860:	2b08      	cmp	r3, #8
 8005862:	d112      	bne.n	800588a <HAL_RCC_OscConfig+0x62>
 8005864:	4b90      	ldr	r3, [pc, #576]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800586c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005870:	d10b      	bne.n	800588a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005872:	4b8d      	ldr	r3, [pc, #564]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d06c      	beq.n	8005958 <HAL_RCC_OscConfig+0x130>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d168      	bne.n	8005958 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e275      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005892:	d106      	bne.n	80058a2 <HAL_RCC_OscConfig+0x7a>
 8005894:	4b84      	ldr	r3, [pc, #528]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a83      	ldr	r2, [pc, #524]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 800589a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	e02e      	b.n	8005900 <HAL_RCC_OscConfig+0xd8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10c      	bne.n	80058c4 <HAL_RCC_OscConfig+0x9c>
 80058aa:	4b7f      	ldr	r3, [pc, #508]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a7e      	ldr	r2, [pc, #504]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80058b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	4b7c      	ldr	r3, [pc, #496]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a7b      	ldr	r2, [pc, #492]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80058bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	e01d      	b.n	8005900 <HAL_RCC_OscConfig+0xd8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058cc:	d10c      	bne.n	80058e8 <HAL_RCC_OscConfig+0xc0>
 80058ce:	4b76      	ldr	r3, [pc, #472]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a75      	ldr	r2, [pc, #468]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80058d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	4b73      	ldr	r3, [pc, #460]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a72      	ldr	r2, [pc, #456]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80058e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	e00b      	b.n	8005900 <HAL_RCC_OscConfig+0xd8>
 80058e8:	4b6f      	ldr	r3, [pc, #444]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a6e      	ldr	r2, [pc, #440]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80058ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	4b6c      	ldr	r3, [pc, #432]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a6b      	ldr	r2, [pc, #428]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80058fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d013      	beq.n	8005930 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005908:	f7fd fa20 	bl	8002d4c <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005910:	f7fd fa1c 	bl	8002d4c <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b64      	cmp	r3, #100	; 0x64
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e229      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005922:	4b61      	ldr	r3, [pc, #388]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0f0      	beq.n	8005910 <HAL_RCC_OscConfig+0xe8>
 800592e:	e014      	b.n	800595a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005930:	f7fd fa0c 	bl	8002d4c <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005938:	f7fd fa08 	bl	8002d4c <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b64      	cmp	r3, #100	; 0x64
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e215      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800594a:	4b57      	ldr	r3, [pc, #348]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f0      	bne.n	8005938 <HAL_RCC_OscConfig+0x110>
 8005956:	e000      	b.n	800595a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d069      	beq.n	8005a3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005966:	4b50      	ldr	r3, [pc, #320]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 030c 	and.w	r3, r3, #12
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00b      	beq.n	800598a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005972:	4b4d      	ldr	r3, [pc, #308]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 030c 	and.w	r3, r3, #12
 800597a:	2b08      	cmp	r3, #8
 800597c:	d11c      	bne.n	80059b8 <HAL_RCC_OscConfig+0x190>
 800597e:	4b4a      	ldr	r3, [pc, #296]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d116      	bne.n	80059b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800598a:	4b47      	ldr	r3, [pc, #284]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_RCC_OscConfig+0x17a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d001      	beq.n	80059a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e1e9      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a2:	4b41      	ldr	r3, [pc, #260]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	493d      	ldr	r1, [pc, #244]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059b6:	e040      	b.n	8005a3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d023      	beq.n	8005a08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059c0:	4b39      	ldr	r3, [pc, #228]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a38      	ldr	r2, [pc, #224]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80059c6:	f043 0301 	orr.w	r3, r3, #1
 80059ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059cc:	f7fd f9be 	bl	8002d4c <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d4:	f7fd f9ba 	bl	8002d4c <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e1c7      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e6:	4b30      	ldr	r3, [pc, #192]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f2:	4b2d      	ldr	r3, [pc, #180]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4929      	ldr	r1, [pc, #164]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]
 8005a06:	e018      	b.n	8005a3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a08:	4b27      	ldr	r3, [pc, #156]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a26      	ldr	r2, [pc, #152]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a14:	f7fd f99a 	bl	8002d4c <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a1c:	f7fd f996 	bl	8002d4c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e1a3      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2e:	4b1e      	ldr	r3, [pc, #120]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d038      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d019      	beq.n	8005a82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a4e:	4b16      	ldr	r3, [pc, #88]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a52:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005a54:	f043 0301 	orr.w	r3, r3, #1
 8005a58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a5a:	f7fd f977 	bl	8002d4c <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a60:	e008      	b.n	8005a74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a62:	f7fd f973 	bl	8002d4c <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e180      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a74:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0f0      	beq.n	8005a62 <HAL_RCC_OscConfig+0x23a>
 8005a80:	e01a      	b.n	8005ab8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a82:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a86:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <HAL_RCC_OscConfig+0x280>)
 8005a88:	f023 0301 	bic.w	r3, r3, #1
 8005a8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a8e:	f7fd f95d 	bl	8002d4c <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a94:	e00a      	b.n	8005aac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a96:	f7fd f959 	bl	8002d4c <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d903      	bls.n	8005aac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e166      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
 8005aa8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aac:	4b92      	ldr	r3, [pc, #584]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1ee      	bne.n	8005a96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80a4 	beq.w	8005c0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ac6:	4b8c      	ldr	r3, [pc, #560]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10d      	bne.n	8005aee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ad2:	4b89      	ldr	r3, [pc, #548]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	4a88      	ldr	r2, [pc, #544]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005adc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ade:	4b86      	ldr	r3, [pc, #536]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	60bb      	str	r3, [r7, #8]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aee:	4b83      	ldr	r3, [pc, #524]	; (8005cfc <HAL_RCC_OscConfig+0x4d4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d118      	bne.n	8005b2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005afa:	4b80      	ldr	r3, [pc, #512]	; (8005cfc <HAL_RCC_OscConfig+0x4d4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a7f      	ldr	r2, [pc, #508]	; (8005cfc <HAL_RCC_OscConfig+0x4d4>)
 8005b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b06:	f7fd f921 	bl	8002d4c <HAL_GetTick>
 8005b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b0e:	f7fd f91d 	bl	8002d4c <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b64      	cmp	r3, #100	; 0x64
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e12a      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b20:	4b76      	ldr	r3, [pc, #472]	; (8005cfc <HAL_RCC_OscConfig+0x4d4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0f0      	beq.n	8005b0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d106      	bne.n	8005b42 <HAL_RCC_OscConfig+0x31a>
 8005b34:	4b70      	ldr	r3, [pc, #448]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b38:	4a6f      	ldr	r2, [pc, #444]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b40:	e02d      	b.n	8005b9e <HAL_RCC_OscConfig+0x376>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10c      	bne.n	8005b64 <HAL_RCC_OscConfig+0x33c>
 8005b4a:	4b6b      	ldr	r3, [pc, #428]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	4a6a      	ldr	r2, [pc, #424]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b50:	f023 0301 	bic.w	r3, r3, #1
 8005b54:	6713      	str	r3, [r2, #112]	; 0x70
 8005b56:	4b68      	ldr	r3, [pc, #416]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5a:	4a67      	ldr	r2, [pc, #412]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b5c:	f023 0304 	bic.w	r3, r3, #4
 8005b60:	6713      	str	r3, [r2, #112]	; 0x70
 8005b62:	e01c      	b.n	8005b9e <HAL_RCC_OscConfig+0x376>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	2b05      	cmp	r3, #5
 8005b6a:	d10c      	bne.n	8005b86 <HAL_RCC_OscConfig+0x35e>
 8005b6c:	4b62      	ldr	r3, [pc, #392]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b70:	4a61      	ldr	r2, [pc, #388]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b72:	f043 0304 	orr.w	r3, r3, #4
 8005b76:	6713      	str	r3, [r2, #112]	; 0x70
 8005b78:	4b5f      	ldr	r3, [pc, #380]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7c:	4a5e      	ldr	r2, [pc, #376]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b7e:	f043 0301 	orr.w	r3, r3, #1
 8005b82:	6713      	str	r3, [r2, #112]	; 0x70
 8005b84:	e00b      	b.n	8005b9e <HAL_RCC_OscConfig+0x376>
 8005b86:	4b5c      	ldr	r3, [pc, #368]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	4a5b      	ldr	r2, [pc, #364]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b8c:	f023 0301 	bic.w	r3, r3, #1
 8005b90:	6713      	str	r3, [r2, #112]	; 0x70
 8005b92:	4b59      	ldr	r3, [pc, #356]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b96:	4a58      	ldr	r2, [pc, #352]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005b98:	f023 0304 	bic.w	r3, r3, #4
 8005b9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d015      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba6:	f7fd f8d1 	bl	8002d4c <HAL_GetTick>
 8005baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bac:	e00a      	b.n	8005bc4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bae:	f7fd f8cd 	bl	8002d4c <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e0d8      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc4:	4b4c      	ldr	r3, [pc, #304]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0ee      	beq.n	8005bae <HAL_RCC_OscConfig+0x386>
 8005bd0:	e014      	b.n	8005bfc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd2:	f7fd f8bb 	bl	8002d4c <HAL_GetTick>
 8005bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bd8:	e00a      	b.n	8005bf0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bda:	f7fd f8b7 	bl	8002d4c <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e0c2      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bf0:	4b41      	ldr	r3, [pc, #260]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1ee      	bne.n	8005bda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d105      	bne.n	8005c0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c02:	4b3d      	ldr	r3, [pc, #244]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	4a3c      	ldr	r2, [pc, #240]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 80ae 	beq.w	8005d74 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c18:	4b37      	ldr	r3, [pc, #220]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 030c 	and.w	r3, r3, #12
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d06d      	beq.n	8005d00 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d14b      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c2c:	4b32      	ldr	r3, [pc, #200]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a31      	ldr	r2, [pc, #196]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c38:	f7fd f888 	bl	8002d4c <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c40:	f7fd f884 	bl	8002d4c <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e091      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c52:	4b29      	ldr	r3, [pc, #164]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1f0      	bne.n	8005c40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69da      	ldr	r2, [r3, #28]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	019b      	lsls	r3, r3, #6
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	085b      	lsrs	r3, r3, #1
 8005c76:	3b01      	subs	r3, #1
 8005c78:	041b      	lsls	r3, r3, #16
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	061b      	lsls	r3, r3, #24
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	071b      	lsls	r3, r3, #28
 8005c8a:	491b      	ldr	r1, [pc, #108]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c90:	4b19      	ldr	r3, [pc, #100]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9c:	f7fd f856 	bl	8002d4c <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca4:	f7fd f852 	bl	8002d4c <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e05f      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cb6:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x47c>
 8005cc2:	e057      	b.n	8005d74 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a0b      	ldr	r2, [pc, #44]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd0:	f7fd f83c 	bl	8002d4c <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd8:	f7fd f838 	bl	8002d4c <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e045      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cea:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <HAL_RCC_OscConfig+0x4d0>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f0      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x4b0>
 8005cf6:	e03d      	b.n	8005d74 <HAL_RCC_OscConfig+0x54c>
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005d00:	4b1f      	ldr	r3, [pc, #124]	; (8005d80 <HAL_RCC_OscConfig+0x558>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d030      	beq.n	8005d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d129      	bne.n	8005d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d122      	bne.n	8005d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d30:	4013      	ands	r3, r2
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d119      	bne.n	8005d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	085b      	lsrs	r3, r3, #1
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d10f      	bne.n	8005d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d107      	bne.n	8005d70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40023800 	.word	0x40023800

08005d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e0d0      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d9c:	4b6a      	ldr	r3, [pc, #424]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d910      	bls.n	8005dcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005daa:	4b67      	ldr	r3, [pc, #412]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f023 020f 	bic.w	r2, r3, #15
 8005db2:	4965      	ldr	r1, [pc, #404]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dba:	4b63      	ldr	r3, [pc, #396]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d001      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0b8      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d020      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d005      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005de4:	4b59      	ldr	r3, [pc, #356]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	4a58      	ldr	r2, [pc, #352]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005dea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dfc:	4b53      	ldr	r3, [pc, #332]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4a52      	ldr	r2, [pc, #328]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e08:	4b50      	ldr	r3, [pc, #320]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	494d      	ldr	r1, [pc, #308]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d040      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d107      	bne.n	8005e3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2e:	4b47      	ldr	r3, [pc, #284]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d115      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e07f      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d107      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e46:	4b41      	ldr	r3, [pc, #260]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d109      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e073      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e56:	4b3d      	ldr	r3, [pc, #244]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e06b      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e66:	4b39      	ldr	r3, [pc, #228]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f023 0203 	bic.w	r2, r3, #3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	4936      	ldr	r1, [pc, #216]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e78:	f7fc ff68 	bl	8002d4c <HAL_GetTick>
 8005e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e7e:	e00a      	b.n	8005e96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e80:	f7fc ff64 	bl	8002d4c <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e053      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e96:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 020c 	and.w	r2, r3, #12
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d1eb      	bne.n	8005e80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ea8:	4b27      	ldr	r3, [pc, #156]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d210      	bcs.n	8005ed8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb6:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f023 020f 	bic.w	r2, r3, #15
 8005ebe:	4922      	ldr	r1, [pc, #136]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ec6:	4b20      	ldr	r3, [pc, #128]	; (8005f48 <HAL_RCC_ClockConfig+0x1c4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d001      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e032      	b.n	8005f3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d008      	beq.n	8005ef6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ee4:	4b19      	ldr	r3, [pc, #100]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4916      	ldr	r1, [pc, #88]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	490e      	ldr	r1, [pc, #56]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f16:	f000 f821 	bl	8005f5c <HAL_RCC_GetSysClockFreq>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <HAL_RCC_ClockConfig+0x1c8>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	490a      	ldr	r1, [pc, #40]	; (8005f50 <HAL_RCC_ClockConfig+0x1cc>)
 8005f28:	5ccb      	ldrb	r3, [r1, r3]
 8005f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f2e:	4a09      	ldr	r2, [pc, #36]	; (8005f54 <HAL_RCC_ClockConfig+0x1d0>)
 8005f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <HAL_RCC_ClockConfig+0x1d4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fc fec4 	bl	8002cc4 <HAL_InitTick>

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40023c00 	.word	0x40023c00
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	0800e59c 	.word	0x0800e59c
 8005f54:	20000000 	.word	0x20000000
 8005f58:	20000004 	.word	0x20000004

08005f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f5c:	b5b0      	push	{r4, r5, r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005f62:	2100      	movs	r1, #0
 8005f64:	6079      	str	r1, [r7, #4]
 8005f66:	2100      	movs	r1, #0
 8005f68:	60f9      	str	r1, [r7, #12]
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005f6e:	2100      	movs	r1, #0
 8005f70:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f72:	4952      	ldr	r1, [pc, #328]	; (80060bc <HAL_RCC_GetSysClockFreq+0x160>)
 8005f74:	6889      	ldr	r1, [r1, #8]
 8005f76:	f001 010c 	and.w	r1, r1, #12
 8005f7a:	2908      	cmp	r1, #8
 8005f7c:	d00d      	beq.n	8005f9a <HAL_RCC_GetSysClockFreq+0x3e>
 8005f7e:	2908      	cmp	r1, #8
 8005f80:	f200 8094 	bhi.w	80060ac <HAL_RCC_GetSysClockFreq+0x150>
 8005f84:	2900      	cmp	r1, #0
 8005f86:	d002      	beq.n	8005f8e <HAL_RCC_GetSysClockFreq+0x32>
 8005f88:	2904      	cmp	r1, #4
 8005f8a:	d003      	beq.n	8005f94 <HAL_RCC_GetSysClockFreq+0x38>
 8005f8c:	e08e      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f8e:	4b4c      	ldr	r3, [pc, #304]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005f90:	60bb      	str	r3, [r7, #8]
      break;
 8005f92:	e08e      	b.n	80060b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f94:	4b4b      	ldr	r3, [pc, #300]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005f96:	60bb      	str	r3, [r7, #8]
      break;
 8005f98:	e08b      	b.n	80060b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f9a:	4948      	ldr	r1, [pc, #288]	; (80060bc <HAL_RCC_GetSysClockFreq+0x160>)
 8005f9c:	6849      	ldr	r1, [r1, #4]
 8005f9e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005fa2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005fa4:	4945      	ldr	r1, [pc, #276]	; (80060bc <HAL_RCC_GetSysClockFreq+0x160>)
 8005fa6:	6849      	ldr	r1, [r1, #4]
 8005fa8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005fac:	2900      	cmp	r1, #0
 8005fae:	d024      	beq.n	8005ffa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fb0:	4942      	ldr	r1, [pc, #264]	; (80060bc <HAL_RCC_GetSysClockFreq+0x160>)
 8005fb2:	6849      	ldr	r1, [r1, #4]
 8005fb4:	0989      	lsrs	r1, r1, #6
 8005fb6:	4608      	mov	r0, r1
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005fc0:	f04f 0500 	mov.w	r5, #0
 8005fc4:	ea00 0204 	and.w	r2, r0, r4
 8005fc8:	ea01 0305 	and.w	r3, r1, r5
 8005fcc:	493d      	ldr	r1, [pc, #244]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005fce:	fb01 f003 	mul.w	r0, r1, r3
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	fb01 f102 	mul.w	r1, r1, r2
 8005fd8:	1844      	adds	r4, r0, r1
 8005fda:	493a      	ldr	r1, [pc, #232]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005fdc:	fba2 0101 	umull	r0, r1, r2, r1
 8005fe0:	1863      	adds	r3, r4, r1
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	f7fa f980 	bl	80002f0 <__aeabi_uldivmod>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	e04a      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ffa:	4b30      	ldr	r3, [pc, #192]	; (80060bc <HAL_RCC_GetSysClockFreq+0x160>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	099b      	lsrs	r3, r3, #6
 8006000:	461a      	mov	r2, r3
 8006002:	f04f 0300 	mov.w	r3, #0
 8006006:	f240 10ff 	movw	r0, #511	; 0x1ff
 800600a:	f04f 0100 	mov.w	r1, #0
 800600e:	ea02 0400 	and.w	r4, r2, r0
 8006012:	ea03 0501 	and.w	r5, r3, r1
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	014b      	lsls	r3, r1, #5
 8006024:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006028:	0142      	lsls	r2, r0, #5
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	1b00      	subs	r0, r0, r4
 8006030:	eb61 0105 	sbc.w	r1, r1, r5
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	018b      	lsls	r3, r1, #6
 800603e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006042:	0182      	lsls	r2, r0, #6
 8006044:	1a12      	subs	r2, r2, r0
 8006046:	eb63 0301 	sbc.w	r3, r3, r1
 800604a:	f04f 0000 	mov.w	r0, #0
 800604e:	f04f 0100 	mov.w	r1, #0
 8006052:	00d9      	lsls	r1, r3, #3
 8006054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006058:	00d0      	lsls	r0, r2, #3
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	1912      	adds	r2, r2, r4
 8006060:	eb45 0303 	adc.w	r3, r5, r3
 8006064:	f04f 0000 	mov.w	r0, #0
 8006068:	f04f 0100 	mov.w	r1, #0
 800606c:	0299      	lsls	r1, r3, #10
 800606e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006072:	0290      	lsls	r0, r2, #10
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4610      	mov	r0, r2
 800607a:	4619      	mov	r1, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	461a      	mov	r2, r3
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	f7fa f934 	bl	80002f0 <__aeabi_uldivmod>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4613      	mov	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006090:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <HAL_RCC_GetSysClockFreq+0x160>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	0c1b      	lsrs	r3, r3, #16
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	3301      	adds	r3, #1
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a8:	60bb      	str	r3, [r7, #8]
      break;
 80060aa:	e002      	b.n	80060b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060ac:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80060ae:	60bb      	str	r3, [r7, #8]
      break;
 80060b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060b2:	68bb      	ldr	r3, [r7, #8]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bdb0      	pop	{r4, r5, r7, pc}
 80060bc:	40023800 	.word	0x40023800
 80060c0:	00f42400 	.word	0x00f42400
 80060c4:	017d7840 	.word	0x017d7840

080060c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <HAL_RCC_GetHCLKFreq+0x14>)
 80060ce:	681b      	ldr	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000000 	.word	0x20000000

080060e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060e4:	f7ff fff0 	bl	80060c8 <HAL_RCC_GetHCLKFreq>
 80060e8:	4602      	mov	r2, r0
 80060ea:	4b05      	ldr	r3, [pc, #20]	; (8006100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	0a9b      	lsrs	r3, r3, #10
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	4903      	ldr	r1, [pc, #12]	; (8006104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060f6:	5ccb      	ldrb	r3, [r1, r3]
 80060f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40023800 	.word	0x40023800
 8006104:	0800e5ac 	.word	0x0800e5ac

08006108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800610c:	f7ff ffdc 	bl	80060c8 <HAL_RCC_GetHCLKFreq>
 8006110:	4602      	mov	r2, r0
 8006112:	4b05      	ldr	r3, [pc, #20]	; (8006128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	0b5b      	lsrs	r3, r3, #13
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	4903      	ldr	r1, [pc, #12]	; (800612c <HAL_RCC_GetPCLK2Freq+0x24>)
 800611e:	5ccb      	ldrb	r3, [r1, r3]
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006124:	4618      	mov	r0, r3
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40023800 	.word	0x40023800
 800612c:	0800e5ac 	.word	0x0800e5ac

08006130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d012      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006158:	4b69      	ldr	r3, [pc, #420]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	4a68      	ldr	r2, [pc, #416]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006162:	6093      	str	r3, [r2, #8]
 8006164:	4b66      	ldr	r3, [pc, #408]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800616c:	4964      	ldr	r1, [pc, #400]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800616e:	4313      	orrs	r3, r2
 8006170:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800617a:	2301      	movs	r3, #1
 800617c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d017      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800618a:	4b5d      	ldr	r3, [pc, #372]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800618c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006198:	4959      	ldr	r1, [pc, #356]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a8:	d101      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80061aa:	2301      	movs	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80061b6:	2301      	movs	r3, #1
 80061b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d017      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061c6:	4b4e      	ldr	r3, [pc, #312]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	494a      	ldr	r1, [pc, #296]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061e4:	d101      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80061e6:	2301      	movs	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80061f2:	2301      	movs	r3, #1
 80061f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006202:	2301      	movs	r3, #1
 8006204:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 808b 	beq.w	800632a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006214:	4b3a      	ldr	r3, [pc, #232]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	4a39      	ldr	r2, [pc, #228]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800621a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800621e:	6413      	str	r3, [r2, #64]	; 0x40
 8006220:	4b37      	ldr	r3, [pc, #220]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800622c:	4b35      	ldr	r3, [pc, #212]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a34      	ldr	r2, [pc, #208]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006238:	f7fc fd88 	bl	8002d4c <HAL_GetTick>
 800623c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006240:	f7fc fd84 	bl	8002d4c <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b64      	cmp	r3, #100	; 0x64
 800624c:	d901      	bls.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e38f      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006252:	4b2c      	ldr	r3, [pc, #176]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800625e:	4b28      	ldr	r3, [pc, #160]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006266:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d035      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	429a      	cmp	r2, r3
 800627a:	d02e      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800627c:	4b20      	ldr	r3, [pc, #128]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006284:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006286:	4b1e      	ldr	r3, [pc, #120]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628a:	4a1d      	ldr	r2, [pc, #116]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800628c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006290:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006292:	4b1b      	ldr	r3, [pc, #108]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006296:	4a1a      	ldr	r2, [pc, #104]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800629c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800629e:	4a18      	ldr	r2, [pc, #96]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062a4:	4b16      	ldr	r3, [pc, #88]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d114      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b0:	f7fc fd4c 	bl	8002d4c <HAL_GetTick>
 80062b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b6:	e00a      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062b8:	f7fc fd48 	bl	8002d4c <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d901      	bls.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e351      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ce:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0ee      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062e6:	d111      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80062e8:	4b05      	ldr	r3, [pc, #20]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062f4:	4b04      	ldr	r3, [pc, #16]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80062f6:	400b      	ands	r3, r1
 80062f8:	4901      	ldr	r1, [pc, #4]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	608b      	str	r3, [r1, #8]
 80062fe:	e00b      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006300:	40023800 	.word	0x40023800
 8006304:	40007000 	.word	0x40007000
 8006308:	0ffffcff 	.word	0x0ffffcff
 800630c:	4bb3      	ldr	r3, [pc, #716]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	4ab2      	ldr	r2, [pc, #712]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006312:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006316:	6093      	str	r3, [r2, #8]
 8006318:	4bb0      	ldr	r3, [pc, #704]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800631a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006324:	49ad      	ldr	r1, [pc, #692]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006326:	4313      	orrs	r3, r2
 8006328:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b00      	cmp	r3, #0
 8006334:	d010      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006336:	4ba9      	ldr	r3, [pc, #676]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800633c:	4aa7      	ldr	r2, [pc, #668]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800633e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006342:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006346:	4ba5      	ldr	r3, [pc, #660]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006348:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	49a2      	ldr	r1, [pc, #648]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006364:	4b9d      	ldr	r3, [pc, #628]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006372:	499a      	ldr	r1, [pc, #616]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006386:	4b95      	ldr	r3, [pc, #596]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006394:	4991      	ldr	r1, [pc, #580]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006396:	4313      	orrs	r3, r2
 8006398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063a8:	4b8c      	ldr	r3, [pc, #560]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b6:	4989      	ldr	r1, [pc, #548]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063ca:	4b84      	ldr	r3, [pc, #528]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d8:	4980      	ldr	r1, [pc, #512]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063ec:	4b7b      	ldr	r3, [pc, #492]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f2:	f023 0203 	bic.w	r2, r3, #3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fa:	4978      	ldr	r1, [pc, #480]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800640e:	4b73      	ldr	r3, [pc, #460]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006414:	f023 020c 	bic.w	r2, r3, #12
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641c:	496f      	ldr	r1, [pc, #444]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006430:	4b6a      	ldr	r3, [pc, #424]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006436:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643e:	4967      	ldr	r1, [pc, #412]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006452:	4b62      	ldr	r3, [pc, #392]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006458:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006460:	495e      	ldr	r1, [pc, #376]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006474:	4b59      	ldr	r3, [pc, #356]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	4956      	ldr	r1, [pc, #344]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006496:	4b51      	ldr	r3, [pc, #324]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a4:	494d      	ldr	r1, [pc, #308]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80064b8:	4b48      	ldr	r3, [pc, #288]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c6:	4945      	ldr	r1, [pc, #276]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80064da:	4b40      	ldr	r3, [pc, #256]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e8:	493c      	ldr	r1, [pc, #240]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064fc:	4b37      	ldr	r3, [pc, #220]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80064fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006502:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800650a:	4934      	ldr	r1, [pc, #208]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800650c:	4313      	orrs	r3, r2
 800650e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d011      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800651e:	4b2f      	ldr	r3, [pc, #188]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006524:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800652c:	492b      	ldr	r1, [pc, #172]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800653c:	d101      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800653e:	2301      	movs	r3, #1
 8006540:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800654e:	2301      	movs	r3, #1
 8006550:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800655e:	4b1f      	ldr	r3, [pc, #124]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006564:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656c:	491b      	ldr	r1, [pc, #108]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006580:	4b16      	ldr	r3, [pc, #88]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006586:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006590:	4912      	ldr	r1, [pc, #72]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006592:	4313      	orrs	r3, r2
 8006594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00b      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80065a4:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80065a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b4:	4909      	ldr	r1, [pc, #36]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00f      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065c8:	4b04      	ldr	r3, [pc, #16]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80065ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d8:	e002      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80065da:	bf00      	nop
 80065dc:	40023800 	.word	0x40023800
 80065e0:	4986      	ldr	r1, [pc, #536]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00b      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80065f4:	4b81      	ldr	r3, [pc, #516]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006604:	497d      	ldr	r1, [pc, #500]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d006      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 80d6 	beq.w	80067cc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006620:	4b76      	ldr	r3, [pc, #472]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a75      	ldr	r2, [pc, #468]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006626:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800662a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800662c:	f7fc fb8e 	bl	8002d4c <HAL_GetTick>
 8006630:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006632:	e008      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006634:	f7fc fb8a 	bl	8002d4c <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b64      	cmp	r3, #100	; 0x64
 8006640:	d901      	bls.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e195      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006646:	4b6d      	ldr	r3, [pc, #436]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f0      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d021      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006662:	2b00      	cmp	r3, #0
 8006664:	d11d      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006666:	4b65      	ldr	r3, [pc, #404]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006674:	4b61      	ldr	r3, [pc, #388]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800667a:	0e1b      	lsrs	r3, r3, #24
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	019a      	lsls	r2, r3, #6
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	041b      	lsls	r3, r3, #16
 800668c:	431a      	orrs	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	061b      	lsls	r3, r3, #24
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	071b      	lsls	r3, r3, #28
 800669a:	4958      	ldr	r1, [pc, #352]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800669c:	4313      	orrs	r3, r2
 800669e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066b6:	d00a      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d02e      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066cc:	d129      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80066ce:	4b4b      	ldr	r3, [pc, #300]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066d4:	0c1b      	lsrs	r3, r3, #16
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066dc:	4b47      	ldr	r3, [pc, #284]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066e2:	0f1b      	lsrs	r3, r3, #28
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	019a      	lsls	r2, r3, #6
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	041b      	lsls	r3, r3, #16
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	061b      	lsls	r3, r3, #24
 80066fc:	431a      	orrs	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	071b      	lsls	r3, r3, #28
 8006702:	493e      	ldr	r1, [pc, #248]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006704:	4313      	orrs	r3, r2
 8006706:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800670a:	4b3c      	ldr	r3, [pc, #240]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800670c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006710:	f023 021f 	bic.w	r2, r3, #31
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	3b01      	subs	r3, #1
 800671a:	4938      	ldr	r1, [pc, #224]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01d      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800672e:	4b33      	ldr	r3, [pc, #204]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006734:	0e1b      	lsrs	r3, r3, #24
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800673c:	4b2f      	ldr	r3, [pc, #188]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800673e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006742:	0f1b      	lsrs	r3, r3, #28
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	019a      	lsls	r2, r3, #6
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	041b      	lsls	r3, r3, #16
 8006756:	431a      	orrs	r2, r3
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	061b      	lsls	r3, r3, #24
 800675c:	431a      	orrs	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	071b      	lsls	r3, r3, #28
 8006762:	4926      	ldr	r1, [pc, #152]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d011      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	019a      	lsls	r2, r3, #6
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	041b      	lsls	r3, r3, #16
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	061b      	lsls	r3, r3, #24
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	071b      	lsls	r3, r3, #28
 8006792:	491a      	ldr	r1, [pc, #104]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800679a:	4b18      	ldr	r3, [pc, #96]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a17      	ldr	r2, [pc, #92]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067a6:	f7fc fad1 	bl	8002d4c <HAL_GetTick>
 80067aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067ac:	e008      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067ae:	f7fc facd 	bl	8002d4c <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b64      	cmp	r3, #100	; 0x64
 80067ba:	d901      	bls.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e0d8      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067c0:	4b0e      	ldr	r3, [pc, #56]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0f0      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	f040 80ce 	bne.w	8006970 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a08      	ldr	r2, [pc, #32]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80067da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e0:	f7fc fab4 	bl	8002d4c <HAL_GetTick>
 80067e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067e6:	e00b      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80067e8:	f7fc fab0 	bl	8002d4c <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b64      	cmp	r3, #100	; 0x64
 80067f4:	d904      	bls.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e0bb      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80067fa:	bf00      	nop
 80067fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006800:	4b5e      	ldr	r3, [pc, #376]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800680c:	d0ec      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800682a:	2b00      	cmp	r3, #0
 800682c:	d02e      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	d12a      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006836:	4b51      	ldr	r3, [pc, #324]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683c:	0c1b      	lsrs	r3, r3, #16
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006844:	4b4d      	ldr	r3, [pc, #308]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684a:	0f1b      	lsrs	r3, r3, #28
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	019a      	lsls	r2, r3, #6
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	041b      	lsls	r3, r3, #16
 800685c:	431a      	orrs	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	061b      	lsls	r3, r3, #24
 8006864:	431a      	orrs	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	071b      	lsls	r3, r3, #28
 800686a:	4944      	ldr	r1, [pc, #272]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800686c:	4313      	orrs	r3, r2
 800686e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006872:	4b42      	ldr	r3, [pc, #264]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006878:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	3b01      	subs	r3, #1
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	493d      	ldr	r1, [pc, #244]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d022      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800689c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068a0:	d11d      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068a2:	4b36      	ldr	r3, [pc, #216]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a8:	0e1b      	lsrs	r3, r3, #24
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068b0:	4b32      	ldr	r3, [pc, #200]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b6:	0f1b      	lsrs	r3, r3, #28
 80068b8:	f003 0307 	and.w	r3, r3, #7
 80068bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	019a      	lsls	r2, r3, #6
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	041b      	lsls	r3, r3, #16
 80068ca:	431a      	orrs	r2, r3
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	061b      	lsls	r3, r3, #24
 80068d0:	431a      	orrs	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	071b      	lsls	r3, r3, #28
 80068d6:	4929      	ldr	r1, [pc, #164]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d028      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068ea:	4b24      	ldr	r3, [pc, #144]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f0:	0e1b      	lsrs	r3, r3, #24
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80068f8:	4b20      	ldr	r3, [pc, #128]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fe:	0c1b      	lsrs	r3, r3, #16
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	019a      	lsls	r2, r3, #6
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	041b      	lsls	r3, r3, #16
 8006910:	431a      	orrs	r2, r3
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	061b      	lsls	r3, r3, #24
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	071b      	lsls	r3, r3, #28
 800691e:	4917      	ldr	r1, [pc, #92]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006920:	4313      	orrs	r3, r2
 8006922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006926:	4b15      	ldr	r3, [pc, #84]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800692c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	4911      	ldr	r1, [pc, #68]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006936:	4313      	orrs	r3, r2
 8006938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800693c:	4b0f      	ldr	r3, [pc, #60]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a0e      	ldr	r2, [pc, #56]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006948:	f7fc fa00 	bl	8002d4c <HAL_GetTick>
 800694c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006950:	f7fc f9fc 	bl	8002d4c <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b64      	cmp	r3, #100	; 0x64
 800695c:	d901      	bls.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e007      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006962:	4b06      	ldr	r3, [pc, #24]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800696a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800696e:	d1ef      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3720      	adds	r7, #32
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40023800 	.word	0x40023800

08006980 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e01c      	b.n	80069cc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	795b      	ldrb	r3, [r3, #5]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d105      	bne.n	80069a8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f816 	bl	80069d4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 0204 	orr.w	r2, r2, #4
 80069bc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_RNG_MspInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e081      	b.n	8006afe <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	7f5b      	ldrb	r3, [r3, #29]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d105      	bne.n	8006a10 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f87e 	bl	8006b0c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	22ca      	movs	r2, #202	; 0xca
 8006a1c:	625a      	str	r2, [r3, #36]	; 0x24
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2253      	movs	r2, #83	; 0x53
 8006a24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f950 	bl	8006ccc <RTC_EnterInitMode>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d008      	beq.n	8006a44 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	22ff      	movs	r2, #255	; 0xff
 8006a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e05c      	b.n	8006afe <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6899      	ldr	r1, [r3, #8]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	4b2e      	ldr	r3, [pc, #184]	; (8006b08 <HAL_RTC_Init+0x120>)
 8006a50:	400b      	ands	r3, r1
 8006a52:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6899      	ldr	r1, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	68d2      	ldr	r2, [r2, #12]
 8006a7a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6919      	ldr	r1, [r3, #16]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	041a      	lsls	r2, r3, #16
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a9e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10e      	bne.n	8006acc <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f8e4 	bl	8006c7c <HAL_RTC_WaitForSynchro>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d008      	beq.n	8006acc <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	22ff      	movs	r2, #255	; 0xff
 8006ac0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e018      	b.n	8006afe <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0208 	bic.w	r2, r2, #8
 8006ada:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699a      	ldr	r2, [r3, #24]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	22ff      	movs	r2, #255	; 0xff
 8006af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006afc:	2300      	movs	r3, #0
  }
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	ff8fffbf 	.word	0xff8fffbf

08006b0c <HAL_RTC_MspInit>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	4b22      	ldr	r3, [pc, #136]	; (8006bd8 <HAL_RTC_GetTime+0xb8>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	0c1b      	lsrs	r3, r3, #16
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	0a1b      	lsrs	r3, r3, #8
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d11a      	bne.n	8006bce <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 f8c1 	bl	8006d24 <RTC_Bcd2ToByte>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	785b      	ldrb	r3, [r3, #1]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 f8b8 	bl	8006d24 <RTC_Bcd2ToByte>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	789b      	ldrb	r3, [r3, #2]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 f8af 	bl	8006d24 <RTC_Bcd2ToByte>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	461a      	mov	r2, r3
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	007f7f7f 	.word	0x007f7f7f

08006bdc <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	4b21      	ldr	r3, [pc, #132]	; (8006c78 <HAL_RTC_GetDate+0x9c>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	0c1b      	lsrs	r3, r3, #16
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	0a1b      	lsrs	r3, r3, #8
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f003 031f 	and.w	r3, r3, #31
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	0b5b      	lsrs	r3, r3, #13
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	b2da      	uxtb	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d11a      	bne.n	8006c6c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	78db      	ldrb	r3, [r3, #3]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 f872 	bl	8006d24 <RTC_Bcd2ToByte>
 8006c40:	4603      	mov	r3, r0
 8006c42:	461a      	mov	r2, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	785b      	ldrb	r3, [r3, #1]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 f869 	bl	8006d24 <RTC_Bcd2ToByte>
 8006c52:	4603      	mov	r3, r0
 8006c54:	461a      	mov	r2, r3
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	789b      	ldrb	r3, [r3, #2]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 f860 	bl	8006d24 <RTC_Bcd2ToByte>
 8006c64:	4603      	mov	r3, r0
 8006c66:	461a      	mov	r2, r3
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	00ffff3f 	.word	0x00ffff3f

08006c7c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c96:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c98:	f7fc f858 	bl	8002d4c <HAL_GetTick>
 8006c9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006c9e:	e009      	b.n	8006cb4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ca0:	f7fc f854 	bl	8002d4c <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cae:	d901      	bls.n	8006cb4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e007      	b.n	8006cc4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0ee      	beq.n	8006ca0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d119      	bne.n	8006d1a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f04f 32ff 	mov.w	r2, #4294967295
 8006cee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006cf0:	f7fc f82c 	bl	8002d4c <HAL_GetTick>
 8006cf4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006cf6:	e009      	b.n	8006d0c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006cf8:	f7fc f828 	bl	8002d4c <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d06:	d901      	bls.n	8006d0c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e007      	b.n	8006d1c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0ee      	beq.n	8006cf8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006d32:	79fb      	ldrb	r3, [r7, #7]
 8006d34:	091b      	lsrs	r3, r3, #4
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	4413      	add	r3, r2
 8006d52:	b2db      	uxtb	r3, r3
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e022      	b.n	8006db8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d105      	bne.n	8006d8a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f8c0 	bl	8006f0a <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2203      	movs	r2, #3
 8006d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f814 	bl	8006dc0 <HAL_SD_InitCard>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e00a      	b.n	8006db8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006dc0:	b5b0      	push	{r4, r5, r7, lr}
 8006dc2:	b08e      	sub	sp, #56	; 0x38
 8006dc4:	af04      	add	r7, sp, #16
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006ddc:	2376      	movs	r3, #118	; 0x76
 8006dde:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681d      	ldr	r5, [r3, #0]
 8006de4:	466c      	mov	r4, sp
 8006de6:	f107 0314 	add.w	r3, r7, #20
 8006dea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006dee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f001 fbed 	bl	80085d8 <SDMMC_Init>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e056      	b.n	8006ebe <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e1e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f001 fc10 	bl	800864a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e38:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fbb0 	bl	80075a0 <SD_PowerON>
 8006e40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e02e      	b.n	8006ebe <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fad1 	bl	8007408 <SD_InitCard>
 8006e66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00b      	beq.n	8006e86 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e01b      	b.n	8006ebe <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f001 fc7c 	bl	800878c <SDMMC_CmdBlockLength>
 8006e94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00f      	beq.n	8006ebc <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a09      	ldr	r2, [pc, #36]	; (8006ec8 <HAL_SD_InitCard+0x108>)
 8006ea2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3728      	adds	r7, #40	; 0x28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	004005ff 	.word	0x004005ff

08006ecc <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e011      	b.n	8006f02 <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2203      	movs	r2, #3
 8006ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fbe8 	bl	80076bc <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f816 	bl	8006f1e <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <HAL_SD_MspDeInit>:
  * @brief  De-Initialize SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspDeInit(SD_HandleTypeDef *hsd)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspDeInit could be implemented in the user file
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f42:	0f9b      	lsrs	r3, r3, #30
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f4e:	0e9b      	lsrs	r3, r3, #26
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f60:	0e1b      	lsrs	r3, r3, #24
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f72:	0c1b      	lsrs	r3, r3, #16
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f7e:	0a1b      	lsrs	r3, r3, #8
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f94:	0d1b      	lsrs	r3, r3, #20
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fa0:	0c1b      	lsrs	r3, r3, #16
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	f003 030f 	and.w	r3, r3, #15
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fb2:	0bdb      	lsrs	r3, r3, #15
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fc4:	0b9b      	lsrs	r3, r3, #14
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fd6:	0b5b      	lsrs	r3, r3, #13
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fe8:	0b1b      	lsrs	r3, r3, #12
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007000:	2b00      	cmp	r3, #0
 8007002:	d163      	bne.n	80070cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007008:	009a      	lsls	r2, r3, #2
 800700a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800700e:	4013      	ands	r3, r2
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007014:	0f92      	lsrs	r2, r2, #30
 8007016:	431a      	orrs	r2, r3
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007020:	0edb      	lsrs	r3, r3, #27
 8007022:	b2db      	uxtb	r3, r3
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	b2da      	uxtb	r2, r3
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007032:	0e1b      	lsrs	r3, r3, #24
 8007034:	b2db      	uxtb	r3, r3
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	b2da      	uxtb	r2, r3
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007044:	0d5b      	lsrs	r3, r3, #21
 8007046:	b2db      	uxtb	r3, r3
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	b2da      	uxtb	r2, r3
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007056:	0c9b      	lsrs	r3, r3, #18
 8007058:	b2db      	uxtb	r3, r3
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	b2da      	uxtb	r2, r3
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007068:	0bdb      	lsrs	r3, r3, #15
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	b2da      	uxtb	r2, r3
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	7e1b      	ldrb	r3, [r3, #24]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	3302      	adds	r3, #2
 800708c:	2201      	movs	r2, #1
 800708e:	fa02 f303 	lsl.w	r3, r2, r3
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007096:	fb02 f203 	mul.w	r2, r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	7a1b      	ldrb	r3, [r3, #8]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	f003 030f 	and.w	r3, r3, #15
 80070a8:	2201      	movs	r2, #1
 80070aa:	409a      	lsls	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80070b8:	0a52      	lsrs	r2, r2, #9
 80070ba:	fb02 f203 	mul.w	r2, r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c8:	661a      	str	r2, [r3, #96]	; 0x60
 80070ca:	e031      	b.n	8007130 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d11d      	bne.n	8007110 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070d8:	041b      	lsls	r3, r3, #16
 80070da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e2:	0c1b      	lsrs	r3, r3, #16
 80070e4:	431a      	orrs	r2, r3
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	3301      	adds	r3, #1
 80070f0:	029a      	lsls	r2, r3, #10
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007104:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	661a      	str	r2, [r3, #96]	; 0x60
 800710e:	e00f      	b.n	8007130 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a58      	ldr	r2, [pc, #352]	; (8007278 <HAL_SD_GetCardCSD+0x344>)
 8007116:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e09d      	b.n	800726c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007134:	0b9b      	lsrs	r3, r3, #14
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	b2da      	uxtb	r2, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007146:	09db      	lsrs	r3, r3, #7
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800714e:	b2da      	uxtb	r2, r3
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007158:	b2db      	uxtb	r3, r3
 800715a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800715e:	b2da      	uxtb	r2, r3
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007168:	0fdb      	lsrs	r3, r3, #31
 800716a:	b2da      	uxtb	r2, r3
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007174:	0f5b      	lsrs	r3, r3, #29
 8007176:	b2db      	uxtb	r3, r3
 8007178:	f003 0303 	and.w	r3, r3, #3
 800717c:	b2da      	uxtb	r2, r3
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007186:	0e9b      	lsrs	r3, r3, #26
 8007188:	b2db      	uxtb	r3, r3
 800718a:	f003 0307 	and.w	r3, r3, #7
 800718e:	b2da      	uxtb	r2, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007198:	0d9b      	lsrs	r3, r3, #22
 800719a:	b2db      	uxtb	r3, r3
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071aa:	0d5b      	lsrs	r3, r3, #21
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c6:	0c1b      	lsrs	r3, r3, #16
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071da:	0bdb      	lsrs	r3, r3, #15
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	0b9b      	lsrs	r3, r3, #14
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007202:	0b5b      	lsrs	r3, r3, #13
 8007204:	b2db      	uxtb	r3, r3
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	b2da      	uxtb	r2, r3
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	0b1b      	lsrs	r3, r3, #12
 8007218:	b2db      	uxtb	r3, r3
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	b2da      	uxtb	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722a:	0a9b      	lsrs	r3, r3, #10
 800722c:	b2db      	uxtb	r3, r3
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	b2da      	uxtb	r2, r3
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	0a1b      	lsrs	r3, r3, #8
 8007240:	b2db      	uxtb	r3, r3
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	b2da      	uxtb	r2, r3
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	085b      	lsrs	r3, r3, #1
 8007254:	b2db      	uxtb	r3, r3
 8007256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800725a:	b2da      	uxtb	r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	004005ff 	.word	0x004005ff

0800727c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80072d4:	b5b0      	push	{r4, r5, r7, lr}
 80072d6:	b08e      	sub	sp, #56	; 0x38
 80072d8:	af04      	add	r7, sp, #16
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2203      	movs	r2, #3
 80072e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d02e      	beq.n	8007352 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fa:	d106      	bne.n	800730a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	639a      	str	r2, [r3, #56]	; 0x38
 8007308:	e029      	b.n	800735e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007310:	d10a      	bne.n	8007328 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f9df 	bl	80076d6 <SD_WideBus_Enable>
 8007318:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	639a      	str	r2, [r3, #56]	; 0x38
 8007326:	e01a      	b.n	800735e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10a      	bne.n	8007344 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fa1c 	bl	800776c <SD_WideBus_Disable>
 8007334:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	639a      	str	r2, [r3, #56]	; 0x38
 8007342:	e00c      	b.n	800735e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	639a      	str	r2, [r3, #56]	; 0x38
 8007350:	e005      	b.n	800735e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00b      	beq.n	800737e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a26      	ldr	r2, [pc, #152]	; (8007404 <HAL_SD_ConfigWideBusOperation+0x130>)
 800736c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800737c:	e01f      	b.n	80073be <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681d      	ldr	r5, [r3, #0]
 80073a4:	466c      	mov	r4, sp
 80073a6:	f107 0314 	add.w	r3, r7, #20
 80073aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80073ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80073b2:	f107 0308 	add.w	r3, r7, #8
 80073b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073b8:	4628      	mov	r0, r5
 80073ba:	f001 f90d 	bl	80085d8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073c6:	4618      	mov	r0, r3
 80073c8:	f001 f9e0 	bl	800878c <SDMMC_CmdBlockLength>
 80073cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00c      	beq.n	80073ee <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a0a      	ldr	r2, [pc, #40]	; (8007404 <HAL_SD_ConfigWideBusOperation+0x130>)
 80073da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80073f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3728      	adds	r7, #40	; 0x28
 80073fe:	46bd      	mov	sp, r7
 8007400:	bdb0      	pop	{r4, r5, r7, pc}
 8007402:	bf00      	nop
 8007404:	004005ff 	.word	0x004005ff

08007408 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007408:	b5b0      	push	{r4, r5, r7, lr}
 800740a:	b094      	sub	sp, #80	; 0x50
 800740c:	af04      	add	r7, sp, #16
 800740e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007410:	2301      	movs	r3, #1
 8007412:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4618      	mov	r0, r3
 800741a:	f001 f933 	bl	8008684 <SDMMC_GetPowerState>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d102      	bne.n	800742a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007424:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007428:	e0b6      	b.n	8007598 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742e:	2b03      	cmp	r3, #3
 8007430:	d02f      	beq.n	8007492 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4618      	mov	r0, r3
 8007438:	f001 fab3 	bl	80089a2 <SDMMC_CmdSendCID>
 800743c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800743e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <SD_InitCard+0x40>
    {
      return errorstate;
 8007444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007446:	e0a7      	b.n	8007598 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2100      	movs	r1, #0
 800744e:	4618      	mov	r0, r3
 8007450:	f001 f95d 	bl	800870e <SDMMC_GetResponse>
 8007454:	4602      	mov	r2, r0
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2104      	movs	r1, #4
 8007460:	4618      	mov	r0, r3
 8007462:	f001 f954 	bl	800870e <SDMMC_GetResponse>
 8007466:	4602      	mov	r2, r0
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2108      	movs	r1, #8
 8007472:	4618      	mov	r0, r3
 8007474:	f001 f94b 	bl	800870e <SDMMC_GetResponse>
 8007478:	4602      	mov	r2, r0
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	210c      	movs	r1, #12
 8007484:	4618      	mov	r0, r3
 8007486:	f001 f942 	bl	800870e <SDMMC_GetResponse>
 800748a:	4602      	mov	r2, r0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007496:	2b03      	cmp	r3, #3
 8007498:	d00d      	beq.n	80074b6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f107 020e 	add.w	r2, r7, #14
 80074a2:	4611      	mov	r1, r2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 fab9 	bl	8008a1c <SDMMC_CmdSetRelAdd>
 80074aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80074ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <SD_InitCard+0xae>
    {
      return errorstate;
 80074b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b4:	e070      	b.n	8007598 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d036      	beq.n	800752c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80074be:	89fb      	ldrh	r3, [r7, #14]
 80074c0:	461a      	mov	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ce:	041b      	lsls	r3, r3, #16
 80074d0:	4619      	mov	r1, r3
 80074d2:	4610      	mov	r0, r2
 80074d4:	f001 fa83 	bl	80089de <SDMMC_CmdSendCSD>
 80074d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80074da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80074e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e2:	e059      	b.n	8007598 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2100      	movs	r1, #0
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 f90f 	bl	800870e <SDMMC_GetResponse>
 80074f0:	4602      	mov	r2, r0
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2104      	movs	r1, #4
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 f906 	bl	800870e <SDMMC_GetResponse>
 8007502:	4602      	mov	r2, r0
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2108      	movs	r1, #8
 800750e:	4618      	mov	r0, r3
 8007510:	f001 f8fd 	bl	800870e <SDMMC_GetResponse>
 8007514:	4602      	mov	r2, r0
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	210c      	movs	r1, #12
 8007520:	4618      	mov	r0, r3
 8007522:	f001 f8f4 	bl	800870e <SDMMC_GetResponse>
 8007526:	4602      	mov	r2, r0
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2104      	movs	r1, #4
 8007532:	4618      	mov	r0, r3
 8007534:	f001 f8eb 	bl	800870e <SDMMC_GetResponse>
 8007538:	4603      	mov	r3, r0
 800753a:	0d1a      	lsrs	r2, r3, #20
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007540:	f107 0310 	add.w	r3, r7, #16
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff fcf4 	bl	8006f34 <HAL_SD_GetCardCSD>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007552:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007556:	e01f      	b.n	8007598 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6819      	ldr	r1, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007560:	041b      	lsls	r3, r3, #16
 8007562:	461a      	mov	r2, r3
 8007564:	f04f 0300 	mov.w	r3, #0
 8007568:	4608      	mov	r0, r1
 800756a:	f001 f931 	bl	80087d0 <SDMMC_CmdSelDesel>
 800756e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <SD_InitCard+0x172>
  {
    return errorstate;
 8007576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007578:	e00e      	b.n	8007598 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681d      	ldr	r5, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	466c      	mov	r4, sp
 8007582:	f103 0210 	add.w	r2, r3, #16
 8007586:	ca07      	ldmia	r2, {r0, r1, r2}
 8007588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800758c:	3304      	adds	r3, #4
 800758e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007590:	4628      	mov	r0, r5
 8007592:	f001 f821 	bl	80085d8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3740      	adds	r7, #64	; 0x40
 800759c:	46bd      	mov	sp, r7
 800759e:	bdb0      	pop	{r4, r5, r7, pc}

080075a0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	2300      	movs	r3, #0
 80075b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 f92c 	bl	8008816 <SDMMC_CmdGoIdleState>
 80075be:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <SD_PowerON+0x2a>
  {
    return errorstate;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	e072      	b.n	80076b0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f001 f93f 	bl	8008852 <SDMMC_CmdOperCond>
 80075d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00d      	beq.n	80075f8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f001 f915 	bl	8008816 <SDMMC_CmdGoIdleState>
 80075ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d004      	beq.n	80075fe <SD_PowerON+0x5e>
    {
      return errorstate;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	e05b      	b.n	80076b0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007602:	2b01      	cmp	r3, #1
 8007604:	d137      	bne.n	8007676 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2100      	movs	r1, #0
 800760c:	4618      	mov	r0, r3
 800760e:	f001 f93f 	bl	8008890 <SDMMC_CmdAppCommand>
 8007612:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d02d      	beq.n	8007676 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800761a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800761e:	e047      	b.n	80076b0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f001 f932 	bl	8008890 <SDMMC_CmdAppCommand>
 800762c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <SD_PowerON+0x98>
    {
      return errorstate;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	e03b      	b.n	80076b0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	491e      	ldr	r1, [pc, #120]	; (80076b8 <SD_PowerON+0x118>)
 800763e:	4618      	mov	r0, r3
 8007640:	f001 f948 	bl	80088d4 <SDMMC_CmdAppOperCommand>
 8007644:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800764c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007650:	e02e      	b.n	80076b0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2100      	movs	r1, #0
 8007658:	4618      	mov	r0, r3
 800765a:	f001 f858 	bl	800870e <SDMMC_GetResponse>
 800765e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	0fdb      	lsrs	r3, r3, #31
 8007664:	2b01      	cmp	r3, #1
 8007666:	d101      	bne.n	800766c <SD_PowerON+0xcc>
 8007668:	2301      	movs	r3, #1
 800766a:	e000      	b.n	800766e <SD_PowerON+0xce>
 800766c:	2300      	movs	r3, #0
 800766e:	613b      	str	r3, [r7, #16]

    count++;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	3301      	adds	r3, #1
 8007674:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800767c:	4293      	cmp	r3, r2
 800767e:	d802      	bhi.n	8007686 <SD_PowerON+0xe6>
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0cc      	beq.n	8007620 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800768c:	4293      	cmp	r3, r2
 800768e:	d902      	bls.n	8007696 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007694:	e00c      	b.n	80076b0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d003      	beq.n	80076a8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	645a      	str	r2, [r3, #68]	; 0x44
 80076a6:	e002      	b.n	80076ae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3718      	adds	r7, #24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	c1100000 	.word	0xc1100000

080076bc <SD_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 ffcd 	bl	8008668 <SDMMC_PowerState_OFF>
}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b086      	sub	sp, #24
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	2300      	movs	r3, #0
 80076e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2100      	movs	r1, #0
 80076ec:	4618      	mov	r0, r3
 80076ee:	f001 f80e 	bl	800870e <SDMMC_GetResponse>
 80076f2:	4603      	mov	r3, r0
 80076f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076fc:	d102      	bne.n	8007704 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80076fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007702:	e02f      	b.n	8007764 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007704:	f107 030c 	add.w	r3, r7, #12
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f879 	bl	8007802 <SD_FindSCR>
 8007710:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	e023      	b.n	8007764 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d01c      	beq.n	8007760 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772e:	041b      	lsls	r3, r3, #16
 8007730:	4619      	mov	r1, r3
 8007732:	4610      	mov	r0, r2
 8007734:	f001 f8ac 	bl	8008890 <SDMMC_CmdAppCommand>
 8007738:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	e00f      	b.n	8007764 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2102      	movs	r1, #2
 800774a:	4618      	mov	r0, r3
 800774c:	f001 f8e6 	bl	800891c <SDMMC_CmdBusWidth>
 8007750:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	e003      	b.n	8007764 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800775c:	2300      	movs	r3, #0
 800775e:	e001      	b.n	8007764 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007760:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007774:	2300      	movs	r3, #0
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	2300      	movs	r3, #0
 800777a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2100      	movs	r1, #0
 8007782:	4618      	mov	r0, r3
 8007784:	f000 ffc3 	bl	800870e <SDMMC_GetResponse>
 8007788:	4603      	mov	r3, r0
 800778a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800778e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007792:	d102      	bne.n	800779a <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007794:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007798:	e02f      	b.n	80077fa <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800779a:	f107 030c 	add.w	r3, r7, #12
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f82e 	bl	8007802 <SD_FindSCR>
 80077a6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	e023      	b.n	80077fa <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d01c      	beq.n	80077f6 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c4:	041b      	lsls	r3, r3, #16
 80077c6:	4619      	mov	r1, r3
 80077c8:	4610      	mov	r0, r2
 80077ca:	f001 f861 	bl	8008890 <SDMMC_CmdAppCommand>
 80077ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	e00f      	b.n	80077fa <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2100      	movs	r1, #0
 80077e0:	4618      	mov	r0, r3
 80077e2:	f001 f89b 	bl	800891c <SDMMC_CmdBusWidth>
 80077e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	e003      	b.n	80077fa <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e001      	b.n	80077fa <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80077f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007802:	b590      	push	{r4, r7, lr}
 8007804:	b08f      	sub	sp, #60	; 0x3c
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800780c:	f7fb fa9e 	bl	8002d4c <HAL_GetTick>
 8007810:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007816:	2300      	movs	r3, #0
 8007818:	60bb      	str	r3, [r7, #8]
 800781a:	2300      	movs	r3, #0
 800781c:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2108      	movs	r1, #8
 8007828:	4618      	mov	r0, r3
 800782a:	f000 ffaf 	bl	800878c <SDMMC_CmdBlockLength>
 800782e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <SD_FindSCR+0x38>
  {
    return errorstate;
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	e0b2      	b.n	80079a0 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007842:	041b      	lsls	r3, r3, #16
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f001 f822 	bl	8008890 <SDMMC_CmdAppCommand>
 800784c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007856:	e0a3      	b.n	80079a0 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007858:	f04f 33ff 	mov.w	r3, #4294967295
 800785c:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800785e:	2308      	movs	r3, #8
 8007860:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007862:	2330      	movs	r3, #48	; 0x30
 8007864:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007866:	2302      	movs	r3, #2
 8007868:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800786a:	2300      	movs	r3, #0
 800786c:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800786e:	2301      	movs	r3, #1
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f107 0210 	add.w	r2, r7, #16
 800787a:	4611      	mov	r1, r2
 800787c:	4618      	mov	r0, r3
 800787e:	f000 ff59 	bl	8008734 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f001 f86a 	bl	8008960 <SDMMC_CmdSendSCR>
 800788c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	2b00      	cmp	r3, #0
 8007892:	d02a      	beq.n	80078ea <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	e083      	b.n	80079a0 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00f      	beq.n	80078c6 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6819      	ldr	r1, [r3, #0]
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	f107 0208 	add.w	r2, r7, #8
 80078b2:	18d4      	adds	r4, r2, r3
 80078b4:	4608      	mov	r0, r1
 80078b6:	f000 febb 	bl	8008630 <SDMMC_ReadFIFO>
 80078ba:	4603      	mov	r3, r0
 80078bc:	6023      	str	r3, [r4, #0]
      index++;
 80078be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c0:	3301      	adds	r3, #1
 80078c2:	637b      	str	r3, [r7, #52]	; 0x34
 80078c4:	e006      	b.n	80078d4 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d012      	beq.n	80078fa <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80078d4:	f7fb fa3a 	bl	8002d4c <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e2:	d102      	bne.n	80078ea <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80078e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078e8:	e05a      	b.n	80079a0 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f0:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0cf      	beq.n	8007898 <SD_FindSCR+0x96>
 80078f8:	e000      	b.n	80078fc <SD_FindSCR+0xfa>
      break;
 80078fa:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007902:	f003 0308 	and.w	r3, r3, #8
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2208      	movs	r2, #8
 8007910:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007912:	2308      	movs	r3, #8
 8007914:	e044      	b.n	80079a0 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2202      	movs	r2, #2
 800792a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800792c:	2302      	movs	r3, #2
 800792e:	e037      	b.n	80079a0 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007936:	f003 0320 	and.w	r3, r3, #32
 800793a:	2b00      	cmp	r3, #0
 800793c:	d005      	beq.n	800794a <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2220      	movs	r2, #32
 8007944:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007946:	2320      	movs	r3, #32
 8007948:	e02a      	b.n	80079a0 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007952:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	061a      	lsls	r2, r3, #24
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	021b      	lsls	r3, r3, #8
 800795c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007960:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	0a1b      	lsrs	r3, r3, #8
 8007966:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800796a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	0e1b      	lsrs	r3, r3, #24
 8007970:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	601a      	str	r2, [r3, #0]
    scr++;
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	3304      	adds	r3, #4
 800797a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	061a      	lsls	r2, r3, #24
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	021b      	lsls	r3, r3, #8
 8007984:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007988:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	0a1b      	lsrs	r3, r3, #8
 800798e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007992:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	0e1b      	lsrs	r3, r3, #24
 8007998:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	373c      	adds	r7, #60	; 0x3c
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd90      	pop	{r4, r7, pc}

080079a8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e025      	b.n	8007a08 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d106      	bne.n	80079d6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f81d 	bl	8007a10 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2202      	movs	r2, #2
 80079da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3304      	adds	r3, #4
 80079e6:	4619      	mov	r1, r3
 80079e8:	4610      	mov	r0, r2
 80079ea:	f000 fccb 	bl	8008384 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	461a      	mov	r2, r3
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	f000 fd35 	bl	8008468 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d101      	bne.n	8007a40 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e018      	b.n	8007a72 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	68b9      	ldr	r1, [r7, #8]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fd89 	bl	8008568 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d104      	bne.n	8007a68 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2205      	movs	r2, #5
 8007a62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007a66:	e003      	b.n	8007a70 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b082      	sub	sp, #8
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d101      	bne.n	8007a94 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007a90:	2302      	movs	r3, #2
 8007a92:	e00e      	b.n	8007ab2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fd84 	bl	80085b0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e040      	b.n	8007b4e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d106      	bne.n	8007ae2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f873 	bl	8007bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2224      	movs	r2, #36	; 0x24
 8007ae6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0201 	bic.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f879 	bl	8007bf0 <UART_SetConfig>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e022      	b.n	8007b4e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 facf 	bl	80080b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0201 	orr.w	r2, r2, #1
 8007b44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fb56 	bl	80081f8 <UART_CheckIdleState>
 8007b4c:	4603      	mov	r3, r0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b082      	sub	sp, #8
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d101      	bne.n	8007b68 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e02b      	b.n	8007bc0 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2224      	movs	r2, #36	; 0x24
 8007b6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0201 	bic.w	r2, r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2200      	movs	r2, #0
 8007b94:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f820 	bl	8007bdc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b088      	sub	sp, #32
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	4ba7      	ldr	r3, [pc, #668]	; (8007eb8 <UART_SetConfig+0x2c8>)
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	6812      	ldr	r2, [r2, #0]
 8007c22:	6979      	ldr	r1, [r7, #20]
 8007c24:	430b      	orrs	r3, r1
 8007c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a95      	ldr	r2, [pc, #596]	; (8007ebc <UART_SetConfig+0x2cc>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d120      	bne.n	8007cae <UART_SetConfig+0xbe>
 8007c6c:	4b94      	ldr	r3, [pc, #592]	; (8007ec0 <UART_SetConfig+0x2d0>)
 8007c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d816      	bhi.n	8007ca8 <UART_SetConfig+0xb8>
 8007c7a:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <UART_SetConfig+0x90>)
 8007c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c80:	08007c91 	.word	0x08007c91
 8007c84:	08007c9d 	.word	0x08007c9d
 8007c88:	08007c97 	.word	0x08007c97
 8007c8c:	08007ca3 	.word	0x08007ca3
 8007c90:	2301      	movs	r3, #1
 8007c92:	77fb      	strb	r3, [r7, #31]
 8007c94:	e14f      	b.n	8007f36 <UART_SetConfig+0x346>
 8007c96:	2302      	movs	r3, #2
 8007c98:	77fb      	strb	r3, [r7, #31]
 8007c9a:	e14c      	b.n	8007f36 <UART_SetConfig+0x346>
 8007c9c:	2304      	movs	r3, #4
 8007c9e:	77fb      	strb	r3, [r7, #31]
 8007ca0:	e149      	b.n	8007f36 <UART_SetConfig+0x346>
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	77fb      	strb	r3, [r7, #31]
 8007ca6:	e146      	b.n	8007f36 <UART_SetConfig+0x346>
 8007ca8:	2310      	movs	r3, #16
 8007caa:	77fb      	strb	r3, [r7, #31]
 8007cac:	e143      	b.n	8007f36 <UART_SetConfig+0x346>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a84      	ldr	r2, [pc, #528]	; (8007ec4 <UART_SetConfig+0x2d4>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d132      	bne.n	8007d1e <UART_SetConfig+0x12e>
 8007cb8:	4b81      	ldr	r3, [pc, #516]	; (8007ec0 <UART_SetConfig+0x2d0>)
 8007cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbe:	f003 030c 	and.w	r3, r3, #12
 8007cc2:	2b0c      	cmp	r3, #12
 8007cc4:	d828      	bhi.n	8007d18 <UART_SetConfig+0x128>
 8007cc6:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <UART_SetConfig+0xdc>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007d01 	.word	0x08007d01
 8007cd0:	08007d19 	.word	0x08007d19
 8007cd4:	08007d19 	.word	0x08007d19
 8007cd8:	08007d19 	.word	0x08007d19
 8007cdc:	08007d0d 	.word	0x08007d0d
 8007ce0:	08007d19 	.word	0x08007d19
 8007ce4:	08007d19 	.word	0x08007d19
 8007ce8:	08007d19 	.word	0x08007d19
 8007cec:	08007d07 	.word	0x08007d07
 8007cf0:	08007d19 	.word	0x08007d19
 8007cf4:	08007d19 	.word	0x08007d19
 8007cf8:	08007d19 	.word	0x08007d19
 8007cfc:	08007d13 	.word	0x08007d13
 8007d00:	2300      	movs	r3, #0
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e117      	b.n	8007f36 <UART_SetConfig+0x346>
 8007d06:	2302      	movs	r3, #2
 8007d08:	77fb      	strb	r3, [r7, #31]
 8007d0a:	e114      	b.n	8007f36 <UART_SetConfig+0x346>
 8007d0c:	2304      	movs	r3, #4
 8007d0e:	77fb      	strb	r3, [r7, #31]
 8007d10:	e111      	b.n	8007f36 <UART_SetConfig+0x346>
 8007d12:	2308      	movs	r3, #8
 8007d14:	77fb      	strb	r3, [r7, #31]
 8007d16:	e10e      	b.n	8007f36 <UART_SetConfig+0x346>
 8007d18:	2310      	movs	r3, #16
 8007d1a:	77fb      	strb	r3, [r7, #31]
 8007d1c:	e10b      	b.n	8007f36 <UART_SetConfig+0x346>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a69      	ldr	r2, [pc, #420]	; (8007ec8 <UART_SetConfig+0x2d8>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d120      	bne.n	8007d6a <UART_SetConfig+0x17a>
 8007d28:	4b65      	ldr	r3, [pc, #404]	; (8007ec0 <UART_SetConfig+0x2d0>)
 8007d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d32:	2b30      	cmp	r3, #48	; 0x30
 8007d34:	d013      	beq.n	8007d5e <UART_SetConfig+0x16e>
 8007d36:	2b30      	cmp	r3, #48	; 0x30
 8007d38:	d814      	bhi.n	8007d64 <UART_SetConfig+0x174>
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	d009      	beq.n	8007d52 <UART_SetConfig+0x162>
 8007d3e:	2b20      	cmp	r3, #32
 8007d40:	d810      	bhi.n	8007d64 <UART_SetConfig+0x174>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <UART_SetConfig+0x15c>
 8007d46:	2b10      	cmp	r3, #16
 8007d48:	d006      	beq.n	8007d58 <UART_SetConfig+0x168>
 8007d4a:	e00b      	b.n	8007d64 <UART_SetConfig+0x174>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	77fb      	strb	r3, [r7, #31]
 8007d50:	e0f1      	b.n	8007f36 <UART_SetConfig+0x346>
 8007d52:	2302      	movs	r3, #2
 8007d54:	77fb      	strb	r3, [r7, #31]
 8007d56:	e0ee      	b.n	8007f36 <UART_SetConfig+0x346>
 8007d58:	2304      	movs	r3, #4
 8007d5a:	77fb      	strb	r3, [r7, #31]
 8007d5c:	e0eb      	b.n	8007f36 <UART_SetConfig+0x346>
 8007d5e:	2308      	movs	r3, #8
 8007d60:	77fb      	strb	r3, [r7, #31]
 8007d62:	e0e8      	b.n	8007f36 <UART_SetConfig+0x346>
 8007d64:	2310      	movs	r3, #16
 8007d66:	77fb      	strb	r3, [r7, #31]
 8007d68:	e0e5      	b.n	8007f36 <UART_SetConfig+0x346>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a57      	ldr	r2, [pc, #348]	; (8007ecc <UART_SetConfig+0x2dc>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d120      	bne.n	8007db6 <UART_SetConfig+0x1c6>
 8007d74:	4b52      	ldr	r3, [pc, #328]	; (8007ec0 <UART_SetConfig+0x2d0>)
 8007d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d80:	d013      	beq.n	8007daa <UART_SetConfig+0x1ba>
 8007d82:	2bc0      	cmp	r3, #192	; 0xc0
 8007d84:	d814      	bhi.n	8007db0 <UART_SetConfig+0x1c0>
 8007d86:	2b80      	cmp	r3, #128	; 0x80
 8007d88:	d009      	beq.n	8007d9e <UART_SetConfig+0x1ae>
 8007d8a:	2b80      	cmp	r3, #128	; 0x80
 8007d8c:	d810      	bhi.n	8007db0 <UART_SetConfig+0x1c0>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <UART_SetConfig+0x1a8>
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	d006      	beq.n	8007da4 <UART_SetConfig+0x1b4>
 8007d96:	e00b      	b.n	8007db0 <UART_SetConfig+0x1c0>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	77fb      	strb	r3, [r7, #31]
 8007d9c:	e0cb      	b.n	8007f36 <UART_SetConfig+0x346>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	77fb      	strb	r3, [r7, #31]
 8007da2:	e0c8      	b.n	8007f36 <UART_SetConfig+0x346>
 8007da4:	2304      	movs	r3, #4
 8007da6:	77fb      	strb	r3, [r7, #31]
 8007da8:	e0c5      	b.n	8007f36 <UART_SetConfig+0x346>
 8007daa:	2308      	movs	r3, #8
 8007dac:	77fb      	strb	r3, [r7, #31]
 8007dae:	e0c2      	b.n	8007f36 <UART_SetConfig+0x346>
 8007db0:	2310      	movs	r3, #16
 8007db2:	77fb      	strb	r3, [r7, #31]
 8007db4:	e0bf      	b.n	8007f36 <UART_SetConfig+0x346>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a45      	ldr	r2, [pc, #276]	; (8007ed0 <UART_SetConfig+0x2e0>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d125      	bne.n	8007e0c <UART_SetConfig+0x21c>
 8007dc0:	4b3f      	ldr	r3, [pc, #252]	; (8007ec0 <UART_SetConfig+0x2d0>)
 8007dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dce:	d017      	beq.n	8007e00 <UART_SetConfig+0x210>
 8007dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dd4:	d817      	bhi.n	8007e06 <UART_SetConfig+0x216>
 8007dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dda:	d00b      	beq.n	8007df4 <UART_SetConfig+0x204>
 8007ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de0:	d811      	bhi.n	8007e06 <UART_SetConfig+0x216>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <UART_SetConfig+0x1fe>
 8007de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dea:	d006      	beq.n	8007dfa <UART_SetConfig+0x20a>
 8007dec:	e00b      	b.n	8007e06 <UART_SetConfig+0x216>
 8007dee:	2300      	movs	r3, #0
 8007df0:	77fb      	strb	r3, [r7, #31]
 8007df2:	e0a0      	b.n	8007f36 <UART_SetConfig+0x346>
 8007df4:	2302      	movs	r3, #2
 8007df6:	77fb      	strb	r3, [r7, #31]
 8007df8:	e09d      	b.n	8007f36 <UART_SetConfig+0x346>
 8007dfa:	2304      	movs	r3, #4
 8007dfc:	77fb      	strb	r3, [r7, #31]
 8007dfe:	e09a      	b.n	8007f36 <UART_SetConfig+0x346>
 8007e00:	2308      	movs	r3, #8
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e097      	b.n	8007f36 <UART_SetConfig+0x346>
 8007e06:	2310      	movs	r3, #16
 8007e08:	77fb      	strb	r3, [r7, #31]
 8007e0a:	e094      	b.n	8007f36 <UART_SetConfig+0x346>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a30      	ldr	r2, [pc, #192]	; (8007ed4 <UART_SetConfig+0x2e4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d125      	bne.n	8007e62 <UART_SetConfig+0x272>
 8007e16:	4b2a      	ldr	r3, [pc, #168]	; (8007ec0 <UART_SetConfig+0x2d0>)
 8007e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e24:	d017      	beq.n	8007e56 <UART_SetConfig+0x266>
 8007e26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e2a:	d817      	bhi.n	8007e5c <UART_SetConfig+0x26c>
 8007e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e30:	d00b      	beq.n	8007e4a <UART_SetConfig+0x25a>
 8007e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e36:	d811      	bhi.n	8007e5c <UART_SetConfig+0x26c>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <UART_SetConfig+0x254>
 8007e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e40:	d006      	beq.n	8007e50 <UART_SetConfig+0x260>
 8007e42:	e00b      	b.n	8007e5c <UART_SetConfig+0x26c>
 8007e44:	2301      	movs	r3, #1
 8007e46:	77fb      	strb	r3, [r7, #31]
 8007e48:	e075      	b.n	8007f36 <UART_SetConfig+0x346>
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	77fb      	strb	r3, [r7, #31]
 8007e4e:	e072      	b.n	8007f36 <UART_SetConfig+0x346>
 8007e50:	2304      	movs	r3, #4
 8007e52:	77fb      	strb	r3, [r7, #31]
 8007e54:	e06f      	b.n	8007f36 <UART_SetConfig+0x346>
 8007e56:	2308      	movs	r3, #8
 8007e58:	77fb      	strb	r3, [r7, #31]
 8007e5a:	e06c      	b.n	8007f36 <UART_SetConfig+0x346>
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	77fb      	strb	r3, [r7, #31]
 8007e60:	e069      	b.n	8007f36 <UART_SetConfig+0x346>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a1c      	ldr	r2, [pc, #112]	; (8007ed8 <UART_SetConfig+0x2e8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d137      	bne.n	8007edc <UART_SetConfig+0x2ec>
 8007e6c:	4b14      	ldr	r3, [pc, #80]	; (8007ec0 <UART_SetConfig+0x2d0>)
 8007e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e72:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e7a:	d017      	beq.n	8007eac <UART_SetConfig+0x2bc>
 8007e7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e80:	d817      	bhi.n	8007eb2 <UART_SetConfig+0x2c2>
 8007e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e86:	d00b      	beq.n	8007ea0 <UART_SetConfig+0x2b0>
 8007e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e8c:	d811      	bhi.n	8007eb2 <UART_SetConfig+0x2c2>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <UART_SetConfig+0x2aa>
 8007e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e96:	d006      	beq.n	8007ea6 <UART_SetConfig+0x2b6>
 8007e98:	e00b      	b.n	8007eb2 <UART_SetConfig+0x2c2>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	77fb      	strb	r3, [r7, #31]
 8007e9e:	e04a      	b.n	8007f36 <UART_SetConfig+0x346>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	77fb      	strb	r3, [r7, #31]
 8007ea4:	e047      	b.n	8007f36 <UART_SetConfig+0x346>
 8007ea6:	2304      	movs	r3, #4
 8007ea8:	77fb      	strb	r3, [r7, #31]
 8007eaa:	e044      	b.n	8007f36 <UART_SetConfig+0x346>
 8007eac:	2308      	movs	r3, #8
 8007eae:	77fb      	strb	r3, [r7, #31]
 8007eb0:	e041      	b.n	8007f36 <UART_SetConfig+0x346>
 8007eb2:	2310      	movs	r3, #16
 8007eb4:	77fb      	strb	r3, [r7, #31]
 8007eb6:	e03e      	b.n	8007f36 <UART_SetConfig+0x346>
 8007eb8:	efff69f3 	.word	0xefff69f3
 8007ebc:	40011000 	.word	0x40011000
 8007ec0:	40023800 	.word	0x40023800
 8007ec4:	40004400 	.word	0x40004400
 8007ec8:	40004800 	.word	0x40004800
 8007ecc:	40004c00 	.word	0x40004c00
 8007ed0:	40005000 	.word	0x40005000
 8007ed4:	40011400 	.word	0x40011400
 8007ed8:	40007800 	.word	0x40007800
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a71      	ldr	r2, [pc, #452]	; (80080a8 <UART_SetConfig+0x4b8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d125      	bne.n	8007f32 <UART_SetConfig+0x342>
 8007ee6:	4b71      	ldr	r3, [pc, #452]	; (80080ac <UART_SetConfig+0x4bc>)
 8007ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ef0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ef4:	d017      	beq.n	8007f26 <UART_SetConfig+0x336>
 8007ef6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007efa:	d817      	bhi.n	8007f2c <UART_SetConfig+0x33c>
 8007efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f00:	d00b      	beq.n	8007f1a <UART_SetConfig+0x32a>
 8007f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f06:	d811      	bhi.n	8007f2c <UART_SetConfig+0x33c>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <UART_SetConfig+0x324>
 8007f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f10:	d006      	beq.n	8007f20 <UART_SetConfig+0x330>
 8007f12:	e00b      	b.n	8007f2c <UART_SetConfig+0x33c>
 8007f14:	2300      	movs	r3, #0
 8007f16:	77fb      	strb	r3, [r7, #31]
 8007f18:	e00d      	b.n	8007f36 <UART_SetConfig+0x346>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	77fb      	strb	r3, [r7, #31]
 8007f1e:	e00a      	b.n	8007f36 <UART_SetConfig+0x346>
 8007f20:	2304      	movs	r3, #4
 8007f22:	77fb      	strb	r3, [r7, #31]
 8007f24:	e007      	b.n	8007f36 <UART_SetConfig+0x346>
 8007f26:	2308      	movs	r3, #8
 8007f28:	77fb      	strb	r3, [r7, #31]
 8007f2a:	e004      	b.n	8007f36 <UART_SetConfig+0x346>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	77fb      	strb	r3, [r7, #31]
 8007f30:	e001      	b.n	8007f36 <UART_SetConfig+0x346>
 8007f32:	2310      	movs	r3, #16
 8007f34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f3e:	d15b      	bne.n	8007ff8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007f40:	7ffb      	ldrb	r3, [r7, #31]
 8007f42:	2b08      	cmp	r3, #8
 8007f44:	d827      	bhi.n	8007f96 <UART_SetConfig+0x3a6>
 8007f46:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <UART_SetConfig+0x35c>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007f71 	.word	0x08007f71
 8007f50:	08007f79 	.word	0x08007f79
 8007f54:	08007f81 	.word	0x08007f81
 8007f58:	08007f97 	.word	0x08007f97
 8007f5c:	08007f87 	.word	0x08007f87
 8007f60:	08007f97 	.word	0x08007f97
 8007f64:	08007f97 	.word	0x08007f97
 8007f68:	08007f97 	.word	0x08007f97
 8007f6c:	08007f8f 	.word	0x08007f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f70:	f7fe f8b6 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 8007f74:	61b8      	str	r0, [r7, #24]
        break;
 8007f76:	e013      	b.n	8007fa0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f78:	f7fe f8c6 	bl	8006108 <HAL_RCC_GetPCLK2Freq>
 8007f7c:	61b8      	str	r0, [r7, #24]
        break;
 8007f7e:	e00f      	b.n	8007fa0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f80:	4b4b      	ldr	r3, [pc, #300]	; (80080b0 <UART_SetConfig+0x4c0>)
 8007f82:	61bb      	str	r3, [r7, #24]
        break;
 8007f84:	e00c      	b.n	8007fa0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f86:	f7fd ffe9 	bl	8005f5c <HAL_RCC_GetSysClockFreq>
 8007f8a:	61b8      	str	r0, [r7, #24]
        break;
 8007f8c:	e008      	b.n	8007fa0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f92:	61bb      	str	r3, [r7, #24]
        break;
 8007f94:	e004      	b.n	8007fa0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	77bb      	strb	r3, [r7, #30]
        break;
 8007f9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d074      	beq.n	8008090 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	005a      	lsls	r2, r3, #1
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	085b      	lsrs	r3, r3, #1
 8007fb0:	441a      	add	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2b0f      	cmp	r3, #15
 8007fc2:	d916      	bls.n	8007ff2 <UART_SetConfig+0x402>
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fca:	d212      	bcs.n	8007ff2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	f023 030f 	bic.w	r3, r3, #15
 8007fd4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	085b      	lsrs	r3, r3, #1
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	f003 0307 	and.w	r3, r3, #7
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	89fb      	ldrh	r3, [r7, #14]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	89fa      	ldrh	r2, [r7, #14]
 8007fee:	60da      	str	r2, [r3, #12]
 8007ff0:	e04e      	b.n	8008090 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	77bb      	strb	r3, [r7, #30]
 8007ff6:	e04b      	b.n	8008090 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ff8:	7ffb      	ldrb	r3, [r7, #31]
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d827      	bhi.n	800804e <UART_SetConfig+0x45e>
 8007ffe:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <UART_SetConfig+0x414>)
 8008000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008004:	08008029 	.word	0x08008029
 8008008:	08008031 	.word	0x08008031
 800800c:	08008039 	.word	0x08008039
 8008010:	0800804f 	.word	0x0800804f
 8008014:	0800803f 	.word	0x0800803f
 8008018:	0800804f 	.word	0x0800804f
 800801c:	0800804f 	.word	0x0800804f
 8008020:	0800804f 	.word	0x0800804f
 8008024:	08008047 	.word	0x08008047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008028:	f7fe f85a 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 800802c:	61b8      	str	r0, [r7, #24]
        break;
 800802e:	e013      	b.n	8008058 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008030:	f7fe f86a 	bl	8006108 <HAL_RCC_GetPCLK2Freq>
 8008034:	61b8      	str	r0, [r7, #24]
        break;
 8008036:	e00f      	b.n	8008058 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008038:	4b1d      	ldr	r3, [pc, #116]	; (80080b0 <UART_SetConfig+0x4c0>)
 800803a:	61bb      	str	r3, [r7, #24]
        break;
 800803c:	e00c      	b.n	8008058 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800803e:	f7fd ff8d 	bl	8005f5c <HAL_RCC_GetSysClockFreq>
 8008042:	61b8      	str	r0, [r7, #24]
        break;
 8008044:	e008      	b.n	8008058 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800804a:	61bb      	str	r3, [r7, #24]
        break;
 800804c:	e004      	b.n	8008058 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	77bb      	strb	r3, [r7, #30]
        break;
 8008056:	bf00      	nop
    }

    if (pclk != 0U)
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d018      	beq.n	8008090 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	085a      	lsrs	r2, r3, #1
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	441a      	add	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008070:	b29b      	uxth	r3, r3
 8008072:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	2b0f      	cmp	r3, #15
 8008078:	d908      	bls.n	800808c <UART_SetConfig+0x49c>
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008080:	d204      	bcs.n	800808c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	60da      	str	r2, [r3, #12]
 800808a:	e001      	b.n	8008090 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800809c:	7fbb      	ldrb	r3, [r7, #30]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3720      	adds	r7, #32
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	40007c00 	.word	0x40007c00
 80080ac:	40023800 	.word	0x40023800
 80080b0:	00f42400 	.word	0x00f42400

080080b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00a      	beq.n	80080de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	f003 0304 	and.w	r3, r3, #4
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	f003 0308 	and.w	r3, r3, #8
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	f003 0310 	and.w	r3, r3, #16
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	f003 0320 	and.w	r3, r3, #32
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008190:	2b00      	cmp	r3, #0
 8008192:	d01a      	beq.n	80081ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081b2:	d10a      	bne.n	80081ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	605a      	str	r2, [r3, #4]
  }
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af02      	add	r7, sp, #8
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008208:	f7fa fda0 	bl	8002d4c <HAL_GetTick>
 800820c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0308 	and.w	r3, r3, #8
 8008218:	2b08      	cmp	r3, #8
 800821a:	d10e      	bne.n	800823a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800821c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f82d 	bl	800828a <UART_WaitOnFlagUntilTimeout>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e023      	b.n	8008282 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b04      	cmp	r3, #4
 8008246:	d10e      	bne.n	8008266 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f817 	bl	800828a <UART_WaitOnFlagUntilTimeout>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e00d      	b.n	8008282 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2220      	movs	r2, #32
 800826a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2220      	movs	r2, #32
 8008270:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	603b      	str	r3, [r7, #0]
 8008296:	4613      	mov	r3, r2
 8008298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800829a:	e05e      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a2:	d05a      	beq.n	800835a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082a4:	f7fa fd52 	bl	8002d4c <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d302      	bcc.n	80082ba <UART_WaitOnFlagUntilTimeout+0x30>
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d11b      	bne.n	80082f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80082c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 0201 	bic.w	r2, r2, #1
 80082d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2220      	movs	r2, #32
 80082de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2220      	movs	r2, #32
 80082e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e043      	b.n	800837a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d02c      	beq.n	800835a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800830a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800830e:	d124      	bne.n	800835a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008318:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008328:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689a      	ldr	r2, [r3, #8]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0201 	bic.w	r2, r2, #1
 8008338:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2220      	movs	r2, #32
 800833e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2220      	movs	r2, #32
 8008344:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2220      	movs	r2, #32
 800834a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e00f      	b.n	800837a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69da      	ldr	r2, [r3, #28]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4013      	ands	r3, r2
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	429a      	cmp	r2, r3
 8008368:	bf0c      	ite	eq
 800836a:	2301      	moveq	r3, #1
 800836c:	2300      	movne	r3, #0
 800836e:	b2db      	uxtb	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	429a      	cmp	r2, r3
 8008376:	d091      	beq.n	800829c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d027      	beq.n	80083ee <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	4b2f      	ldr	r3, [pc, #188]	; (8008464 <FMC_SDRAM_Init+0xe0>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80083b4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80083ba:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80083c0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80083c6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80083cc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80083d2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80083d8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80083de:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	e032      	b.n	8008454 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083fa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008404:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800840a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	4313      	orrs	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	4b12      	ldr	r3, [pc, #72]	; (8008464 <FMC_SDRAM_Init+0xe0>)
 800841c:	4013      	ands	r3, r2
 800841e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008428:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800842e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008434:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800843a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008440:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	4313      	orrs	r3, r2
 8008446:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	ffff8000 	.word	0xffff8000

08008468 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008468:	b480      	push	{r7}
 800846a:	b087      	sub	sp, #28
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d02e      	beq.n	80084e0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800848e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	3b01      	subs	r3, #1
 800849c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800849e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80084a8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80084b2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80084bc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80084c6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80084d0:	4313      	orrs	r3, r2
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	609a      	str	r2, [r3, #8]
 80084de:	e039      	b.n	8008554 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	4b1e      	ldr	r3, [pc, #120]	; (8008564 <FMC_SDRAM_Timing_Init+0xfc>)
 80084ea:	4013      	ands	r3, r2
 80084ec:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80084fe:	4313      	orrs	r3, r2
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	4313      	orrs	r3, r2
 8008504:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008512:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	3b01      	subs	r3, #1
 8008520:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008522:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	3b01      	subs	r3, #1
 800852a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800852c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	3b01      	subs	r3, #1
 8008534:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008536:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	3b01      	subs	r3, #1
 800853e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008540:	4313      	orrs	r3, r2
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	ff0f0fff 	.word	0xff0f0fff

08008568 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	691a      	ldr	r2, [r3, #16]
 8008578:	4b0c      	ldr	r3, [pc, #48]	; (80085ac <FMC_SDRAM_SendCommand+0x44>)
 800857a:	4013      	ands	r3, r2
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	6811      	ldr	r1, [r2, #0]
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	6852      	ldr	r2, [r2, #4]
 8008584:	4311      	orrs	r1, r2
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	6892      	ldr	r2, [r2, #8]
 800858a:	3a01      	subs	r2, #1
 800858c:	0152      	lsls	r2, r2, #5
 800858e:	4311      	orrs	r1, r2
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	68d2      	ldr	r2, [r2, #12]
 8008594:	0252      	lsls	r2, r2, #9
 8008596:	430a      	orrs	r2, r1
 8008598:	431a      	orrs	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	ffc00000 	.word	0xffc00000

080085b0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	695a      	ldr	r2, [r3, #20]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	431a      	orrs	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
	...

080085d8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80085d8:	b084      	sub	sp, #16
 80085da:	b480      	push	{r7}
 80085dc:	b085      	sub	sp, #20
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	f107 001c 	add.w	r0, r7, #28
 80085e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80085ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80085f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80085f2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80085f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80085fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80085fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008602:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	4b07      	ldr	r3, [pc, #28]	; (800862c <SDMMC_Init+0x54>)
 8008610:	4013      	ands	r3, r2
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	431a      	orrs	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	b004      	add	sp, #16
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	ffff8100 	.word	0xffff8100

08008630 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800863e:	4618      	mov	r0, r3
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800864a:	b580      	push	{r7, lr}
 800864c:	b082      	sub	sp, #8
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2203      	movs	r2, #3
 8008656:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008658:	2002      	movs	r0, #2
 800865a:	f7fa fb83 	bl	8002d64 <HAL_Delay>
  
  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER = (uint32_t)0x00000000;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0303 	and.w	r3, r3, #3
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80086be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80086c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80086ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68da      	ldr	r2, [r3, #12]
 80086d6:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <SDMMC_SendCommand+0x50>)
 80086d8:	4013      	ands	r3, r2
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	431a      	orrs	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	fffff000 	.word	0xfffff000

080086f4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	b2db      	uxtb	r3, r3
}
 8008702:	4618      	mov	r0, r3
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800870e:	b480      	push	{r7}
 8008710:	b085      	sub	sp, #20
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3314      	adds	r3, #20
 800871c:	461a      	mov	r2, r3
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	4413      	add	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
}  
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800875a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008760:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008766:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	431a      	orrs	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800877e:	2300      	movs	r3, #0

}
 8008780:	4618      	mov	r0, r3
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b088      	sub	sp, #32
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800879a:	2310      	movs	r3, #16
 800879c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800879e:	2340      	movs	r3, #64	; 0x40
 80087a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087ac:	f107 0308 	add.w	r3, r7, #8
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff ff74 	bl	80086a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80087b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087bc:	2110      	movs	r1, #16
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f97a 	bl	8008ab8 <SDMMC_GetCmdResp1>
 80087c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087c6:	69fb      	ldr	r3, [r7, #28]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3720      	adds	r7, #32
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08a      	sub	sp, #40	; 0x28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80087e0:	2307      	movs	r3, #7
 80087e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087e4:	2340      	movs	r3, #64	; 0x40
 80087e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087f2:	f107 0310 	add.w	r3, r7, #16
 80087f6:	4619      	mov	r1, r3
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f7ff ff51 	bl	80086a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80087fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008802:	2107      	movs	r1, #7
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 f957 	bl	8008ab8 <SDMMC_GetCmdResp1>
 800880a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800880e:	4618      	mov	r0, r3
 8008810:	3728      	adds	r7, #40	; 0x28
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b088      	sub	sp, #32
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008822:	2300      	movs	r3, #0
 8008824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008826:	2300      	movs	r3, #0
 8008828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800882a:	2300      	movs	r3, #0
 800882c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800882e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008832:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008834:	f107 0308 	add.w	r3, r7, #8
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff ff30 	bl	80086a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f90d 	bl	8008a60 <SDMMC_GetCmdError>
 8008846:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008848:	69fb      	ldr	r3, [r7, #28]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3720      	adds	r7, #32
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b088      	sub	sp, #32
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800885a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800885e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008860:	2308      	movs	r3, #8
 8008862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008868:	2300      	movs	r3, #0
 800886a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800886c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008870:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008872:	f107 0308 	add.w	r3, r7, #8
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff ff11 	bl	80086a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fb04 	bl	8008e8c <SDMMC_GetCmdResp7>
 8008884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008886:	69fb      	ldr	r3, [r7, #28]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3720      	adds	r7, #32
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b088      	sub	sp, #32
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800889e:	2337      	movs	r3, #55	; 0x37
 80088a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088a2:	2340      	movs	r3, #64	; 0x40
 80088a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088b0:	f107 0308 	add.w	r3, r7, #8
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff fef2 	bl	80086a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80088bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c0:	2137      	movs	r1, #55	; 0x37
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f8f8 	bl	8008ab8 <SDMMC_GetCmdResp1>
 80088c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088ca:	69fb      	ldr	r3, [r7, #28]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3720      	adds	r7, #32
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <SDMMC_CmdAppOperCommand+0x44>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80088e6:	2329      	movs	r3, #41	; 0x29
 80088e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088ea:	2340      	movs	r3, #64	; 0x40
 80088ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088ee:	2300      	movs	r3, #0
 80088f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088f8:	f107 0308 	add.w	r3, r7, #8
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7ff fece 	bl	80086a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fa0d 	bl	8008d24 <SDMMC_GetCmdResp3>
 800890a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800890c:	69fb      	ldr	r3, [r7, #28]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3720      	adds	r7, #32
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	80100000 	.word	0x80100000

0800891c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b088      	sub	sp, #32
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800892a:	2306      	movs	r3, #6
 800892c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800892e:	2340      	movs	r3, #64	; 0x40
 8008930:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008932:	2300      	movs	r3, #0
 8008934:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800893a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800893c:	f107 0308 	add.w	r3, r7, #8
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7ff feac 	bl	80086a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008948:	f241 3288 	movw	r2, #5000	; 0x1388
 800894c:	2106      	movs	r1, #6
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f8b2 	bl	8008ab8 <SDMMC_GetCmdResp1>
 8008954:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008956:	69fb      	ldr	r3, [r7, #28]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3720      	adds	r7, #32
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008968:	2300      	movs	r3, #0
 800896a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800896c:	2333      	movs	r3, #51	; 0x33
 800896e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008970:	2340      	movs	r3, #64	; 0x40
 8008972:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800897c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800897e:	f107 0308 	add.w	r3, r7, #8
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7ff fe8b 	bl	80086a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800898a:	f241 3288 	movw	r2, #5000	; 0x1388
 800898e:	2133      	movs	r1, #51	; 0x33
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f891 	bl	8008ab8 <SDMMC_GetCmdResp1>
 8008996:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008998:	69fb      	ldr	r3, [r7, #28]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3720      	adds	r7, #32
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b088      	sub	sp, #32
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80089ae:	2302      	movs	r3, #2
 80089b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80089b2:	23c0      	movs	r3, #192	; 0xc0
 80089b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089c0:	f107 0308 	add.w	r3, r7, #8
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff fe6a 	bl	80086a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f961 	bl	8008c94 <SDMMC_GetCmdResp2>
 80089d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089d4:	69fb      	ldr	r3, [r7, #28]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3720      	adds	r7, #32
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b088      	sub	sp, #32
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80089ec:	2309      	movs	r3, #9
 80089ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80089f0:	23c0      	movs	r3, #192	; 0xc0
 80089f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089f4:	2300      	movs	r3, #0
 80089f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089fe:	f107 0308 	add.w	r3, r7, #8
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff fe4b 	bl	80086a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f942 	bl	8008c94 <SDMMC_GetCmdResp2>
 8008a10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a12:	69fb      	ldr	r3, [r7, #28]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3720      	adds	r7, #32
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b088      	sub	sp, #32
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a2e:	2340      	movs	r3, #64	; 0x40
 8008a30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a32:	2300      	movs	r3, #0
 8008a34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a3c:	f107 0308 	add.w	r3, r7, #8
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7ff fe2c 	bl	80086a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	2103      	movs	r1, #3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f9a7 	bl	8008da0 <SDMMC_GetCmdResp6>
 8008a52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a54:	69fb      	ldr	r3, [r7, #28]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3720      	adds	r7, #32
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
	...

08008a60 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a68:	4b11      	ldr	r3, [pc, #68]	; (8008ab0 <SDMMC_GetCmdError+0x50>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a11      	ldr	r2, [pc, #68]	; (8008ab4 <SDMMC_GetCmdError+0x54>)
 8008a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a72:	0a5b      	lsrs	r3, r3, #9
 8008a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a78:	fb02 f303 	mul.w	r3, r2, r3
 8008a7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	1e5a      	subs	r2, r3, #1
 8008a82:	60fa      	str	r2, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d102      	bne.n	8008a8e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a8c:	e009      	b.n	8008aa2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0f1      	beq.n	8008a7e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	22c5      	movs	r2, #197	; 0xc5
 8008a9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	20000000 	.word	0x20000000
 8008ab4:	10624dd3 	.word	0x10624dd3

08008ab8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b088      	sub	sp, #32
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	607a      	str	r2, [r7, #4]
 8008ac4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008ac6:	4b70      	ldr	r3, [pc, #448]	; (8008c88 <SDMMC_GetCmdResp1+0x1d0>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a70      	ldr	r2, [pc, #448]	; (8008c8c <SDMMC_GetCmdResp1+0x1d4>)
 8008acc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad0:	0a5a      	lsrs	r2, r3, #9
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	fb02 f303 	mul.w	r3, r2, r3
 8008ad8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	1e5a      	subs	r2, r3, #1
 8008ade:	61fa      	str	r2, [r7, #28]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d102      	bne.n	8008aea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ae4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ae8:	e0c9      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aee:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0ef      	beq.n	8008ada <SDMMC_GetCmdResp1+0x22>
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1ea      	bne.n	8008ada <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d004      	beq.n	8008b1a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2204      	movs	r2, #4
 8008b14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b16:	2304      	movs	r3, #4
 8008b18:	e0b1      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d004      	beq.n	8008b30 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e0a6      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	22c5      	movs	r2, #197	; 0xc5
 8008b34:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f7ff fddc 	bl	80086f4 <SDMMC_GetCommandResponse>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	461a      	mov	r2, r3
 8008b40:	7afb      	ldrb	r3, [r7, #11]
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d001      	beq.n	8008b4a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e099      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f7ff fdde 	bl	800870e <SDMMC_GetResponse>
 8008b52:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	4b4e      	ldr	r3, [pc, #312]	; (8008c90 <SDMMC_GetCmdResp1+0x1d8>)
 8008b58:	4013      	ands	r3, r2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e08d      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	da02      	bge.n	8008b6e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008b68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b6c:	e087      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008b78:	2340      	movs	r3, #64	; 0x40
 8008b7a:	e080      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d001      	beq.n	8008b8a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008b86:	2380      	movs	r3, #128	; 0x80
 8008b88:	e079      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b98:	e071      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ba8:	e069      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bb8:	e061      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008bc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bc8:	e059      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bd8:	e051      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008be8:	e049      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008bf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008bf8:	e041      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c08:	e039      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d002      	beq.n	8008c1a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008c14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c18:	e031      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008c24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c28:	e029      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008c34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008c38:	e021      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008c44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c48:	e019      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008c54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008c58:	e011      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d002      	beq.n	8008c6a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008c64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008c68:	e009      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f003 0308 	and.w	r3, r3, #8
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008c74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008c78:	e001      	b.n	8008c7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3720      	adds	r7, #32
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20000000 	.word	0x20000000
 8008c8c:	10624dd3 	.word	0x10624dd3
 8008c90:	fdffe008 	.word	0xfdffe008

08008c94 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c9c:	4b1f      	ldr	r3, [pc, #124]	; (8008d1c <SDMMC_GetCmdResp2+0x88>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a1f      	ldr	r2, [pc, #124]	; (8008d20 <SDMMC_GetCmdResp2+0x8c>)
 8008ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca6:	0a5b      	lsrs	r3, r3, #9
 8008ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cac:	fb02 f303 	mul.w	r3, r2, r3
 8008cb0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	1e5a      	subs	r2, r3, #1
 8008cb6:	60fa      	str	r2, [r7, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d102      	bne.n	8008cc2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cc0:	e026      	b.n	8008d10 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0ef      	beq.n	8008cb2 <SDMMC_GetCmdResp2+0x1e>
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1ea      	bne.n	8008cb2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d004      	beq.n	8008cf2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2204      	movs	r2, #4
 8008cec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cee:	2304      	movs	r3, #4
 8008cf0:	e00e      	b.n	8008d10 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf6:	f003 0301 	and.w	r3, r3, #1
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d004      	beq.n	8008d08 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e003      	b.n	8008d10 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	22c5      	movs	r2, #197	; 0xc5
 8008d0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	20000000 	.word	0x20000000
 8008d20:	10624dd3 	.word	0x10624dd3

08008d24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d2c:	4b1a      	ldr	r3, [pc, #104]	; (8008d98 <SDMMC_GetCmdResp3+0x74>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a1a      	ldr	r2, [pc, #104]	; (8008d9c <SDMMC_GetCmdResp3+0x78>)
 8008d32:	fba2 2303 	umull	r2, r3, r2, r3
 8008d36:	0a5b      	lsrs	r3, r3, #9
 8008d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d3c:	fb02 f303 	mul.w	r3, r2, r3
 8008d40:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	1e5a      	subs	r2, r3, #1
 8008d46:	60fa      	str	r2, [r7, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d102      	bne.n	8008d52 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d50:	e01b      	b.n	8008d8a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d56:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0ef      	beq.n	8008d42 <SDMMC_GetCmdResp3+0x1e>
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1ea      	bne.n	8008d42 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d004      	beq.n	8008d82 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2204      	movs	r2, #4
 8008d7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d7e:	2304      	movs	r3, #4
 8008d80:	e003      	b.n	8008d8a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	22c5      	movs	r2, #197	; 0xc5
 8008d86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	20000000 	.word	0x20000000
 8008d9c:	10624dd3 	.word	0x10624dd3

08008da0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	460b      	mov	r3, r1
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008dae:	4b35      	ldr	r3, [pc, #212]	; (8008e84 <SDMMC_GetCmdResp6+0xe4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a35      	ldr	r2, [pc, #212]	; (8008e88 <SDMMC_GetCmdResp6+0xe8>)
 8008db4:	fba2 2303 	umull	r2, r3, r2, r3
 8008db8:	0a5b      	lsrs	r3, r3, #9
 8008dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dbe:	fb02 f303 	mul.w	r3, r2, r3
 8008dc2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	1e5a      	subs	r2, r3, #1
 8008dc8:	61fa      	str	r2, [r7, #28]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d102      	bne.n	8008dd4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008dce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008dd2:	e052      	b.n	8008e7a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d0ef      	beq.n	8008dc4 <SDMMC_GetCmdResp6+0x24>
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1ea      	bne.n	8008dc4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df2:	f003 0304 	and.w	r3, r3, #4
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d004      	beq.n	8008e04 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e00:	2304      	movs	r3, #4
 8008e02:	e03a      	b.n	8008e7a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d004      	beq.n	8008e1a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2201      	movs	r2, #1
 8008e14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e02f      	b.n	8008e7a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f7ff fc6a 	bl	80086f4 <SDMMC_GetCommandResponse>
 8008e20:	4603      	mov	r3, r0
 8008e22:	461a      	mov	r2, r3
 8008e24:	7afb      	ldrb	r3, [r7, #11]
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d001      	beq.n	8008e2e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e025      	b.n	8008e7a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	22c5      	movs	r2, #197	; 0xc5
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008e34:	2100      	movs	r1, #0
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f7ff fc69 	bl	800870e <SDMMC_GetResponse>
 8008e3c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d106      	bne.n	8008e56 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	0c1b      	lsrs	r3, r3, #16
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008e52:	2300      	movs	r3, #0
 8008e54:	e011      	b.n	8008e7a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e64:	e009      	b.n	8008e7a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e74:	e001      	b.n	8008e7a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3720      	adds	r7, #32
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20000000 	.word	0x20000000
 8008e88:	10624dd3 	.word	0x10624dd3

08008e8c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e94:	4b22      	ldr	r3, [pc, #136]	; (8008f20 <SDMMC_GetCmdResp7+0x94>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a22      	ldr	r2, [pc, #136]	; (8008f24 <SDMMC_GetCmdResp7+0x98>)
 8008e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9e:	0a5b      	lsrs	r3, r3, #9
 8008ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ea4:	fb02 f303 	mul.w	r3, r2, r3
 8008ea8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	1e5a      	subs	r2, r3, #1
 8008eae:	60fa      	str	r2, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d102      	bne.n	8008eba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008eb8:	e02c      	b.n	8008f14 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ebe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0ef      	beq.n	8008eaa <SDMMC_GetCmdResp7+0x1e>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1ea      	bne.n	8008eaa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed8:	f003 0304 	and.w	r3, r3, #4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2204      	movs	r2, #4
 8008ee4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ee6:	2304      	movs	r3, #4
 8008ee8:	e014      	b.n	8008f14 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d004      	beq.n	8008f00 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e009      	b.n	8008f14 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d002      	beq.n	8008f12 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2240      	movs	r2, #64	; 0x40
 8008f10:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008f12:	2300      	movs	r3, #0
  
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	20000000 	.word	0x20000000
 8008f24:	10624dd3 	.word	0x10624dd3

08008f28 <_ZN10QAD_FT62068imp_initEP7QAD_I2C>:
	//---------------------------------
	//QAD_FT6206 Initialization Methods

//QAD_FT6206::imp_init
//QAD_FT6206 Initialization Method
QA_Result QAD_FT6206::imp_init(QAD_I2C* cI2C) {
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]

	//Store Handle to I2C Driver
	if (!cI2C)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <_ZN10QAD_FT62068imp_initEP7QAD_I2C+0x14>
		return QA_Fail;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e016      	b.n	8008f6a <_ZN10QAD_FT62068imp_initEP7QAD_I2C+0x42>

	m_cI2C = cI2C;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	611a      	str	r2, [r3, #16]

	//Initialize FT6206 device
	if (imp_confirmAddress())
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f815 	bl	8008f72 <_ZN10QAD_FT620618imp_confirmAddressEv>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	bf14      	ite	ne
 8008f4e:	2301      	movne	r3, #1
 8008f50:	2300      	moveq	r3, #0
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <_ZN10QAD_FT62068imp_initEP7QAD_I2C+0x34>
		return QA_Fail;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e006      	b.n	8008f6a <_ZN10QAD_FT62068imp_initEP7QAD_I2C+0x42>

	//Clear Data
	imp_clearData();
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f841 	bl	8008fe4 <_ZN10QAD_FT620613imp_clearDataEv>

	//Set Driver States
	m_eInitState = QA_Initialized;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	751a      	strb	r2, [r3, #20]

	//Return
	return QA_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <_ZN10QAD_FT620618imp_confirmAddressEv>:
	//-----------------------
	//QAD_FT6206 Tool Methods

//QAD_FT6206::imp_confirmAddress
//QAD_FT6206 Tool Method
QA_Result QAD_FT6206::imp_confirmAddress(void) {
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
	uint8_t uResA = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73fb      	strb	r3, [r7, #15]
	uint8_t uResB = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	73bb      	strb	r3, [r7, #14]
	m_cI2C->read8Bit(m_uAddrA, m_uReg_ID, &uResA);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6918      	ldr	r0, [r3, #16]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	b299      	uxth	r1, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	789a      	ldrb	r2, [r3, #2]
 8008f90:	f107 030f 	add.w	r3, r7, #15
 8008f94:	f000 fbc4 	bl	8009720 <_ZN7QAD_I2C8read8BitEthPh>
	m_cI2C->read8Bit(m_uAddrB, m_uReg_ID, &uResB);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6918      	ldr	r0, [r3, #16]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	785b      	ldrb	r3, [r3, #1]
 8008fa0:	b299      	uxth	r1, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	789a      	ldrb	r2, [r3, #2]
 8008fa6:	f107 030e 	add.w	r3, r7, #14
 8008faa:	f000 fbb9 	bl	8009720 <_ZN7QAD_I2C8read8BitEthPh>

	if (uResA == m_uID) {
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	79da      	ldrb	r2, [r3, #7]
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d104      	bne.n	8008fc2 <_ZN10QAD_FT620618imp_confirmAddressEv+0x50>
		m_uAddr = m_uAddrA;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	781a      	ldrb	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	755a      	strb	r2, [r3, #21]
 8008fc0:	e00b      	b.n	8008fda <_ZN10QAD_FT620618imp_confirmAddressEv+0x68>
	} else if (uResB == m_uID) {
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	79da      	ldrb	r2, [r3, #7]
 8008fc6:	7bbb      	ldrb	r3, [r7, #14]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d104      	bne.n	8008fd6 <_ZN10QAD_FT620618imp_confirmAddressEv+0x64>
		m_uAddr = m_uAddrB;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	785a      	ldrb	r2, [r3, #1]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	755a      	strb	r2, [r3, #21]
 8008fd4:	e001      	b.n	8008fda <_ZN10QAD_FT620618imp_confirmAddressEv+0x68>
	} else {
		return QA_Fail;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e000      	b.n	8008fdc <_ZN10QAD_FT620618imp_confirmAddressEv+0x6a>
	}

	return QA_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <_ZN10QAD_FT620613imp_clearDataEv>:


//QAD_FT6206::imp_clearData
//QAD_FT6206 Tool Method
void QAD_FT6206::imp_clearData(void) {
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  m_uData_CurDown     = false;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	759a      	strb	r2, [r3, #22]
  m_uData_LastDown    = false;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	75da      	strb	r2, [r3, #23]
  m_uData_Event       = false;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	761a      	strb	r2, [r3, #24]
  m_uData_New         = false;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	765a      	strb	r2, [r3, #25]
  m_uData_End         = false;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	769a      	strb	r2, [r3, #26]
  m_uData_Long        = false;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	76da      	strb	r2, [r3, #27]
  m_uData_Long_Pulse  = 0;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	771a      	strb	r2, [r3, #28]
  m_uData_Long_Count  = 0;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	621a      	str	r2, [r3, #32]

  m_uData_CurX        = 0;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	849a      	strh	r2, [r3, #36]	; 0x24
  m_uData_CurY        = 0;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	84da      	strh	r2, [r3, #38]	; 0x26
  m_uData_LastX       = 0;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	851a      	strh	r2, [r3, #40]	; 0x28
  m_uData_LastY       = 0;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	855a      	strh	r2, [r3, #42]	; 0x2a
  m_iData_MoveX       = 0;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	859a      	strh	r2, [r3, #44]	; 0x2c
  m_iData_MoveY       = 0;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	85da      	strh	r2, [r3, #46]	; 0x2e
  m_uData_StartX      = 0;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	861a      	strh	r2, [r3, #48]	; 0x30
  m_uData_StartY      = 0;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	865a      	strh	r2, [r3, #50]	; 0x32
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <_ZN7QAD_FMC8imp_initEv>:
//QAD_FMC Initialization Method
//
//To be called from static method init()
//Used to initialize the required GPIOs, FMC driver and SDRAM module
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAD_FMC::imp_init() {
 8009058:	b580      	push	{r7, lr}
 800905a:	b094      	sub	sp, #80	; 0x50
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]

	//Return if FMC driver is already initialized
	if (m_eState)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <_ZN7QAD_FMC8imp_initEv+0x16>
		return QA_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	e0fc      	b.n	8009268 <_ZN7QAD_FMC8imp_initEv+0x210>


	//----------------
	//Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 800906e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]
 8009076:	605a      	str	r2, [r3, #4]
 8009078:	609a      	str	r2, [r3, #8]
 800907a:	60da      	str	r2, [r3, #12]
 800907c:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set pins as alternate function in push-pull mode
 800907e:	2302      	movs	r3, #2
 8009080:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistors on pins
 8009082:	2301      	movs	r3, #1
 8009084:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set pin speed to very high
 8009086:	2303      	movs	r3, #3
 8009088:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_Init.Alternate = GPIO_AF12_FMC;              //Set alternate function to suit use with FMC peripheral
 800908a:	230c      	movs	r3, #12
 800908c:	64fb      	str	r3, [r7, #76]	; 0x4c

	  //Initialize required pins from GPIO port D
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 800908e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_Init);
 8009094:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009098:	4619      	mov	r1, r3
 800909a:	4875      	ldr	r0, [pc, #468]	; (8009270 <_ZN7QAD_FMC8imp_initEv+0x218>)
 800909c:	f7fa fce6 	bl	8003a6c <HAL_GPIO_Init>

		//Initialize required pins from GPIO port E
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80090a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 80090a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80090aa:	4619      	mov	r1, r3
 80090ac:	4871      	ldr	r0, [pc, #452]	; (8009274 <_ZN7QAD_FMC8imp_initEv+0x21c>)
 80090ae:	f7fa fcdd 	bl	8003a6c <HAL_GPIO_Init>

		//Initialize required pins from GPIO port F
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80090b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_Init);
 80090b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80090bc:	4619      	mov	r1, r3
 80090be:	486e      	ldr	r0, [pc, #440]	; (8009278 <_ZN7QAD_FMC8imp_initEv+0x220>)
 80090c0:	f7fa fcd4 	bl	8003a6c <HAL_GPIO_Init>

		//Initialize required pins from GPIO port G
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 80090c4:	f248 1337 	movw	r3, #33079	; 0x8137
 80090c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_Init);
 80090ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80090ce:	4619      	mov	r1, r3
 80090d0:	486a      	ldr	r0, [pc, #424]	; (800927c <_ZN7QAD_FMC8imp_initEv+0x224>)
 80090d2:	f7fa fccb 	bl	8003a6c <HAL_GPIO_Init>

		//Initialize required pins from GPIO port H
	GPIO_Init.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80090d6:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80090da:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_Init);
 80090dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80090e0:	4619      	mov	r1, r3
 80090e2:	4867      	ldr	r0, [pc, #412]	; (8009280 <_ZN7QAD_FMC8imp_initEv+0x228>)
 80090e4:	f7fa fcc2 	bl	8003a6c <HAL_GPIO_Init>

		//Initialize required pins from GPIO port I
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
 80090e8:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_Init);
 80090ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80090f2:	4619      	mov	r1, r3
 80090f4:	4863      	ldr	r0, [pc, #396]	; (8009284 <_ZN7QAD_FMC8imp_initEv+0x22c>)
 80090f6:	f7fa fcb9 	bl	8003a6c <HAL_GPIO_Init>

	//-------------------------
	//Initialize FMC Peripheral

	//Initialize FMC Clock
	__HAL_RCC_FMC_CLK_ENABLE();
 80090fa:	4b63      	ldr	r3, [pc, #396]	; (8009288 <_ZN7QAD_FMC8imp_initEv+0x230>)
 80090fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fe:	4a62      	ldr	r2, [pc, #392]	; (8009288 <_ZN7QAD_FMC8imp_initEv+0x230>)
 8009100:	f043 0301 	orr.w	r3, r3, #1
 8009104:	6393      	str	r3, [r2, #56]	; 0x38
 8009106:	4b60      	ldr	r3, [pc, #384]	; (8009288 <_ZN7QAD_FMC8imp_initEv+0x230>)
 8009108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]

	//Fill FMC initialization details into Handle structure
	//NOTE: The settings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	m_sHandle.Instance                = FMC_SDRAM_DEVICE;                     //Set FMC SDRAM Device as required instance
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a5d      	ldr	r2, [pc, #372]	; (800928c <_ZN7QAD_FMC8imp_initEv+0x234>)
 8009116:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.SDBank             = FMC_SDRAM_BANK1;                      //Set SDRAM as being connected to FMCs SDRAM bank 1
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	639a      	str	r2, [r3, #56]	; 0x38
	m_sHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;          //Set size of column address to 8 bits
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	63da      	str	r2, [r3, #60]	; 0x3c
	m_sHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;            //Set size of row address to 12 bits
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2204      	movs	r2, #4
 8009128:	641a      	str	r2, [r3, #64]	; 0x40
	m_sHandle.Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;           //Set data bus width to 32 bits
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2220      	movs	r2, #32
 800912e:	645a      	str	r2, [r3, #68]	; 0x44
	m_sHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;         //Set number of SDRAM module internal banks to 4
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2240      	movs	r2, #64	; 0x40
 8009134:	649a      	str	r2, [r3, #72]	; 0x48
	m_sHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;              //Set column address strobe (CAS) latency to 3 cycles
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800913c:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;   //Disable write protection, as we want to be able to both read and write to SDRAM
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	651a      	str	r2, [r3, #80]	; 0x50
	m_sHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;             //Set SDRAM clock period to 2 clock cycles
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800914a:	655a      	str	r2, [r3, #84]	; 0x54
	m_sHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;              //Enable read burst
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009152:	659a      	str	r2, [r3, #88]	; 0x58
	m_sHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;              //Set read pipe delay to 0 clock cycles
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	65da      	str	r2, [r3, #92]	; 0x5c

	//Fill SDRAM timing details into timing structure
	//NOTE: The timings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	FMC_SDRAM_TimingTypeDef SDRAM_Timing = {0};
 800915a:	f107 0320 	add.w	r3, r7, #32
 800915e:	2200      	movs	r2, #0
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	605a      	str	r2, [r3, #4]
 8009164:	609a      	str	r2, [r3, #8]
 8009166:	60da      	str	r2, [r3, #12]
 8009168:	611a      	str	r2, [r3, #16]
 800916a:	615a      	str	r2, [r3, #20]
 800916c:	619a      	str	r2, [r3, #24]
	SDRAM_Timing.LoadToActiveDelay    = 2;  //Set delay between a Load Mode Register command and an Active or Refresh command to 2 clock cycles
 800916e:	2302      	movs	r3, #2
 8009170:	623b      	str	r3, [r7, #32]
	SDRAM_Timing.ExitSelfRefreshDelay = 7;  //Set delay between releasing Self Refresh command and issuing of Active command to 7 clock cycles
 8009172:	2307      	movs	r3, #7
 8009174:	627b      	str	r3, [r7, #36]	; 0x24
	SDRAM_Timing.SelfRefreshTime      = 4;  //Set minimum Self Refresh period to 4 clock cycles
 8009176:	2304      	movs	r3, #4
 8009178:	62bb      	str	r3, [r7, #40]	; 0x28
	SDRAM_Timing.RowCycleDelay        = 7;  //Set delay between Refresh command and Activate command, or between consecutive Refresh commands to 7 clock cycles
 800917a:	2307      	movs	r3, #7
 800917c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SDRAM_Timing.WriteRecoveryTime    = 2;  //Set Write Recovery Time to 2 clock cycles
 800917e:	2302      	movs	r3, #2
 8009180:	633b      	str	r3, [r7, #48]	; 0x30
	SDRAM_Timing.RPDelay              = 2;  //Set delay between a Precharge command and any other command to 2 clock cycles
 8009182:	2302      	movs	r3, #2
 8009184:	637b      	str	r3, [r7, #52]	; 0x34
	SDRAM_Timing.RCDDelay             = 2;  //Set delay between an Activate command and a Read/Write command to 2 clock cycles
 8009186:	2302      	movs	r3, #2
 8009188:	63bb      	str	r3, [r7, #56]	; 0x38

	//Initialize the FMC peripheral using the required settings and timings to suit the specific SDRAM module
	if (HAL_SDRAM_Init(&m_sHandle, &SDRAM_Timing) != HAL_OK) {
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	3334      	adds	r3, #52	; 0x34
 800918e:	f107 0220 	add.w	r2, r7, #32
 8009192:	4611      	mov	r1, r2
 8009194:	4618      	mov	r0, r3
 8009196:	f7fe fc07 	bl	80079a8 <HAL_SDRAM_Init>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	bf14      	ite	ne
 80091a0:	2301      	movne	r3, #1
 80091a2:	2300      	moveq	r3, #0
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <_ZN7QAD_FMC8imp_initEv+0x156>
		return QA_Fail;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e05c      	b.n	8009268 <_ZN7QAD_FMC8imp_initEv+0x210>
	}

  //-------------------
	//Initialize SDRAM IC

	FMC_SDRAM_CommandTypeDef  SDRAM_Cmd = {0};
 80091ae:	f107 0310 	add.w	r3, r7, #16
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	605a      	str	r2, [r3, #4]
 80091b8:	609a      	str	r2, [r3, #8]
 80091ba:	60da      	str	r2, [r3, #12]

		//Send command to SDRAM module to enable its clock
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;   //Set to Clock Enable Command
 80091bc:	2301      	movs	r3, #1
 80091be:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80091c0:	2310      	movs	r3, #16
 80091c2:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 80091c4:	2301      	movs	r3, #1
 80091c6:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 80091cc:	f107 0310 	add.w	r3, r7, #16
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f890 	bl	80092f8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Delay for 1ms to allow time for SDRAM clock to enable
	HAL_Delay(1);
 80091d8:	2001      	movs	r0, #1
 80091da:	f7f9 fdc3 	bl	8002d64 <HAL_Delay>

		//Send command to SDRAM module to precharge all banks
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_PALL;  //Set to Precharge All command
 80091de:	2302      	movs	r3, #2
 80091e0:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80091e2:	2310      	movs	r3, #16
 80091e4:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 80091e6:	2301      	movs	r3, #1
 80091e8:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 80091ee:	f107 0310 	add.w	r3, r7, #16
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f87f 	bl	80092f8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Send command to SDRAM module to Configure Auto Refresh
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; //Set to Auto Refresh Mode command
 80091fa:	2303      	movs	r3, #3
 80091fc:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80091fe:	2310      	movs	r3, #16
 8009200:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 8;                              //Set number of consecutive auto refresh commands to 8
 8009202:	2308      	movs	r3, #8
 8009204:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8009206:	2300      	movs	r3, #0
 8009208:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 800920a:	f107 0310 	add.w	r3, r7, #16
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f871 	bl	80092f8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Program Mode Register
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;        //Set to Load Mode Register command
 8009216:	2304      	movs	r3, #4
 8009218:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800921a:	2310      	movs	r3, #16
 800921c:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 800921e:	2301      	movs	r3, #1
 8009220:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681a      	ldr	r2, [r3, #0]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	691b      	ldr	r3, [r3, #16]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 800922a:	431a      	orrs	r2, r3
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	69db      	ldr	r3, [r3, #28]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 8009230:	431a      	orrs	r2, r3
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a1b      	ldr	r3, [r3, #32]
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 8009236:	431a      	orrs	r2, r3
																		 m_uModeReg_WriteBurst_Single;   //Set write burst length to 1 32bit word
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 800923c:	4313      	orrs	r3, r2
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 800923e:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8009240:	f107 0310 	add.w	r3, r7, #16
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f856 	bl	80092f8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>


	//---------------------------------
	//Program SDRAM module refresh rate
	HAL_SDRAM_ProgramRefreshRate(&m_sHandle, m_uRefresh);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009256:	4619      	mov	r1, r3
 8009258:	4610      	mov	r0, r2
 800925a:	f7fe fc0e 	bl	8007a7a <HAL_SDRAM_ProgramRefreshRate>

	//Set Driver State
	m_eState = QA_Initialized; //Set driver as being initializeed
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	//Return
	return QA_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3750      	adds	r7, #80	; 0x50
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	40020c00 	.word	0x40020c00
 8009274:	40021000 	.word	0x40021000
 8009278:	40021400 	.word	0x40021400
 800927c:	40021800 	.word	0x40021800
 8009280:	40021c00 	.word	0x40021c00
 8009284:	40022000 	.word	0x40022000
 8009288:	40023800 	.word	0x40023800
 800928c:	a0000140 	.word	0xa0000140

08009290 <_ZN7QAD_FMC8imp_testEv>:
//QAD_FMC::imp_test
//QAD_FMC Test Method
//
//Used to perform read and write test of full 16 megabytes of SDRAM
//Returns QA_OK if test passes, or QA_Fail if test is not successful
QA_Result QAD_FMC::imp_test(void) {
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]

	//Write values to whole 16 megabytes of SDRAM
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092a2:	d209      	bcs.n	80092b8 <_ZN7QAD_FMC8imp_testEv+0x28>
		QAD_FMC_Data->words[i] = i;
 80092a4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]
 80092b6:	e7f1      	b.n	800929c <_ZN7QAD_FMC8imp_testEv+0xc>
	}

	//Read values from while 16 megabytes of SDRAM, and confirm that they match the values that were written to it
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 80092b8:	2300      	movs	r3, #0
 80092ba:	60bb      	str	r3, [r7, #8]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092c2:	d212      	bcs.n	80092ea <_ZN7QAD_FMC8imp_testEv+0x5a>

		//If data read doesn't match data written then return QA_Fail
		if (QAD_FMC_Data->words[i] != i)
 80092c4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	bf14      	ite	ne
 80092d4:	2301      	movne	r3, #1
 80092d6:	2300      	moveq	r3, #0
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <_ZN7QAD_FMC8imp_testEv+0x52>
			return QA_Fail;
 80092de:	2301      	movs	r3, #1
 80092e0:	e004      	b.n	80092ec <_ZN7QAD_FMC8imp_testEv+0x5c>
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	3301      	adds	r3, #1
 80092e6:	60bb      	str	r3, [r7, #8]
 80092e8:	e7e8      	b.n	80092bc <_ZN7QAD_FMC8imp_testEv+0x2c>
	}

	//Return QA_OK as if we reach this point then the test has passed
	return QA_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>:
//QAD_FMC::cmd
//QAD_FMC Initialization Method
//
//Used to send commands to SDRAM module
//pCmd - FMC_SDRAM_CommandTypeDef containing details of command to be sent to SDRAM module
void QAD_FMC::cmd(FMC_SDRAM_CommandTypeDef& pCmd) {
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
	HAL_SDRAM_SendCommand(&m_sHandle, &pCmd, m_uTimeout);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930c:	461a      	mov	r2, r3
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	f7fe fb88 	bl	8007a24 <HAL_SDRAM_SendCommand>
}
 8009314:	bf00      	nop
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	4613      	mov	r3, r2
 8009328:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	88fa      	ldrh	r2, [r7, #6]
 8009334:	809a      	strh	r2, [r3, #4]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	719a      	strb	r2, [r3, #6]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	609a      	str	r2, [r3, #8]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	60da      	str	r2, [r3, #12]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f000 f841 	bl	80093d6 <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 800935e:	b580      	push	{r7, lr}
 8009360:	b082      	sub	sp, #8
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6818      	ldr	r0, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	889b      	ldrh	r3, [r3, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	4619      	mov	r1, r3
 8009372:	f7fa fe4b 	bl	800400c <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	741a      	strb	r2, [r3, #16]
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6818      	ldr	r0, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	889b      	ldrh	r3, [r3, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	4619      	mov	r1, r3
 8009398:	f7fa fe38 	bl	800400c <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	741a      	strb	r2, [r3, #16]
}
 80093a2:	bf00      	nop
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	7c1b      	ldrb	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d005      	beq.n	80093c6 <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d107      	bne.n	80093ce <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7ff ffe0 	bl	8009384 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 80093c4:	e003      	b.n	80093ce <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff ffc9 	bl	800935e <_ZN15QAD_GPIO_Output2onEv>
	    break;
 80093cc:	bf00      	nop
	}
}
 80093ce:	bf00      	nop
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b088      	sub	sp, #32
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 80093de:	f107 030c 	add.w	r3, r7, #12
 80093e2:	2200      	movs	r2, #0
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	605a      	str	r2, [r3, #4]
 80093e8:	609a      	str	r2, [r3, #8]
 80093ea:	60da      	str	r2, [r3, #12]
 80093ec:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	889b      	ldrh	r3, [r3, #4]
 80093f2:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	799b      	ldrb	r3, [r3, #6]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 80093fc:	2311      	movs	r3, #17
 80093fe:	e000      	b.n	8009402 <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8009400:	2301      	movs	r3, #1
 8009402:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f107 020c 	add.w	r2, r7, #12
 8009418:	4611      	mov	r1, r2
 800941a:	4618      	mov	r0, r3
 800941c:	f7fa fb26 	bl	8003a6c <HAL_GPIO_Init>
}
 8009420:	bf00      	nop
 8009422:	3720      	adds	r7, #32
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Input Constructor
//
//This method will initialize the required GPIO pin with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Input::QAD_GPIO_Input(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	4613      	mov	r3, r2
 8009434:	80fb      	strh	r3, [r7, #6]
		m_pGPIO(pGPIO),
		m_uPin(uPin),
		m_ePullMode(QAD_GPIO_PullMode_NoPull) {
 8009436:	4a0a      	ldr	r2, [pc, #40]	; (8009460 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft+0x38>)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	605a      	str	r2, [r3, #4]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	88fa      	ldrh	r2, [r7, #6]
 8009446:	811a      	strh	r2, [r3, #8]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	60da      	str	r2, [r3, #12]

	//Initialize the GPIO pin
	periphInit();
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f817 	bl	8009482 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	0800e7d0 	.word	0x0800e7d0

08009464 <_ZN14QAD_GPIO_Input11setPullModeE17QAD_GPIO_PullMode>:
//QAD_GPIO_Input::setPullMode
//QAD_GPIO_Input Control Method
//
//Sets new pull mode (Pull-up, Pull-down or No-pull)
//ePull - New pull mode. Member of QAD_GPIO_PullMode as defined in QAD_GPIO.hpp
void QAD_GPIO_Input::setPullMode(QAD_GPIO_PullMode ePull) {
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]

	//Store new Pull mode setting
	m_ePullMode = ePull;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	60da      	str	r2, [r3, #12]

	//Reinitialize peripheral with new Pull mode
	periphInit();
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f804 	bl	8009482 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <_ZN14QAD_GPIO_Input10periphInitEv>:
//QAD_GPIO_Input::periphInit
//QAD_GPIO_Input Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Input::periphInit(void) {
 8009482:	b580      	push	{r7, lr}
 8009484:	b088      	sub	sp, #32
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_Init = {0};
 800948a:	f107 030c 	add.w	r3, r7, #12
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	605a      	str	r2, [r3, #4]
 8009494:	609a      	str	r2, [r3, #8]
 8009496:	60da      	str	r2, [r3, #12]
 8009498:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	891b      	ldrh	r3, [r3, #8]
 800949e:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = GPIO_MODE_INPUT;
 80094a0:	2300      	movs	r3, #0
 80094a2:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 80094aa:	2300      	movs	r3, #0
 80094ac:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	f107 020c 	add.w	r2, r7, #12
 80094b6:	4611      	mov	r1, r2
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fa fad7 	bl	8003a6c <HAL_GPIO_Init>
}
 80094be:	bf00      	nop
 80094c0:	3720      	adds	r7, #32
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <_ZN10QAD_I2CMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_I2CMgr& get(void) {
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0
		static QAD_I2CMgr instance;
 80094cc:	4b10      	ldr	r3, [pc, #64]	; (8009510 <_ZN10QAD_I2CMgr3getEv+0x48>)
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	f3bf 8f5b 	dmb	ish
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	bf0c      	ite	eq
 80094de:	2301      	moveq	r3, #1
 80094e0:	2300      	movne	r3, #0
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d010      	beq.n	800950a <_ZN10QAD_I2CMgr3getEv+0x42>
 80094e8:	4809      	ldr	r0, [pc, #36]	; (8009510 <_ZN10QAD_I2CMgr3getEv+0x48>)
 80094ea:	f004 f8fa 	bl	800d6e2 <__cxa_guard_acquire>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	bf14      	ite	ne
 80094f4:	2301      	movne	r3, #1
 80094f6:	2300      	moveq	r3, #0
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d005      	beq.n	800950a <_ZN10QAD_I2CMgr3getEv+0x42>
 80094fe:	4805      	ldr	r0, [pc, #20]	; (8009514 <_ZN10QAD_I2CMgr3getEv+0x4c>)
 8009500:	f002 f950 	bl	800b7a4 <_ZN10QAD_I2CMgrC1Ev>
 8009504:	4802      	ldr	r0, [pc, #8]	; (8009510 <_ZN10QAD_I2CMgr3getEv+0x48>)
 8009506:	f004 f8f8 	bl	800d6fa <__cxa_guard_release>
		return instance;
 800950a:	4b02      	ldr	r3, [pc, #8]	; (8009514 <_ZN10QAD_I2CMgr3getEv+0x4c>)
	}
 800950c:	4618      	mov	r0, r3
 800950e:	bd80      	pop	{r7, pc}
 8009510:	20000338 	.word	0x20000338
 8009514:	20000308 	.word	0x20000308

08009518 <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_I2C_PeriphState enum) of a I2C peripheral
	//eI2C - The I2C peripheral to retrieve the state for. Member of QAD_I2C_Periph
	//Returns a member of QAD_I2C_State enum (QAD_I2C_Unused, etc)
	static QAD_I2C_State getState(QAD_I2C_Periph eI2C) {
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	4603      	mov	r3, r0
 8009520:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	2b03      	cmp	r3, #3
 8009526:	d901      	bls.n	800952c <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph+0x14>
			return QAD_I2C_InvalidDevice;
 8009528:	2304      	movs	r3, #4
 800952a:	e00a      	b.n	8009542 <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph+0x2a>

		return get().m_sI2Cs[eI2C].eState;
 800952c:	f7ff ffcc 	bl	80094c8 <_ZN10QAD_I2CMgr3getEv>
 8009530:	4601      	mov	r1, r0
 8009532:	79fa      	ldrb	r2, [r7, #7]
 8009534:	4613      	mov	r3, r2
 8009536:	005b      	lsls	r3, r3, #1
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	3301      	adds	r3, #1
 8009540:	781b      	ldrb	r3, [r3, #0]
	}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph>:


	//Used to retrieve an instance for an I2C peripheral
	//eI2C - The I2C peripheral to retrieve the instance for. Member of QAD_I2C_Periph
	//Returns I2C_TypeDef, as defined in stm32f769xx.h
	static I2C_TypeDef* getInstance(QAD_I2C_Periph eI2C) {
 800954a:	b580      	push	{r7, lr}
 800954c:	b082      	sub	sp, #8
 800954e:	af00      	add	r7, sp, #0
 8009550:	4603      	mov	r3, r0
 8009552:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	2b03      	cmp	r3, #3
 8009558:	d901      	bls.n	800955e <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph+0x14>
			return NULL;
 800955a:	2300      	movs	r3, #0
 800955c:	e00a      	b.n	8009574 <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph+0x2a>

		return get().m_sI2Cs[eI2C].pInstance;
 800955e:	f7ff ffb3 	bl	80094c8 <_ZN10QAD_I2CMgr3getEv>
 8009562:	4601      	mov	r1, r0
 8009564:	79fa      	ldrb	r2, [r7, #7]
 8009566:	4613      	mov	r3, r2
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	440b      	add	r3, r1
 8009570:	3304      	adds	r3, #4
 8009572:	681b      	ldr	r3, [r3, #0]
	}
 8009574:	4618      	mov	r0, r3
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>:


	//Used to retrieve an Event IRQ Enum for an I2C peripheral
	//eI2C - The I2C peripheral to retrieve the IRQ enum for. Member of QAD_I2C_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQEvent(QAD_I2C_Periph eI2C) {
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	4603      	mov	r3, r0
 8009584:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 8009586:	79fb      	ldrb	r3, [r7, #7]
 8009588:	2b03      	cmp	r3, #3
 800958a:	d902      	bls.n	8009592 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph+0x16>
			return UsageFault_IRQn;
 800958c:	f06f 0309 	mvn.w	r3, #9
 8009590:	e00b      	b.n	80095aa <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph+0x2e>

		return get().m_sI2Cs[eI2C].eIRQ_Event;
 8009592:	f7ff ff99 	bl	80094c8 <_ZN10QAD_I2CMgr3getEv>
 8009596:	4601      	mov	r1, r0
 8009598:	79fa      	ldrb	r2, [r7, #7]
 800959a:	4613      	mov	r3, r2
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	4413      	add	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	440b      	add	r3, r1
 80095a4:	3308      	adds	r3, #8
 80095a6:	f993 3000 	ldrsb.w	r3, [r3]
	}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>:


	//Used to retrieve an Error IRQ Enum for an I2C peripheral
	//eI2C - The I2C peripheral to retrieve the IRQ enum for. Member of QAD_I2C_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQError(QAD_I2C_Periph eI2C) {
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	4603      	mov	r3, r0
 80095ba:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d902      	bls.n	80095c8 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph+0x16>
			return UsageFault_IRQn;
 80095c2:	f06f 0309 	mvn.w	r3, #9
 80095c6:	e00b      	b.n	80095e0 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph+0x2e>

		return get().m_sI2Cs[eI2C].eIRQ_Error;
 80095c8:	f7ff ff7e 	bl	80094c8 <_ZN10QAD_I2CMgr3getEv>
 80095cc:	4601      	mov	r1, r0
 80095ce:	79fa      	ldrb	r2, [r7, #7]
 80095d0:	4613      	mov	r3, r2
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	4413      	add	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	440b      	add	r3, r1
 80095da:	3309      	adds	r3, #9
 80095dc:	f993 3000 	ldrsb.w	r3, [r3]
	}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <_ZN10QAD_I2CMgr11registerI2CE14QAD_I2C_Periph13QAD_I2C_State>:
	//Management Methods

	//Used to register an I2C peripheral as being used by a driver
	//eI2C - the I2C peripheral to be registered
	//Returns QA_OK if successful, or returns QA_Error_PeriphBusy if the selected I2C is already in use
	static QA_Result registerI2C(QAD_I2C_Periph eI2C, QAD_I2C_State eMode) {
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	460a      	mov	r2, r1
 80095f2:	71fb      	strb	r3, [r7, #7]
 80095f4:	4613      	mov	r3, r2
 80095f6:	71bb      	strb	r3, [r7, #6]
		return get().imp_registerI2C(eI2C, eMode);
 80095f8:	f7ff ff66 	bl	80094c8 <_ZN10QAD_I2CMgr3getEv>
 80095fc:	79ba      	ldrb	r2, [r7, #6]
 80095fe:	79fb      	ldrb	r3, [r7, #7]
 8009600:	4619      	mov	r1, r3
 8009602:	f002 f92b 	bl	800b85c <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State>
 8009606:	4603      	mov	r3, r0
	}
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <_ZN10QAD_I2CMgr13deregisterI2CE14QAD_I2C_Periph>:


	//Used to deregister an I2C to mark it as no longer being used by a driver
	//eI2C - the I2C Peripheral to be deregistered
	static void deregisterI2C(QAD_I2C_Periph eI2C) {
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterI2C(eI2C);
 800961a:	f7ff ff55 	bl	80094c8 <_ZN10QAD_I2CMgr3getEv>
 800961e:	4602      	mov	r2, r0
 8009620:	79fb      	ldrb	r3, [r7, #7]
 8009622:	4619      	mov	r1, r3
 8009624:	4610      	mov	r0, r2
 8009626:	f002 f944 	bl	800b8b2 <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph>
	}
 800962a:	bf00      	nop
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <_ZN10QAD_I2CMgr11enableClockE14QAD_I2C_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific I2C peripheral
	//eI2C - the I2C peripheral to enable the clock for
	static void enableClock(QAD_I2C_Periph eI2C) {
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	4603      	mov	r3, r0
 800963a:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eI2C);
 800963c:	f7ff ff44 	bl	80094c8 <_ZN10QAD_I2CMgr3getEv>
 8009640:	4602      	mov	r2, r0
 8009642:	79fb      	ldrb	r3, [r7, #7]
 8009644:	4619      	mov	r1, r3
 8009646:	4610      	mov	r0, r2
 8009648:	f002 f94e 	bl	800b8e8 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph>
	}
 800964c:	bf00      	nop
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <_ZN10QAD_I2CMgr12disableClockE14QAD_I2C_Periph>:

	//Used to disable the clock for a specific I2C peripheral
	//eI2C - the I2C peripheral to disable the clock for
	static void disableClock(QAD_I2C_Periph eI2C) {
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	4603      	mov	r3, r0
 800965c:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eI2C);
 800965e:	f7ff ff33 	bl	80094c8 <_ZN10QAD_I2CMgr3getEv>
 8009662:	4602      	mov	r2, r0
 8009664:	79fb      	ldrb	r3, [r7, #7]
 8009666:	4619      	mov	r1, r3
 8009668:	4610      	mov	r0, r2
 800966a:	f002 f9c1 	bl	800b9f0 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph>
	}
 800966e:	bf00      	nop
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <_ZN7QAD_I2C4initEv>:
//QAD_I2C::init
//QAD_I2C Initialization Method
//
//Used to initialize the I2C driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result aas defined in setup.hpp)
QA_Result QAD_I2C::init(void) {
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]

	//Check if selected I2C peripheral is currently available
  if (QAD_I2CMgr::getState(m_eI2C))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	799b      	ldrb	r3, [r3, #6]
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff ff48 	bl	8009518 <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	bf14      	ite	ne
 800968e:	2301      	movne	r3, #1
 8009690:	2300      	moveq	r3, #0
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <_ZN7QAD_I2C4initEv+0x26>
  	return QA_Error_PeriphBusy;
 8009698:	2302      	movs	r3, #2
 800969a:	e013      	b.n	80096c4 <_ZN7QAD_I2C4initEv+0x4e>

  //Register I2C peripheral as now being in use
  QAD_I2CMgr::registerI2C(m_eI2C, QAD_I2C_InUse_Master);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	799b      	ldrb	r3, [r3, #6]
 80096a0:	2101      	movs	r1, #1
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7ff ffa0 	bl	80095e8 <_ZN10QAD_I2CMgr11registerI2CE14QAD_I2C_Periph13QAD_I2C_State>

  //Initialize I2C peripheral
  QA_Result eRes = periphInit();
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f855 	bl	8009758 <_ZN7QAD_I2C10periphInitEv>
 80096ae:	4603      	mov	r3, r0
 80096b0:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister I2C peripheral
  if (eRes)
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d004      	beq.n	80096c2 <_ZN7QAD_I2C4initEv+0x4c>
  	QAD_I2CMgr::deregisterI2C(m_eI2C);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	799b      	ldrb	r3, [r3, #6]
 80096bc:	4618      	mov	r0, r3
 80096be:	f7ff ffa7 	bl	8009610 <_ZN10QAD_I2CMgr13deregisterI2CE14QAD_I2C_Periph>

  //Return initialization result
  return eRes;
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <_ZN7QAD_I2C5startEv>:

//QAD_I2C::start
//QAD_I2C Control Method
//
//Used to enable the I2C driver
void QAD_I2C::start(void) {
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  __HAL_I2C_ENABLE(&m_sHandle);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096de:	f042 0201 	orr.w	r2, r2, #1
 80096e2:	601a      	str	r2, [r3, #0]
  m_eState = QA_Active;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	715a      	strb	r2, [r3, #5]
}
 80096ea:	bf00      	nop
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <_ZN7QAD_I2C4stopEv>:

//QAD_I2C::stop
//QAD_I2C Control Method
//
//Used to disable the I2C driver
void QAD_I2C::stop(void) {
 80096f6:	b480      	push	{r7}
 80096f8:	b083      	sub	sp, #12
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  __HAL_I2C_DISABLE(&m_sHandle);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009708:	f022 0201 	bic.w	r2, r2, #1
 800970c:	601a      	str	r2, [r3, #0]
  m_eState = QA_Inactive;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	715a      	strb	r2, [r3, #5]
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <_ZN7QAD_I2C8read8BitEthPh>:
//Used to read a value from an I2C device connected to the bus, using an 8bit register address and 8bit data
//uAddr  - The address of the I2C device to read from
//uReg   - The register address to access on the I2C device that is being read from
//pValue - A pointer to a uint8_t where the read data will be stored
//Returns QA_OK if successful, or QA_Fail if unable to perform read
QA_Result QAD_I2C::read8Bit(uint16_t uAddr, uint8_t uReg, uint8_t* pValue) {
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af02      	add	r7, sp, #8
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	607b      	str	r3, [r7, #4]
 800972a:	460b      	mov	r3, r1
 800972c:	817b      	strh	r3, [r7, #10]
 800972e:	4613      	mov	r3, r2
 8009730:	727b      	strb	r3, [r7, #9]
  return read(uAddr, (uint16_t)uReg, m_uMemAddrSize8Bit, pValue, 1);
 8009732:	7a7b      	ldrb	r3, [r7, #9]
 8009734:	b29a      	uxth	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	789b      	ldrb	r3, [r3, #2]
 800973a:	b298      	uxth	r0, r3
 800973c:	8979      	ldrh	r1, [r7, #10]
 800973e:	2301      	movs	r3, #1
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	4603      	mov	r3, r0
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 f8f2 	bl	8009932 <_ZN7QAD_I2C4readEtttPht>
 800974e:	4603      	mov	r3, r0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <_ZN7QAD_I2C10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the I2C peripheral itself as well as setting interrupt priorities and enabling the interrupts
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_I2C::periphInit(void) {
 8009758:	b580      	push	{r7, lr}
 800975a:	b088      	sub	sp, #32
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init = {0};
 8009760:	f107 030c 	add.w	r3, r7, #12
 8009764:	2200      	movs	r2, #0
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	605a      	str	r2, [r3, #4]
 800976a:	609a      	str	r2, [r3, #8]
 800976c:	60da      	str	r2, [r3, #12]
 800976e:	611a      	str	r2, [r3, #16]

  //Init SCK GPIO Pin
  GPIO_Init.Pin       = m_uSCL_Pin;                //Set pin number
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009774:	60fb      	str	r3, [r7, #12]
  GPIO_Init.Mode      = GPIO_MODE_AF_OD;           //Set clock pin as alternate function in open-drain mode
 8009776:	2312      	movs	r3, #18
 8009778:	613b      	str	r3, [r7, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;               //Enable pull-up resistor on pin
 800977a:	2301      	movs	r3, #1
 800977c:	617b      	str	r3, [r7, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH; //Set GPIO pin speed
 800977e:	2303      	movs	r3, #3
 8009780:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Alternate = m_uSCL_AF;                 //Set alternate function to suit required I2C peripheral
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8009788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(m_pSCL_GPIO, &GPIO_Init);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	f107 020c 	add.w	r2, r7, #12
 8009792:	4611      	mov	r1, r2
 8009794:	4618      	mov	r0, r3
 8009796:	f7fa f969 	bl	8003a6c <HAL_GPIO_Init>

  //Init SDA GPIO Pin
  GPIO_Init.Pin       = m_uSDA_Pin;                //Set pin number
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800979e:	60fb      	str	r3, [r7, #12]
  GPIO_Init.Mode      = GPIO_MODE_AF_OD;           //Set clock pin as alternate function in open-drain mode
 80097a0:	2312      	movs	r3, #18
 80097a2:	613b      	str	r3, [r7, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;               //Enable pull-up resistor on pin
 80097a4:	2301      	movs	r3, #1
 80097a6:	617b      	str	r3, [r7, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH; //Set GPIO pin speed
 80097a8:	2303      	movs	r3, #3
 80097aa:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Alternate = m_uSDA_AF;                 //Set alternate function to suit required I2C peripheral
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80097b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(m_pSDA_GPIO, &GPIO_Init);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b8:	f107 020c 	add.w	r2, r7, #12
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fa f954 	bl	8003a6c <HAL_GPIO_Init>


  //Enable I2C Clock
  QAD_I2CMgr::enableClock(m_eI2C);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	799b      	ldrb	r3, [r3, #6]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff ff32 	bl	8009632 <_ZN10QAD_I2CMgr11enableClockE14QAD_I2C_Periph>


  //Initialize I2C Peripheral
  m_sHandle.Instance             = QAD_I2CMgr::getInstance(m_eI2C);  //Set instance for required I2C peripheral
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	799b      	ldrb	r3, [r3, #6]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7ff feb9 	bl	800954a <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph>
 80097d8:	4602      	mov	r2, r0
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	639a      	str	r2, [r3, #56]	; 0x38
  m_sHandle.Init.Timing          = m_uTiming;                        //Set selected clock speed
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68da      	ldr	r2, [r3, #12]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	63da      	str	r2, [r3, #60]	; 0x3c
  m_sHandle.Init.AddressingMode  = m_eAddressingMode;                //Set selected addressing mode
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691a      	ldr	r2, [r3, #16]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	645a      	str	r2, [r3, #68]	; 0x44
  m_sHandle.Init.DualAddressMode = m_eDualAddressingMode;            //Set whether dual addressing mode is being used
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	695a      	ldr	r2, [r3, #20]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	649a      	str	r2, [r3, #72]	; 0x48
  m_sHandle.Init.GeneralCallMode = m_eGeneralCallMode;               //Set whether general call addressing mode is being used
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	699a      	ldr	r2, [r3, #24]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	655a      	str	r2, [r3, #84]	; 0x54
  m_sHandle.Init.NoStretchMode   = m_eNoStretchMode;                 //Set whether clock stretching is currently disabled
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	69da      	ldr	r2, [r3, #28]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	659a      	str	r2, [r3, #88]	; 0x58
  m_sHandle.Init.OwnAddress1     = m_uOwnAddress1;                   //Set primary peripheral I2C address
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	8c1b      	ldrh	r3, [r3, #32]
 800980a:	461a      	mov	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	641a      	str	r2, [r3, #64]	; 0x40
  m_sHandle.Init.OwnAddress2     = m_uOwnAddress2;                   //Set secondary peripheral I2C address
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009814:	461a      	mov	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_I2C_Init(&m_sHandle) != HAL_OK) {
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3338      	adds	r3, #56	; 0x38
 800981e:	4618      	mov	r0, r3
 8009820:	f7fa fc0e 	bl	8004040 <HAL_I2C_Init>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	bf14      	ite	ne
 800982a:	2301      	movne	r3, #1
 800982c:	2300      	moveq	r3, #0
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	d005      	beq.n	8009840 <_ZN7QAD_I2C10periphInitEv+0xe8>
  	periphDeinit(DeinitPartial);
 8009834:	2100      	movs	r1, #0
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f839 	bl	80098ae <_ZN7QAD_I2C12periphDeinitENS_10DeinitModeE>
  	return QA_Fail;
 800983c:	2301      	movs	r3, #1
 800983e:	e032      	b.n	80098a6 <_ZN7QAD_I2C10periphInitEv+0x14e>
  }


  //Enable I2C Interrupt priorties and enable IRQs
  HAL_NVIC_SetPriority(QAD_I2CMgr::getIRQEvent(m_eI2C), m_uIRQPriority_Event, 0x0);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	799b      	ldrb	r3, [r3, #6]
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff fe99 	bl	800957c <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>
 800984a:	4603      	mov	r3, r0
 800984c:	4618      	mov	r0, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	79db      	ldrb	r3, [r3, #7]
 8009852:	2200      	movs	r2, #0
 8009854:	4619      	mov	r1, r3
 8009856:	f7f9 fba8 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QAD_I2CMgr::getIRQEvent(m_eI2C));
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	799b      	ldrb	r3, [r3, #6]
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff fe8c 	bl	800957c <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>
 8009864:	4603      	mov	r3, r0
 8009866:	4618      	mov	r0, r3
 8009868:	f7f9 fbbb 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(QAD_I2CMgr::getIRQError(m_eI2C), m_uIRQPriority_Error, 0x0);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	799b      	ldrb	r3, [r3, #6]
 8009870:	4618      	mov	r0, r3
 8009872:	f7ff fe9e 	bl	80095b2 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>
 8009876:	4603      	mov	r3, r0
 8009878:	4618      	mov	r0, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7a1b      	ldrb	r3, [r3, #8]
 800987e:	2200      	movs	r2, #0
 8009880:	4619      	mov	r1, r3
 8009882:	f7f9 fb92 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QAD_I2CMgr::getIRQError(m_eI2C));
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	799b      	ldrb	r3, [r3, #6]
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff fe91 	bl	80095b2 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>
 8009890:	4603      	mov	r3, r0
 8009892:	4618      	mov	r0, r3
 8009894:	f7f9 fba5 	bl	8002fe2 <HAL_NVIC_EnableIRQ>


  //Set Driver States
  m_eInitState = QA_Initialized; //Set driver state as initialized
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	711a      	strb	r2, [r3, #4]
  m_eState     = QA_Inactive;    //Set driver as currently inactive
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	715a      	strb	r2, [r3, #5]


  //Return
  return QA_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3720      	adds	r7, #32
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <_ZN7QAD_I2C12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling interrupts
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed).
//              Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_I2C::periphDeinit(DeinitMode eDeinitMode) {
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b082      	sub	sp, #8
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 80098ba:	78fb      	ldrb	r3, [r7, #3]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d019      	beq.n	80098f4 <_ZN7QAD_I2C12periphDeinitENS_10DeinitModeE+0x46>

		//Deactivate the peripheral
		stop();
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff ff18 	bl	80096f6 <_ZN7QAD_I2C4stopEv>

		//Disable the interrupts
		HAL_NVIC_DisableIRQ(QAD_I2CMgr::getIRQError(m_eI2C));
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	799b      	ldrb	r3, [r3, #6]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7ff fe71 	bl	80095b2 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>
 80098d0:	4603      	mov	r3, r0
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7f9 fb93 	bl	8002ffe <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(QAD_I2CMgr::getIRQEvent(m_eI2C));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	799b      	ldrb	r3, [r3, #6]
 80098dc:	4618      	mov	r0, r3
 80098de:	f7ff fe4d 	bl	800957c <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>
 80098e2:	4603      	mov	r3, r0
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7f9 fb8a 	bl	8002ffe <HAL_NVIC_DisableIRQ>

		//Deinitialize the peripheral
		HAL_I2C_DeInit(&m_sHandle);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3338      	adds	r3, #56	; 0x38
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fa fc36 	bl	8004160 <HAL_I2C_DeInit>
	}

	//Disable peripheral clock
	QAD_I2CMgr::disableClock(m_eI2C);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	799b      	ldrb	r3, [r3, #6]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7ff feab 	bl	8009654 <_ZN10QAD_I2CMgr12disableClockE14QAD_I2C_Periph>

	//Deinitialize GPIOs
	HAL_GPIO_DeInit(m_pSCL_GPIO, m_uSCL_Pin);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009906:	4619      	mov	r1, r3
 8009908:	4610      	mov	r0, r2
 800990a:	f7fa fa5b 	bl	8003dc4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pSDA_GPIO, m_uSDA_Pin);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009916:	4619      	mov	r1, r3
 8009918:	4610      	mov	r0, r2
 800991a:	f7fa fa53 	bl	8003dc4 <HAL_GPIO_DeInit>

  //Set Driver States
	m_eState     = QA_Inactive;       //Set driver as being inactive
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	715a      	strb	r2, [r3, #5]
	m_eInitState = QA_NotInitialized; //Set driver as not being initialized
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	711a      	strb	r2, [r3, #4]

}
 800992a:	bf00      	nop
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <_ZN7QAD_I2C4readEtttPht>:
//uReg        - The register address to access on the I2C device that is being read from
//uMemAddress - The number of bytes in size of the register/memory address
//pData       - A pointer to an array of bytes to contain the data to be read
//uLength     - The number of bytes to be read
//Returns QA_OK if successful, or QA_Fail if unable to perform read
QA_Result QAD_I2C::read(uint16_t uAddr, uint16_t uReg, uint16_t uMemAddress, uint8_t* pData, uint16_t uLength) {
 8009932:	b590      	push	{r4, r7, lr}
 8009934:	b089      	sub	sp, #36	; 0x24
 8009936:	af04      	add	r7, sp, #16
 8009938:	60f8      	str	r0, [r7, #12]
 800993a:	4608      	mov	r0, r1
 800993c:	4611      	mov	r1, r2
 800993e:	461a      	mov	r2, r3
 8009940:	4603      	mov	r3, r0
 8009942:	817b      	strh	r3, [r7, #10]
 8009944:	460b      	mov	r3, r1
 8009946:	813b      	strh	r3, [r7, #8]
 8009948:	4613      	mov	r3, r2
 800994a:	80fb      	strh	r3, [r7, #6]
  if (HAL_I2C_Mem_Read(&m_sHandle, uAddr, (uint16_t)uReg, uMemAddress, pData, uLength, m_uTimeout) != HAL_OK)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	88fc      	ldrh	r4, [r7, #6]
 8009958:	893a      	ldrh	r2, [r7, #8]
 800995a:	8979      	ldrh	r1, [r7, #10]
 800995c:	9302      	str	r3, [sp, #8]
 800995e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	4623      	mov	r3, r4
 8009968:	f7fa fc3e 	bl	80041e8 <HAL_I2C_Mem_Read>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	bf14      	ite	ne
 8009972:	2301      	movne	r3, #1
 8009974:	2300      	moveq	r3, #0
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <_ZN7QAD_I2C4readEtttPht+0x4e>
  	return QA_Fail;
 800997c:	2301      	movs	r3, #1
 800997e:	e000      	b.n	8009982 <_ZN7QAD_I2C4readEtttPht+0x50>

  return QA_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	bd90      	pop	{r4, r7, pc}

0800998a <_ZN8QAD_LTDCC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_LTDC() :
 800998a:	b480      	push	{r7}
 800998c:	b083      	sub	sp, #12
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized) {}
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	701a      	strb	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f646 3225 	movw	r2, #27429	; 0x6b25
 800999e:	605a      	str	r2, [r3, #4]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f24f 4224 	movw	r2, #62500	; 0xf424
 80099a6:	609a      	str	r2, [r3, #8]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f643 5209 	movw	r2, #15625	; 0x3d09
 80099ae:	60da      	str	r2, [r3, #12]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4618      	mov	r0, r3
 80099b4:	370c      	adds	r7, #12
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
	...

080099c0 <_ZN8QAD_LTDC3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_LTDC& get(void) {
 80099c0:	b580      	push	{r7, lr}
 80099c2:	af00      	add	r7, sp, #0
		static QAD_LTDC instance;
 80099c4:	4b10      	ldr	r3, [pc, #64]	; (8009a08 <_ZN8QAD_LTDC3getEv+0x48>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f3bf 8f5b 	dmb	ish
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	bf0c      	ite	eq
 80099d6:	2301      	moveq	r3, #1
 80099d8:	2300      	movne	r3, #0
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d010      	beq.n	8009a02 <_ZN8QAD_LTDC3getEv+0x42>
 80099e0:	4809      	ldr	r0, [pc, #36]	; (8009a08 <_ZN8QAD_LTDC3getEv+0x48>)
 80099e2:	f003 fe7e 	bl	800d6e2 <__cxa_guard_acquire>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	bf14      	ite	ne
 80099ec:	2301      	movne	r3, #1
 80099ee:	2300      	moveq	r3, #0
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d005      	beq.n	8009a02 <_ZN8QAD_LTDC3getEv+0x42>
 80099f6:	4805      	ldr	r0, [pc, #20]	; (8009a0c <_ZN8QAD_LTDC3getEv+0x4c>)
 80099f8:	f7ff ffc7 	bl	800998a <_ZN8QAD_LTDCC1Ev>
 80099fc:	4802      	ldr	r0, [pc, #8]	; (8009a08 <_ZN8QAD_LTDC3getEv+0x48>)
 80099fe:	f003 fe7c 	bl	800d6fa <__cxa_guard_release>
		return instance;
 8009a02:	4b02      	ldr	r3, [pc, #8]	; (8009a0c <_ZN8QAD_LTDC3getEv+0x4c>)
	}
 8009a04:	4618      	mov	r0, r3
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	20000488 	.word	0x20000488
 8009a0c:	2000033c 	.word	0x2000033c

08009a10 <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>:
	//Communication Methods

	//Used to allow OTM8009A driver (in otm8009a.h file) to communicate with OTM8009A display controller via DSI
	//uNumParams - The number of parameters being supplied
	//pParams    - Pointer to the list of parameters to be supplied
	static void dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
		get().imp_dsi_IO_WriteCmd(uNumParams, pParams);
 8009a1a:	f7ff ffd1 	bl	80099c0 <_ZN8QAD_LTDC3getEv>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	6879      	ldr	r1, [r7, #4]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 faeb 	bl	800a000 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>
	}
 8009a2a:	bf00      	nop
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
	...

08009a34 <_ZN8QAD_LTDC8imp_initEv>:
//QAD_LTDC Initialization Method
//
//To be called from static method init()
//Used to initialize the DSI and LTDC peripherals, LTDC layers, the OTM8009A display controller and the required reset and backlight control GPIO pins
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails.
QA_Result QAD_LTDC::imp_init(void) {
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b0a2      	sub	sp, #136	; 0x88
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]

  //Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 8009a3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009a40:	2200      	movs	r2, #0
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	605a      	str	r2, [r3, #4]
 8009a46:	609a      	str	r2, [r3, #8]
 8009a48:	60da      	str	r2, [r3, #12]
 8009a4a:	611a      	str	r2, [r3, #16]

	  //Initialize Backlight Control Pin
	GPIO_Init.Pin    = QAD_LTDC_BACKLIGHT_PIN;          //Set pin number. (QAD_LTDC_BACKLIGHT_PIN is defined in setup.hpp)
 8009a4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009a50:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 8009a52:	2301      	movs	r3, #1
 8009a54:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLDOWN;                   //Enable pull-down resistor so backlight defaults to off
 8009a56:	2302      	movs	r3, #2
 8009a58:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_BACKLIGHT_PORT, &GPIO_Init); //Initialize pin. (QAD_LTDC_BACKLIGHT_PORT is defined in setup.hpp)
 8009a5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009a62:	4619      	mov	r1, r3
 8009a64:	4897      	ldr	r0, [pc, #604]	; (8009cc4 <_ZN8QAD_LTDC8imp_initEv+0x290>)
 8009a66:	f7fa f801 	bl	8003a6c <HAL_GPIO_Init>

		//Initialize OTM8009A Controller Reset Pin
	GPIO_Init.Pin    = QAD_LTDC_RESET_PIN;              //Set pin number. (QAD_LTDC_RESET_PIN is defined in setup.hpp)
 8009a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a6e:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 8009a70:	2301      	movs	r3, #1
 8009a72:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLUP;                     //Enable pull-up resistor as reset is active-low
 8009a74:	2301      	movs	r3, #1
 8009a76:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 8009a78:	2300      	movs	r3, #0
 8009a7a:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_RESET_PORT, &GPIO_Init);     //Initialize pin. (QAD_LTDC_RESET_PORT is defined in setup.hpp)
 8009a7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009a80:	4619      	mov	r1, r3
 8009a82:	4891      	ldr	r0, [pc, #580]	; (8009cc8 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8009a84:	f7f9 fff2 	bl	8003a6c <HAL_GPIO_Init>


	//Reset OTM8009A Controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET); //Pull reset pin low
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a8e:	488e      	ldr	r0, [pc, #568]	; (8009cc8 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8009a90:	f7fa fabc 	bl	800400c <HAL_GPIO_WritePin>
	HAL_Delay(20);                                                              //Delay for 20ms to allow for reset process
 8009a94:	2014      	movs	r0, #20
 8009a96:	f7f9 f965 	bl	8002d64 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);   //Pull reset pin high
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009aa0:	4889      	ldr	r0, [pc, #548]	; (8009cc8 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8009aa2:	f7fa fab3 	bl	800400c <HAL_GPIO_WritePin>
	HAL_Delay(10);                                                              //Delay for 10ms to allow reset process time to complete
 8009aa6:	200a      	movs	r0, #10
 8009aa8:	f7f9 f95c 	bl	8002d64 <HAL_Delay>


	//Initialize LTDC Peripheral Clock
	__HAL_RCC_LTDC_CLK_ENABLE();
 8009aac:	4b87      	ldr	r3, [pc, #540]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab0:	4a86      	ldr	r2, [pc, #536]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ab6:	6453      	str	r3, [r2, #68]	; 0x44
 8009ab8:	4b84      	ldr	r3, [pc, #528]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ac0:	613b      	str	r3, [r7, #16]
 8009ac2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_LTDC_FORCE_RESET();
 8009ac4:	4b81      	ldr	r3, [pc, #516]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	4a80      	ldr	r2, [pc, #512]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009aca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ace:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_LTDC_RELEASE_RESET();
 8009ad0:	4b7e      	ldr	r3, [pc, #504]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad4:	4a7d      	ldr	r2, [pc, #500]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009ad6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ada:	6253      	str	r3, [r2, #36]	; 0x24

	//Initialize DSI Peripheral Clock
	__HAL_RCC_DSI_CLK_ENABLE();
 8009adc:	4b7b      	ldr	r3, [pc, #492]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae0:	4a7a      	ldr	r2, [pc, #488]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009ae2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ae6:	6453      	str	r3, [r2, #68]	; 0x44
 8009ae8:	4b78      	ldr	r3, [pc, #480]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009af0:	60fb      	str	r3, [r7, #12]
 8009af2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DSI_FORCE_RESET();
 8009af4:	4b75      	ldr	r3, [pc, #468]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af8:	4a74      	ldr	r2, [pc, #464]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009afa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009afe:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_DSI_RELEASE_RESET();
 8009b00:	4b72      	ldr	r3, [pc, #456]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	4a71      	ldr	r2, [pc, #452]	; (8009ccc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8009b06:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8009b0a:	6253      	str	r3, [r2, #36]	; 0x24

	//Prepare Instances for DSI and LTDC handles (required if needing to call imp_deinit() due to failed initialization)
  m_sDSIHandle.Instance = DSI;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a70      	ldr	r2, [pc, #448]	; (8009cd0 <_ZN8QAD_LTDC8imp_initEv+0x29c>)
 8009b10:	611a      	str	r2, [r3, #16]
  m_sLTDCHandle.Instance = LTDC;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a6f      	ldr	r2, [pc, #444]	; (8009cd4 <_ZN8QAD_LTDC8imp_initEv+0x2a0>)
 8009b16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  //-------------------------
  //Initialize DSI peripheral

  //Confirm DSI is currently uninitialized
  HAL_DSI_DeInit(&m_sDSIHandle);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3310      	adds	r3, #16
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7f9 fbea 	bl	80032f8 <HAL_DSI_DeInit>

  //Fill out DSI PLL Initialization structure as required for DSI to operate at required clock speed
  DSI_PLLInitTypeDef DSI_PLLInit = {0};
 8009b24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	605a      	str	r2, [r3, #4]
 8009b2e:	609a      	str	r2, [r3, #8]
  DSI_PLLInit.PLLNDIV = 100;
 8009b30:	2364      	movs	r3, #100	; 0x64
 8009b32:	64bb      	str	r3, [r7, #72]	; 0x48
  DSI_PLLInit.PLLIDF  = DSI_PLL_IN_DIV5;
 8009b34:	2305      	movs	r3, #5
 8009b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  DSI_PLLInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	653b      	str	r3, [r7, #80]	; 0x50

  //Fill out required DSI initialization details
  m_sDSIHandle.Init.NumberOfLanes = DSI_TWO_DATA_LANES;                   //Set DSI as using two data lanes
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	61da      	str	r2, [r3, #28]
  m_sDSIHandle.Init.TXEscapeCkdiv = m_uLCDLaneByteClk / m_uLCDClkDivisor; //Set TX Escape Clock Division
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	689a      	ldr	r2, [r3, #8]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	619a      	str	r2, [r3, #24]

  //Initialize DSI, calling imp_deinit() if initialization fails
  if (HAL_DSI_Init(&m_sDSIHandle, &DSI_PLLInit) != HAL_OK) {
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3310      	adds	r3, #16
 8009b56:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7f9 fab1 	bl	80030c4 <HAL_DSI_Init>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	bf14      	ite	ne
 8009b68:	2301      	movne	r3, #1
 8009b6a:	2300      	moveq	r3, #0
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d004      	beq.n	8009b7c <_ZN8QAD_LTDC8imp_initEv+0x148>
  	imp_deinit();
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f9e4 	bl	8009f40 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e1db      	b.n	8009f34 <_ZN8QAD_LTDC8imp_initEv+0x500>

  //----------------------------------
  //Initialize DSI video configuration

  //Generate base DSI timing parameters
  uint32_t HACT = QAD_LTDC_WIDTH;    //Horizontal Active period in pixels
 8009b7c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t VACT = QAD_LTDC_HEIGHT;   //Vertical Active period in pixels
 8009b84:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009b88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t VSA  = 12;                //Period that vertical sync is active in pixels
 8009b8c:	230c      	movs	r3, #12
 8009b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t VBP  = 12;                //Vertical Back Porch in pixels
 8009b90:	230c      	movs	r3, #12
 8009b92:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t VFP  = 12;                //Vertical Front Porch in pixels
 8009b94:	230c      	movs	r3, #12
 8009b96:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t HSA  = 63;                //Period that horizontal sync is active in pixels
 8009b98:	233f      	movs	r3, #63	; 0x3f
 8009b9a:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t HBP  = 120;               //Horizontal Back Porch in pixels
 8009b9c:	2378      	movs	r3, #120	; 0x78
 8009b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t HFP  = 120;               //Horizontal Front Porch in pixels
 8009ba0:	2378      	movs	r3, #120	; 0x78
 8009ba2:	66bb      	str	r3, [r7, #104]	; 0x68

  //Fill out details of DSI Configuration Handle
  m_sDSICfgHandle.VirtualChannelID             = 0;                                      //Set virtual channel ID
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  m_sDSICfgHandle.ColorCoding                  = DSI_RGB888;                             //Set pixel format to 24bit RGB (8bits for each Red, Green and Blue)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2205      	movs	r2, #5
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30
  m_sDSICfgHandle.VSPolarity                   = DSI_VSYNC_ACTIVE_HIGH;                  //Set Vertical Sync signal to active high
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	64da      	str	r2, [r3, #76]	; 0x4c
  m_sDSICfgHandle.HSPolarity                   = DSI_HSYNC_ACTIVE_HIGH;                  //Set Horizontal Sync signal to active high
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	649a      	str	r2, [r3, #72]	; 0x48
  m_sDSICfgHandle.DEPolarity                   = DSI_DATA_ENABLE_ACTIVE_HIGH;            //Set Data Enable signal to active high
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	651a      	str	r2, [r3, #80]	; 0x50
  m_sDSICfgHandle.Mode                         = DSI_VID_MODE_BURST;                     //Set Video Mode to burst mode
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	639a      	str	r2, [r3, #56]	; 0x38
  m_sDSICfgHandle.NullPacketSize               = 0xFFF;                                  //Set null packet size
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f640 72ff 	movw	r2, #4095	; 0xfff
 8009bce:	645a      	str	r2, [r3, #68]	; 0x44
  m_sDSICfgHandle.NumberOfChunks               = 0;                                      //Set number of chunks
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	641a      	str	r2, [r3, #64]	; 0x40
  m_sDSICfgHandle.PacketSize                   = HACT;                                   //Set packet size to horizontal active period
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009bdc:	63da      	str	r2, [r3, #60]	; 0x3c

  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009be4:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 8009bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	655a      	str	r2, [r3, #84]	; 0x54

  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009bfa:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 8009c02:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	659a      	str	r2, [r3, #88]	; 0x58

  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8009c0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c10:	441a      	add	r2, r3
 8009c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c14:	441a      	add	r2, r3
 8009c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c18:	4413      	add	r3, r2
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	6892      	ldr	r2, [r2, #8]
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8009c1e:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	fbb2 f2f3 	udiv	r2, r2, r3
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	65da      	str	r2, [r3, #92]	; 0x5c

  m_sDSICfgHandle.VerticalSyncActive           = VSA;                                    //Set duration for vertical sync signal
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009c32:	661a      	str	r2, [r3, #96]	; 0x60
  m_sDSICfgHandle.VerticalBackPorch            = VBP;                                    //Set duration for vertical back porch
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c38:	665a      	str	r2, [r3, #100]	; 0x64
  m_sDSICfgHandle.VerticalFrontPorch           = VFP;                                    //Set duration for vertical front porch
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c3e:	669a      	str	r2, [r3, #104]	; 0x68
  m_sDSICfgHandle.VerticalActive               = VACT;                                   //Set duration of vertical active period
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c46:	66da      	str	r2, [r3, #108]	; 0x6c

  m_sDSICfgHandle.LPCommandEnable              = DSI_LP_COMMAND_ENABLE;  //Enable DSI low power command
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009c4e:	671a      	str	r2, [r3, #112]	; 0x70
  m_sDSICfgHandle.LPLargestPacketSize          = 16;                     //Set largest packet size for low power commands during VSA, VBP and VFP periods.
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2210      	movs	r2, #16
 8009c54:	675a      	str	r2, [r3, #116]	; 0x74
  m_sDSICfgHandle.LPVACTLargestPacketSize      = 0;                      //Set largest packet size for low power commands during VACT period
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	679a      	str	r2, [r3, #120]	; 0x78
  m_sDSICfgHandle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;      //Enable low power horizontal front porch
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009c62:	67da      	str	r2, [r3, #124]	; 0x7c
  m_sDSICfgHandle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;      //Enable low power horizontal back porch
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  m_sDSICfgHandle.LPVerticalActiveEnable       = DSI_LP_VACT_ENABLE;     //Enable low power vertical active
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  m_sDSICfgHandle.LPVerticalFrontPorchEnable   = DSI_LP_VFP_ENABLE;      //Enable low power vertical front porch
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  m_sDSICfgHandle.LPVerticalBackPorchEnable    = DSI_LP_VBP_ENABLE;      //Enable low power vertical back porch
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  m_sDSICfgHandle.LPVerticalSyncActiveEnable   = DSI_LP_VSYNC_ENABLE;    //Enable low power vertical sync
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  //Configure DSI Video Mode,
  if (HAL_DSI_ConfigVideoMode(&m_sDSIHandle, &m_sDSICfgHandle) != HAL_OK) {
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f103 0210 	add.w	r2, r3, #16
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	332c      	adds	r3, #44	; 0x2c
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	f7f9 fbb0 	bl	8003408 <HAL_DSI_ConfigVideoMode>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	bf14      	ite	ne
 8009cae:	2301      	movne	r3, #1
 8009cb0:	2300      	moveq	r3, #0
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00f      	beq.n	8009cd8 <_ZN8QAD_LTDC8imp_initEv+0x2a4>
  	imp_deinit();
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f941 	bl	8009f40 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e138      	b.n	8009f34 <_ZN8QAD_LTDC8imp_initEv+0x500>
 8009cc2:	bf00      	nop
 8009cc4:	40022000 	.word	0x40022000
 8009cc8:	40022400 	.word	0x40022400
 8009ccc:	40023800 	.word	0x40023800
 8009cd0:	40016c00 	.word	0x40016c00
 8009cd4:	40016800 	.word	0x40016800

  //--------------------------
  //Initialize LTDC Peripheral

  //Fill out details for LTDC initialization
  m_sLTDCHandle.Init.HorizontalSync     = (HSA - 1);                              //Set horizontal syncronization width
 8009cd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cda:	1e5a      	subs	r2, r3, #1
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  m_sLTDCHandle.Init.AccumulatedHBP     = (HSA + HBP - 1);                        //Set accumulated horizontal back porch width
 8009ce2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ce6:	4413      	add	r3, r2
 8009ce8:	1e5a      	subs	r2, r3, #1
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  m_sLTDCHandle.Init.AccumulatedActiveW = (QAD_LTDC_WIDTH + HSA + HBP - 1);       //Set accumulated active width
 8009cf0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f203 321f 	addw	r2, r3, #799	; 0x31f
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  m_sLTDCHandle.Init.TotalWidth         = (QAD_LTDC_WIDTH + HSA + HBP + HFP - 1); //Set total width
 8009d00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d04:	441a      	add	r2, r3
 8009d06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d08:	4413      	add	r3, r2
 8009d0a:	f203 321f 	addw	r2, r3, #799	; 0x31f
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  m_sLTDCHandle.LayerCfg->ImageWidth    = QAD_LTDC_WIDTH;                         //Sets the frame buffer line length (in pixels)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009d1a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  m_sLTDCHandle.LayerCfg->ImageHeight   = QAD_LTDC_HEIGHT;                        //Sets the number of frame buffer lines (height in pixels)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009d24:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  m_sLTDCHandle.Init.Backcolor.Red      = 0;                                      //Set background color red value
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
  m_sLTDCHandle.Init.Backcolor.Green    = 0;                                      //Set background color green value
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
  m_sLTDCHandle.Init.Backcolor.Blue     = 255;                                    //Set background color blue value
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	22ff      	movs	r2, #255	; 0xff
 8009d3c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  m_sLTDCHandle.Init.PCPolarity         = LTDC_PCPOLARITY_IPC;                    //Set pixel clock polarity to non-inverted
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  //Complete initialization structre details based on DSI Configuration, calling imp_deinit() if failed
  if (HAL_LTDC_StructInitFromVideoConfig(&m_sLTDCHandle, &m_sDSICfgHandle) != HAL_OK) {
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	332c      	adds	r3, #44	; 0x2c
 8009d52:	4619      	mov	r1, r3
 8009d54:	4610      	mov	r0, r2
 8009d56:	f7fb f833 	bl	8004dc0 <HAL_LTDCEx_StructInitFromVideoConfig>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	bf14      	ite	ne
 8009d60:	2301      	movne	r3, #1
 8009d62:	2300      	moveq	r3, #0
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d004      	beq.n	8009d74 <_ZN8QAD_LTDC8imp_initEv+0x340>
  	imp_deinit();
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f8e8 	bl	8009f40 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e0df      	b.n	8009f34 <_ZN8QAD_LTDC8imp_initEv+0x500>
  }

  //Initialize LTDC Peripheral
  if (HAL_LTDC_Init(&m_sLTDCHandle) != HAL_OK) {
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	3398      	adds	r3, #152	; 0x98
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fa fd17 	bl	80047ac <HAL_LTDC_Init>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	bf14      	ite	ne
 8009d84:	2301      	movne	r3, #1
 8009d86:	2300      	moveq	r3, #0
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d004      	beq.n	8009d98 <_ZN8QAD_LTDC8imp_initEv+0x364>
  	imp_deinit();
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f8d6 	bl	8009f40 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e0cd      	b.n	8009f34 <_ZN8QAD_LTDC8imp_initEv+0x500>

    //-------
    //Layer 0

  //Set pointer address for layer 0 double buffer
  m_pLayer0Ptr = (void*)0xC0000000;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8009d9e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

  //Clear Layer Config structure
  LTDC_Layer = {0};
 8009da2:	f107 0314 	add.w	r3, r7, #20
 8009da6:	2234      	movs	r2, #52	; 0x34
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f003 fd4e 	bl	800d84c <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 8009db4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009db8:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 8009dbe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009dc2:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 8009dc4:	2304      	movs	r3, #4
 8009dc6:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009dce:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 8009dd0:	23ff      	movs	r3, #255	; 0xff
 8009dd2:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 8009dde:	2300      	movs	r3, #0
 8009de0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 8009dea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009dee:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 8009df0:	2307      	movs	r3, #7
 8009df2:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 8009df4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009df8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 8009dfa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009dfe:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 0 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 0) != HAL_OK) {
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3398      	adds	r3, #152	; 0x98
 8009e04:	f107 0114 	add.w	r1, r7, #20
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fa fdca 	bl	80049a4 <HAL_LTDC_ConfigLayer>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	bf14      	ite	ne
 8009e16:	2301      	movne	r3, #1
 8009e18:	2300      	moveq	r3, #0
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d004      	beq.n	8009e2a <_ZN8QAD_LTDC8imp_initEv+0x3f6>
		imp_deinit();
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f88d 	bl	8009f40 <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e084      	b.n	8009f34 <_ZN8QAD_LTDC8imp_initEv+0x500>

	  //-------
	  //Layer 1

  //Set pointer address for layer 1 doube buffer
	m_pLayer1Ptr = (void*)((uint32_t)m_pLayer0Ptr + (QAD_LTDC_BUFFERSIZE*2));
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009e30:	461a      	mov	r2, r3
 8009e32:	4b42      	ldr	r3, [pc, #264]	; (8009f3c <_ZN8QAD_LTDC8imp_initEv+0x508>)
 8009e34:	4413      	add	r3, r2
 8009e36:	461a      	mov	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  //Clear Layer Config structure
  LTDC_Layer = {0};
 8009e3e:	f107 0314 	add.w	r3, r7, #20
 8009e42:	2234      	movs	r2, #52	; 0x34
 8009e44:	2100      	movs	r1, #0
 8009e46:	4618      	mov	r0, r3
 8009e48:	f003 fd00 	bl	800d84c <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 8009e50:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009e54:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 8009e56:	2300      	movs	r3, #0
 8009e58:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 8009e5a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009e5e:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 8009e60:	2304      	movs	r3, #4
 8009e62:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009e6a:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 8009e6c:	23ff      	movs	r3, #255	; 0xff
 8009e6e:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 8009e70:	2300      	movs	r3, #0
 8009e72:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 8009e74:	2300      	movs	r3, #0
 8009e76:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 8009e80:	2300      	movs	r3, #0
 8009e82:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 8009e86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009e8a:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 8009e8c:	2307      	movs	r3, #7
 8009e8e:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 8009e90:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009e94:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 8009e96:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009e9a:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 1 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 1) != HAL_OK) {
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	3398      	adds	r3, #152	; 0x98
 8009ea0:	f107 0114 	add.w	r1, r7, #20
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fa fd7c 	bl	80049a4 <HAL_LTDC_ConfigLayer>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bf14      	ite	ne
 8009eb2:	2301      	movne	r3, #1
 8009eb4:	2300      	moveq	r3, #0
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d004      	beq.n	8009ec6 <_ZN8QAD_LTDC8imp_initEv+0x492>
		imp_deinit();
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f83f 	bl	8009f40 <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e036      	b.n	8009f34 <_ZN8QAD_LTDC8imp_initEv+0x500>
	}


	//-------------------------------
	//Enable LTDC Layer 0 and Layer 1
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 0);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ecc:	3384      	adds	r3, #132	; 0x84
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8009ed6:	3284      	adds	r2, #132	; 0x84
 8009ed8:	f043 0301 	orr.w	r3, r3, #1
 8009edc:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 1);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ee4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8009ef0:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8009ef4:	f043 0301 	orr.w	r3, r3, #1
 8009ef8:	6013      	str	r3, [r2, #0]


	//---------------------
	//Enable DSI Peripheral
	HAL_DSI_Start(&m_sDSIHandle);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	3310      	adds	r3, #16
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7f9 fc82 	bl	8003808 <HAL_DSI_Start>


	//--------------------------------------
	//Initialize OTM8009A Display Controller
	OTM8009A_Init(OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8009f04:	2101      	movs	r1, #1
 8009f06:	2000      	movs	r0, #0
 8009f08:	f7f8 fc84 	bl	8002814 <OTM8009A_Init>


	//-------------------------------
	//Set Initial Frame Buffer States
	m_eLayer0Back  = QAD_LTDC_Buffer1;   //Set initial layer 0 back buffer as being buffer 1 in double buffer pair
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	m_eLayer0Front = QAD_LTDC_Buffer0;   //Set initial layer 0 front buffer as being buffer 0 in double buffer pair
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	m_eLayer1Back  = QAD_LTDC_Buffer1;   //Set initial layer 1 back buffer as being buffer 1 in double buffer pair
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	m_eLayer1Front = QAD_LTDC_Buffer0;   //Set initial layer 1 front buffer as being buffer 0 in double buffer pair
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b


	//Set Driver State as being initialized
	m_eInitState = QA_Initialized;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	701a      	strb	r2, [r3, #0]

	//Return
	return QA_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3788      	adds	r7, #136	; 0x88
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	00177000 	.word	0x00177000

08009f40 <_ZN8QAD_LTDC10imp_deinitEv>:
//QAD_LTDC::imp_deinit
//QAD_LTDC Initialization Method
//
//To be called from static method deinit(), or from imp_init() in the event of a failed initialization
//Used to deinitialize the DSI and LTDC peripherals, LTDC layers, reset display controller and deinitialize reset and backlight GPIO pins
void QAD_LTDC::imp_deinit(void) {
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]

	//----------------------
	//Disable DSI Peripheral
	HAL_DSI_Stop(&m_sDSIHandle);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	3310      	adds	r3, #16
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7f9 fc97 	bl	8003880 <HAL_DSI_Stop>


	//-------------------
	//Disable LTDC Layers
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 1);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f58:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8009f64:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8009f68:	f023 0301 	bic.w	r3, r3, #1
 8009f6c:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 0);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f74:	3384      	adds	r3, #132	; 0x84
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8009f7e:	3284      	adds	r2, #132	; 0x84
 8009f80:	f023 0301 	bic.w	r3, r3, #1
 8009f84:	6013      	str	r3, [r2, #0]


	//----------------------------
	//Deinitialize LTDC Peripheral
	HAL_LTDC_DeInit(&m_sLTDCHandle);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	3398      	adds	r3, #152	; 0x98
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fa fcde 	bl	800494c <HAL_LTDC_DeInit>


	//---------------------------
	//Deinitialize DSI Peripheral
	HAL_DSI_DeInit(&m_sDSIHandle);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	3310      	adds	r3, #16
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7f9 f9af 	bl	80032f8 <HAL_DSI_DeInit>


	//---------------------------
	//Disable DSI and LTDC Clocks
	__HAL_RCC_DSI_CLK_DISABLE();
 8009f9a:	4b16      	ldr	r3, [pc, #88]	; (8009ff4 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8009f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f9e:	4a15      	ldr	r2, [pc, #84]	; (8009ff4 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8009fa0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8009fa4:	6453      	str	r3, [r2, #68]	; 0x44
	__HAL_RCC_LTDC_CLK_DISABLE();
 8009fa6:	4b13      	ldr	r3, [pc, #76]	; (8009ff4 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8009fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009faa:	4a12      	ldr	r2, [pc, #72]	; (8009ff4 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8009fac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009fb0:	6453      	str	r3, [r2, #68]	; 0x44


	//------------------------
	//Reset Display controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET);
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009fb8:	480f      	ldr	r0, [pc, #60]	; (8009ff8 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 8009fba:	f7fa f827 	bl	800400c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8009fbe:	2014      	movs	r0, #20
 8009fc0:	f7f8 fed0 	bl	8002d64 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009fca:	480b      	ldr	r0, [pc, #44]	; (8009ff8 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 8009fcc:	f7fa f81e 	bl	800400c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8009fd0:	200a      	movs	r0, #10
 8009fd2:	f7f8 fec7 	bl	8002d64 <HAL_Delay>


	//--------------------------------------------------
	//Deinitialize Reset and Backlight control GPIO Pins
	HAL_GPIO_DeInit(QAD_LTDC_BACKLIGHT_PORT, QAD_LTDC_BACKLIGHT_PIN);
 8009fd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009fda:	4808      	ldr	r0, [pc, #32]	; (8009ffc <_ZN8QAD_LTDC10imp_deinitEv+0xbc>)
 8009fdc:	f7f9 fef2 	bl	8003dc4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN);
 8009fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009fe4:	4804      	ldr	r0, [pc, #16]	; (8009ff8 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 8009fe6:	f7f9 feed 	bl	8003dc4 <HAL_GPIO_DeInit>

}
 8009fea:	bf00      	nop
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	40023800 	.word	0x40023800
 8009ff8:	40022400 	.word	0x40022400
 8009ffc:	40022000 	.word	0x40022000

0800a000 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>:
  //DSI Command Methods


//QAD_LTDC::imp_dsi_IO_WriteCmd
//DSI Command Methods
void QAD_LTDC::imp_dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af02      	add	r7, sp, #8
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
	if (uNumParams <= 1) {
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d80f      	bhi.n	800a032 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x32>
		HAL_DSI_ShortWrite(&m_sDSIHandle, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f103 0010 	add.w	r0, r3, #16
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	461a      	mov	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	3301      	adds	r3, #1
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	4613      	mov	r3, r2
 800a028:	2215      	movs	r2, #21
 800a02a:	2100      	movs	r1, #0
 800a02c:	f7f9 fc64 	bl	80038f8 <HAL_DSI_ShortWrite>
	} else {
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
	}
}
 800a030:	e00f      	b.n	800a052 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x52>
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f103 0010 	add.w	r0, r3, #16
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4413      	add	r3, r2
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	461a      	mov	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	9301      	str	r3, [sp, #4]
 800a046:	9200      	str	r2, [sp, #0]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2239      	movs	r2, #57	; 0x39
 800a04c:	2100      	movs	r1, #0
 800a04e:	f7f9 fc75 	bl	800393c <HAL_DSI_LongWrite>
}
 800a052:	bf00      	nop
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>:
  //------------------------------
  //QAD_LTDC Layer Control Methods

//QAD_LTDC::imp_flipLayer0Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer0Buffers(void) {
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d032      	beq.n	800a0d2 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x76>
  	return;

  switch (m_eLayer0Front) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x20>
 800a076:	2b01      	cmp	r3, #1
 800a078:	d017      	beq.n	800a0aa <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x4e>
 800a07a:	e02b      	b.n	800a0d4 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer0Back  = QAD_LTDC_Buffer0;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer1;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a092:	461a      	mov	r2, r3
 800a094:	4b11      	ldr	r3, [pc, #68]	; (800a0dc <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x80>)
 800a096:	4413      	add	r3, r2
 800a098:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	3398      	adds	r3, #152	; 0x98
 800a09e:	2200      	movs	r2, #0
 800a0a0:	68b9      	ldr	r1, [r7, #8]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fa fcbc 	bl	8004a20 <HAL_LTDC_SetAddress>
    	break;
 800a0a8:	e014      	b.n	800a0d4 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer0Back  = QAD_LTDC_Buffer1;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer0;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a0c0:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3398      	adds	r3, #152	; 0x98
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	68f9      	ldr	r1, [r7, #12]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fa fca8 	bl	8004a20 <HAL_LTDC_SetAddress>
    	break;
 800a0d0:	e000      	b.n	800a0d4 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
  	return;
 800a0d2:	bf00      	nop
    }
  }
}
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	000bb800 	.word	0x000bb800

0800a0e0 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>:


//QAD_LTDC::imp_flipLayer1Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer1Buffers(void) {
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d032      	beq.n	800a156 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x76>
  	return;

  switch (m_eLayer1Front) {
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d002      	beq.n	800a100 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x20>
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d017      	beq.n	800a12e <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x4e>
 800a0fe:	e02b      	b.n	800a158 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer1Back  = QAD_LTDC_Buffer0;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer1;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800a116:	461a      	mov	r2, r3
 800a118:	4b11      	ldr	r3, [pc, #68]	; (800a160 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x80>)
 800a11a:	4413      	add	r3, r2
 800a11c:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	3398      	adds	r3, #152	; 0x98
 800a122:	2201      	movs	r2, #1
 800a124:	68b9      	ldr	r1, [r7, #8]
 800a126:	4618      	mov	r0, r3
 800a128:	f7fa fc7a 	bl	8004a20 <HAL_LTDC_SetAddress>
    	break;
 800a12c:	e014      	b.n	800a158 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer1Back  = QAD_LTDC_Buffer1;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer0;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800a144:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	3398      	adds	r3, #152	; 0x98
 800a14a:	2201      	movs	r2, #1
 800a14c:	68f9      	ldr	r1, [r7, #12]
 800a14e:	4618      	mov	r0, r3
 800a150:	f7fa fc66 	bl	8004a20 <HAL_LTDC_SetAddress>
    	break;
 800a154:	e000      	b.n	800a158 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
  	return;
 800a156:	bf00      	nop
    }
  }
}
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	000bb800 	.word	0x000bb800

0800a164 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>:
}


//QAD_LTDC::imp_getLayer0BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer0BackBuffer(void) {
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x14>
		return NULL;
 800a174:	2300      	movs	r3, #0
 800a176:	e013      	b.n	800a1a0 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>

	switch (m_eLayer0Back) {
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d002      	beq.n	800a188 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x24>
 800a182:	2b01      	cmp	r3, #1
 800a184:	d004      	beq.n	800a190 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x2c>
 800a186:	e00a      	b.n	800a19e <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer0Ptr;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a18e:	e007      	b.n	800a1a0 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a196:	461a      	mov	r2, r3
 800a198:	4b04      	ldr	r3, [pc, #16]	; (800a1ac <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x48>)
 800a19a:	4413      	add	r3, r2
 800a19c:	e000      	b.n	800a1a0 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	000bb800 	.word	0x000bb800

0800a1b0 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>:
}


//QAD_LTDC::imp_getLayer1BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer1BackBuffer(void) {
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x14>
		return NULL;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	e013      	b.n	800a1ec <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>

	switch (m_eLayer1Back) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x24>
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d004      	beq.n	800a1dc <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x2c>
 800a1d2:	e00a      	b.n	800a1ea <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer1Ptr;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800a1da:	e007      	b.n	800a1ec <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	4b04      	ldr	r3, [pc, #16]	; (800a1f8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x48>)
 800a1e6:	4413      	add	r3, r2
 800a1e8:	e000      	b.n	800a1ec <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	000bb800 	.word	0x000bb800

0800a1fc <DSI_IO_WriteCmd>:

//DSI_IO_WriteCmd
//OTM8009A Display Controller Communication Methods
//Used by the OTM8009A initialization method in the otm8009a.h file
//Calls the static dsi_IO_WriteCmd method in the QAD_LTDC driver class
void DSI_IO_WriteCmd(uint32_t NbrParam, uint8_t* pParams) {
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  QAD_LTDC::dsi_IO_WriteCmd(NbrParam, pParams);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff fc01 	bl	8009a10 <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>
}
 800a20e:	bf00      	nop
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <_ZN11QAD_QuadSPI8imp_initEv>:
	//----------------------------------
	//QAD_QuadSPI Initialization Methods

//QAD_QuadSPI::imp_init
//QAD_QuadSPI Initialization Method
QA_Result QAD_QuadSPI::imp_init(void) {
 800a216:	b580      	push	{r7, lr}
 800a218:	b082      	sub	sp, #8
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  if (m_eInitState)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d001      	beq.n	800a22c <_ZN11QAD_QuadSPI8imp_initEv+0x16>
  	return QA_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	e015      	b.n	800a258 <_ZN11QAD_QuadSPI8imp_initEv+0x42>

  //Initialized Peripheral
  if (imp_periphInit())
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f817 	bl	800a260 <_ZN11QAD_QuadSPI14imp_periphInitEv>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	bf14      	ite	ne
 800a238:	2301      	movne	r3, #1
 800a23a:	2300      	moveq	r3, #0
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <_ZN11QAD_QuadSPI8imp_initEv+0x30>
  	return QA_Fail;
 800a242:	2301      	movs	r3, #1
 800a244:	e008      	b.n	800a258 <_ZN11QAD_QuadSPI8imp_initEv+0x42>

  //Set Driver States
  m_eInitState         = QA_Initialized;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 2020 	strb.w	r2, [r3, #32]
  m_eMemoryMappedState = QAD_QuadSPI_MemoryMapped_Disabled;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  //Return
  return QA_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <_ZN11QAD_QuadSPI14imp_periphInitEv>:
//---------------------------------------------
//QAD_QuadSPI Peripheral Initialization Methods

//QAD_QuadSPI::imp_periphInit
//QAD_QuadSPI Peripheral Initialization Method
QA_Result QAD_QuadSPI::imp_periphInit(void) {
 800a260:	b580      	push	{r7, lr}
 800a262:	b08a      	sub	sp, #40	; 0x28
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 800a268:	f107 030c 	add.w	r3, r7, #12
 800a26c:	2200      	movs	r2, #0
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	605a      	str	r2, [r3, #4]
 800a272:	609a      	str	r2, [r3, #8]
 800a274:	60da      	str	r2, [r3, #12]
 800a276:	611a      	str	r2, [r3, #16]

	//----------
	//Init GPIOs

	//CS Pin
	GPIO_Init.Pin       = QAD_QUADSPI_CS_PIN;
 800a278:	2340      	movs	r3, #64	; 0x40
 800a27a:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800a27c:	2302      	movs	r3, #2
 800a27e:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;
 800a280:	2301      	movs	r3, #1
 800a282:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 800a284:	2302      	movs	r3, #2
 800a286:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = QAD_QUADSPI_CS_AF;
 800a288:	230a      	movs	r3, #10
 800a28a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_QUADSPI_CS_PORT, &GPIO_Init);
 800a28c:	f107 030c 	add.w	r3, r7, #12
 800a290:	4619      	mov	r1, r3
 800a292:	4871      	ldr	r0, [pc, #452]	; (800a458 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f8>)
 800a294:	f7f9 fbea 	bl	8003a6c <HAL_GPIO_Init>

	//Clk Pin
	GPIO_Init.Pin       = QAD_QUADSPI_CLK_PIN;
 800a298:	2304      	movs	r3, #4
 800a29a:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Pull      = GPIO_NOPULL;
 800a29c:	2300      	movs	r3, #0
 800a29e:	617b      	str	r3, [r7, #20]
	GPIO_Init.Alternate = QAD_QUADSPI_CLK_AF;
 800a2a0:	2309      	movs	r3, #9
 800a2a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_QUADSPI_CLK_PORT, &GPIO_Init);
 800a2a4:	f107 030c 	add.w	r3, r7, #12
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	486b      	ldr	r0, [pc, #428]	; (800a458 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f8>)
 800a2ac:	f7f9 fbde 	bl	8003a6c <HAL_GPIO_Init>

	//Data 0 Pin
	GPIO_Init.Pin       = QAD_QUADSPI_DATA0_PIN;
 800a2b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2b4:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Alternate = QAD_QUADSPI_DATA0_AF;
 800a2b6:	2309      	movs	r3, #9
 800a2b8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_QUADSPI_DATA0_PORT, &GPIO_Init);
 800a2ba:	f107 030c 	add.w	r3, r7, #12
 800a2be:	4619      	mov	r1, r3
 800a2c0:	4866      	ldr	r0, [pc, #408]	; (800a45c <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1fc>)
 800a2c2:	f7f9 fbd3 	bl	8003a6c <HAL_GPIO_Init>

	//Data 1 Pin
	GPIO_Init.Pin       = QAD_QUADSPI_DATA1_PIN;
 800a2c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ca:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Alternate = QAD_QUADSPI_DATA1_AF;
 800a2cc:	2309      	movs	r3, #9
 800a2ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_QUADSPI_DATA1_PORT, &GPIO_Init);
 800a2d0:	f107 030c 	add.w	r3, r7, #12
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4861      	ldr	r0, [pc, #388]	; (800a45c <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1fc>)
 800a2d8:	f7f9 fbc8 	bl	8003a6c <HAL_GPIO_Init>

	//Data 2 Pin
	GPIO_Init.Pin       = QAD_QUADSPI_DATA2_PIN;
 800a2dc:	2304      	movs	r3, #4
 800a2de:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Alternate = QAD_QUADSPI_DATA2_AF;
 800a2e0:	2309      	movs	r3, #9
 800a2e2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_QUADSPI_DATA2_PORT, &GPIO_Init);
 800a2e4:	f107 030c 	add.w	r3, r7, #12
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	485d      	ldr	r0, [pc, #372]	; (800a460 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x200>)
 800a2ec:	f7f9 fbbe 	bl	8003a6c <HAL_GPIO_Init>

	//Data 3 Pin
	GPIO_Init.Pin       = QAD_QUADSPI_DATA3_PIN;
 800a2f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2f4:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Alternate = QAD_QUADSPI_DATA3_AF;
 800a2f6:	2309      	movs	r3, #9
 800a2f8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_QUADSPI_DATA3_PORT, &GPIO_Init);
 800a2fa:	f107 030c 	add.w	r3, r7, #12
 800a2fe:	4619      	mov	r1, r3
 800a300:	4858      	ldr	r0, [pc, #352]	; (800a464 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x204>)
 800a302:	f7f9 fbb3 	bl	8003a6c <HAL_GPIO_Init>

	//---------------
	//Init Peripheral

	//Enable QSPI Clock
	__HAL_RCC_QSPI_CLK_ENABLE();
 800a306:	4b58      	ldr	r3, [pc, #352]	; (800a468 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x208>)
 800a308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30a:	4a57      	ldr	r2, [pc, #348]	; (800a468 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x208>)
 800a30c:	f043 0302 	orr.w	r3, r3, #2
 800a310:	6393      	str	r3, [r2, #56]	; 0x38
 800a312:	4b55      	ldr	r3, [pc, #340]	; (800a468 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x208>)
 800a314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a316:	f003 0302 	and.w	r3, r3, #2
 800a31a:	60bb      	str	r3, [r7, #8]
 800a31c:	68bb      	ldr	r3, [r7, #8]

	//Init QSPI
	m_sHandle.Instance                = QUADSPI;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a52      	ldr	r2, [pc, #328]	; (800a46c <_ZN11QAD_QuadSPI14imp_periphInitEv+0x20c>)
 800a322:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.ClockPrescaler     = 1;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.FifoThreshold      = 16;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2210      	movs	r2, #16
 800a32e:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2210      	movs	r2, #16
 800a334:	631a      	str	r2, [r3, #48]	; 0x30
 800a336:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a33a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	fa93 f3a3 	rbit	r3, r3
 800a342:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a344:	6a3b      	ldr	r3, [r7, #32]
	m_sHandle.Init.FlashSize          = POSITION_VAL(0x4000000) - 1;
 800a346:	fab3 f383 	clz	r3, r3
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	3b01      	subs	r3, #1
 800a34e:	461a      	mov	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f44f 7240 	mov.w	r2, #768	; 0x300
 800a35a:	639a      	str	r2, [r3, #56]	; 0x38
	m_sHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	63da      	str	r2, [r3, #60]	; 0x3c
	m_sHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	641a      	str	r2, [r3, #64]	; 0x40
	m_sHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	645a      	str	r2, [r3, #68]	; 0x44
	if (HAL_QSPI_Init(&m_sHandle) != HAL_OK) {
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	3324      	adds	r3, #36	; 0x24
 800a372:	4618      	mov	r0, r3
 800a374:	f7fa fdd4 	bl	8004f20 <HAL_QSPI_Init>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	bf14      	ite	ne
 800a37e:	2301      	movne	r3, #1
 800a380:	2300      	moveq	r3, #0
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	d005      	beq.n	800a394 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x134>
		imp_periphDeinit(DeinitPartial);
 800a388:	2100      	movs	r1, #0
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f870 	bl	800a470 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 800a390:	2301      	movs	r3, #1
 800a392:	e05d      	b.n	800a450 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f0>
	}

	//Enable IRQ
	HAL_NVIC_SetPriority(QUADSPI_IRQn, QAD_IRQPRIORITY_FLASH, 0x00);
 800a394:	2200      	movs	r2, #0
 800a396:	210e      	movs	r1, #14
 800a398:	205c      	movs	r0, #92	; 0x5c
 800a39a:	f7f8 fe06 	bl	8002faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800a39e:	205c      	movs	r0, #92	; 0x5c
 800a3a0:	f7f8 fe1f 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

	//-------------
	//Init Flash IC

	//Reset Memory
	if (imp_resetMemory()) {
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f8a1 	bl	800a4ec <_ZN11QAD_QuadSPI15imp_resetMemoryEv>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	bf14      	ite	ne
 800a3b0:	2301      	movne	r3, #1
 800a3b2:	2300      	moveq	r3, #0
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d005      	beq.n	800a3c6 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x166>
		imp_periphDeinit(DeinitFull);
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f857 	bl	800a470 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e044      	b.n	800a450 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f0>
	}

	//Enter QPI Mode
	if (imp_enterMemoryQPI()) {
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fb18 	bl	800a9fc <_ZN11QAD_QuadSPI18imp_enterMemoryQPIEv>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	bf14      	ite	ne
 800a3d2:	2301      	movne	r3, #1
 800a3d4:	2300      	moveq	r3, #0
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d005      	beq.n	800a3e8 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x188>
		imp_periphDeinit(DeinitFull);
 800a3dc:	2101      	movs	r1, #1
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f846 	bl	800a470 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e033      	b.n	800a450 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f0>
	}

	//Enter Four Byte Address Mode
	if (imp_enterFourByteAddress()) {
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f9d6 	bl	800a79a <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bf14      	ite	ne
 800a3f4:	2301      	movne	r3, #1
 800a3f6:	2300      	moveq	r3, #0
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d005      	beq.n	800a40a <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1aa>
		imp_periphDeinit(DeinitFull);
 800a3fe:	2101      	movs	r1, #1
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f835 	bl	800a470 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 800a406:	2301      	movs	r3, #1
 800a408:	e022      	b.n	800a450 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f0>
	}

	//Configure Memory Dummy Cycles
	if (imp_dummyCyclesCfg()) {
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fa10 	bl	800a830 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	bf14      	ite	ne
 800a416:	2301      	movne	r3, #1
 800a418:	2300      	moveq	r3, #0
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d005      	beq.n	800a42c <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1cc>
		imp_periphDeinit(DeinitFull);
 800a420:	2101      	movs	r1, #1
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f824 	bl	800a470 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 800a428:	2301      	movs	r3, #1
 800a42a:	e011      	b.n	800a450 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f0>
	}

	//Configure Output Drive Strength
	if (imp_outputDriveStrengthCfg()) {
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fb3e 	bl	800aaae <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	bf14      	ite	ne
 800a438:	2301      	movne	r3, #1
 800a43a:	2300      	moveq	r3, #0
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d005      	beq.n	800a44e <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1ee>
		imp_periphDeinit(DeinitFull);
 800a442:	2101      	movs	r1, #1
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f813 	bl	800a470 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e000      	b.n	800a450 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f0>
	}

	//Return
	return QA_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3728      	adds	r7, #40	; 0x28
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	40020400 	.word	0x40020400
 800a45c:	40020800 	.word	0x40020800
 800a460:	40021000 	.word	0x40021000
 800a464:	40020c00 	.word	0x40020c00
 800a468:	40023800 	.word	0x40023800
 800a46c:	a0001000 	.word	0xa0001000

0800a470 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>:


//QAD_QuadSPI::imp_periphDeinit
//QAD_QuadSPI Peripheral Initialization Method
void QAD_QuadSPI::imp_periphDeinit(QAD_QuadSPI::DeinitMode eMode) {
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	460b      	mov	r3, r1
 800a47a:	70fb      	strb	r3, [r7, #3]

	if (eMode == DeinitFull) {
 800a47c:	78fb      	ldrb	r3, [r7, #3]
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d104      	bne.n	800a48c <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x1c>

		//Deinitialize QuadSPI Peripheral
		HAL_QSPI_DeInit(&m_sHandle);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	3324      	adds	r3, #36	; 0x24
 800a486:	4618      	mov	r0, r3
 800a488:	f7fa fdc6 	bl	8005018 <HAL_QSPI_DeInit>

	}

	//Disable QSPI Clock
	__HAL_RCC_QSPI_CLK_DISABLE();
 800a48c:	4b12      	ldr	r3, [pc, #72]	; (800a4d8 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x68>)
 800a48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a490:	4a11      	ldr	r2, [pc, #68]	; (800a4d8 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x68>)
 800a492:	f023 0302 	bic.w	r3, r3, #2
 800a496:	6393      	str	r3, [r2, #56]	; 0x38

	//Deinit GPIOs
	HAL_GPIO_DeInit(QAD_QUADSPI_CS_PORT, QAD_QUADSPI_CS_PIN);
 800a498:	2140      	movs	r1, #64	; 0x40
 800a49a:	4810      	ldr	r0, [pc, #64]	; (800a4dc <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x6c>)
 800a49c:	f7f9 fc92 	bl	8003dc4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_QUADSPI_CLK_PORT, QAD_QUADSPI_CLK_PIN);
 800a4a0:	2104      	movs	r1, #4
 800a4a2:	480e      	ldr	r0, [pc, #56]	; (800a4dc <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x6c>)
 800a4a4:	f7f9 fc8e 	bl	8003dc4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_QUADSPI_DATA0_PORT, QAD_QUADSPI_DATA0_PIN);
 800a4a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a4ac:	480c      	ldr	r0, [pc, #48]	; (800a4e0 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x70>)
 800a4ae:	f7f9 fc89 	bl	8003dc4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_QUADSPI_DATA1_PORT, QAD_QUADSPI_DATA1_PIN);
 800a4b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a4b6:	480a      	ldr	r0, [pc, #40]	; (800a4e0 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x70>)
 800a4b8:	f7f9 fc84 	bl	8003dc4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_QUADSPI_DATA2_PORT, QAD_QUADSPI_DATA2_PIN);
 800a4bc:	2104      	movs	r1, #4
 800a4be:	4809      	ldr	r0, [pc, #36]	; (800a4e4 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x74>)
 800a4c0:	f7f9 fc80 	bl	8003dc4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_QUADSPI_DATA3_PORT, QAD_QUADSPI_DATA3_PIN);
 800a4c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a4c8:	4807      	ldr	r0, [pc, #28]	; (800a4e8 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x78>)
 800a4ca:	f7f9 fc7b 	bl	8003dc4 <HAL_GPIO_DeInit>

}
 800a4ce:	bf00      	nop
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	40023800 	.word	0x40023800
 800a4dc:	40020400 	.word	0x40020400
 800a4e0:	40020800 	.word	0x40020800
 800a4e4:	40021000 	.word	0x40021000
 800a4e8:	40020c00 	.word	0x40020c00

0800a4ec <_ZN11QAD_QuadSPI15imp_resetMemoryEv>:
	//------------------------
	//QAD_QuadSPI Tool Methods

//QAD_QuadSPI::imp_resetMemory
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_resetMemory(void) {
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b098      	sub	sp, #96	; 0x60
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
	QSPI_AutoPollingTypeDef sCfg;
	uint8_t                 uReg;

	//------------------------------
	//Send reset command in QPI mode
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a4f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a4f8:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.Instruction       = MX25L512_CMD_RESET_ENABLE;
 800a4fa:	2366      	movs	r3, #102	; 0x66
 800a4fc:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800a4fe:	2300      	movs	r3, #0
 800a500:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a502:	2300      	movs	r3, #0
 800a504:	64bb      	str	r3, [r7, #72]	; 0x48
	sCmd.DataMode          = QSPI_DATA_NONE;
 800a506:	2300      	movs	r3, #0
 800a508:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DummyCycles       = 0;
 800a50a:	2300      	movs	r3, #0
 800a50c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a50e:	2300      	movs	r3, #0
 800a510:	657b      	str	r3, [r7, #84]	; 0x54
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a512:	2300      	movs	r3, #0
 800a514:	65bb      	str	r3, [r7, #88]	; 0x58
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a516:	2300      	movs	r3, #0
 800a518:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	3324      	adds	r3, #36	; 0x24
 800a51e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a522:	f241 3288 	movw	r2, #5000	; 0x1388
 800a526:	4618      	mov	r0, r3
 800a528:	f7fa fdae 	bl	8005088 <HAL_QSPI_Command>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	bf14      	ite	ne
 800a532:	2301      	movne	r3, #1
 800a534:	2300      	moveq	r3, #0
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x54>
		return QA_Fail;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e128      	b.n	800a792 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//-------------------------
	//Send reset memory command
	sCmd.Instruction = MX25L512_CMD_RESET_MEMORY;
 800a540:	2399      	movs	r3, #153	; 0x99
 800a542:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3324      	adds	r3, #36	; 0x24
 800a548:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a54c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a550:	4618      	mov	r0, r3
 800a552:	f7fa fd99 	bl	8005088 <HAL_QSPI_Command>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	bf14      	ite	ne
 800a55c:	2301      	movne	r3, #1
 800a55e:	2300      	moveq	r3, #0
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x7e>
		return QA_Fail;
 800a566:	2301      	movs	r3, #1
 800a568:	e113      	b.n	800a792 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//------------------------------
	//Send reset command in SPI mode
	sCmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800a56a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a56e:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.Instruction     = MX25L512_CMD_RESET_ENABLE;
 800a570:	2366      	movs	r3, #102	; 0x66
 800a572:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	3324      	adds	r3, #36	; 0x24
 800a578:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a57c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a580:	4618      	mov	r0, r3
 800a582:	f7fa fd81 	bl	8005088 <HAL_QSPI_Command>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	bf14      	ite	ne
 800a58c:	2301      	movne	r3, #1
 800a58e:	2300      	moveq	r3, #0
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0xae>
		return QA_Fail;
 800a596:	2301      	movs	r3, #1
 800a598:	e0fb      	b.n	800a792 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//--------------------------------
	//Delay in case of full chip erase
	HAL_Delay(1000);
 800a59a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a59e:	f7f8 fbe1 	bl	8002d64 <HAL_Delay>

	//------------------------------------------------------
	//Configure Automatic Polling Mode to wait for WIP bit=0
	sCfg.Match           = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	613b      	str	r3, [r7, #16]
	sCfg.Mask            = MX25L512_SR_WIP;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	617b      	str	r3, [r7, #20]
	sCfg.MatchMode       = QSPI_MATCH_MODE_AND;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	623b      	str	r3, [r7, #32]
	sCfg.StatusBytesSize = 1;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	61fb      	str	r3, [r7, #28]
	sCfg.Interval        = 0x10;
 800a5b2:	2310      	movs	r3, #16
 800a5b4:	61bb      	str	r3, [r7, #24]
	sCfg.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800a5b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a5ba:	627b      	str	r3, [r7, #36]	; 0x24

	sCmd.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a5bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5c0:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.Instruction       = MX25L512_CMD_READ_STATUS_REG;
 800a5c2:	2305      	movs	r3, #5
 800a5c4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.DataMode          = QSPI_DATA_1_LINE;
 800a5c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_QSPI_AutoPolling(&m_sHandle, &sCmd, &sCfg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a5d2:	f107 0210 	add.w	r2, r7, #16
 800a5d6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a5da:	f241 3388 	movw	r3, #5000	; 0x1388
 800a5de:	f7fa fee0 	bl	80053a2 <HAL_QSPI_AutoPolling>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	bf14      	ite	ne
 800a5e8:	2301      	movne	r3, #1
 800a5ea:	2300      	moveq	r3, #0
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x10a>
		return QA_Fail;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e0cd      	b.n	800a792 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//-------------------------------------
	//Initialize reading of status register
	sCmd.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a5f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5fa:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.Instruction       = MX25L512_CMD_READ_STATUS_REG;
 800a5fc:	2305      	movs	r3, #5
 800a5fe:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800a600:	2300      	movs	r3, #0
 800a602:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a604:	2300      	movs	r3, #0
 800a606:	64bb      	str	r3, [r7, #72]	; 0x48
	sCmd.DataMode          = QSPI_DATA_1_LINE;
 800a608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a60c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DummyCycles       = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.NbData            = 1;
 800a612:	2301      	movs	r3, #1
 800a614:	653b      	str	r3, [r7, #80]	; 0x50
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a616:	2300      	movs	r3, #0
 800a618:	657b      	str	r3, [r7, #84]	; 0x54
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a61a:	2300      	movs	r3, #0
 800a61c:	65bb      	str	r3, [r7, #88]	; 0x58
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a61e:	2300      	movs	r3, #0
 800a620:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3324      	adds	r3, #36	; 0x24
 800a626:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a62a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fa fd2a 	bl	8005088 <HAL_QSPI_Command>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	bf14      	ite	ne
 800a63a:	2301      	movne	r3, #1
 800a63c:	2300      	moveq	r3, #0
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x15c>
			return QA_Fail;
 800a644:	2301      	movs	r3, #1
 800a646:	e0a4      	b.n	800a792 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>
	if (HAL_QSPI_Receive(&m_sHandle, &uReg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	3324      	adds	r3, #36	; 0x24
 800a64c:	f107 010f 	add.w	r1, r7, #15
 800a650:	f241 3288 	movw	r2, #5000	; 0x1388
 800a654:	4618      	mov	r0, r3
 800a656:	f7fa fe07 	bl	8005268 <HAL_QSPI_Receive>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	bf14      	ite	ne
 800a660:	2301      	movne	r3, #1
 800a662:	2300      	moveq	r3, #0
 800a664:	b2db      	uxtb	r3, r3
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x182>
		return QA_Fail;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e091      	b.n	800a792 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//-----------------------
	//Enable write operations
	sCmd.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a66e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a672:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.Instruction       = MX25L512_CMD_WRITE_ENABLE;
 800a674:	2306      	movs	r3, #6
 800a676:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800a678:	2300      	movs	r3, #0
 800a67a:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a67c:	2300      	movs	r3, #0
 800a67e:	64bb      	str	r3, [r7, #72]	; 0x48
	sCmd.DataMode          = QSPI_DATA_NONE;
 800a680:	2300      	movs	r3, #0
 800a682:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DummyCycles       = 0;
 800a684:	2300      	movs	r3, #0
 800a686:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a688:	2300      	movs	r3, #0
 800a68a:	657b      	str	r3, [r7, #84]	; 0x54
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a68c:	2300      	movs	r3, #0
 800a68e:	65bb      	str	r3, [r7, #88]	; 0x58
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a690:	2300      	movs	r3, #0
 800a692:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3324      	adds	r3, #36	; 0x24
 800a698:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a69c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fa fcf1 	bl	8005088 <HAL_QSPI_Command>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	bf14      	ite	ne
 800a6ac:	2301      	movne	r3, #1
 800a6ae:	2300      	moveq	r3, #0
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x1ce>
		return QA_Fail;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e06b      	b.n	800a792 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//-----------------------------------------------------------
	//Configure Automatic Polling mode to wait for write enabling
	sCfg.Match           = MX25L512_SR_WREN;
 800a6ba:	2302      	movs	r3, #2
 800a6bc:	613b      	str	r3, [r7, #16]
	sCfg.Mask            = MX25L512_SR_WREN;
 800a6be:	2302      	movs	r3, #2
 800a6c0:	617b      	str	r3, [r7, #20]
	sCfg.MatchMode       = QSPI_MATCH_MODE_AND;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	623b      	str	r3, [r7, #32]
	sCfg.StatusBytesSize = 1;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	61fb      	str	r3, [r7, #28]
	sCfg.Interval        = 0x10;
 800a6ca:	2310      	movs	r3, #16
 800a6cc:	61bb      	str	r3, [r7, #24]
	sCfg.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800a6ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24

	sCmd.Instruction    = MX25L512_CMD_READ_STATUS_REG;
 800a6d4:	2305      	movs	r3, #5
 800a6d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.DataMode       = QSPI_DATA_1_LINE;
 800a6d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_QSPI_AutoPolling(&m_sHandle, &sCmd, &sCfg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a6e4:	f107 0210 	add.w	r2, r7, #16
 800a6e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a6ec:	f241 3388 	movw	r3, #5000	; 0x1388
 800a6f0:	f7fa fe57 	bl	80053a2 <HAL_QSPI_AutoPolling>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	bf14      	ite	ne
 800a6fa:	2301      	movne	r3, #1
 800a6fc:	2300      	moveq	r3, #0
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x21c>
		return QA_Fail;
 800a704:	2301      	movs	r3, #1
 800a706:	e044      	b.n	800a792 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//--------------------
	//Enable Quad SPI Mode
	sCmd.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800a708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a70c:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.Instruction       = MX25L512_CMD_WRITE_STATUS_CFG_REG;
 800a70e:	2301      	movs	r3, #1
 800a710:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800a712:	2300      	movs	r3, #0
 800a714:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a716:	2300      	movs	r3, #0
 800a718:	64bb      	str	r3, [r7, #72]	; 0x48
	sCmd.DataMode          = QSPI_DATA_1_LINE;
 800a71a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a71e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DummyCycles       = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.NbData            = 1;
 800a724:	2301      	movs	r3, #1
 800a726:	653b      	str	r3, [r7, #80]	; 0x50
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a728:	2300      	movs	r3, #0
 800a72a:	657b      	str	r3, [r7, #84]	; 0x54
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a72c:	2300      	movs	r3, #0
 800a72e:	65bb      	str	r3, [r7, #88]	; 0x58
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a730:	2300      	movs	r3, #0
 800a732:	65fb      	str	r3, [r7, #92]	; 0x5c

	uReg |= MX25L512_SR_QUADEN;
 800a734:	7bfb      	ldrb	r3, [r7, #15]
 800a736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	73fb      	strb	r3, [r7, #15]
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	3324      	adds	r3, #36	; 0x24
 800a742:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a746:	f241 3288 	movw	r2, #5000	; 0x1388
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fa fc9c 	bl	8005088 <HAL_QSPI_Command>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	bf14      	ite	ne
 800a756:	2301      	movne	r3, #1
 800a758:	2300      	moveq	r3, #0
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d001      	beq.n	800a764 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x278>
		return QA_Fail;
 800a760:	2301      	movs	r3, #1
 800a762:	e016      	b.n	800a792 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>
	if (HAL_QSPI_Transmit(&m_sHandle, &uReg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	3324      	adds	r3, #36	; 0x24
 800a768:	f107 010f 	add.w	r1, r7, #15
 800a76c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a770:	4618      	mov	r0, r3
 800a772:	f7fa fce7 	bl	8005144 <HAL_QSPI_Transmit>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	bf14      	ite	ne
 800a77c:	2301      	movne	r3, #1
 800a77e:	2300      	moveq	r3, #0
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	d001      	beq.n	800a78a <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x29e>
		return QA_Fail;
 800a786:	2301      	movs	r3, #1
 800a788:	e003      	b.n	800a792 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//---------------------------------------------------
	//40ms write status/configuration register cycle time
	HAL_Delay(40);
 800a78a:	2028      	movs	r0, #40	; 0x28
 800a78c:	f7f8 faea 	bl	8002d64 <HAL_Delay>

	//Return
	return QA_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3760      	adds	r7, #96	; 0x60
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv>:


//QAD_QuadSPI::imp_enterFourByteAddress
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_enterFourByteAddress(void) {
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b090      	sub	sp, #64	; 0x40
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef sCmd;

	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a7a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a7a6:	623b      	str	r3, [r7, #32]
	sCmd.Instruction       = MX25L512_CMD_ENTER_4_BYTE_ADDR_MODE;
 800a7a8:	23b7      	movs	r3, #183	; 0xb7
 800a7aa:	60bb      	str	r3, [r7, #8]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.DataMode          = QSPI_DATA_NONE;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.DummyCycles       = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	61fb      	str	r3, [r7, #28]
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (imp_writeEnable())
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fa53 	bl	800ac74 <_ZN11QAD_QuadSPI15imp_writeEnableEv>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	bf14      	ite	ne
 800a7d4:	2301      	movne	r3, #1
 800a7d6:	2300      	moveq	r3, #0
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv+0x48>
		return QA_Fail;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e022      	b.n	800a828 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv+0x8e>
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	3324      	adds	r3, #36	; 0x24
 800a7e6:	f107 0108 	add.w	r1, r7, #8
 800a7ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fa fc4a 	bl	8005088 <HAL_QSPI_Command>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	bf14      	ite	ne
 800a7fa:	2301      	movne	r3, #1
 800a7fc:	2300      	moveq	r3, #0
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv+0x6e>
		return QA_Fail;
 800a804:	2301      	movs	r3, #1
 800a806:	e00f      	b.n	800a828 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv+0x8e>
	if (imp_autoPollingMemReady(HAL_QSPI_TIMEOUT_DEFAULT_VALUE))
 800a808:	f241 3188 	movw	r1, #5000	; 0x1388
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fa87 	bl	800ad20 <_ZN11QAD_QuadSPI23imp_autoPollingMemReadyEm>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	bf14      	ite	ne
 800a818:	2301      	movne	r3, #1
 800a81a:	2300      	moveq	r3, #0
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d001      	beq.n	800a826 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv+0x8c>
		return QA_Fail;
 800a822:	2301      	movs	r3, #1
 800a824:	e000      	b.n	800a828 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv+0x8e>

	//Return
	return QA_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3740      	adds	r7, #64	; 0x40
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv>:


//QAD_QuadSPI::imp_dummyCyclesCfg
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_dummyCyclesCfg(void) {
 800a830:	b580      	push	{r7, lr}
 800a832:	b094      	sub	sp, #80	; 0x50
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef sCmd;
	uint8_t uReg[2];

	//--------------------
	//Read status register
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a838:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a83c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.Instruction       = MX25L512_CMD_READ_STATUS_REG;
 800a83e:	2305      	movs	r3, #5
 800a840:	613b      	str	r3, [r7, #16]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800a842:	2300      	movs	r3, #0
 800a844:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a846:	2300      	movs	r3, #0
 800a848:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 800a84a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800a84e:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DummyCycles       = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.NbData            = 1;
 800a854:	2301      	movs	r3, #1
 800a856:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a858:	2300      	movs	r3, #0
 800a85a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a85c:	2300      	movs	r3, #0
 800a85e:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a860:	2300      	movs	r3, #0
 800a862:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3324      	adds	r3, #36	; 0x24
 800a868:	f107 0110 	add.w	r1, r7, #16
 800a86c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a870:	4618      	mov	r0, r3
 800a872:	f7fa fc09 	bl	8005088 <HAL_QSPI_Command>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	bf14      	ite	ne
 800a87c:	2301      	movne	r3, #1
 800a87e:	2300      	moveq	r3, #0
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d001      	beq.n	800a88a <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x5a>
		return QA_Fail;
 800a886:	2301      	movs	r3, #1
 800a888:	e0b4      	b.n	800a9f4 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>
	if (HAL_QSPI_Receive(&m_sHandle, &(uReg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	3324      	adds	r3, #36	; 0x24
 800a88e:	f107 010c 	add.w	r1, r7, #12
 800a892:	f241 3288 	movw	r2, #5000	; 0x1388
 800a896:	4618      	mov	r0, r3
 800a898:	f7fa fce6 	bl	8005268 <HAL_QSPI_Receive>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	bf14      	ite	ne
 800a8a2:	2301      	movne	r3, #1
 800a8a4:	2300      	moveq	r3, #0
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x80>
		return QA_Fail;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e0a1      	b.n	800a9f4 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>

	//---------------------------
	//Read configuration register
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a8b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a8b4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.Instruction       = MX25L512_CMD_READ_CFG_REG;
 800a8b6:	2315      	movs	r3, #21
 800a8b8:	613b      	str	r3, [r7, #16]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 800a8c2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800a8c6:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DummyCycles       = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.NbData            = 1;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	3324      	adds	r3, #36	; 0x24
 800a8e0:	f107 0110 	add.w	r1, r7, #16
 800a8e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fa fbcd 	bl	8005088 <HAL_QSPI_Command>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bf14      	ite	ne
 800a8f4:	2301      	movne	r3, #1
 800a8f6:	2300      	moveq	r3, #0
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0xd2>
		return QA_Fail;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e078      	b.n	800a9f4 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>
	if (HAL_QSPI_Receive(&m_sHandle, &(uReg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a908:	f107 030c 	add.w	r3, r7, #12
 800a90c:	3301      	adds	r3, #1
 800a90e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a912:	4619      	mov	r1, r3
 800a914:	f7fa fca8 	bl	8005268 <HAL_QSPI_Receive>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	bf14      	ite	ne
 800a91e:	2301      	movne	r3, #1
 800a920:	2300      	moveq	r3, #0
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0xfc>
		return QA_Fail;
 800a928:	2301      	movs	r3, #1
 800a92a:	e063      	b.n	800a9f4 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>

	//-----------------------
	//Enable Write Operations
	if (imp_writeEnable())
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f9a1 	bl	800ac74 <_ZN11QAD_QuadSPI15imp_writeEnableEv>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	bf14      	ite	ne
 800a938:	2301      	movne	r3, #1
 800a93a:	2300      	moveq	r3, #0
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x116>
		return QA_Fail;
 800a942:	2301      	movs	r3, #1
 800a944:	e056      	b.n	800a9f4 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>

	//---------------------------------------------------
	//Update Configuration Register with new dummy cycles
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a946:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a94a:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.Instruction       = MX25L512_CMD_WRITE_STATUS_CFG_REG;
 800a94c:	2301      	movs	r3, #1
 800a94e:	613b      	str	r3, [r7, #16]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800a950:	2300      	movs	r3, #0
 800a952:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a954:	2300      	movs	r3, #0
 800a956:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 800a958:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800a95c:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DummyCycles       = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.NbData            = 2;
 800a962:	2302      	movs	r3, #2
 800a964:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a966:	2300      	movs	r3, #0
 800a968:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a96a:	2300      	movs	r3, #0
 800a96c:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a96e:	2300      	movs	r3, #0
 800a970:	647b      	str	r3, [r7, #68]	; 0x44

	//MX25L512_DUMMY_CYCLES_READ_QUAD = 3 (10 cycles in QPI mode)
	MODIFY_REG(uReg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 800a972:	7b7b      	ldrb	r3, [r7, #13]
 800a974:	b25b      	sxtb	r3, r3
 800a976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a97a:	b25a      	sxtb	r2, r3
 800a97c:	23c0      	movs	r3, #192	; 0xc0
 800a97e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a982:	fa93 f3a3 	rbit	r3, r3
 800a986:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800a988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a98a:	fab3 f383 	clz	r3, r3
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	4619      	mov	r1, r3
 800a992:	2303      	movs	r3, #3
 800a994:	408b      	lsls	r3, r1
 800a996:	b25b      	sxtb	r3, r3
 800a998:	4313      	orrs	r3, r2
 800a99a:	b25b      	sxtb	r3, r3
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	737b      	strb	r3, [r7, #13]

	//Configure the write volatile configuration register command
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	3324      	adds	r3, #36	; 0x24
 800a9a4:	f107 0110 	add.w	r1, r7, #16
 800a9a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fa fb6b 	bl	8005088 <HAL_QSPI_Command>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bf14      	ite	ne
 800a9b8:	2301      	movne	r3, #1
 800a9ba:	2300      	moveq	r3, #0
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x196>
		return QA_Fail;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e016      	b.n	800a9f4 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>
	if (HAL_QSPI_Transmit(&m_sHandle, &(uReg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	3324      	adds	r3, #36	; 0x24
 800a9ca:	f107 010c 	add.w	r1, r7, #12
 800a9ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fa fbb6 	bl	8005144 <HAL_QSPI_Transmit>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	bf14      	ite	ne
 800a9de:	2301      	movne	r3, #1
 800a9e0:	2300      	moveq	r3, #0
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1bc>
		return QA_Fail;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e003      	b.n	800a9f4 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>

	//40ms - Write Status/Configuration Register Cycle Time
	HAL_Delay(40);
 800a9ec:	2028      	movs	r0, #40	; 0x28
 800a9ee:	f7f8 f9b9 	bl	8002d64 <HAL_Delay>

	//Return
	return QA_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3750      	adds	r7, #80	; 0x50
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <_ZN11QAD_QuadSPI18imp_enterMemoryQPIEv>:


//QAD_QuadSPI::imp_enterMemoryQPI
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_enterMemoryQPI(void) {
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b096      	sub	sp, #88	; 0x58
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef     sCmd;
	QSPI_AutoPollingTypeDef sCfg;

	//Send QPI Enable Command
	sCmd.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800aa04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa08:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.Instruction       = MX25L512_CMD_ENTER_QUAD_MODE;
 800aa0a:	2335      	movs	r3, #53	; 0x35
 800aa0c:	623b      	str	r3, [r7, #32]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800aa12:	2300      	movs	r3, #0
 800aa14:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.DataMode          = QSPI_DATA_NONE;
 800aa16:	2300      	movs	r3, #0
 800aa18:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.DummyCycles       = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800aa22:	2300      	movs	r3, #0
 800aa24:	653b      	str	r3, [r7, #80]	; 0x50
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800aa26:	2300      	movs	r3, #0
 800aa28:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	3324      	adds	r3, #36	; 0x24
 800aa2e:	f107 0120 	add.w	r1, r7, #32
 800aa32:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fa fb26 	bl	8005088 <HAL_QSPI_Command>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	bf14      	ite	ne
 800aa42:	2301      	movne	r3, #1
 800aa44:	2300      	moveq	r3, #0
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <_ZN11QAD_QuadSPI18imp_enterMemoryQPIEv+0x54>
		return QA_Fail;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e02a      	b.n	800aaa6 <_ZN11QAD_QuadSPI18imp_enterMemoryQPIEv+0xaa>

	//Configure automatic polling mode to wait for QUADEN bit=1 and WIP bit=0
	sCfg.Match           = MX25L512_SR_QUADEN;
 800aa50:	2340      	movs	r3, #64	; 0x40
 800aa52:	60bb      	str	r3, [r7, #8]
	sCfg.Mask            = MX25L512_SR_QUADEN | MX25L512_SR_WIP;
 800aa54:	2341      	movs	r3, #65	; 0x41
 800aa56:	60fb      	str	r3, [r7, #12]
	sCfg.MatchMode       = QSPI_MATCH_MODE_AND;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	61bb      	str	r3, [r7, #24]
	sCfg.StatusBytesSize = 1;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	617b      	str	r3, [r7, #20]
	sCfg.Interval        = 0x10;
 800aa60:	2310      	movs	r3, #16
 800aa62:	613b      	str	r3, [r7, #16]
	sCfg.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800aa64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aa68:	61fb      	str	r3, [r7, #28]

	sCmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800aa6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aa6e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.Instruction     = MX25L512_CMD_READ_STATUS_REG;
 800aa70:	2305      	movs	r3, #5
 800aa72:	623b      	str	r3, [r7, #32]
	sCmd.DataMode        = QSPI_DATA_4_LINES;
 800aa74:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800aa78:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_QSPI_AutoPolling(&m_sHandle, &sCmd, &sCfg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800aa80:	f107 0208 	add.w	r2, r7, #8
 800aa84:	f107 0120 	add.w	r1, r7, #32
 800aa88:	f241 3388 	movw	r3, #5000	; 0x1388
 800aa8c:	f7fa fc89 	bl	80053a2 <HAL_QSPI_AutoPolling>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	bf14      	ite	ne
 800aa96:	2301      	movne	r3, #1
 800aa98:	2300      	moveq	r3, #0
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <_ZN11QAD_QuadSPI18imp_enterMemoryQPIEv+0xa8>
		return QA_Fail;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e000      	b.n	800aaa6 <_ZN11QAD_QuadSPI18imp_enterMemoryQPIEv+0xaa>

	//Return
	return QA_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3758      	adds	r7, #88	; 0x58
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv>:
}


//QAD_QuadSPI::imp_outputDriveStrengthCfg
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_outputDriveStrengthCfg(void) {
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b094      	sub	sp, #80	; 0x50
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef sCmd;
	uint8_t uReg[2];

	//--------------------
	//Read Status Register
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800aab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aaba:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.Instruction       = MX25L512_CMD_READ_STATUS_REG;
 800aabc:	2305      	movs	r3, #5
 800aabe:	613b      	str	r3, [r7, #16]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800aac0:	2300      	movs	r3, #0
 800aac2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800aac4:	2300      	movs	r3, #0
 800aac6:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 800aac8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800aacc:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DummyCycles       = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.NbData            = 1;
 800aad2:	2301      	movs	r3, #1
 800aad4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800aad6:	2300      	movs	r3, #0
 800aad8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800aada:	2300      	movs	r3, #0
 800aadc:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800aade:	2300      	movs	r3, #0
 800aae0:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	3324      	adds	r3, #36	; 0x24
 800aae6:	f107 0110 	add.w	r1, r7, #16
 800aaea:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fa faca 	bl	8005088 <HAL_QSPI_Command>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	bf14      	ite	ne
 800aafa:	2301      	movne	r3, #1
 800aafc:	2300      	moveq	r3, #0
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x5a>
		return QA_Fail;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e0b1      	b.n	800ac6c <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>
	if (HAL_QSPI_Receive(&m_sHandle, &(uReg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	3324      	adds	r3, #36	; 0x24
 800ab0c:	f107 010c 	add.w	r1, r7, #12
 800ab10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fa fba7 	bl	8005268 <HAL_QSPI_Receive>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	bf14      	ite	ne
 800ab20:	2301      	movne	r3, #1
 800ab22:	2300      	moveq	r3, #0
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d001      	beq.n	800ab2e <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x80>
		return QA_Fail;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e09e      	b.n	800ac6c <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>

	//--------------------
	//Read Config Register
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ab2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab32:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.Instruction       = MX25L512_CMD_READ_CFG_REG;
 800ab34:	2315      	movs	r3, #21
 800ab36:	613b      	str	r3, [r7, #16]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 800ab40:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ab44:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DummyCycles       = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.NbData            = 1;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ab52:	2300      	movs	r3, #0
 800ab54:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ab56:	2300      	movs	r3, #0
 800ab58:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	3324      	adds	r3, #36	; 0x24
 800ab5e:	f107 0110 	add.w	r1, r7, #16
 800ab62:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fa fa8e 	bl	8005088 <HAL_QSPI_Command>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	bf14      	ite	ne
 800ab72:	2301      	movne	r3, #1
 800ab74:	2300      	moveq	r3, #0
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0xd2>
		return QA_Fail;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e075      	b.n	800ac6c <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>
	if (HAL_QSPI_Receive(&m_sHandle, &(uReg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ab86:	f107 030c 	add.w	r3, r7, #12
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab90:	4619      	mov	r1, r3
 800ab92:	f7fa fb69 	bl	8005268 <HAL_QSPI_Receive>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	bf14      	ite	ne
 800ab9c:	2301      	movne	r3, #1
 800ab9e:	2300      	moveq	r3, #0
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0xfc>
		return QA_Fail;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e060      	b.n	800ac6c <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>

	//-----------------------
	//Enable write operations
	if (imp_writeEnable() != 0)
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f862 	bl	800ac74 <_ZN11QAD_QuadSPI15imp_writeEnableEv>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	bf14      	ite	ne
 800abb6:	2301      	movne	r3, #1
 800abb8:	2300      	moveq	r3, #0
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d001      	beq.n	800abc4 <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x116>
		return QA_Fail;
 800abc0:	2301      	movs	r3, #1
 800abc2:	e053      	b.n	800ac6c <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>

	//----------------------------------------------------------------
	//Update the configuration register with new output drive strength
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800abc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800abc8:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.Instruction       = MX25L512_CMD_WRITE_STATUS_CFG_REG;
 800abca:	2301      	movs	r3, #1
 800abcc:	613b      	str	r3, [r7, #16]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800abce:	2300      	movs	r3, #0
 800abd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800abd2:	2300      	movs	r3, #0
 800abd4:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 800abd6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800abda:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DummyCycles       = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.NbData            = 2;
 800abe0:	2302      	movs	r3, #2
 800abe2:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800abe4:	2300      	movs	r3, #0
 800abe6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800abe8:	2300      	movs	r3, #0
 800abea:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800abec:	2300      	movs	r3, #0
 800abee:	647b      	str	r3, [r7, #68]	; 0x44
	MODIFY_REG( uReg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 800abf0:	7b7b      	ldrb	r3, [r7, #13]
 800abf2:	b25b      	sxtb	r3, r3
 800abf4:	f023 0307 	bic.w	r3, r3, #7
 800abf8:	b25a      	sxtb	r2, r3
 800abfa:	2307      	movs	r3, #7
 800abfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac00:	fa93 f3a3 	rbit	r3, r3
 800ac04:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800ac06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac08:	fab3 f383 	clz	r3, r3
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	4619      	mov	r1, r3
 800ac10:	2306      	movs	r3, #6
 800ac12:	408b      	lsls	r3, r1
 800ac14:	b25b      	sxtb	r3, r3
 800ac16:	4313      	orrs	r3, r2
 800ac18:	b25b      	sxtb	r3, r3
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	737b      	strb	r3, [r7, #13]
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	3324      	adds	r3, #36	; 0x24
 800ac22:	f107 0110 	add.w	r1, r7, #16
 800ac26:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fa fa2c 	bl	8005088 <HAL_QSPI_Command>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	bf14      	ite	ne
 800ac36:	2301      	movne	r3, #1
 800ac38:	2300      	moveq	r3, #0
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x196>
		return QA_Fail;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e013      	b.n	800ac6c <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>
	if (HAL_QSPI_Transmit(&m_sHandle, &(uReg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	3324      	adds	r3, #36	; 0x24
 800ac48:	f107 010c 	add.w	r1, r7, #12
 800ac4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fa fa77 	bl	8005144 <HAL_QSPI_Transmit>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	bf14      	ite	ne
 800ac5c:	2301      	movne	r3, #1
 800ac5e:	2300      	moveq	r3, #0
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1bc>
		return QA_Fail;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e000      	b.n	800ac6c <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>

	//Return
	return QA_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3750      	adds	r7, #80	; 0x50
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <_ZN11QAD_QuadSPI15imp_writeEnableEv>:


//QAD_QuadSPI::imp_writeEnable
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_writeEnable(void) {
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b096      	sub	sp, #88	; 0x58
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef     sCmd;
	QSPI_AutoPollingTypeDef sCfg;

	//-----------------------
	//Enable write operations
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ac7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ac80:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.Instruction       = MX25L512_CMD_WRITE_ENABLE;
 800ac82:	2306      	movs	r3, #6
 800ac84:	623b      	str	r3, [r7, #32]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800ac86:	2300      	movs	r3, #0
 800ac88:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.DataMode          = QSPI_DATA_NONE;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.DummyCycles       = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ac96:	2300      	movs	r3, #0
 800ac98:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	653b      	str	r3, [r7, #80]	; 0x50
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	3324      	adds	r3, #36	; 0x24
 800aca6:	f107 0120 	add.w	r1, r7, #32
 800acaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fa f9ea 	bl	8005088 <HAL_QSPI_Command>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	bf14      	ite	ne
 800acba:	2301      	movne	r3, #1
 800acbc:	2300      	moveq	r3, #0
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <_ZN11QAD_QuadSPI15imp_writeEnableEv+0x54>
		return QA_Fail;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e027      	b.n	800ad18 <_ZN11QAD_QuadSPI15imp_writeEnableEv+0xa4>

	//-----------------------------------------------------------
	//Configure automatic polling mode to wait for write enabling
	sCfg.Match           = MX25L512_SR_WREN;
 800acc8:	2302      	movs	r3, #2
 800acca:	60bb      	str	r3, [r7, #8]
	sCfg.Mask            = MX25L512_SR_WREN;
 800accc:	2302      	movs	r3, #2
 800acce:	60fb      	str	r3, [r7, #12]
	sCfg.MatchMode       = QSPI_MATCH_MODE_AND;
 800acd0:	2300      	movs	r3, #0
 800acd2:	61bb      	str	r3, [r7, #24]
	sCfg.StatusBytesSize = 1;
 800acd4:	2301      	movs	r3, #1
 800acd6:	617b      	str	r3, [r7, #20]
	sCfg.Interval        = 0x10;
 800acd8:	2310      	movs	r3, #16
 800acda:	613b      	str	r3, [r7, #16]
	sCfg.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800acdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ace0:	61fb      	str	r3, [r7, #28]

	sCmd.Instruction     = MX25L512_CMD_READ_STATUS_REG;
 800ace2:	2305      	movs	r3, #5
 800ace4:	623b      	str	r3, [r7, #32]
	sCmd.DataMode        = QSPI_DATA_4_LINES;
 800ace6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800acea:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_QSPI_AutoPolling(&m_sHandle, &sCmd, &sCfg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800acf2:	f107 0208 	add.w	r2, r7, #8
 800acf6:	f107 0120 	add.w	r1, r7, #32
 800acfa:	f241 3388 	movw	r3, #5000	; 0x1388
 800acfe:	f7fa fb50 	bl	80053a2 <HAL_QSPI_AutoPolling>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	bf14      	ite	ne
 800ad08:	2301      	movne	r3, #1
 800ad0a:	2300      	moveq	r3, #0
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d001      	beq.n	800ad16 <_ZN11QAD_QuadSPI15imp_writeEnableEv+0xa2>
		return QA_Fail;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e000      	b.n	800ad18 <_ZN11QAD_QuadSPI15imp_writeEnableEv+0xa4>

	//Return
	return QA_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3758      	adds	r7, #88	; 0x58
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <_ZN11QAD_QuadSPI23imp_autoPollingMemReadyEm>:


//QAD_QuadSPI::imp_autoPollingMemReady
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_autoPollingMemReady(uint32_t uTimeout) {
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b096      	sub	sp, #88	; 0x58
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef     sCmd;
	QSPI_AutoPollingTypeDef sCfg;

	//Configure automatic polling mode to wait for memory ready
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ad2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad2e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.Instruction       = MX25L512_CMD_READ_STATUS_REG;
 800ad30:	2305      	movs	r3, #5
 800ad32:	623b      	str	r3, [r7, #32]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800ad34:	2300      	movs	r3, #0
 800ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 800ad3c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ad40:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.DummyCycles       = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ad46:	2300      	movs	r3, #0
 800ad48:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	653b      	str	r3, [r7, #80]	; 0x50
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	657b      	str	r3, [r7, #84]	; 0x54

	sCfg.Match            = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	60bb      	str	r3, [r7, #8]
	sCfg.Mask             = MX25L512_SR_WIP;
 800ad56:	2301      	movs	r3, #1
 800ad58:	60fb      	str	r3, [r7, #12]
	sCfg.MatchMode        = QSPI_MATCH_MODE_AND;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	61bb      	str	r3, [r7, #24]
	sCfg.StatusBytesSize  = 1;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	617b      	str	r3, [r7, #20]
	sCfg.Interval         = 0x10;
 800ad62:	2310      	movs	r3, #16
 800ad64:	613b      	str	r3, [r7, #16]
	sCfg.AutomaticStop    = QSPI_AUTOMATIC_STOP_ENABLE;
 800ad66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad6a:	61fb      	str	r3, [r7, #28]

	if (HAL_QSPI_AutoPolling(&m_sHandle, &sCmd, &sCfg, uTimeout) != HAL_OK)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ad72:	f107 0208 	add.w	r2, r7, #8
 800ad76:	f107 0120 	add.w	r1, r7, #32
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	f7fa fb11 	bl	80053a2 <HAL_QSPI_AutoPolling>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	bf14      	ite	ne
 800ad86:	2301      	movne	r3, #1
 800ad88:	2300      	moveq	r3, #0
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <_ZN11QAD_QuadSPI23imp_autoPollingMemReadyEm+0x74>
		return QA_Fail;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e000      	b.n	800ad96 <_ZN11QAD_QuadSPI23imp_autoPollingMemReadyEm+0x76>

	//Return No Error
	return QA_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3758      	adds	r7, #88	; 0x58
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
	...

0800ada0 <_ZN7QAD_RNG8imp_initEv>:
//QAD_RNG Initialization Method
//
//To be called from static method init()
//Used to initialize the RNG peripheral
//Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
QA_Result QAD_RNG::imp_init(void) {
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]

	//Check peripheral is not already initialized, and return QA_OK if it is
  if (m_eInitState)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d001      	beq.n	800adb4 <_ZN7QAD_RNG8imp_initEv+0x14>
  	return QA_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	e033      	b.n	800ae1c <_ZN7QAD_RNG8imp_initEv+0x7c>

  //Enable RNG Peripheral Clock
  __HAL_RCC_RNG_CLK_ENABLE();
 800adb4:	4b1b      	ldr	r3, [pc, #108]	; (800ae24 <_ZN7QAD_RNG8imp_initEv+0x84>)
 800adb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb8:	4a1a      	ldr	r2, [pc, #104]	; (800ae24 <_ZN7QAD_RNG8imp_initEv+0x84>)
 800adba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adbe:	6353      	str	r3, [r2, #52]	; 0x34
 800adc0:	4b18      	ldr	r3, [pc, #96]	; (800ae24 <_ZN7QAD_RNG8imp_initEv+0x84>)
 800adc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc8:	60fb      	str	r3, [r7, #12]
 800adca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_RNG_FORCE_RESET();
 800adcc:	4b15      	ldr	r3, [pc, #84]	; (800ae24 <_ZN7QAD_RNG8imp_initEv+0x84>)
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	4a14      	ldr	r2, [pc, #80]	; (800ae24 <_ZN7QAD_RNG8imp_initEv+0x84>)
 800add2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800add6:	6153      	str	r3, [r2, #20]
  __HAL_RCC_RNG_RELEASE_RESET();
 800add8:	4b12      	ldr	r3, [pc, #72]	; (800ae24 <_ZN7QAD_RNG8imp_initEv+0x84>)
 800adda:	695b      	ldr	r3, [r3, #20]
 800addc:	4a11      	ldr	r2, [pc, #68]	; (800ae24 <_ZN7QAD_RNG8imp_initEv+0x84>)
 800adde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ade2:	6153      	str	r3, [r2, #20]

  //Initialize RNG Peripheral
  m_sHandle.Instance = RNG;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a10      	ldr	r2, [pc, #64]	; (800ae28 <_ZN7QAD_RNG8imp_initEv+0x88>)
 800ade8:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&m_sHandle) != HAL_OK) {
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	3304      	adds	r3, #4
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fb fdc6 	bl	8006980 <HAL_RNG_Init>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	bf14      	ite	ne
 800adfa:	2301      	movne	r3, #1
 800adfc:	2300      	moveq	r3, #0
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d007      	beq.n	800ae14 <_ZN7QAD_RNG8imp_initEv+0x74>
  	__HAL_RCC_RNG_CLK_DISABLE();
 800ae04:	4b07      	ldr	r3, [pc, #28]	; (800ae24 <_ZN7QAD_RNG8imp_initEv+0x84>)
 800ae06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae08:	4a06      	ldr	r2, [pc, #24]	; (800ae24 <_ZN7QAD_RNG8imp_initEv+0x84>)
 800ae0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae0e:	6353      	str	r3, [r2, #52]	; 0x34
  	return QA_Fail;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e003      	b.n	800ae1c <_ZN7QAD_RNG8imp_initEv+0x7c>
  }

  //Set Driver State as being initialized
  m_eInitState = QA_Initialized;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	701a      	strb	r2, [r3, #0]

  //Return
  return QA_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	40023800 	.word	0x40023800
 800ae28:	50060800 	.word	0x50060800

0800ae2c <_ZN7QAD_RTC8imp_initEv>:
//QAD_RTC Initialization Method
//
//To be called by static method init()
//Used to initialize the RTC peripheral
//Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
QA_Result QAD_RTC::imp_init(void) {
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
	if (m_eInitState)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <_ZN7QAD_RTC8imp_initEv+0x14>
		return QA_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	e045      	b.n	800aecc <_ZN7QAD_RTC8imp_initEv+0xa0>

	//Enable RTC Clock
	__HAL_RCC_RTC_CLK_ENABLE();
 800ae40:	4b24      	ldr	r3, [pc, #144]	; (800aed4 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 800ae42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae44:	4a23      	ldr	r2, [pc, #140]	; (800aed4 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 800ae46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae4a:	6413      	str	r3, [r2, #64]	; 0x40
 800ae4c:	4b21      	ldr	r3, [pc, #132]	; (800aed4 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 800ae4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae54:	60fb      	str	r3, [r7, #12]
 800ae56:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_RTC_ENABLE();
 800ae58:	4b1e      	ldr	r3, [pc, #120]	; (800aed4 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 800ae5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae5c:	4a1d      	ldr	r2, [pc, #116]	; (800aed4 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 800ae5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae62:	6713      	str	r3, [r2, #112]	; 0x70

	//Init RTC Peripheral
	m_sHandle.Instance               = RTC;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a1c      	ldr	r2, [pc, #112]	; (800aed8 <_ZN7QAD_RTC8imp_initEv+0xac>)
 800ae68:	605a      	str	r2, [r3, #4]
	m_sHandle.Init.HourFormat        = RTC_HOURFORMAT_24;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	609a      	str	r2, [r3, #8]
	m_sHandle.Init.AsynchPrediv      = 127;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	227f      	movs	r2, #127	; 0x7f
 800ae74:	60da      	str	r2, [r3, #12]
	m_sHandle.Init.SynchPrediv       = 255;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	22ff      	movs	r2, #255	; 0xff
 800ae7a:	611a      	str	r2, [r3, #16]
	m_sHandle.Init.OutPut            = RTC_OUTPUT_DISABLE;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	615a      	str	r2, [r3, #20]
	m_sHandle.Init.OutPutPolarity    = RTC_OUTPUT_POLARITY_HIGH;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	619a      	str	r2, [r3, #24]
	m_sHandle.Init.OutPutType        = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&m_sHandle) != HAL_OK) {
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	3304      	adds	r3, #4
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fb fda8 	bl	80069e8 <HAL_RTC_Init>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	bf14      	ite	ne
 800ae9e:	2301      	movne	r3, #1
 800aea0:	2300      	moveq	r3, #0
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00d      	beq.n	800aec4 <_ZN7QAD_RTC8imp_initEv+0x98>
		__HAL_RCC_RTC_DISABLE();
 800aea8:	4b0a      	ldr	r3, [pc, #40]	; (800aed4 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 800aeaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeac:	4a09      	ldr	r2, [pc, #36]	; (800aed4 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 800aeae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aeb2:	6713      	str	r3, [r2, #112]	; 0x70
		__HAL_RCC_RTC_CLK_DISABLE();
 800aeb4:	4b07      	ldr	r3, [pc, #28]	; (800aed4 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 800aeb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb8:	4a06      	ldr	r2, [pc, #24]	; (800aed4 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 800aeba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aebe:	6413      	str	r3, [r2, #64]	; 0x40
		return QA_Fail;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e003      	b.n	800aecc <_ZN7QAD_RTC8imp_initEv+0xa0>
	}

	//Update m_sTime and m_sDate with values currently stored in RTC
	imp_update();
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f809 	bl	800aedc <_ZN7QAD_RTC10imp_updateEv>

	//Return
	return QA_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	40023800 	.word	0x40023800
 800aed8:	40002800 	.word	0x40002800

0800aedc <_ZN7QAD_RTC10imp_updateEv>:
//
//To be called from static update() method
//Captures the current time and date and stores in m_sTime and m_sDate, so that values can
//be retrieved by the below data methods
//Returns QA_OK if successful, or QA_Fail if unable to get the current time/date
QA_Result QAD_RTC::imp_update(void) {
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]

	//Retrieve current time values from RTC and store in m_sTime structure in binary format
	//Return QA_Fail if not successful
	if (HAL_RTC_GetTime(&m_sHandle, &m_sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	1d18      	adds	r0, r3, #4
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	3324      	adds	r3, #36	; 0x24
 800aeec:	2200      	movs	r2, #0
 800aeee:	4619      	mov	r1, r3
 800aef0:	f7fb fe16 	bl	8006b20 <HAL_RTC_GetTime>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	bf14      	ite	ne
 800aefa:	2301      	movne	r3, #1
 800aefc:	2300      	moveq	r3, #0
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	2b00      	cmp	r3, #0
 800af02:	d001      	beq.n	800af08 <_ZN7QAD_RTC10imp_updateEv+0x2c>
		return QA_Fail;
 800af04:	2301      	movs	r3, #1
 800af06:	e012      	b.n	800af2e <_ZN7QAD_RTC10imp_updateEv+0x52>
	}

	//Retrieve current date values from RTC and store in m_sDate structure in binary format
	//Return QA_Fail if not successful
	if (HAL_RTC_GetDate(&m_sHandle, &m_sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	1d18      	adds	r0, r3, #4
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	333c      	adds	r3, #60	; 0x3c
 800af10:	2200      	movs	r2, #0
 800af12:	4619      	mov	r1, r3
 800af14:	f7fb fe62 	bl	8006bdc <HAL_RTC_GetDate>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	bf14      	ite	ne
 800af1e:	2301      	movne	r3, #1
 800af20:	2300      	moveq	r3, #0
 800af22:	b2db      	uxtb	r3, r3
 800af24:	2b00      	cmp	r3, #0
 800af26:	d001      	beq.n	800af2c <_ZN7QAD_RTC10imp_updateEv+0x50>
		return QA_Fail;
 800af28:	2301      	movs	r3, #1
 800af2a:	e000      	b.n	800af2e <_ZN7QAD_RTC10imp_updateEv+0x52>
	}

	//Return
	return QA_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <_ZN9QAD_SDMMC8imp_initEv>:
	//--------------------------------
	//QAD_SDMMC Initialization Methods

//QAD_SDMMC::imp_init
//QAD_SDMMC Initialization Method
QA_Result QAD_SDMMC::imp_init(void) {
 800af36:	b580      	push	{r7, lr}
 800af38:	b082      	sub	sp, #8
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  if (m_eInitState)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	791b      	ldrb	r3, [r3, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d001      	beq.n	800af4a <_ZN9QAD_SDMMC8imp_initEv+0x14>
  	return QA_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	e013      	b.n	800af72 <_ZN9QAD_SDMMC8imp_initEv+0x3c>

  //Initialization Peripheral
  if (imp_periphInit())
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 f816 	bl	800af7c <_ZN9QAD_SDMMC14imp_periphInitEv>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	bf14      	ite	ne
 800af56:	2301      	movne	r3, #1
 800af58:	2300      	moveq	r3, #0
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d001      	beq.n	800af64 <_ZN9QAD_SDMMC8imp_initEv+0x2e>
  	return QA_Fail;
 800af60:	2301      	movs	r3, #1
 800af62:	e006      	b.n	800af72 <_ZN9QAD_SDMMC8imp_initEv+0x3c>

  //Set Driver States
  m_eInitState   = QA_Initialized;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	711a      	strb	r2, [r3, #4]
  m_eCardState   = QAD_SDMMC_State_NoCard;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	715a      	strb	r2, [r3, #5]

  //Return
  return QA_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
	...

0800af7c <_ZN9QAD_SDMMC14imp_periphInitEv>:
	//-------------------------------------------
	//QAD_SDMMC Peripheral Initialization Methods

//QAD_SDMMC::imp_periphInit
//QAD_SDMMC Peripheral Initialization Method
QA_Result QAD_SDMMC::imp_periphInit(void) {
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b088      	sub	sp, #32
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 800af84:	f107 030c 	add.w	r3, r7, #12
 800af88:	2200      	movs	r2, #0
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	605a      	str	r2, [r3, #4]
 800af8e:	609a      	str	r2, [r3, #8]
 800af90:	60da      	str	r2, [r3, #12]
 800af92:	611a      	str	r2, [r3, #16]

	//----------------
	//Initialize GPIOs

		//Card Detect
	GPIO_Init.Pin       = QAD_SDMMC_CARDDETECT_PIN;
 800af94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af98:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_INPUT;
 800af9a:	2300      	movs	r3, #0
 800af9c:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;
 800af9e:	2301      	movs	r3, #1
 800afa0:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800afa2:	2300      	movs	r3, #0
 800afa4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(QAD_SDMMC_CARDDETECT_PORT, &GPIO_Init);
 800afa6:	f107 030c 	add.w	r3, r7, #12
 800afaa:	4619      	mov	r1, r3
 800afac:	482b      	ldr	r0, [pc, #172]	; (800b05c <_ZN9QAD_SDMMC14imp_periphInitEv+0xe0>)
 800afae:	f7f8 fd5d 	bl	8003a6c <HAL_GPIO_Init>

		//SDMMC Clock
	GPIO_Init.Pin       = QAD_SDMMC_CLK_PIN;
 800afb2:	2340      	movs	r3, #64	; 0x40
 800afb4:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800afb6:	2302      	movs	r3, #2
 800afb8:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;
 800afba:	2301      	movs	r3, #1
 800afbc:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800afbe:	2303      	movs	r3, #3
 800afc0:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = QAD_SDMMC_CLK_AF;
 800afc2:	230b      	movs	r3, #11
 800afc4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_SDMMC_CLK_PORT, &GPIO_Init);
 800afc6:	f107 030c 	add.w	r3, r7, #12
 800afca:	4619      	mov	r1, r3
 800afcc:	4824      	ldr	r0, [pc, #144]	; (800b060 <_ZN9QAD_SDMMC14imp_periphInitEv+0xe4>)
 800afce:	f7f8 fd4d 	bl	8003a6c <HAL_GPIO_Init>

		//SDMMC Command
	GPIO_Init.Pin       = QAD_SDMMC_CMD_PIN;
 800afd2:	2380      	movs	r3, #128	; 0x80
 800afd4:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Alternate = QAD_SDMMC_CMD_AF;
 800afd6:	230b      	movs	r3, #11
 800afd8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_SDMMC_CMD_PORT, &GPIO_Init);
 800afda:	f107 030c 	add.w	r3, r7, #12
 800afde:	4619      	mov	r1, r3
 800afe0:	481f      	ldr	r0, [pc, #124]	; (800b060 <_ZN9QAD_SDMMC14imp_periphInitEv+0xe4>)
 800afe2:	f7f8 fd43 	bl	8003a6c <HAL_GPIO_Init>

		//SDMMC Data 0
	GPIO_Init.Pin       = QAD_SDMMC_DATA0_PIN;
 800afe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afea:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Alternate = QAD_SDMMC_DATA0_AF;
 800afec:	230b      	movs	r3, #11
 800afee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_SDMMC_DATA0_PORT, &GPIO_Init);
 800aff0:	f107 030c 	add.w	r3, r7, #12
 800aff4:	4619      	mov	r1, r3
 800aff6:	481b      	ldr	r0, [pc, #108]	; (800b064 <_ZN9QAD_SDMMC14imp_periphInitEv+0xe8>)
 800aff8:	f7f8 fd38 	bl	8003a6c <HAL_GPIO_Init>

		//SDMMC Data 1
	GPIO_Init.Pin       = QAD_SDMMC_DATA1_PIN;
 800affc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b000:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Alternate = QAD_SDMMC_DATA1_AF;
 800b002:	230b      	movs	r3, #11
 800b004:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_SDMMC_DATA1_PORT, &GPIO_Init);
 800b006:	f107 030c 	add.w	r3, r7, #12
 800b00a:	4619      	mov	r1, r3
 800b00c:	4815      	ldr	r0, [pc, #84]	; (800b064 <_ZN9QAD_SDMMC14imp_periphInitEv+0xe8>)
 800b00e:	f7f8 fd2d 	bl	8003a6c <HAL_GPIO_Init>

		//SDMMC Data 2
	GPIO_Init.Pin       = QAD_SDMMC_DATA2_PIN;
 800b012:	2308      	movs	r3, #8
 800b014:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Alternate = QAD_SDMMC_DATA2_AF;
 800b016:	230a      	movs	r3, #10
 800b018:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_SDMMC_DATA2_PORT, &GPIO_Init);
 800b01a:	f107 030c 	add.w	r3, r7, #12
 800b01e:	4619      	mov	r1, r3
 800b020:	4811      	ldr	r0, [pc, #68]	; (800b068 <_ZN9QAD_SDMMC14imp_periphInitEv+0xec>)
 800b022:	f7f8 fd23 	bl	8003a6c <HAL_GPIO_Init>

		//SDMMC Data 3
	GPIO_Init.Pin       = QAD_SDMMC_DATA3_PIN;
 800b026:	2310      	movs	r3, #16
 800b028:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Alternate = QAD_SDMMC_DATA3_AF;
 800b02a:	230a      	movs	r3, #10
 800b02c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_SDMMC_DATA3_PORT, &GPIO_Init);
 800b02e:	f107 030c 	add.w	r3, r7, #12
 800b032:	4619      	mov	r1, r3
 800b034:	480c      	ldr	r0, [pc, #48]	; (800b068 <_ZN9QAD_SDMMC14imp_periphInitEv+0xec>)
 800b036:	f7f8 fd19 	bl	8003a6c <HAL_GPIO_Init>


	//------------------
	//Enable SDMMC Clock
	__HAL_RCC_SDMMC2_CLK_ENABLE();
 800b03a:	4b0c      	ldr	r3, [pc, #48]	; (800b06c <_ZN9QAD_SDMMC14imp_periphInitEv+0xf0>)
 800b03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b03e:	4a0b      	ldr	r2, [pc, #44]	; (800b06c <_ZN9QAD_SDMMC14imp_periphInitEv+0xf0>)
 800b040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b044:	6453      	str	r3, [r2, #68]	; 0x44
 800b046:	4b09      	ldr	r3, [pc, #36]	; (800b06c <_ZN9QAD_SDMMC14imp_periphInitEv+0xf0>)
 800b048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b04a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b04e:	60bb      	str	r3, [r7, #8]
 800b050:	68bb      	ldr	r3, [r7, #8]

	//Return
	return QA_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3720      	adds	r7, #32
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	40022000 	.word	0x40022000
 800b060:	40020c00 	.word	0x40020c00
 800b064:	40021800 	.word	0x40021800
 800b068:	40020400 	.word	0x40020400
 800b06c:	40023800 	.word	0x40023800

0800b070 <_ZN9QAD_SDMMC11imp_processEv>:
	//----------------------------
	//QAD_SDMMC Processing Methods

//QAD_SDMMC::imp_process
//QAD_SDMMC Processing Method
QA_Result QAD_SDMMC::imp_process(void) {
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	791b      	ldrb	r3, [r3, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <_ZN9QAD_SDMMC11imp_processEv+0x14>
		return QA_Fail;
 800b080:	2301      	movs	r3, #1
 800b082:	e023      	b.n	800b0cc <_ZN9QAD_SDMMC11imp_processEv+0x5c>

	//
	if (imp_getCardPresent() == QAD_SDMMC_CardPresent) {
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 f825 	bl	800b0d4 <_ZN9QAD_SDMMC18imp_getCardPresentEv>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	bf0c      	ite	eq
 800b090:	2301      	moveq	r3, #1
 800b092:	2300      	movne	r3, #0
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b00      	cmp	r3, #0
 800b098:	d010      	beq.n	800b0bc <_ZN9QAD_SDMMC11imp_processEv+0x4c>

		if (m_eCardState == QAD_SDMMC_State_NoCard) {
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	795b      	ldrb	r3, [r3, #5]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d113      	bne.n	800b0ca <_ZN9QAD_SDMMC11imp_processEv+0x5a>
			if (imp_mount())
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f89e 	bl	800b1e4 <_ZN9QAD_SDMMC9imp_mountEv>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	bf14      	ite	ne
 800b0ae:	2301      	movne	r3, #1
 800b0b0:	2300      	moveq	r3, #0
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d008      	beq.n	800b0ca <_ZN9QAD_SDMMC11imp_processEv+0x5a>
				return QA_Fail;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e007      	b.n	800b0cc <_ZN9QAD_SDMMC11imp_processEv+0x5c>
		}

	} else {

		if (m_eCardState != QAD_SDMMC_State_NoCard) {
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	795b      	ldrb	r3, [r3, #5]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <_ZN9QAD_SDMMC11imp_processEv+0x5a>
			imp_unmount();
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f8e7 	bl	800b298 <_ZN9QAD_SDMMC11imp_unmountEv>
		}

	}

	//Return
	return QA_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <_ZN9QAD_SDMMC18imp_getCardPresentEv>:
//----------------------
//QAD_SDMMC Card Methods

//QAD_SDMMC::imp_getCardPresent
//QAD_SDMMC Card Method
QAD_SDMMC_CardPresence QAD_SDMMC::imp_getCardPresent(void) {
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]

	if (HAL_GPIO_ReadPin(QAD_SDMMC_CARDDETECT_PORT, QAD_SDMMC_CARDDETECT_PIN) == GPIO_PIN_SET) {
 800b0dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b0e0:	4808      	ldr	r0, [pc, #32]	; (800b104 <_ZN9QAD_SDMMC18imp_getCardPresentEv+0x30>)
 800b0e2:	f7f8 ff7b 	bl	8003fdc <HAL_GPIO_ReadPin>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	bf0c      	ite	eq
 800b0ec:	2301      	moveq	r3, #1
 800b0ee:	2300      	movne	r3, #0
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d001      	beq.n	800b0fa <_ZN9QAD_SDMMC18imp_getCardPresentEv+0x26>
		return QAD_SDMMC_CardNotPresent;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e000      	b.n	800b0fc <_ZN9QAD_SDMMC18imp_getCardPresentEv+0x28>
	}

	return QAD_SDMMC_CardPresent;
 800b0fa:	2301      	movs	r3, #1
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	40022000 	.word	0x40022000

0800b108 <_ZN9QAD_SDMMC15imp_getCardInfoEv>:


//QAD_SDMMC::imp_getCardInfo
//QAD_SDMMC Card Method
QA_Result QAD_SDMMC::imp_getCardInfo(void) {
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08e      	sub	sp, #56	; 0x38
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
	HAL_SD_CardInfoTypeDef sCardInfo;

	//Get Card Info
	if (HAL_SD_GetCardInfo(&m_sHandle, &sCardInfo) != HAL_OK) {
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3328      	adds	r3, #40	; 0x28
 800b114:	f107 0208 	add.w	r2, r7, #8
 800b118:	4611      	mov	r1, r2
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fc f8ae 	bl	800727c <HAL_SD_GetCardInfo>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	bf14      	ite	ne
 800b126:	2301      	movne	r3, #1
 800b128:	2300      	moveq	r3, #0
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d01a      	beq.n	800b166 <_ZN9QAD_SDMMC15imp_getCardInfoEv+0x5e>

		m_uSize       = 0;
 800b130:	6879      	ldr	r1, [r7, #4]
 800b132:	f04f 0200 	mov.w	r2, #0
 800b136:	f04f 0300 	mov.w	r3, #0
 800b13a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		m_uSizeMB     = 0;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	611a      	str	r2, [r3, #16]
		m_uBlockSize  = 0;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	619a      	str	r2, [r3, #24]
		m_uBlockCount = 0;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	615a      	str	r2, [r3, #20]

		m_uType       = 0;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	61da      	str	r2, [r3, #28]
		m_uVersion    = 0;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	621a      	str	r2, [r3, #32]
		m_uClass      = 0;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	625a      	str	r2, [r3, #36]	; 0x24

		return QA_Fail;
 800b162:	2301      	movs	r3, #1
 800b164:	e03a      	b.n	800b1dc <_ZN9QAD_SDMMC15imp_getCardInfoEv+0xd4>
	}

	//Store Card Info
	uint64_t uBlockCount = sCardInfo.BlockNbr;
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	461a      	mov	r2, r3
 800b16a:	f04f 0300 	mov.w	r3, #0
 800b16e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint64_t uBlockSize  = sCardInfo.BlockSize;
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	461a      	mov	r2, r3
 800b176:	f04f 0300 	mov.w	r3, #0
 800b17a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	m_uSize       = uBlockCount * uBlockSize;
 800b17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b182:	fb02 f203 	mul.w	r2, r2, r3
 800b186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b188:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b18a:	fb01 f303 	mul.w	r3, r1, r3
 800b18e:	18d1      	adds	r1, r2, r3
 800b190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	fba2 2303 	umull	r2, r3, r2, r3
 800b198:	4419      	add	r1, r3
 800b19a:	460b      	mov	r3, r1
 800b19c:	6879      	ldr	r1, [r7, #4]
 800b19e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	m_uSizeMB     = m_uSize / 1048576;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b1a8:	f04f 0200 	mov.w	r2, #0
 800b1ac:	f04f 0300 	mov.w	r3, #0
 800b1b0:	0d02      	lsrs	r2, r0, #20
 800b1b2:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800b1b6:	0d0b      	lsrs	r3, r1, #20
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	611a      	str	r2, [r3, #16]
	m_uBlockCount = uBlockCount;
 800b1bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	615a      	str	r2, [r3, #20]
	m_uBlockSize  = uBlockSize;
 800b1c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	619a      	str	r2, [r3, #24]

	m_uType       = sCardInfo.CardType;
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	61da      	str	r2, [r3, #28]
	m_uVersion    = sCardInfo.CardVersion;
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	621a      	str	r2, [r3, #32]
	m_uClass      = sCardInfo.Class;
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	625a      	str	r2, [r3, #36]	; 0x24

	return QA_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3738      	adds	r7, #56	; 0x38
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <_ZN9QAD_SDMMC9imp_mountEv>:
	//-----------------------
	//QAD_SDMMC Mount Methods

//QAD_SDMMC::imp_mount
//QAD_SDMMC Mount Method
QA_Result QAD_SDMMC::imp_mount(void) {
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]

	//Initialize Peripheral
	m_sHandle.Instance                 = SDMMC2;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a29      	ldr	r2, [pc, #164]	; (800b294 <_ZN9QAD_SDMMC9imp_mountEv+0xb0>)
 800b1f0:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	639a      	str	r2, [r3, #56]	; 0x38
	m_sHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	63da      	str	r2, [r3, #60]	; 0x3c
	m_sHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_SD_Init(&m_sHandle) != HAL_OK) {
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	3328      	adds	r3, #40	; 0x28
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fb fda0 	bl	8006d60 <HAL_SD_Init>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	bf14      	ite	ne
 800b226:	2301      	movne	r3, #1
 800b228:	2300      	moveq	r3, #0
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d004      	beq.n	800b23a <_ZN9QAD_SDMMC9imp_mountEv+0x56>
		m_eCardState = QAD_SDMMC_State_PeripheralError;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2202      	movs	r2, #2
 800b234:	715a      	strb	r2, [r3, #5]
		return QA_Fail;
 800b236:	2301      	movs	r3, #1
 800b238:	e027      	b.n	800b28a <_ZN9QAD_SDMMC9imp_mountEv+0xa6>
	}

	//Configure Bus Width
	if (HAL_SD_ConfigWideBusOperation(&m_sHandle, SDMMC_BUS_WIDE_4B) != HAL_OK) {
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3328      	adds	r3, #40	; 0x28
 800b23e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b242:	4618      	mov	r0, r3
 800b244:	f7fc f846 	bl	80072d4 <HAL_SD_ConfigWideBusOperation>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	bf14      	ite	ne
 800b24e:	2301      	movne	r3, #1
 800b250:	2300      	moveq	r3, #0
 800b252:	b2db      	uxtb	r3, r3
 800b254:	2b00      	cmp	r3, #0
 800b256:	d004      	beq.n	800b262 <_ZN9QAD_SDMMC9imp_mountEv+0x7e>
		m_eCardState = QAD_SDMMC_State_PeripheralError;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2202      	movs	r2, #2
 800b25c:	715a      	strb	r2, [r3, #5]
		return QA_Fail;
 800b25e:	2301      	movs	r3, #1
 800b260:	e013      	b.n	800b28a <_ZN9QAD_SDMMC9imp_mountEv+0xa6>
	}

	//Get Card Info
	if (imp_getCardInfo()) {
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7ff ff50 	bl	800b108 <_ZN9QAD_SDMMC15imp_getCardInfoEv>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	bf14      	ite	ne
 800b26e:	2301      	movne	r3, #1
 800b270:	2300      	moveq	r3, #0
 800b272:	b2db      	uxtb	r3, r3
 800b274:	2b00      	cmp	r3, #0
 800b276:	d004      	beq.n	800b282 <_ZN9QAD_SDMMC9imp_mountEv+0x9e>
		m_eCardState = QAD_SDMMC_State_CardError;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	715a      	strb	r2, [r3, #5]
		return QA_Fail;
 800b27e:	2301      	movs	r3, #1
 800b280:	e003      	b.n	800b28a <_ZN9QAD_SDMMC9imp_mountEv+0xa6>
	}

	//Set State
	m_eCardState = QAD_SDMMC_State_Mounted;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2203      	movs	r2, #3
 800b286:	715a      	strb	r2, [r3, #5]

	//Return
	return QA_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	40011c00 	.word	0x40011c00

0800b298 <_ZN9QAD_SDMMC11imp_unmountEv>:


//QAD_SDMMC::imp_unmount
//QAD_SDMMC Mount Method
void QAD_SDMMC::imp_unmount(void) {
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]

  //Set Card Info
  m_uSize       = 0;
 800b2a0:	6879      	ldr	r1, [r7, #4]
 800b2a2:	f04f 0200 	mov.w	r2, #0
 800b2a6:	f04f 0300 	mov.w	r3, #0
 800b2aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
  m_uSizeMB     = 0;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	611a      	str	r2, [r3, #16]
  m_uBlockCount = 0;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	615a      	str	r2, [r3, #20]
  m_uBlockSize  = 0;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	619a      	str	r2, [r3, #24]

  m_uType       = 0;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	61da      	str	r2, [r3, #28]
  m_uVersion    = 0;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	621a      	str	r2, [r3, #32]
  m_uClass      = 0;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	625a      	str	r2, [r3, #36]	; 0x24

  m_eCardState  = QAD_SDMMC_State_NoCard;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	715a      	strb	r2, [r3, #5]

  //Deinit Peripheral
  HAL_SD_DeInit(&m_sHandle);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3328      	adds	r3, #40	; 0x28
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fb fdf5 	bl	8006ecc <HAL_SD_DeInit>

}
 800b2e2:	bf00      	nop
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
	...

0800b2ec <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 800b2f0:	4b10      	ldr	r3, [pc, #64]	; (800b334 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	f3bf 8f5b 	dmb	ish
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	f003 0301 	and.w	r3, r3, #1
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	bf0c      	ite	eq
 800b302:	2301      	moveq	r3, #1
 800b304:	2300      	movne	r3, #0
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d010      	beq.n	800b32e <_ZN11QAD_UARTMgr3getEv+0x42>
 800b30c:	4809      	ldr	r0, [pc, #36]	; (800b334 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800b30e:	f002 f9e8 	bl	800d6e2 <__cxa_guard_acquire>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	bf14      	ite	ne
 800b318:	2301      	movne	r3, #1
 800b31a:	2300      	moveq	r3, #0
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d005      	beq.n	800b32e <_ZN11QAD_UARTMgr3getEv+0x42>
 800b322:	4805      	ldr	r0, [pc, #20]	; (800b338 <_ZN11QAD_UARTMgr3getEv+0x4c>)
 800b324:	f000 fba0 	bl	800ba68 <_ZN11QAD_UARTMgrC1Ev>
 800b328:	4802      	ldr	r0, [pc, #8]	; (800b334 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800b32a:	f002 f9e6 	bl	800d6fa <__cxa_guard_release>
		return instance;
 800b32e:	4b02      	ldr	r3, [pc, #8]	; (800b338 <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 800b330:	4618      	mov	r0, r3
 800b332:	bd80      	pop	{r7, pc}
 800b334:	200004ec 	.word	0x200004ec
 800b338:	2000048c 	.word	0x2000048c

0800b33c <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	4603      	mov	r3, r0
 800b344:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 800b346:	79fb      	ldrb	r3, [r7, #7]
 800b348:	2b07      	cmp	r3, #7
 800b34a:	d901      	bls.n	800b350 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 800b34c:	2302      	movs	r3, #2
 800b34e:	e00a      	b.n	800b366 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 800b350:	f7ff ffcc 	bl	800b2ec <_ZN11QAD_UARTMgr3getEv>
 800b354:	4601      	mov	r1, r0
 800b356:	79fa      	ldrb	r2, [r7, #7]
 800b358:	4613      	mov	r3, r2
 800b35a:	005b      	lsls	r3, r3, #1
 800b35c:	4413      	add	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	440b      	add	r3, r1
 800b362:	3301      	adds	r3, #1
 800b364:	781b      	ldrb	r3, [r3, #0]
	}
 800b366:	4618      	mov	r0, r3
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f769xx.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 800b36e:	b580      	push	{r7, lr}
 800b370:	b082      	sub	sp, #8
 800b372:	af00      	add	r7, sp, #0
 800b374:	4603      	mov	r3, r0
 800b376:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 800b378:	79fb      	ldrb	r3, [r7, #7]
 800b37a:	2b07      	cmp	r3, #7
 800b37c:	d901      	bls.n	800b382 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	e00a      	b.n	800b398 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 800b382:	f7ff ffb3 	bl	800b2ec <_ZN11QAD_UARTMgr3getEv>
 800b386:	4601      	mov	r1, r0
 800b388:	79fa      	ldrb	r2, [r7, #7]
 800b38a:	4613      	mov	r3, r2
 800b38c:	005b      	lsls	r3, r3, #1
 800b38e:	4413      	add	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	440b      	add	r3, r1
 800b394:	3304      	adds	r3, #4
 800b396:	681b      	ldr	r3, [r3, #0]
	}
 800b398:	4618      	mov	r0, r3
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 800b3aa:	79fb      	ldrb	r3, [r7, #7]
 800b3ac:	2b07      	cmp	r3, #7
 800b3ae:	d902      	bls.n	800b3b6 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 800b3b0:	f06f 0309 	mvn.w	r3, #9
 800b3b4:	e00b      	b.n	800b3ce <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 800b3b6:	f7ff ff99 	bl	800b2ec <_ZN11QAD_UARTMgr3getEv>
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	79fa      	ldrb	r2, [r7, #7]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	4413      	add	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	440b      	add	r3, r1
 800b3c8:	3308      	adds	r3, #8
 800b3ca:	f993 3000 	ldrsb.w	r3, [r3]
	}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Management Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static void registerUART(QAD_UART_Periph eUART) {
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b082      	sub	sp, #8
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	4603      	mov	r3, r0
 800b3de:	71fb      	strb	r3, [r7, #7]
		get().imp_registerUART(eUART);
 800b3e0:	f7ff ff84 	bl	800b2ec <_ZN11QAD_UARTMgr3getEv>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	79fb      	ldrb	r3, [r7, #7]
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	f000 fbbe 	bl	800bb6c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
	}
 800b3f0:	bf00      	nop
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	4603      	mov	r3, r0
 800b400:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 800b402:	f7ff ff73 	bl	800b2ec <_ZN11QAD_UARTMgr3getEv>
 800b406:	4602      	mov	r2, r0
 800b408:	79fb      	ldrb	r3, [r7, #7]
 800b40a:	4619      	mov	r1, r3
 800b40c:	4610      	mov	r0, r2
 800b40e:	f000 fbd6 	bl	800bbbe <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 800b412:	bf00      	nop
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b082      	sub	sp, #8
 800b41e:	af00      	add	r7, sp, #0
 800b420:	4603      	mov	r3, r0
 800b422:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 800b424:	f7ff ff62 	bl	800b2ec <_ZN11QAD_UARTMgr3getEv>
 800b428:	4602      	mov	r2, r0
 800b42a:	79fb      	ldrb	r3, [r7, #7]
 800b42c:	4619      	mov	r1, r3
 800b42e:	4610      	mov	r0, r2
 800b430:	f000 fbe0 	bl	800bbf4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 800b434:	bf00      	nop
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	4603      	mov	r3, r0
 800b444:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 800b446:	f7ff ff51 	bl	800b2ec <_ZN11QAD_UARTMgr3getEv>
 800b44a:	4602      	mov	r2, r0
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	4619      	mov	r1, r3
 800b450:	4610      	mov	r0, r2
 800b452:	f000 fcc1 	bl	800bdd8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 800b456:	bf00      	nop
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or QA_Fail if initialization has failed
QA_Result QAD_UART::init(void) {
 800b45e:	b580      	push	{r7, lr}
 800b460:	b084      	sub	sp, #16
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
	if (QAD_UARTMgr::getState(m_eUART))
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	785b      	ldrb	r3, [r3, #1]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7ff ff66 	bl	800b33c <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	bf14      	ite	ne
 800b476:	2301      	movne	r3, #1
 800b478:	2300      	moveq	r3, #0
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 800b480:	2302      	movs	r3, #2
 800b482:	e012      	b.n	800b4aa <_ZN8QAD_UART4initEv+0x4c>

  QAD_UARTMgr::registerUART(m_eUART);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	785b      	ldrb	r3, [r3, #1]
 800b488:	4618      	mov	r0, r3
 800b48a:	f7ff ffa4 	bl	800b3d6 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>
  QA_Result eRes = periphInit();
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f8a7 	bl	800b5e2 <_ZN8QAD_UART10periphInitEv>
 800b494:	4603      	mov	r3, r0
 800b496:	73fb      	strb	r3, [r7, #15]

  if (eRes)
 800b498:	7bfb      	ldrb	r3, [r7, #15]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d004      	beq.n	800b4a8 <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	785b      	ldrb	r3, [r3, #1]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff ffa8 	bl	800b3f8 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
  return eRes;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b082      	sub	sp, #8
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d009      	beq.n	800b4d6 <_ZN8QAD_UART6deinitEv+0x24>
  	return;

  periphDeinit(DeinitFull);
 800b4c2:	2101      	movs	r1, #1
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f924 	bl	800b712 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
  QAD_UARTMgr::deregisterUART(m_eUART);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	785b      	ldrb	r3, [r3, #1]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7ff ff92 	bl	800b3f8 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 800b4d4:	e000      	b.n	800b4d8 <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 800b4d6:	bf00      	nop
}
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 800b4de:	b480      	push	{r7}
 800b4e0:	b083      	sub	sp, #12
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	331c      	adds	r3, #28
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	370c      	adds	r7, #12
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr

0800b4f6 <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 800b4f6:	b480      	push	{r7}
 800b4f8:	b083      	sub	sp, #12
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	69db      	ldr	r3, [r3, #28]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	69db      	ldr	r3, [r3, #28]
 800b508:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b50c:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Active;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 800b516:	bf00      	nop
 800b518:	370c      	adds	r7, #12
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 800b522:	b480      	push	{r7}
 800b524:	b083      	sub	sp, #12
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	69db      	ldr	r3, [r3, #28]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	69db      	ldr	r3, [r3, #28]
 800b534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b538:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Inactive;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 800b542:	bf00      	nop
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 800b54e:	b480      	push	{r7}
 800b550:	b083      	sub	sp, #12
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	69db      	ldr	r3, [r3, #28]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	69db      	ldr	r3, [r3, #28]
 800b560:	f042 0220 	orr.w	r2, r2, #32
 800b564:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Active;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 800b56e:	bf00      	nop
 800b570:	370c      	adds	r7, #12
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 800b57a:	b480      	push	{r7}
 800b57c:	b083      	sub	sp, #12
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	69db      	ldr	r3, [r3, #28]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	69db      	ldr	r3, [r3, #28]
 800b58c:	f022 0220 	bic.w	r2, r2, #32
 800b590:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Inactive;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 800b59a:	bf00      	nop
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART transmit data register (TDR)
void QAD_UART::dataTX(uint8_t uData) {
 800b5a6:	b480      	push	{r7}
 800b5a8:	b083      	sub	sp, #12
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	70fb      	strb	r3, [r7, #3]
  m_sHandle.Instance->TDR = uData;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	69db      	ldr	r3, [r3, #28]
 800b5b6:	78fa      	ldrb	r2, [r7, #3]
 800b5b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b5ba:	bf00      	nop
 800b5bc:	370c      	adds	r7, #12
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART receive data register (RDR)
uint8_t QAD_UART::dataRX(void) {
 800b5c6:	b480      	push	{r7}
 800b5c8:	b083      	sub	sp, #12
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  return m_sHandle.Instance->RDR;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	69db      	ldr	r3, [r3, #28]
 800b5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d4:	b2db      	uxtb	r3, r3
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b088      	sub	sp, #32
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 800b5ea:	f107 030c 	add.w	r3, r7, #12
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	601a      	str	r2, [r3, #0]
 800b5f2:	605a      	str	r2, [r3, #4]
 800b5f4:	609a      	str	r2, [r3, #8]
 800b5f6:	60da      	str	r2, [r3, #12]
 800b5f8:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	8a1b      	ldrh	r3, [r3, #16]
 800b5fe:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 800b600:	2302      	movs	r3, #2
 800b602:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 800b604:	2300      	movs	r3, #0
 800b606:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 800b608:	2303      	movs	r3, #3
 800b60a:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	7c9b      	ldrb	r3, [r3, #18]
 800b610:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	f107 020c 	add.w	r2, r7, #12
 800b61a:	4611      	mov	r1, r2
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7f8 fa25 	bl	8003a6c <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	8b1b      	ldrh	r3, [r3, #24]
 800b626:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 800b628:	2302      	movs	r3, #2
 800b62a:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 800b62c:	2301      	movs	r3, #1
 800b62e:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 800b630:	2303      	movs	r3, #3
 800b632:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	7e9b      	ldrb	r3, [r3, #26]
 800b638:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	695b      	ldr	r3, [r3, #20]
 800b63e:	f107 020c 	add.w	r2, r7, #12
 800b642:	4611      	mov	r1, r2
 800b644:	4618      	mov	r0, r3
 800b646:	f7f8 fa11 	bl	8003a6c <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	785b      	ldrb	r3, [r3, #1]
 800b64e:	4618      	mov	r0, r3
 800b650:	f7ff fee3 	bl	800b41a <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	785b      	ldrb	r3, [r3, #1]
 800b658:	4618      	mov	r0, r3
 800b65a:	f7ff fe88 	bl	800b36e <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 800b65e:	4602      	mov	r2, r0
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	685a      	ldr	r2, [r3, #4]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	220c      	movs	r2, #12
 800b682:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	331c      	adds	r3, #28
 800b694:	4618      	mov	r0, r3
 800b696:	f7fc fa10 	bl	8007aba <HAL_UART_Init>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	bf14      	ite	ne
 800b6a0:	2301      	movne	r3, #1
 800b6a2:	2300      	moveq	r3, #0
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d005      	beq.n	800b6b6 <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 800b6aa:	2100      	movs	r1, #0
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f830 	bl	800b712 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e029      	b.n	800b70a <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	69db      	ldr	r3, [r3, #28]
 800b6c0:	f042 0201 	orr.w	r2, r2, #1
 800b6c4:	601a      	str	r2, [r3, #0]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	785b      	ldrb	r3, [r3, #1]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7ff fe68 	bl	800b3a0 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	7a1b      	ldrb	r3, [r3, #8]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	4619      	mov	r1, r3
 800b6dc:	f7f7 fc65 	bl	8002faa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	785b      	ldrb	r3, [r3, #1]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7ff fe5b 	bl	800b3a0 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7f7 fc78 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  //Return
  return QA_OK;
 800b708:	2300      	movs	r3, #0
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3720      	adds	r7, #32
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//QAD_UART Private Initialization Method
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	460b      	mov	r3, r1
 800b71c:	70fb      	strb	r3, [r7, #3]

	//Disable IRQs
	//Check if full deinitialization is required
	if (eDeinitMode) {
 800b71e:	78fb      	ldrb	r3, [r7, #3]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d01b      	beq.n	800b75c <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f7ff fefc 	bl	800b522 <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f7ff ff25 	bl	800b57a <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	785b      	ldrb	r3, [r3, #1]
 800b734:	4618      	mov	r0, r3
 800b736:	f7ff fe33 	bl	800b3a0 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 800b73a:	4603      	mov	r3, r0
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7f7 fc5e 	bl	8002ffe <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	69db      	ldr	r3, [r3, #28]
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	69db      	ldr	r3, [r3, #28]
 800b74c:	f022 0201 	bic.w	r2, r2, #1
 800b750:	601a      	str	r2, [r3, #0]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	331c      	adds	r3, #28
 800b756:	4618      	mov	r0, r3
 800b758:	f7fc f9fd 	bl	8007b56 <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	785b      	ldrb	r3, [r3, #1]
 800b760:	4618      	mov	r0, r3
 800b762:	f7ff fe6b 	bl	800b43c <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	695a      	ldr	r2, [r3, #20]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	8b1b      	ldrh	r3, [r3, #24]
 800b76e:	4619      	mov	r1, r3
 800b770:	4610      	mov	r0, r2
 800b772:	f7f8 fb27 	bl	8003dc4 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	68da      	ldr	r2, [r3, #12]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	8a1b      	ldrh	r3, [r3, #16]
 800b77e:	4619      	mov	r1, r3
 800b780:	4610      	mov	r0, r2
 800b782:	f7f8 fb1f 	bl	8003dc4 <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	701a      	strb	r2, [r3, #0]
}
 800b79c:	bf00      	nop
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <_ZN10QAD_I2CMgrC1Ev>:
//QAD_I2CMgr::QAD_I2CMgr
//QAD_I2CMgr Constructor
//
//Fills out details for the system's I2C peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's static get() method is called.
QAD_I2CMgr::QAD_I2CMgr() {
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_I2C_PeriphCount; i++) {
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	73fb      	strb	r3, [r7, #15]
 800b7b0:	7bfb      	ldrb	r3, [r7, #15]
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d80d      	bhi.n	800b7d2 <_ZN10QAD_I2CMgrC1Ev+0x2e>
		//Set current state of peripheral to unused
		m_sI2Cs[i].eState = QAD_I2C_Unused;
 800b7b6:	7bfa      	ldrb	r2, [r7, #15]
 800b7b8:	6879      	ldr	r1, [r7, #4]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	4413      	add	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	440b      	add	r3, r1
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_I2C_PeriphCount; i++) {
 800b7ca:	7bfb      	ldrb	r3, [r7, #15]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	73fb      	strb	r3, [r7, #15]
 800b7d0:	e7ee      	b.n	800b7b0 <_ZN10QAD_I2CMgrC1Ev+0xc>
	}

	//Set Peripheral IDs
	m_sI2Cs[QAD_I2C1].eI2C = QAD_I2C1;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	701a      	strb	r2, [r3, #0]
	m_sI2Cs[QAD_I2C2].eI2C = QAD_I2C2;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	731a      	strb	r2, [r3, #12]
	m_sI2Cs[QAD_I2C3].eI2C = QAD_I2C3;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2202      	movs	r2, #2
 800b7e2:	761a      	strb	r2, [r3, #24]
	m_sI2Cs[QAD_I2C4].eI2C = QAD_I2C4;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2203      	movs	r2, #3
 800b7e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	//Set Instances
	m_sI2Cs[QAD_I2C1].pInstance = I2C1;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a17      	ldr	r2, [pc, #92]	; (800b84c <_ZN10QAD_I2CMgrC1Ev+0xa8>)
 800b7f0:	605a      	str	r2, [r3, #4]
	m_sI2Cs[QAD_I2C2].pInstance = I2C2;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a16      	ldr	r2, [pc, #88]	; (800b850 <_ZN10QAD_I2CMgrC1Ev+0xac>)
 800b7f6:	611a      	str	r2, [r3, #16]
	m_sI2Cs[QAD_I2C3].pInstance = I2C3;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a16      	ldr	r2, [pc, #88]	; (800b854 <_ZN10QAD_I2CMgrC1Ev+0xb0>)
 800b7fc:	61da      	str	r2, [r3, #28]
	m_sI2Cs[QAD_I2C4].pInstance = I2C4;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4a15      	ldr	r2, [pc, #84]	; (800b858 <_ZN10QAD_I2CMgrC1Ev+0xb4>)
 800b802:	629a      	str	r2, [r3, #40]	; 0x28

  //Set Event IRQs
	m_sI2Cs[QAD_I2C1].eIRQ_Event = I2C1_EV_IRQn;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	221f      	movs	r2, #31
 800b808:	721a      	strb	r2, [r3, #8]
	m_sI2Cs[QAD_I2C2].eIRQ_Event = I2C2_EV_IRQn;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2221      	movs	r2, #33	; 0x21
 800b80e:	751a      	strb	r2, [r3, #20]
	m_sI2Cs[QAD_I2C3].eIRQ_Event = I2C3_EV_IRQn;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2248      	movs	r2, #72	; 0x48
 800b814:	f883 2020 	strb.w	r2, [r3, #32]
	m_sI2Cs[QAD_I2C4].eIRQ_Event = I2C4_EV_IRQn;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	225f      	movs	r2, #95	; 0x5f
 800b81c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	//Set Error IRQs
	m_sI2Cs[QAD_I2C1].eIRQ_Error = I2C1_ER_IRQn;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2220      	movs	r2, #32
 800b824:	725a      	strb	r2, [r3, #9]
	m_sI2Cs[QAD_I2C2].eIRQ_Error = I2C2_ER_IRQn;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2222      	movs	r2, #34	; 0x22
 800b82a:	755a      	strb	r2, [r3, #21]
	m_sI2Cs[QAD_I2C3].eIRQ_Error = I2C3_ER_IRQn;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2249      	movs	r2, #73	; 0x49
 800b830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	m_sI2Cs[QAD_I2C4].eIRQ_Error = I2C4_ER_IRQn;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2260      	movs	r2, #96	; 0x60
 800b838:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

}
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4618      	mov	r0, r3
 800b840:	3714      	adds	r7, #20
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	40005400 	.word	0x40005400
 800b850:	40005800 	.word	0x40005800
 800b854:	40005c00 	.word	0x40005c00
 800b858:	40006000 	.word	0x40006000

0800b85c <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State>:
//
//To be called from static method registerI2C()
//Used to register an I2C peripheral as being used by a driver
//eI2C - the I2C peripheral to be registered
//Returns QA_OK if successful, or returns QA_Error_PeriphBusy if the selected I2C is already in use
QA_Result QAD_I2CMgr::imp_registerI2C(QAD_I2C_Periph eI2C, QAD_I2C_State eMode) {
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	460b      	mov	r3, r1
 800b866:	70fb      	strb	r3, [r7, #3]
 800b868:	4613      	mov	r3, r2
 800b86a:	70bb      	strb	r3, [r7, #2]
  if (eI2C >= QAD_I2CNone)
 800b86c:	78fb      	ldrb	r3, [r7, #3]
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d901      	bls.n	800b876 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x1a>
  	return QA_Fail;
 800b872:	2301      	movs	r3, #1
 800b874:	e017      	b.n	800b8a6 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x4a>

  if (m_sI2Cs[eI2C].eState)
 800b876:	78fa      	ldrb	r2, [r7, #3]
 800b878:	6879      	ldr	r1, [r7, #4]
 800b87a:	4613      	mov	r3, r2
 800b87c:	005b      	lsls	r3, r3, #1
 800b87e:	4413      	add	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	440b      	add	r3, r1
 800b884:	3301      	adds	r3, #1
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x34>
  	return QA_Error_PeriphBusy;
 800b88c:	2302      	movs	r3, #2
 800b88e:	e00a      	b.n	800b8a6 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x4a>

  m_sI2Cs[eI2C].eState = eMode;
 800b890:	78fa      	ldrb	r2, [r7, #3]
 800b892:	6879      	ldr	r1, [r7, #4]
 800b894:	4613      	mov	r3, r2
 800b896:	005b      	lsls	r3, r3, #1
 800b898:	4413      	add	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	440b      	add	r3, r1
 800b89e:	3301      	adds	r3, #1
 800b8a0:	78ba      	ldrb	r2, [r7, #2]
 800b8a2:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	370c      	adds	r7, #12
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr

0800b8b2 <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph>:
//QAD_I2CMgr Management Method
//
//To be called from static method deregisterI2C()
//Used to deregister an I2C to mark it as no longer being used by a driver
//eI2C - the I2C Peripheral to be deregistered
void QAD_I2CMgr::imp_deregisterI2C(QAD_I2C_Periph eI2C) {
 800b8b2:	b480      	push	{r7}
 800b8b4:	b083      	sub	sp, #12
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	70fb      	strb	r3, [r7, #3]
  if (eI2C >= QAD_I2CNone)
 800b8be:	78fb      	ldrb	r3, [r7, #3]
 800b8c0:	2b03      	cmp	r3, #3
 800b8c2:	d80a      	bhi.n	800b8da <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph+0x28>
  	return;

  m_sI2Cs[eI2C].eState = QAD_I2C_Unused;
 800b8c4:	78fa      	ldrb	r2, [r7, #3]
 800b8c6:	6879      	ldr	r1, [r7, #4]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	4413      	add	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	440b      	add	r3, r1
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	701a      	strb	r2, [r3, #0]
 800b8d8:	e000      	b.n	800b8dc <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph+0x2a>
  	return;
 800b8da:	bf00      	nop
}
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
	...

0800b8e8 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph>:
//QAD_I2CMgr Clock Method
//
//To be called by static method enableClock()
//Used to enable the clock for a specific I2C peripheral
//eI2C - the I2C peripheral to enable the clock for
void QAD_I2CMgr::imp_enableClock(QAD_I2C_Periph eI2C) {
 800b8e8:	b480      	push	{r7}
 800b8ea:	b087      	sub	sp, #28
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	70fb      	strb	r3, [r7, #3]
  switch (eI2C) {
 800b8f4:	78fb      	ldrb	r3, [r7, #3]
 800b8f6:	2b04      	cmp	r3, #4
 800b8f8:	d871      	bhi.n	800b9de <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
 800b8fa:	a201      	add	r2, pc, #4	; (adr r2, 800b900 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x18>)
 800b8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b900:	0800b915 	.word	0x0800b915
 800b904:	0800b947 	.word	0x0800b947
 800b908:	0800b979 	.word	0x0800b979
 800b90c:	0800b9ab 	.word	0x0800b9ab
 800b910:	0800b9dd 	.word	0x0800b9dd
    case (QAD_I2C1):
    	__HAL_RCC_I2C1_CLK_ENABLE();
 800b914:	4b35      	ldr	r3, [pc, #212]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b918:	4a34      	ldr	r2, [pc, #208]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b91a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b91e:	6413      	str	r3, [r2, #64]	; 0x40
 800b920:	4b32      	ldr	r3, [pc, #200]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b928:	617b      	str	r3, [r7, #20]
 800b92a:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_I2C1_FORCE_RESET();
 800b92c:	4b2f      	ldr	r3, [pc, #188]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b92e:	6a1b      	ldr	r3, [r3, #32]
 800b930:	4a2e      	ldr	r2, [pc, #184]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b936:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C1_RELEASE_RESET();
 800b938:	4b2c      	ldr	r3, [pc, #176]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b93a:	6a1b      	ldr	r3, [r3, #32]
 800b93c:	4a2b      	ldr	r2, [pc, #172]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b93e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b942:	6213      	str	r3, [r2, #32]
    	break;
 800b944:	e04b      	b.n	800b9de <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
    case (QAD_I2C2):
    	__HAL_RCC_I2C2_CLK_ENABLE();
 800b946:	4b29      	ldr	r3, [pc, #164]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b94a:	4a28      	ldr	r2, [pc, #160]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b94c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b950:	6413      	str	r3, [r2, #64]	; 0x40
 800b952:	4b26      	ldr	r3, [pc, #152]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b95a:	613b      	str	r3, [r7, #16]
 800b95c:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_I2C2_FORCE_RESET();
 800b95e:	4b23      	ldr	r3, [pc, #140]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	4a22      	ldr	r2, [pc, #136]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b964:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b968:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C2_RELEASE_RESET();
 800b96a:	4b20      	ldr	r3, [pc, #128]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b96c:	6a1b      	ldr	r3, [r3, #32]
 800b96e:	4a1f      	ldr	r2, [pc, #124]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b970:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800b974:	6213      	str	r3, [r2, #32]
    	break;
 800b976:	e032      	b.n	800b9de <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
    case (QAD_I2C3):
    	__HAL_RCC_I2C3_CLK_ENABLE();
 800b978:	4b1c      	ldr	r3, [pc, #112]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97c:	4a1b      	ldr	r2, [pc, #108]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b97e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b982:	6413      	str	r3, [r2, #64]	; 0x40
 800b984:	4b19      	ldr	r3, [pc, #100]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b98c:	60fb      	str	r3, [r7, #12]
 800b98e:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_I2C3_FORCE_RESET();
 800b990:	4b16      	ldr	r3, [pc, #88]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b992:	6a1b      	ldr	r3, [r3, #32]
 800b994:	4a15      	ldr	r2, [pc, #84]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b996:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b99a:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C3_RELEASE_RESET();
 800b99c:	4b13      	ldr	r3, [pc, #76]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b99e:	6a1b      	ldr	r3, [r3, #32]
 800b9a0:	4a12      	ldr	r2, [pc, #72]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b9a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b9a6:	6213      	str	r3, [r2, #32]
    	break;
 800b9a8:	e019      	b.n	800b9de <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
    case (QAD_I2C4):
    	__HAL_RCC_I2C4_CLK_ENABLE();
 800b9aa:	4b10      	ldr	r3, [pc, #64]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ae:	4a0f      	ldr	r2, [pc, #60]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b9b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9b4:	6413      	str	r3, [r2, #64]	; 0x40
 800b9b6:	4b0d      	ldr	r3, [pc, #52]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9be:	60bb      	str	r3, [r7, #8]
 800b9c0:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_I2C4_FORCE_RESET();
 800b9c2:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	4a09      	ldr	r2, [pc, #36]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b9c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9cc:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C4_RELEASE_RESET();
 800b9ce:	4b07      	ldr	r3, [pc, #28]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b9d0:	6a1b      	ldr	r3, [r3, #32]
 800b9d2:	4a06      	ldr	r2, [pc, #24]	; (800b9ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800b9d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9d8:	6213      	str	r3, [r2, #32]
    	break;
 800b9da:	e000      	b.n	800b9de <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
    case (QAD_I2CNone):
    	break;
 800b9dc:	bf00      	nop
  }
}
 800b9de:	bf00      	nop
 800b9e0:	371c      	adds	r7, #28
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	40023800 	.word	0x40023800

0800b9f0 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph>:
//QAD_I2CMgr Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific I2C peripheral
//eI2C - the I2C peripheral to disable the clock for
void QAD_I2CMgr::imp_disableClock(QAD_I2C_Periph eI2C) {
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	70fb      	strb	r3, [r7, #3]
  switch (eI2C) {
 800b9fc:	78fb      	ldrb	r3, [r7, #3]
 800b9fe:	2b04      	cmp	r3, #4
 800ba00:	d829      	bhi.n	800ba56 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
 800ba02:	a201      	add	r2, pc, #4	; (adr r2, 800ba08 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x18>)
 800ba04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba08:	0800ba1d 	.word	0x0800ba1d
 800ba0c:	0800ba2b 	.word	0x0800ba2b
 800ba10:	0800ba39 	.word	0x0800ba39
 800ba14:	0800ba47 	.word	0x0800ba47
 800ba18:	0800ba55 	.word	0x0800ba55
    case (QAD_I2C1):
    	__HAL_RCC_I2C1_CLK_DISABLE();
 800ba1c:	4b11      	ldr	r3, [pc, #68]	; (800ba64 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800ba1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba20:	4a10      	ldr	r2, [pc, #64]	; (800ba64 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800ba22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba26:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 800ba28:	e015      	b.n	800ba56 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
    case (QAD_I2C2):
    	__HAL_RCC_I2C2_CLK_DISABLE();
 800ba2a:	4b0e      	ldr	r3, [pc, #56]	; (800ba64 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800ba2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2e:	4a0d      	ldr	r2, [pc, #52]	; (800ba64 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800ba30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800ba34:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 800ba36:	e00e      	b.n	800ba56 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
    case (QAD_I2C3):
    	__HAL_RCC_I2C3_CLK_DISABLE();
 800ba38:	4b0a      	ldr	r3, [pc, #40]	; (800ba64 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800ba3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3c:	4a09      	ldr	r2, [pc, #36]	; (800ba64 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800ba3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ba42:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 800ba44:	e007      	b.n	800ba56 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
    case (QAD_I2C4):
    	__HAL_RCC_I2C4_CLK_DISABLE();
 800ba46:	4b07      	ldr	r3, [pc, #28]	; (800ba64 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800ba48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4a:	4a06      	ldr	r2, [pc, #24]	; (800ba64 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800ba4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba50:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 800ba52:	e000      	b.n	800ba56 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
    case (QAD_I2CNone):
    	break;
 800ba54:	bf00      	nop
  }
}
 800ba56:	bf00      	nop
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	40023800 	.word	0x40023800

0800ba68 <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method is a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 800ba70:	2300      	movs	r3, #0
 800ba72:	73fb      	strb	r3, [r7, #15]
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
 800ba76:	2b07      	cmp	r3, #7
 800ba78:	d80d      	bhi.n	800ba96 <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 800ba7a:	7bfa      	ldrb	r2, [r7, #15]
 800ba7c:	6879      	ldr	r1, [r7, #4]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	005b      	lsls	r3, r3, #1
 800ba82:	4413      	add	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	440b      	add	r3, r1
 800ba88:	3301      	adds	r3, #1
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 800ba8e:	7bfb      	ldrb	r3, [r7, #15]
 800ba90:	3301      	adds	r3, #1
 800ba92:	73fb      	strb	r3, [r7, #15]
 800ba94:	e7ee      	b.n	800ba74 <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART3].eUART = QAD_UART3;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2202      	movs	r2, #2
 800baa6:	761a      	strb	r2, [r3, #24]
	m_sUARTs[QAD_UART4].eUART = QAD_UART4;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2203      	movs	r2, #3
 800baac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sUARTs[QAD_UART5].eUART = QAD_UART5;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2204      	movs	r2, #4
 800bab4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2205      	movs	r2, #5
 800babc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	m_sUARTs[QAD_UART7].eUART = QAD_UART7;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2206      	movs	r2, #6
 800bac4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	m_sUARTs[QAD_UART8].eUART = QAD_UART8;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2207      	movs	r2, #7
 800bacc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4a1e      	ldr	r2, [pc, #120]	; (800bb4c <_ZN11QAD_UARTMgrC1Ev+0xe4>)
 800bad4:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a1d      	ldr	r2, [pc, #116]	; (800bb50 <_ZN11QAD_UARTMgrC1Ev+0xe8>)
 800bada:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART3].pInstance = USART3;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a1d      	ldr	r2, [pc, #116]	; (800bb54 <_ZN11QAD_UARTMgrC1Ev+0xec>)
 800bae0:	61da      	str	r2, [r3, #28]
	m_sUARTs[QAD_UART4].pInstance = UART4;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a1c      	ldr	r2, [pc, #112]	; (800bb58 <_ZN11QAD_UARTMgrC1Ev+0xf0>)
 800bae6:	629a      	str	r2, [r3, #40]	; 0x28
	m_sUARTs[QAD_UART5].pInstance = UART5;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a1c      	ldr	r2, [pc, #112]	; (800bb5c <_ZN11QAD_UARTMgrC1Ev+0xf4>)
 800baec:	635a      	str	r2, [r3, #52]	; 0x34
	m_sUARTs[QAD_UART6].pInstance = USART6;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a1b      	ldr	r2, [pc, #108]	; (800bb60 <_ZN11QAD_UARTMgrC1Ev+0xf8>)
 800baf2:	641a      	str	r2, [r3, #64]	; 0x40
	m_sUARTs[QAD_UART7].pInstance = UART7;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a1b      	ldr	r2, [pc, #108]	; (800bb64 <_ZN11QAD_UARTMgrC1Ev+0xfc>)
 800baf8:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sUARTs[QAD_UART8].pInstance = UART8;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a1a      	ldr	r2, [pc, #104]	; (800bb68 <_ZN11QAD_UARTMgrC1Ev+0x100>)
 800bafe:	659a      	str	r2, [r3, #88]	; 0x58

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2225      	movs	r2, #37	; 0x25
 800bb04:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2226      	movs	r2, #38	; 0x26
 800bb0a:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART3].eIRQ = USART3_IRQn;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2227      	movs	r2, #39	; 0x27
 800bb10:	f883 2020 	strb.w	r2, [r3, #32]
	m_sUARTs[QAD_UART4].eIRQ = UART4_IRQn;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2234      	movs	r2, #52	; 0x34
 800bb18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	m_sUARTs[QAD_UART5].eIRQ = UART5_IRQn;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2235      	movs	r2, #53	; 0x35
 800bb20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2247      	movs	r2, #71	; 0x47
 800bb28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sUARTs[QAD_UART7].eIRQ = UART7_IRQn;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2252      	movs	r2, #82	; 0x52
 800bb30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	m_sUARTs[QAD_UART8].eIRQ = UART8_IRQn;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2253      	movs	r2, #83	; 0x53
 800bb38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

}
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3714      	adds	r7, #20
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	40011000 	.word	0x40011000
 800bb50:	40004400 	.word	0x40004400
 800bb54:	40004800 	.word	0x40004800
 800bb58:	40004c00 	.word	0x40004c00
 800bb5c:	40005000 	.word	0x40005000
 800bb60:	40011400 	.word	0x40011400
 800bb64:	40007800 	.word	0x40007800
 800bb68:	40007c00 	.word	0x40007c00

0800bb6c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	460b      	mov	r3, r1
 800bb76:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 800bb78:	78fb      	ldrb	r3, [r7, #3]
 800bb7a:	2b07      	cmp	r3, #7
 800bb7c:	d901      	bls.n	800bb82 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e017      	b.n	800bbb2 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 800bb82:	78fa      	ldrb	r2, [r7, #3]
 800bb84:	6879      	ldr	r1, [r7, #4]
 800bb86:	4613      	mov	r3, r2
 800bb88:	005b      	lsls	r3, r3, #1
 800bb8a:	4413      	add	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	440b      	add	r3, r1
 800bb90:	3301      	adds	r3, #1
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 800bb98:	2302      	movs	r3, #2
 800bb9a:	e00a      	b.n	800bbb2 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 800bb9c:	78fa      	ldrb	r2, [r7, #3]
 800bb9e:	6879      	ldr	r1, [r7, #4]
 800bba0:	4613      	mov	r3, r2
 800bba2:	005b      	lsls	r3, r3, #1
 800bba4:	4413      	add	r3, r2
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	440b      	add	r3, r1
 800bbaa:	3301      	adds	r3, #1
 800bbac:	2201      	movs	r2, #1
 800bbae:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	370c      	adds	r7, #12
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 800bbbe:	b480      	push	{r7}
 800bbc0:	b083      	sub	sp, #12
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 800bbca:	78fb      	ldrb	r3, [r7, #3]
 800bbcc:	2b07      	cmp	r3, #7
 800bbce:	d80a      	bhi.n	800bbe6 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 800bbd0:	78fa      	ldrb	r2, [r7, #3]
 800bbd2:	6879      	ldr	r1, [r7, #4]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	005b      	lsls	r3, r3, #1
 800bbd8:	4413      	add	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	440b      	add	r3, r1
 800bbde:	3301      	adds	r3, #1
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	701a      	strb	r2, [r3, #0]
 800bbe4:	e000      	b.n	800bbe8 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 800bbe6:	bf00      	nop
}
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
	...

0800bbf4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 800bbf4:	b480      	push	{r7}
 800bbf6:	b08b      	sub	sp, #44	; 0x2c
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 800bc00:	78fb      	ldrb	r3, [r7, #3]
 800bc02:	2b08      	cmp	r3, #8
 800bc04:	f200 80df 	bhi.w	800bdc6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
 800bc08:	a201      	add	r2, pc, #4	; (adr r2, 800bc10 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1c>)
 800bc0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc0e:	bf00      	nop
 800bc10:	0800bc35 	.word	0x0800bc35
 800bc14:	0800bc67 	.word	0x0800bc67
 800bc18:	0800bc99 	.word	0x0800bc99
 800bc1c:	0800bccb 	.word	0x0800bccb
 800bc20:	0800bcfd 	.word	0x0800bcfd
 800bc24:	0800bd2f 	.word	0x0800bd2f
 800bc28:	0800bd61 	.word	0x0800bd61
 800bc2c:	0800bd93 	.word	0x0800bd93
 800bc30:	0800bdc5 	.word	0x0800bdc5
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 800bc34:	4b67      	ldr	r3, [pc, #412]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc38:	4a66      	ldr	r2, [pc, #408]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc3a:	f043 0310 	orr.w	r3, r3, #16
 800bc3e:	6453      	str	r3, [r2, #68]	; 0x44
 800bc40:	4b64      	ldr	r3, [pc, #400]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc44:	f003 0310 	and.w	r3, r3, #16
 800bc48:	627b      	str	r3, [r7, #36]	; 0x24
 800bc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_USART1_FORCE_RESET();
 800bc4c:	4b61      	ldr	r3, [pc, #388]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	4a60      	ldr	r2, [pc, #384]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc52:	f043 0310 	orr.w	r3, r3, #16
 800bc56:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 800bc58:	4b5e      	ldr	r3, [pc, #376]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	4a5d      	ldr	r2, [pc, #372]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc5e:	f023 0310 	bic.w	r3, r3, #16
 800bc62:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 800bc64:	e0af      	b.n	800bdc6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 800bc66:	4b5b      	ldr	r3, [pc, #364]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc6a:	4a5a      	ldr	r2, [pc, #360]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc70:	6413      	str	r3, [r2, #64]	; 0x40
 800bc72:	4b58      	ldr	r3, [pc, #352]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc7a:	623b      	str	r3, [r7, #32]
 800bc7c:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_USART2_FORCE_RESET();
 800bc7e:	4b55      	ldr	r3, [pc, #340]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	4a54      	ldr	r2, [pc, #336]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc88:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 800bc8a:	4b52      	ldr	r3, [pc, #328]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc8c:	6a1b      	ldr	r3, [r3, #32]
 800bc8e:	4a51      	ldr	r2, [pc, #324]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bc94:	6213      	str	r3, [r2, #32]
      break;
 800bc96:	e096      	b.n	800bdc6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_ENABLE();
 800bc98:	4b4e      	ldr	r3, [pc, #312]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9c:	4a4d      	ldr	r2, [pc, #308]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bc9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bca2:	6413      	str	r3, [r2, #64]	; 0x40
 800bca4:	4b4b      	ldr	r3, [pc, #300]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcac:	61fb      	str	r3, [r7, #28]
 800bcae:	69fb      	ldr	r3, [r7, #28]
      __HAL_RCC_USART3_FORCE_RESET();
 800bcb0:	4b48      	ldr	r3, [pc, #288]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bcb2:	6a1b      	ldr	r3, [r3, #32]
 800bcb4:	4a47      	ldr	r2, [pc, #284]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bcb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bcba:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART3_RELEASE_RESET();
 800bcbc:	4b45      	ldr	r3, [pc, #276]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bcbe:	6a1b      	ldr	r3, [r3, #32]
 800bcc0:	4a44      	ldr	r2, [pc, #272]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bcc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bcc6:	6213      	str	r3, [r2, #32]
      break;
 800bcc8:	e07d      	b.n	800bdc6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_ENABLE();
 800bcca:	4b42      	ldr	r3, [pc, #264]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcce:	4a41      	ldr	r2, [pc, #260]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bcd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcd4:	6413      	str	r3, [r2, #64]	; 0x40
 800bcd6:	4b3f      	ldr	r3, [pc, #252]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bcde:	61bb      	str	r3, [r7, #24]
 800bce0:	69bb      	ldr	r3, [r7, #24]
      __HAL_RCC_UART4_FORCE_RESET();
 800bce2:	4b3c      	ldr	r3, [pc, #240]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bce4:	6a1b      	ldr	r3, [r3, #32]
 800bce6:	4a3b      	ldr	r2, [pc, #236]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcec:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART4_RELEASE_RESET();
 800bcee:	4b39      	ldr	r3, [pc, #228]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bcf0:	6a1b      	ldr	r3, [r3, #32]
 800bcf2:	4a38      	ldr	r2, [pc, #224]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bcf4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800bcf8:	6213      	str	r3, [r2, #32]
      break;
 800bcfa:	e064      	b.n	800bdc6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_ENABLE();
 800bcfc:	4b35      	ldr	r3, [pc, #212]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bcfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd00:	4a34      	ldr	r2, [pc, #208]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd06:	6413      	str	r3, [r2, #64]	; 0x40
 800bd08:	4b32      	ldr	r3, [pc, #200]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd10:	617b      	str	r3, [r7, #20]
 800bd12:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_UART5_FORCE_RESET();
 800bd14:	4b2f      	ldr	r3, [pc, #188]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd16:	6a1b      	ldr	r3, [r3, #32]
 800bd18:	4a2e      	ldr	r2, [pc, #184]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd1e:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART5_RELEASE_RESET();
 800bd20:	4b2c      	ldr	r3, [pc, #176]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd22:	6a1b      	ldr	r3, [r3, #32]
 800bd24:	4a2b      	ldr	r2, [pc, #172]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bd2a:	6213      	str	r3, [r2, #32]
      break;
 800bd2c:	e04b      	b.n	800bdc6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 800bd2e:	4b29      	ldr	r3, [pc, #164]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd32:	4a28      	ldr	r2, [pc, #160]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd34:	f043 0320 	orr.w	r3, r3, #32
 800bd38:	6453      	str	r3, [r2, #68]	; 0x44
 800bd3a:	4b26      	ldr	r3, [pc, #152]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd3e:	f003 0320 	and.w	r3, r3, #32
 800bd42:	613b      	str	r3, [r7, #16]
 800bd44:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART6_FORCE_RESET();
 800bd46:	4b23      	ldr	r3, [pc, #140]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4a:	4a22      	ldr	r2, [pc, #136]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd4c:	f043 0320 	orr.w	r3, r3, #32
 800bd50:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 800bd52:	4b20      	ldr	r3, [pc, #128]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd56:	4a1f      	ldr	r2, [pc, #124]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd58:	f023 0320 	bic.w	r3, r3, #32
 800bd5c:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 800bd5e:	e032      	b.n	800bdc6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_ENABLE();
 800bd60:	4b1c      	ldr	r3, [pc, #112]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd64:	4a1b      	ldr	r2, [pc, #108]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd6a:	6413      	str	r3, [r2, #64]	; 0x40
 800bd6c:	4b19      	ldr	r3, [pc, #100]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd74:	60fb      	str	r3, [r7, #12]
 800bd76:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_UART7_FORCE_RESET();
 800bd78:	4b16      	ldr	r3, [pc, #88]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd7a:	6a1b      	ldr	r3, [r3, #32]
 800bd7c:	4a15      	ldr	r2, [pc, #84]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd82:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART7_RELEASE_RESET();
 800bd84:	4b13      	ldr	r3, [pc, #76]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd86:	6a1b      	ldr	r3, [r3, #32]
 800bd88:	4a12      	ldr	r2, [pc, #72]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bd8e:	6213      	str	r3, [r2, #32]
      break;
 800bd90:	e019      	b.n	800bdc6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_ENABLE();
 800bd92:	4b10      	ldr	r3, [pc, #64]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd96:	4a0f      	ldr	r2, [pc, #60]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bd98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd9c:	6413      	str	r3, [r2, #64]	; 0x40
 800bd9e:	4b0d      	ldr	r3, [pc, #52]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bda0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bda6:	60bb      	str	r3, [r7, #8]
 800bda8:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_UART8_FORCE_RESET();
 800bdaa:	4b0a      	ldr	r3, [pc, #40]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bdac:	6a1b      	ldr	r3, [r3, #32]
 800bdae:	4a09      	ldr	r2, [pc, #36]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bdb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bdb4:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART8_RELEASE_RESET();
 800bdb6:	4b07      	ldr	r3, [pc, #28]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bdb8:	6a1b      	ldr	r3, [r3, #32]
 800bdba:	4a06      	ldr	r2, [pc, #24]	; (800bdd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800bdbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdc0:	6213      	str	r3, [r2, #32]
      break;
 800bdc2:	e000      	b.n	800bdc6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UARTNone):
    	break;
 800bdc4:	bf00      	nop
  }
}
 800bdc6:	bf00      	nop
 800bdc8:	372c      	adds	r7, #44	; 0x2c
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	40023800 	.word	0x40023800

0800bdd8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	460b      	mov	r3, r1
 800bde2:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 800bde4:	78fb      	ldrb	r3, [r7, #3]
 800bde6:	2b08      	cmp	r3, #8
 800bde8:	d84d      	bhi.n	800be86 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
 800bdea:	a201      	add	r2, pc, #4	; (adr r2, 800bdf0 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 800bdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf0:	0800be15 	.word	0x0800be15
 800bdf4:	0800be23 	.word	0x0800be23
 800bdf8:	0800be31 	.word	0x0800be31
 800bdfc:	0800be3f 	.word	0x0800be3f
 800be00:	0800be4d 	.word	0x0800be4d
 800be04:	0800be5b 	.word	0x0800be5b
 800be08:	0800be69 	.word	0x0800be69
 800be0c:	0800be77 	.word	0x0800be77
 800be10:	0800be85 	.word	0x0800be85
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 800be14:	4b1f      	ldr	r3, [pc, #124]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be18:	4a1e      	ldr	r2, [pc, #120]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be1a:	f023 0310 	bic.w	r3, r3, #16
 800be1e:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800be20:	e031      	b.n	800be86 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 800be22:	4b1c      	ldr	r3, [pc, #112]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be26:	4a1b      	ldr	r2, [pc, #108]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800be2c:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800be2e:	e02a      	b.n	800be86 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_DISABLE();
 800be30:	4b18      	ldr	r3, [pc, #96]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be34:	4a17      	ldr	r2, [pc, #92]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be3a:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800be3c:	e023      	b.n	800be86 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_DISABLE();
 800be3e:	4b15      	ldr	r3, [pc, #84]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be42:	4a14      	ldr	r2, [pc, #80]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be44:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800be48:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800be4a:	e01c      	b.n	800be86 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_DISABLE();
 800be4c:	4b11      	ldr	r3, [pc, #68]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be50:	4a10      	ldr	r2, [pc, #64]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be56:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800be58:	e015      	b.n	800be86 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 800be5a:	4b0e      	ldr	r3, [pc, #56]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be5e:	4a0d      	ldr	r2, [pc, #52]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be60:	f023 0320 	bic.w	r3, r3, #32
 800be64:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800be66:	e00e      	b.n	800be86 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_DISABLE();
 800be68:	4b0a      	ldr	r3, [pc, #40]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be6c:	4a09      	ldr	r2, [pc, #36]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800be72:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800be74:	e007      	b.n	800be86 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_DISABLE();
 800be76:	4b07      	ldr	r3, [pc, #28]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7a:	4a06      	ldr	r2, [pc, #24]	; (800be94 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800be7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be80:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800be82:	e000      	b.n	800be86 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UARTNone):
    	break;
 800be84:	bf00      	nop
  }
}
 800be86:	bf00      	nop
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	40023800 	.word	0x40023800

0800be98 <_ZN18QAT_Pixel_ARGB4444aSERKt>:
		m_uPxl = other.pxl();
		return *this;
	}

	//Assignment operator to accept a 16bit pixel value
	QAT_Pixel_ARGB4444& operator=(const uint16_t& other) {
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
		m_uPxl = other;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	881a      	ldrh	r2, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	801a      	strh	r2, [r3, #0]
		return *this;
 800beaa:	687b      	ldr	r3, [r7, #4]
	}
 800beac:	4618      	mov	r0, r3
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <_ZN18QAT_Pixel_ARGB44443pxlEt>:
	uint16_t pxl(void) const {
		return m_uPxl;
	}

	//Sets the current 16bit pixel value
	void pxl(uint16_t pxl) {
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	460b      	mov	r3, r1
 800bec2:	807b      	strh	r3, [r7, #2]
		m_uPxl = pxl;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	887a      	ldrh	r2, [r7, #2]
 800bec8:	801a      	strh	r2, [r3, #0]
	}
 800beca:	bf00      	nop
 800becc:	370c      	adds	r7, #12
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr

0800bed6 <_ZN8QAD_LTDC4initEv>:
	static QA_Result init(void) {
 800bed6:	b580      	push	{r7, lr}
 800bed8:	af00      	add	r7, sp, #0
		return get().imp_init();
 800beda:	f7fd fd71 	bl	80099c0 <_ZN8QAD_LTDC3getEv>
 800bede:	4603      	mov	r3, r0
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fd fda7 	bl	8009a34 <_ZN8QAD_LTDC8imp_initEv>
 800bee6:	4603      	mov	r3, r0
	}
 800bee8:	4618      	mov	r0, r3
 800beea:	bd80      	pop	{r7, pc}

0800beec <_ZN8QAD_LTDC17flipLayer0BuffersEv>:
	//---------------------
	//Layer Control Methods

	//Used to flip the front and back buffer for layer 0
	//To be used at the end of rendering visual elements to layer 0 in order for them to become visible on the LCD display
	static void flipLayer0Buffers(void) {
 800beec:	b580      	push	{r7, lr}
 800beee:	af00      	add	r7, sp, #0
		get().imp_flipLayer0Buffers();
 800bef0:	f7fd fd66 	bl	80099c0 <_ZN8QAD_LTDC3getEv>
 800bef4:	4603      	mov	r3, r0
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe f8b0 	bl	800a05c <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>
	}
 800befc:	bf00      	nop
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <_ZN8QAD_LTDC17flipLayer1BuffersEv>:

	//Used to flip the front and back buffer for layer 1
	//To be used at the end of rendering visual elements to layer 1 in order for them to become visible on the LCD display
	static void flipLayer1Buffers(void) {
 800bf00:	b580      	push	{r7, lr}
 800bf02:	af00      	add	r7, sp, #0
		get().imp_flipLayer1Buffers();
 800bf04:	f7fd fd5c 	bl	80099c0 <_ZN8QAD_LTDC3getEv>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fe f8e8 	bl	800a0e0 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>
	}
 800bf10:	bf00      	nop
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <_ZN8QAD_LTDC19getLayer0BackBufferEv>:
	static void* getLayer0BackBufferPtr(void) {
		return get().imp_getLayer0BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 0
	static QAD_LTDC_Buffer* getLayer0BackBuffer(void) {
 800bf14:	b580      	push	{r7, lr}
 800bf16:	af00      	add	r7, sp, #0
		return get().imp_getLayer0BackBuffer();
 800bf18:	f7fd fd52 	bl	80099c0 <_ZN8QAD_LTDC3getEv>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7fe f920 	bl	800a164 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>
 800bf24:	4603      	mov	r3, r0
	}
 800bf26:	4618      	mov	r0, r3
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <_ZN8QAD_LTDC19getLayer1BackBufferEv>:
	static void* getLayer1BackBufferPtr(void) {
		return get().imp_getLayer1BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 1
	static QAD_LTDC_Buffer* getLayer1BackBuffer(void) {
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	af00      	add	r7, sp, #0
		return get().imp_getLayer1BackBuffer();
 800bf2e:	f7fd fd47 	bl	80099c0 <_ZN8QAD_LTDC3getEv>
 800bf32:	4603      	mov	r3, r0
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fe f93b 	bl	800a1b0 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>
 800bf3a:	4603      	mov	r3, r0
	}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <_ZN7QAS_LCD8imp_initEv>:
//QAS_LCD Initialization Method
//
//To be called from static method init()
//To be used to initialize the LTDC peripheral and setup the Font Manager class
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAS_LCD::imp_init(void) {
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af04      	add	r7, sp, #16
 800bf46:	6078      	str	r0, [r7, #4]

	//Return if system is already initialized
	if (m_eInitState) {
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <_ZN7QAS_LCD8imp_initEv+0x14>
  	return QA_OK;
 800bf50:	2300      	movs	r3, #0
 800bf52:	e044      	b.n	800bfde <_ZN7QAS_LCD8imp_initEv+0x9e>
  }

	//Initialize LTDC driver class, returning QA_Fail if LTDC doesn't initialize successfully
	if (QAD_LTDC::init())
 800bf54:	f7ff ffbf 	bl	800bed6 <_ZN8QAD_LTDC4initEv>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	bf14      	ite	ne
 800bf5e:	2301      	movne	r3, #1
 800bf60:	2300      	moveq	r3, #0
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <_ZN7QAS_LCD8imp_initEv+0x2c>
		return QA_Fail;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e038      	b.n	800bfde <_ZN7QAS_LCD8imp_initEv+0x9e>


	//Setup font manager
	m_cFontMgr.clear();  //Clear font manager
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	330c      	adds	r3, #12
 800bf70:	4618      	mov	r0, r3
 800bf72:	f000 fa2e 	bl	800c3d2 <_ZN15QAS_LCD_FontMgr5clearEv>

	  //Add SegoeUI 12pt font (defined in QAS_LCD_Fonts_SegoeUI12pt.hpp)
	m_cFontMgr.add("SegoeUI12pt",
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f103 000c 	add.w	r0, r3, #12
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	9302      	str	r3, [sp, #8]
 800bf80:	2303      	movs	r3, #3
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	2311      	movs	r3, #17
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	4b17      	ldr	r3, [pc, #92]	; (800bfe8 <_ZN7QAS_LCD8imp_initEv+0xa8>)
 800bf8a:	4a18      	ldr	r2, [pc, #96]	; (800bfec <_ZN7QAS_LCD8imp_initEv+0xac>)
 800bf8c:	4918      	ldr	r1, [pc, #96]	; (800bff0 <_ZN7QAS_LCD8imp_initEv+0xb0>)
 800bf8e:	f000 f9f9 	bl	800c384 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI12pt_Height,
								 QAS_LCD_Fonts_SegoeUI12pt_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI12pt_CharGap);

	  //Add SegoeUI 20pt Semi-bold font (defined in QAS_LCD_Fonts_SegoeUI20ptSB.hpp)
	m_cFontMgr.add("SegoeUI20ptSB",
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f103 000c 	add.w	r0, r3, #12
 800bf98:	2303      	movs	r3, #3
 800bf9a:	9302      	str	r3, [sp, #8]
 800bf9c:	2305      	movs	r3, #5
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	231b      	movs	r3, #27
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	4b13      	ldr	r3, [pc, #76]	; (800bff4 <_ZN7QAS_LCD8imp_initEv+0xb4>)
 800bfa6:	4a14      	ldr	r2, [pc, #80]	; (800bff8 <_ZN7QAS_LCD8imp_initEv+0xb8>)
 800bfa8:	4914      	ldr	r1, [pc, #80]	; (800bffc <_ZN7QAS_LCD8imp_initEv+0xbc>)
 800bfaa:	f000 f9eb 	bl	800c384 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI20ptSB_Height,
								 QAS_LCD_Fonts_SegoeUI20ptSB_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI20ptSB_CharGap);

	  //Add Showcard Gothic 18pt font (defined in QAS_LCD_Fonts_ShowcardGothic18pt.hpp)
	m_cFontMgr.add("ShowcardGothic18pt",
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f103 000c 	add.w	r0, r3, #12
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	9302      	str	r3, [sp, #8]
 800bfb8:	2302      	movs	r3, #2
 800bfba:	9301      	str	r3, [sp, #4]
 800bfbc:	231a      	movs	r3, #26
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	4b0f      	ldr	r3, [pc, #60]	; (800c000 <_ZN7QAS_LCD8imp_initEv+0xc0>)
 800bfc2:	4a10      	ldr	r2, [pc, #64]	; (800c004 <_ZN7QAS_LCD8imp_initEv+0xc4>)
 800bfc4:	4910      	ldr	r1, [pc, #64]	; (800c008 <_ZN7QAS_LCD8imp_initEv+0xc8>)
 800bfc6:	f000 f9dd 	bl	800c384 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_ShowcardGothic18pt_SpaceWidth,
								 QAS_LCD_Fonts_ShowcardGothic18pt_CharGap);


	//Set System State
	m_eInitState = QA_Initialized; //Set system as now being initialized
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	701a      	strb	r2, [r3, #0]

	//Set initial data
	m_pDrawBuffer = NULL;   //Set current draw buffer to NULL
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	605a      	str	r2, [r3, #4]
	m_uDrawColor  = 0x0000; //Set current draw color to transparent black
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	811a      	strh	r2, [r3, #8]

	//Return
	return QA_OK;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	0800e94c 	.word	0x0800e94c
 800bfec:	0800e7d4 	.word	0x0800e7d4
 800bff0:	0800e52c 	.word	0x0800e52c
 800bff4:	0800f248 	.word	0x0800f248
 800bff8:	0800f0d0 	.word	0x0800f0d0
 800bffc:	0800e538 	.word	0x0800e538
 800c000:	08010744 	.word	0x08010744
 800c004:	080105cc 	.word	0x080105cc
 800c008:	0800e548 	.word	0x0800e548

0800c00c <_ZN7QAS_LCD14imp_flipLayer0Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer0()
//Used to flip the front and back buffer for layer 0
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer0(void) {
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer0Buffers();
 800c014:	f7ff ff6a 	bl	800beec <_ZN8QAD_LTDC17flipLayer0BuffersEv>
}
 800c018:	bf00      	nop
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <_ZN7QAS_LCD14imp_flipLayer1Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer1()
//Used to flip the front and back buffer for layer 1
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer1(void) {
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer1Buffers();
 800c028:	f7ff ff6a 	bl	800bf00 <_ZN8QAD_LTDC17flipLayer1BuffersEv>
}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method setDrawBuffer()
//Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
//eLayer - Sets whether the current draw buffer is layer 0 or layer1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
void QAS_LCD::imp_setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	460b      	mov	r3, r1
 800c03e:	70fb      	strb	r3, [r7, #3]

	//Retrieve required Back Buffer pointer based on selected layer and store to m_pDrawBuffer
	switch (eLayer) {
 800c040:	78fb      	ldrb	r3, [r7, #3]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d002      	beq.n	800c04c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x18>
 800c046:	2b01      	cmp	r3, #1
 800c048:	d006      	beq.n	800c058 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x24>
 800c04a:	e00b      	b.n	800c064 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer0):
	  	m_pDrawBuffer = QAD_LTDC::getLayer0BackBuffer();
 800c04c:	f7ff ff62 	bl	800bf14 <_ZN8QAD_LTDC19getLayer0BackBufferEv>
 800c050:	4602      	mov	r2, r0
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	605a      	str	r2, [r3, #4]
	  	break;
 800c056:	e005      	b.n	800c064 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer1):
	  	m_pDrawBuffer = QAD_LTDC::getLayer1BackBuffer();
 800c058:	f7ff ff67 	bl	800bf2a <_ZN8QAD_LTDC19getLayer1BackBufferEv>
 800c05c:	4602      	mov	r2, r0
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	605a      	str	r2, [r3, #4]
	  	break;
 800c062:	bf00      	nop
	}

	//Set currently selected draw buffer to Font Manager as well, to be used for text rendering methods
	m_cFontMgr.setDrawBuffer(m_pDrawBuffer);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f103 020c 	add.w	r2, r3, #12
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	4619      	mov	r1, r3
 800c070:	4610      	mov	r0, r2
 800c072:	f000 faef 	bl	800c654 <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>
}
 800c076:	bf00      	nop
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <_ZN7QAS_LCD16imp_setDrawColorEt>:
//QAS_LCD::imp_setDrawColor
//QAS_LCD Rendering Setup Method
//
//To be called from either of the two static setDrawColor() methods
//Sets the current color to be used for rendering methods
void QAS_LCD::imp_setDrawColor(uint16_t uColor) {
 800c07e:	b580      	push	{r7, lr}
 800c080:	b082      	sub	sp, #8
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
 800c086:	460b      	mov	r3, r1
 800c088:	807b      	strh	r3, [r7, #2]

	//Store new draw color
	m_uDrawColor = uColor;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	887a      	ldrh	r2, [r7, #2]
 800c08e:	811a      	strh	r2, [r3, #8]

	//Set currently selected draw color to Font Manager as well, to be used for text rendering methods
  m_cFontMgr.setDrawColor(m_uDrawColor);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f103 020c 	add.w	r2, r3, #12
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	891b      	ldrh	r3, [r3, #8]
 800c09a:	4619      	mov	r1, r3
 800c09c:	4610      	mov	r0, r2
 800c09e:	f000 fae7 	bl	800c670 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>
}
 800c0a2:	bf00      	nop
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
	...

0800c0ac <_ZN7QAS_LCD15imp_clearBufferEv>:
//QAS_LCD::imp_clearBuffer
//QAS_LCD Rendering Method
//
//To be called from static clearBuffer() method
//Used to clear the currently selected buffer to the currently selected draw color
void QAS_LCD::imp_clearBuffer(void) {
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	4a0b      	ldr	r2, [pc, #44]	; (800c0e8 <_ZN7QAS_LCD15imp_clearBufferEv+0x3c>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d80e      	bhi.n	800c0de <_ZN7QAS_LCD15imp_clearBufferEv+0x32>
  	m_pDrawBuffer->pixel[i] = m_uDrawColor;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	685a      	ldr	r2, [r3, #4]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	005b      	lsls	r3, r3, #1
 800c0c8:	441a      	add	r2, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	3308      	adds	r3, #8
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4610      	mov	r0, r2
 800c0d2:	f7ff fee1 	bl	800be98 <_ZN18QAT_Pixel_ARGB4444aSERKt>
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	60fb      	str	r3, [r7, #12]
 800c0dc:	e7ec      	b.n	800c0b8 <_ZN7QAS_LCD15imp_clearBufferEv+0xc>
}
 800c0de:	bf00      	nop
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	0005dbff 	.word	0x0005dbff

0800c0ec <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>:
//
//To be called by static drawRect() method
//Used to draw a non-filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
void QAS_LCD::imp_drawRect(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b08c      	sub	sp, #48	; 0x30
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	881a      	ldrh	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	881b      	ldrh	r3, [r3, #0]
 800c100:	429a      	cmp	r2, r3
 800c102:	d206      	bcs.n	800c112 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	881b      	ldrh	r3, [r3, #0]
 800c108:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	881b      	ldrh	r3, [r3, #0]
 800c10e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c110:	e005      	b.n	800c11e <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.x;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.x;
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	881b      	ldrh	r3, [r3, #0]
 800c11c:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	885a      	ldrh	r2, [r3, #2]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	885b      	ldrh	r3, [r3, #2]
 800c126:	429a      	cmp	r2, r3
 800c128:	d206      	bcs.n	800c138 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	885b      	ldrh	r3, [r3, #2]
 800c12e:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	885b      	ldrh	r3, [r3, #2]
 800c134:	623b      	str	r3, [r7, #32]
 800c136:	e005      	b.n	800c144 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	885b      	ldrh	r3, [r3, #2]
 800c13c:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	885b      	ldrh	r3, [r3, #2]
 800c142:	623b      	str	r3, [r7, #32]
  }

  //Top & Bottom
  uint32_t yt = ys*QAD_LTDC_WIDTH;
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c14a:	fb02 f303 	mul.w	r3, r2, r3
 800c14e:	617b      	str	r3, [r7, #20]
  uint32_t yb = ye*QAD_LTDC_WIDTH;
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c156:	fb02 f303 	mul.w	r3, r2, r3
 800c15a:	613b      	str	r3, [r7, #16]
  for (uint32_t x=xs; x<(xe+1); x++) {
 800c15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15e:	61fb      	str	r3, [r7, #28]
 800c160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c162:	3301      	adds	r3, #1
 800c164:	69fa      	ldr	r2, [r7, #28]
 800c166:	429a      	cmp	r2, r3
 800c168:	d21d      	bcs.n	800c1a6 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xba>
    m_pDrawBuffer->pixel[x+yt].pxl(m_uDrawColor);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	685a      	ldr	r2, [r3, #4]
 800c16e:	69f9      	ldr	r1, [r7, #28]
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	440b      	add	r3, r1
 800c174:	005b      	lsls	r3, r3, #1
 800c176:	441a      	add	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	891b      	ldrh	r3, [r3, #8]
 800c17c:	4619      	mov	r1, r3
 800c17e:	4610      	mov	r0, r2
 800c180:	f7ff fe9a 	bl	800beb8 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[x+yb].pxl(m_uDrawColor);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	69f9      	ldr	r1, [r7, #28]
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	440b      	add	r3, r1
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	441a      	add	r2, r3
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	891b      	ldrh	r3, [r3, #8]
 800c196:	4619      	mov	r1, r3
 800c198:	4610      	mov	r0, r2
 800c19a:	f7ff fe8d 	bl	800beb8 <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t x=xs; x<(xe+1); x++) {
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	61fb      	str	r3, [r7, #28]
 800c1a4:	e7dc      	b.n	800c160 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x74>
  }

  //Left & Right
  for (uint32_t y=(ys+1); y<ye; y++) {
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	61bb      	str	r3, [r7, #24]
 800c1ac:	69ba      	ldr	r2, [r7, #24]
 800c1ae:	6a3b      	ldr	r3, [r7, #32]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d225      	bcs.n	800c200 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x114>
    m_pDrawBuffer->pixel[xs+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	f44f 7148 	mov.w	r1, #800	; 0x320
 800c1be:	fb01 f103 	mul.w	r1, r1, r3
 800c1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c4:	440b      	add	r3, r1
 800c1c6:	005b      	lsls	r3, r3, #1
 800c1c8:	441a      	add	r2, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	891b      	ldrh	r3, [r3, #8]
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	4610      	mov	r0, r2
 800c1d2:	f7ff fe71 	bl	800beb8 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[xe+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	685a      	ldr	r2, [r3, #4]
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	f44f 7148 	mov.w	r1, #800	; 0x320
 800c1e0:	fb01 f103 	mul.w	r1, r1, r3
 800c1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e6:	440b      	add	r3, r1
 800c1e8:	005b      	lsls	r3, r3, #1
 800c1ea:	441a      	add	r2, r3
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	891b      	ldrh	r3, [r3, #8]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	f7ff fe60 	bl	800beb8 <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t y=(ys+1); y<ye; y++) {
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	61bb      	str	r3, [r7, #24]
 800c1fe:	e7d5      	b.n	800c1ac <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xc0>
  }
}
 800c200:	bf00      	nop
 800c202:	3730      	adds	r7, #48	; 0x30
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>:
//
//To be called by static drawRectFill() method
//Used to draw a filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
void QAS_LCD::imp_drawRectFill(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 800c208:	b580      	push	{r7, lr}
 800c20a:	b08c      	sub	sp, #48	; 0x30
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	881a      	ldrh	r2, [r3, #0]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	881b      	ldrh	r3, [r3, #0]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d206      	bcs.n	800c22e <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	881b      	ldrh	r3, [r3, #0]
 800c224:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c22c:	e005      	b.n	800c23a <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.x;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.x;
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	881b      	ldrh	r3, [r3, #0]
 800c238:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	885a      	ldrh	r2, [r3, #2]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	885b      	ldrh	r3, [r3, #2]
 800c242:	429a      	cmp	r2, r3
 800c244:	d206      	bcs.n	800c254 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	885b      	ldrh	r3, [r3, #2]
 800c24a:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	885b      	ldrh	r3, [r3, #2]
 800c250:	623b      	str	r3, [r7, #32]
 800c252:	e005      	b.n	800c260 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	885b      	ldrh	r3, [r3, #2]
 800c258:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	885b      	ldrh	r3, [r3, #2]
 800c25e:	623b      	str	r3, [r7, #32]
  }

  uint32_t yofs;
  for (uint32_t y=ys; y<(ye+1); y++) {
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	61fb      	str	r3, [r7, #28]
 800c264:	6a3b      	ldr	r3, [r7, #32]
 800c266:	3301      	adds	r3, #1
 800c268:	69fa      	ldr	r2, [r7, #28]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d221      	bcs.n	800c2b2 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xaa>
    yofs = y*QAD_LTDC_WIDTH;
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c274:	fb02 f303 	mul.w	r3, r2, r3
 800c278:	617b      	str	r3, [r7, #20]
    for (uint32_t x=xs; x<(xe+1); x++) {
 800c27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27c:	61bb      	str	r3, [r7, #24]
 800c27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c280:	3301      	adds	r3, #1
 800c282:	69ba      	ldr	r2, [r7, #24]
 800c284:	429a      	cmp	r2, r3
 800c286:	d210      	bcs.n	800c2aa <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xa2>
      m_pDrawBuffer->pixel[x+yofs].pxl(m_uDrawColor);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	685a      	ldr	r2, [r3, #4]
 800c28c:	69b9      	ldr	r1, [r7, #24]
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	440b      	add	r3, r1
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	441a      	add	r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	891b      	ldrh	r3, [r3, #8]
 800c29a:	4619      	mov	r1, r3
 800c29c:	4610      	mov	r0, r2
 800c29e:	f7ff fe0b 	bl	800beb8 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    for (uint32_t x=xs; x<(xe+1); x++) {
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	61bb      	str	r3, [r7, #24]
 800c2a8:	e7e9      	b.n	800c27e <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x76>
  for (uint32_t y=ys; y<(ye+1); y++) {
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	61fb      	str	r3, [r7, #28]
 800c2b0:	e7d8      	b.n	800c264 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x5c>
    }
  }
}
 800c2b2:	bf00      	nop
 800c2b4:	3730      	adds	r7, #48	; 0x30
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c2ba:	b480      	push	{r7}
 800c2bc:	b083      	sub	sp, #12
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
 800c2c2:	6039      	str	r1, [r7, #0]
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	370c      	adds	r7, #12
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>:
	QAS_LCD_Font(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t& uHeight, uint16_t& uSpaceWidth, uint16_t& uCharGap) :
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b086      	sub	sp, #24
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	60f8      	str	r0, [r7, #12]
 800c2da:	60b9      	str	r1, [r7, #8]
 800c2dc:	607a      	str	r2, [r7, #4]
 800c2de:	603b      	str	r3, [r7, #0]
		m_uCharGap(uCharGap) {
 800c2e0:	6a3b      	ldr	r3, [r7, #32]
 800c2e2:	881a      	ldrh	r2, [r3, #0]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	871a      	strh	r2, [r3, #56]	; 0x38
 800c2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ea:	881a      	ldrh	r2, [r3, #0]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	875a      	strh	r2, [r3, #58]	; 0x3a
 800c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f2:	881a      	ldrh	r2, [r3, #0]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	879a      	strh	r2, [r3, #60]	; 0x3c
		m_pDesc = (QAS_LCD_FontDesc*)pDesc;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	631a      	str	r2, [r3, #48]	; 0x30
		m_pData = (uint8_t*)pData;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	683a      	ldr	r2, [r7, #0]
 800c302:	635a      	str	r2, [r3, #52]	; 0x34
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 800c304:	2300      	movs	r3, #0
 800c306:	75fb      	strb	r3, [r7, #23]
 800c308:	7dfb      	ldrb	r3, [r7, #23]
 800c30a:	2b2f      	cmp	r3, #47	; 0x2f
 800c30c:	d807      	bhi.n	800c31e <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x4c>
			m_cName[i] = 0;
 800c30e:	7dfb      	ldrb	r3, [r7, #23]
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	2100      	movs	r1, #0
 800c314:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 800c316:	7dfb      	ldrb	r3, [r7, #23]
 800c318:	3301      	adds	r3, #1
 800c31a:	75fb      	strb	r3, [r7, #23]
 800c31c:	e7f4      	b.n	800c308 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x36>
		strcpy(m_cName, strName);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	68b9      	ldr	r1, [r7, #8]
 800c322:	4618      	mov	r0, r3
 800c324:	f001 fbb8 	bl	800da98 <strcpy>
	}
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	4618      	mov	r0, r3
 800c32c:	3718      	adds	r7, #24
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <_ZN12QAS_LCD_FonteqEPKc>:
	bool operator==(const char* strName) {
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	6039      	str	r1, [r7, #0]
		uint8_t uLen = strlen(strName);
 800c33c:	6838      	ldr	r0, [r7, #0]
 800c33e:	f7f3 ff7f 	bl	8000240 <strlen>
 800c342:	4603      	mov	r3, r0
 800c344:	73bb      	strb	r3, [r7, #14]
		uint8_t uIdxLen = (uLen < QAS_LCD_FONTNAME_LENGTH) ? uLen : QAS_LCD_FONTNAME_LENGTH;
 800c346:	7bbb      	ldrb	r3, [r7, #14]
 800c348:	2b30      	cmp	r3, #48	; 0x30
 800c34a:	bf28      	it	cs
 800c34c:	2330      	movcs	r3, #48	; 0x30
 800c34e:	737b      	strb	r3, [r7, #13]
		for (uint8_t i=0; i<uIdxLen; i++) {
 800c350:	2300      	movs	r3, #0
 800c352:	73fb      	strb	r3, [r7, #15]
 800c354:	7bfa      	ldrb	r2, [r7, #15]
 800c356:	7b7b      	ldrb	r3, [r7, #13]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d20e      	bcs.n	800c37a <_ZN12QAS_LCD_FonteqEPKc+0x48>
			if (m_cName[i] != strName[i])
 800c35c:	7bfb      	ldrb	r3, [r7, #15]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	5cd2      	ldrb	r2, [r2, r3]
 800c362:	7bfb      	ldrb	r3, [r7, #15]
 800c364:	6839      	ldr	r1, [r7, #0]
 800c366:	440b      	add	r3, r1
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d001      	beq.n	800c372 <_ZN12QAS_LCD_FonteqEPKc+0x40>
				return false;
 800c36e:	2300      	movs	r3, #0
 800c370:	e004      	b.n	800c37c <_ZN12QAS_LCD_FonteqEPKc+0x4a>
		for (uint8_t i=0; i<uIdxLen; i++) {
 800c372:	7bfb      	ldrb	r3, [r7, #15]
 800c374:	3301      	adds	r3, #1
 800c376:	73fb      	strb	r3, [r7, #15]
 800c378:	e7ec      	b.n	800c354 <_ZN12QAS_LCD_FonteqEPKc+0x22>
		return true;
 800c37a:	2301      	movs	r3, #1
	}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>:
//pDesc       - a pointer to an array of QAS_LCD_FontDesc structures for the font
//pData       - a pointer to an array of uint8_t values storing the bitmap data for the font
//uHeight     - the height in pixels of the font
//uSpaceWidth - the width in pixels of the space character of the font
//uCharGap    - the width in pixels of the gap between each character when rendering strings of characters
void QAS_LCD_FontMgr::add(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t uHeight, uint16_t uSpaceWidth, uint16_t uCharGap) {
 800c384:	b590      	push	{r4, r7, lr}
 800c386:	b08b      	sub	sp, #44	; 0x2c
 800c388:	af04      	add	r7, sp, #16
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	603b      	str	r3, [r7, #0]

	//Create the QAS_LCD_Font class for the new font, providing the required details
	QAS_LCD_Font* cFont = new QAS_LCD_Font(strName, pDesc, pData, uHeight, uSpaceWidth, uCharGap);
 800c392:	2040      	movs	r0, #64	; 0x40
 800c394:	f001 f9b4 	bl	800d700 <_Znwj>
 800c398:	4603      	mov	r3, r0
 800c39a:	461c      	mov	r4, r3
 800c39c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c3a0:	9302      	str	r3, [sp, #8]
 800c3a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	68b9      	ldr	r1, [r7, #8]
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f7ff ff8c 	bl	800c2d2 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>
 800c3ba:	617c      	str	r4, [r7, #20]

	//Add the pointer to the font class to the m_vFonts vector
  m_vFonts.push_back(cFont);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f107 0214 	add.w	r2, r7, #20
 800c3c2:	4611      	mov	r1, r2
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 fac0 	bl	800c94a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>
}
 800c3ca:	bf00      	nop
 800c3cc:	371c      	adds	r7, #28
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd90      	pop	{r4, r7, pc}

0800c3d2 <_ZN15QAS_LCD_FontMgr5clearEv>:

//QAS_LCD_FontMgr::clear
//QAS_LCD_FontMgr Management Method
//
//Used to clear all fonts from the font manager
void QAS_LCD_FontMgr::clear(void) {
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  m_vFonts.clear();
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7f5 feca 	bl	8002176 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
}
 800c3e2:	bf00      	nop
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <_ZN15QAS_LCD_FontMgr4findEPKc>:
//QAS_LCD_FontMgr Management Method
//
//Used to find if a font exists in the Font Manager
//strName - The name of the font to search for
//Returns -1 if a matching font is not found, or the index of the font if it is gound
int8_t QAS_LCD_FontMgr::find(const char* strName) {
 800c3ea:	b590      	push	{r4, r7, lr}
 800c3ec:	b085      	sub	sp, #20
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
 800c3f2:	6039      	str	r1, [r7, #0]
  int8_t iIdx = -1;
 800c3f4:	23ff      	movs	r3, #255	; 0xff
 800c3f6:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73bb      	strb	r3, [r7, #14]
 800c3fc:	7bbc      	ldrb	r4, [r7, #14]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4618      	mov	r0, r3
 800c402:	f7f5 fec6 	bl	8002192 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800c406:	4603      	mov	r3, r0
 800c408:	429c      	cmp	r4, r3
 800c40a:	bf34      	ite	cc
 800c40c:	2301      	movcc	r3, #1
 800c40e:	2300      	movcs	r3, #0
 800c410:	b2db      	uxtb	r3, r3
 800c412:	2b00      	cmp	r3, #0
 800c414:	d014      	beq.n	800c440 <_ZN15QAS_LCD_FontMgr4findEPKc+0x56>
  	if (*m_vFonts[i] == strName) {
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	7bba      	ldrb	r2, [r7, #14]
 800c41a:	4611      	mov	r1, r2
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7f5 fec8 	bl	80021b2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 800c422:	4603      	mov	r3, r0
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6839      	ldr	r1, [r7, #0]
 800c428:	4618      	mov	r0, r3
 800c42a:	f7ff ff82 	bl	800c332 <_ZN12QAS_LCD_FonteqEPKc>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <_ZN15QAS_LCD_FontMgr4findEPKc+0x4e>
  		iIdx = i;
 800c434:	7bbb      	ldrb	r3, [r7, #14]
 800c436:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 800c438:	7bbb      	ldrb	r3, [r7, #14]
 800c43a:	3301      	adds	r3, #1
 800c43c:	73bb      	strb	r3, [r7, #14]
 800c43e:	e7dd      	b.n	800c3fc <_ZN15QAS_LCD_FontMgr4findEPKc+0x12>
  	}
  return iIdx;
 800c440:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3714      	adds	r7, #20
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd90      	pop	{r4, r7, pc}

0800c44c <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>:
//QAS_LCD_FontMgr::setFontByName
//QAS_LCD_FontMgr Management Method
//
//Used to set the current selected font
//strName - The name of the font to select
void QAS_LCD_FontMgr::setFontByName(const char* strName) {
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]

	//Search for matching font
	int8_t iIdx = find(strName);
 800c456:	6839      	ldr	r1, [r7, #0]
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f7ff ffc6 	bl	800c3ea <_ZN15QAS_LCD_FontMgr4findEPKc>
 800c45e:	4603      	mov	r3, r0
 800c460:	73fb      	strb	r3, [r7, #15]

	//If no matching font is found then set current font to none
  if (iIdx < 0) {
 800c462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c466:	2b00      	cmp	r3, #0
 800c468:	da06      	bge.n	800c478 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x2c>
  	m_iCurrentIdx = -1;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	22ff      	movs	r2, #255	; 0xff
 800c46e:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	611a      	str	r2, [r3, #16]
  	return;
 800c476:	e00d      	b.n	800c494 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x48>
  }

  //If a matching font is found then set details as required
  m_iCurrentIdx = iIdx;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	7bfa      	ldrb	r2, [r7, #15]
 800c47c:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[iIdx];
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800c484:	4611      	mov	r1, r2
 800c486:	4618      	mov	r0, r3
 800c488:	f7f5 fe93 	bl	80021b2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 800c48c:	4603      	mov	r3, r0
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	611a      	str	r2, [r3, #16]
}
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>:
//QAS_LCD_FontMgr::setFontByIndex
//QAS_LCD_FontMgr Management Method
//
//Used to set the currently selected font
//uIdx - The index of the font to select
void QAS_LCD_FontMgr::setFontByIndex(uint8_t uIdx) {
 800c49a:	b590      	push	{r4, r7, lr}
 800c49c:	b083      	sub	sp, #12
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	70fb      	strb	r3, [r7, #3]

	//If uIdx is outside of the range of fonts currently stored in m_vFonts index then set current font to none
  if (uIdx >= m_vFonts.size()) {
 800c4a6:	78fc      	ldrb	r4, [r7, #3]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7f5 fe71 	bl	8002192 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	429c      	cmp	r4, r3
 800c4b4:	bf2c      	ite	cs
 800c4b6:	2301      	movcs	r3, #1
 800c4b8:	2300      	movcc	r3, #0
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d006      	beq.n	800c4ce <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x34>
  	m_iCurrentIdx = -1;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	22ff      	movs	r2, #255	; 0xff
 800c4c4:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	611a      	str	r2, [r3, #16]
  	return;
 800c4cc:	e00d      	b.n	800c4ea <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x50>
  }

  //Set current font details as required
  m_iCurrentIdx = uIdx;
 800c4ce:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[uIdx];
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	78fa      	ldrb	r2, [r7, #3]
 800c4da:	4611      	mov	r1, r2
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7f5 fe68 	bl	80021b2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	611a      	str	r2, [r3, #16]
}
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd90      	pop	{r4, r7, pc}

0800c4f0 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>:

//QAS_LCD_FontMgr::getSpaceWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of the space character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getSpaceWidth(void) const {
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	da01      	bge.n	800c506 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x16>
		return 0;
 800c502:	2300      	movs	r3, #0
 800c504:	e003      	b.n	800c50e <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x1e>
	return m_pCurrent->m_uSpaceWidth;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800c50c:	b2db      	uxtb	r3, r3
}
 800c50e:	4618      	mov	r0, r3
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <_ZNK15QAS_LCD_FontMgr10getCharGapEv>:

//QAS_LCD_FontMgr::getCharGap
//QAS_LCD_FontMgr Data Methods
//
//Returns the width is pixels of the gap between each character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getCharGap(void) const {
 800c51a:	b480      	push	{r7}
 800c51c:	b083      	sub	sp, #12
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	da01      	bge.n	800c530 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x16>
		return 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	e003      	b.n	800c538 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x1e>
	return m_pCurrent->m_uCharGap;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c536:	b2db      	uxtb	r3, r3
}
 800c538:	4618      	mov	r0, r3
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <_ZN15QAS_LCD_FontMgr12getCharWidthEc>:
//QAS_LCD_FontMgr::getCharWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of a specific character for the currently selected font.
//If no font is currently selected, or an invalid character is selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getCharWidth(char ch) {
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	460b      	mov	r3, r1
 800c54e:	70fb      	strb	r3, [r7, #3]
  if (m_iCurrentIdx < 0)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800c556:	2b00      	cmp	r3, #0
 800c558:	da01      	bge.n	800c55e <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x1a>
    return 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	e01a      	b.n	800c594 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x50>
  uint16_t uWidth = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	81fb      	strh	r3, [r7, #14]
  if (ch == 32) {
 800c562:	78fb      	ldrb	r3, [r7, #3]
 800c564:	2b20      	cmp	r3, #32
 800c566:	d104      	bne.n	800c572 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x2e>
    uWidth = m_pCurrent->m_uSpaceWidth;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800c56e:	81fb      	strh	r3, [r7, #14]
 800c570:	e00f      	b.n	800c592 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
  } else if ((ch >= 33) && (ch <= 126)) {
 800c572:	78fb      	ldrb	r3, [r7, #3]
 800c574:	2b20      	cmp	r3, #32
 800c576:	d90c      	bls.n	800c592 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
 800c578:	78fb      	ldrb	r3, [r7, #3]
 800c57a:	2b7e      	cmp	r3, #126	; 0x7e
 800c57c:	d809      	bhi.n	800c592 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
    uWidth = m_pCurrent->m_pDesc[ch-33].uWidth;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c584:	78f9      	ldrb	r1, [r7, #3]
 800c586:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x5c>)
 800c588:	440b      	add	r3, r1
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	4413      	add	r3, r2
 800c58e:	881b      	ldrh	r3, [r3, #0]
 800c590:	81fb      	strh	r3, [r7, #14]
  }
  return uWidth;
 800c592:	89fb      	ldrh	r3, [r7, #14]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3714      	adds	r7, #20
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr
 800c5a0:	3fffffdf 	.word	0x3fffffdf

0800c5a4 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>:
//QAS_LCD_FontMgr::getStringWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns is width in pixels for a specific C-style string based on the currently selected font.
//If no font is currently selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getStringWidth(const char* str) {
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  uint16_t uWidth = 0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	81fb      	strh	r3, [r7, #14]
  uint16_t uLength = strlen(str);
 800c5b2:	6838      	ldr	r0, [r7, #0]
 800c5b4:	f7f3 fe44 	bl	8000240 <strlen>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	817b      	strh	r3, [r7, #10]
  uint8_t  uChar;

  if ((uLength == 0) || (m_iCurrentIdx < 0))
 800c5bc:	897b      	ldrh	r3, [r7, #10]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d004      	beq.n	800c5cc <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x28>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	da01      	bge.n	800c5d0 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x2c>
    return uWidth;
 800c5cc:	89fb      	ldrh	r3, [r7, #14]
 800c5ce:	e03b      	b.n	800c648 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xa4>

  for (uint8_t i=0; i<uLength; i++) {
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	737b      	strb	r3, [r7, #13]
 800c5d4:	7b7a      	ldrb	r2, [r7, #13]
 800c5d6:	897b      	ldrh	r3, [r7, #10]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	da2e      	bge.n	800c63a <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x96>
    uChar = (uint8_t)str[i];
 800c5dc:	7b7b      	ldrb	r3, [r7, #13]
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	727b      	strb	r3, [r7, #9]
    if (uChar == 32) {
 800c5e6:	7a7b      	ldrb	r3, [r7, #9]
 800c5e8:	2b20      	cmp	r3, #32
 800c5ea:	d10b      	bne.n	800c604 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x60>
      uWidth += (m_pCurrent->m_uSpaceWidth + m_pCurrent->m_uCharGap);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	691b      	ldr	r3, [r3, #16]
 800c5f6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c5f8:	4413      	add	r3, r2
 800c5fa:	b29a      	uxth	r2, r3
 800c5fc:	89fb      	ldrh	r3, [r7, #14]
 800c5fe:	4413      	add	r3, r2
 800c600:	81fb      	strh	r3, [r7, #14]
 800c602:	e016      	b.n	800c632 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
    } else if ((uChar >= 33) && (uChar <= 126)) {
 800c604:	7a7b      	ldrb	r3, [r7, #9]
 800c606:	2b20      	cmp	r3, #32
 800c608:	d913      	bls.n	800c632 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
 800c60a:	7a7b      	ldrb	r3, [r7, #9]
 800c60c:	2b7e      	cmp	r3, #126	; 0x7e
 800c60e:	d810      	bhi.n	800c632 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
      uWidth += (m_pCurrent->m_pDesc[uChar-33].uWidth + m_pCurrent->m_uCharGap);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c616:	7a79      	ldrb	r1, [r7, #9]
 800c618:	4b0d      	ldr	r3, [pc, #52]	; (800c650 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xac>)
 800c61a:	440b      	add	r3, r1
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	4413      	add	r3, r2
 800c620:	881a      	ldrh	r2, [r3, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c628:	4413      	add	r3, r2
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	89fb      	ldrh	r3, [r7, #14]
 800c62e:	4413      	add	r3, r2
 800c630:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i=0; i<uLength; i++) {
 800c632:	7b7b      	ldrb	r3, [r7, #13]
 800c634:	3301      	adds	r3, #1
 800c636:	737b      	strb	r3, [r7, #13]
 800c638:	e7cc      	b.n	800c5d4 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x30>
    }
  }
  uWidth -= m_pCurrent->m_uCharGap;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c640:	89fa      	ldrh	r2, [r7, #14]
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	81fb      	strh	r3, [r7, #14]
  return uWidth;
 800c646:	89fb      	ldrh	r3, [r7, #14]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	3fffffdf 	.word	0x3fffffdf

0800c654 <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>:
//QAS_LCD_FontMgr::setDrawBuffer
//QAS_LCD_FontMgr Data Methods
//
//Sets the current frame buffer for text to be rendered to
//This method is to be called by QAS_LCD::imp_SetDrawBuffer() method
void QAS_LCD_FontMgr::setDrawBuffer(QAD_LTDC_Buffer* pBuffer) {
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  m_pBuffer = pBuffer;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	683a      	ldr	r2, [r7, #0]
 800c662:	615a      	str	r2, [r3, #20]
}
 800c664:	bf00      	nop
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>:
//QAS_LCD_FontMgr::setDrawColor
//QAS_LCD_FontMgr Data Methods
//
//Sets the current color for text rendering
//This method is to be called by QAS_LCD::imp_setDrawColor() method
void QAS_LCD_FontMgr::setDrawColor(uint16_t uColor) {
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	460b      	mov	r3, r1
 800c67a:	807b      	strh	r3, [r7, #2]
  m_uColor = uColor;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	887a      	ldrh	r2, [r7, #2]
 800c680:	831a      	strh	r2, [r3, #24]
}
 800c682:	bf00      	nop
 800c684:	370c      	adds	r7, #12
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <_ZN15QAS_LCD_FontMgr8drawStrLE14QAT_Vector2_16PKc>:
//
//Used to draw a left-aligned string of characters using the currently selected font/typeface
//String will be drawn to currently selected draw buffer with currently selected draw color
//cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-left location of the string to be drawn
//str  - The C-style string to be drawn
void QAS_LCD_FontMgr::drawStrL(QAT_Vector2_16 cPos, const char* str) {
 800c68e:	b590      	push	{r4, r7, lr}
 800c690:	b089      	sub	sp, #36	; 0x24
 800c692:	af00      	add	r7, sp, #0
 800c694:	60f8      	str	r0, [r7, #12]
 800c696:	60b9      	str	r1, [r7, #8]
 800c698:	607a      	str	r2, [r7, #4]
  if ((m_pBuffer == NULL) || (m_iCurrentIdx < 0))
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	695b      	ldr	r3, [r3, #20]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d05b      	beq.n	800c75a <_ZN15QAS_LCD_FontMgr8drawStrLE14QAT_Vector2_16PKc+0xcc>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	db56      	blt.n	800c75a <_ZN15QAS_LCD_FontMgr8drawStrLE14QAT_Vector2_16PKc+0xcc>
    return;

  uint8_t uLen = strlen(str);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7f3 fdc7 	bl	8000240 <strlen>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	77bb      	strb	r3, [r7, #30]
  if (uLen < 0) return;

  QAT_Vector2_16 cDrawPos = cPos;
 800c6b6:	f107 0314 	add.w	r3, r7, #20
 800c6ba:	68b9      	ldr	r1, [r7, #8]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7f4 fbcc 	bl	8000e5a <_ZN14QAT_Vector2_16C1ERKS_>
  for (uint8_t i=0; i<uLen; i++) {
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	77fb      	strb	r3, [r7, #31]
 800c6c6:	7ffa      	ldrb	r2, [r7, #31]
 800c6c8:	7fbb      	ldrb	r3, [r7, #30]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d246      	bcs.n	800c75c <_ZN15QAS_LCD_FontMgr8drawStrLE14QAT_Vector2_16PKc+0xce>
  	if ((str[i] >= 33) && (str[i] <= 126)) {
 800c6ce:	7ffb      	ldrb	r3, [r7, #31]
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	2b20      	cmp	r3, #32
 800c6d8:	d92c      	bls.n	800c734 <_ZN15QAS_LCD_FontMgr8drawStrLE14QAT_Vector2_16PKc+0xa6>
 800c6da:	7ffb      	ldrb	r3, [r7, #31]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	4413      	add	r3, r2
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	2b7e      	cmp	r3, #126	; 0x7e
 800c6e4:	d826      	bhi.n	800c734 <_ZN15QAS_LCD_FontMgr8drawStrLE14QAT_Vector2_16PKc+0xa6>
      drawCharP(cDrawPos, str[i]);
 800c6e6:	f107 0214 	add.w	r2, r7, #20
 800c6ea:	f107 0318 	add.w	r3, r7, #24
 800c6ee:	4611      	mov	r1, r2
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7f4 fbb2 	bl	8000e5a <_ZN14QAT_Vector2_16C1ERKS_>
 800c6f6:	7ffb      	ldrb	r3, [r7, #31]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	781a      	ldrb	r2, [r3, #0]
 800c6fe:	f107 0318 	add.w	r3, r7, #24
 800c702:	4619      	mov	r1, r3
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f000 f8a2 	bl	800c84e <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>
      cDrawPos.x += getCharWidth(str[i]) + getCharGap();
 800c70a:	7ffb      	ldrb	r3, [r7, #31]
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	4413      	add	r3, r2
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	4619      	mov	r1, r3
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f7ff ff15 	bl	800c544 <_ZN15QAS_LCD_FontMgr12getCharWidthEc>
 800c71a:	4603      	mov	r3, r0
 800c71c:	461c      	mov	r4, r3
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	f7ff fefb 	bl	800c51a <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 800c724:	4603      	mov	r3, r0
 800c726:	4423      	add	r3, r4
 800c728:	8aba      	ldrh	r2, [r7, #20]
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	4413      	add	r3, r2
 800c72e:	b29b      	uxth	r3, r3
 800c730:	82bb      	strh	r3, [r7, #20]
 800c732:	e00e      	b.n	800c752 <_ZN15QAS_LCD_FontMgr8drawStrLE14QAT_Vector2_16PKc+0xc4>
  	} else {
  		cDrawPos.x += getSpaceWidth() + getCharGap();
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f7ff fedb 	bl	800c4f0 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>
 800c73a:	4603      	mov	r3, r0
 800c73c:	461c      	mov	r4, r3
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f7ff feeb 	bl	800c51a <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 800c744:	4603      	mov	r3, r0
 800c746:	4423      	add	r3, r4
 800c748:	8aba      	ldrh	r2, [r7, #20]
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	4413      	add	r3, r2
 800c74e:	b29b      	uxth	r3, r3
 800c750:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 800c752:	7ffb      	ldrb	r3, [r7, #31]
 800c754:	3301      	adds	r3, #1
 800c756:	77fb      	strb	r3, [r7, #31]
 800c758:	e7b5      	b.n	800c6c6 <_ZN15QAS_LCD_FontMgr8drawStrLE14QAT_Vector2_16PKc+0x38>
    return;
 800c75a:	bf00      	nop
  	}
  }
}
 800c75c:	3724      	adds	r7, #36	; 0x24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd90      	pop	{r4, r7, pc}

0800c762 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>:
//
//Used to draw a center-aligned string of characters using the currently selected font/typeface
//String will be drawn to currently selected draw buffer with currently selected draw color
//cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
//str  - The C-style string to be drawn
void QAS_LCD_FontMgr::drawStrC(QAT_Vector2_16 cPos, const char* str) {
 800c762:	b590      	push	{r4, r7, lr}
 800c764:	b089      	sub	sp, #36	; 0x24
 800c766:	af00      	add	r7, sp, #0
 800c768:	60f8      	str	r0, [r7, #12]
 800c76a:	60b9      	str	r1, [r7, #8]
 800c76c:	607a      	str	r2, [r7, #4]
  if ((m_pBuffer == NULL) || (m_iCurrentIdx < 0))
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d067      	beq.n	800c846 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	db62      	blt.n	800c846 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
    return;

  uint8_t uLen = strlen(str);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7f3 fd5d 	bl	8000240 <strlen>
 800c786:	4603      	mov	r3, r0
 800c788:	77bb      	strb	r3, [r7, #30]
  if (uLen < 0) return;

  QAT_Vector2_16 cDrawPos = cPos;
 800c78a:	f107 0314 	add.w	r3, r7, #20
 800c78e:	68b9      	ldr	r1, [r7, #8]
 800c790:	4618      	mov	r0, r3
 800c792:	f7f4 fb62 	bl	8000e5a <_ZN14QAT_Vector2_16C1ERKS_>
  cDrawPos.x -= (getStringWidth(str) / 2);
 800c796:	6879      	ldr	r1, [r7, #4]
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f7ff ff03 	bl	800c5a4 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	085b      	lsrs	r3, r3, #1
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	8aba      	ldrh	r2, [r7, #20]
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	77fb      	strb	r3, [r7, #31]
 800c7b2:	7ffa      	ldrb	r2, [r7, #31]
 800c7b4:	7fbb      	ldrb	r3, [r7, #30]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d246      	bcs.n	800c848 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe6>
  	if ((str[i] >= 33) && (str[i] <= 126)) {
 800c7ba:	7ffb      	ldrb	r3, [r7, #31]
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	4413      	add	r3, r2
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	2b20      	cmp	r3, #32
 800c7c4:	d92c      	bls.n	800c820 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
 800c7c6:	7ffb      	ldrb	r3, [r7, #31]
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	2b7e      	cmp	r3, #126	; 0x7e
 800c7d0:	d826      	bhi.n	800c820 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
      drawCharP(cDrawPos, str[i]);
 800c7d2:	f107 0214 	add.w	r2, r7, #20
 800c7d6:	f107 0318 	add.w	r3, r7, #24
 800c7da:	4611      	mov	r1, r2
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7f4 fb3c 	bl	8000e5a <_ZN14QAT_Vector2_16C1ERKS_>
 800c7e2:	7ffb      	ldrb	r3, [r7, #31]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	4413      	add	r3, r2
 800c7e8:	781a      	ldrb	r2, [r3, #0]
 800c7ea:	f107 0318 	add.w	r3, r7, #24
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f000 f82c 	bl	800c84e <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>
      cDrawPos.x += getCharWidth(str[i]) + getCharGap();
 800c7f6:	7ffb      	ldrb	r3, [r7, #31]
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	4619      	mov	r1, r3
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f7ff fe9f 	bl	800c544 <_ZN15QAS_LCD_FontMgr12getCharWidthEc>
 800c806:	4603      	mov	r3, r0
 800c808:	461c      	mov	r4, r3
 800c80a:	68f8      	ldr	r0, [r7, #12]
 800c80c:	f7ff fe85 	bl	800c51a <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 800c810:	4603      	mov	r3, r0
 800c812:	4423      	add	r3, r4
 800c814:	8aba      	ldrh	r2, [r7, #20]
 800c816:	b29b      	uxth	r3, r3
 800c818:	4413      	add	r3, r2
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	82bb      	strh	r3, [r7, #20]
 800c81e:	e00e      	b.n	800c83e <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xdc>
  	} else {
  		cDrawPos.x += getSpaceWidth() + getCharGap();
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	f7ff fe65 	bl	800c4f0 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>
 800c826:	4603      	mov	r3, r0
 800c828:	461c      	mov	r4, r3
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f7ff fe75 	bl	800c51a <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 800c830:	4603      	mov	r3, r0
 800c832:	4423      	add	r3, r4
 800c834:	8aba      	ldrh	r2, [r7, #20]
 800c836:	b29b      	uxth	r3, r3
 800c838:	4413      	add	r3, r2
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 800c83e:	7ffb      	ldrb	r3, [r7, #31]
 800c840:	3301      	adds	r3, #1
 800c842:	77fb      	strb	r3, [r7, #31]
 800c844:	e7b5      	b.n	800c7b2 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0x50>
    return;
 800c846:	bf00      	nop
  	}
  }
}
 800c848:	3724      	adds	r7, #36	; 0x24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd90      	pop	{r4, r7, pc}

0800c84e <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>:
//QAS_LCD_FontMgr::drawCharP
//QAS_LCD_FontMgr Private Rendering Method
//
//Used to draw an individual character based on selected font's bitmap data
//This method is to be used by drawChar(), drawStrL(), drawStrC() and drawStrR() methods
void QAS_LCD_FontMgr::drawCharP(QAT_Vector2_16 cPos, char ch) {
 800c84e:	b580      	push	{r7, lr}
 800c850:	b08a      	sub	sp, #40	; 0x28
 800c852:	af00      	add	r7, sp, #0
 800c854:	60f8      	str	r0, [r7, #12]
 800c856:	60b9      	str	r1, [r7, #8]
 800c858:	4613      	mov	r3, r2
 800c85a:	71fb      	strb	r3, [r7, #7]
  uint16_t uLetter = (uint8_t)ch - 33;
 800c85c:	79fb      	ldrb	r3, [r7, #7]
 800c85e:	b29b      	uxth	r3, r3
 800c860:	3b21      	subs	r3, #33	; 0x21
 800c862:	83bb      	strh	r3, [r7, #28]
  uint16_t uWidth  = m_pCurrent->m_pDesc[uLetter].uWidth;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	691b      	ldr	r3, [r3, #16]
 800c868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c86a:	8bbb      	ldrh	r3, [r7, #28]
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	4413      	add	r3, r2
 800c870:	881b      	ldrh	r3, [r3, #0]
 800c872:	837b      	strh	r3, [r7, #26]
  uint32_t uOffset = m_pCurrent->m_pDesc[uLetter].uOffset;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c87a:	8bbb      	ldrh	r3, [r7, #28]
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	4413      	add	r3, r2
 800c880:	885b      	ldrh	r3, [r3, #2]
 800c882:	627b      	str	r3, [r7, #36]	; 0x24

  uint8_t uLine;
  uint8_t uLineInc;
  uint32_t uCur;

  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 800c884:	2300      	movs	r3, #0
 800c886:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800c88a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	6912      	ldr	r2, [r2, #16]
 800c892:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800c894:	4293      	cmp	r3, r2
 800c896:	da54      	bge.n	800c942 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xf4>
    uLineInc = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uCur = cPos.x+((cPos.y+uHeight)*QAD_LTDC_WIDTH);
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	881b      	ldrh	r3, [r3, #0]
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	885b      	ldrh	r3, [r3, #2]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c8ae:	4413      	add	r3, r2
 800c8b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c8b4:	fb02 f303 	mul.w	r3, r2, r3
 800c8b8:	440b      	add	r3, r1
 800c8ba:	617b      	str	r3, [r7, #20]
    for (uint16_t i=0; i<uWidth; i++) {
 800c8bc:	2300      	movs	r3, #0
 800c8be:	83fb      	strh	r3, [r7, #30]
 800c8c0:	8bfa      	ldrh	r2, [r7, #30]
 800c8c2:	8b7b      	ldrh	r3, [r7, #26]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d236      	bcs.n	800c936 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe8>
      if (uLineInc == 0) {
 800c8c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d10a      	bne.n	800c8e6 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x98>
        uLine = m_pCurrent->m_pData[uOffset];
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d8:	4413      	add	r3, r2
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uOffset++;
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (uLine & 0x01)
 800c8e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c8ea:	f003 0301 	and.w	r3, r3, #1
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00c      	beq.n	800c90c <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xbe>
        m_pBuffer->pixel[uCur+i] = m_uColor;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	695a      	ldr	r2, [r3, #20]
 800c8f6:	8bf9      	ldrh	r1, [r7, #30]
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	440b      	add	r3, r1
 800c8fc:	005b      	lsls	r3, r3, #1
 800c8fe:	441a      	add	r2, r3
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	3318      	adds	r3, #24
 800c904:	4619      	mov	r1, r3
 800c906:	4610      	mov	r0, r2
 800c908:	f7ff fac6 	bl	800be98 <_ZN18QAT_Pixel_ARGB4444aSERKt>
      uLine = uLine >> 1;
 800c90c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c910:	105b      	asrs	r3, r3, #1
 800c912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      uLineInc++;
 800c916:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c91a:	3301      	adds	r3, #1
 800c91c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (uLineInc > 7)
 800c920:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c924:	2b07      	cmp	r3, #7
 800c926:	d902      	bls.n	800c92e <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe0>
        uLineInc = 0;
 800c928:	2300      	movs	r3, #0
 800c92a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    for (uint16_t i=0; i<uWidth; i++) {
 800c92e:	8bfb      	ldrh	r3, [r7, #30]
 800c930:	3301      	adds	r3, #1
 800c932:	83fb      	strh	r3, [r7, #30]
 800c934:	e7c4      	b.n	800c8c0 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x72>
  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 800c936:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c93a:	3301      	adds	r3, #1
 800c93c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800c940:	e7a3      	b.n	800c88a <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x3c>
    }
  }
}
 800c942:	bf00      	nop
 800c944:	3728      	adds	r7, #40	; 0x28
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b082      	sub	sp, #8
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
 800c952:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d00c      	beq.n	800c97a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	683a      	ldr	r2, [r7, #0]
 800c968:	4619      	mov	r1, r3
 800c96a:	f000 f823 	bl	800c9b4 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	1d1a      	adds	r2, r3, #4
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	605a      	str	r2, [r3, #4]
      }
 800c978:	e008      	b.n	800c98c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 f82d 	bl	800c9da <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>
 800c980:	4603      	mov	r3, r0
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	4619      	mov	r1, r3
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f84e 	bl	800ca28 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800c98c:	bf00      	nop
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	f107 030c 	add.w	r3, r7, #12
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f000 f8fb 	bl	800cba0 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 f908 	bl	800cbd6 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	68b9      	ldr	r1, [r7, #8]
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f000 f90d 	bl	800cbec <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 800c9d2:	bf00      	nop
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b084      	sub	sp, #16
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	1d1a      	adds	r2, r3, #4
 800c9e6:	f107 030c 	add.w	r3, r7, #12
 800c9ea:	4611      	mov	r1, r2
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 f8d7 	bl	800cba0 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800ca02:	4618      	mov	r0, r3
 800ca04:	f000 f805 	bl	800ca12 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800ca08:	4603      	mov	r3, r0
      }
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3708      	adds	r7, #8
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800ca12:	b480      	push	{r7}
 800ca14:	b083      	sub	sp, #12
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800ca1a:	2301      	movs	r3, #1
      }
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800ca28:	b5b0      	push	{r4, r5, r7, lr}
 800ca2a:	b08c      	sub	sp, #48	; 0x30
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800ca34:	4a59      	ldr	r2, [pc, #356]	; (800cb9c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800ca36:	2101      	movs	r1, #1
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f000 f8ed 	bl	800cc18 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>
 800ca3e:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f7ff ffa1 	bl	800c994 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>
 800ca52:	4603      	mov	r3, r0
 800ca54:	617b      	str	r3, [r7, #20]
 800ca56:	f107 0214 	add.w	r2, r7, #20
 800ca5a:	f107 0308 	add.w	r3, r7, #8
 800ca5e:	4611      	mov	r1, r2
 800ca60:	4618      	mov	r0, r3
 800ca62:	f000 f920 	bl	800cca6 <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800ca66:	4603      	mov	r3, r0
 800ca68:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 f92e 	bl	800ccd0 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>
 800ca74:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800ca7a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800ca80:	69ba      	ldr	r2, [r7, #24]
 800ca82:	18d5      	adds	r5, r2, r3
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 f8a6 	bl	800cbd6 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	4629      	mov	r1, r5
 800ca90:	4620      	mov	r0, r4
 800ca92:	f7ff ff8f 	bl	800c9b4 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800ca96:	2300      	movs	r3, #0
 800ca98:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800ca9a:	f7ff ffaf 	bl	800c9fc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d027      	beq.n	800caf4 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800caa4:	f107 0308 	add.w	r3, r7, #8
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 f889 	bl	800cbc0 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800caae:	4603      	mov	r3, r0
 800cab0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7f5 fc34 	bl	8002322 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800caba:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800cabc:	69ba      	ldr	r2, [r7, #24]
 800cabe:	4621      	mov	r1, r4
 800cac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cac2:	f000 f919 	bl	800ccf8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800cac6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800cac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caca:	3304      	adds	r3, #4
 800cacc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800cace:	f107 0308 	add.w	r3, r7, #8
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 f874 	bl	800cbc0 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800cad8:	4603      	mov	r3, r0
 800cada:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	4618      	mov	r0, r3
 800cae0:	f7f5 fc1f 	bl	8002322 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800cae4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800cae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cae8:	6a39      	ldr	r1, [r7, #32]
 800caea:	4620      	mov	r0, r4
 800caec:	f000 f904 	bl	800ccf8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800caf0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800caf2:	e026      	b.n	800cb42 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800caf4:	f107 0308 	add.w	r3, r7, #8
 800caf8:	4618      	mov	r0, r3
 800cafa:	f000 f861 	bl	800cbc0 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800cafe:	4603      	mov	r3, r0
 800cb00:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7f5 fc0c 	bl	8002322 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800cb0a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800cb0c:	69ba      	ldr	r2, [r7, #24]
 800cb0e:	4621      	mov	r1, r4
 800cb10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb12:	f000 f905 	bl	800cd20 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 800cb16:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800cb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1a:	3304      	adds	r3, #4
 800cb1c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800cb1e:	f107 0308 	add.w	r3, r7, #8
 800cb22:	4618      	mov	r0, r3
 800cb24:	f000 f84c 	bl	800cbc0 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7f5 fbf7 	bl	8002322 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800cb34:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800cb36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb38:	6a39      	ldr	r1, [r7, #32]
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f000 f8f0 	bl	800cd20 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 800cb40:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800cb42:	f7ff ff5b 	bl	800c9fc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 800cb46:	4603      	mov	r3, r0
 800cb48:	f083 0301 	eor.w	r3, r3, #1
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d009      	beq.n	800cb66 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7f5 fbe4 	bl	8002322 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	6a39      	ldr	r1, [r7, #32]
 800cb60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb62:	f7f5 fbe9 	bl	8002338 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800cb66:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	689a      	ldr	r2, [r3, #8]
 800cb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800cb72:	461a      	mov	r2, r3
 800cb74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb76:	f7f5 fbc1 	bl	80022fc <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	69ba      	ldr	r2, [r7, #24]
 800cb7e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb84:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800cb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	69ba      	ldr	r2, [r7, #24]
 800cb8c:	441a      	add	r2, r3
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	609a      	str	r2, [r3, #8]
    }
 800cb92:	bf00      	nop
 800cb94:	3730      	adds	r7, #48	; 0x30
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bdb0      	pop	{r4, r5, r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	0800e55c 	.word	0x0800e55c

0800cba0 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	601a      	str	r2, [r3, #0]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	370c      	adds	r7, #12
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cbd6:	b480      	push	{r7}
 800cbd8:	b083      	sub	sp, #12
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800cbec:	b590      	push	{r4, r7, lr}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7ff ffec 	bl	800cbd6 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	681c      	ldr	r4, [r3, #0]
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	4619      	mov	r1, r3
 800cc06:	2004      	movs	r0, #4
 800cc08:	f7ff fb57 	bl	800c2ba <_ZnwjPv>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	601c      	str	r4, [r3, #0]
 800cc10:	bf00      	nop
 800cc12:	3714      	adds	r7, #20
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd90      	pop	{r4, r7, pc}

0800cc18 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800cc18:	b590      	push	{r4, r7, lr}
 800cc1a:	b087      	sub	sp, #28
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f000 f894 	bl	800cd52 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f7f5 fab0 	bl	8002192 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800cc32:	4603      	mov	r3, r0
 800cc34:	1ae2      	subs	r2, r4, r3
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	bf34      	ite	cc
 800cc3c:	2301      	movcc	r3, #1
 800cc3e:	2300      	movcs	r3, #0
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d002      	beq.n	800cc4c <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 fd73 	bl	800d732 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f7f5 faa0 	bl	8002192 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800cc52:	4604      	mov	r4, r0
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f7f5 fa9c 	bl	8002192 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	613b      	str	r3, [r7, #16]
 800cc5e:	f107 0208 	add.w	r2, r7, #8
 800cc62:	f107 0310 	add.w	r3, r7, #16
 800cc66:	4611      	mov	r1, r2
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f000 f883 	bl	800cd74 <_ZSt3maxIjERKT_S2_S2_>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4423      	add	r3, r4
 800cc74:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f7f5 fa8b 	bl	8002192 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d306      	bcc.n	800cc92 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f000 f864 	bl	800cd52 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d904      	bls.n	800cc9c <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x84>
 800cc92:	68f8      	ldr	r0, [r7, #12]
 800cc94:	f000 f85d 	bl	800cd52 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	e000      	b.n	800cc9e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x86>
 800cc9c:	697b      	ldr	r3, [r7, #20]
      }
 800cc9e:	4618      	mov	r0, r3
 800cca0:	371c      	adds	r7, #28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd90      	pop	{r4, r7, pc}

0800cca6 <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cca6:	b590      	push	{r4, r7, lr}
 800cca8:	b083      	sub	sp, #12
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7ff ff85 	bl	800cbc0 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	681c      	ldr	r4, [r3, #0]
 800ccba:	6838      	ldr	r0, [r7, #0]
 800ccbc:	f7ff ff80 	bl	800cbc0 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	1ae3      	subs	r3, r4, r3
 800ccc6:	109b      	asrs	r3, r3, #2
 800ccc8:	4618      	mov	r0, r3
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd90      	pop	{r4, r7, pc}

0800ccd0 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d006      	beq.n	800ccee <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x1e>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6839      	ldr	r1, [r7, #0]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f000 f859 	bl	800cd9c <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>
 800ccea:	4603      	mov	r3, r0
 800ccec:	e000      	b.n	800ccf0 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x20>
 800ccee:	2300      	movs	r3, #0
      }
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800ccf8:	b590      	push	{r4, r7, lr}
 800ccfa:	b089      	sub	sp, #36	; 0x24
 800ccfc:	af02      	add	r7, sp, #8
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
 800cd04:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800cd06:	f88d 4000 	strb.w	r4, [sp]
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	68b9      	ldr	r1, [r7, #8]
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f000 f852 	bl	800cdba <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800cd16:	4603      	mov	r3, r0
      }
 800cd18:	4618      	mov	r0, r3
 800cd1a:	371c      	adds	r7, #28
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd90      	pop	{r4, r7, pc}

0800cd20 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800cd20:	b590      	push	{r4, r7, lr}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
 800cd2c:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	f000 f855 	bl	800cdde <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 800cd34:	4604      	mov	r4, r0
 800cd36:	68b8      	ldr	r0, [r7, #8]
 800cd38:	f000 f851 	bl	800cdde <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 800cd3c:	4601      	mov	r1, r0
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	4620      	mov	r0, r4
 800cd44:	f000 f85a 	bl	800cdfc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800cd48:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3714      	adds	r7, #20
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd90      	pop	{r4, r7, pc}

0800cd52 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b082      	sub	sp, #8
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 f878 	bl	800ce52 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800cd62:	4603      	mov	r3, r0
 800cd64:	4618      	mov	r0, r3
 800cd66:	f000 f85a 	bl	800ce1e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d201      	bcs.n	800cd8e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	e000      	b.n	800cd90 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800cd8e:	687b      	ldr	r3, [r7, #4]
    }
 800cd90:	4618      	mov	r0, r3
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800cda6:	2200      	movs	r2, #0
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 f85c 	bl	800ce68 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b084      	sub	sp, #16
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	60f8      	str	r0, [r7, #12]
 800cdc2:	60b9      	str	r1, [r7, #8]
 800cdc4:	607a      	str	r2, [r7, #4]
 800cdc6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	68b9      	ldr	r1, [r7, #8]
 800cdce:	68f8      	ldr	r0, [r7, #12]
 800cdd0:	f000 f868 	bl	800cea4 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 800cdd4:	4603      	mov	r3, r0
      }
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b084      	sub	sp, #16
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800cde6:	f107 030c 	add.w	r3, r7, #12
 800cdea:	6879      	ldr	r1, [r7, #4]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 f876 	bl	800cede <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
 800ce08:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	68b9      	ldr	r1, [r7, #8]
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f000 f874 	bl	800cefc <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 800ce14:	4603      	mov	r3, r0
 800ce16:	4618      	mov	r0, r3
 800ce18:	3710      	adds	r7, #16
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b084      	sub	sp, #16
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800ce26:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ce2a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 f889 	bl	800cf44 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>
 800ce32:	4603      	mov	r3, r0
 800ce34:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800ce36:	f107 0208 	add.w	r2, r7, #8
 800ce3a:	f107 030c 	add.w	r3, r7, #12
 800ce3e:	4611      	mov	r1, r2
 800ce40:	4618      	mov	r0, r3
 800ce42:	f000 f88b 	bl	800cf5c <_ZSt3minIjERKT_S2_S2_>
 800ce46:	4603      	mov	r3, r0
 800ce48:	681b      	ldr	r3, [r3, #0]
      }
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}

0800ce52 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800ce52:	b480      	push	{r7}
 800ce54:	b083      	sub	sp, #12
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	370c      	adds	r7, #12
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	f000 f885 	bl	800cf84 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	bf8c      	ite	hi
 800ce82:	2301      	movhi	r3, #1
 800ce84:	2300      	movls	r3, #0
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d001      	beq.n	800ce90 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ce8c:	f000 fc4e 	bl	800d72c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	4618      	mov	r0, r3
 800ce96:	f000 fc33 	bl	800d700 <_Znwj>
 800ce9a:	4603      	mov	r3, r0
      }
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800cea4:	b5b0      	push	{r4, r5, r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
 800ceb0:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f000 f872 	bl	800cf9c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800ceb8:	4604      	mov	r4, r0
 800ceba:	68b8      	ldr	r0, [r7, #8]
 800cebc:	f000 f86e 	bl	800cf9c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800cec0:	4605      	mov	r5, r0
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 f86a 	bl	800cf9c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800cec8:	4602      	mov	r2, r0
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	4629      	mov	r1, r5
 800cece:	4620      	mov	r0, r4
 800ced0:	f000 f86f 	bl	800cfb2 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800ced4:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800ced6:	4618      	mov	r0, r3
 800ced8:	3710      	adds	r7, #16
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bdb0      	pop	{r4, r5, r7, pc}

0800cede <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>:
      move_iterator(iterator_type __i)
 800cede:	b480      	push	{r7}
 800cee0:	b083      	sub	sp, #12
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	601a      	str	r2, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4618      	mov	r0, r3
 800cef2:	370c      	adds	r7, #12
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b086      	sub	sp, #24
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	68b9      	ldr	r1, [r7, #8]
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f000 f86c 	bl	800cfee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>
 800cf16:	4603      	mov	r3, r0
    }
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3718      	adds	r7, #24
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	75fb      	strb	r3, [r7, #23]
			     && __is_pointer<_II>::__value
			     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
			      _Category>::__copy_m(__first, __last, __result);
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	68b9      	ldr	r1, [r7, #8]
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	f000 f86a 	bl	800d00e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>
 800cf3a:	4603      	mov	r3, r0
    }
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f819 	bl	800cf84 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 800cf52:	4603      	mov	r3, r0
 800cf54:	4618      	mov	r0, r3
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800cf5c:	b480      	push	{r7}
 800cf5e:	b083      	sub	sp, #12
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d201      	bcs.n	800cf76 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	e000      	b.n	800cf78 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800cf76:	687b      	ldr	r3, [r7, #4]
    }
 800cf78:	4618      	mov	r0, r3
 800cf7a:	370c      	adds	r7, #12
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800cf8c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800cf90:	4618      	mov	r0, r3
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>:
    __niter_base(_Iterator __it)
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	370c      	adds	r7, #12
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr

0800cfb2 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b086      	sub	sp, #24
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	60f8      	str	r0, [r7, #12]
 800cfba:	60b9      	str	r1, [r7, #8]
 800cfbc:	607a      	str	r2, [r7, #4]
 800cfbe:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800cfc0:	68ba      	ldr	r2, [r7, #8]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	109b      	asrs	r3, r3, #2
 800cfc8:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	dd06      	ble.n	800cfde <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	68f9      	ldr	r1, [r7, #12]
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 fc1d 	bl	800d818 <memmove>
      return __result + __count;
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	4413      	add	r3, r2
    }
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3718      	adds	r7, #24
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b084      	sub	sp, #16
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	60f8      	str	r0, [r7, #12]
 800cff6:	60b9      	str	r1, [r7, #8]
 800cff8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	68b9      	ldr	r1, [r7, #8]
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f000 f822 	bl	800d048 <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 800d004:	4603      	mov	r3, r0
 800d006:	4618      	mov	r0, r3
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800d00e:	b580      	push	{r7, lr}
 800d010:	b086      	sub	sp, #24
 800d012:	af00      	add	r7, sp, #0
 800d014:	60f8      	str	r0, [r7, #12]
 800d016:	60b9      	str	r1, [r7, #8]
 800d018:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	1ad3      	subs	r3, r2, r3
 800d020:	109b      	asrs	r3, r3, #2
 800d022:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d006      	beq.n	800d038 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	461a      	mov	r2, r3
 800d030:	68f9      	ldr	r1, [r7, #12]
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 fbf0 	bl	800d818 <memmove>
	  return __result + _Num;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	4413      	add	r3, r2
	}
 800d040:	4618      	mov	r0, r3
 800d042:	3718      	adds	r7, #24
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800d048:	b590      	push	{r4, r7, lr}
 800d04a:	b085      	sub	sp, #20
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800d054:	68f8      	ldr	r0, [r7, #12]
 800d056:	f000 f80f 	bl	800d078 <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800d05a:	4604      	mov	r4, r0
 800d05c:	68b8      	ldr	r0, [r7, #8]
 800d05e:	f000 f80b 	bl	800d078 <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800d062:	4603      	mov	r3, r0
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	4619      	mov	r1, r3
 800d068:	4620      	mov	r0, r4
 800d06a:	f000 f816 	bl	800d09a <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 800d06e:	4603      	mov	r3, r0
    }
 800d070:	4618      	mov	r0, r3
 800d072:	3714      	adds	r7, #20
 800d074:	46bd      	mov	sp, r7
 800d076:	bd90      	pop	{r4, r7, pc}

0800d078 <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800d080:	1d3b      	adds	r3, r7, #4
 800d082:	4618      	mov	r0, r3
 800d084:	f000 f82c 	bl	800d0e0 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>
 800d088:	4603      	mov	r3, r0
 800d08a:	4618      	mov	r0, r3
 800d08c:	f000 f834 	bl	800d0f8 <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>
 800d090:	4603      	mov	r3, r0
 800d092:	4618      	mov	r0, r3
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800d09a:	b5b0      	push	{r4, r5, r7, lr}
 800d09c:	b084      	sub	sp, #16
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	60f8      	str	r0, [r7, #12]
 800d0a2:	60b9      	str	r1, [r7, #8]
 800d0a4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f7ff ff78 	bl	800cf9c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800d0ac:	4604      	mov	r4, r0
 800d0ae:	68b8      	ldr	r0, [r7, #8]
 800d0b0:	f7ff ff74 	bl	800cf9c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7ff ff6f 	bl	800cf9c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f7ff ff2b 	bl	800cf20 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	1d3b      	adds	r3, r7, #4
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f000 f81c 	bl	800d10e <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>
 800d0d6:	4603      	mov	r3, r0
    }
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bdb0      	pop	{r4, r5, r7, pc}

0800d0e0 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>:
      base() const
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	4618      	mov	r0, r3
 800d104:	370c      	adds	r7, #12
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr

0800d10e <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800d10e:	b480      	push	{r7}
 800d110:	b083      	sub	sp, #12
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
 800d116:	6039      	str	r1, [r7, #0]
    { return __res; }
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	4618      	mov	r0, r3
 800d11c:	370c      	adds	r7, #12
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 800d126:	b580      	push	{r7, lr}
 800d128:	b084      	sub	sp, #16
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
 800d12e:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	7b1b      	ldrb	r3, [r3, #12]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d001      	beq.n	800d13c <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 800d138:	2300      	movs	r3, #0
 800d13a:	e010      	b.n	800d15e <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	6839      	ldr	r1, [r7, #0]
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	4798      	blx	r3
 800d148:	4603      	mov	r3, r0
 800d14a:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d001      	beq.n	800d156 <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 800d152:	7bfb      	ldrb	r3, [r7, #15]
 800d154:	e003      	b.n	800d15e <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2201      	movs	r2, #1
 800d15a:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 800d166:	b580      	push	{r7, lr}
 800d168:	b082      	sub	sp, #8
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	3308      	adds	r3, #8
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	6839      	ldr	r1, [r7, #0]
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	4798      	blx	r3
}
 800d17e:	bf00      	nop
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 800d186:	b580      	push	{r7, lr}
 800d188:	b084      	sub	sp, #16
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 800d190:	6838      	ldr	r0, [r7, #0]
 800d192:	f7f3 f855 	bl	8000240 <strlen>
 800d196:	4603      	mov	r3, r0
 800d198:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 800d19a:	2300      	movs	r3, #0
 800d19c:	81fb      	strh	r3, [r7, #14]
 800d19e:	89fa      	ldrh	r2, [r7, #14]
 800d1a0:	89bb      	ldrh	r3, [r7, #12]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d20f      	bcs.n	800d1c6 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	3304      	adds	r3, #4
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f000 f837 	bl	800d21e <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800d1b0:	89fb      	ldrh	r3, [r7, #14]
 800d1b2:	683a      	ldr	r2, [r7, #0]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	f000 f9df 	bl	800d57c <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 800d1be:	89fb      	ldrh	r3, [r7, #14]
 800d1c0:	3301      	adds	r3, #1
 800d1c2:	81fb      	strh	r3, [r7, #14]
 800d1c4:	e7eb      	b.n	800d19e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f000 f827 	bl	800d21e <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	210d      	movs	r1, #13
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f000 f9d1 	bl	800d57c <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	330c      	adds	r3, #12
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	4798      	blx	r3
}
 800d1e6:	bf00      	nop
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b082      	sub	sp, #8
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f000 f80f 	bl	800d21e <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800d200:	4603      	mov	r3, r0
 800d202:	210d      	movs	r1, #13
 800d204:	4618      	mov	r0, r3
 800d206:	f000 f9b9 	bl	800d57c <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	330c      	adds	r3, #12
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	4798      	blx	r3
}
 800d216:	bf00      	nop
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800d21e:	b580      	push	{r7, lr}
 800d220:	b082      	sub	sp, #8
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
	return get();
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 f805 	bl	800d236 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 800d22c:	4603      	mov	r3, r0
      }
 800d22e:	4618      	mov	r0, r3
 800d230:	3708      	adds	r7, #8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800d236:	b580      	push	{r7, lr}
 800d238:	b082      	sub	sp, #8
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	4618      	mov	r0, r3
 800d242:	f000 f805 	bl	800d250 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 800d246:	4603      	mov	r3, r0
 800d248:	4618      	mov	r0, r3
 800d24a:	3708      	adds	r7, #8
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f000 f806 	bl	800d26c <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800d260:	4603      	mov	r3, r0
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4618      	mov	r0, r3
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4618      	mov	r0, r3
 800d278:	f000 f805 	bl	800d286 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d27c:	4603      	mov	r3, r0
 800d27e:	4618      	mov	r0, r3
 800d280:	3708      	adds	r7, #8
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}

0800d286 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d286:	b580      	push	{r7, lr}
 800d288:	b082      	sub	sp, #8
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 f805 	bl	800d29e <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 800d294:	4603      	mov	r3, r0
 800d296:	4618      	mov	r0, r3
 800d298:	3708      	adds	r7, #8
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b082      	sub	sp, #8
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f000 f805 	bl	800d2b8 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b082      	sub	sp, #8
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
 800d2d6:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	3314      	adds	r3, #20
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f000 f8e2 	bl	800d4a6 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fe f8ba 	bl	800b45e <_ZN8QAD_UART4initEv>
 800d2ea:	4603      	mov	r3, r0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	3314      	adds	r3, #20
 800d300:	4618      	mov	r0, r3
 800d302:	f000 f8d0 	bl	800d4a6 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800d306:	4603      	mov	r3, r0
 800d308:	4618      	mov	r0, r3
 800d30a:	f7fe f8d2 	bl	800b4b2 <_ZN8QAD_UART6deinitEv>
}
 800d30e:	bf00      	nop
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 800d316:	b590      	push	{r4, r7, lr}
 800d318:	b0a5      	sub	sp, #148	; 0x94
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	3314      	adds	r3, #20
 800d324:	4618      	mov	r0, r3
 800d326:	f000 f8be 	bl	800d4a6 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800d32a:	4603      	mov	r3, r0
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7fe f8d6 	bl	800b4de <_ZN8QAD_UART9getHandleEv>
 800d332:	4602      	mov	r2, r0
 800d334:	f107 0308 	add.w	r3, r7, #8
 800d338:	4611      	mov	r1, r2
 800d33a:	2284      	movs	r2, #132	; 0x84
 800d33c:	4618      	mov	r0, r3
 800d33e:	f000 fa5d 	bl	800d7fc <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	69db      	ldr	r3, [r3, #28]
 800d346:	f003 0320 	and.w	r3, r3, #32
 800d34a:	2b20      	cmp	r3, #32
 800d34c:	bf0c      	ite	eq
 800d34e:	2301      	moveq	r3, #1
 800d350:	2300      	movne	r3, #0
 800d352:	b2db      	uxtb	r3, r3
 800d354:	2b00      	cmp	r3, #0
 800d356:	d01e      	beq.n	800d396 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x80>
  	uint8_t uData = m_pUART->dataRX();
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	3314      	adds	r3, #20
 800d35c:	4618      	mov	r0, r3
 800d35e:	f000 f8a2 	bl	800d4a6 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800d362:	4603      	mov	r3, r0
 800d364:	4618      	mov	r0, r3
 800d366:	f7fe f92e 	bl	800b5c6 <_ZN8QAD_UART6dataRXEv>
 800d36a:	4603      	mov	r3, r0
 800d36c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  	if (m_eRXState)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	7b9b      	ldrb	r3, [r3, #14]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d00b      	beq.n	800d390 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	3308      	adds	r3, #8
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7ff ff4e 	bl	800d21e <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800d382:	4602      	mov	r2, r0
 800d384:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d388:	4619      	mov	r1, r3
 800d38a:	4610      	mov	r0, r2
 800d38c:	f000 f8f6 	bl	800d57c <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	2220      	movs	r2, #32
 800d394:	621a      	str	r2, [r3, #32]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	69db      	ldr	r3, [r3, #28]
 800d39a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d39e:	2b80      	cmp	r3, #128	; 0x80
 800d3a0:	bf0c      	ite	eq
 800d3a2:	2301      	moveq	r3, #1
 800d3a4:	2300      	movne	r3, #0
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d034      	beq.n	800d416 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x100>
  	if (!m_pTXFIFO->empty()) {
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	3304      	adds	r3, #4
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7ff ff34 	bl	800d21e <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f000 f8cc 	bl	800d556 <_ZN14QAT_FIFOBuffer5emptyEv>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	bf0c      	ite	eq
 800d3c4:	2301      	moveq	r3, #1
 800d3c6:	2300      	movne	r3, #0
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d014      	beq.n	800d3f8 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe2>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	3314      	adds	r3, #20
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 f867 	bl	800d4a6 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800d3d8:	4604      	mov	r4, r0
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	3304      	adds	r3, #4
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7ff ff1d 	bl	800d21e <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f000 f8ec 	bl	800d5c4 <_ZN14QAT_FIFOBuffer3popEv>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f7fe f8d8 	bl	800b5a6 <_ZN8QAD_UART6dataTXEh>
 800d3f6:	e00b      	b.n	800d410 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfa>
  	} else {
      m_pUART->stopTX();
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	3314      	adds	r3, #20
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f000 f852 	bl	800d4a6 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800d402:	4603      	mov	r3, r0
 800d404:	4618      	mov	r0, r3
 800d406:	f7fe f88c 	bl	800b522 <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	2280      	movs	r2, #128	; 0x80
 800d414:	621a      	str	r2, [r3, #32]
  }
}
 800d416:	bf00      	nop
 800d418:	3794      	adds	r7, #148	; 0x94
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd90      	pop	{r4, r7, pc}

0800d41e <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 800d41e:	b580      	push	{r7, lr}
 800d420:	b082      	sub	sp, #8
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	3314      	adds	r3, #20
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 f83b 	bl	800d4a6 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800d430:	4603      	mov	r3, r0
 800d432:	4618      	mov	r0, r3
 800d434:	f7fe f85f 	bl	800b4f6 <_ZN8QAD_UART7startTXEv>
}
 800d438:	bf00      	nop
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	3314      	adds	r3, #20
 800d44c:	4618      	mov	r0, r3
 800d44e:	f000 f82a 	bl	800d4a6 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800d452:	4603      	mov	r3, r0
 800d454:	4618      	mov	r0, r3
 800d456:	f7fe f864 	bl	800b522 <_ZN8QAD_UART6stopTXEv>
}
 800d45a:	bf00      	nop
 800d45c:	3708      	adds	r7, #8
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 800d462:	b580      	push	{r7, lr}
 800d464:	b082      	sub	sp, #8
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	3314      	adds	r3, #20
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 f819 	bl	800d4a6 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800d474:	4603      	mov	r3, r0
 800d476:	4618      	mov	r0, r3
 800d478:	f7fe f869 	bl	800b54e <_ZN8QAD_UART7startRXEv>
}
 800d47c:	bf00      	nop
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	3314      	adds	r3, #20
 800d490:	4618      	mov	r0, r3
 800d492:	f000 f808 	bl	800d4a6 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800d496:	4603      	mov	r3, r0
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fe f86e 	bl	800b57a <_ZN8QAD_UART6stopRXEv>
}
 800d49e:	bf00      	nop
 800d4a0:	3708      	adds	r7, #8
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b082      	sub	sp, #8
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
	return get();
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 f805 	bl	800d4be <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 800d4b4:	4603      	mov	r3, r0
      }
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b082      	sub	sp, #8
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f000 f805 	bl	800d4d8 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3708      	adds	r7, #8
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f000 f806 	bl	800d4f4 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3708      	adds	r7, #8
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4618      	mov	r0, r3
 800d500:	f000 f805 	bl	800d50e <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d504:	4603      	mov	r3, r0
 800d506:	4618      	mov	r0, r3
 800d508:	3708      	adds	r7, #8
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d50e:	b580      	push	{r7, lr}
 800d510:	b082      	sub	sp, #8
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 f805 	bl	800d526 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 800d51c:	4603      	mov	r3, r0
 800d51e:	4618      	mov	r0, r3
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d526:	b580      	push	{r7, lr}
 800d528:	b082      	sub	sp, #8
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	4618      	mov	r0, r3
 800d532:	f000 f805 	bl	800d540 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 800d536:	4603      	mov	r3, r0
 800d538:	4618      	mov	r0, r3
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	4618      	mov	r0, r3
 800d54c:	370c      	adds	r7, #12
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 800d556:	b480      	push	{r7}
 800d558:	b083      	sub	sp, #12
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	88da      	ldrh	r2, [r3, #6]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	891b      	ldrh	r3, [r3, #8]
 800d566:	429a      	cmp	r2, r3
 800d568:	d101      	bne.n	800d56e <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 800d56a:	2301      	movs	r3, #1
 800d56c:	e000      	b.n	800d570 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 800d56e:	2300      	movs	r3, #0
}
 800d570:	4618      	mov	r0, r3
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	891b      	ldrh	r3, [r3, #8]
 800d58e:	4619      	mov	r1, r3
 800d590:	4610      	mov	r0, r2
 800d592:	f000 f847 	bl	800d624 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800d596:	4602      	mov	r2, r0
 800d598:	78fb      	ldrb	r3, [r7, #3]
 800d59a:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	889a      	ldrh	r2, [r3, #4]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	891b      	ldrh	r3, [r3, #8]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d906      	bls.n	800d5b6 <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	891b      	ldrh	r3, [r3, #8]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 800d5b4:	e002      	b.n	800d5bc <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	811a      	strh	r2, [r3, #8]
}
 800d5bc:	bf00      	nop
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f7ff ffc2 	bl	800d556 <_ZN14QAT_FIFOBuffer5emptyEv>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	bf0c      	ite	eq
 800d5d8:	2301      	moveq	r3, #1
 800d5da:	2300      	movne	r3, #0
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d01b      	beq.n	800d61a <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	88db      	ldrh	r3, [r3, #6]
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	4610      	mov	r0, r2
 800d5ec:	f000 f81a 	bl	800d624 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	889a      	ldrh	r2, [r3, #4]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	88db      	ldrh	r3, [r3, #6]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d906      	bls.n	800d610 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	88db      	ldrh	r3, [r3, #6]
 800d606:	3301      	adds	r3, #1
 800d608:	b29a      	uxth	r2, r3
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	80da      	strh	r2, [r3, #6]
 800d60e:	e002      	b.n	800d616 <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	80da      	strh	r2, [r3, #6]
		return uData;
 800d616:	7bfb      	ldrb	r3, [r7, #15]
 800d618:	e000      	b.n	800d61c <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 800d61a:	2300      	movs	r3, #0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3710      	adds	r7, #16
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
	return get()[__i];
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 f807 	bl	800d642 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800d634:	4602      	mov	r2, r0
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	4413      	add	r3, r2
      }
 800d63a:	4618      	mov	r0, r3
 800d63c:	3708      	adds	r7, #8
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}

0800d642 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800d642:	b580      	push	{r7, lr}
 800d644:	b082      	sub	sp, #8
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f000 f805 	bl	800d65c <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800d652:	4603      	mov	r3, r0
 800d654:	4618      	mov	r0, r3
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	4618      	mov	r0, r3
 800d668:	f000 f806 	bl	800d678 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800d66c:	4603      	mov	r3, r0
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4618      	mov	r0, r3
 800d672:	3708      	adds	r7, #8
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4618      	mov	r0, r3
 800d684:	f000 f805 	bl	800d692 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d688:	4603      	mov	r3, r0
 800d68a:	4618      	mov	r0, r3
 800d68c:	3708      	adds	r7, #8
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d692:	b580      	push	{r7, lr}
 800d694:	b082      	sub	sp, #8
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 f805 	bl	800d6aa <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3708      	adds	r7, #8
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b082      	sub	sp, #8
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f000 f805 	bl	800d6c4 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3708      	adds	r7, #8
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	370c      	adds	r7, #12
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr

0800d6da <_ZdlPv>:
 800d6da:	f000 b887 	b.w	800d7ec <free>

0800d6de <_ZdlPvj>:
 800d6de:	f7ff bffc 	b.w	800d6da <_ZdlPv>

0800d6e2 <__cxa_guard_acquire>:
 800d6e2:	6803      	ldr	r3, [r0, #0]
 800d6e4:	07db      	lsls	r3, r3, #31
 800d6e6:	d406      	bmi.n	800d6f6 <__cxa_guard_acquire+0x14>
 800d6e8:	7843      	ldrb	r3, [r0, #1]
 800d6ea:	b103      	cbz	r3, 800d6ee <__cxa_guard_acquire+0xc>
 800d6ec:	deff      	udf	#255	; 0xff
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	7043      	strb	r3, [r0, #1]
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	4770      	bx	lr
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	4770      	bx	lr

0800d6fa <__cxa_guard_release>:
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	6003      	str	r3, [r0, #0]
 800d6fe:	4770      	bx	lr

0800d700 <_Znwj>:
 800d700:	2801      	cmp	r0, #1
 800d702:	bf38      	it	cc
 800d704:	2001      	movcc	r0, #1
 800d706:	b510      	push	{r4, lr}
 800d708:	4604      	mov	r4, r0
 800d70a:	4620      	mov	r0, r4
 800d70c:	f000 f866 	bl	800d7dc <malloc>
 800d710:	b930      	cbnz	r0, 800d720 <_Znwj+0x20>
 800d712:	f000 f823 	bl	800d75c <_ZSt15get_new_handlerv>
 800d716:	b908      	cbnz	r0, 800d71c <_Znwj+0x1c>
 800d718:	f000 f828 	bl	800d76c <abort>
 800d71c:	4780      	blx	r0
 800d71e:	e7f4      	b.n	800d70a <_Znwj+0xa>
 800d720:	bd10      	pop	{r4, pc}

0800d722 <_Znaj>:
 800d722:	f7ff bfed 	b.w	800d700 <_Znwj>

0800d726 <__cxa_pure_virtual>:
 800d726:	b508      	push	{r3, lr}
 800d728:	f000 f812 	bl	800d750 <_ZSt9terminatev>

0800d72c <_ZSt17__throw_bad_allocv>:
 800d72c:	b508      	push	{r3, lr}
 800d72e:	f000 f81d 	bl	800d76c <abort>

0800d732 <_ZSt20__throw_length_errorPKc>:
 800d732:	b508      	push	{r3, lr}
 800d734:	f000 f81a 	bl	800d76c <abort>

0800d738 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d738:	b508      	push	{r3, lr}
 800d73a:	4780      	blx	r0
 800d73c:	f000 f816 	bl	800d76c <abort>

0800d740 <_ZSt13get_terminatev>:
 800d740:	4b02      	ldr	r3, [pc, #8]	; (800d74c <_ZSt13get_terminatev+0xc>)
 800d742:	6818      	ldr	r0, [r3, #0]
 800d744:	f3bf 8f5b 	dmb	ish
 800d748:	4770      	bx	lr
 800d74a:	bf00      	nop
 800d74c:	2000000c 	.word	0x2000000c

0800d750 <_ZSt9terminatev>:
 800d750:	b508      	push	{r3, lr}
 800d752:	f7ff fff5 	bl	800d740 <_ZSt13get_terminatev>
 800d756:	f7ff ffef 	bl	800d738 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800d75c <_ZSt15get_new_handlerv>:
 800d75c:	4b02      	ldr	r3, [pc, #8]	; (800d768 <_ZSt15get_new_handlerv+0xc>)
 800d75e:	6818      	ldr	r0, [r3, #0]
 800d760:	f3bf 8f5b 	dmb	ish
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	200004f0 	.word	0x200004f0

0800d76c <abort>:
 800d76c:	b508      	push	{r3, lr}
 800d76e:	2006      	movs	r0, #6
 800d770:	f000 f956 	bl	800da20 <raise>
 800d774:	2001      	movs	r0, #1
 800d776:	f7f4 fffa 	bl	800276e <_exit>

0800d77a <atexit>:
 800d77a:	2300      	movs	r3, #0
 800d77c:	4601      	mov	r1, r0
 800d77e:	461a      	mov	r2, r3
 800d780:	4618      	mov	r0, r3
 800d782:	f000 b991 	b.w	800daa8 <__register_exitproc>
	...

0800d788 <__errno>:
 800d788:	4b01      	ldr	r3, [pc, #4]	; (800d790 <__errno+0x8>)
 800d78a:	6818      	ldr	r0, [r3, #0]
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop
 800d790:	20000010 	.word	0x20000010

0800d794 <__libc_init_array>:
 800d794:	b570      	push	{r4, r5, r6, lr}
 800d796:	4d0d      	ldr	r5, [pc, #52]	; (800d7cc <__libc_init_array+0x38>)
 800d798:	4c0d      	ldr	r4, [pc, #52]	; (800d7d0 <__libc_init_array+0x3c>)
 800d79a:	1b64      	subs	r4, r4, r5
 800d79c:	10a4      	asrs	r4, r4, #2
 800d79e:	2600      	movs	r6, #0
 800d7a0:	42a6      	cmp	r6, r4
 800d7a2:	d109      	bne.n	800d7b8 <__libc_init_array+0x24>
 800d7a4:	4d0b      	ldr	r5, [pc, #44]	; (800d7d4 <__libc_init_array+0x40>)
 800d7a6:	4c0c      	ldr	r4, [pc, #48]	; (800d7d8 <__libc_init_array+0x44>)
 800d7a8:	f000 fd0e 	bl	800e1c8 <_init>
 800d7ac:	1b64      	subs	r4, r4, r5
 800d7ae:	10a4      	asrs	r4, r4, #2
 800d7b0:	2600      	movs	r6, #0
 800d7b2:	42a6      	cmp	r6, r4
 800d7b4:	d105      	bne.n	800d7c2 <__libc_init_array+0x2e>
 800d7b6:	bd70      	pop	{r4, r5, r6, pc}
 800d7b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7bc:	4798      	blx	r3
 800d7be:	3601      	adds	r6, #1
 800d7c0:	e7ee      	b.n	800d7a0 <__libc_init_array+0xc>
 800d7c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7c6:	4798      	blx	r3
 800d7c8:	3601      	adds	r6, #1
 800d7ca:	e7f2      	b.n	800d7b2 <__libc_init_array+0x1e>
 800d7cc:	08011b70 	.word	0x08011b70
 800d7d0:	08011b70 	.word	0x08011b70
 800d7d4:	08011b70 	.word	0x08011b70
 800d7d8:	08011b74 	.word	0x08011b74

0800d7dc <malloc>:
 800d7dc:	4b02      	ldr	r3, [pc, #8]	; (800d7e8 <malloc+0xc>)
 800d7de:	4601      	mov	r1, r0
 800d7e0:	6818      	ldr	r0, [r3, #0]
 800d7e2:	f000 b88b 	b.w	800d8fc <_malloc_r>
 800d7e6:	bf00      	nop
 800d7e8:	20000010 	.word	0x20000010

0800d7ec <free>:
 800d7ec:	4b02      	ldr	r3, [pc, #8]	; (800d7f8 <free+0xc>)
 800d7ee:	4601      	mov	r1, r0
 800d7f0:	6818      	ldr	r0, [r3, #0]
 800d7f2:	f000 b833 	b.w	800d85c <_free_r>
 800d7f6:	bf00      	nop
 800d7f8:	20000010 	.word	0x20000010

0800d7fc <memcpy>:
 800d7fc:	440a      	add	r2, r1
 800d7fe:	4291      	cmp	r1, r2
 800d800:	f100 33ff 	add.w	r3, r0, #4294967295
 800d804:	d100      	bne.n	800d808 <memcpy+0xc>
 800d806:	4770      	bx	lr
 800d808:	b510      	push	{r4, lr}
 800d80a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d80e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d812:	4291      	cmp	r1, r2
 800d814:	d1f9      	bne.n	800d80a <memcpy+0xe>
 800d816:	bd10      	pop	{r4, pc}

0800d818 <memmove>:
 800d818:	4288      	cmp	r0, r1
 800d81a:	b510      	push	{r4, lr}
 800d81c:	eb01 0402 	add.w	r4, r1, r2
 800d820:	d902      	bls.n	800d828 <memmove+0x10>
 800d822:	4284      	cmp	r4, r0
 800d824:	4623      	mov	r3, r4
 800d826:	d807      	bhi.n	800d838 <memmove+0x20>
 800d828:	1e43      	subs	r3, r0, #1
 800d82a:	42a1      	cmp	r1, r4
 800d82c:	d008      	beq.n	800d840 <memmove+0x28>
 800d82e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d832:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d836:	e7f8      	b.n	800d82a <memmove+0x12>
 800d838:	4402      	add	r2, r0
 800d83a:	4601      	mov	r1, r0
 800d83c:	428a      	cmp	r2, r1
 800d83e:	d100      	bne.n	800d842 <memmove+0x2a>
 800d840:	bd10      	pop	{r4, pc}
 800d842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d84a:	e7f7      	b.n	800d83c <memmove+0x24>

0800d84c <memset>:
 800d84c:	4402      	add	r2, r0
 800d84e:	4603      	mov	r3, r0
 800d850:	4293      	cmp	r3, r2
 800d852:	d100      	bne.n	800d856 <memset+0xa>
 800d854:	4770      	bx	lr
 800d856:	f803 1b01 	strb.w	r1, [r3], #1
 800d85a:	e7f9      	b.n	800d850 <memset+0x4>

0800d85c <_free_r>:
 800d85c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d85e:	2900      	cmp	r1, #0
 800d860:	d048      	beq.n	800d8f4 <_free_r+0x98>
 800d862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d866:	9001      	str	r0, [sp, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	f1a1 0404 	sub.w	r4, r1, #4
 800d86e:	bfb8      	it	lt
 800d870:	18e4      	addlt	r4, r4, r3
 800d872:	f000 f97f 	bl	800db74 <__malloc_lock>
 800d876:	4a20      	ldr	r2, [pc, #128]	; (800d8f8 <_free_r+0x9c>)
 800d878:	9801      	ldr	r0, [sp, #4]
 800d87a:	6813      	ldr	r3, [r2, #0]
 800d87c:	4615      	mov	r5, r2
 800d87e:	b933      	cbnz	r3, 800d88e <_free_r+0x32>
 800d880:	6063      	str	r3, [r4, #4]
 800d882:	6014      	str	r4, [r2, #0]
 800d884:	b003      	add	sp, #12
 800d886:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d88a:	f000 b979 	b.w	800db80 <__malloc_unlock>
 800d88e:	42a3      	cmp	r3, r4
 800d890:	d90b      	bls.n	800d8aa <_free_r+0x4e>
 800d892:	6821      	ldr	r1, [r4, #0]
 800d894:	1862      	adds	r2, r4, r1
 800d896:	4293      	cmp	r3, r2
 800d898:	bf04      	itt	eq
 800d89a:	681a      	ldreq	r2, [r3, #0]
 800d89c:	685b      	ldreq	r3, [r3, #4]
 800d89e:	6063      	str	r3, [r4, #4]
 800d8a0:	bf04      	itt	eq
 800d8a2:	1852      	addeq	r2, r2, r1
 800d8a4:	6022      	streq	r2, [r4, #0]
 800d8a6:	602c      	str	r4, [r5, #0]
 800d8a8:	e7ec      	b.n	800d884 <_free_r+0x28>
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	b10b      	cbz	r3, 800d8b4 <_free_r+0x58>
 800d8b0:	42a3      	cmp	r3, r4
 800d8b2:	d9fa      	bls.n	800d8aa <_free_r+0x4e>
 800d8b4:	6811      	ldr	r1, [r2, #0]
 800d8b6:	1855      	adds	r5, r2, r1
 800d8b8:	42a5      	cmp	r5, r4
 800d8ba:	d10b      	bne.n	800d8d4 <_free_r+0x78>
 800d8bc:	6824      	ldr	r4, [r4, #0]
 800d8be:	4421      	add	r1, r4
 800d8c0:	1854      	adds	r4, r2, r1
 800d8c2:	42a3      	cmp	r3, r4
 800d8c4:	6011      	str	r1, [r2, #0]
 800d8c6:	d1dd      	bne.n	800d884 <_free_r+0x28>
 800d8c8:	681c      	ldr	r4, [r3, #0]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	6053      	str	r3, [r2, #4]
 800d8ce:	4421      	add	r1, r4
 800d8d0:	6011      	str	r1, [r2, #0]
 800d8d2:	e7d7      	b.n	800d884 <_free_r+0x28>
 800d8d4:	d902      	bls.n	800d8dc <_free_r+0x80>
 800d8d6:	230c      	movs	r3, #12
 800d8d8:	6003      	str	r3, [r0, #0]
 800d8da:	e7d3      	b.n	800d884 <_free_r+0x28>
 800d8dc:	6825      	ldr	r5, [r4, #0]
 800d8de:	1961      	adds	r1, r4, r5
 800d8e0:	428b      	cmp	r3, r1
 800d8e2:	bf04      	itt	eq
 800d8e4:	6819      	ldreq	r1, [r3, #0]
 800d8e6:	685b      	ldreq	r3, [r3, #4]
 800d8e8:	6063      	str	r3, [r4, #4]
 800d8ea:	bf04      	itt	eq
 800d8ec:	1949      	addeq	r1, r1, r5
 800d8ee:	6021      	streq	r1, [r4, #0]
 800d8f0:	6054      	str	r4, [r2, #4]
 800d8f2:	e7c7      	b.n	800d884 <_free_r+0x28>
 800d8f4:	b003      	add	sp, #12
 800d8f6:	bd30      	pop	{r4, r5, pc}
 800d8f8:	200004f4 	.word	0x200004f4

0800d8fc <_malloc_r>:
 800d8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8fe:	1ccd      	adds	r5, r1, #3
 800d900:	f025 0503 	bic.w	r5, r5, #3
 800d904:	3508      	adds	r5, #8
 800d906:	2d0c      	cmp	r5, #12
 800d908:	bf38      	it	cc
 800d90a:	250c      	movcc	r5, #12
 800d90c:	2d00      	cmp	r5, #0
 800d90e:	4606      	mov	r6, r0
 800d910:	db01      	blt.n	800d916 <_malloc_r+0x1a>
 800d912:	42a9      	cmp	r1, r5
 800d914:	d903      	bls.n	800d91e <_malloc_r+0x22>
 800d916:	230c      	movs	r3, #12
 800d918:	6033      	str	r3, [r6, #0]
 800d91a:	2000      	movs	r0, #0
 800d91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d91e:	f000 f929 	bl	800db74 <__malloc_lock>
 800d922:	4921      	ldr	r1, [pc, #132]	; (800d9a8 <_malloc_r+0xac>)
 800d924:	680a      	ldr	r2, [r1, #0]
 800d926:	4614      	mov	r4, r2
 800d928:	b99c      	cbnz	r4, 800d952 <_malloc_r+0x56>
 800d92a:	4f20      	ldr	r7, [pc, #128]	; (800d9ac <_malloc_r+0xb0>)
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	b923      	cbnz	r3, 800d93a <_malloc_r+0x3e>
 800d930:	4621      	mov	r1, r4
 800d932:	4630      	mov	r0, r6
 800d934:	f000 f83c 	bl	800d9b0 <_sbrk_r>
 800d938:	6038      	str	r0, [r7, #0]
 800d93a:	4629      	mov	r1, r5
 800d93c:	4630      	mov	r0, r6
 800d93e:	f000 f837 	bl	800d9b0 <_sbrk_r>
 800d942:	1c43      	adds	r3, r0, #1
 800d944:	d123      	bne.n	800d98e <_malloc_r+0x92>
 800d946:	230c      	movs	r3, #12
 800d948:	6033      	str	r3, [r6, #0]
 800d94a:	4630      	mov	r0, r6
 800d94c:	f000 f918 	bl	800db80 <__malloc_unlock>
 800d950:	e7e3      	b.n	800d91a <_malloc_r+0x1e>
 800d952:	6823      	ldr	r3, [r4, #0]
 800d954:	1b5b      	subs	r3, r3, r5
 800d956:	d417      	bmi.n	800d988 <_malloc_r+0x8c>
 800d958:	2b0b      	cmp	r3, #11
 800d95a:	d903      	bls.n	800d964 <_malloc_r+0x68>
 800d95c:	6023      	str	r3, [r4, #0]
 800d95e:	441c      	add	r4, r3
 800d960:	6025      	str	r5, [r4, #0]
 800d962:	e004      	b.n	800d96e <_malloc_r+0x72>
 800d964:	6863      	ldr	r3, [r4, #4]
 800d966:	42a2      	cmp	r2, r4
 800d968:	bf0c      	ite	eq
 800d96a:	600b      	streq	r3, [r1, #0]
 800d96c:	6053      	strne	r3, [r2, #4]
 800d96e:	4630      	mov	r0, r6
 800d970:	f000 f906 	bl	800db80 <__malloc_unlock>
 800d974:	f104 000b 	add.w	r0, r4, #11
 800d978:	1d23      	adds	r3, r4, #4
 800d97a:	f020 0007 	bic.w	r0, r0, #7
 800d97e:	1ac2      	subs	r2, r0, r3
 800d980:	d0cc      	beq.n	800d91c <_malloc_r+0x20>
 800d982:	1a1b      	subs	r3, r3, r0
 800d984:	50a3      	str	r3, [r4, r2]
 800d986:	e7c9      	b.n	800d91c <_malloc_r+0x20>
 800d988:	4622      	mov	r2, r4
 800d98a:	6864      	ldr	r4, [r4, #4]
 800d98c:	e7cc      	b.n	800d928 <_malloc_r+0x2c>
 800d98e:	1cc4      	adds	r4, r0, #3
 800d990:	f024 0403 	bic.w	r4, r4, #3
 800d994:	42a0      	cmp	r0, r4
 800d996:	d0e3      	beq.n	800d960 <_malloc_r+0x64>
 800d998:	1a21      	subs	r1, r4, r0
 800d99a:	4630      	mov	r0, r6
 800d99c:	f000 f808 	bl	800d9b0 <_sbrk_r>
 800d9a0:	3001      	adds	r0, #1
 800d9a2:	d1dd      	bne.n	800d960 <_malloc_r+0x64>
 800d9a4:	e7cf      	b.n	800d946 <_malloc_r+0x4a>
 800d9a6:	bf00      	nop
 800d9a8:	200004f4 	.word	0x200004f4
 800d9ac:	200004f8 	.word	0x200004f8

0800d9b0 <_sbrk_r>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	4d06      	ldr	r5, [pc, #24]	; (800d9cc <_sbrk_r+0x1c>)
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	4608      	mov	r0, r1
 800d9ba:	602b      	str	r3, [r5, #0]
 800d9bc:	f7f4 fee2 	bl	8002784 <_sbrk>
 800d9c0:	1c43      	adds	r3, r0, #1
 800d9c2:	d102      	bne.n	800d9ca <_sbrk_r+0x1a>
 800d9c4:	682b      	ldr	r3, [r5, #0]
 800d9c6:	b103      	cbz	r3, 800d9ca <_sbrk_r+0x1a>
 800d9c8:	6023      	str	r3, [r4, #0]
 800d9ca:	bd38      	pop	{r3, r4, r5, pc}
 800d9cc:	2000059c 	.word	0x2000059c

0800d9d0 <_raise_r>:
 800d9d0:	291f      	cmp	r1, #31
 800d9d2:	b538      	push	{r3, r4, r5, lr}
 800d9d4:	4604      	mov	r4, r0
 800d9d6:	460d      	mov	r5, r1
 800d9d8:	d904      	bls.n	800d9e4 <_raise_r+0x14>
 800d9da:	2316      	movs	r3, #22
 800d9dc:	6003      	str	r3, [r0, #0]
 800d9de:	f04f 30ff 	mov.w	r0, #4294967295
 800d9e2:	bd38      	pop	{r3, r4, r5, pc}
 800d9e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d9e6:	b112      	cbz	r2, 800d9ee <_raise_r+0x1e>
 800d9e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9ec:	b94b      	cbnz	r3, 800da02 <_raise_r+0x32>
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	f000 f830 	bl	800da54 <_getpid_r>
 800d9f4:	462a      	mov	r2, r5
 800d9f6:	4601      	mov	r1, r0
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9fe:	f000 b817 	b.w	800da30 <_kill_r>
 800da02:	2b01      	cmp	r3, #1
 800da04:	d00a      	beq.n	800da1c <_raise_r+0x4c>
 800da06:	1c59      	adds	r1, r3, #1
 800da08:	d103      	bne.n	800da12 <_raise_r+0x42>
 800da0a:	2316      	movs	r3, #22
 800da0c:	6003      	str	r3, [r0, #0]
 800da0e:	2001      	movs	r0, #1
 800da10:	e7e7      	b.n	800d9e2 <_raise_r+0x12>
 800da12:	2400      	movs	r4, #0
 800da14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da18:	4628      	mov	r0, r5
 800da1a:	4798      	blx	r3
 800da1c:	2000      	movs	r0, #0
 800da1e:	e7e0      	b.n	800d9e2 <_raise_r+0x12>

0800da20 <raise>:
 800da20:	4b02      	ldr	r3, [pc, #8]	; (800da2c <raise+0xc>)
 800da22:	4601      	mov	r1, r0
 800da24:	6818      	ldr	r0, [r3, #0]
 800da26:	f7ff bfd3 	b.w	800d9d0 <_raise_r>
 800da2a:	bf00      	nop
 800da2c:	20000010 	.word	0x20000010

0800da30 <_kill_r>:
 800da30:	b538      	push	{r3, r4, r5, lr}
 800da32:	4d07      	ldr	r5, [pc, #28]	; (800da50 <_kill_r+0x20>)
 800da34:	2300      	movs	r3, #0
 800da36:	4604      	mov	r4, r0
 800da38:	4608      	mov	r0, r1
 800da3a:	4611      	mov	r1, r2
 800da3c:	602b      	str	r3, [r5, #0]
 800da3e:	f7f4 fe86 	bl	800274e <_kill>
 800da42:	1c43      	adds	r3, r0, #1
 800da44:	d102      	bne.n	800da4c <_kill_r+0x1c>
 800da46:	682b      	ldr	r3, [r5, #0]
 800da48:	b103      	cbz	r3, 800da4c <_kill_r+0x1c>
 800da4a:	6023      	str	r3, [r4, #0]
 800da4c:	bd38      	pop	{r3, r4, r5, pc}
 800da4e:	bf00      	nop
 800da50:	2000059c 	.word	0x2000059c

0800da54 <_getpid_r>:
 800da54:	f7f4 be73 	b.w	800273e <_getpid>

0800da58 <siprintf>:
 800da58:	b40e      	push	{r1, r2, r3}
 800da5a:	b500      	push	{lr}
 800da5c:	b09c      	sub	sp, #112	; 0x70
 800da5e:	ab1d      	add	r3, sp, #116	; 0x74
 800da60:	9002      	str	r0, [sp, #8]
 800da62:	9006      	str	r0, [sp, #24]
 800da64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da68:	4809      	ldr	r0, [pc, #36]	; (800da90 <siprintf+0x38>)
 800da6a:	9107      	str	r1, [sp, #28]
 800da6c:	9104      	str	r1, [sp, #16]
 800da6e:	4909      	ldr	r1, [pc, #36]	; (800da94 <siprintf+0x3c>)
 800da70:	f853 2b04 	ldr.w	r2, [r3], #4
 800da74:	9105      	str	r1, [sp, #20]
 800da76:	6800      	ldr	r0, [r0, #0]
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	a902      	add	r1, sp, #8
 800da7c:	f000 f8e2 	bl	800dc44 <_svfiprintf_r>
 800da80:	9b02      	ldr	r3, [sp, #8]
 800da82:	2200      	movs	r2, #0
 800da84:	701a      	strb	r2, [r3, #0]
 800da86:	b01c      	add	sp, #112	; 0x70
 800da88:	f85d eb04 	ldr.w	lr, [sp], #4
 800da8c:	b003      	add	sp, #12
 800da8e:	4770      	bx	lr
 800da90:	20000010 	.word	0x20000010
 800da94:	ffff0208 	.word	0xffff0208

0800da98 <strcpy>:
 800da98:	4603      	mov	r3, r0
 800da9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da9e:	f803 2b01 	strb.w	r2, [r3], #1
 800daa2:	2a00      	cmp	r2, #0
 800daa4:	d1f9      	bne.n	800da9a <strcpy+0x2>
 800daa6:	4770      	bx	lr

0800daa8 <__register_exitproc>:
 800daa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800db68 <__register_exitproc+0xc0>
 800dab0:	4606      	mov	r6, r0
 800dab2:	f8d8 0000 	ldr.w	r0, [r8]
 800dab6:	461f      	mov	r7, r3
 800dab8:	460d      	mov	r5, r1
 800daba:	4691      	mov	r9, r2
 800dabc:	f000 f856 	bl	800db6c <__retarget_lock_acquire_recursive>
 800dac0:	4b25      	ldr	r3, [pc, #148]	; (800db58 <__register_exitproc+0xb0>)
 800dac2:	681c      	ldr	r4, [r3, #0]
 800dac4:	b934      	cbnz	r4, 800dad4 <__register_exitproc+0x2c>
 800dac6:	4c25      	ldr	r4, [pc, #148]	; (800db5c <__register_exitproc+0xb4>)
 800dac8:	601c      	str	r4, [r3, #0]
 800daca:	4b25      	ldr	r3, [pc, #148]	; (800db60 <__register_exitproc+0xb8>)
 800dacc:	b113      	cbz	r3, 800dad4 <__register_exitproc+0x2c>
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800dad4:	6863      	ldr	r3, [r4, #4]
 800dad6:	2b1f      	cmp	r3, #31
 800dad8:	dd07      	ble.n	800daea <__register_exitproc+0x42>
 800dada:	f8d8 0000 	ldr.w	r0, [r8]
 800dade:	f000 f847 	bl	800db70 <__retarget_lock_release_recursive>
 800dae2:	f04f 30ff 	mov.w	r0, #4294967295
 800dae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daea:	b34e      	cbz	r6, 800db40 <__register_exitproc+0x98>
 800daec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800daf0:	b988      	cbnz	r0, 800db16 <__register_exitproc+0x6e>
 800daf2:	4b1c      	ldr	r3, [pc, #112]	; (800db64 <__register_exitproc+0xbc>)
 800daf4:	b923      	cbnz	r3, 800db00 <__register_exitproc+0x58>
 800daf6:	f8d8 0000 	ldr.w	r0, [r8]
 800dafa:	f000 f838 	bl	800db6e <__retarget_lock_release>
 800dafe:	e7f0      	b.n	800dae2 <__register_exitproc+0x3a>
 800db00:	f44f 7084 	mov.w	r0, #264	; 0x108
 800db04:	f7ff fe6a 	bl	800d7dc <malloc>
 800db08:	2800      	cmp	r0, #0
 800db0a:	d0f4      	beq.n	800daf6 <__register_exitproc+0x4e>
 800db0c:	2300      	movs	r3, #0
 800db0e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800db12:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800db16:	6863      	ldr	r3, [r4, #4]
 800db18:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800db1c:	2201      	movs	r2, #1
 800db1e:	409a      	lsls	r2, r3
 800db20:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800db24:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800db28:	4313      	orrs	r3, r2
 800db2a:	2e02      	cmp	r6, #2
 800db2c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800db30:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800db34:	bf02      	ittt	eq
 800db36:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800db3a:	431a      	orreq	r2, r3
 800db3c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 800db40:	6863      	ldr	r3, [r4, #4]
 800db42:	f8d8 0000 	ldr.w	r0, [r8]
 800db46:	1c5a      	adds	r2, r3, #1
 800db48:	3302      	adds	r3, #2
 800db4a:	6062      	str	r2, [r4, #4]
 800db4c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800db50:	f000 f80e 	bl	800db70 <__retarget_lock_release_recursive>
 800db54:	2000      	movs	r0, #0
 800db56:	e7c6      	b.n	800dae6 <__register_exitproc+0x3e>
 800db58:	20000588 	.word	0x20000588
 800db5c:	200004fc 	.word	0x200004fc
 800db60:	00000000 	.word	0x00000000
 800db64:	0800d7dd 	.word	0x0800d7dd
 800db68:	20000074 	.word	0x20000074

0800db6c <__retarget_lock_acquire_recursive>:
 800db6c:	4770      	bx	lr

0800db6e <__retarget_lock_release>:
 800db6e:	4770      	bx	lr

0800db70 <__retarget_lock_release_recursive>:
 800db70:	4770      	bx	lr
	...

0800db74 <__malloc_lock>:
 800db74:	4801      	ldr	r0, [pc, #4]	; (800db7c <__malloc_lock+0x8>)
 800db76:	f7ff bff9 	b.w	800db6c <__retarget_lock_acquire_recursive>
 800db7a:	bf00      	nop
 800db7c:	20000594 	.word	0x20000594

0800db80 <__malloc_unlock>:
 800db80:	4801      	ldr	r0, [pc, #4]	; (800db88 <__malloc_unlock+0x8>)
 800db82:	f7ff bff5 	b.w	800db70 <__retarget_lock_release_recursive>
 800db86:	bf00      	nop
 800db88:	20000594 	.word	0x20000594

0800db8c <__ssputs_r>:
 800db8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db90:	688e      	ldr	r6, [r1, #8]
 800db92:	429e      	cmp	r6, r3
 800db94:	4682      	mov	sl, r0
 800db96:	460c      	mov	r4, r1
 800db98:	4690      	mov	r8, r2
 800db9a:	461f      	mov	r7, r3
 800db9c:	d838      	bhi.n	800dc10 <__ssputs_r+0x84>
 800db9e:	898a      	ldrh	r2, [r1, #12]
 800dba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dba4:	d032      	beq.n	800dc0c <__ssputs_r+0x80>
 800dba6:	6825      	ldr	r5, [r4, #0]
 800dba8:	6909      	ldr	r1, [r1, #16]
 800dbaa:	eba5 0901 	sub.w	r9, r5, r1
 800dbae:	6965      	ldr	r5, [r4, #20]
 800dbb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dbb8:	3301      	adds	r3, #1
 800dbba:	444b      	add	r3, r9
 800dbbc:	106d      	asrs	r5, r5, #1
 800dbbe:	429d      	cmp	r5, r3
 800dbc0:	bf38      	it	cc
 800dbc2:	461d      	movcc	r5, r3
 800dbc4:	0553      	lsls	r3, r2, #21
 800dbc6:	d531      	bpl.n	800dc2c <__ssputs_r+0xa0>
 800dbc8:	4629      	mov	r1, r5
 800dbca:	f7ff fe97 	bl	800d8fc <_malloc_r>
 800dbce:	4606      	mov	r6, r0
 800dbd0:	b950      	cbnz	r0, 800dbe8 <__ssputs_r+0x5c>
 800dbd2:	230c      	movs	r3, #12
 800dbd4:	f8ca 3000 	str.w	r3, [sl]
 800dbd8:	89a3      	ldrh	r3, [r4, #12]
 800dbda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbde:	81a3      	strh	r3, [r4, #12]
 800dbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe8:	6921      	ldr	r1, [r4, #16]
 800dbea:	464a      	mov	r2, r9
 800dbec:	f7ff fe06 	bl	800d7fc <memcpy>
 800dbf0:	89a3      	ldrh	r3, [r4, #12]
 800dbf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dbf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbfa:	81a3      	strh	r3, [r4, #12]
 800dbfc:	6126      	str	r6, [r4, #16]
 800dbfe:	6165      	str	r5, [r4, #20]
 800dc00:	444e      	add	r6, r9
 800dc02:	eba5 0509 	sub.w	r5, r5, r9
 800dc06:	6026      	str	r6, [r4, #0]
 800dc08:	60a5      	str	r5, [r4, #8]
 800dc0a:	463e      	mov	r6, r7
 800dc0c:	42be      	cmp	r6, r7
 800dc0e:	d900      	bls.n	800dc12 <__ssputs_r+0x86>
 800dc10:	463e      	mov	r6, r7
 800dc12:	4632      	mov	r2, r6
 800dc14:	6820      	ldr	r0, [r4, #0]
 800dc16:	4641      	mov	r1, r8
 800dc18:	f7ff fdfe 	bl	800d818 <memmove>
 800dc1c:	68a3      	ldr	r3, [r4, #8]
 800dc1e:	6822      	ldr	r2, [r4, #0]
 800dc20:	1b9b      	subs	r3, r3, r6
 800dc22:	4432      	add	r2, r6
 800dc24:	60a3      	str	r3, [r4, #8]
 800dc26:	6022      	str	r2, [r4, #0]
 800dc28:	2000      	movs	r0, #0
 800dc2a:	e7db      	b.n	800dbe4 <__ssputs_r+0x58>
 800dc2c:	462a      	mov	r2, r5
 800dc2e:	f000 fa9d 	bl	800e16c <_realloc_r>
 800dc32:	4606      	mov	r6, r0
 800dc34:	2800      	cmp	r0, #0
 800dc36:	d1e1      	bne.n	800dbfc <__ssputs_r+0x70>
 800dc38:	6921      	ldr	r1, [r4, #16]
 800dc3a:	4650      	mov	r0, sl
 800dc3c:	f7ff fe0e 	bl	800d85c <_free_r>
 800dc40:	e7c7      	b.n	800dbd2 <__ssputs_r+0x46>
	...

0800dc44 <_svfiprintf_r>:
 800dc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc48:	4698      	mov	r8, r3
 800dc4a:	898b      	ldrh	r3, [r1, #12]
 800dc4c:	061b      	lsls	r3, r3, #24
 800dc4e:	b09d      	sub	sp, #116	; 0x74
 800dc50:	4607      	mov	r7, r0
 800dc52:	460d      	mov	r5, r1
 800dc54:	4614      	mov	r4, r2
 800dc56:	d50e      	bpl.n	800dc76 <_svfiprintf_r+0x32>
 800dc58:	690b      	ldr	r3, [r1, #16]
 800dc5a:	b963      	cbnz	r3, 800dc76 <_svfiprintf_r+0x32>
 800dc5c:	2140      	movs	r1, #64	; 0x40
 800dc5e:	f7ff fe4d 	bl	800d8fc <_malloc_r>
 800dc62:	6028      	str	r0, [r5, #0]
 800dc64:	6128      	str	r0, [r5, #16]
 800dc66:	b920      	cbnz	r0, 800dc72 <_svfiprintf_r+0x2e>
 800dc68:	230c      	movs	r3, #12
 800dc6a:	603b      	str	r3, [r7, #0]
 800dc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc70:	e0d1      	b.n	800de16 <_svfiprintf_r+0x1d2>
 800dc72:	2340      	movs	r3, #64	; 0x40
 800dc74:	616b      	str	r3, [r5, #20]
 800dc76:	2300      	movs	r3, #0
 800dc78:	9309      	str	r3, [sp, #36]	; 0x24
 800dc7a:	2320      	movs	r3, #32
 800dc7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc80:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc84:	2330      	movs	r3, #48	; 0x30
 800dc86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800de30 <_svfiprintf_r+0x1ec>
 800dc8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc8e:	f04f 0901 	mov.w	r9, #1
 800dc92:	4623      	mov	r3, r4
 800dc94:	469a      	mov	sl, r3
 800dc96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc9a:	b10a      	cbz	r2, 800dca0 <_svfiprintf_r+0x5c>
 800dc9c:	2a25      	cmp	r2, #37	; 0x25
 800dc9e:	d1f9      	bne.n	800dc94 <_svfiprintf_r+0x50>
 800dca0:	ebba 0b04 	subs.w	fp, sl, r4
 800dca4:	d00b      	beq.n	800dcbe <_svfiprintf_r+0x7a>
 800dca6:	465b      	mov	r3, fp
 800dca8:	4622      	mov	r2, r4
 800dcaa:	4629      	mov	r1, r5
 800dcac:	4638      	mov	r0, r7
 800dcae:	f7ff ff6d 	bl	800db8c <__ssputs_r>
 800dcb2:	3001      	adds	r0, #1
 800dcb4:	f000 80aa 	beq.w	800de0c <_svfiprintf_r+0x1c8>
 800dcb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcba:	445a      	add	r2, fp
 800dcbc:	9209      	str	r2, [sp, #36]	; 0x24
 800dcbe:	f89a 3000 	ldrb.w	r3, [sl]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	f000 80a2 	beq.w	800de0c <_svfiprintf_r+0x1c8>
 800dcc8:	2300      	movs	r3, #0
 800dcca:	f04f 32ff 	mov.w	r2, #4294967295
 800dcce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcd2:	f10a 0a01 	add.w	sl, sl, #1
 800dcd6:	9304      	str	r3, [sp, #16]
 800dcd8:	9307      	str	r3, [sp, #28]
 800dcda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcde:	931a      	str	r3, [sp, #104]	; 0x68
 800dce0:	4654      	mov	r4, sl
 800dce2:	2205      	movs	r2, #5
 800dce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dce8:	4851      	ldr	r0, [pc, #324]	; (800de30 <_svfiprintf_r+0x1ec>)
 800dcea:	f7f2 fab1 	bl	8000250 <memchr>
 800dcee:	9a04      	ldr	r2, [sp, #16]
 800dcf0:	b9d8      	cbnz	r0, 800dd2a <_svfiprintf_r+0xe6>
 800dcf2:	06d0      	lsls	r0, r2, #27
 800dcf4:	bf44      	itt	mi
 800dcf6:	2320      	movmi	r3, #32
 800dcf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcfc:	0711      	lsls	r1, r2, #28
 800dcfe:	bf44      	itt	mi
 800dd00:	232b      	movmi	r3, #43	; 0x2b
 800dd02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd06:	f89a 3000 	ldrb.w	r3, [sl]
 800dd0a:	2b2a      	cmp	r3, #42	; 0x2a
 800dd0c:	d015      	beq.n	800dd3a <_svfiprintf_r+0xf6>
 800dd0e:	9a07      	ldr	r2, [sp, #28]
 800dd10:	4654      	mov	r4, sl
 800dd12:	2000      	movs	r0, #0
 800dd14:	f04f 0c0a 	mov.w	ip, #10
 800dd18:	4621      	mov	r1, r4
 800dd1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd1e:	3b30      	subs	r3, #48	; 0x30
 800dd20:	2b09      	cmp	r3, #9
 800dd22:	d94e      	bls.n	800ddc2 <_svfiprintf_r+0x17e>
 800dd24:	b1b0      	cbz	r0, 800dd54 <_svfiprintf_r+0x110>
 800dd26:	9207      	str	r2, [sp, #28]
 800dd28:	e014      	b.n	800dd54 <_svfiprintf_r+0x110>
 800dd2a:	eba0 0308 	sub.w	r3, r0, r8
 800dd2e:	fa09 f303 	lsl.w	r3, r9, r3
 800dd32:	4313      	orrs	r3, r2
 800dd34:	9304      	str	r3, [sp, #16]
 800dd36:	46a2      	mov	sl, r4
 800dd38:	e7d2      	b.n	800dce0 <_svfiprintf_r+0x9c>
 800dd3a:	9b03      	ldr	r3, [sp, #12]
 800dd3c:	1d19      	adds	r1, r3, #4
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	9103      	str	r1, [sp, #12]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	bfbb      	ittet	lt
 800dd46:	425b      	neglt	r3, r3
 800dd48:	f042 0202 	orrlt.w	r2, r2, #2
 800dd4c:	9307      	strge	r3, [sp, #28]
 800dd4e:	9307      	strlt	r3, [sp, #28]
 800dd50:	bfb8      	it	lt
 800dd52:	9204      	strlt	r2, [sp, #16]
 800dd54:	7823      	ldrb	r3, [r4, #0]
 800dd56:	2b2e      	cmp	r3, #46	; 0x2e
 800dd58:	d10c      	bne.n	800dd74 <_svfiprintf_r+0x130>
 800dd5a:	7863      	ldrb	r3, [r4, #1]
 800dd5c:	2b2a      	cmp	r3, #42	; 0x2a
 800dd5e:	d135      	bne.n	800ddcc <_svfiprintf_r+0x188>
 800dd60:	9b03      	ldr	r3, [sp, #12]
 800dd62:	1d1a      	adds	r2, r3, #4
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	9203      	str	r2, [sp, #12]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	bfb8      	it	lt
 800dd6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd70:	3402      	adds	r4, #2
 800dd72:	9305      	str	r3, [sp, #20]
 800dd74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800de40 <_svfiprintf_r+0x1fc>
 800dd78:	7821      	ldrb	r1, [r4, #0]
 800dd7a:	2203      	movs	r2, #3
 800dd7c:	4650      	mov	r0, sl
 800dd7e:	f7f2 fa67 	bl	8000250 <memchr>
 800dd82:	b140      	cbz	r0, 800dd96 <_svfiprintf_r+0x152>
 800dd84:	2340      	movs	r3, #64	; 0x40
 800dd86:	eba0 000a 	sub.w	r0, r0, sl
 800dd8a:	fa03 f000 	lsl.w	r0, r3, r0
 800dd8e:	9b04      	ldr	r3, [sp, #16]
 800dd90:	4303      	orrs	r3, r0
 800dd92:	3401      	adds	r4, #1
 800dd94:	9304      	str	r3, [sp, #16]
 800dd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd9a:	4826      	ldr	r0, [pc, #152]	; (800de34 <_svfiprintf_r+0x1f0>)
 800dd9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dda0:	2206      	movs	r2, #6
 800dda2:	f7f2 fa55 	bl	8000250 <memchr>
 800dda6:	2800      	cmp	r0, #0
 800dda8:	d038      	beq.n	800de1c <_svfiprintf_r+0x1d8>
 800ddaa:	4b23      	ldr	r3, [pc, #140]	; (800de38 <_svfiprintf_r+0x1f4>)
 800ddac:	bb1b      	cbnz	r3, 800ddf6 <_svfiprintf_r+0x1b2>
 800ddae:	9b03      	ldr	r3, [sp, #12]
 800ddb0:	3307      	adds	r3, #7
 800ddb2:	f023 0307 	bic.w	r3, r3, #7
 800ddb6:	3308      	adds	r3, #8
 800ddb8:	9303      	str	r3, [sp, #12]
 800ddba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddbc:	4433      	add	r3, r6
 800ddbe:	9309      	str	r3, [sp, #36]	; 0x24
 800ddc0:	e767      	b.n	800dc92 <_svfiprintf_r+0x4e>
 800ddc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddc6:	460c      	mov	r4, r1
 800ddc8:	2001      	movs	r0, #1
 800ddca:	e7a5      	b.n	800dd18 <_svfiprintf_r+0xd4>
 800ddcc:	2300      	movs	r3, #0
 800ddce:	3401      	adds	r4, #1
 800ddd0:	9305      	str	r3, [sp, #20]
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	f04f 0c0a 	mov.w	ip, #10
 800ddd8:	4620      	mov	r0, r4
 800ddda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddde:	3a30      	subs	r2, #48	; 0x30
 800dde0:	2a09      	cmp	r2, #9
 800dde2:	d903      	bls.n	800ddec <_svfiprintf_r+0x1a8>
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d0c5      	beq.n	800dd74 <_svfiprintf_r+0x130>
 800dde8:	9105      	str	r1, [sp, #20]
 800ddea:	e7c3      	b.n	800dd74 <_svfiprintf_r+0x130>
 800ddec:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e7f0      	b.n	800ddd8 <_svfiprintf_r+0x194>
 800ddf6:	ab03      	add	r3, sp, #12
 800ddf8:	9300      	str	r3, [sp, #0]
 800ddfa:	462a      	mov	r2, r5
 800ddfc:	4b0f      	ldr	r3, [pc, #60]	; (800de3c <_svfiprintf_r+0x1f8>)
 800ddfe:	a904      	add	r1, sp, #16
 800de00:	4638      	mov	r0, r7
 800de02:	f3af 8000 	nop.w
 800de06:	1c42      	adds	r2, r0, #1
 800de08:	4606      	mov	r6, r0
 800de0a:	d1d6      	bne.n	800ddba <_svfiprintf_r+0x176>
 800de0c:	89ab      	ldrh	r3, [r5, #12]
 800de0e:	065b      	lsls	r3, r3, #25
 800de10:	f53f af2c 	bmi.w	800dc6c <_svfiprintf_r+0x28>
 800de14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de16:	b01d      	add	sp, #116	; 0x74
 800de18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de1c:	ab03      	add	r3, sp, #12
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	462a      	mov	r2, r5
 800de22:	4b06      	ldr	r3, [pc, #24]	; (800de3c <_svfiprintf_r+0x1f8>)
 800de24:	a904      	add	r1, sp, #16
 800de26:	4638      	mov	r0, r7
 800de28:	f000 f87a 	bl	800df20 <_printf_i>
 800de2c:	e7eb      	b.n	800de06 <_svfiprintf_r+0x1c2>
 800de2e:	bf00      	nop
 800de30:	08011b34 	.word	0x08011b34
 800de34:	08011b3e 	.word	0x08011b3e
 800de38:	00000000 	.word	0x00000000
 800de3c:	0800db8d 	.word	0x0800db8d
 800de40:	08011b3a 	.word	0x08011b3a

0800de44 <_printf_common>:
 800de44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de48:	4616      	mov	r6, r2
 800de4a:	4699      	mov	r9, r3
 800de4c:	688a      	ldr	r2, [r1, #8]
 800de4e:	690b      	ldr	r3, [r1, #16]
 800de50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de54:	4293      	cmp	r3, r2
 800de56:	bfb8      	it	lt
 800de58:	4613      	movlt	r3, r2
 800de5a:	6033      	str	r3, [r6, #0]
 800de5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de60:	4607      	mov	r7, r0
 800de62:	460c      	mov	r4, r1
 800de64:	b10a      	cbz	r2, 800de6a <_printf_common+0x26>
 800de66:	3301      	adds	r3, #1
 800de68:	6033      	str	r3, [r6, #0]
 800de6a:	6823      	ldr	r3, [r4, #0]
 800de6c:	0699      	lsls	r1, r3, #26
 800de6e:	bf42      	ittt	mi
 800de70:	6833      	ldrmi	r3, [r6, #0]
 800de72:	3302      	addmi	r3, #2
 800de74:	6033      	strmi	r3, [r6, #0]
 800de76:	6825      	ldr	r5, [r4, #0]
 800de78:	f015 0506 	ands.w	r5, r5, #6
 800de7c:	d106      	bne.n	800de8c <_printf_common+0x48>
 800de7e:	f104 0a19 	add.w	sl, r4, #25
 800de82:	68e3      	ldr	r3, [r4, #12]
 800de84:	6832      	ldr	r2, [r6, #0]
 800de86:	1a9b      	subs	r3, r3, r2
 800de88:	42ab      	cmp	r3, r5
 800de8a:	dc26      	bgt.n	800deda <_printf_common+0x96>
 800de8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de90:	1e13      	subs	r3, r2, #0
 800de92:	6822      	ldr	r2, [r4, #0]
 800de94:	bf18      	it	ne
 800de96:	2301      	movne	r3, #1
 800de98:	0692      	lsls	r2, r2, #26
 800de9a:	d42b      	bmi.n	800def4 <_printf_common+0xb0>
 800de9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dea0:	4649      	mov	r1, r9
 800dea2:	4638      	mov	r0, r7
 800dea4:	47c0      	blx	r8
 800dea6:	3001      	adds	r0, #1
 800dea8:	d01e      	beq.n	800dee8 <_printf_common+0xa4>
 800deaa:	6823      	ldr	r3, [r4, #0]
 800deac:	68e5      	ldr	r5, [r4, #12]
 800deae:	6832      	ldr	r2, [r6, #0]
 800deb0:	f003 0306 	and.w	r3, r3, #6
 800deb4:	2b04      	cmp	r3, #4
 800deb6:	bf08      	it	eq
 800deb8:	1aad      	subeq	r5, r5, r2
 800deba:	68a3      	ldr	r3, [r4, #8]
 800debc:	6922      	ldr	r2, [r4, #16]
 800debe:	bf0c      	ite	eq
 800dec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dec4:	2500      	movne	r5, #0
 800dec6:	4293      	cmp	r3, r2
 800dec8:	bfc4      	itt	gt
 800deca:	1a9b      	subgt	r3, r3, r2
 800decc:	18ed      	addgt	r5, r5, r3
 800dece:	2600      	movs	r6, #0
 800ded0:	341a      	adds	r4, #26
 800ded2:	42b5      	cmp	r5, r6
 800ded4:	d11a      	bne.n	800df0c <_printf_common+0xc8>
 800ded6:	2000      	movs	r0, #0
 800ded8:	e008      	b.n	800deec <_printf_common+0xa8>
 800deda:	2301      	movs	r3, #1
 800dedc:	4652      	mov	r2, sl
 800dede:	4649      	mov	r1, r9
 800dee0:	4638      	mov	r0, r7
 800dee2:	47c0      	blx	r8
 800dee4:	3001      	adds	r0, #1
 800dee6:	d103      	bne.n	800def0 <_printf_common+0xac>
 800dee8:	f04f 30ff 	mov.w	r0, #4294967295
 800deec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800def0:	3501      	adds	r5, #1
 800def2:	e7c6      	b.n	800de82 <_printf_common+0x3e>
 800def4:	18e1      	adds	r1, r4, r3
 800def6:	1c5a      	adds	r2, r3, #1
 800def8:	2030      	movs	r0, #48	; 0x30
 800defa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800defe:	4422      	add	r2, r4
 800df00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df08:	3302      	adds	r3, #2
 800df0a:	e7c7      	b.n	800de9c <_printf_common+0x58>
 800df0c:	2301      	movs	r3, #1
 800df0e:	4622      	mov	r2, r4
 800df10:	4649      	mov	r1, r9
 800df12:	4638      	mov	r0, r7
 800df14:	47c0      	blx	r8
 800df16:	3001      	adds	r0, #1
 800df18:	d0e6      	beq.n	800dee8 <_printf_common+0xa4>
 800df1a:	3601      	adds	r6, #1
 800df1c:	e7d9      	b.n	800ded2 <_printf_common+0x8e>
	...

0800df20 <_printf_i>:
 800df20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df24:	460c      	mov	r4, r1
 800df26:	4691      	mov	r9, r2
 800df28:	7e27      	ldrb	r7, [r4, #24]
 800df2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df2c:	2f78      	cmp	r7, #120	; 0x78
 800df2e:	4680      	mov	r8, r0
 800df30:	469a      	mov	sl, r3
 800df32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df36:	d807      	bhi.n	800df48 <_printf_i+0x28>
 800df38:	2f62      	cmp	r7, #98	; 0x62
 800df3a:	d80a      	bhi.n	800df52 <_printf_i+0x32>
 800df3c:	2f00      	cmp	r7, #0
 800df3e:	f000 80d8 	beq.w	800e0f2 <_printf_i+0x1d2>
 800df42:	2f58      	cmp	r7, #88	; 0x58
 800df44:	f000 80a3 	beq.w	800e08e <_printf_i+0x16e>
 800df48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800df4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800df50:	e03a      	b.n	800dfc8 <_printf_i+0xa8>
 800df52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800df56:	2b15      	cmp	r3, #21
 800df58:	d8f6      	bhi.n	800df48 <_printf_i+0x28>
 800df5a:	a001      	add	r0, pc, #4	; (adr r0, 800df60 <_printf_i+0x40>)
 800df5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800df60:	0800dfb9 	.word	0x0800dfb9
 800df64:	0800dfcd 	.word	0x0800dfcd
 800df68:	0800df49 	.word	0x0800df49
 800df6c:	0800df49 	.word	0x0800df49
 800df70:	0800df49 	.word	0x0800df49
 800df74:	0800df49 	.word	0x0800df49
 800df78:	0800dfcd 	.word	0x0800dfcd
 800df7c:	0800df49 	.word	0x0800df49
 800df80:	0800df49 	.word	0x0800df49
 800df84:	0800df49 	.word	0x0800df49
 800df88:	0800df49 	.word	0x0800df49
 800df8c:	0800e0d9 	.word	0x0800e0d9
 800df90:	0800dffd 	.word	0x0800dffd
 800df94:	0800e0bb 	.word	0x0800e0bb
 800df98:	0800df49 	.word	0x0800df49
 800df9c:	0800df49 	.word	0x0800df49
 800dfa0:	0800e0fb 	.word	0x0800e0fb
 800dfa4:	0800df49 	.word	0x0800df49
 800dfa8:	0800dffd 	.word	0x0800dffd
 800dfac:	0800df49 	.word	0x0800df49
 800dfb0:	0800df49 	.word	0x0800df49
 800dfb4:	0800e0c3 	.word	0x0800e0c3
 800dfb8:	680b      	ldr	r3, [r1, #0]
 800dfba:	1d1a      	adds	r2, r3, #4
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	600a      	str	r2, [r1, #0]
 800dfc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dfc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfc8:	2301      	movs	r3, #1
 800dfca:	e0a3      	b.n	800e114 <_printf_i+0x1f4>
 800dfcc:	6825      	ldr	r5, [r4, #0]
 800dfce:	6808      	ldr	r0, [r1, #0]
 800dfd0:	062e      	lsls	r6, r5, #24
 800dfd2:	f100 0304 	add.w	r3, r0, #4
 800dfd6:	d50a      	bpl.n	800dfee <_printf_i+0xce>
 800dfd8:	6805      	ldr	r5, [r0, #0]
 800dfda:	600b      	str	r3, [r1, #0]
 800dfdc:	2d00      	cmp	r5, #0
 800dfde:	da03      	bge.n	800dfe8 <_printf_i+0xc8>
 800dfe0:	232d      	movs	r3, #45	; 0x2d
 800dfe2:	426d      	negs	r5, r5
 800dfe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfe8:	485e      	ldr	r0, [pc, #376]	; (800e164 <_printf_i+0x244>)
 800dfea:	230a      	movs	r3, #10
 800dfec:	e019      	b.n	800e022 <_printf_i+0x102>
 800dfee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800dff2:	6805      	ldr	r5, [r0, #0]
 800dff4:	600b      	str	r3, [r1, #0]
 800dff6:	bf18      	it	ne
 800dff8:	b22d      	sxthne	r5, r5
 800dffa:	e7ef      	b.n	800dfdc <_printf_i+0xbc>
 800dffc:	680b      	ldr	r3, [r1, #0]
 800dffe:	6825      	ldr	r5, [r4, #0]
 800e000:	1d18      	adds	r0, r3, #4
 800e002:	6008      	str	r0, [r1, #0]
 800e004:	0628      	lsls	r0, r5, #24
 800e006:	d501      	bpl.n	800e00c <_printf_i+0xec>
 800e008:	681d      	ldr	r5, [r3, #0]
 800e00a:	e002      	b.n	800e012 <_printf_i+0xf2>
 800e00c:	0669      	lsls	r1, r5, #25
 800e00e:	d5fb      	bpl.n	800e008 <_printf_i+0xe8>
 800e010:	881d      	ldrh	r5, [r3, #0]
 800e012:	4854      	ldr	r0, [pc, #336]	; (800e164 <_printf_i+0x244>)
 800e014:	2f6f      	cmp	r7, #111	; 0x6f
 800e016:	bf0c      	ite	eq
 800e018:	2308      	moveq	r3, #8
 800e01a:	230a      	movne	r3, #10
 800e01c:	2100      	movs	r1, #0
 800e01e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e022:	6866      	ldr	r6, [r4, #4]
 800e024:	60a6      	str	r6, [r4, #8]
 800e026:	2e00      	cmp	r6, #0
 800e028:	bfa2      	ittt	ge
 800e02a:	6821      	ldrge	r1, [r4, #0]
 800e02c:	f021 0104 	bicge.w	r1, r1, #4
 800e030:	6021      	strge	r1, [r4, #0]
 800e032:	b90d      	cbnz	r5, 800e038 <_printf_i+0x118>
 800e034:	2e00      	cmp	r6, #0
 800e036:	d04d      	beq.n	800e0d4 <_printf_i+0x1b4>
 800e038:	4616      	mov	r6, r2
 800e03a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e03e:	fb03 5711 	mls	r7, r3, r1, r5
 800e042:	5dc7      	ldrb	r7, [r0, r7]
 800e044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e048:	462f      	mov	r7, r5
 800e04a:	42bb      	cmp	r3, r7
 800e04c:	460d      	mov	r5, r1
 800e04e:	d9f4      	bls.n	800e03a <_printf_i+0x11a>
 800e050:	2b08      	cmp	r3, #8
 800e052:	d10b      	bne.n	800e06c <_printf_i+0x14c>
 800e054:	6823      	ldr	r3, [r4, #0]
 800e056:	07df      	lsls	r7, r3, #31
 800e058:	d508      	bpl.n	800e06c <_printf_i+0x14c>
 800e05a:	6923      	ldr	r3, [r4, #16]
 800e05c:	6861      	ldr	r1, [r4, #4]
 800e05e:	4299      	cmp	r1, r3
 800e060:	bfde      	ittt	le
 800e062:	2330      	movle	r3, #48	; 0x30
 800e064:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e068:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e06c:	1b92      	subs	r2, r2, r6
 800e06e:	6122      	str	r2, [r4, #16]
 800e070:	f8cd a000 	str.w	sl, [sp]
 800e074:	464b      	mov	r3, r9
 800e076:	aa03      	add	r2, sp, #12
 800e078:	4621      	mov	r1, r4
 800e07a:	4640      	mov	r0, r8
 800e07c:	f7ff fee2 	bl	800de44 <_printf_common>
 800e080:	3001      	adds	r0, #1
 800e082:	d14c      	bne.n	800e11e <_printf_i+0x1fe>
 800e084:	f04f 30ff 	mov.w	r0, #4294967295
 800e088:	b004      	add	sp, #16
 800e08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e08e:	4835      	ldr	r0, [pc, #212]	; (800e164 <_printf_i+0x244>)
 800e090:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e094:	6823      	ldr	r3, [r4, #0]
 800e096:	680e      	ldr	r6, [r1, #0]
 800e098:	061f      	lsls	r7, r3, #24
 800e09a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e09e:	600e      	str	r6, [r1, #0]
 800e0a0:	d514      	bpl.n	800e0cc <_printf_i+0x1ac>
 800e0a2:	07d9      	lsls	r1, r3, #31
 800e0a4:	bf44      	itt	mi
 800e0a6:	f043 0320 	orrmi.w	r3, r3, #32
 800e0aa:	6023      	strmi	r3, [r4, #0]
 800e0ac:	b91d      	cbnz	r5, 800e0b6 <_printf_i+0x196>
 800e0ae:	6823      	ldr	r3, [r4, #0]
 800e0b0:	f023 0320 	bic.w	r3, r3, #32
 800e0b4:	6023      	str	r3, [r4, #0]
 800e0b6:	2310      	movs	r3, #16
 800e0b8:	e7b0      	b.n	800e01c <_printf_i+0xfc>
 800e0ba:	6823      	ldr	r3, [r4, #0]
 800e0bc:	f043 0320 	orr.w	r3, r3, #32
 800e0c0:	6023      	str	r3, [r4, #0]
 800e0c2:	2378      	movs	r3, #120	; 0x78
 800e0c4:	4828      	ldr	r0, [pc, #160]	; (800e168 <_printf_i+0x248>)
 800e0c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e0ca:	e7e3      	b.n	800e094 <_printf_i+0x174>
 800e0cc:	065e      	lsls	r6, r3, #25
 800e0ce:	bf48      	it	mi
 800e0d0:	b2ad      	uxthmi	r5, r5
 800e0d2:	e7e6      	b.n	800e0a2 <_printf_i+0x182>
 800e0d4:	4616      	mov	r6, r2
 800e0d6:	e7bb      	b.n	800e050 <_printf_i+0x130>
 800e0d8:	680b      	ldr	r3, [r1, #0]
 800e0da:	6826      	ldr	r6, [r4, #0]
 800e0dc:	6960      	ldr	r0, [r4, #20]
 800e0de:	1d1d      	adds	r5, r3, #4
 800e0e0:	600d      	str	r5, [r1, #0]
 800e0e2:	0635      	lsls	r5, r6, #24
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	d501      	bpl.n	800e0ec <_printf_i+0x1cc>
 800e0e8:	6018      	str	r0, [r3, #0]
 800e0ea:	e002      	b.n	800e0f2 <_printf_i+0x1d2>
 800e0ec:	0671      	lsls	r1, r6, #25
 800e0ee:	d5fb      	bpl.n	800e0e8 <_printf_i+0x1c8>
 800e0f0:	8018      	strh	r0, [r3, #0]
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	6123      	str	r3, [r4, #16]
 800e0f6:	4616      	mov	r6, r2
 800e0f8:	e7ba      	b.n	800e070 <_printf_i+0x150>
 800e0fa:	680b      	ldr	r3, [r1, #0]
 800e0fc:	1d1a      	adds	r2, r3, #4
 800e0fe:	600a      	str	r2, [r1, #0]
 800e100:	681e      	ldr	r6, [r3, #0]
 800e102:	6862      	ldr	r2, [r4, #4]
 800e104:	2100      	movs	r1, #0
 800e106:	4630      	mov	r0, r6
 800e108:	f7f2 f8a2 	bl	8000250 <memchr>
 800e10c:	b108      	cbz	r0, 800e112 <_printf_i+0x1f2>
 800e10e:	1b80      	subs	r0, r0, r6
 800e110:	6060      	str	r0, [r4, #4]
 800e112:	6863      	ldr	r3, [r4, #4]
 800e114:	6123      	str	r3, [r4, #16]
 800e116:	2300      	movs	r3, #0
 800e118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e11c:	e7a8      	b.n	800e070 <_printf_i+0x150>
 800e11e:	6923      	ldr	r3, [r4, #16]
 800e120:	4632      	mov	r2, r6
 800e122:	4649      	mov	r1, r9
 800e124:	4640      	mov	r0, r8
 800e126:	47d0      	blx	sl
 800e128:	3001      	adds	r0, #1
 800e12a:	d0ab      	beq.n	800e084 <_printf_i+0x164>
 800e12c:	6823      	ldr	r3, [r4, #0]
 800e12e:	079b      	lsls	r3, r3, #30
 800e130:	d413      	bmi.n	800e15a <_printf_i+0x23a>
 800e132:	68e0      	ldr	r0, [r4, #12]
 800e134:	9b03      	ldr	r3, [sp, #12]
 800e136:	4298      	cmp	r0, r3
 800e138:	bfb8      	it	lt
 800e13a:	4618      	movlt	r0, r3
 800e13c:	e7a4      	b.n	800e088 <_printf_i+0x168>
 800e13e:	2301      	movs	r3, #1
 800e140:	4632      	mov	r2, r6
 800e142:	4649      	mov	r1, r9
 800e144:	4640      	mov	r0, r8
 800e146:	47d0      	blx	sl
 800e148:	3001      	adds	r0, #1
 800e14a:	d09b      	beq.n	800e084 <_printf_i+0x164>
 800e14c:	3501      	adds	r5, #1
 800e14e:	68e3      	ldr	r3, [r4, #12]
 800e150:	9903      	ldr	r1, [sp, #12]
 800e152:	1a5b      	subs	r3, r3, r1
 800e154:	42ab      	cmp	r3, r5
 800e156:	dcf2      	bgt.n	800e13e <_printf_i+0x21e>
 800e158:	e7eb      	b.n	800e132 <_printf_i+0x212>
 800e15a:	2500      	movs	r5, #0
 800e15c:	f104 0619 	add.w	r6, r4, #25
 800e160:	e7f5      	b.n	800e14e <_printf_i+0x22e>
 800e162:	bf00      	nop
 800e164:	08011b45 	.word	0x08011b45
 800e168:	08011b56 	.word	0x08011b56

0800e16c <_realloc_r>:
 800e16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16e:	4607      	mov	r7, r0
 800e170:	4614      	mov	r4, r2
 800e172:	460e      	mov	r6, r1
 800e174:	b921      	cbnz	r1, 800e180 <_realloc_r+0x14>
 800e176:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e17a:	4611      	mov	r1, r2
 800e17c:	f7ff bbbe 	b.w	800d8fc <_malloc_r>
 800e180:	b922      	cbnz	r2, 800e18c <_realloc_r+0x20>
 800e182:	f7ff fb6b 	bl	800d85c <_free_r>
 800e186:	4625      	mov	r5, r4
 800e188:	4628      	mov	r0, r5
 800e18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e18c:	f000 f814 	bl	800e1b8 <_malloc_usable_size_r>
 800e190:	42a0      	cmp	r0, r4
 800e192:	d20f      	bcs.n	800e1b4 <_realloc_r+0x48>
 800e194:	4621      	mov	r1, r4
 800e196:	4638      	mov	r0, r7
 800e198:	f7ff fbb0 	bl	800d8fc <_malloc_r>
 800e19c:	4605      	mov	r5, r0
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d0f2      	beq.n	800e188 <_realloc_r+0x1c>
 800e1a2:	4631      	mov	r1, r6
 800e1a4:	4622      	mov	r2, r4
 800e1a6:	f7ff fb29 	bl	800d7fc <memcpy>
 800e1aa:	4631      	mov	r1, r6
 800e1ac:	4638      	mov	r0, r7
 800e1ae:	f7ff fb55 	bl	800d85c <_free_r>
 800e1b2:	e7e9      	b.n	800e188 <_realloc_r+0x1c>
 800e1b4:	4635      	mov	r5, r6
 800e1b6:	e7e7      	b.n	800e188 <_realloc_r+0x1c>

0800e1b8 <_malloc_usable_size_r>:
 800e1b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1bc:	1f18      	subs	r0, r3, #4
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	bfbc      	itt	lt
 800e1c2:	580b      	ldrlt	r3, [r1, r0]
 800e1c4:	18c0      	addlt	r0, r0, r3
 800e1c6:	4770      	bx	lr

0800e1c8 <_init>:
 800e1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ca:	bf00      	nop
 800e1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ce:	bc08      	pop	{r3}
 800e1d0:	469e      	mov	lr, r3
 800e1d2:	4770      	bx	lr

0800e1d4 <_fini>:
 800e1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d6:	bf00      	nop
 800e1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1da:	bc08      	pop	{r3}
 800e1dc:	469e      	mov	lr, r3
 800e1de:	4770      	bx	lr
