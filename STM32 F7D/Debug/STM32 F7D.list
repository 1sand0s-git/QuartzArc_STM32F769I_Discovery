
STM32 F7D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009898  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037a0  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d238  0800d238  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800d238  0800d238  0001d238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d240  0800d240  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d240  0800d240  0001d240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d244  0800d244  0001d244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800d248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000078  0800d2c0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800d2c0  00020404  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_line   00023825  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0003fccd  00000000  00000000  000438cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000082e6  00000000  00000000  00083598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b08  00000000  00000000  0008b880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00148d9d  00000000  00000000  0008d388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001910  00000000  00000000  001d6128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003acd8  00000000  00000000  001d7a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00212710  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079e4  00000000  00000000  00212764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08009a80 	.word	0x08009a80

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08009a80 	.word	0x08009a80

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000620 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000604:	4c0b      	ldr	r4, [pc, #44]	; (8000634 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000612:	f001 fc7b 	bl	8001f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000616:	f008 fd19 	bl	800904c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800061a:	f000 fe19 	bl	8001250 <main>
  bx  lr    
 800061e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000620:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800062c:	0800d248 	.word	0x0800d248
  ldr r2, =_sbss
 8000630:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000634:	20000404 	.word	0x20000404

08000638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC_IRQHandler>
	...

0800063c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000640:	f3bf 8f4f 	dsb	sy
}
 8000644:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000646:	f3bf 8f6f 	isb	sy
}
 800064a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <SCB_EnableICache+0x48>)
 800064e:	2200      	movs	r2, #0
 8000650:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000654:	f3bf 8f4f 	dsb	sy
}
 8000658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800065a:	f3bf 8f6f 	isb	sy
}
 800065e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SCB_EnableICache+0x48>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SCB_EnableICache+0x48>)
 8000666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000690:	2200      	movs	r2, #0
 8000692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000696:	f3bf 8f4f 	dsb	sy
}
 800069a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <SCB_EnableDCache+0x9c>)
 800069e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	0b5b      	lsrs	r3, r3, #13
 80006a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	015a      	lsls	r2, r3, #5
 80006bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80006c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006c6:	4917      	ldr	r1, [pc, #92]	; (8000724 <SCB_EnableDCache+0x9c>)
 80006c8:	4313      	orrs	r3, r2
 80006ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	1e5a      	subs	r2, r3, #1
 80006d2:	60ba      	str	r2, [r7, #8]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d000      	beq.n	80006e4 <SCB_EnableDCache+0x5c>
      do {
 80006e2:	e7e9      	b.n	80006b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	60fa      	str	r2, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d000      	beq.n	80006fa <SCB_EnableDCache+0x72>
    do {
 80006f8:	e7d9      	b.n	80006ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80006fa:	f3bf 8f4f 	dsb	sy
}
 80006fe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800070a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800070c:	f3bf 8f4f 	dsb	sy
}
 8000710:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000712:	f3bf 8f6f 	isb	sy
}
 8000716:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks
//Also enables all GPIO ports, and both DMA1 and DMA2 peripherals
//
//Returns QA_OK if successful, or QA_Fail if initialization failed
QA_Result SystemInitialize(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b0c6      	sub	sp, #280	; 0x118
 800072c:	af00      	add	r7, sp, #0

  //------------------------------------
  //Enable CPU Instruction & Data Caches
  SCB_EnableICache();
 800072e:	f7ff ff85 	bl	800063c <SCB_EnableICache>
  SCB_EnableDCache();
 8000732:	f7ff ffa9 	bl	8000688 <SCB_EnableDCache>

	//----------------------
	//Enable ART Accelerator
  __HAL_FLASH_ART_ENABLE();
 8000736:	4b67      	ldr	r3, [pc, #412]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a66      	ldr	r2, [pc, #408]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 800073c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000740:	6013      	str	r3, [r2, #0]

  //---------------------
  //Enable Flash Prefetch
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000742:	4b64      	ldr	r3, [pc, #400]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a63      	ldr	r2, [pc, #396]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074c:	6013      	str	r3, [r2, #0]

  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074e:	2003      	movs	r0, #3
 8000750:	f001 ffae 	bl	80026b0 <HAL_NVIC_SetPriorityGrouping>

  //------------
  //Init SysTick
  HAL_InitTick(TICK_INT_PRIORITY);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fe43 	bl	80023e0 <HAL_InitTick>

  //------------------------------
  //Configure LSE Drive Capability
  HAL_PWR_EnableBkUpAccess();
 800075a:	f003 fb41 	bl	8003de0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800075e:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000762:	4a5d      	ldr	r2, [pc, #372]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000764:	f023 0318 	bic.w	r3, r3, #24
 8000768:	6713      	str	r3, [r2, #112]	; 0x70

  //------------------------------------------------
  //Configure Main Internal Regulator Output Voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b5b      	ldr	r3, [pc, #364]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a5a      	ldr	r2, [pc, #360]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b58      	ldr	r3, [pc, #352]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000782:	4b56      	ldr	r3, [pc, #344]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a55      	ldr	r2, [pc, #340]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	4b53      	ldr	r3, [pc, #332]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
 8000798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  //
  //Configure High Speed External (HSE) oscillator to be used for primary system clocks, and setup primary PLL to provide a 216MHz clock
  //Configure Low Speed External (LSE) oscillator to be used for clock source for Real Timer Clock (RTC) peripheral
  //NOTE: HSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 25MHz oscillator (labeled X2 on the PCB)
  //      LSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 32.768kHz oscillator (labeled X3 on the PCB)
  RCC_OscInitTypeDef RCC_OscInit = {0};
 800079a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800079e:	2234      	movs	r2, #52	; 0x34
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f008 fcae 	bl	8009104 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | //Define HSE (High Speed External) oscillator to be configured (used for main system clock)
 80007a8:	2305      	movs	r3, #5
 80007aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  		                         RCC_OSCILLATORTYPE_LSE;  //Define LSE (Low Speed External) oscillator to be configured (used for RTC - Real Time Clock)
  RCC_OscInit.HSEState       = RCC_HSE_ON;              //Enable HSE
 80007ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInit.LSEState       = RCC_LSE_ON;              //Enable LSE
 80007b6:	2301      	movs	r3, #1
 80007b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;              //Enable primary PLL
 80007bc:	2302      	movs	r3, #2
 80007be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;       //Set primary PLL source to HSE
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    //Set primary PLL values required for 216Mhz system clock
  RCC_OscInit.PLL.PLLM       = 25;
 80007ca:	2319      	movs	r3, #25
 80007cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInit.PLL.PLLN       = 432;
 80007d0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80007d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInit.PLL.PLLQ       = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {  //Initialize Oscillators using values in init structure
 80007e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fb59 	bl	8003ea0 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <_Z16SystemInitializev+0xda>
  	return QA_Fail;
 80007fe:	2301      	movs	r3, #1
 8000800:	e123      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a34      	ldr	r2, [pc, #208]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
 8000818:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  //---------------------
  //Enable Overdrive Mode
  //
  //This is required to provide best system stability given that we are running at the maximum clock rate of 216MHz for the STM32F769I device
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800081a:	f003 faf1 	bl	8003e00 <HAL_PWREx_EnableOverDrive>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	bf14      	ite	ne
 8000824:	2301      	movne	r3, #1
 8000826:	2300      	moveq	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <_Z16SystemInitializev+0x10a>
  	return QA_Fail;
 800082e:	2301      	movs	r3, #1
 8000830:	e10b      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //---------------------------
  //Initialize CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000832:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |      //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 8000842:	230f      	movs	r3, #15
 8000844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  		                         RCC_CLOCKTYPE_SYSCLK |
                               RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;  //Define primary PLL clock as system clock source
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;          //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 216MHz
 800084e:	2300      	movs	r3, #0
 8000850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV4;            //Set clock divider for peripheral bus 1 (APB1), DIV4 provides an APB1 frequency of 54MHz
 8000854:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                                                         //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 108MHz

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;            //Set clock divider for peripheral bus 2 (APB2), DIV2 provides an APB2 frequency of 108MHz
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                                                         //NOTE: APB2 timer clocks are clock doubled, providing APB2 timers with 216MHz clocks

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_7) != HAL_OK) { //Initialize system clocks using required values, and setting Flash latency to 7 cycles
 8000864:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000868:	2107      	movs	r1, #7
 800086a:	4618      	mov	r0, r3
 800086c:	f003 fdc6 	bl	80043fc <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf14      	ite	ne
 8000876:	2301      	movne	r3, #1
 8000878:	2300      	moveq	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <_Z16SystemInitializev+0x15c>
  	return QA_Fail;
 8000880:	2301      	movs	r3, #1
 8000882:	e0e2      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //----------------------------
  //Initialize Peripheral Clocks
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 8000884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000888:	2290      	movs	r2, #144	; 0x90
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f008 fc39 	bl	8009104 <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC |
 8000892:	2328      	movs	r3, #40	; 0x28
 8000894:	643b      	str	r3, [r7, #64]	; 0x40
  		                                     RCC_PERIPHCLK_LTDC;

    //Define settings for PLLSAI, as this PLL is also used as the clock source for the LTDC peripheral which we require to run the LCD screen
	RCC_PeriphClkInit.PLLSAI.PLLSAIN       = 384;
 8000896:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800089a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_PeriphClkInit.PLLSAI.PLLSAIP       = RCC_PLLSAIP_DIV8;
 800089c:	2303      	movs	r3, #3
 800089e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_PeriphClkInit.PLLSAI.PLLSAIR       = 7;
 80008a0:	2307      	movs	r3, #7
 80008a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_PeriphClkInit.PLLSAI.PLLSAIQ       = 8;
 80008a4:	2308      	movs	r3, #8
 80008a6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_PeriphClkInit.PLLSAIDivQ           = 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_PeriphClkInit.PLLSAIDivR           = RCC_PLLSAIDIVR_2;
 80008ac:	2300      	movs	r3, #0
 80008ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  RCC_PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE; //Set the LSE oscillator as the clock source for the Real Time Clock
 80008b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b4:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK) { //Initialize the peripheral clocks used the required values
 80008b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ba:	4618      	mov	r0, r3
 80008bc:	f003 ff74 	bl	80047a8 <HAL_RCCEx_PeriphCLKConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bf14      	ite	ne
 80008c6:	2301      	movne	r3, #1
 80008c8:	2300      	moveq	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d007      	beq.n	80008e0 <_Z16SystemInitializev+0x1b8>
  	return QA_Fail;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e0ba      	b.n	8000a4a <_Z16SystemInitializev+0x322>
 80008d4:	40023c00 	.word	0x40023c00
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000
  }

  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b5c      	ldr	r3, [pc, #368]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a5b      	ldr	r2, [pc, #364]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
 80008ec:	4b59      	ldr	r3, [pc, #356]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
 80008f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b56      	ldr	r3, [pc, #344]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a55      	ldr	r2, [pc, #340]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b53      	ldr	r3, [pc, #332]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000910:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a4f      	ldr	r2, [pc, #316]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000928:	4b4a      	ldr	r3, [pc, #296]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a49      	ldr	r2, [pc, #292]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000940:	4b44      	ldr	r3, [pc, #272]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a43      	ldr	r2, [pc, #268]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000958:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a3d      	ldr	r2, [pc, #244]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
 800096e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
 800099c:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a27      	ldr	r2, [pc, #156]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	681b      	ldr	r3, [r3, #0]

  //-----------------
  //Enable DMA Clocks
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000a40:	463b      	mov	r3, r7
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	463b      	mov	r3, r7
 8000a46:	681b      	ldr	r3, [r3, #0]

  //Return
  return QA_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800

08000a58 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HardFault_Handler+0x1c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 fc4c 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HardFault_Handler+0x20>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f005 fc47 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000a80:	e7fe      	b.n	8000a80 <HardFault_Handler+0x18>
 8000a82:	bf00      	nop
 8000a84:	2000018c 	.word	0x2000018c
 8000a88:	20000190 	.word	0x20000190

08000a8c <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MemManage_Handler+0x1c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f005 fc3a 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <MemManage_Handler+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 fc35 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x18>
 8000aa6:	bf00      	nop
 8000aa8:	2000018c 	.word	0x2000018c
 8000aac:	20000190 	.word	0x20000190

08000ab0 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <BusFault_Handler+0x1c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 fc28 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <BusFault_Handler+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f005 fc23 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000ac8:	e7fe      	b.n	8000ac8 <BusFault_Handler+0x18>
 8000aca:	bf00      	nop
 8000acc:	2000018c 	.word	0x2000018c
 8000ad0:	20000190 	.word	0x20000190

08000ad4 <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <UsageFault_Handler+0x1c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f005 fc16 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <UsageFault_Handler+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f005 fc11 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x18>
 8000aee:	bf00      	nop
 8000af0:	2000018c 	.word	0x2000018c
 8000af4:	20000190 	.word	0x20000190

08000af8 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000b26:	f001 fc8b 	bl	8002440 <HAL_IncTick>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <USART1_IRQHandler>:
  //Interrupt Handler Functions


//USART1_IRQHandler
//Interrupt Handler Function
void USART1_IRQHandler(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL);
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <USART1_IRQHandler+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f007 ff45 	bl	80089ca <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000198 	.word	0x20000198

08000b48 <_ZN7QAD_FMCC1Ev>:

	//------------
	//Constructors

	//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_FMC() :
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	  m_eState(QA_NotInitialized) {}
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2202      	movs	r2, #2
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2204      	movs	r2, #4
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2208      	movs	r2, #8
 8000b72:	615a      	str	r2, [r3, #20]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2220      	movs	r2, #32
 8000b78:	619a      	str	r2, [r3, #24]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2230      	movs	r2, #48	; 0x30
 8000b7e:	61da      	str	r2, [r3, #28]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f240 6203 	movw	r2, #1539	; 0x603
 8000ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <_ZN7QAD_FMC3getEv>:

	//-----------------
	//Singleton Methods
  //
	//Used to retrieve a reference to the singleton class
  static QAD_FMC& get(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  	static QAD_FMC instance;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	f3bf 8f5b 	dmb	ish
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d010      	beq.n	8000bfe <_ZN7QAD_FMC3getEv+0x42>
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bde:	f008 f9dc 	bl	8008f9a <__cxa_guard_acquire>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bf14      	ite	ne
 8000be8:	2301      	movne	r3, #1
 8000bea:	2300      	moveq	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d005      	beq.n	8000bfe <_ZN7QAD_FMC3getEv+0x42>
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <_ZN7QAD_FMC3getEv+0x4c>)
 8000bf4:	f7ff ffa8 	bl	8000b48 <_ZN7QAD_FMCC1Ev>
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bfa:	f008 f9da 	bl	8008fb2 <__cxa_guard_release>
  	return instance;
 8000bfe:	4b02      	ldr	r3, [pc, #8]	; (8000c08 <_ZN7QAD_FMC3getEv+0x4c>)
  }
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000100 	.word	0x20000100
 8000c08:	20000094 	.word	0x20000094

08000c0c <_ZN7QAD_FMC4initEv>:

  //NOTE: No deinitialization method is supplied due to SDRAM being seen as a primary system component
  //in this codebase and is required for operation of systems such as LCD among others

  //Used to initialize the FMC peripheral and SDRAM module
  static QA_Result init(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000c10:	f7ff ffd4 	bl	8000bbc <_ZN7QAD_FMC3getEv>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f005 f9f6 	bl	8006008 <_ZN7QAD_FMC8imp_initEv>
 8000c1c:	4603      	mov	r3, r0
  }
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_ZN7QAD_FMC4testEv>:
  //Memory Testing Methods

  //Used to perform a memory test of the SDRAM module
  //Performs a full read and write test of all 16 megabytes of the SDRAM
  //Returns QA_OK if memory test is successful, or QA_Fail if not successful
  static QA_Result test(void) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  	return get().imp_test();
 8000c26:	f7ff ffc9 	bl	8000bbc <_ZN7QAD_FMC3getEv>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f005 fb07 	bl	8006240 <_ZN7QAD_FMC8imp_testEv>
 8000c32:	4603      	mov	r3, r0
  }
 8000c34:	4618      	mov	r0, r3
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_ZN7QAD_RNGC1Ev>:
	//-----------
	//Constructor

	//As this is a private method within a singleton class, this method will be called the
	//first time the static get() method is called.
	QAD_RNG() :
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_sHandle({0}) {}
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <_ZN7QAD_RNG3getEv>:

  //-----------------
  //Singleton Methods
  //
  //Used to retrieve a reference to the singleton class
  static QAD_RNG& get(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  	static QAD_RNG instance;
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	f3bf 8f5b 	dmb	ish
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf0c      	ite	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	2300      	movne	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d010      	beq.n	8000ca6 <_ZN7QAD_RNG3getEv+0x42>
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000c86:	f008 f988 	bl	8008f9a <__cxa_guard_acquire>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bf14      	ite	ne
 8000c90:	2301      	movne	r3, #1
 8000c92:	2300      	moveq	r3, #0
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <_ZN7QAD_RNG3getEv+0x42>
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <_ZN7QAD_RNG3getEv+0x4c>)
 8000c9c:	f7ff ffcc 	bl	8000c38 <_ZN7QAD_RNGC1Ev>
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000ca2:	f008 f986 	bl	8008fb2 <__cxa_guard_release>
  	return instance;
 8000ca6:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <_ZN7QAD_RNG3getEv+0x4c>)
  }
 8000ca8:	4618      	mov	r0, r3
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000118 	.word	0x20000118
 8000cb0:	20000104 	.word	0x20000104

08000cb4 <_ZN7QAD_RNG4initEv>:
  //----------------------
  //Initialization Methods

  //Used to initialize the RNG peripheral
  //Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
  static QA_Result init(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000cb8:	f7ff ffd4 	bl	8000c64 <_ZN7QAD_RNG3getEv>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 f820 	bl	8006d04 <_ZN7QAD_RNG8imp_initEv>
 8000cc4:	4603      	mov	r3, r0
  }
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_ZN7QAD_RTCC1Ev>:
	//------------
	//Constructors

	//As this is a private method within a singleton class, this method will be called the
	//first time the static get() method is called
	QAD_RTC() :
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
		m_eInitState(QA_NotInitialized),
		m_sHandle({0}) {}
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3304      	adds	r3, #4
 8000cdc:	2220      	movs	r2, #32
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f008 fa0f 	bl	8009104 <memset>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_ZN7QAD_RTC3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_RTC& get(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
		static QAD_RTC instance;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_ZN7QAD_RTC3getEv+0x48>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	f3bf 8f5b 	dmb	ish
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bf0c      	ite	eq
 8000d06:	2301      	moveq	r3, #1
 8000d08:	2300      	movne	r3, #0
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d010      	beq.n	8000d32 <_ZN7QAD_RTC3getEv+0x42>
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <_ZN7QAD_RTC3getEv+0x48>)
 8000d12:	f008 f942 	bl	8008f9a <__cxa_guard_acquire>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	2301      	movne	r3, #1
 8000d1e:	2300      	moveq	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <_ZN7QAD_RTC3getEv+0x42>
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <_ZN7QAD_RTC3getEv+0x4c>)
 8000d28:	f7ff ffcf 	bl	8000cca <_ZN7QAD_RTCC1Ev>
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <_ZN7QAD_RTC3getEv+0x48>)
 8000d2e:	f008 f940 	bl	8008fb2 <__cxa_guard_release>
		return instance;
 8000d32:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <_ZN7QAD_RTC3getEv+0x4c>)
	}
 8000d34:	4618      	mov	r0, r3
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000015c 	.word	0x2000015c
 8000d3c:	2000011c 	.word	0x2000011c

08000d40 <_ZN7QAD_RTC4initEv>:
	//----------------------
	//Initialization Methods

	//Used to initialize the RTC peripheral
	//Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
	static QA_Result init(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
		return get().imp_init();
 8000d44:	f7ff ffd4 	bl	8000cf0 <_ZN7QAD_RTC3getEv>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f006 f820 	bl	8006d90 <_ZN7QAD_RTC8imp_initEv>
 8000d50:	4603      	mov	r3, r0
	}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_ZN7QAD_RTC6updateEv>:


	//Captures the current time and date and stores in m_sTime and m_sDate, so that values can
	//be retrieved by the below data methods
	//Returns QA_OK if successful, or QA_Fail if unable to get the current time/date
	static QA_Result update(void) {
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
		return get().imp_update();
 8000d5a:	f7ff ffc9 	bl	8000cf0 <_ZN7QAD_RTC3getEv>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f006 f86d 	bl	8006e40 <_ZN7QAD_RTC10imp_updateEv>
 8000d66:	4603      	mov	r3, r0
	}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZN7QAD_RTC7getHourEv>:
	//NOTE: The update() method should be called prior to using the below get*() methods
	//in order to capture the most recent date/time values

	//Used to retrieve the hour value from m_sTime
	//Returns a value between 0-23
	static uint8_t getHour(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
		return get().imp_getHour();
 8000d70:	f7ff ffbe 	bl	8000cf0 <_ZN7QAD_RTC3getEv>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f006 f88f 	bl	8006e9a <_ZN7QAD_RTC11imp_getHourEv>
 8000d7c:	4603      	mov	r3, r0
	}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_ZN7QAD_RTC9getMinuteEv>:


	//Used to retrieve the minute value from m_sTime
	//Returns a value between 0-59
	static uint8_t getMinute(void) {
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
		return get().imp_getMinute();
 8000d86:	f7ff ffb3 	bl	8000cf0 <_ZN7QAD_RTC3getEv>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f006 f891 	bl	8006eb4 <_ZN7QAD_RTC13imp_getMinuteEv>
 8000d92:	4603      	mov	r3, r0
	}
 8000d94:	4618      	mov	r0, r3
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_ZN7QAD_RTC9getSecondEv>:


	//Used to retrieve the second value from m_sTime
	//Returns a value between 0-59
	static uint8_t getSecond(void) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
		return get().imp_getSecond();
 8000d9c:	f7ff ffa8 	bl	8000cf0 <_ZN7QAD_RTC3getEv>
 8000da0:	4603      	mov	r3, r0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 f893 	bl	8006ece <_ZN7QAD_RTC13imp_getSecondEv>
 8000da8:	4603      	mov	r3, r0
	}
 8000daa:	4618      	mov	r0, r3
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	460b      	mov	r3, r1
 8000db8:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 8000dba:	887a      	ldrh	r2, [r7, #2]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fcc5 	bl	8001750 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	887a      	ldrh	r2, [r7, #2]
 8000dca:	809a      	strh	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	80da      	strh	r2, [r3, #6]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	811a      	strh	r2, [r3, #8]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	4608      	mov	r0, r1
 8000dee:	4611      	mov	r1, r2
 8000df0:	461a      	mov	r2, r3
 8000df2:	4603      	mov	r3, r0
 8000df4:	817b      	strh	r3, [r7, #10]
 8000df6:	460b      	mov	r3, r1
 8000df8:	813b      	strh	r3, [r7, #8]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	3304      	adds	r3, #4
 8000e08:	f107 020a 	add.w	r2, r7, #10
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fcba 	bl	8001788 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3308      	adds	r3, #8
 8000e18:	f107 0208 	add.w	r2, r7, #8
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fcb2 	bl	8001788 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2200      	movs	r2, #0
 8000e28:	731a      	strb	r2, [r3, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	735a      	strb	r2, [r3, #13]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2200      	movs	r2, #0
 8000e34:	739a      	strb	r2, [r3, #14]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	79fa      	ldrb	r2, [r7, #7]
 8000e3a:	73da      	strb	r2, [r3, #15]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	08009c50 	.word	0x08009c50

08000e4c <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	769a      	strb	r2, [r3, #26]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2225      	movs	r2, #37	; 0x25
 8000ea8:	76da      	strb	r2, [r3, #27]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	331c      	adds	r3, #28
 8000eae:	2284      	movs	r2, #132	; 0x84
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f008 f926 	bl	8009104 <memset>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	8b99      	ldrh	r1, [r3, #28]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	8bda      	ldrh	r2, [r3, #30]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f7ff ff7b 	bl	8000de4 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000eee:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	741a      	strb	r2, [r3, #16]
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3314      	adds	r3, #20
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fc5a 	bl	80017be <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	0800d1e8 	.word	0x0800d1e8

08000f18 <_ZN14QAT_Vector2_16C1Ett>:
	//Default constructor. Sets both X and Y components to zero
  QAT_Vector2_16() :
    val(0) {}

  //Constructor used to set individual X and Y components
  QAT_Vector2_16(uint16_t x, uint16_t y) :
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	803b      	strh	r3, [r7, #0]
    x(x), y(y) {}
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	801a      	strh	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	883a      	ldrh	r2, [r7, #0]
 8000f32:	805a      	strh	r2, [r3, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_ZN14QAT_Vector2_16C1ERKS_>:

  //Copy Constructor
  //Copies data as single 32bit value for performance reasons
  QAT_Vector2_16(const QAT_Vector2_16& other) :
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
    val(other.val) {}
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fc51 	bl	8001812 <_ZNSaIP12QAS_LCD_FontED1Ev>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 fc34 	bl	80017f2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ffeb 	bl	8000f7a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_ZN15QAS_LCD_FontMgrC1Ev>:

	//--------------------------
	//Constructors / Destructors

	//Default constructor, which clears all data to default on class construction
	QAS_LCD_FontMgr() :
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
		m_iCurrentIdx(-1),
		m_pCurrent(NULL),
		m_pBuffer(NULL),
		m_uColor(0x0000) {
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ffeb 	bl	8000f94 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	22ff      	movs	r2, #255	; 0xff
 8000fc2:	731a      	strb	r2, [r3, #12]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	831a      	strh	r2, [r3, #24]
		m_vFonts.clear();
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fc5a 	bl	8001892 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
	}
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <_ZN15QAS_LCD_FontMgrD1Ev>:

	//Class destructor which iterates through all fonts stored in m_vFonts vector and
	//deletes/deallocates them to prevent memory leaks when class is destroyed
	~QAS_LCD_FontMgr() {
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	7bfc      	ldrb	r4, [r7, #15]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fc58 	bl	80018ae <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8000ffe:	4603      	mov	r3, r0
 8001000:	429c      	cmp	r4, r3
 8001002:	bf34      	ite	cc
 8001004:	2301      	movcc	r3, #1
 8001006:	2300      	movcs	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d011      	beq.n	8001032 <_ZN15QAS_LCD_FontMgrD1Ev+0x4a>
			delete m_vFonts[i];
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fc5a 	bl	80018ce <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 800101a:	4603      	mov	r3, r0
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <_ZN15QAS_LCD_FontMgrD1Ev+0x42>
 8001022:	2140      	movs	r1, #64	; 0x40
 8001024:	4618      	mov	r0, r3
 8001026:	f007 ffb6 	bl	8008f96 <_ZdlPvj>
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	3301      	adds	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e7e0      	b.n	8000ff4 <_ZN15QAS_LCD_FontMgrD1Ev+0xc>
	~QAS_LCD_FontMgr() {
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fc11 	bl	800185c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>
		}
	}
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bd90      	pop	{r4, r7, pc}

08001044 <_ZN7QAS_LCDC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAS_LCD() :
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_pDrawBuffer(NULL),
		m_uDrawColor(0x0000) {}
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	811a      	strh	r2, [r3, #8]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	330c      	adds	r3, #12
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ffa3 	bl	8000fae <_ZN15QAS_LCD_FontMgrC1Ev>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_ZN7QAS_LCDD1Ev>:
class QAS_LCD {
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	330c      	adds	r3, #12
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffb2 	bl	8000fe8 <_ZN15QAS_LCD_FontMgrD1Ev>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <__tcf_0>:
  //-----------------
  //Singleton Methods
  //
  //Used to retrieve a reference to the singleton class
  static QAS_LCD& get() {
  	static QAS_LCD instance;
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
 8001094:	4801      	ldr	r0, [pc, #4]	; (800109c <__tcf_0+0xc>)
 8001096:	f7ff ffec 	bl	8001072 <_ZN7QAS_LCDD1Ev>
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000160 	.word	0x20000160

080010a0 <_ZN7QAS_LCD3getEv>:
  static QAS_LCD& get() {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  	static QAS_LCD instance;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <_ZN7QAS_LCD3getEv+0x50>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	f3bf 8f5b 	dmb	ish
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bf0c      	ite	eq
 80010b6:	2301      	moveq	r3, #1
 80010b8:	2300      	movne	r3, #0
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d013      	beq.n	80010e8 <_ZN7QAS_LCD3getEv+0x48>
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <_ZN7QAS_LCD3getEv+0x50>)
 80010c2:	f007 ff6a 	bl	8008f9a <__cxa_guard_acquire>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf14      	ite	ne
 80010cc:	2301      	movne	r3, #1
 80010ce:	2300      	moveq	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <_ZN7QAS_LCD3getEv+0x48>
 80010d6:	4807      	ldr	r0, [pc, #28]	; (80010f4 <_ZN7QAS_LCD3getEv+0x54>)
 80010d8:	f7ff ffb4 	bl	8001044 <_ZN7QAS_LCDC1Ev>
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <_ZN7QAS_LCD3getEv+0x50>)
 80010de:	f007 ff68 	bl	8008fb2 <__cxa_guard_release>
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <_ZN7QAS_LCD3getEv+0x58>)
 80010e4:	f007 ffa5 	bl	8009032 <atexit>
  	return instance;
 80010e8:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <_ZN7QAS_LCD3getEv+0x54>)
  }
 80010ea:	4618      	mov	r0, r3
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000188 	.word	0x20000188
 80010f4:	20000160 	.word	0x20000160
 80010f8:	08001091 	.word	0x08001091

080010fc <_ZN7QAS_LCD4initEv>:
	//----------------------
	//Initialization Methods

  //Used to initialize the LTDC peripheral and setup Font Manager class
  //Returns QA_OK if initialization successful, or QA_Fail if initialization fails
  static QA_Result init(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8001100:	f7ff ffce 	bl	80010a0 <_ZN7QAS_LCD3getEv>
 8001104:	4603      	mov	r3, r0
 8001106:	4618      	mov	r0, r3
 8001108:	f006 fbb6 	bl	8007878 <_ZN7QAS_LCD8imp_initEv>
 800110c:	4603      	mov	r3, r0
  }
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}

08001112 <_ZN7QAS_LCD10flipLayer0Ev>:
	//-----------------------
	//Rendering Setup Methods

  //Used to flip the front and back buffer for layer 0
  //See QAD_LTDC.hpp for more details
  static void flipLayer0(void) {
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  	get().imp_flipLayer0();
 8001116:	f7ff ffc3 	bl	80010a0 <_ZN7QAS_LCD3getEv>
 800111a:	4603      	mov	r3, r0
 800111c:	4618      	mov	r0, r3
 800111e:	f006 fc11 	bl	8007944 <_ZN7QAS_LCD14imp_flipLayer0Ev>
  }
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}

08001126 <_ZN7QAS_LCD10flipLayer1Ev>:

  //Used to flip the front and back buffer for layer 1
  //See QAD_LTDC.hpp for more details
  static void flipLayer1(void) {
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  	get().imp_flipLayer1();
 800112a:	f7ff ffb9 	bl	80010a0 <_ZN7QAS_LCD3getEv>
 800112e:	4603      	mov	r3, r0
 8001130:	4618      	mov	r0, r3
 8001132:	f006 fc11 	bl	8007958 <_ZN7QAS_LCD14imp_flipLayer1Ev>
  }
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}

0800113a <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>:

  //Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
  //eLayer - Sets whether the current draw buffer is layer 0 or layer 1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
  static void setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  	get().imp_setDrawBuffer(eLayer);
 8001144:	f7ff ffac 	bl	80010a0 <_ZN7QAS_LCD3getEv>
 8001148:	4602      	mov	r2, r0
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	4619      	mov	r1, r3
 800114e:	4610      	mov	r0, r2
 8001150:	f006 fc0c 	bl	800796c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>
  }
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <_ZN7QAS_LCD12setDrawColorEt>:

  //Used to set the current draw color
  //uColor - A 16bit ARGB4444 color value
  static void setDrawColor(uint16_t uColor) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
  	get().imp_setDrawColor(uColor);
 8001166:	f7ff ff9b 	bl	80010a0 <_ZN7QAS_LCD3getEv>
 800116a:	4602      	mov	r2, r0
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	4619      	mov	r1, r3
 8001170:	4610      	mov	r0, r2
 8001172:	f006 fc20 	bl	80079b6 <_ZN7QAS_LCD16imp_setDrawColorEt>
  }
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_ZN7QAS_LCD11clearBufferEv>:

	//-----------------
	//Rendering Methods

  //Used to clear the currently selected draw buffer to the currently selected draw color
  static void clearBuffer(void) {
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
  	get().imp_clearBuffer();
 8001182:	f7ff ff8d 	bl	80010a0 <_ZN7QAS_LCD3getEv>
 8001186:	4603      	mov	r3, r0
 8001188:	4618      	mov	r0, r3
 800118a:	f006 fc2b 	bl	80079e4 <_ZN7QAS_LCD15imp_clearBufferEv>
  }
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}

08001192 <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>:
  }

  //Used to draw a non-filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
  static void drawRect(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  	get().imp_drawRect(cStart, cEnd);
 800119c:	f7ff ff80 	bl	80010a0 <_ZN7QAS_LCD3getEv>
 80011a0:	4603      	mov	r3, r0
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f006 fc3c 	bl	8007a24 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>
  }
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>:

  //Used to draw a filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
  static void drawRectFill(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  	get().imp_drawRectFill(cStart, cEnd);
 80011be:	f7ff ff6f 	bl	80010a0 <_ZN7QAS_LCD3getEv>
 80011c2:	4603      	mov	r3, r0
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f006 fcb9 	bl	8007b40 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>
  }
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_ZN7QAS_LCD13setFontByNameEPKc>:
	//Font Rendering Methods

  //Used to set the selected font/typeface to be used for text rendering
  //strName - A C-style string containing the name of the font to be selected. This must match one of the
  //          fonts stored in the font manager, otherwise no font will be selected
  static void setFontByName(const char* strName) {
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  	get().m_cFontMgr.setFontByName(strName);
 80011de:	f7ff ff5f 	bl	80010a0 <_ZN7QAS_LCD3getEv>
 80011e2:	4603      	mov	r3, r0
 80011e4:	330c      	adds	r3, #12
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f006 fdcb 	bl	8007d84 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>
  }
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_ZN7QAS_LCD14setFontByIndexEh>:

  //Used to set the selected font/typeface to be used for text rendering
  //uIdx - The index of the fond to be selected, based on the array of fonts stored in the font manager
  static void setFontByIndex(uint8_t uIdx) {
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
  	get().m_cFontMgr.setFontByIndex(uIdx);
 8001200:	f7ff ff4e 	bl	80010a0 <_ZN7QAS_LCD3getEv>
 8001204:	4603      	mov	r3, r0
 8001206:	330c      	adds	r3, #12
 8001208:	79fa      	ldrb	r2, [r7, #7]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f006 fde0 	bl	8007dd2 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>
  }
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>:

  //Used to draw a center-aligned string of characters using the currently selected font/typeface
  //String will be drawn to currently selected draw buffer with currently selected draw color
  //cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
  //str  - The C-style string to be drawn
  static void drawStrC(QAT_Vector2_16 cPos, const char* str) {
 800121a:	b590      	push	{r4, r7, lr}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  	get().m_cFontMgr.drawStrC(cPos, str);
 8001224:	f7ff ff3c 	bl	80010a0 <_ZN7QAS_LCD3getEv>
 8001228:	4603      	mov	r3, r0
 800122a:	f103 040c 	add.w	r4, r3, #12
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe84 	bl	8000f42 <_ZN14QAT_Vector2_16C1ERKS_>
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	4620      	mov	r0, r4
 8001244:	f006 febf 	bl	8007fc6 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>
  }
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	bd90      	pop	{r4, r7, pc}

08001250 <main>:
//main
//Application Entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f769nihx.s
int main(void) {
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b0da      	sub	sp, #360	; 0x168
 8001254:	af02      	add	r7, sp, #8
  //System Initialization

	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method
	if (SystemInitialize()) {
 8001256:	f7ff fa67 	bl	8000728 <_Z16SystemInitializev>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	bf14      	ite	ne
 8001260:	2301      	movne	r3, #1
 8001262:	2300      	moveq	r3, #0
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d000      	beq.n	800126c <main+0x1c>
	  while (1) {}
 800126a:	e7fe      	b.n	800126a <main+0x1a>


	//----------------------------------
	//Initialize the User LEDs using the QAD_GPIO_Output driver class.
	//QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PORT, QAD_USER_LED_RED_GPIO_PIN and QAD_USERLED_GREEN_GPIO_PIN are defined in setup.hpp
  GPIO_UserLED_Red   = new QAD_GPIO_Output(QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_RED_GPIO_PIN);
 800126c:	2014      	movs	r0, #20
 800126e:	f007 fea3 	bl	8008fb8 <_Znwj>
 8001272:	4603      	mov	r3, r0
 8001274:	461c      	mov	r4, r3
 8001276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800127a:	49bf      	ldr	r1, [pc, #764]	; (8001578 <main+0x328>)
 800127c:	4620      	mov	r0, r4
 800127e:	f005 f825 	bl	80062cc <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8001282:	4bbe      	ldr	r3, [pc, #760]	; (800157c <main+0x32c>)
 8001284:	601c      	str	r4, [r3, #0]
  GPIO_UserLED_Green = new QAD_GPIO_Output(QAD_USERLED_GREEN_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PIN);
 8001286:	2014      	movs	r0, #20
 8001288:	f007 fe96 	bl	8008fb8 <_Znwj>
 800128c:	4603      	mov	r3, r0
 800128e:	461c      	mov	r4, r3
 8001290:	2220      	movs	r2, #32
 8001292:	49b9      	ldr	r1, [pc, #740]	; (8001578 <main+0x328>)
 8001294:	4620      	mov	r0, r4
 8001296:	f005 f819 	bl	80062cc <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 800129a:	4bb9      	ldr	r3, [pc, #740]	; (8001580 <main+0x330>)
 800129c:	601c      	str	r4, [r3, #0]


	//----------------------------------
  //Initialize the User Button using the QAD_GPIO_Input driver class.
  //QAD_USERBUTTON_GPIO_PORT and QAD_USERBUTTON_GPIO_PIN are defined in setup.hpp
  GPIO_UserButton = new QAD_GPIO_Input(QAD_USERBUTTON_GPIO_PORT, QAD_USERBUTTON_GPIO_PIN);
 800129e:	2010      	movs	r0, #16
 80012a0:	f007 fe8a 	bl	8008fb8 <_Znwj>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461c      	mov	r4, r3
 80012a8:	2201      	movs	r2, #1
 80012aa:	49b6      	ldr	r1, [pc, #728]	; (8001584 <main+0x334>)
 80012ac:	4620      	mov	r0, r4
 80012ae:	f005 f893 	bl	80063d8 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>
 80012b2:	4bb5      	ldr	r3, [pc, #724]	; (8001588 <main+0x338>)
 80012b4:	601c      	str	r4, [r3, #0]
  //Initialize UART1, which is used to communicate over serial via the STLINK connection
  //Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

  //Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
  sSerialInit.sUART_Init.baudrate    = QAD_UART1_BAUDRATE;
 80012bc:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80012c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART1;
 80012c4:	2309      	movs	r3, #9
 80012c6:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
  sSerialInit.sUART_Init.txgpio      = QAD_UART1_TX_PORT;
 80012ca:	4bae      	ldr	r3, [pc, #696]	; (8001584 <main+0x334>)
 80012cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  sSerialInit.sUART_Init.txpin       = QAD_UART1_TX_PIN;
 80012d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
  sSerialInit.sUART_Init.txaf        = QAD_UART1_TX_AF;
 80012d8:	2307      	movs	r3, #7
 80012da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  sSerialInit.sUART_Init.rxgpio      = QAD_UART1_RX_PORT;
 80012de:	4ba9      	ldr	r3, [pc, #676]	; (8001584 <main+0x334>)
 80012e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  sSerialInit.sUART_Init.rxpin       = QAD_UART1_RX_PIN;
 80012e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
  sSerialInit.sUART_Init.rxaf        = QAD_UART1_RX_AF;
 80012ec:	2307      	movs	r3, #7
 80012ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  sSerialInit.uTXFIFO_Size           = QAD_UART1_TX_FIFOSIZE;
 80012f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f6:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
  sSerialInit.uRXFIFO_Size           = QAD_UART1_RX_FIFOSIZE;
 80012fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fe:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 8001302:	2018      	movs	r0, #24
 8001304:	f007 fe58 	bl	8008fb8 <_Znwj>
 8001308:	4603      	mov	r3, r0
 800130a:	461c      	mov	r4, r3
 800130c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001310:	4619      	mov	r1, r3
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff fdde 	bl	8000ed4 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 8001318:	4b9c      	ldr	r3, [pc, #624]	; (800158c <main+0x33c>)
 800131a:	601c      	str	r4, [r3, #0]

  //If initialization failed the turn on User LED and enter infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 800131c:	4b9b      	ldr	r3, [pc, #620]	; (800158c <main+0x33c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f007 fb31 	bl	800898a <_ZN19QAS_Serial_Dev_Base4initEPv>
 8001328:	4603      	mov	r3, r0
 800132a:	2b01      	cmp	r3, #1
 800132c:	bf0c      	ite	eq
 800132e:	2301      	moveq	r3, #1
 8001330:	2300      	movne	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <main+0xf4>
  	GPIO_UserLED_Red->on();
 8001338:	4b90      	ldr	r3, [pc, #576]	; (800157c <main+0x32c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f004 ffe6 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8001342:	e7fe      	b.n	8001342 <main+0xf2>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8001344:	4b91      	ldr	r3, [pc, #580]	; (800158c <main+0x33c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f007 fbac 	bl	8008aa6 <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F769I Discovery Booting...");
 800134e:	4b8f      	ldr	r3, [pc, #572]	; (800158c <main+0x33c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	498f      	ldr	r1, [pc, #572]	; (8001590 <main+0x340>)
 8001354:	4618      	mov	r0, r3
 8001356:	f007 fb72 	bl	8008a3e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>



	//----------------------------------
  //Initialize FMC / SDRAM driver using the QAD_FMC singleton driver class
  if (QAD_FMC::init() == QA_OK) {
 800135a:	f7ff fc57 	bl	8000c0c <_ZN7QAD_FMC4initEv>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d02c      	beq.n	80013c8 <main+0x178>

  	//If initialization passed then output message via serial
    UART_STLink->txStringCR("SDRAM: Initialized");
 800136e:	4b87      	ldr	r3, [pc, #540]	; (800158c <main+0x33c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4988      	ldr	r1, [pc, #544]	; (8001594 <main+0x344>)
 8001374:	4618      	mov	r0, r3
 8001376:	f007 fb62 	bl	8008a3e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

    //Test SDRAM to confirm correct operation
  	if (QAD_FMC::test() == QA_OK) {
 800137a:	f7ff fc52 	bl	8000c22 <_ZN7QAD_FMC4testEv>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf0c      	ite	eq
 8001384:	2301      	moveq	r3, #1
 8001386:	2300      	movne	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d010      	beq.n	80013b0 <main+0x160>

  		//If SDRAM test passed then output message via serial
  		UART_STLink->txStringCR("SDRAM: Test Passed");
 800138e:	4b7f      	ldr	r3, [pc, #508]	; (800158c <main+0x33c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4981      	ldr	r1, [pc, #516]	; (8001598 <main+0x348>)
 8001394:	4618      	mov	r0, r3
 8001396:	f007 fb52 	bl	8008a3e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


	//----------------------------------
  //Initialize LCD using QAS_LCD singleton class.
  //This will also initialize LTDC and DSI peripherals, and also initialize otm8009a display controller
  if (QAS_LCD::init()) {
 800139a:	f7ff feaf 	bl	80010fc <_ZN7QAS_LCD4initEv>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d01e      	beq.n	80013ec <main+0x19c>
 80013ae:	e017      	b.n	80013e0 <main+0x190>
  		UART_STLink->txStringCR("SDRAM: Test Failed");
 80013b0:	4b76      	ldr	r3, [pc, #472]	; (800158c <main+0x33c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4979      	ldr	r1, [pc, #484]	; (800159c <main+0x34c>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f007 fb41 	bl	8008a3e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  		GPIO_UserLED_Red->on();
 80013bc:	4b6f      	ldr	r3, [pc, #444]	; (800157c <main+0x32c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f004 ffa4 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
  		while(1) {}
 80013c6:	e7fe      	b.n	80013c6 <main+0x176>
    UART_STLink->txStringCR("SDRAM: Initialization failed");
 80013c8:	4b70      	ldr	r3, [pc, #448]	; (800158c <main+0x33c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4974      	ldr	r1, [pc, #464]	; (80015a0 <main+0x350>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f007 fb35 	bl	8008a3e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
    GPIO_UserLED_Red->on();
 80013d4:	4b69      	ldr	r3, [pc, #420]	; (800157c <main+0x32c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f004 ff98 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 80013de:	e7fe      	b.n	80013de <main+0x18e>
  	UART_STLink->txStringCR("LCD: Initialization failed");
 80013e0:	4b6a      	ldr	r3, [pc, #424]	; (800158c <main+0x33c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	496f      	ldr	r1, [pc, #444]	; (80015a4 <main+0x354>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f007 fb29 	bl	8008a3e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  }
  UART_STLink->txStringCR("LCD: Initialized");
 80013ec:	4b67      	ldr	r3, [pc, #412]	; (800158c <main+0x33c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	496d      	ldr	r1, [pc, #436]	; (80015a8 <main+0x358>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f007 fb23 	bl	8008a3e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //Test rendering methods to confirm LCD and rendering subsystem are working correctly

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer0);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fe9e 	bl	800113a <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0xFFFF);
 80013fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001402:	f7ff feab 	bl	800115c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 8001406:	f7ff feba 	bl	800117e <_ZN7QAS_LCD11clearBufferEv>

  //Shapes
  QAS_LCD::setDrawColor(0xF003);
 800140a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800140e:	f7ff fea5 	bl	800115c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRectFill(QAT_Vector2_16(40, 40), QAT_Vector2_16(760, 440));
 8001412:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001416:	2228      	movs	r2, #40	; 0x28
 8001418:	2128      	movs	r1, #40	; 0x28
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fd7c 	bl	8000f18 <_ZN14QAT_Vector2_16C1Ett>
 8001420:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001424:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001428:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fd73 	bl	8000f18 <_ZN14QAT_Vector2_16C1Ett>
 8001432:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001436:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff feb9 	bl	80011b4 <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawColor(0xFFFF);
 8001442:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001446:	f7ff fe89 	bl	800115c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRect(QAT_Vector2_16(50, 50), QAT_Vector2_16(750, 430));
 800144a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800144e:	2232      	movs	r2, #50	; 0x32
 8001450:	2132      	movs	r1, #50	; 0x32
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fd60 	bl	8000f18 <_ZN14QAT_Vector2_16C1Ett>
 8001458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800145c:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8001460:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fd57 	bl	8000f18 <_ZN14QAT_Vector2_16C1Ett>
 800146a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800146e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fe8c 	bl	8001192 <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer1);
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff fe5d 	bl	800113a <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0x0000);
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff fe6b 	bl	800115c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 8001486:	f7ff fe7a 	bl	800117e <_ZN7QAS_LCD11clearBufferEv>

  QAS_LCD::setDrawColor(0xFBFB);
 800148a:	f64f 30fb 	movw	r0, #64507	; 0xfbfb
 800148e:	f7ff fe65 	bl	800115c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::setFontByName("SegoeUI12pt");
 8001492:	4846      	ldr	r0, [pc, #280]	; (80015ac <main+0x35c>)
 8001494:	f7ff fe9f 	bl	80011d6 <_ZN7QAS_LCD13setFontByNameEPKc>
  //QAS_LCD::setFontByIndex(0);
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 150), "Hello World!");
 8001498:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800149c:	2296      	movs	r2, #150	; 0x96
 800149e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fd38 	bl	8000f18 <_ZN14QAT_Vector2_16C1Ett>
 80014a8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80014ac:	4940      	ldr	r1, [pc, #256]	; (80015b0 <main+0x360>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff feb3 	bl	800121a <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::setDrawColor(0xFBBF);
 80014b4:	f64f 30bf 	movw	r0, #64447	; 0xfbbf
 80014b8:	f7ff fe50 	bl	800115c <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("SegoeUI20ptSB");
  QAS_LCD::setFontByIndex(1);
 80014bc:	2001      	movs	r0, #1
 80014be:	f7ff fe9a 	bl	80011f6 <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 250), "Welcome to 1s and 0s");
 80014c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014c6:	22fa      	movs	r2, #250	; 0xfa
 80014c8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fd23 	bl	8000f18 <_ZN14QAT_Vector2_16C1Ett>
 80014d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014d6:	4937      	ldr	r1, [pc, #220]	; (80015b4 <main+0x364>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fe9e 	bl	800121a <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::setDrawColor(0xFFBB);
 80014de:	f64f 70bb 	movw	r0, #65467	; 0xffbb
 80014e2:	f7ff fe3b 	bl	800115c <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("ShowcardGothic18pt");
  QAS_LCD::setFontByIndex(2);
 80014e6:	2002      	movs	r0, #2
 80014e8:	f7ff fe85 	bl	80011f6 <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 350), "Test Font");
 80014ec:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80014f0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80014f4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fd0d 	bl	8000f18 <_ZN14QAT_Vector2_16C1Ett>
 80014fe:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001502:	492d      	ldr	r1, [pc, #180]	; (80015b8 <main+0x368>)
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fe88 	bl	800121a <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::flipLayer0();
 800150a:	f7ff fe02 	bl	8001112 <_ZN7QAS_LCD10flipLayer0Ev>
  QAS_LCD::flipLayer1();
 800150e:	f7ff fe0a 	bl	8001126 <_ZN7QAS_LCD10flipLayer1Ev>


  //---------------
  //Init RNG Driver
  if (QAD_RNG::init()) {
 8001512:	f7ff fbcf 	bl	8000cb4 <_ZN7QAD_RNG4initEv>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf14      	ite	ne
 800151c:	2301      	movne	r3, #1
 800151e:	2300      	moveq	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <main+0x2ee>
  	UART_STLink->txStringCR("RNG: Initialization Failed");
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <main+0x33c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4924      	ldr	r1, [pc, #144]	; (80015bc <main+0x36c>)
 800152c:	4618      	mov	r0, r3
 800152e:	f007 fa86 	bl	8008a3e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <main+0x32c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fee9 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 800153c:	e7fe      	b.n	800153c <main+0x2ec>
  }
  UART_STLink->txString("RNG: Initialized");
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <main+0x33c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	491f      	ldr	r1, [pc, #124]	; (80015c0 <main+0x370>)
 8001544:	4618      	mov	r0, r3
 8001546:	f007 fa50 	bl	80089ea <_ZN19QAS_Serial_Dev_Base8txStringEPKc>


  //---------------
  //Init RTC Driver
  if (QAD_RTC::init()) {
 800154a:	f7ff fbf9 	bl	8000d40 <_ZN7QAD_RTC4initEv>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf14      	ite	ne
 8001554:	2301      	movne	r3, #1
 8001556:	2300      	moveq	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d034      	beq.n	80015c8 <main+0x378>
  	UART_STLink->txStringCR("RTC: Initialization Failed");
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <main+0x33c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4918      	ldr	r1, [pc, #96]	; (80015c4 <main+0x374>)
 8001564:	4618      	mov	r0, r3
 8001566:	f007 fa6a 	bl	8008a3e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <main+0x32c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fecd 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8001574:	e7fe      	b.n	8001574 <main+0x324>
 8001576:	bf00      	nop
 8001578:	40022400 	.word	0x40022400
 800157c:	2000018c 	.word	0x2000018c
 8001580:	20000190 	.word	0x20000190
 8001584:	40020000 	.word	0x40020000
 8001588:	20000194 	.word	0x20000194
 800158c:	20000198 	.word	0x20000198
 8001590:	08009a98 	.word	0x08009a98
 8001594:	08009ab8 	.word	0x08009ab8
 8001598:	08009acc 	.word	0x08009acc
 800159c:	08009ae0 	.word	0x08009ae0
 80015a0:	08009af4 	.word	0x08009af4
 80015a4:	08009b14 	.word	0x08009b14
 80015a8:	08009b30 	.word	0x08009b30
 80015ac:	08009b44 	.word	0x08009b44
 80015b0:	08009b50 	.word	0x08009b50
 80015b4:	08009b60 	.word	0x08009b60
 80015b8:	08009b78 	.word	0x08009b78
 80015bc:	08009b84 	.word	0x08009b84
 80015c0:	08009ba0 	.word	0x08009ba0
 80015c4:	08009bb4 	.word	0x08009bb4
  }
  UART_STLink->txString("RTC: Initialized");
 80015c8:	4b5d      	ldr	r3, [pc, #372]	; (8001740 <main+0x4f0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	495d      	ldr	r1, [pc, #372]	; (8001744 <main+0x4f4>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f007 fa0b 	bl	80089ea <_ZN19QAS_Serial_Dev_Base8txStringEPKc>
  //Processing Loop

  //Create processing loop timing variables
  uint32_t uTicks;
  uint32_t uCurTick;
  uint32_t uNewTick = HAL_GetTick();
 80015d4:	f000 ff48 	bl	8002468 <HAL_GetTick>
 80015d8:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
  uint32_t uOldTick = uNewTick;
 80015dc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015e0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

  //Create task timing variables
  uint32_t uRNGUpdateTicks = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  uint32_t uRTCUpdateTicks = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  uint32_t uHeartbeatTicks = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  	//----------------------------------
  	//Frame Timing
  	//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
  	//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 80015f6:	f000 ff37 	bl	8002468 <HAL_GetTick>
 80015fa:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 80015fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001602:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001606:	429a      	cmp	r2, r3
 8001608:	d01e      	beq.n	8001648 <main+0x3f8>
    	uOldTick = uNewTick;
 800160a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800160e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    	uNewTick = uCurTick;
 8001612:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001616:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 800161a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800161e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001622:	429a      	cmp	r2, r3
 8001624:	d208      	bcs.n	8001638 <main+0x3e8>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8001626:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800162a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	3b01      	subs	r3, #1
 8001632:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001636:	e00a      	b.n	800164e <main+0x3fe>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8001638:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800163c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001646:	e002      	b.n	800164e <main+0x3fe>
    	}

    } else {
    	uTicks = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    }


    //Update and output Random Number
    uRNGUpdateTicks += uTicks;
 800164e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001652:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001656:	4413      	add	r3, r2
 8001658:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    if (uRNGUpdateTicks >= QA_FT_RNGUpdateTickThreshold) {
 800165c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001660:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001664:	d305      	bcc.n	8001672 <main+0x422>

//    	sprintf(strOut, "RNG Value: %lu", QAD_RNG::getValue());
//    	UART_STLink->txStringCR(strOut);

    	uRNGUpdateTicks -= QA_FT_RNGUpdateTickThreshold;
 8001666:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800166a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800166e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    }


    //Update and output RTC
    uRTCUpdateTicks += uTicks;
 8001672:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001676:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800167a:	4413      	add	r3, r2
 800167c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    if (uRTCUpdateTicks >= QA_FT_RTCUpdateTickThreshold) {
 8001680:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001688:	d341      	bcc.n	800170e <main+0x4be>
      QAD_RTC::update();
 800168a:	f7ff fb64 	bl	8000d56 <_ZN7QAD_RTC6updateEv>

    	sprintf(strOut, "Time: %2u : %2u : %2u", QAD_RTC::getHour(), QAD_RTC::getMinute(), QAD_RTC::getSecond());
 800168e:	f7ff fb6d 	bl	8000d6c <_ZN7QAD_RTC7getHourEv>
 8001692:	4603      	mov	r3, r0
 8001694:	461c      	mov	r4, r3
 8001696:	f7ff fb74 	bl	8000d82 <_ZN7QAD_RTC9getMinuteEv>
 800169a:	4603      	mov	r3, r0
 800169c:	461d      	mov	r5, r3
 800169e:	f7ff fb7b 	bl	8000d98 <_ZN7QAD_RTC9getSecondEv>
 80016a2:	4603      	mov	r3, r0
 80016a4:	1d38      	adds	r0, r7, #4
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	462b      	mov	r3, r5
 80016aa:	4622      	mov	r2, r4
 80016ac:	4926      	ldr	r1, [pc, #152]	; (8001748 <main+0x4f8>)
 80016ae:	f007 fe2f 	bl	8009310 <siprintf>
    	UART_STLink->txStringCR(strOut);
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <main+0x4f0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	4619      	mov	r1, r3
 80016bc:	4610      	mov	r0, r2
 80016be:	f007 f9be 	bl	8008a3e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

      QAS_LCD::setDrawBuffer(QAD_LTDC_Layer1);
 80016c2:	2001      	movs	r0, #1
 80016c4:	f7ff fd39 	bl	800113a <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
      QAS_LCD::setDrawColor(0x0000);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7ff fd47 	bl	800115c <_ZN7QAS_LCD12setDrawColorEt>
      QAS_LCD::clearBuffer();
 80016ce:	f7ff fd56 	bl	800117e <_ZN7QAS_LCD11clearBufferEv>

      QAS_LCD::setDrawColor(0xFBBF);
 80016d2:	f64f 30bf 	movw	r0, #64447	; 0xfbbf
 80016d6:	f7ff fd41 	bl	800115c <_ZN7QAS_LCD12setDrawColorEt>
      //QAS_LCD::setFontByName("SegoeUI20ptSB");
      QAS_LCD::setFontByIndex(1);
 80016da:	2001      	movs	r0, #1
 80016dc:	f7ff fd8b 	bl	80011f6 <_ZN7QAS_LCD14setFontByIndexEh>
      QAS_LCD::drawStrC(QAT_Vector2_16(400, 250), strOut);
 80016e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016e4:	22fa      	movs	r2, #250	; 0xfa
 80016e6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fc14 	bl	8000f18 <_ZN14QAT_Vector2_16C1Ett>
 80016f0:	1d3a      	adds	r2, r7, #4
 80016f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fd8e 	bl	800121a <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

      QAS_LCD::flipLayer1();
 80016fe:	f7ff fd12 	bl	8001126 <_ZN7QAS_LCD10flipLayer1Ev>

      uRTCUpdateTicks -= QA_FT_RTCUpdateTickThreshold;
 8001702:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001706:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800170a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the green User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //has become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 800170e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001712:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001716:	4413      	add	r3, r2
 8001718:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) {
 800171c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001720:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001724:	f4ff af67 	bcc.w	80015f6 <main+0x3a6>
    	GPIO_UserLED_Green->toggle();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <main+0x4fc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f004 fe14 	bl	800635a <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;
 8001732:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001736:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800173a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    uCurTick = HAL_GetTick();
 800173e:	e75a      	b.n	80015f6 <main+0x3a6>
 8001740:	20000198 	.word	0x20000198
 8001744:	08009bd0 	.word	0x08009bd0
 8001748:	08009be4 	.word	0x08009be4
 800174c:	20000190 	.word	0x20000190

08001750 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 800175a:	683c      	ldr	r4, [r7, #0]
 800175c:	4620      	mov	r0, r4
 800175e:	f007 fc3c 	bl	8008fda <_Znaj>
 8001762:	4603      	mov	r3, r0
 8001764:	4618      	mov	r0, r3
 8001766:	4602      	mov	r2, r0
 8001768:	1e63      	subs	r3, r4, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	db04      	blt.n	8001778 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 800176e:	2100      	movs	r1, #0
 8001770:	7011      	strb	r1, [r2, #0]
 8001772:	3201      	adds	r2, #1
 8001774:	3b01      	subs	r3, #1
 8001776:	e7f8      	b.n	800176a <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8001778:	4601      	mov	r1, r0
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8b7 	bl	80018ee <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}

08001788 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001792:	6838      	ldr	r0, [r7, #0]
 8001794:	f000 f8c7 	bl	8001926 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8001798:	4603      	mov	r3, r0
 800179a:	881c      	ldrh	r4, [r3, #0]
 800179c:	200c      	movs	r0, #12
 800179e:	f007 fc0b 	bl	8008fb8 <_Znwj>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461d      	mov	r5, r3
 80017a6:	4621      	mov	r1, r4
 80017a8:	4628      	mov	r0, r5
 80017aa:	f7ff fb00 	bl	8000dae <_ZN14QAT_FIFOBufferC1Et>
 80017ae:	4629      	mov	r1, r5
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f8c3 	bl	800193c <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bdb0      	pop	{r4, r5, r7, pc}

080017be <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80017be:	b5b0      	push	{r4, r5, r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80017c8:	6838      	ldr	r0, [r7, #0]
 80017ca:	f000 f8d3 	bl	8001974 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 80017ce:	4605      	mov	r5, r0
 80017d0:	20a4      	movs	r0, #164	; 0xa4
 80017d2:	f007 fbf1 	bl	8008fb8 <_Znwj>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461c      	mov	r4, r3
 80017da:	4629      	mov	r1, r5
 80017dc:	4620      	mov	r0, r4
 80017de:	f7ff fb35 	bl	8000e4c <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 80017e2:	4621      	mov	r1, r4
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f8d0 	bl	800198a <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bdb0      	pop	{r4, r5, r7, pc}

080017f2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f8e1 	bl	80019c2 <_ZNSaIP12QAS_LCD_FontEC1Ev>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f8e9 	bl	80019da <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_ZNSaIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f8f1 	bl	8001a02 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8001842:	461a      	mov	r2, r3
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f8e7 	bl	8001a18 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fb88 	bl	8000f62 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681c      	ldr	r4, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f8e5 	bl	8001a3e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8001874:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001876:	461a      	mov	r2, r3
 8001878:	4629      	mov	r1, r5
 800187a:	4620      	mov	r0, r4
 800187c:	f000 f8ea 	bl	8001a54 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ffd1 	bl	800182a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bdb0      	pop	{r4, r5, r7, pc}

08001892 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4619      	mov	r1, r3
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f8e5 	bl	8001a70 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	109b      	asrs	r3, r3, #2
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
      }
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6839      	ldr	r1, [r7, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f8d8 	bl	8001ab2 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f8df 	bl	8001ada <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800191c:	4603      	mov	r3, r0
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6839      	ldr	r1, [r7, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f8d2 	bl	8001af4 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	f000 f8d9 	bl	8001b1c <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800196a:	4603      	mov	r3, r0
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6839      	ldr	r1, [r7, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f000 f8cc 	bl	8001b36 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f8d3 	bl	8001b5e <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_ZNSaIP12QAS_LCD_FontEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f8d4 	bl	8001b78 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
	{ }
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
	if (__p)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f8ac 	bl	8001b8e <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>
      }
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f8a2 	bl	8001bac <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>
    }
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	109b      	asrs	r3, r3, #2
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00e      	beq.n	8001aaa <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ffd3 	bl	8001a3e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8001a98:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	6838      	ldr	r0, [r7, #0]
 8001aa0:	f7ff ffd8 	bl	8001a54 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd90      	pop	{r4, r7, pc}

08001ab2 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f881 	bl	8001bc6 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff21 	bl	800190c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8001aca:	4602      	mov	r2, r0
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 f87b 	bl	8001be0 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f879 	bl	8001bf8 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ff27 	bl	800195a <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f873 	bl	8001c12 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f871 	bl	8001c2a <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff2d 	bl	80019a8 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f86b 	bl	8001c44 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f85c 	bl	8001c5c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001bb6:	6839      	ldr	r1, [r7, #0]
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f85c 	bl	8001c76 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>
    }
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 f85b 	bl	8001c8c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f85f 	bl	8001cac <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f85f 	bl	8001cc6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f863 	bl	8001ce6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f863 	bl	8001d00 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f867 	bl	8001d20 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8001c68:	68b8      	ldr	r0, [r7, #8]
 8001c6a:	f007 f992 	bl	8008f92 <_ZdlPv>
      }
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f850 	bl	8001d3a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f858 	bl	8001d52 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f859 	bl	8001d6e <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f858 	bl	8001d84 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f860 	bl	8001d9c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 f861 	bl	8001db8 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f860 	bl	8001dce <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 f868 	bl	8001de6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f869 	bl	8001e02 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f868 	bl	8001e18 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f84e 	bl	8001e2e <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f834 	bl	8001e44 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
	return 1;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_kill>:

int _kill(int pid, int sig)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e74:	f007 f8e4 	bl	8009040 <__errno>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2216      	movs	r2, #22
 8001e7c:	601a      	str	r2, [r3, #0]
	return -1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_exit>:

void _exit (int status)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e92:	f04f 31ff 	mov.w	r1, #4294967295
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ffe7 	bl	8001e6a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e9c:	e7fe      	b.n	8001e9c <_exit+0x12>
	...

08001ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <_sbrk+0x5c>)
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <_sbrk+0x60>)
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <_sbrk+0x64>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <_sbrk+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed0:	f007 f8b6 	bl	8009040 <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	e009      	b.n	8001ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <_sbrk+0x64>)
 8001ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20080000 	.word	0x20080000
 8001f00:	00000400 	.word	0x00000400
 8001f04:	2000019c 	.word	0x2000019c
 8001f08:	20000408 	.word	0x20000408

08001f0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SystemInit+0x20>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <SystemInit+0x20>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001f3a:	49c1      	ldr	r1, [pc, #772]	; (8002240 <OTM8009A_Init+0x310>)
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f004 fed3 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001f42:	49c0      	ldr	r1, [pc, #768]	; (8002244 <OTM8009A_Init+0x314>)
 8001f44:	2003      	movs	r0, #3
 8001f46:	f004 fecf 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001f4a:	49bf      	ldr	r1, [pc, #764]	; (8002248 <OTM8009A_Init+0x318>)
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f004 fecb 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001f52:	49be      	ldr	r1, [pc, #760]	; (800224c <OTM8009A_Init+0x31c>)
 8001f54:	2002      	movs	r0, #2
 8001f56:	f004 fec7 	bl	8006ce8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001f5a:	49bb      	ldr	r1, [pc, #748]	; (8002248 <OTM8009A_Init+0x318>)
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f004 fec3 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001f62:	49bb      	ldr	r1, [pc, #748]	; (8002250 <OTM8009A_Init+0x320>)
 8001f64:	2000      	movs	r0, #0
 8001f66:	f004 febf 	bl	8006ce8 <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8001f6a:	200a      	movs	r0, #10
 8001f6c:	f000 fa88 	bl	8002480 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001f70:	49b8      	ldr	r1, [pc, #736]	; (8002254 <OTM8009A_Init+0x324>)
 8001f72:	2000      	movs	r0, #0
 8001f74:	f004 feb8 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001f78:	49b7      	ldr	r1, [pc, #732]	; (8002258 <OTM8009A_Init+0x328>)
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f004 feb4 	bl	8006ce8 <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8001f80:	200a      	movs	r0, #10
 8001f82:	f000 fa7d 	bl	8002480 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8001f86:	49b5      	ldr	r1, [pc, #724]	; (800225c <OTM8009A_Init+0x32c>)
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f004 fead 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001f8e:	49b4      	ldr	r1, [pc, #720]	; (8002260 <OTM8009A_Init+0x330>)
 8001f90:	2000      	movs	r0, #0
 8001f92:	f004 fea9 	bl	8006ce8 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8001f96:	49b3      	ldr	r1, [pc, #716]	; (8002264 <OTM8009A_Init+0x334>)
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f004 fea5 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001f9e:	49b2      	ldr	r1, [pc, #712]	; (8002268 <OTM8009A_Init+0x338>)
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f004 fea1 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8001fa6:	49b1      	ldr	r1, [pc, #708]	; (800226c <OTM8009A_Init+0x33c>)
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f004 fe9d 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001fae:	49b0      	ldr	r1, [pc, #704]	; (8002270 <OTM8009A_Init+0x340>)
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f004 fe99 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001fb6:	49a2      	ldr	r1, [pc, #648]	; (8002240 <OTM8009A_Init+0x310>)
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f004 fe95 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8001fbe:	49ad      	ldr	r1, [pc, #692]	; (8002274 <OTM8009A_Init+0x344>)
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f004 fe91 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001fc6:	49ac      	ldr	r1, [pc, #688]	; (8002278 <OTM8009A_Init+0x348>)
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f004 fe8d 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8001fce:	49ab      	ldr	r1, [pc, #684]	; (800227c <OTM8009A_Init+0x34c>)
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f004 fe89 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001fd6:	49aa      	ldr	r1, [pc, #680]	; (8002280 <OTM8009A_Init+0x350>)
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f004 fe85 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8001fde:	49a9      	ldr	r1, [pc, #676]	; (8002284 <OTM8009A_Init+0x354>)
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f004 fe81 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001fe6:	49a8      	ldr	r1, [pc, #672]	; (8002288 <OTM8009A_Init+0x358>)
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f004 fe7d 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8001fee:	49a7      	ldr	r1, [pc, #668]	; (800228c <OTM8009A_Init+0x35c>)
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f004 fe79 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001ff6:	49a6      	ldr	r1, [pc, #664]	; (8002290 <OTM8009A_Init+0x360>)
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f004 fe75 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001ffe:	499a      	ldr	r1, [pc, #616]	; (8002268 <OTM8009A_Init+0x338>)
 8002000:	2000      	movs	r0, #0
 8002002:	f004 fe71 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002006:	498e      	ldr	r1, [pc, #568]	; (8002240 <OTM8009A_Init+0x310>)
 8002008:	2000      	movs	r0, #0
 800200a:	f004 fe6d 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800200e:	49a1      	ldr	r1, [pc, #644]	; (8002294 <OTM8009A_Init+0x364>)
 8002010:	2002      	movs	r0, #2
 8002012:	f004 fe69 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8002016:	49a0      	ldr	r1, [pc, #640]	; (8002298 <OTM8009A_Init+0x368>)
 8002018:	2000      	movs	r0, #0
 800201a:	f004 fe65 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800201e:	499f      	ldr	r1, [pc, #636]	; (800229c <OTM8009A_Init+0x36c>)
 8002020:	2000      	movs	r0, #0
 8002022:	f004 fe61 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8002026:	499e      	ldr	r1, [pc, #632]	; (80022a0 <OTM8009A_Init+0x370>)
 8002028:	2000      	movs	r0, #0
 800202a:	f004 fe5d 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800202e:	499d      	ldr	r1, [pc, #628]	; (80022a4 <OTM8009A_Init+0x374>)
 8002030:	2000      	movs	r0, #0
 8002032:	f004 fe59 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8002036:	499c      	ldr	r1, [pc, #624]	; (80022a8 <OTM8009A_Init+0x378>)
 8002038:	2000      	movs	r0, #0
 800203a:	f004 fe55 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800203e:	499b      	ldr	r1, [pc, #620]	; (80022ac <OTM8009A_Init+0x37c>)
 8002040:	2000      	movs	r0, #0
 8002042:	f004 fe51 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002046:	498c      	ldr	r1, [pc, #560]	; (8002278 <OTM8009A_Init+0x348>)
 8002048:	2000      	movs	r0, #0
 800204a:	f004 fe4d 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800204e:	4998      	ldr	r1, [pc, #608]	; (80022b0 <OTM8009A_Init+0x380>)
 8002050:	2000      	movs	r0, #0
 8002052:	f004 fe49 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8002056:	498a      	ldr	r1, [pc, #552]	; (8002280 <OTM8009A_Init+0x350>)
 8002058:	2000      	movs	r0, #0
 800205a:	f004 fe45 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800205e:	4995      	ldr	r1, [pc, #596]	; (80022b4 <OTM8009A_Init+0x384>)
 8002060:	2000      	movs	r0, #0
 8002062:	f004 fe41 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8002066:	4994      	ldr	r1, [pc, #592]	; (80022b8 <OTM8009A_Init+0x388>)
 8002068:	2000      	movs	r0, #0
 800206a:	f004 fe3d 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800206e:	4993      	ldr	r1, [pc, #588]	; (80022bc <OTM8009A_Init+0x38c>)
 8002070:	2002      	movs	r0, #2
 8002072:	f004 fe39 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002076:	4974      	ldr	r1, [pc, #464]	; (8002248 <OTM8009A_Init+0x318>)
 8002078:	2000      	movs	r0, #0
 800207a:	f004 fe35 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800207e:	4990      	ldr	r1, [pc, #576]	; (80022c0 <OTM8009A_Init+0x390>)
 8002080:	2006      	movs	r0, #6
 8002082:	f004 fe31 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002086:	498f      	ldr	r1, [pc, #572]	; (80022c4 <OTM8009A_Init+0x394>)
 8002088:	2000      	movs	r0, #0
 800208a:	f004 fe2d 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800208e:	498e      	ldr	r1, [pc, #568]	; (80022c8 <OTM8009A_Init+0x398>)
 8002090:	200e      	movs	r0, #14
 8002092:	f004 fe29 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002096:	498d      	ldr	r1, [pc, #564]	; (80022cc <OTM8009A_Init+0x39c>)
 8002098:	2000      	movs	r0, #0
 800209a:	f004 fe25 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800209e:	498c      	ldr	r1, [pc, #560]	; (80022d0 <OTM8009A_Init+0x3a0>)
 80020a0:	200e      	movs	r0, #14
 80020a2:	f004 fe21 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80020a6:	498b      	ldr	r1, [pc, #556]	; (80022d4 <OTM8009A_Init+0x3a4>)
 80020a8:	2000      	movs	r0, #0
 80020aa:	f004 fe1d 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80020ae:	498a      	ldr	r1, [pc, #552]	; (80022d8 <OTM8009A_Init+0x3a8>)
 80020b0:	200a      	movs	r0, #10
 80020b2:	f004 fe19 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80020b6:	4989      	ldr	r1, [pc, #548]	; (80022dc <OTM8009A_Init+0x3ac>)
 80020b8:	2000      	movs	r0, #0
 80020ba:	f004 fe15 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80020be:	4988      	ldr	r1, [pc, #544]	; (80022e0 <OTM8009A_Init+0x3b0>)
 80020c0:	2000      	movs	r0, #0
 80020c2:	f004 fe11 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80020c6:	4960      	ldr	r1, [pc, #384]	; (8002248 <OTM8009A_Init+0x318>)
 80020c8:	2000      	movs	r0, #0
 80020ca:	f004 fe0d 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80020ce:	4985      	ldr	r1, [pc, #532]	; (80022e4 <OTM8009A_Init+0x3b4>)
 80020d0:	200a      	movs	r0, #10
 80020d2:	f004 fe09 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80020d6:	4984      	ldr	r1, [pc, #528]	; (80022e8 <OTM8009A_Init+0x3b8>)
 80020d8:	2000      	movs	r0, #0
 80020da:	f004 fe05 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80020de:	4983      	ldr	r1, [pc, #524]	; (80022ec <OTM8009A_Init+0x3bc>)
 80020e0:	200f      	movs	r0, #15
 80020e2:	f004 fe01 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80020e6:	4977      	ldr	r1, [pc, #476]	; (80022c4 <OTM8009A_Init+0x394>)
 80020e8:	2000      	movs	r0, #0
 80020ea:	f004 fdfd 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80020ee:	4980      	ldr	r1, [pc, #512]	; (80022f0 <OTM8009A_Init+0x3c0>)
 80020f0:	200f      	movs	r0, #15
 80020f2:	f004 fdf9 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80020f6:	4975      	ldr	r1, [pc, #468]	; (80022cc <OTM8009A_Init+0x39c>)
 80020f8:	2000      	movs	r0, #0
 80020fa:	f004 fdf5 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80020fe:	497d      	ldr	r1, [pc, #500]	; (80022f4 <OTM8009A_Init+0x3c4>)
 8002100:	200a      	movs	r0, #10
 8002102:	f004 fdf1 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002106:	4973      	ldr	r1, [pc, #460]	; (80022d4 <OTM8009A_Init+0x3a4>)
 8002108:	2000      	movs	r0, #0
 800210a:	f004 fded 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 800210e:	497a      	ldr	r1, [pc, #488]	; (80022f8 <OTM8009A_Init+0x3c8>)
 8002110:	200f      	movs	r0, #15
 8002112:	f004 fde9 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002116:	4971      	ldr	r1, [pc, #452]	; (80022dc <OTM8009A_Init+0x3ac>)
 8002118:	2000      	movs	r0, #0
 800211a:	f004 fde5 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 800211e:	4977      	ldr	r1, [pc, #476]	; (80022fc <OTM8009A_Init+0x3cc>)
 8002120:	200f      	movs	r0, #15
 8002122:	f004 fde1 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8002126:	4976      	ldr	r1, [pc, #472]	; (8002300 <OTM8009A_Init+0x3d0>)
 8002128:	2000      	movs	r0, #0
 800212a:	f004 fddd 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 800212e:	4975      	ldr	r1, [pc, #468]	; (8002304 <OTM8009A_Init+0x3d4>)
 8002130:	200a      	movs	r0, #10
 8002132:	f004 fdd9 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8002136:	4974      	ldr	r1, [pc, #464]	; (8002308 <OTM8009A_Init+0x3d8>)
 8002138:	2000      	movs	r0, #0
 800213a:	f004 fdd5 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800213e:	4973      	ldr	r1, [pc, #460]	; (800230c <OTM8009A_Init+0x3dc>)
 8002140:	200a      	movs	r0, #10
 8002142:	f004 fdd1 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002146:	4940      	ldr	r1, [pc, #256]	; (8002248 <OTM8009A_Init+0x318>)
 8002148:	2000      	movs	r0, #0
 800214a:	f004 fdcd 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800214e:	4970      	ldr	r1, [pc, #448]	; (8002310 <OTM8009A_Init+0x3e0>)
 8002150:	200a      	movs	r0, #10
 8002152:	f004 fdc9 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8002156:	4964      	ldr	r1, [pc, #400]	; (80022e8 <OTM8009A_Init+0x3b8>)
 8002158:	2000      	movs	r0, #0
 800215a:	f004 fdc5 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800215e:	496d      	ldr	r1, [pc, #436]	; (8002314 <OTM8009A_Init+0x3e4>)
 8002160:	200f      	movs	r0, #15
 8002162:	f004 fdc1 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002166:	4957      	ldr	r1, [pc, #348]	; (80022c4 <OTM8009A_Init+0x394>)
 8002168:	2000      	movs	r0, #0
 800216a:	f004 fdbd 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800216e:	496a      	ldr	r1, [pc, #424]	; (8002318 <OTM8009A_Init+0x3e8>)
 8002170:	200f      	movs	r0, #15
 8002172:	f004 fdb9 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002176:	4955      	ldr	r1, [pc, #340]	; (80022cc <OTM8009A_Init+0x39c>)
 8002178:	2000      	movs	r0, #0
 800217a:	f004 fdb5 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800217e:	4967      	ldr	r1, [pc, #412]	; (800231c <OTM8009A_Init+0x3ec>)
 8002180:	200a      	movs	r0, #10
 8002182:	f004 fdb1 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002186:	4953      	ldr	r1, [pc, #332]	; (80022d4 <OTM8009A_Init+0x3a4>)
 8002188:	2000      	movs	r0, #0
 800218a:	f004 fdad 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800218e:	4964      	ldr	r1, [pc, #400]	; (8002320 <OTM8009A_Init+0x3f0>)
 8002190:	200f      	movs	r0, #15
 8002192:	f004 fda9 	bl	8006ce8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002196:	4951      	ldr	r1, [pc, #324]	; (80022dc <OTM8009A_Init+0x3ac>)
 8002198:	2000      	movs	r0, #0
 800219a:	f004 fda5 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800219e:	4961      	ldr	r1, [pc, #388]	; (8002324 <OTM8009A_Init+0x3f4>)
 80021a0:	200f      	movs	r0, #15
 80021a2:	f004 fda1 	bl	8006ce8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80021a6:	4934      	ldr	r1, [pc, #208]	; (8002278 <OTM8009A_Init+0x348>)
 80021a8:	2000      	movs	r0, #0
 80021aa:	f004 fd9d 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80021ae:	495e      	ldr	r1, [pc, #376]	; (8002328 <OTM8009A_Init+0x3f8>)
 80021b0:	2000      	movs	r0, #0
 80021b2:	f004 fd99 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80021b6:	495d      	ldr	r1, [pc, #372]	; (800232c <OTM8009A_Init+0x3fc>)
 80021b8:	2000      	movs	r0, #0
 80021ba:	f004 fd95 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80021be:	495c      	ldr	r1, [pc, #368]	; (8002330 <OTM8009A_Init+0x400>)
 80021c0:	2000      	movs	r0, #0
 80021c2:	f004 fd91 	bl	8006ce8 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80021c6:	495b      	ldr	r1, [pc, #364]	; (8002334 <OTM8009A_Init+0x404>)
 80021c8:	2000      	movs	r0, #0
 80021ca:	f004 fd8d 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80021ce:	495a      	ldr	r1, [pc, #360]	; (8002338 <OTM8009A_Init+0x408>)
 80021d0:	2000      	movs	r0, #0
 80021d2:	f004 fd89 	bl	8006ce8 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80021d6:	491a      	ldr	r1, [pc, #104]	; (8002240 <OTM8009A_Init+0x310>)
 80021d8:	2000      	movs	r0, #0
 80021da:	f004 fd85 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80021de:	4957      	ldr	r1, [pc, #348]	; (800233c <OTM8009A_Init+0x40c>)
 80021e0:	2003      	movs	r0, #3
 80021e2:	f004 fd81 	bl	8006ce8 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80021e6:	4916      	ldr	r1, [pc, #88]	; (8002240 <OTM8009A_Init+0x310>)
 80021e8:	2000      	movs	r0, #0
 80021ea:	f004 fd7d 	bl	8006ce8 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80021ee:	4914      	ldr	r1, [pc, #80]	; (8002240 <OTM8009A_Init+0x310>)
 80021f0:	2000      	movs	r0, #0
 80021f2:	f004 fd79 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80021f6:	4952      	ldr	r1, [pc, #328]	; (8002340 <OTM8009A_Init+0x410>)
 80021f8:	2010      	movs	r0, #16
 80021fa:	f004 fd75 	bl	8006ce8 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80021fe:	4910      	ldr	r1, [pc, #64]	; (8002240 <OTM8009A_Init+0x310>)
 8002200:	2000      	movs	r0, #0
 8002202:	f004 fd71 	bl	8006ce8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8002206:	494f      	ldr	r1, [pc, #316]	; (8002344 <OTM8009A_Init+0x414>)
 8002208:	2010      	movs	r0, #16
 800220a:	f004 fd6d 	bl	8006ce8 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 800220e:	494e      	ldr	r1, [pc, #312]	; (8002348 <OTM8009A_Init+0x418>)
 8002210:	2000      	movs	r0, #0
 8002212:	f004 fd69 	bl	8006ce8 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  HAL_Delay(120);
 8002216:	2078      	movs	r0, #120	; 0x78
 8002218:	f000 f932 	bl	8002480 <HAL_Delay>

  switch(ColorCoding)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <OTM8009A_Init+0x304>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b02      	cmp	r3, #2
 8002226:	f040 8095 	bne.w	8002354 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800222a:	4948      	ldr	r1, [pc, #288]	; (800234c <OTM8009A_Init+0x41c>)
 800222c:	2000      	movs	r0, #0
 800222e:	f004 fd5b 	bl	8006ce8 <DSI_IO_WriteCmd>
    break;
 8002232:	e090      	b.n	8002356 <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8002234:	4946      	ldr	r1, [pc, #280]	; (8002350 <OTM8009A_Init+0x420>)
 8002236:	2000      	movs	r0, #0
 8002238:	f004 fd56 	bl	8006ce8 <DSI_IO_WriteCmd>
    break;
 800223c:	e08b      	b.n	8002356 <OTM8009A_Init+0x426>
 800223e:	bf00      	nop
 8002240:	08009dcc 	.word	0x08009dcc
 8002244:	08009c84 	.word	0x08009c84
 8002248:	08009dd0 	.word	0x08009dd0
 800224c:	08009c88 	.word	0x08009c88
 8002250:	08009dd4 	.word	0x08009dd4
 8002254:	08009dd8 	.word	0x08009dd8
 8002258:	08009ddc 	.word	0x08009ddc
 800225c:	08009de0 	.word	0x08009de0
 8002260:	08009de4 	.word	0x08009de4
 8002264:	08009de8 	.word	0x08009de8
 8002268:	08009dec 	.word	0x08009dec
 800226c:	08009df0 	.word	0x08009df0
 8002270:	08009df4 	.word	0x08009df4
 8002274:	08009df8 	.word	0x08009df8
 8002278:	08009dfc 	.word	0x08009dfc
 800227c:	08009e00 	.word	0x08009e00
 8002280:	08009e04 	.word	0x08009e04
 8002284:	08009e08 	.word	0x08009e08
 8002288:	08009e0c 	.word	0x08009e0c
 800228c:	08009e10 	.word	0x08009e10
 8002290:	08009e14 	.word	0x08009e14
 8002294:	08009cb4 	.word	0x08009cb4
 8002298:	08009e18 	.word	0x08009e18
 800229c:	08009e1c 	.word	0x08009e1c
 80022a0:	08009e20 	.word	0x08009e20
 80022a4:	08009e24 	.word	0x08009e24
 80022a8:	08009e28 	.word	0x08009e28
 80022ac:	08009e2c 	.word	0x08009e2c
 80022b0:	08009e30 	.word	0x08009e30
 80022b4:	08009e34 	.word	0x08009e34
 80022b8:	08009e38 	.word	0x08009e38
 80022bc:	08009cb8 	.word	0x08009cb8
 80022c0:	08009cbc 	.word	0x08009cbc
 80022c4:	08009e3c 	.word	0x08009e3c
 80022c8:	08009cc4 	.word	0x08009cc4
 80022cc:	08009e40 	.word	0x08009e40
 80022d0:	08009cd4 	.word	0x08009cd4
 80022d4:	08009e44 	.word	0x08009e44
 80022d8:	08009ce4 	.word	0x08009ce4
 80022dc:	08009e48 	.word	0x08009e48
 80022e0:	08009e80 	.word	0x08009e80
 80022e4:	08009cf0 	.word	0x08009cf0
 80022e8:	08009e4c 	.word	0x08009e4c
 80022ec:	08009cfc 	.word	0x08009cfc
 80022f0:	08009d0c 	.word	0x08009d0c
 80022f4:	08009d1c 	.word	0x08009d1c
 80022f8:	08009d28 	.word	0x08009d28
 80022fc:	08009d38 	.word	0x08009d38
 8002300:	08009e50 	.word	0x08009e50
 8002304:	08009d48 	.word	0x08009d48
 8002308:	08009e54 	.word	0x08009e54
 800230c:	08009d54 	.word	0x08009d54
 8002310:	08009d60 	.word	0x08009d60
 8002314:	08009d6c 	.word	0x08009d6c
 8002318:	08009d7c 	.word	0x08009d7c
 800231c:	08009d8c 	.word	0x08009d8c
 8002320:	08009d98 	.word	0x08009d98
 8002324:	08009da8 	.word	0x08009da8
 8002328:	08009e84 	.word	0x08009e84
 800232c:	08009e88 	.word	0x08009e88
 8002330:	08009e8c 	.word	0x08009e8c
 8002334:	08009e90 	.word	0x08009e90
 8002338:	08009e94 	.word	0x08009e94
 800233c:	08009db8 	.word	0x08009db8
 8002340:	08009c8c 	.word	0x08009c8c
 8002344:	08009ca0 	.word	0x08009ca0
 8002348:	08009e58 	.word	0x08009e58
 800234c:	08009e5c 	.word	0x08009e5c
 8002350:	08009e60 	.word	0x08009e60
  default :
    break;
 8002354:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d10b      	bne.n	8002374 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 800235c:	4916      	ldr	r1, [pc, #88]	; (80023b8 <OTM8009A_Init+0x488>)
 800235e:	2000      	movs	r0, #0
 8002360:	f004 fcc2 	bl	8006ce8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8002364:	4915      	ldr	r1, [pc, #84]	; (80023bc <OTM8009A_Init+0x48c>)
 8002366:	2004      	movs	r0, #4
 8002368:	f004 fcbe 	bl	8006ce8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 800236c:	4914      	ldr	r1, [pc, #80]	; (80023c0 <OTM8009A_Init+0x490>)
 800236e:	2004      	movs	r0, #4
 8002370:	f004 fcba 	bl	8006ce8 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8002374:	4913      	ldr	r1, [pc, #76]	; (80023c4 <OTM8009A_Init+0x494>)
 8002376:	2000      	movs	r0, #0
 8002378:	f004 fcb6 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 800237c:	4912      	ldr	r1, [pc, #72]	; (80023c8 <OTM8009A_Init+0x498>)
 800237e:	2000      	movs	r0, #0
 8002380:	f004 fcb2 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8002384:	4911      	ldr	r1, [pc, #68]	; (80023cc <OTM8009A_Init+0x49c>)
 8002386:	2000      	movs	r0, #0
 8002388:	f004 fcae 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 800238c:	4910      	ldr	r1, [pc, #64]	; (80023d0 <OTM8009A_Init+0x4a0>)
 800238e:	2000      	movs	r0, #0
 8002390:	f004 fcaa 	bl	8006ce8 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002394:	490f      	ldr	r1, [pc, #60]	; (80023d4 <OTM8009A_Init+0x4a4>)
 8002396:	2000      	movs	r0, #0
 8002398:	f004 fca6 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800239c:	490e      	ldr	r1, [pc, #56]	; (80023d8 <OTM8009A_Init+0x4a8>)
 800239e:	2000      	movs	r0, #0
 80023a0:	f004 fca2 	bl	8006ce8 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80023a4:	490d      	ldr	r1, [pc, #52]	; (80023dc <OTM8009A_Init+0x4ac>)
 80023a6:	2000      	movs	r0, #0
 80023a8:	f004 fc9e 	bl	8006ce8 <DSI_IO_WriteCmd>

  return 0;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	08009e64 	.word	0x08009e64
 80023bc:	08009dbc 	.word	0x08009dbc
 80023c0:	08009dc4 	.word	0x08009dc4
 80023c4:	08009e68 	.word	0x08009e68
 80023c8:	08009e6c 	.word	0x08009e6c
 80023cc:	08009e70 	.word	0x08009e70
 80023d0:	08009e74 	.word	0x08009e74
 80023d4:	08009e78 	.word	0x08009e78
 80023d8:	08009dcc 	.word	0x08009dcc
 80023dc:	08009e7c 	.word	0x08009e7c

080023e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_InitTick+0x54>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_InitTick+0x58>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f999 	bl	8002736 <HAL_SYSTICK_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e00e      	b.n	800242c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b0f      	cmp	r3, #15
 8002412:	d80a      	bhi.n	800242a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002414:	2200      	movs	r2, #0
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	f04f 30ff 	mov.w	r0, #4294967295
 800241c:	f000 f953 	bl	80026c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002420:	4a06      	ldr	r2, [pc, #24]	; (800243c <HAL_InitTick+0x5c>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000000 	.word	0x20000000
 8002438:	20000008 	.word	0x20000008
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_IncTick+0x20>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x24>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_IncTick+0x24>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000008 	.word	0x20000008
 8002464:	200003f0 	.word	0x200003f0

08002468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_GetTick+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	200003f0 	.word	0x200003f0

08002480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff ffee 	bl	8002468 <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d005      	beq.n	80024a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_Delay+0x44>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024a6:	bf00      	nop
 80024a8:	f7ff ffde 	bl	8002468 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f7      	bhi.n	80024a8 <HAL_Delay+0x28>
  {
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000008 	.word	0x20000008

080024c8 <__NVIC_SetPriorityGrouping>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <__NVIC_SetPriorityGrouping+0x40>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f6:	4a04      	ldr	r2, [pc, #16]	; (8002508 <__NVIC_SetPriorityGrouping+0x40>)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	60d3      	str	r3, [r2, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00
 800250c:	05fa0000 	.word	0x05fa0000

08002510 <__NVIC_GetPriorityGrouping>:
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4907      	ldr	r1, [pc, #28]	; (8002564 <__NVIC_EnableIRQ+0x38>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_DisableIRQ>:
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db12      	blt.n	80025a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	490a      	ldr	r1, [pc, #40]	; (80025ac <__NVIC_DisableIRQ+0x44>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	3320      	adds	r3, #32
 8002590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002594:	f3bf 8f4f 	dsb	sy
}
 8002598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800259a:	f3bf 8f6f 	isb	sy
}
 800259e:	bf00      	nop
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100

080025b0 <__NVIC_SetPriority>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	db0a      	blt.n	80025da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	490c      	ldr	r1, [pc, #48]	; (80025fc <__NVIC_SetPriority+0x4c>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	0112      	lsls	r2, r2, #4
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	440b      	add	r3, r1
 80025d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025d8:	e00a      	b.n	80025f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4908      	ldr	r1, [pc, #32]	; (8002600 <__NVIC_SetPriority+0x50>)
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	3b04      	subs	r3, #4
 80025e8:	0112      	lsls	r2, r2, #4
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	440b      	add	r3, r1
 80025ee:	761a      	strb	r2, [r3, #24]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000e100 	.word	0xe000e100
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <NVIC_EncodePriority>:
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f1c3 0307 	rsb	r3, r3, #7
 800261e:	2b04      	cmp	r3, #4
 8002620:	bf28      	it	cs
 8002622:	2304      	movcs	r3, #4
 8002624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3304      	adds	r3, #4
 800262a:	2b06      	cmp	r3, #6
 800262c:	d902      	bls.n	8002634 <NVIC_EncodePriority+0x30>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3b03      	subs	r3, #3
 8002632:	e000      	b.n	8002636 <NVIC_EncodePriority+0x32>
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	401a      	ands	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800264c:	f04f 31ff 	mov.w	r1, #4294967295
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	43d9      	mvns	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	4313      	orrs	r3, r2
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	; 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800267c:	d301      	bcc.n	8002682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800267e:	2301      	movs	r3, #1
 8002680:	e00f      	b.n	80026a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <SysTick_Config+0x40>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268a:	210f      	movs	r1, #15
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f7ff ff8e 	bl	80025b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <SysTick_Config+0x40>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <SysTick_Config+0x40>)
 800269c:	2207      	movs	r2, #7
 800269e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	e000e010 	.word	0xe000e010

080026b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff05 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d8:	f7ff ff1a 	bl	8002510 <__NVIC_GetPriorityGrouping>
 80026dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	6978      	ldr	r0, [r7, #20]
 80026e4:	f7ff ff8e 	bl	8002604 <NVIC_EncodePriority>
 80026e8:	4602      	mov	r2, r0
 80026ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff5d 	bl	80025b0 <__NVIC_SetPriority>
}
 80026f6:	bf00      	nop
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff0d 	bl	800252c <__NVIC_EnableIRQ>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff1d 	bl	8002568 <__NVIC_DisableIRQ>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ff94 	bl	800266c <SysTick_Config>
 8002744:	4603      	mov	r3, r0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	019a      	lsls	r2, r3, #6
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	431a      	orrs	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	431a      	orrs	r2, r3
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	431a      	orrs	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800278e:	f7ff fe6b 	bl	8002468 <HAL_GetTick>
 8002792:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002794:	e009      	b.n	80027aa <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8002796:	f7ff fe67 	bl	8002468 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a4:	d901      	bls.n	80027aa <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e015      	b.n	80027d6 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ee      	beq.n	8002796 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	019a      	lsls	r2, r3, #6
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	431a      	orrs	r2, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	ea42 0103 	orr.w	r1, r2, r3
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	041a      	lsls	r2, r3, #16
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e106      	b.n	8002a02 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	7c5b      	ldrb	r3, [r3, #17]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f97c 	bl	8002afc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2203      	movs	r2, #3
 8002808:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800281e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800282a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002832:	f7ff fe19 	bl	8002468 <HAL_GetTick>
 8002836:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002838:	e009      	b.n	800284e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800283a:	f7ff fe15 	bl	8002468 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002848:	d901      	bls.n	800284e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0d9      	b.n	8002a02 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0ed      	beq.n	800283a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <HAL_DSI_Init+0x22c>)
 800286c:	400b      	ands	r3, r1
 800286e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	009a      	lsls	r2, r3, #2
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	02db      	lsls	r3, r3, #11
 8002886:	431a      	orrs	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c2:	f7ff fdd1 	bl	8002468 <HAL_GetTick>
 80028c6:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80028c8:	e009      	b.n	80028de <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80028ca:	f7ff fdcd 	bl	8002468 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d8:	d901      	bls.n	80028de <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e091      	b.n	8002a02 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0ed      	beq.n	80028ca <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0206 	orr.w	r2, r2, #6
 80028fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0203 	bic.w	r2, r2, #3
 8002912:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0203 	bic.w	r2, r2, #3
 8002940:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002968:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6899      	ldr	r1, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_DSI_Init+0x1aa>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	e000      	b.n	800298c <HAL_DSI_Init+0x1ac>
 800298a:	2301      	movs	r3, #1
 800298c:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <HAL_DSI_Init+0x230>)
 8002992:	fb02 f203 	mul.w	r2, r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	409a      	lsls	r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80029c2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3720      	adds	r7, #32
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	fffc8603 	.word	0xfffc8603
 8002a10:	003d0900 	.word	0x003d0900

08002a14 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e066      	b.n	8002af4 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2203      	movs	r2, #3
 8002a2a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0208 	bic.w	r2, r2, #8
 8002a40:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0206 	bic.w	r2, r2, #6
 8002a86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002ac6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f818 	bl	8002b10 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7c1b      	ldrb	r3, [r3, #16]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_DSI_ConfigVideoMode+0x16>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e1ee      	b.n	8002f18 <HAL_DSI_ConfigVideoMode+0x3f4>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0203 	bic.w	r2, r2, #3
 8002b72:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b8b      	ldr	r3, [pc, #556]	; (8002dc0 <HAL_DSI_ConfigVideoMode+0x29c>)
 8002b92:	400b      	ands	r3, r1
 8002b94:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b84      	ldr	r3, [pc, #528]	; (8002dc4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b7b      	ldr	r3, [pc, #492]	; (8002dc4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8002bd6:	400b      	ands	r3, r1
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0203 	bic.w	r2, r2, #3
 8002bfa:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68d9      	ldr	r1, [r3, #12]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0207 	bic.w	r2, r2, #7
 8002c1c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6959      	ldr	r1, [r3, #20]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 020f 	bic.w	r2, r2, #15
 8002c4a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6919      	ldr	r1, [r3, #16]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 020e 	bic.w	r2, r2, #14
 8002c6e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	005a      	lsls	r2, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d110      	bne.n	8002cb4 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ca0:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6919      	ldr	r1, [r3, #16]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4b42      	ldr	r3, [pc, #264]	; (8002dc8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8002cc0:	400b      	ands	r3, r1
 8002cc2:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <HAL_DSI_ConfigVideoMode+0x2a8>)
 8002d04:	400b      	ands	r3, r1
 8002d06:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002d26:	400b      	ands	r3, r1
 8002d28:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002d48:	400b      	ands	r3, r1
 8002d4a:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002d6a:	400b      	ands	r3, r1
 8002d6c:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_DSI_ConfigVideoMode+0x29c>)
 8002d8c:	400b      	ands	r3, r1
 8002d8e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dbc:	e00a      	b.n	8002dd4 <HAL_DSI_ConfigVideoMode+0x2b0>
 8002dbe:	bf00      	nop
 8002dc0:	ffffc000 	.word	0xffffc000
 8002dc4:	ffffe000 	.word	0xffffe000
 8002dc8:	fffff000 	.word	0xfffff000
 8002dcc:	ffff8000 	.word	0xffff8000
 8002dd0:	fffffc00 	.word	0xfffffc00
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002dea:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6999      	ldr	r1, [r3, #24]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df6:	041a      	lsls	r2, r3, #16
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e0e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6999      	ldr	r1, [r3, #24]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eda:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7c1b      	ldrb	r3, [r3, #16]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_DSI_Start+0x14>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e02b      	b.n	8002f90 <HAL_DSI_Start+0x6c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0208 	orr.w	r2, r2, #8
 8002f74:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7c1b      	ldrb	r3, [r3, #16]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_DSI_Stop+0x14>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e02b      	b.n	8003008 <HAL_DSI_Stop+0x6c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0201 	bic.w	r2, r2, #1
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0208 	bic.w	r2, r2, #8
 8002fec:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	7c1b      	ldrb	r3, [r3, #16]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_DSI_ShortWrite+0x1a>
 800302a:	2302      	movs	r3, #2
 800302c:	e010      	b.n	8003050 <HAL_DSI_ShortWrite+0x3c>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff fb9e 	bl	8002780 <DSI_ShortWrite>
 8003044:	4603      	mov	r3, r0
 8003046:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	741a      	strb	r2, [r3, #16]

  return status;
 800304e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08c      	sub	sp, #48	; 0x30
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003068:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	7c1b      	ldrb	r3, [r3, #16]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_DSI_LongWrite+0x1e>
 8003072:	2302      	movs	r3, #2
 8003074:	e084      	b.n	8003180 <HAL_DSI_LongWrite+0x128>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800307c:	f7ff f9f4 	bl	8002468 <HAL_GetTick>
 8003080:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003082:	e00c      	b.n	800309e <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003084:	f7ff f9f0 	bl	8002468 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003092:	d904      	bls.n	800309e <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e070      	b.n	8003180 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0eb      	beq.n	8003084 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	bf28      	it	cs
 80030b6:	2303      	movcs	r3, #3
 80030b8:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
 80030be:	e00f      	b.n	80030e0 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	4413      	add	r3, r2
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	3301      	adds	r3, #1
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	3301      	adds	r3, #1
 80030de:	623b      	str	r3, [r7, #32]
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d3eb      	bcc.n	80030c0 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4413      	add	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003100:	e028      	b.n	8003154 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	2b04      	cmp	r3, #4
 8003106:	bf28      	it	cs
 8003108:	2304      	movcs	r3, #4
 800310a:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003110:	2300      	movs	r3, #0
 8003112:	623b      	str	r3, [r7, #32]
 8003114:	e00e      	b.n	8003134 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	4313      	orrs	r3, r2
 800312c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	3301      	adds	r3, #1
 8003132:	623b      	str	r3, [r7, #32]
 8003134:	6a3a      	ldr	r2, [r7, #32]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d3ec      	bcc.n	8003116 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1d3      	bne.n	8003102 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003162:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	3301      	adds	r3, #1
 8003168:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800316a:	b2db      	uxtb	r3, r3
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	4613      	mov	r3, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	f7ff faeb 	bl	800274e <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3728      	adds	r7, #40	; 0x28
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	; 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e175      	b.n	8003494 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031a8:	2201      	movs	r2, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f040 8164 	bne.w	800348e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d00b      	beq.n	80031e6 <HAL_GPIO_Init+0x5e>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d007      	beq.n	80031e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031da:	2b11      	cmp	r3, #17
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b12      	cmp	r3, #18
 80031e4:	d130      	bne.n	8003248 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	2203      	movs	r2, #3
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800321c:	2201      	movs	r2, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 0201 	and.w	r2, r3, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2203      	movs	r2, #3
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x100>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b12      	cmp	r3, #18
 8003286:	d123      	bne.n	80032d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	220f      	movs	r2, #15
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	08da      	lsrs	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	69b9      	ldr	r1, [r7, #24]
 80032cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80be 	beq.w	800348e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003312:	4b66      	ldr	r3, [pc, #408]	; (80034ac <HAL_GPIO_Init+0x324>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	4a65      	ldr	r2, [pc, #404]	; (80034ac <HAL_GPIO_Init+0x324>)
 8003318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800331c:	6453      	str	r3, [r2, #68]	; 0x44
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_GPIO_Init+0x324>)
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800332a:	4a61      	ldr	r2, [pc, #388]	; (80034b0 <HAL_GPIO_Init+0x328>)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	3302      	adds	r3, #2
 8003332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	220f      	movs	r2, #15
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a58      	ldr	r2, [pc, #352]	; (80034b4 <HAL_GPIO_Init+0x32c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d037      	beq.n	80033c6 <HAL_GPIO_Init+0x23e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a57      	ldr	r2, [pc, #348]	; (80034b8 <HAL_GPIO_Init+0x330>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d031      	beq.n	80033c2 <HAL_GPIO_Init+0x23a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a56      	ldr	r2, [pc, #344]	; (80034bc <HAL_GPIO_Init+0x334>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d02b      	beq.n	80033be <HAL_GPIO_Init+0x236>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a55      	ldr	r2, [pc, #340]	; (80034c0 <HAL_GPIO_Init+0x338>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d025      	beq.n	80033ba <HAL_GPIO_Init+0x232>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a54      	ldr	r2, [pc, #336]	; (80034c4 <HAL_GPIO_Init+0x33c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01f      	beq.n	80033b6 <HAL_GPIO_Init+0x22e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a53      	ldr	r2, [pc, #332]	; (80034c8 <HAL_GPIO_Init+0x340>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d019      	beq.n	80033b2 <HAL_GPIO_Init+0x22a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a52      	ldr	r2, [pc, #328]	; (80034cc <HAL_GPIO_Init+0x344>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_GPIO_Init+0x226>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a51      	ldr	r2, [pc, #324]	; (80034d0 <HAL_GPIO_Init+0x348>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00d      	beq.n	80033aa <HAL_GPIO_Init+0x222>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a50      	ldr	r2, [pc, #320]	; (80034d4 <HAL_GPIO_Init+0x34c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <HAL_GPIO_Init+0x21e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4f      	ldr	r2, [pc, #316]	; (80034d8 <HAL_GPIO_Init+0x350>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_GPIO_Init+0x21a>
 800339e:	2309      	movs	r3, #9
 80033a0:	e012      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033a2:	230a      	movs	r3, #10
 80033a4:	e010      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033a6:	2308      	movs	r3, #8
 80033a8:	e00e      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033aa:	2307      	movs	r3, #7
 80033ac:	e00c      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033ae:	2306      	movs	r3, #6
 80033b0:	e00a      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033b2:	2305      	movs	r3, #5
 80033b4:	e008      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033b6:	2304      	movs	r3, #4
 80033b8:	e006      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033ba:	2303      	movs	r3, #3
 80033bc:	e004      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033be:	2302      	movs	r3, #2
 80033c0:	e002      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033c6:	2300      	movs	r3, #0
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	f002 0203 	and.w	r2, r2, #3
 80033ce:	0092      	lsls	r2, r2, #2
 80033d0:	4093      	lsls	r3, r2
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033d8:	4935      	ldr	r1, [pc, #212]	; (80034b0 <HAL_GPIO_Init+0x328>)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	089b      	lsrs	r3, r3, #2
 80033de:	3302      	adds	r3, #2
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033e6:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <HAL_GPIO_Init+0x354>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800340a:	4a34      	ldr	r2, [pc, #208]	; (80034dc <HAL_GPIO_Init+0x354>)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003410:	4b32      	ldr	r3, [pc, #200]	; (80034dc <HAL_GPIO_Init+0x354>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003434:	4a29      	ldr	r2, [pc, #164]	; (80034dc <HAL_GPIO_Init+0x354>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800343a:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_GPIO_Init+0x354>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800345e:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <HAL_GPIO_Init+0x354>)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003464:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_GPIO_Init+0x354>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003488:	4a14      	ldr	r2, [pc, #80]	; (80034dc <HAL_GPIO_Init+0x354>)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3301      	adds	r3, #1
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	2b0f      	cmp	r3, #15
 8003498:	f67f ae86 	bls.w	80031a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3724      	adds	r7, #36	; 0x24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40013800 	.word	0x40013800
 80034b4:	40020000 	.word	0x40020000
 80034b8:	40020400 	.word	0x40020400
 80034bc:	40020800 	.word	0x40020800
 80034c0:	40020c00 	.word	0x40020c00
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40021400 	.word	0x40021400
 80034cc:	40021800 	.word	0x40021800
 80034d0:	40021c00 	.word	0x40021c00
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40022400 	.word	0x40022400
 80034dc:	40013c00 	.word	0x40013c00

080034e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	e0d9      	b.n	80036b0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80034fc:	2201      	movs	r2, #1
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	429a      	cmp	r2, r3
 8003514:	f040 80c9 	bne.w	80036aa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003518:	4a6b      	ldr	r2, [pc, #428]	; (80036c8 <HAL_GPIO_DeInit+0x1e8>)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	3302      	adds	r3, #2
 8003520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003524:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	220f      	movs	r2, #15
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	4013      	ands	r3, r2
 8003538:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a63      	ldr	r2, [pc, #396]	; (80036cc <HAL_GPIO_DeInit+0x1ec>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d037      	beq.n	80035b2 <HAL_GPIO_DeInit+0xd2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a62      	ldr	r2, [pc, #392]	; (80036d0 <HAL_GPIO_DeInit+0x1f0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d031      	beq.n	80035ae <HAL_GPIO_DeInit+0xce>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a61      	ldr	r2, [pc, #388]	; (80036d4 <HAL_GPIO_DeInit+0x1f4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02b      	beq.n	80035aa <HAL_GPIO_DeInit+0xca>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a60      	ldr	r2, [pc, #384]	; (80036d8 <HAL_GPIO_DeInit+0x1f8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d025      	beq.n	80035a6 <HAL_GPIO_DeInit+0xc6>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a5f      	ldr	r2, [pc, #380]	; (80036dc <HAL_GPIO_DeInit+0x1fc>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01f      	beq.n	80035a2 <HAL_GPIO_DeInit+0xc2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a5e      	ldr	r2, [pc, #376]	; (80036e0 <HAL_GPIO_DeInit+0x200>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d019      	beq.n	800359e <HAL_GPIO_DeInit+0xbe>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a5d      	ldr	r2, [pc, #372]	; (80036e4 <HAL_GPIO_DeInit+0x204>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_GPIO_DeInit+0xba>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a5c      	ldr	r2, [pc, #368]	; (80036e8 <HAL_GPIO_DeInit+0x208>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00d      	beq.n	8003596 <HAL_GPIO_DeInit+0xb6>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a5b      	ldr	r2, [pc, #364]	; (80036ec <HAL_GPIO_DeInit+0x20c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d007      	beq.n	8003592 <HAL_GPIO_DeInit+0xb2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a5a      	ldr	r2, [pc, #360]	; (80036f0 <HAL_GPIO_DeInit+0x210>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <HAL_GPIO_DeInit+0xae>
 800358a:	2309      	movs	r3, #9
 800358c:	e012      	b.n	80035b4 <HAL_GPIO_DeInit+0xd4>
 800358e:	230a      	movs	r3, #10
 8003590:	e010      	b.n	80035b4 <HAL_GPIO_DeInit+0xd4>
 8003592:	2308      	movs	r3, #8
 8003594:	e00e      	b.n	80035b4 <HAL_GPIO_DeInit+0xd4>
 8003596:	2307      	movs	r3, #7
 8003598:	e00c      	b.n	80035b4 <HAL_GPIO_DeInit+0xd4>
 800359a:	2306      	movs	r3, #6
 800359c:	e00a      	b.n	80035b4 <HAL_GPIO_DeInit+0xd4>
 800359e:	2305      	movs	r3, #5
 80035a0:	e008      	b.n	80035b4 <HAL_GPIO_DeInit+0xd4>
 80035a2:	2304      	movs	r3, #4
 80035a4:	e006      	b.n	80035b4 <HAL_GPIO_DeInit+0xd4>
 80035a6:	2303      	movs	r3, #3
 80035a8:	e004      	b.n	80035b4 <HAL_GPIO_DeInit+0xd4>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e002      	b.n	80035b4 <HAL_GPIO_DeInit+0xd4>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_GPIO_DeInit+0xd4>
 80035b2:	2300      	movs	r3, #0
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	f002 0203 	and.w	r2, r2, #3
 80035ba:	0092      	lsls	r2, r2, #2
 80035bc:	4093      	lsls	r3, r2
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d132      	bne.n	800362a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80035c4:	4b4b      	ldr	r3, [pc, #300]	; (80036f4 <HAL_GPIO_DeInit+0x214>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	4949      	ldr	r1, [pc, #292]	; (80036f4 <HAL_GPIO_DeInit+0x214>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80035d2:	4b48      	ldr	r3, [pc, #288]	; (80036f4 <HAL_GPIO_DeInit+0x214>)
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	43db      	mvns	r3, r3
 80035da:	4946      	ldr	r1, [pc, #280]	; (80036f4 <HAL_GPIO_DeInit+0x214>)
 80035dc:	4013      	ands	r3, r2
 80035de:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80035e0:	4b44      	ldr	r3, [pc, #272]	; (80036f4 <HAL_GPIO_DeInit+0x214>)
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	4942      	ldr	r1, [pc, #264]	; (80036f4 <HAL_GPIO_DeInit+0x214>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80035ee:	4b41      	ldr	r3, [pc, #260]	; (80036f4 <HAL_GPIO_DeInit+0x214>)
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	493f      	ldr	r1, [pc, #252]	; (80036f4 <HAL_GPIO_DeInit+0x214>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	220f      	movs	r2, #15
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800360c:	4a2e      	ldr	r2, [pc, #184]	; (80036c8 <HAL_GPIO_DeInit+0x1e8>)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	089b      	lsrs	r3, r3, #2
 8003612:	3302      	adds	r3, #2
 8003614:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	43da      	mvns	r2, r3
 800361c:	482a      	ldr	r0, [pc, #168]	; (80036c8 <HAL_GPIO_DeInit+0x1e8>)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	400a      	ands	r2, r1
 8003624:	3302      	adds	r3, #2
 8003626:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	2103      	movs	r1, #3
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	401a      	ands	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	08da      	lsrs	r2, r3, #3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3208      	adds	r2, #8
 8003648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	220f      	movs	r2, #15
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	08d2      	lsrs	r2, r2, #3
 8003660:	4019      	ands	r1, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3208      	adds	r2, #8
 8003666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2103      	movs	r1, #3
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	401a      	ands	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	2101      	movs	r1, #1
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	fa01 f303 	lsl.w	r3, r1, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	401a      	ands	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	2103      	movs	r1, #3
 800369e:	fa01 f303 	lsl.w	r3, r1, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	401a      	ands	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	3301      	adds	r3, #1
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2b0f      	cmp	r3, #15
 80036b4:	f67f af22 	bls.w	80034fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40013800 	.word	0x40013800
 80036cc:	40020000 	.word	0x40020000
 80036d0:	40020400 	.word	0x40020400
 80036d4:	40020800 	.word	0x40020800
 80036d8:	40020c00 	.word	0x40020c00
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40021400 	.word	0x40021400
 80036e4:	40021800 	.word	0x40021800
 80036e8:	40021c00 	.word	0x40021c00
 80036ec:	40022000 	.word	0x40022000
 80036f0:	40022400 	.word	0x40022400
 80036f4:	40013c00 	.word	0x40013c00

080036f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003714:	e003      	b.n	800371e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003716:	887b      	ldrh	r3, [r7, #2]
 8003718:	041a      	lsls	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	619a      	str	r2, [r3, #24]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0bf      	b.n	80038be <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8d2 	bl	80038fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800376e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6999      	ldr	r1, [r3, #24]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003784:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6899      	ldr	r1, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4b4a      	ldr	r3, [pc, #296]	; (80038c8 <HAL_LTDC_Init+0x19c>)
 80037a0:	400b      	ands	r3, r1
 80037a2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	041b      	lsls	r3, r3, #16
 80037aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6899      	ldr	r1, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68d9      	ldr	r1, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b3e      	ldr	r3, [pc, #248]	; (80038c8 <HAL_LTDC_Init+0x19c>)
 80037ce:	400b      	ands	r3, r1
 80037d0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68d9      	ldr	r1, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6919      	ldr	r1, [r3, #16]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <HAL_LTDC_Init+0x19c>)
 80037fc:	400b      	ands	r3, r1
 80037fe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6919      	ldr	r1, [r3, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6959      	ldr	r1, [r3, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <HAL_LTDC_Init+0x19c>)
 800382a:	400b      	ands	r3, r1
 800382c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6959      	ldr	r1, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800385c:	041b      	lsls	r3, r3, #16
 800385e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0206 	orr.w	r2, r2, #6
 800389a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	f000f800 	.word	0xf000f800

080038cc <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f81b 	bl	8003910 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003924:	b5b0      	push	{r4, r5, r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_LTDC_ConfigLayer+0x1a>
 800393a:	2302      	movs	r3, #2
 800393c:	e02c      	b.n	8003998 <HAL_LTDC_ConfigLayer+0x74>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2134      	movs	r1, #52	; 0x34
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	4614      	mov	r4, r2
 8003962:	461d      	mov	r5, r3
 8003964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800396a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800396c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800396e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f847 	bl	8003a0c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2201      	movs	r2, #1
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bdb0      	pop	{r4, r5, r7, pc}

080039a0 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_LTDC_SetAddress+0x1a>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e024      	b.n	8003a04 <HAL_LTDC_SetAddress+0x64>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2234      	movs	r2, #52	; 0x34
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	3338      	adds	r3, #56	; 0x38
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6979      	ldr	r1, [r7, #20]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f811 	bl	8003a0c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b089      	sub	sp, #36	; 0x24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	0c1b      	lsrs	r3, r3, #16
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	4413      	add	r3, r2
 8003a2a:	041b      	lsls	r3, r3, #16
 8003a2c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	01db      	lsls	r3, r3, #7
 8003a38:	4413      	add	r3, r2
 8003a3a:	3384      	adds	r3, #132	; 0x84
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	4611      	mov	r1, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	01d2      	lsls	r2, r2, #7
 8003a48:	440a      	add	r2, r1
 8003a4a:	3284      	adds	r2, #132	; 0x84
 8003a4c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003a50:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a62:	4413      	add	r3, r2
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	01db      	lsls	r3, r3, #7
 8003a70:	440b      	add	r3, r1
 8003a72:	3384      	adds	r3, #132	; 0x84
 8003a74:	4619      	mov	r1, r3
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a8a:	4413      	add	r3, r2
 8003a8c:	041b      	lsls	r3, r3, #16
 8003a8e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	01db      	lsls	r3, r3, #7
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3384      	adds	r3, #132	; 0x84
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	01d2      	lsls	r2, r2, #7
 8003aaa:	440a      	add	r2, r1
 8003aac:	3284      	adds	r2, #132	; 0x84
 8003aae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ab2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ac2:	4413      	add	r3, r2
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4619      	mov	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	01db      	lsls	r3, r3, #7
 8003ad0:	440b      	add	r3, r1
 8003ad2:	3384      	adds	r3, #132	; 0x84
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	01db      	lsls	r3, r3, #7
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3384      	adds	r3, #132	; 0x84
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	4611      	mov	r1, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	01d2      	lsls	r2, r2, #7
 8003af6:	440a      	add	r2, r1
 8003af8:	3284      	adds	r2, #132	; 0x84
 8003afa:	f023 0307 	bic.w	r3, r3, #7
 8003afe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	01db      	lsls	r3, r3, #7
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3384      	adds	r3, #132	; 0x84
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	01db      	lsls	r3, r3, #7
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3384      	adds	r3, #132	; 0x84
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	01db      	lsls	r3, r3, #7
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3384      	adds	r3, #132	; 0x84
 8003b50:	461a      	mov	r2, r3
 8003b52:	2300      	movs	r3, #0
 8003b54:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	01db      	lsls	r3, r3, #7
 8003b70:	440b      	add	r3, r1
 8003b72:	3384      	adds	r3, #132	; 0x84
 8003b74:	4619      	mov	r1, r3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	01db      	lsls	r3, r3, #7
 8003b86:	4413      	add	r3, r2
 8003b88:	3384      	adds	r3, #132	; 0x84
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	4611      	mov	r1, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	01d2      	lsls	r2, r2, #7
 8003b96:	440a      	add	r2, r1
 8003b98:	3284      	adds	r2, #132	; 0x84
 8003b9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	01db      	lsls	r3, r3, #7
 8003baa:	4413      	add	r3, r2
 8003bac:	3384      	adds	r3, #132	; 0x84
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	01db      	lsls	r3, r3, #7
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3384      	adds	r3, #132	; 0x84
 8003bc4:	69da      	ldr	r2, [r3, #28]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	01db      	lsls	r3, r3, #7
 8003bd0:	440b      	add	r3, r1
 8003bd2:	3384      	adds	r3, #132	; 0x84
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <LTDC_SetConfig+0x32c>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	68f9      	ldr	r1, [r7, #12]
 8003be6:	6809      	ldr	r1, [r1, #0]
 8003be8:	4608      	mov	r0, r1
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	01c9      	lsls	r1, r1, #7
 8003bee:	4401      	add	r1, r0
 8003bf0:	3184      	adds	r1, #132	; 0x84
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	01db      	lsls	r3, r3, #7
 8003c00:	4413      	add	r3, r2
 8003c02:	3384      	adds	r3, #132	; 0x84
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	01db      	lsls	r3, r3, #7
 8003c10:	4413      	add	r3, r2
 8003c12:	3384      	adds	r3, #132	; 0x84
 8003c14:	461a      	mov	r2, r3
 8003c16:	2300      	movs	r3, #0
 8003c18:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	01db      	lsls	r3, r3, #7
 8003c24:	4413      	add	r3, r2
 8003c26:	3384      	adds	r3, #132	; 0x84
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003c38:	2304      	movs	r3, #4
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	e01b      	b.n	8003c76 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d102      	bne.n	8003c4c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003c46:	2303      	movs	r3, #3
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	e014      	b.n	8003c76 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d00b      	beq.n	8003c6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d007      	beq.n	8003c6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d003      	beq.n	8003c6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c68:	2b07      	cmp	r3, #7
 8003c6a:	d102      	bne.n	8003c72 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	e001      	b.n	8003c76 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003c72:	2301      	movs	r3, #1
 8003c74:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	01db      	lsls	r3, r3, #7
 8003c80:	4413      	add	r3, r2
 8003c82:	3384      	adds	r3, #132	; 0x84
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	01d2      	lsls	r2, r2, #7
 8003c90:	440a      	add	r2, r1
 8003c92:	3284      	adds	r2, #132	; 0x84
 8003c94:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003c98:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	fb02 f303 	mul.w	r3, r2, r3
 8003ca4:	041a      	lsls	r2, r3, #16
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	1acb      	subs	r3, r1, r3
 8003cb0:	69f9      	ldr	r1, [r7, #28]
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	3303      	adds	r3, #3
 8003cb8:	68f9      	ldr	r1, [r7, #12]
 8003cba:	6809      	ldr	r1, [r1, #0]
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	01c9      	lsls	r1, r1, #7
 8003cc2:	4401      	add	r1, r0
 8003cc4:	3184      	adds	r1, #132	; 0x84
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	01db      	lsls	r3, r3, #7
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3384      	adds	r3, #132	; 0x84
 8003cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	01db      	lsls	r3, r3, #7
 8003ce4:	440b      	add	r3, r1
 8003ce6:	3384      	adds	r3, #132	; 0x84
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <LTDC_SetConfig+0x330>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	01db      	lsls	r3, r3, #7
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3384      	adds	r3, #132	; 0x84
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	01db      	lsls	r3, r3, #7
 8003d10:	4413      	add	r3, r2
 8003d12:	3384      	adds	r3, #132	; 0x84
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	01d2      	lsls	r2, r2, #7
 8003d20:	440a      	add	r2, r1
 8003d22:	3284      	adds	r2, #132	; 0x84
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	6013      	str	r3, [r2, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	3724      	adds	r7, #36	; 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	fffff8f8 	.word	0xfffff8f8
 8003d3c:	fffff800 	.word	0xfffff800

08003d40 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8003d52:	2200      	movs	r2, #0
 8003d54:	e001      	b.n	8003d5a <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8003d56:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d102      	bne.n	8003d6c <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8003d66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d6a:	e000      	b.n	8003d6e <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d102      	bne.n	8003d80 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8003d7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d7e:	e000      	b.n	8003d82 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8003d80:	2200      	movs	r2, #0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8a:	1e5a      	subs	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	4413      	add	r3, r2
 8003d9a:	1e5a      	subs	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	441a      	add	r2, r3
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	4413      	add	r3, r2
 8003db0:	1e5a      	subs	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	441a      	add	r2, r3
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	441a      	add	r2, r3
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dca:	4413      	add	r3, r2
 8003dcc:	1e5a      	subs	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40007000 	.word	0x40007000

08003e00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e0a:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	4a22      	ldr	r2, [pc, #136]	; (8003e98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6413      	str	r3, [r2, #64]	; 0x40
 8003e16:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e22:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1d      	ldr	r2, [pc, #116]	; (8003e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e2e:	f7fe fb1b 	bl	8002468 <HAL_GetTick>
 8003e32:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e34:	e009      	b.n	8003e4a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e36:	f7fe fb17 	bl	8002468 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e44:	d901      	bls.n	8003e4a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e022      	b.n	8003e90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e4a:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e56:	d1ee      	bne.n	8003e36 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a0f      	ldr	r2, [pc, #60]	; (8003e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e64:	f7fe fb00 	bl	8002468 <HAL_GetTick>
 8003e68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e6a:	e009      	b.n	8003e80 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e6c:	f7fe fafc 	bl	8002468 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e7a:	d901      	bls.n	8003e80 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e007      	b.n	8003e90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e8c:	d1ee      	bne.n	8003e6c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	40007000 	.word	0x40007000

08003ea0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e29b      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 8087 	beq.w	8003fd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ec4:	4b96      	ldr	r3, [pc, #600]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d00c      	beq.n	8003eea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ed0:	4b93      	ldr	r3, [pc, #588]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d112      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62>
 8003edc:	4b90      	ldr	r3, [pc, #576]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee8:	d10b      	bne.n	8003f02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eea:	4b8d      	ldr	r3, [pc, #564]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d06c      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x130>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d168      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e275      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCC_OscConfig+0x7a>
 8003f0c:	4b84      	ldr	r3, [pc, #528]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a83      	ldr	r2, [pc, #524]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	e02e      	b.n	8003f78 <HAL_RCC_OscConfig+0xd8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x9c>
 8003f22:	4b7f      	ldr	r3, [pc, #508]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a7e      	ldr	r2, [pc, #504]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	4b7c      	ldr	r3, [pc, #496]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a7b      	ldr	r2, [pc, #492]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e01d      	b.n	8003f78 <HAL_RCC_OscConfig+0xd8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0xc0>
 8003f46:	4b76      	ldr	r3, [pc, #472]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a75      	ldr	r2, [pc, #468]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b73      	ldr	r3, [pc, #460]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a72      	ldr	r2, [pc, #456]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e00b      	b.n	8003f78 <HAL_RCC_OscConfig+0xd8>
 8003f60:	4b6f      	ldr	r3, [pc, #444]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6e      	ldr	r2, [pc, #440]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6b      	ldr	r2, [pc, #428]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d013      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fe fa72 	bl	8002468 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fe fa6e 	bl	8002468 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e229      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b61      	ldr	r3, [pc, #388]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0xe8>
 8003fa6:	e014      	b.n	8003fd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fe fa5e 	bl	8002468 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fe fa5a 	bl	8002468 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e215      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc2:	4b57      	ldr	r3, [pc, #348]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x110>
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d069      	beq.n	80040b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fde:	4b50      	ldr	r3, [pc, #320]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fea:	4b4d      	ldr	r3, [pc, #308]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d11c      	bne.n	8004030 <HAL_RCC_OscConfig+0x190>
 8003ff6:	4b4a      	ldr	r3, [pc, #296]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d116      	bne.n	8004030 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	4b47      	ldr	r3, [pc, #284]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x17a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d001      	beq.n	800401a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e1e9      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401a:	4b41      	ldr	r3, [pc, #260]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	493d      	ldr	r1, [pc, #244]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	e040      	b.n	80040b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d023      	beq.n	8004080 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004038:	4b39      	ldr	r3, [pc, #228]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a38      	ldr	r2, [pc, #224]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fe fa10 	bl	8002468 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404c:	f7fe fa0c 	bl	8002468 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1c7      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405e:	4b30      	ldr	r3, [pc, #192]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406a:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4929      	ldr	r1, [pc, #164]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]
 800407e:	e018      	b.n	80040b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004080:	4b27      	ldr	r3, [pc, #156]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a26      	ldr	r2, [pc, #152]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fe f9ec 	bl	8002468 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004094:	f7fe f9e8 	bl	8002468 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e1a3      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d038      	beq.n	8004130 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d019      	beq.n	80040fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c6:	4b16      	ldr	r3, [pc, #88]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 80040c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ca:	4a15      	ldr	r2, [pc, #84]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d2:	f7fe f9c9 	bl	8002468 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040da:	f7fe f9c5 	bl	8002468 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e180      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x23a>
 80040f8:	e01a      	b.n	8004130 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 80040fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fe:	4a08      	ldr	r2, [pc, #32]	; (8004120 <HAL_RCC_OscConfig+0x280>)
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7fe f9af 	bl	8002468 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800410e:	f7fe f9ab 	bl	8002468 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d903      	bls.n	8004124 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e166      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
 8004120:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004124:	4b92      	ldr	r3, [pc, #584]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ee      	bne.n	800410e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80a4 	beq.w	8004286 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413e:	4b8c      	ldr	r3, [pc, #560]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10d      	bne.n	8004166 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	4b89      	ldr	r3, [pc, #548]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	4a88      	ldr	r2, [pc, #544]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004154:	6413      	str	r3, [r2, #64]	; 0x40
 8004156:	4b86      	ldr	r3, [pc, #536]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004166:	4b83      	ldr	r3, [pc, #524]	; (8004374 <HAL_RCC_OscConfig+0x4d4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d118      	bne.n	80041a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004172:	4b80      	ldr	r3, [pc, #512]	; (8004374 <HAL_RCC_OscConfig+0x4d4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a7f      	ldr	r2, [pc, #508]	; (8004374 <HAL_RCC_OscConfig+0x4d4>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800417e:	f7fe f973 	bl	8002468 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004186:	f7fe f96f 	bl	8002468 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b64      	cmp	r3, #100	; 0x64
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e12a      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004198:	4b76      	ldr	r3, [pc, #472]	; (8004374 <HAL_RCC_OscConfig+0x4d4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d106      	bne.n	80041ba <HAL_RCC_OscConfig+0x31a>
 80041ac:	4b70      	ldr	r3, [pc, #448]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b0:	4a6f      	ldr	r2, [pc, #444]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6713      	str	r3, [r2, #112]	; 0x70
 80041b8:	e02d      	b.n	8004216 <HAL_RCC_OscConfig+0x376>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0x33c>
 80041c2:	4b6b      	ldr	r3, [pc, #428]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	4a6a      	ldr	r2, [pc, #424]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	6713      	str	r3, [r2, #112]	; 0x70
 80041ce:	4b68      	ldr	r3, [pc, #416]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	4a67      	ldr	r2, [pc, #412]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041d4:	f023 0304 	bic.w	r3, r3, #4
 80041d8:	6713      	str	r3, [r2, #112]	; 0x70
 80041da:	e01c      	b.n	8004216 <HAL_RCC_OscConfig+0x376>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b05      	cmp	r3, #5
 80041e2:	d10c      	bne.n	80041fe <HAL_RCC_OscConfig+0x35e>
 80041e4:	4b62      	ldr	r3, [pc, #392]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	4a61      	ldr	r2, [pc, #388]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041ea:	f043 0304 	orr.w	r3, r3, #4
 80041ee:	6713      	str	r3, [r2, #112]	; 0x70
 80041f0:	4b5f      	ldr	r3, [pc, #380]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	4a5e      	ldr	r2, [pc, #376]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6713      	str	r3, [r2, #112]	; 0x70
 80041fc:	e00b      	b.n	8004216 <HAL_RCC_OscConfig+0x376>
 80041fe:	4b5c      	ldr	r3, [pc, #368]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	4a5b      	ldr	r2, [pc, #364]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	6713      	str	r3, [r2, #112]	; 0x70
 800420a:	4b59      	ldr	r3, [pc, #356]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a58      	ldr	r2, [pc, #352]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004210:	f023 0304 	bic.w	r3, r3, #4
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d015      	beq.n	800424a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fe f923 	bl	8002468 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fe f91f 	bl	8002468 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	; 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e0d8      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423c:	4b4c      	ldr	r3, [pc, #304]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ee      	beq.n	8004226 <HAL_RCC_OscConfig+0x386>
 8004248:	e014      	b.n	8004274 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424a:	f7fe f90d 	bl	8002468 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004250:	e00a      	b.n	8004268 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fe f909 	bl	8002468 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e0c2      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004268:	4b41      	ldr	r3, [pc, #260]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1ee      	bne.n	8004252 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d105      	bne.n	8004286 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427a:	4b3d      	ldr	r3, [pc, #244]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4a3c      	ldr	r2, [pc, #240]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004284:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80ae 	beq.w	80043ec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004290:	4b37      	ldr	r3, [pc, #220]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b08      	cmp	r3, #8
 800429a:	d06d      	beq.n	8004378 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d14b      	bne.n	800433c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a4:	4b32      	ldr	r3, [pc, #200]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a31      	ldr	r2, [pc, #196]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80042aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fe f8da 	bl	8002468 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b8:	f7fe f8d6 	bl	8002468 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e091      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ca:	4b29      	ldr	r3, [pc, #164]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	019b      	lsls	r3, r3, #6
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	085b      	lsrs	r3, r3, #1
 80042ee:	3b01      	subs	r3, #1
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	061b      	lsls	r3, r3, #24
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	071b      	lsls	r3, r3, #28
 8004302:	491b      	ldr	r1, [pc, #108]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004304:	4313      	orrs	r3, r2
 8004306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004308:	4b19      	ldr	r3, [pc, #100]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a18      	ldr	r2, [pc, #96]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800430e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe f8a8 	bl	8002468 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431c:	f7fe f8a4 	bl	8002468 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e05f      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x47c>
 800433a:	e057      	b.n	80043ec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0b      	ldr	r2, [pc, #44]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fe f88e 	bl	8002468 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004350:	f7fe f88a 	bl	8002468 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e045      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004362:	4b03      	ldr	r3, [pc, #12]	; (8004370 <HAL_RCC_OscConfig+0x4d0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x4b0>
 800436e:	e03d      	b.n	80043ec <HAL_RCC_OscConfig+0x54c>
 8004370:	40023800 	.word	0x40023800
 8004374:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004378:	4b1f      	ldr	r3, [pc, #124]	; (80043f8 <HAL_RCC_OscConfig+0x558>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d030      	beq.n	80043e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d129      	bne.n	80043e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d122      	bne.n	80043e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043a8:	4013      	ands	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d119      	bne.n	80043e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	3b01      	subs	r3, #1
 80043c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d10f      	bne.n	80043e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d107      	bne.n	80043e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800

080043fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0d0      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004414:	4b6a      	ldr	r3, [pc, #424]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d910      	bls.n	8004444 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004422:	4b67      	ldr	r3, [pc, #412]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 020f 	bic.w	r2, r3, #15
 800442a:	4965      	ldr	r1, [pc, #404]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b63      	ldr	r3, [pc, #396]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e0b8      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800445c:	4b59      	ldr	r3, [pc, #356]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	4a58      	ldr	r2, [pc, #352]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004466:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004474:	4b53      	ldr	r3, [pc, #332]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a52      	ldr	r2, [pc, #328]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800447a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800447e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004480:	4b50      	ldr	r3, [pc, #320]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	494d      	ldr	r1, [pc, #308]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d040      	beq.n	8004520 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d107      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a6:	4b47      	ldr	r3, [pc, #284]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d115      	bne.n	80044de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e07f      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044be:	4b41      	ldr	r3, [pc, #260]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e073      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ce:	4b3d      	ldr	r3, [pc, #244]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e06b      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044de:	4b39      	ldr	r3, [pc, #228]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f023 0203 	bic.w	r2, r3, #3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4936      	ldr	r1, [pc, #216]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f0:	f7fd ffba 	bl	8002468 <HAL_GetTick>
 80044f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f6:	e00a      	b.n	800450e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f8:	f7fd ffb6 	bl	8002468 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	; 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e053      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	4b2d      	ldr	r3, [pc, #180]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 020c 	and.w	r2, r3, #12
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	429a      	cmp	r2, r3
 800451e:	d1eb      	bne.n	80044f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004520:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d210      	bcs.n	8004550 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 020f 	bic.w	r2, r3, #15
 8004536:	4922      	ldr	r1, [pc, #136]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	4313      	orrs	r3, r2
 800453c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800453e:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e032      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800455c:	4b19      	ldr	r3, [pc, #100]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4916      	ldr	r1, [pc, #88]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800456a:	4313      	orrs	r3, r2
 800456c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d009      	beq.n	800458e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800457a:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	490e      	ldr	r1, [pc, #56]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800458e:	f000 f821 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 8004592:	4602      	mov	r2, r0
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	091b      	lsrs	r3, r3, #4
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	490a      	ldr	r1, [pc, #40]	; (80045c8 <HAL_RCC_ClockConfig+0x1cc>)
 80045a0:	5ccb      	ldrb	r3, [r1, r3]
 80045a2:	fa22 f303 	lsr.w	r3, r2, r3
 80045a6:	4a09      	ldr	r2, [pc, #36]	; (80045cc <HAL_RCC_ClockConfig+0x1d0>)
 80045a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <HAL_RCC_ClockConfig+0x1d4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fd ff16 	bl	80023e0 <HAL_InitTick>

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40023c00 	.word	0x40023c00
 80045c4:	40023800 	.word	0x40023800
 80045c8:	08009c6c 	.word	0x08009c6c
 80045cc:	20000000 	.word	0x20000000
 80045d0:	20000004 	.word	0x20000004

080045d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d4:	b5b0      	push	{r4, r5, r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045da:	2100      	movs	r1, #0
 80045dc:	6079      	str	r1, [r7, #4]
 80045de:	2100      	movs	r1, #0
 80045e0:	60f9      	str	r1, [r7, #12]
 80045e2:	2100      	movs	r1, #0
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80045e6:	2100      	movs	r1, #0
 80045e8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ea:	4952      	ldr	r1, [pc, #328]	; (8004734 <HAL_RCC_GetSysClockFreq+0x160>)
 80045ec:	6889      	ldr	r1, [r1, #8]
 80045ee:	f001 010c 	and.w	r1, r1, #12
 80045f2:	2908      	cmp	r1, #8
 80045f4:	d00d      	beq.n	8004612 <HAL_RCC_GetSysClockFreq+0x3e>
 80045f6:	2908      	cmp	r1, #8
 80045f8:	f200 8094 	bhi.w	8004724 <HAL_RCC_GetSysClockFreq+0x150>
 80045fc:	2900      	cmp	r1, #0
 80045fe:	d002      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0x32>
 8004600:	2904      	cmp	r1, #4
 8004602:	d003      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0x38>
 8004604:	e08e      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004606:	4b4c      	ldr	r3, [pc, #304]	; (8004738 <HAL_RCC_GetSysClockFreq+0x164>)
 8004608:	60bb      	str	r3, [r7, #8]
      break;
 800460a:	e08e      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800460c:	4b4b      	ldr	r3, [pc, #300]	; (800473c <HAL_RCC_GetSysClockFreq+0x168>)
 800460e:	60bb      	str	r3, [r7, #8]
      break;
 8004610:	e08b      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004612:	4948      	ldr	r1, [pc, #288]	; (8004734 <HAL_RCC_GetSysClockFreq+0x160>)
 8004614:	6849      	ldr	r1, [r1, #4]
 8004616:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800461a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800461c:	4945      	ldr	r1, [pc, #276]	; (8004734 <HAL_RCC_GetSysClockFreq+0x160>)
 800461e:	6849      	ldr	r1, [r1, #4]
 8004620:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004624:	2900      	cmp	r1, #0
 8004626:	d024      	beq.n	8004672 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004628:	4942      	ldr	r1, [pc, #264]	; (8004734 <HAL_RCC_GetSysClockFreq+0x160>)
 800462a:	6849      	ldr	r1, [r1, #4]
 800462c:	0989      	lsrs	r1, r1, #6
 800462e:	4608      	mov	r0, r1
 8004630:	f04f 0100 	mov.w	r1, #0
 8004634:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004638:	f04f 0500 	mov.w	r5, #0
 800463c:	ea00 0204 	and.w	r2, r0, r4
 8004640:	ea01 0305 	and.w	r3, r1, r5
 8004644:	493d      	ldr	r1, [pc, #244]	; (800473c <HAL_RCC_GetSysClockFreq+0x168>)
 8004646:	fb01 f003 	mul.w	r0, r1, r3
 800464a:	2100      	movs	r1, #0
 800464c:	fb01 f102 	mul.w	r1, r1, r2
 8004650:	1844      	adds	r4, r0, r1
 8004652:	493a      	ldr	r1, [pc, #232]	; (800473c <HAL_RCC_GetSysClockFreq+0x168>)
 8004654:	fba2 0101 	umull	r0, r1, r2, r1
 8004658:	1863      	adds	r3, r4, r1
 800465a:	4619      	mov	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	461a      	mov	r2, r3
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	f7fb fe44 	bl	80002f0 <__aeabi_uldivmod>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4613      	mov	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e04a      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004672:	4b30      	ldr	r3, [pc, #192]	; (8004734 <HAL_RCC_GetSysClockFreq+0x160>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	099b      	lsrs	r3, r3, #6
 8004678:	461a      	mov	r2, r3
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	ea02 0400 	and.w	r4, r2, r0
 800468a:	ea03 0501 	and.w	r5, r3, r1
 800468e:	4620      	mov	r0, r4
 8004690:	4629      	mov	r1, r5
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	014b      	lsls	r3, r1, #5
 800469c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046a0:	0142      	lsls	r2, r0, #5
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	1b00      	subs	r0, r0, r4
 80046a8:	eb61 0105 	sbc.w	r1, r1, r5
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	018b      	lsls	r3, r1, #6
 80046b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046ba:	0182      	lsls	r2, r0, #6
 80046bc:	1a12      	subs	r2, r2, r0
 80046be:	eb63 0301 	sbc.w	r3, r3, r1
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f04f 0100 	mov.w	r1, #0
 80046ca:	00d9      	lsls	r1, r3, #3
 80046cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046d0:	00d0      	lsls	r0, r2, #3
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	1912      	adds	r2, r2, r4
 80046d8:	eb45 0303 	adc.w	r3, r5, r3
 80046dc:	f04f 0000 	mov.w	r0, #0
 80046e0:	f04f 0100 	mov.w	r1, #0
 80046e4:	0299      	lsls	r1, r3, #10
 80046e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046ea:	0290      	lsls	r0, r2, #10
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4610      	mov	r0, r2
 80046f2:	4619      	mov	r1, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	461a      	mov	r2, r3
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	f7fb fdf8 	bl	80002f0 <__aeabi_uldivmod>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4613      	mov	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <HAL_RCC_GetSysClockFreq+0x160>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	3301      	adds	r3, #1
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	60bb      	str	r3, [r7, #8]
      break;
 8004722:	e002      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <HAL_RCC_GetSysClockFreq+0x164>)
 8004726:	60bb      	str	r3, [r7, #8]
      break;
 8004728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800472a:	68bb      	ldr	r3, [r7, #8]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bdb0      	pop	{r4, r5, r7, pc}
 8004734:	40023800 	.word	0x40023800
 8004738:	00f42400 	.word	0x00f42400
 800473c:	017d7840 	.word	0x017d7840

08004740 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004744:	4b03      	ldr	r3, [pc, #12]	; (8004754 <HAL_RCC_GetHCLKFreq+0x14>)
 8004746:	681b      	ldr	r3, [r3, #0]
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000000 	.word	0x20000000

08004758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800475c:	f7ff fff0 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 8004760:	4602      	mov	r2, r0
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	0a9b      	lsrs	r3, r3, #10
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	4903      	ldr	r1, [pc, #12]	; (800477c <HAL_RCC_GetPCLK1Freq+0x24>)
 800476e:	5ccb      	ldrb	r3, [r1, r3]
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004774:	4618      	mov	r0, r3
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40023800 	.word	0x40023800
 800477c:	08009c7c 	.word	0x08009c7c

08004780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004784:	f7ff ffdc 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	0b5b      	lsrs	r3, r3, #13
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	4903      	ldr	r1, [pc, #12]	; (80047a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40023800 	.word	0x40023800
 80047a4:	08009c7c 	.word	0x08009c7c

080047a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d012      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047d0:	4b69      	ldr	r3, [pc, #420]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4a68      	ldr	r2, [pc, #416]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047da:	6093      	str	r3, [r2, #8]
 80047dc:	4b66      	ldr	r3, [pc, #408]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	4964      	ldr	r1, [pc, #400]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80047f2:	2301      	movs	r3, #1
 80047f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d017      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004802:	4b5d      	ldr	r3, [pc, #372]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004808:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004810:	4959      	ldr	r1, [pc, #356]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004820:	d101      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004822:	2301      	movs	r3, #1
 8004824:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800482e:	2301      	movs	r3, #1
 8004830:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d017      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800483e:	4b4e      	ldr	r3, [pc, #312]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004844:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	494a      	ldr	r1, [pc, #296]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485c:	d101      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800485e:	2301      	movs	r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800486a:	2301      	movs	r3, #1
 800486c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800487a:	2301      	movs	r3, #1
 800487c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 808b 	beq.w	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800488c:	4b3a      	ldr	r3, [pc, #232]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	4a39      	ldr	r2, [pc, #228]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004896:	6413      	str	r3, [r2, #64]	; 0x40
 8004898:	4b37      	ldr	r3, [pc, #220]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048a4:	4b35      	ldr	r3, [pc, #212]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a34      	ldr	r2, [pc, #208]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b0:	f7fd fdda 	bl	8002468 <HAL_GetTick>
 80048b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b8:	f7fd fdd6 	bl	8002468 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	; 0x64
 80048c4:	d901      	bls.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e38f      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048ca:	4b2c      	ldr	r3, [pc, #176]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048d6:	4b28      	ldr	r3, [pc, #160]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d035      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d02e      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048f4:	4b20      	ldr	r3, [pc, #128]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048fe:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	4a1d      	ldr	r2, [pc, #116]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004908:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800490a:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490e:	4a1a      	ldr	r2, [pc, #104]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004914:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004916:	4a18      	ldr	r2, [pc, #96]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800491c:	4b16      	ldr	r3, [pc, #88]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b01      	cmp	r3, #1
 8004926:	d114      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fd fd9e 	bl	8002468 <HAL_GetTick>
 800492c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492e:	e00a      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004930:	f7fd fd9a 	bl	8002468 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	; 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e351      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0ee      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800495e:	d111      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800496c:	4b04      	ldr	r3, [pc, #16]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800496e:	400b      	ands	r3, r1
 8004970:	4901      	ldr	r1, [pc, #4]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
 8004976:	e00b      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004978:	40023800 	.word	0x40023800
 800497c:	40007000 	.word	0x40007000
 8004980:	0ffffcff 	.word	0x0ffffcff
 8004984:	4bb3      	ldr	r3, [pc, #716]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	4ab2      	ldr	r2, [pc, #712]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800498a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800498e:	6093      	str	r3, [r2, #8]
 8004990:	4bb0      	ldr	r3, [pc, #704]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800499c:	49ad      	ldr	r1, [pc, #692]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0310 	and.w	r3, r3, #16
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d010      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049ae:	4ba9      	ldr	r3, [pc, #676]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b4:	4aa7      	ldr	r2, [pc, #668]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80049be:	4ba5      	ldr	r3, [pc, #660]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	49a2      	ldr	r1, [pc, #648]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049dc:	4b9d      	ldr	r3, [pc, #628]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ea:	499a      	ldr	r1, [pc, #616]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049fe:	4b95      	ldr	r3, [pc, #596]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a0c:	4991      	ldr	r1, [pc, #580]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a20:	4b8c      	ldr	r3, [pc, #560]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2e:	4989      	ldr	r1, [pc, #548]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a42:	4b84      	ldr	r3, [pc, #528]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a50:	4980      	ldr	r1, [pc, #512]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a64:	4b7b      	ldr	r3, [pc, #492]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f023 0203 	bic.w	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	4978      	ldr	r1, [pc, #480]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a86:	4b73      	ldr	r3, [pc, #460]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8c:	f023 020c 	bic.w	r2, r3, #12
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a94:	496f      	ldr	r1, [pc, #444]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aa8:	4b6a      	ldr	r3, [pc, #424]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab6:	4967      	ldr	r1, [pc, #412]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aca:	4b62      	ldr	r3, [pc, #392]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad8:	495e      	ldr	r1, [pc, #376]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aec:	4b59      	ldr	r3, [pc, #356]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afa:	4956      	ldr	r1, [pc, #344]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b0e:	4b51      	ldr	r3, [pc, #324]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1c:	494d      	ldr	r1, [pc, #308]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b30:	4b48      	ldr	r3, [pc, #288]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3e:	4945      	ldr	r1, [pc, #276]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b52:	4b40      	ldr	r3, [pc, #256]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b60:	493c      	ldr	r1, [pc, #240]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b74:	4b37      	ldr	r3, [pc, #220]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b82:	4934      	ldr	r1, [pc, #208]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d011      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b96:	4b2f      	ldr	r3, [pc, #188]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba4:	492b      	ldr	r1, [pc, #172]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bb4:	d101      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bd6:	4b1f      	ldr	r3, [pc, #124]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bdc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be4:	491b      	ldr	r1, [pc, #108]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00b      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bf8:	4b16      	ldr	r3, [pc, #88]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c08:	4912      	ldr	r1, [pc, #72]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00b      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004c1c:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c22:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2c:	4909      	ldr	r1, [pc, #36]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00f      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c40:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	e002      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800
 8004c58:	4986      	ldr	r1, [pc, #536]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00b      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c6c:	4b81      	ldr	r3, [pc, #516]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c7c:	497d      	ldr	r1, [pc, #500]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d006      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80d6 	beq.w	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c98:	4b76      	ldr	r3, [pc, #472]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a75      	ldr	r2, [pc, #468]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca4:	f7fd fbe0 	bl	8002468 <HAL_GetTick>
 8004ca8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cac:	f7fd fbdc 	bl	8002468 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	; 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e195      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cbe:	4b6d      	ldr	r3, [pc, #436]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d021      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d11d      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cde:	4b65      	ldr	r3, [pc, #404]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce4:	0c1b      	lsrs	r3, r3, #16
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cec:	4b61      	ldr	r3, [pc, #388]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf2:	0e1b      	lsrs	r3, r3, #24
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	019a      	lsls	r2, r3, #6
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	041b      	lsls	r3, r3, #16
 8004d04:	431a      	orrs	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	061b      	lsls	r3, r3, #24
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	071b      	lsls	r3, r3, #28
 8004d12:	4958      	ldr	r1, [pc, #352]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d004      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d02e      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d44:	d129      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d46:	4b4b      	ldr	r3, [pc, #300]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d54:	4b47      	ldr	r3, [pc, #284]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d5a:	0f1b      	lsrs	r3, r3, #28
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	019a      	lsls	r2, r3, #6
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	041b      	lsls	r3, r3, #16
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	061b      	lsls	r3, r3, #24
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	071b      	lsls	r3, r3, #28
 8004d7a:	493e      	ldr	r1, [pc, #248]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d82:	4b3c      	ldr	r3, [pc, #240]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d88:	f023 021f 	bic.w	r2, r3, #31
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	3b01      	subs	r3, #1
 8004d92:	4938      	ldr	r1, [pc, #224]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01d      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004da6:	4b33      	ldr	r3, [pc, #204]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dac:	0e1b      	lsrs	r3, r3, #24
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004db4:	4b2f      	ldr	r3, [pc, #188]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dba:	0f1b      	lsrs	r3, r3, #28
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	019a      	lsls	r2, r3, #6
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	061b      	lsls	r3, r3, #24
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	071b      	lsls	r3, r3, #28
 8004dda:	4926      	ldr	r1, [pc, #152]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d011      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	019a      	lsls	r2, r3, #6
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	071b      	lsls	r3, r3, #28
 8004e0a:	491a      	ldr	r1, [pc, #104]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e12:	4b18      	ldr	r3, [pc, #96]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1e:	f7fd fb23 	bl	8002468 <HAL_GetTick>
 8004e22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e26:	f7fd fb1f 	bl	8002468 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b64      	cmp	r3, #100	; 0x64
 8004e32:	d901      	bls.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0d8      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e38:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	f040 80ce 	bne.w	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e58:	f7fd fb06 	bl	8002468 <HAL_GetTick>
 8004e5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e5e:	e00b      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e60:	f7fd fb02 	bl	8002468 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	; 0x64
 8004e6c:	d904      	bls.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e0bb      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e72:	bf00      	nop
 8004e74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e78:	4b5e      	ldr	r3, [pc, #376]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e84:	d0ec      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d02e      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d12a      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004eae:	4b51      	ldr	r3, [pc, #324]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ebc:	4b4d      	ldr	r3, [pc, #308]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec2:	0f1b      	lsrs	r3, r3, #28
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	019a      	lsls	r2, r3, #6
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	041b      	lsls	r3, r3, #16
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	061b      	lsls	r3, r3, #24
 8004edc:	431a      	orrs	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	071b      	lsls	r3, r3, #28
 8004ee2:	4944      	ldr	r1, [pc, #272]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004eea:	4b42      	ldr	r3, [pc, #264]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	493d      	ldr	r1, [pc, #244]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d022      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f18:	d11d      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f1a:	4b36      	ldr	r3, [pc, #216]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	0e1b      	lsrs	r3, r3, #24
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f28:	4b32      	ldr	r3, [pc, #200]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	0f1b      	lsrs	r3, r3, #28
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	019a      	lsls	r2, r3, #6
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	041b      	lsls	r3, r3, #16
 8004f42:	431a      	orrs	r2, r3
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	061b      	lsls	r3, r3, #24
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	071b      	lsls	r3, r3, #28
 8004f4e:	4929      	ldr	r1, [pc, #164]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d028      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f62:	4b24      	ldr	r3, [pc, #144]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f68:	0e1b      	lsrs	r3, r3, #24
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f70:	4b20      	ldr	r3, [pc, #128]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f76:	0c1b      	lsrs	r3, r3, #16
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	019a      	lsls	r2, r3, #6
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	041b      	lsls	r3, r3, #16
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	061b      	lsls	r3, r3, #24
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	071b      	lsls	r3, r3, #28
 8004f96:	4917      	ldr	r1, [pc, #92]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f9e:	4b15      	ldr	r3, [pc, #84]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	4911      	ldr	r1, [pc, #68]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004fb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a0e      	ldr	r2, [pc, #56]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc0:	f7fd fa52 	bl	8002468 <HAL_GetTick>
 8004fc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fc8:	f7fd fa4e 	bl	8002468 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b64      	cmp	r3, #100	; 0x64
 8004fd4:	d901      	bls.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e007      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fe6:	d1ef      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800

08004ff8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e01c      	b.n	8005044 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	795b      	ldrb	r3, [r3, #5]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d105      	bne.n	8005020 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f816 	bl	800504c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0204 	orr.w	r2, r2, #4
 8005034:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_RNG_MspInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e081      	b.n	8005176 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	7f5b      	ldrb	r3, [r3, #29]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d105      	bne.n	8005088 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f87e 	bl	8005184 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	22ca      	movs	r2, #202	; 0xca
 8005094:	625a      	str	r2, [r3, #36]	; 0x24
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2253      	movs	r2, #83	; 0x53
 800509c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f950 	bl	8005344 <RTC_EnterInitMode>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d008      	beq.n	80050bc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	22ff      	movs	r2, #255	; 0xff
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2204      	movs	r2, #4
 80050b6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e05c      	b.n	8005176 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6899      	ldr	r1, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b2e      	ldr	r3, [pc, #184]	; (8005180 <HAL_RTC_Init+0x120>)
 80050c8:	400b      	ands	r3, r1
 80050ca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6899      	ldr	r1, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68d2      	ldr	r2, [r2, #12]
 80050f2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6919      	ldr	r1, [r3, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	041a      	lsls	r2, r3, #16
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005116:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10e      	bne.n	8005144 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f8e4 	bl	80052f4 <HAL_RTC_WaitForSynchro>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d008      	beq.n	8005144 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	22ff      	movs	r2, #255	; 0xff
 8005138:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2204      	movs	r2, #4
 800513e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e018      	b.n	8005176 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0208 	bic.w	r2, r2, #8
 8005152:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	22ff      	movs	r2, #255	; 0xff
 800516c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005174:	2300      	movs	r3, #0
  }
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	ff8fffbf 	.word	0xff8fffbf

08005184 <HAL_RTC_MspInit>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b22      	ldr	r3, [pc, #136]	; (8005250 <HAL_RTC_GetTime+0xb8>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	0c1b      	lsrs	r3, r3, #16
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	b2da      	uxtb	r2, r3
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d11a      	bne.n	8005246 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f000 f8c1 	bl	800539c <RTC_Bcd2ToByte>
 800521a:	4603      	mov	r3, r0
 800521c:	461a      	mov	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 f8b8 	bl	800539c <RTC_Bcd2ToByte>
 800522c:	4603      	mov	r3, r0
 800522e:	461a      	mov	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	789b      	ldrb	r3, [r3, #2]
 8005238:	4618      	mov	r0, r3
 800523a:	f000 f8af 	bl	800539c <RTC_Bcd2ToByte>
 800523e:	4603      	mov	r3, r0
 8005240:	461a      	mov	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	007f7f7f 	.word	0x007f7f7f

08005254 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	4b21      	ldr	r3, [pc, #132]	; (80052f0 <HAL_RTC_GetDate+0x9c>)
 800526c:	4013      	ands	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	0c1b      	lsrs	r3, r3, #16
 8005274:	b2da      	uxtb	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	0a1b      	lsrs	r3, r3, #8
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005292:	b2da      	uxtb	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	0b5b      	lsrs	r3, r3, #13
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d11a      	bne.n	80052e4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	78db      	ldrb	r3, [r3, #3]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 f872 	bl	800539c <RTC_Bcd2ToByte>
 80052b8:	4603      	mov	r3, r0
 80052ba:	461a      	mov	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 f869 	bl	800539c <RTC_Bcd2ToByte>
 80052ca:	4603      	mov	r3, r0
 80052cc:	461a      	mov	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	789b      	ldrb	r3, [r3, #2]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f860 	bl	800539c <RTC_Bcd2ToByte>
 80052dc:	4603      	mov	r3, r0
 80052de:	461a      	mov	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	00ffff3f 	.word	0x00ffff3f

080052f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800530e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005310:	f7fd f8aa 	bl	8002468 <HAL_GetTick>
 8005314:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005316:	e009      	b.n	800532c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005318:	f7fd f8a6 	bl	8002468 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005326:	d901      	bls.n	800532c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e007      	b.n	800533c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0ee      	beq.n	8005318 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d119      	bne.n	8005392 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f04f 32ff 	mov.w	r2, #4294967295
 8005366:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005368:	f7fd f87e 	bl	8002468 <HAL_GetTick>
 800536c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800536e:	e009      	b.n	8005384 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005370:	f7fd f87a 	bl	8002468 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800537e:	d901      	bls.n	8005384 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e007      	b.n	8005394 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0ee      	beq.n	8005370 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	091b      	lsrs	r3, r3, #4
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	461a      	mov	r2, r3
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	4413      	add	r3, r2
 80053ca:	b2db      	uxtb	r3, r3
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e025      	b.n	8005438 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f81d 	bl	8005440 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2202      	movs	r2, #2
 800540a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3304      	adds	r3, #4
 8005416:	4619      	mov	r1, r3
 8005418:	4610      	mov	r0, r2
 800541a:	f000 fccb 	bl	8005db4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	461a      	mov	r2, r3
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	f000 fd35 	bl	8005e98 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d101      	bne.n	8005470 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800546c:	2302      	movs	r3, #2
 800546e:	e018      	b.n	80054a2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fd89 	bl	8005f98 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d104      	bne.n	8005498 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2205      	movs	r2, #5
 8005492:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005496:	e003      	b.n	80054a0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d101      	bne.n	80054c4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80054c0:	2302      	movs	r3, #2
 80054c2:	e00e      	b.n	80054e2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fd84 	bl	8005fe0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b082      	sub	sp, #8
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e040      	b.n	800557e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f873 	bl	80055f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2224      	movs	r2, #36	; 0x24
 8005516:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f879 	bl	8005620 <UART_SetConfig>
 800552e:	4603      	mov	r3, r0
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e022      	b.n	800557e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 facf 	bl	8005ae4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005554:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005564:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fb56 	bl	8005c28 <UART_CheckIdleState>
 800557c:	4603      	mov	r3, r0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e02b      	b.n	80055f0 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2224      	movs	r2, #36	; 0x24
 800559c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0201 	bic.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2200      	movs	r2, #0
 80055bc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f820 	bl	800560c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	431a      	orrs	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4ba7      	ldr	r3, [pc, #668]	; (80058e8 <UART_SetConfig+0x2c8>)
 800564c:	4013      	ands	r3, r2
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	6979      	ldr	r1, [r7, #20]
 8005654:	430b      	orrs	r3, r1
 8005656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	430a      	orrs	r2, r1
 8005690:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a95      	ldr	r2, [pc, #596]	; (80058ec <UART_SetConfig+0x2cc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d120      	bne.n	80056de <UART_SetConfig+0xbe>
 800569c:	4b94      	ldr	r3, [pc, #592]	; (80058f0 <UART_SetConfig+0x2d0>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d816      	bhi.n	80056d8 <UART_SetConfig+0xb8>
 80056aa:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <UART_SetConfig+0x90>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056c1 	.word	0x080056c1
 80056b4:	080056cd 	.word	0x080056cd
 80056b8:	080056c7 	.word	0x080056c7
 80056bc:	080056d3 	.word	0x080056d3
 80056c0:	2301      	movs	r3, #1
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e14f      	b.n	8005966 <UART_SetConfig+0x346>
 80056c6:	2302      	movs	r3, #2
 80056c8:	77fb      	strb	r3, [r7, #31]
 80056ca:	e14c      	b.n	8005966 <UART_SetConfig+0x346>
 80056cc:	2304      	movs	r3, #4
 80056ce:	77fb      	strb	r3, [r7, #31]
 80056d0:	e149      	b.n	8005966 <UART_SetConfig+0x346>
 80056d2:	2308      	movs	r3, #8
 80056d4:	77fb      	strb	r3, [r7, #31]
 80056d6:	e146      	b.n	8005966 <UART_SetConfig+0x346>
 80056d8:	2310      	movs	r3, #16
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e143      	b.n	8005966 <UART_SetConfig+0x346>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a84      	ldr	r2, [pc, #528]	; (80058f4 <UART_SetConfig+0x2d4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d132      	bne.n	800574e <UART_SetConfig+0x12e>
 80056e8:	4b81      	ldr	r3, [pc, #516]	; (80058f0 <UART_SetConfig+0x2d0>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ee:	f003 030c 	and.w	r3, r3, #12
 80056f2:	2b0c      	cmp	r3, #12
 80056f4:	d828      	bhi.n	8005748 <UART_SetConfig+0x128>
 80056f6:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <UART_SetConfig+0xdc>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	08005731 	.word	0x08005731
 8005700:	08005749 	.word	0x08005749
 8005704:	08005749 	.word	0x08005749
 8005708:	08005749 	.word	0x08005749
 800570c:	0800573d 	.word	0x0800573d
 8005710:	08005749 	.word	0x08005749
 8005714:	08005749 	.word	0x08005749
 8005718:	08005749 	.word	0x08005749
 800571c:	08005737 	.word	0x08005737
 8005720:	08005749 	.word	0x08005749
 8005724:	08005749 	.word	0x08005749
 8005728:	08005749 	.word	0x08005749
 800572c:	08005743 	.word	0x08005743
 8005730:	2300      	movs	r3, #0
 8005732:	77fb      	strb	r3, [r7, #31]
 8005734:	e117      	b.n	8005966 <UART_SetConfig+0x346>
 8005736:	2302      	movs	r3, #2
 8005738:	77fb      	strb	r3, [r7, #31]
 800573a:	e114      	b.n	8005966 <UART_SetConfig+0x346>
 800573c:	2304      	movs	r3, #4
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e111      	b.n	8005966 <UART_SetConfig+0x346>
 8005742:	2308      	movs	r3, #8
 8005744:	77fb      	strb	r3, [r7, #31]
 8005746:	e10e      	b.n	8005966 <UART_SetConfig+0x346>
 8005748:	2310      	movs	r3, #16
 800574a:	77fb      	strb	r3, [r7, #31]
 800574c:	e10b      	b.n	8005966 <UART_SetConfig+0x346>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a69      	ldr	r2, [pc, #420]	; (80058f8 <UART_SetConfig+0x2d8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d120      	bne.n	800579a <UART_SetConfig+0x17a>
 8005758:	4b65      	ldr	r3, [pc, #404]	; (80058f0 <UART_SetConfig+0x2d0>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005762:	2b30      	cmp	r3, #48	; 0x30
 8005764:	d013      	beq.n	800578e <UART_SetConfig+0x16e>
 8005766:	2b30      	cmp	r3, #48	; 0x30
 8005768:	d814      	bhi.n	8005794 <UART_SetConfig+0x174>
 800576a:	2b20      	cmp	r3, #32
 800576c:	d009      	beq.n	8005782 <UART_SetConfig+0x162>
 800576e:	2b20      	cmp	r3, #32
 8005770:	d810      	bhi.n	8005794 <UART_SetConfig+0x174>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <UART_SetConfig+0x15c>
 8005776:	2b10      	cmp	r3, #16
 8005778:	d006      	beq.n	8005788 <UART_SetConfig+0x168>
 800577a:	e00b      	b.n	8005794 <UART_SetConfig+0x174>
 800577c:	2300      	movs	r3, #0
 800577e:	77fb      	strb	r3, [r7, #31]
 8005780:	e0f1      	b.n	8005966 <UART_SetConfig+0x346>
 8005782:	2302      	movs	r3, #2
 8005784:	77fb      	strb	r3, [r7, #31]
 8005786:	e0ee      	b.n	8005966 <UART_SetConfig+0x346>
 8005788:	2304      	movs	r3, #4
 800578a:	77fb      	strb	r3, [r7, #31]
 800578c:	e0eb      	b.n	8005966 <UART_SetConfig+0x346>
 800578e:	2308      	movs	r3, #8
 8005790:	77fb      	strb	r3, [r7, #31]
 8005792:	e0e8      	b.n	8005966 <UART_SetConfig+0x346>
 8005794:	2310      	movs	r3, #16
 8005796:	77fb      	strb	r3, [r7, #31]
 8005798:	e0e5      	b.n	8005966 <UART_SetConfig+0x346>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a57      	ldr	r2, [pc, #348]	; (80058fc <UART_SetConfig+0x2dc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d120      	bne.n	80057e6 <UART_SetConfig+0x1c6>
 80057a4:	4b52      	ldr	r3, [pc, #328]	; (80058f0 <UART_SetConfig+0x2d0>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057ae:	2bc0      	cmp	r3, #192	; 0xc0
 80057b0:	d013      	beq.n	80057da <UART_SetConfig+0x1ba>
 80057b2:	2bc0      	cmp	r3, #192	; 0xc0
 80057b4:	d814      	bhi.n	80057e0 <UART_SetConfig+0x1c0>
 80057b6:	2b80      	cmp	r3, #128	; 0x80
 80057b8:	d009      	beq.n	80057ce <UART_SetConfig+0x1ae>
 80057ba:	2b80      	cmp	r3, #128	; 0x80
 80057bc:	d810      	bhi.n	80057e0 <UART_SetConfig+0x1c0>
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <UART_SetConfig+0x1a8>
 80057c2:	2b40      	cmp	r3, #64	; 0x40
 80057c4:	d006      	beq.n	80057d4 <UART_SetConfig+0x1b4>
 80057c6:	e00b      	b.n	80057e0 <UART_SetConfig+0x1c0>
 80057c8:	2300      	movs	r3, #0
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	e0cb      	b.n	8005966 <UART_SetConfig+0x346>
 80057ce:	2302      	movs	r3, #2
 80057d0:	77fb      	strb	r3, [r7, #31]
 80057d2:	e0c8      	b.n	8005966 <UART_SetConfig+0x346>
 80057d4:	2304      	movs	r3, #4
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e0c5      	b.n	8005966 <UART_SetConfig+0x346>
 80057da:	2308      	movs	r3, #8
 80057dc:	77fb      	strb	r3, [r7, #31]
 80057de:	e0c2      	b.n	8005966 <UART_SetConfig+0x346>
 80057e0:	2310      	movs	r3, #16
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e0bf      	b.n	8005966 <UART_SetConfig+0x346>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a45      	ldr	r2, [pc, #276]	; (8005900 <UART_SetConfig+0x2e0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d125      	bne.n	800583c <UART_SetConfig+0x21c>
 80057f0:	4b3f      	ldr	r3, [pc, #252]	; (80058f0 <UART_SetConfig+0x2d0>)
 80057f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057fe:	d017      	beq.n	8005830 <UART_SetConfig+0x210>
 8005800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005804:	d817      	bhi.n	8005836 <UART_SetConfig+0x216>
 8005806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800580a:	d00b      	beq.n	8005824 <UART_SetConfig+0x204>
 800580c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005810:	d811      	bhi.n	8005836 <UART_SetConfig+0x216>
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <UART_SetConfig+0x1fe>
 8005816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800581a:	d006      	beq.n	800582a <UART_SetConfig+0x20a>
 800581c:	e00b      	b.n	8005836 <UART_SetConfig+0x216>
 800581e:	2300      	movs	r3, #0
 8005820:	77fb      	strb	r3, [r7, #31]
 8005822:	e0a0      	b.n	8005966 <UART_SetConfig+0x346>
 8005824:	2302      	movs	r3, #2
 8005826:	77fb      	strb	r3, [r7, #31]
 8005828:	e09d      	b.n	8005966 <UART_SetConfig+0x346>
 800582a:	2304      	movs	r3, #4
 800582c:	77fb      	strb	r3, [r7, #31]
 800582e:	e09a      	b.n	8005966 <UART_SetConfig+0x346>
 8005830:	2308      	movs	r3, #8
 8005832:	77fb      	strb	r3, [r7, #31]
 8005834:	e097      	b.n	8005966 <UART_SetConfig+0x346>
 8005836:	2310      	movs	r3, #16
 8005838:	77fb      	strb	r3, [r7, #31]
 800583a:	e094      	b.n	8005966 <UART_SetConfig+0x346>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a30      	ldr	r2, [pc, #192]	; (8005904 <UART_SetConfig+0x2e4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d125      	bne.n	8005892 <UART_SetConfig+0x272>
 8005846:	4b2a      	ldr	r3, [pc, #168]	; (80058f0 <UART_SetConfig+0x2d0>)
 8005848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005850:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005854:	d017      	beq.n	8005886 <UART_SetConfig+0x266>
 8005856:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800585a:	d817      	bhi.n	800588c <UART_SetConfig+0x26c>
 800585c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005860:	d00b      	beq.n	800587a <UART_SetConfig+0x25a>
 8005862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005866:	d811      	bhi.n	800588c <UART_SetConfig+0x26c>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <UART_SetConfig+0x254>
 800586c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005870:	d006      	beq.n	8005880 <UART_SetConfig+0x260>
 8005872:	e00b      	b.n	800588c <UART_SetConfig+0x26c>
 8005874:	2301      	movs	r3, #1
 8005876:	77fb      	strb	r3, [r7, #31]
 8005878:	e075      	b.n	8005966 <UART_SetConfig+0x346>
 800587a:	2302      	movs	r3, #2
 800587c:	77fb      	strb	r3, [r7, #31]
 800587e:	e072      	b.n	8005966 <UART_SetConfig+0x346>
 8005880:	2304      	movs	r3, #4
 8005882:	77fb      	strb	r3, [r7, #31]
 8005884:	e06f      	b.n	8005966 <UART_SetConfig+0x346>
 8005886:	2308      	movs	r3, #8
 8005888:	77fb      	strb	r3, [r7, #31]
 800588a:	e06c      	b.n	8005966 <UART_SetConfig+0x346>
 800588c:	2310      	movs	r3, #16
 800588e:	77fb      	strb	r3, [r7, #31]
 8005890:	e069      	b.n	8005966 <UART_SetConfig+0x346>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1c      	ldr	r2, [pc, #112]	; (8005908 <UART_SetConfig+0x2e8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d137      	bne.n	800590c <UART_SetConfig+0x2ec>
 800589c:	4b14      	ldr	r3, [pc, #80]	; (80058f0 <UART_SetConfig+0x2d0>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80058a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058aa:	d017      	beq.n	80058dc <UART_SetConfig+0x2bc>
 80058ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058b0:	d817      	bhi.n	80058e2 <UART_SetConfig+0x2c2>
 80058b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b6:	d00b      	beq.n	80058d0 <UART_SetConfig+0x2b0>
 80058b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058bc:	d811      	bhi.n	80058e2 <UART_SetConfig+0x2c2>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <UART_SetConfig+0x2aa>
 80058c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c6:	d006      	beq.n	80058d6 <UART_SetConfig+0x2b6>
 80058c8:	e00b      	b.n	80058e2 <UART_SetConfig+0x2c2>
 80058ca:	2300      	movs	r3, #0
 80058cc:	77fb      	strb	r3, [r7, #31]
 80058ce:	e04a      	b.n	8005966 <UART_SetConfig+0x346>
 80058d0:	2302      	movs	r3, #2
 80058d2:	77fb      	strb	r3, [r7, #31]
 80058d4:	e047      	b.n	8005966 <UART_SetConfig+0x346>
 80058d6:	2304      	movs	r3, #4
 80058d8:	77fb      	strb	r3, [r7, #31]
 80058da:	e044      	b.n	8005966 <UART_SetConfig+0x346>
 80058dc:	2308      	movs	r3, #8
 80058de:	77fb      	strb	r3, [r7, #31]
 80058e0:	e041      	b.n	8005966 <UART_SetConfig+0x346>
 80058e2:	2310      	movs	r3, #16
 80058e4:	77fb      	strb	r3, [r7, #31]
 80058e6:	e03e      	b.n	8005966 <UART_SetConfig+0x346>
 80058e8:	efff69f3 	.word	0xefff69f3
 80058ec:	40011000 	.word	0x40011000
 80058f0:	40023800 	.word	0x40023800
 80058f4:	40004400 	.word	0x40004400
 80058f8:	40004800 	.word	0x40004800
 80058fc:	40004c00 	.word	0x40004c00
 8005900:	40005000 	.word	0x40005000
 8005904:	40011400 	.word	0x40011400
 8005908:	40007800 	.word	0x40007800
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a71      	ldr	r2, [pc, #452]	; (8005ad8 <UART_SetConfig+0x4b8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d125      	bne.n	8005962 <UART_SetConfig+0x342>
 8005916:	4b71      	ldr	r3, [pc, #452]	; (8005adc <UART_SetConfig+0x4bc>)
 8005918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005920:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005924:	d017      	beq.n	8005956 <UART_SetConfig+0x336>
 8005926:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800592a:	d817      	bhi.n	800595c <UART_SetConfig+0x33c>
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005930:	d00b      	beq.n	800594a <UART_SetConfig+0x32a>
 8005932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005936:	d811      	bhi.n	800595c <UART_SetConfig+0x33c>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <UART_SetConfig+0x324>
 800593c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005940:	d006      	beq.n	8005950 <UART_SetConfig+0x330>
 8005942:	e00b      	b.n	800595c <UART_SetConfig+0x33c>
 8005944:	2300      	movs	r3, #0
 8005946:	77fb      	strb	r3, [r7, #31]
 8005948:	e00d      	b.n	8005966 <UART_SetConfig+0x346>
 800594a:	2302      	movs	r3, #2
 800594c:	77fb      	strb	r3, [r7, #31]
 800594e:	e00a      	b.n	8005966 <UART_SetConfig+0x346>
 8005950:	2304      	movs	r3, #4
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	e007      	b.n	8005966 <UART_SetConfig+0x346>
 8005956:	2308      	movs	r3, #8
 8005958:	77fb      	strb	r3, [r7, #31]
 800595a:	e004      	b.n	8005966 <UART_SetConfig+0x346>
 800595c:	2310      	movs	r3, #16
 800595e:	77fb      	strb	r3, [r7, #31]
 8005960:	e001      	b.n	8005966 <UART_SetConfig+0x346>
 8005962:	2310      	movs	r3, #16
 8005964:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800596e:	d15b      	bne.n	8005a28 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005970:	7ffb      	ldrb	r3, [r7, #31]
 8005972:	2b08      	cmp	r3, #8
 8005974:	d827      	bhi.n	80059c6 <UART_SetConfig+0x3a6>
 8005976:	a201      	add	r2, pc, #4	; (adr r2, 800597c <UART_SetConfig+0x35c>)
 8005978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597c:	080059a1 	.word	0x080059a1
 8005980:	080059a9 	.word	0x080059a9
 8005984:	080059b1 	.word	0x080059b1
 8005988:	080059c7 	.word	0x080059c7
 800598c:	080059b7 	.word	0x080059b7
 8005990:	080059c7 	.word	0x080059c7
 8005994:	080059c7 	.word	0x080059c7
 8005998:	080059c7 	.word	0x080059c7
 800599c:	080059bf 	.word	0x080059bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a0:	f7fe feda 	bl	8004758 <HAL_RCC_GetPCLK1Freq>
 80059a4:	61b8      	str	r0, [r7, #24]
        break;
 80059a6:	e013      	b.n	80059d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059a8:	f7fe feea 	bl	8004780 <HAL_RCC_GetPCLK2Freq>
 80059ac:	61b8      	str	r0, [r7, #24]
        break;
 80059ae:	e00f      	b.n	80059d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059b0:	4b4b      	ldr	r3, [pc, #300]	; (8005ae0 <UART_SetConfig+0x4c0>)
 80059b2:	61bb      	str	r3, [r7, #24]
        break;
 80059b4:	e00c      	b.n	80059d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059b6:	f7fe fe0d 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 80059ba:	61b8      	str	r0, [r7, #24]
        break;
 80059bc:	e008      	b.n	80059d0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059c2:	61bb      	str	r3, [r7, #24]
        break;
 80059c4:	e004      	b.n	80059d0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	77bb      	strb	r3, [r7, #30]
        break;
 80059ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d074      	beq.n	8005ac0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	005a      	lsls	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	085b      	lsrs	r3, r3, #1
 80059e0:	441a      	add	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b0f      	cmp	r3, #15
 80059f2:	d916      	bls.n	8005a22 <UART_SetConfig+0x402>
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059fa:	d212      	bcs.n	8005a22 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f023 030f 	bic.w	r3, r3, #15
 8005a04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	085b      	lsrs	r3, r3, #1
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	89fb      	ldrh	r3, [r7, #14]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	89fa      	ldrh	r2, [r7, #14]
 8005a1e:	60da      	str	r2, [r3, #12]
 8005a20:	e04e      	b.n	8005ac0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	77bb      	strb	r3, [r7, #30]
 8005a26:	e04b      	b.n	8005ac0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a28:	7ffb      	ldrb	r3, [r7, #31]
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d827      	bhi.n	8005a7e <UART_SetConfig+0x45e>
 8005a2e:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <UART_SetConfig+0x414>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a59 	.word	0x08005a59
 8005a38:	08005a61 	.word	0x08005a61
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	08005a7f 	.word	0x08005a7f
 8005a44:	08005a6f 	.word	0x08005a6f
 8005a48:	08005a7f 	.word	0x08005a7f
 8005a4c:	08005a7f 	.word	0x08005a7f
 8005a50:	08005a7f 	.word	0x08005a7f
 8005a54:	08005a77 	.word	0x08005a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a58:	f7fe fe7e 	bl	8004758 <HAL_RCC_GetPCLK1Freq>
 8005a5c:	61b8      	str	r0, [r7, #24]
        break;
 8005a5e:	e013      	b.n	8005a88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a60:	f7fe fe8e 	bl	8004780 <HAL_RCC_GetPCLK2Freq>
 8005a64:	61b8      	str	r0, [r7, #24]
        break;
 8005a66:	e00f      	b.n	8005a88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a68:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <UART_SetConfig+0x4c0>)
 8005a6a:	61bb      	str	r3, [r7, #24]
        break;
 8005a6c:	e00c      	b.n	8005a88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a6e:	f7fe fdb1 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 8005a72:	61b8      	str	r0, [r7, #24]
        break;
 8005a74:	e008      	b.n	8005a88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a7a:	61bb      	str	r3, [r7, #24]
        break;
 8005a7c:	e004      	b.n	8005a88 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	77bb      	strb	r3, [r7, #30]
        break;
 8005a86:	bf00      	nop
    }

    if (pclk != 0U)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d018      	beq.n	8005ac0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	085a      	lsrs	r2, r3, #1
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	441a      	add	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b0f      	cmp	r3, #15
 8005aa8:	d908      	bls.n	8005abc <UART_SetConfig+0x49c>
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab0:	d204      	bcs.n	8005abc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	60da      	str	r2, [r3, #12]
 8005aba:	e001      	b.n	8005ac0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005acc:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3720      	adds	r7, #32
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40007c00 	.word	0x40007c00
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	00f42400 	.word	0x00f42400

08005ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00a      	beq.n	8005b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01a      	beq.n	8005bfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005be2:	d10a      	bne.n	8005bfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	605a      	str	r2, [r3, #4]
  }
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c38:	f7fc fc16 	bl	8002468 <HAL_GetTick>
 8005c3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d10e      	bne.n	8005c6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f82d 	bl	8005cba <UART_WaitOnFlagUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e023      	b.n	8005cb2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d10e      	bne.n	8005c96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f817 	bl	8005cba <UART_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e00d      	b.n	8005cb2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	603b      	str	r3, [r7, #0]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cca:	e05e      	b.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd2:	d05a      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd4:	f7fc fbc8 	bl	8002468 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d302      	bcc.n	8005cea <UART_WaitOnFlagUntilTimeout+0x30>
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d11b      	bne.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cf8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0201 	bic.w	r2, r2, #1
 8005d08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e043      	b.n	8005daa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d02c      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d3e:	d124      	bne.n	8005d8a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d58:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0201 	bic.w	r2, r2, #1
 8005d68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e00f      	b.n	8005daa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4013      	ands	r3, r2
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	bf0c      	ite	eq
 8005d9a:	2301      	moveq	r3, #1
 8005d9c:	2300      	movne	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d091      	beq.n	8005ccc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d027      	beq.n	8005e1e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <FMC_SDRAM_Init+0xe0>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005de4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005dea:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005df0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005df6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005dfc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005e02:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005e08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005e0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e032      	b.n	8005e84 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e2a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e34:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005e3a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	4b12      	ldr	r3, [pc, #72]	; (8005e94 <FMC_SDRAM_Init+0xe0>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e58:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8005e5e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8005e64:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8005e6a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8005e70:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	ffff8000 	.word	0xffff8000

08005e98 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d02e      	beq.n	8005f10 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ebe:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005ece:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005ed8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005ee2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005eec:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005ef6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f00:	4313      	orrs	r3, r2
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	609a      	str	r2, [r3, #8]
 8005f0e:	e039      	b.n	8005f84 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4b1e      	ldr	r3, [pc, #120]	; (8005f94 <FMC_SDRAM_Timing_Init+0xfc>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f42:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f52:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005f5c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005f66:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005f70:	4313      	orrs	r3, r2
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	ff0f0fff 	.word	0xff0f0fff

08005f98 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <FMC_SDRAM_SendCommand+0x44>)
 8005faa:	4013      	ands	r3, r2
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	6811      	ldr	r1, [r2, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	6852      	ldr	r2, [r2, #4]
 8005fb4:	4311      	orrs	r1, r2
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	6892      	ldr	r2, [r2, #8]
 8005fba:	3a01      	subs	r2, #1
 8005fbc:	0152      	lsls	r2, r2, #5
 8005fbe:	4311      	orrs	r1, r2
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	68d2      	ldr	r2, [r2, #12]
 8005fc4:	0252      	lsls	r2, r2, #9
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	ffc00000 	.word	0xffc00000

08005fe0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <_ZN7QAD_FMC8imp_initEv>:
//QAD_FMC Initialization Method
//
//To be called from static method init()
//Used to initialize the required GPIOs, FMC driver and SDRAM module
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAD_FMC::imp_init() {
 8006008:	b580      	push	{r7, lr}
 800600a:	b094      	sub	sp, #80	; 0x50
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

	//Return if FMC driver is already initialized
	if (m_eState)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <_ZN7QAD_FMC8imp_initEv+0x16>
		return QA_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	e0fc      	b.n	8006218 <_ZN7QAD_FMC8imp_initEv+0x210>


	//----------------
	//Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 800601e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	605a      	str	r2, [r3, #4]
 8006028:	609a      	str	r2, [r3, #8]
 800602a:	60da      	str	r2, [r3, #12]
 800602c:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set pins as alternate function in push-pull mode
 800602e:	2302      	movs	r3, #2
 8006030:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistors on pins
 8006032:	2301      	movs	r3, #1
 8006034:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set pin speed to very high
 8006036:	2303      	movs	r3, #3
 8006038:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_Init.Alternate = GPIO_AF12_FMC;              //Set alternate function to suit use with FMC peripheral
 800603a:	230c      	movs	r3, #12
 800603c:	64fb      	str	r3, [r7, #76]	; 0x4c

	  //Initialize required pins from GPIO port D
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 800603e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006042:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_Init);
 8006044:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006048:	4619      	mov	r1, r3
 800604a:	4875      	ldr	r0, [pc, #468]	; (8006220 <_ZN7QAD_FMC8imp_initEv+0x218>)
 800604c:	f7fd f89c 	bl	8003188 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port E
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8006050:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006054:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 8006056:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800605a:	4619      	mov	r1, r3
 800605c:	4871      	ldr	r0, [pc, #452]	; (8006224 <_ZN7QAD_FMC8imp_initEv+0x21c>)
 800605e:	f7fd f893 	bl	8003188 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port F
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8006062:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006066:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_Init);
 8006068:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800606c:	4619      	mov	r1, r3
 800606e:	486e      	ldr	r0, [pc, #440]	; (8006228 <_ZN7QAD_FMC8imp_initEv+0x220>)
 8006070:	f7fd f88a 	bl	8003188 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port G
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8006074:	f248 1337 	movw	r3, #33079	; 0x8137
 8006078:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_Init);
 800607a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800607e:	4619      	mov	r1, r3
 8006080:	486a      	ldr	r0, [pc, #424]	; (800622c <_ZN7QAD_FMC8imp_initEv+0x224>)
 8006082:	f7fd f881 	bl	8003188 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port H
	GPIO_Init.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8006086:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800608a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_Init);
 800608c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006090:	4619      	mov	r1, r3
 8006092:	4867      	ldr	r0, [pc, #412]	; (8006230 <_ZN7QAD_FMC8imp_initEv+0x228>)
 8006094:	f7fd f878 	bl	8003188 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port I
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
 8006098:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_Init);
 800609e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80060a2:	4619      	mov	r1, r3
 80060a4:	4863      	ldr	r0, [pc, #396]	; (8006234 <_ZN7QAD_FMC8imp_initEv+0x22c>)
 80060a6:	f7fd f86f 	bl	8003188 <HAL_GPIO_Init>

	//-------------------------
	//Initialize FMC Peripheral

	//Initialize FMC Clock
	__HAL_RCC_FMC_CLK_ENABLE();
 80060aa:	4b63      	ldr	r3, [pc, #396]	; (8006238 <_ZN7QAD_FMC8imp_initEv+0x230>)
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	4a62      	ldr	r2, [pc, #392]	; (8006238 <_ZN7QAD_FMC8imp_initEv+0x230>)
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	6393      	str	r3, [r2, #56]	; 0x38
 80060b6:	4b60      	ldr	r3, [pc, #384]	; (8006238 <_ZN7QAD_FMC8imp_initEv+0x230>)
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]

	//Fill FMC initialization details into Handle structure
	//NOTE: The settings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	m_sHandle.Instance                = FMC_SDRAM_DEVICE;                     //Set FMC SDRAM Device as required instance
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a5d      	ldr	r2, [pc, #372]	; (800623c <_ZN7QAD_FMC8imp_initEv+0x234>)
 80060c6:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.SDBank             = FMC_SDRAM_BANK1;                      //Set SDRAM as being connected to FMCs SDRAM bank 1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38
	m_sHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;          //Set size of column address to 8 bits
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	63da      	str	r2, [r3, #60]	; 0x3c
	m_sHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;            //Set size of row address to 12 bits
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2204      	movs	r2, #4
 80060d8:	641a      	str	r2, [r3, #64]	; 0x40
	m_sHandle.Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;           //Set data bus width to 32 bits
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2220      	movs	r2, #32
 80060de:	645a      	str	r2, [r3, #68]	; 0x44
	m_sHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;         //Set number of SDRAM module internal banks to 4
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2240      	movs	r2, #64	; 0x40
 80060e4:	649a      	str	r2, [r3, #72]	; 0x48
	m_sHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;              //Set column address strobe (CAS) latency to 3 cycles
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80060ec:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;   //Disable write protection, as we want to be able to both read and write to SDRAM
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	651a      	str	r2, [r3, #80]	; 0x50
	m_sHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;             //Set SDRAM clock period to 2 clock cycles
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060fa:	655a      	str	r2, [r3, #84]	; 0x54
	m_sHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;              //Enable read burst
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006102:	659a      	str	r2, [r3, #88]	; 0x58
	m_sHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;              //Set read pipe delay to 0 clock cycles
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	65da      	str	r2, [r3, #92]	; 0x5c

	//Fill SDRAM timing details into timing structure
	//NOTE: The timings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	FMC_SDRAM_TimingTypeDef SDRAM_Timing = {0};
 800610a:	f107 0320 	add.w	r3, r7, #32
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	605a      	str	r2, [r3, #4]
 8006114:	609a      	str	r2, [r3, #8]
 8006116:	60da      	str	r2, [r3, #12]
 8006118:	611a      	str	r2, [r3, #16]
 800611a:	615a      	str	r2, [r3, #20]
 800611c:	619a      	str	r2, [r3, #24]
	SDRAM_Timing.LoadToActiveDelay    = 2;  //Set delay between a Load Mode Register command and an Active or Refresh command to 2 clock cycles
 800611e:	2302      	movs	r3, #2
 8006120:	623b      	str	r3, [r7, #32]
	SDRAM_Timing.ExitSelfRefreshDelay = 7;  //Set delay between releasing Self Refresh command and issuing of Active command to 7 clock cycles
 8006122:	2307      	movs	r3, #7
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
	SDRAM_Timing.SelfRefreshTime      = 4;  //Set minimum Self Refresh period to 4 clock cycles
 8006126:	2304      	movs	r3, #4
 8006128:	62bb      	str	r3, [r7, #40]	; 0x28
	SDRAM_Timing.RowCycleDelay        = 7;  //Set delay between Refresh command and Activate command, or between consecutive Refresh commands to 7 clock cycles
 800612a:	2307      	movs	r3, #7
 800612c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SDRAM_Timing.WriteRecoveryTime    = 2;  //Set Write Recovery Time to 2 clock cycles
 800612e:	2302      	movs	r3, #2
 8006130:	633b      	str	r3, [r7, #48]	; 0x30
	SDRAM_Timing.RPDelay              = 2;  //Set delay between a Precharge command and any other command to 2 clock cycles
 8006132:	2302      	movs	r3, #2
 8006134:	637b      	str	r3, [r7, #52]	; 0x34
	SDRAM_Timing.RCDDelay             = 2;  //Set delay between an Activate command and a Read/Write command to 2 clock cycles
 8006136:	2302      	movs	r3, #2
 8006138:	63bb      	str	r3, [r7, #56]	; 0x38

	//Initialize the FMC peripheral using the required settings and timings to suit the specific SDRAM module
	if (HAL_SDRAM_Init(&m_sHandle, &SDRAM_Timing) != HAL_OK) {
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3334      	adds	r3, #52	; 0x34
 800613e:	f107 0220 	add.w	r2, r7, #32
 8006142:	4611      	mov	r1, r2
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff f947 	bl	80053d8 <HAL_SDRAM_Init>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	bf14      	ite	ne
 8006150:	2301      	movne	r3, #1
 8006152:	2300      	moveq	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <_ZN7QAD_FMC8imp_initEv+0x156>
		return QA_Fail;
 800615a:	2301      	movs	r3, #1
 800615c:	e05c      	b.n	8006218 <_ZN7QAD_FMC8imp_initEv+0x210>
	}

  //-------------------
	//Initialize SDRAM IC

	FMC_SDRAM_CommandTypeDef  SDRAM_Cmd = {0};
 800615e:	f107 0310 	add.w	r3, r7, #16
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	605a      	str	r2, [r3, #4]
 8006168:	609a      	str	r2, [r3, #8]
 800616a:	60da      	str	r2, [r3, #12]

		//Send command to SDRAM module to enable its clock
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;   //Set to Clock Enable Command
 800616c:	2301      	movs	r3, #1
 800616e:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006170:	2310      	movs	r3, #16
 8006172:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 8006174:	2301      	movs	r3, #1
 8006176:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 800617c:	f107 0310 	add.w	r3, r7, #16
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f890 	bl	80062a8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Delay for 1ms to allow time for SDRAM clock to enable
	HAL_Delay(1);
 8006188:	2001      	movs	r0, #1
 800618a:	f7fc f979 	bl	8002480 <HAL_Delay>

		//Send command to SDRAM module to precharge all banks
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_PALL;  //Set to Precharge All command
 800618e:	2302      	movs	r3, #2
 8006190:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006192:	2310      	movs	r3, #16
 8006194:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 8006196:	2301      	movs	r3, #1
 8006198:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 800619e:	f107 0310 	add.w	r3, r7, #16
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f87f 	bl	80062a8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Send command to SDRAM module to Configure Auto Refresh
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; //Set to Auto Refresh Mode command
 80061aa:	2303      	movs	r3, #3
 80061ac:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80061ae:	2310      	movs	r3, #16
 80061b0:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 8;                              //Set number of consecutive auto refresh commands to 8
 80061b2:	2308      	movs	r3, #8
 80061b4:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 80061ba:	f107 0310 	add.w	r3, r7, #16
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f871 	bl	80062a8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Program Mode Register
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;        //Set to Load Mode Register command
 80061c6:	2304      	movs	r3, #4
 80061c8:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80061ca:	2310      	movs	r3, #16
 80061cc:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 80061ce:	2301      	movs	r3, #1
 80061d0:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681a      	ldr	r2, [r3, #0]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 80061da:	431a      	orrs	r2, r3
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	69db      	ldr	r3, [r3, #28]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 80061e0:	431a      	orrs	r2, r3
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 80061e6:	431a      	orrs	r2, r3
																		 m_uModeReg_WriteBurst_Single;   //Set write burst length to 1 32bit word
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 80061ec:	4313      	orrs	r3, r2
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 80061ee:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 80061f0:	f107 0310 	add.w	r3, r7, #16
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f856 	bl	80062a8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>


	//---------------------------------
	//Program SDRAM module refresh rate
	HAL_SDRAM_ProgramRefreshRate(&m_sHandle, m_uRefresh);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006206:	4619      	mov	r1, r3
 8006208:	4610      	mov	r0, r2
 800620a:	f7ff f94e 	bl	80054aa <HAL_SDRAM_ProgramRefreshRate>

	//Set Driver State
	m_eState = QA_Initialized; //Set driver as being initializeed
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	//Return
	return QA_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3750      	adds	r7, #80	; 0x50
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	40020c00 	.word	0x40020c00
 8006224:	40021000 	.word	0x40021000
 8006228:	40021400 	.word	0x40021400
 800622c:	40021800 	.word	0x40021800
 8006230:	40021c00 	.word	0x40021c00
 8006234:	40022000 	.word	0x40022000
 8006238:	40023800 	.word	0x40023800
 800623c:	a0000140 	.word	0xa0000140

08006240 <_ZN7QAD_FMC8imp_testEv>:
//QAD_FMC::imp_test
//QAD_FMC Test Method
//
//Used to perform read and write test of full 16 megabytes of SDRAM
//Returns QA_OK if test passes, or QA_Fail if test is not successful
QA_Result QAD_FMC::imp_test(void) {
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]

	//Write values to whole 16 megabytes of SDRAM
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006252:	d209      	bcs.n	8006268 <_ZN7QAD_FMC8imp_testEv+0x28>
		QAD_FMC_Data->words[i] = i;
 8006254:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3301      	adds	r3, #1
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	e7f1      	b.n	800624c <_ZN7QAD_FMC8imp_testEv+0xc>
	}

	//Read values from while 16 megabytes of SDRAM, and confirm that they match the values that were written to it
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8006268:	2300      	movs	r3, #0
 800626a:	60bb      	str	r3, [r7, #8]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006272:	d212      	bcs.n	800629a <_ZN7QAD_FMC8imp_testEv+0x5a>

		//If data read doesn't match data written then return QA_Fail
		if (QAD_FMC_Data->words[i] != i)
 8006274:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	429a      	cmp	r2, r3
 8006282:	bf14      	ite	ne
 8006284:	2301      	movne	r3, #1
 8006286:	2300      	moveq	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <_ZN7QAD_FMC8imp_testEv+0x52>
			return QA_Fail;
 800628e:	2301      	movs	r3, #1
 8006290:	e004      	b.n	800629c <_ZN7QAD_FMC8imp_testEv+0x5c>
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	3301      	adds	r3, #1
 8006296:	60bb      	str	r3, [r7, #8]
 8006298:	e7e8      	b.n	800626c <_ZN7QAD_FMC8imp_testEv+0x2c>
	}

	//Return QA_OK as if we reach this point then the test has passed
	return QA_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>:
//QAD_FMC::cmd
//QAD_FMC Initialization Method
//
//Used to send commands to SDRAM module
//pCmd - FMC_SDRAM_CommandTypeDef containing details of command to be sent to SDRAM module
void QAD_FMC::cmd(FMC_SDRAM_CommandTypeDef& pCmd) {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
	HAL_SDRAM_SendCommand(&m_sHandle, &pCmd, m_uTimeout);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	461a      	mov	r2, r3
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	f7ff f8c8 	bl	8005454 <HAL_SDRAM_SendCommand>
}
 80062c4:	bf00      	nop
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	88fa      	ldrh	r2, [r7, #6]
 80062e4:	809a      	strh	r2, [r3, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	719a      	strb	r2, [r3, #6]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	609a      	str	r2, [r3, #8]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	60da      	str	r2, [r3, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f841 	bl	8006386 <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	889b      	ldrh	r3, [r3, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	4619      	mov	r1, r3
 8006322:	f7fd f9e9 	bl	80036f8 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	741a      	strb	r2, [r3, #16]
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	889b      	ldrh	r3, [r3, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	4619      	mov	r1, r3
 8006348:	f7fd f9d6 	bl	80036f8 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	741a      	strb	r2, [r3, #16]
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 800635a:	b580      	push	{r7, lr}
 800635c:	b082      	sub	sp, #8
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	7c1b      	ldrb	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 800636a:	2b01      	cmp	r3, #1
 800636c:	d107      	bne.n	800637e <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff ffe0 	bl	8006334 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8006374:	e003      	b.n	800637e <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff ffc9 	bl	800630e <_ZN15QAD_GPIO_Output2onEv>
	    break;
 800637c:	bf00      	nop
	}
}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8006386:	b580      	push	{r7, lr}
 8006388:	b088      	sub	sp, #32
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 800638e:	f107 030c 	add.w	r3, r7, #12
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	605a      	str	r2, [r3, #4]
 8006398:	609a      	str	r2, [r3, #8]
 800639a:	60da      	str	r2, [r3, #12]
 800639c:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	889b      	ldrh	r3, [r3, #4]
 80063a2:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	799b      	ldrb	r3, [r3, #6]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 80063ac:	2311      	movs	r3, #17
 80063ae:	e000      	b.n	80063b2 <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 80063b0:	2301      	movs	r3, #1
 80063b2:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f107 020c 	add.w	r2, r7, #12
 80063c8:	4611      	mov	r1, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fc fedc 	bl	8003188 <HAL_GPIO_Init>
}
 80063d0:	bf00      	nop
 80063d2:	3720      	adds	r7, #32
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Input Constructor
//
//This method will initialize the required GPIO pin with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Input::QAD_GPIO_Input(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
		m_pGPIO(pGPIO),
		m_uPin(uPin),
		m_ePullMode(QAD_GPIO_PullMode_NoPull) {
 80063e6:	4a0a      	ldr	r2, [pc, #40]	; (8006410 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft+0x38>)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	605a      	str	r2, [r3, #4]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	88fa      	ldrh	r2, [r7, #6]
 80063f6:	811a      	strh	r2, [r3, #8]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	60da      	str	r2, [r3, #12]

	//Initialize the GPIO pin
	periphInit();
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 f817 	bl	8006432 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	08009ea0 	.word	0x08009ea0

08006414 <_ZN14QAD_GPIO_Input11setPullModeE17QAD_GPIO_PullMode>:
//QAD_GPIO_Input::setPullMode
//QAD_GPIO_Input Control Method
//
//Sets new pull mode (Pull-up, Pull-down or No-pull)
//ePull - New pull mode. Member of QAD_GPIO_PullMode as defined in QAD_GPIO.hpp
void QAD_GPIO_Input::setPullMode(QAD_GPIO_PullMode ePull) {
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]

	//Store new Pull mode setting
	m_ePullMode = ePull;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	60da      	str	r2, [r3, #12]

	//Reinitialize peripheral with new Pull mode
	periphInit();
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f804 	bl	8006432 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 800642a:	bf00      	nop
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <_ZN14QAD_GPIO_Input10periphInitEv>:
//QAD_GPIO_Input::periphInit
//QAD_GPIO_Input Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Input::periphInit(void) {
 8006432:	b580      	push	{r7, lr}
 8006434:	b088      	sub	sp, #32
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_Init = {0};
 800643a:	f107 030c 	add.w	r3, r7, #12
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	605a      	str	r2, [r3, #4]
 8006444:	609a      	str	r2, [r3, #8]
 8006446:	60da      	str	r2, [r3, #12]
 8006448:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	891b      	ldrh	r3, [r3, #8]
 800644e:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = GPIO_MODE_INPUT;
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 800645a:	2300      	movs	r3, #0
 800645c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f107 020c 	add.w	r2, r7, #12
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f7fc fe8d 	bl	8003188 <HAL_GPIO_Init>
}
 800646e:	bf00      	nop
 8006470:	3720      	adds	r7, #32
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <_ZN8QAD_LTDCC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_LTDC() :
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized) {}
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f646 3225 	movw	r2, #27429	; 0x6b25
 800648a:	605a      	str	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f24f 4224 	movw	r2, #62500	; 0xf424
 8006492:	609a      	str	r2, [r3, #8]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f643 5209 	movw	r2, #15625	; 0x3d09
 800649a:	60da      	str	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <_ZN8QAD_LTDC3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_LTDC& get(void) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
		static QAD_LTDC instance;
 80064b0:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <_ZN8QAD_LTDC3getEv+0x48>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	f3bf 8f5b 	dmb	ish
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bf0c      	ite	eq
 80064c2:	2301      	moveq	r3, #1
 80064c4:	2300      	movne	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d010      	beq.n	80064ee <_ZN8QAD_LTDC3getEv+0x42>
 80064cc:	4809      	ldr	r0, [pc, #36]	; (80064f4 <_ZN8QAD_LTDC3getEv+0x48>)
 80064ce:	f002 fd64 	bl	8008f9a <__cxa_guard_acquire>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bf14      	ite	ne
 80064d8:	2301      	movne	r3, #1
 80064da:	2300      	moveq	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <_ZN8QAD_LTDC3getEv+0x42>
 80064e2:	4805      	ldr	r0, [pc, #20]	; (80064f8 <_ZN8QAD_LTDC3getEv+0x4c>)
 80064e4:	f7ff ffc7 	bl	8006476 <_ZN8QAD_LTDCC1Ev>
 80064e8:	4802      	ldr	r0, [pc, #8]	; (80064f4 <_ZN8QAD_LTDC3getEv+0x48>)
 80064ea:	f002 fd62 	bl	8008fb2 <__cxa_guard_release>
		return instance;
 80064ee:	4b02      	ldr	r3, [pc, #8]	; (80064f8 <_ZN8QAD_LTDC3getEv+0x4c>)
	}
 80064f0:	4618      	mov	r0, r3
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	200002ec 	.word	0x200002ec
 80064f8:	200001a0 	.word	0x200001a0

080064fc <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>:
	//Communication Methods

	//Used to allow OTM8009A driver (in otm8009a.h file) to communicate with OTM8009A display controller via DSI
	//uNumParams - The number of parameters being supplied
	//pParams    - Pointer to the list of parameters to be supplied
	static void dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
		get().imp_dsi_IO_WriteCmd(uNumParams, pParams);
 8006506:	f7ff ffd1 	bl	80064ac <_ZN8QAD_LTDC3getEv>
 800650a:	4603      	mov	r3, r0
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 faeb 	bl	8006aec <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>
	}
 8006516:	bf00      	nop
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <_ZN8QAD_LTDC8imp_initEv>:
//QAD_LTDC Initialization Method
//
//To be called from static method init()
//Used to initialize the DSI and LTDC peripherals, LTDC layers, the OTM8009A display controller and the required reset and backlight control GPIO pins
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails.
QA_Result QAD_LTDC::imp_init(void) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b0a2      	sub	sp, #136	; 0x88
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]

  //Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 8006528:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	609a      	str	r2, [r3, #8]
 8006534:	60da      	str	r2, [r3, #12]
 8006536:	611a      	str	r2, [r3, #16]

	  //Initialize Backlight Control Pin
	GPIO_Init.Pin    = QAD_LTDC_BACKLIGHT_PIN;          //Set pin number. (QAD_LTDC_BACKLIGHT_PIN is defined in setup.hpp)
 8006538:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800653c:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 800653e:	2301      	movs	r3, #1
 8006540:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLDOWN;                   //Enable pull-down resistor so backlight defaults to off
 8006542:	2302      	movs	r3, #2
 8006544:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 8006546:	2300      	movs	r3, #0
 8006548:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_BACKLIGHT_PORT, &GPIO_Init); //Initialize pin. (QAD_LTDC_BACKLIGHT_PORT is defined in setup.hpp)
 800654a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800654e:	4619      	mov	r1, r3
 8006550:	4897      	ldr	r0, [pc, #604]	; (80067b0 <_ZN8QAD_LTDC8imp_initEv+0x290>)
 8006552:	f7fc fe19 	bl	8003188 <HAL_GPIO_Init>

		//Initialize OTM8009A Controller Reset Pin
	GPIO_Init.Pin    = QAD_LTDC_RESET_PIN;              //Set pin number. (QAD_LTDC_RESET_PIN is defined in setup.hpp)
 8006556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800655a:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 800655c:	2301      	movs	r3, #1
 800655e:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLUP;                     //Enable pull-up resistor as reset is active-low
 8006560:	2301      	movs	r3, #1
 8006562:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 8006564:	2300      	movs	r3, #0
 8006566:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_RESET_PORT, &GPIO_Init);     //Initialize pin. (QAD_LTDC_RESET_PORT is defined in setup.hpp)
 8006568:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800656c:	4619      	mov	r1, r3
 800656e:	4891      	ldr	r0, [pc, #580]	; (80067b4 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8006570:	f7fc fe0a 	bl	8003188 <HAL_GPIO_Init>


	//Reset OTM8009A Controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET); //Pull reset pin low
 8006574:	2200      	movs	r2, #0
 8006576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800657a:	488e      	ldr	r0, [pc, #568]	; (80067b4 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 800657c:	f7fd f8bc 	bl	80036f8 <HAL_GPIO_WritePin>
	HAL_Delay(20);                                                              //Delay for 20ms to allow for reset process
 8006580:	2014      	movs	r0, #20
 8006582:	f7fb ff7d 	bl	8002480 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);   //Pull reset pin high
 8006586:	2201      	movs	r2, #1
 8006588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800658c:	4889      	ldr	r0, [pc, #548]	; (80067b4 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 800658e:	f7fd f8b3 	bl	80036f8 <HAL_GPIO_WritePin>
	HAL_Delay(10);                                                              //Delay for 10ms to allow reset process time to complete
 8006592:	200a      	movs	r0, #10
 8006594:	f7fb ff74 	bl	8002480 <HAL_Delay>


	//Initialize LTDC Peripheral Clock
	__HAL_RCC_LTDC_CLK_ENABLE();
 8006598:	4b87      	ldr	r3, [pc, #540]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 800659a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659c:	4a86      	ldr	r2, [pc, #536]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 800659e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065a2:	6453      	str	r3, [r2, #68]	; 0x44
 80065a4:	4b84      	ldr	r3, [pc, #528]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80065a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_LTDC_FORCE_RESET();
 80065b0:	4b81      	ldr	r3, [pc, #516]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	4a80      	ldr	r2, [pc, #512]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80065b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065ba:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_LTDC_RELEASE_RESET();
 80065bc:	4b7e      	ldr	r3, [pc, #504]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	4a7d      	ldr	r2, [pc, #500]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80065c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065c6:	6253      	str	r3, [r2, #36]	; 0x24

	//Initialize DSI Peripheral Clock
	__HAL_RCC_DSI_CLK_ENABLE();
 80065c8:	4b7b      	ldr	r3, [pc, #492]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80065ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065cc:	4a7a      	ldr	r2, [pc, #488]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80065ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065d2:	6453      	str	r3, [r2, #68]	; 0x44
 80065d4:	4b78      	ldr	r3, [pc, #480]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80065d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DSI_FORCE_RESET();
 80065e0:	4b75      	ldr	r3, [pc, #468]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	4a74      	ldr	r2, [pc, #464]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80065e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065ea:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_DSI_RELEASE_RESET();
 80065ec:	4b72      	ldr	r3, [pc, #456]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	4a71      	ldr	r2, [pc, #452]	; (80067b8 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80065f2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80065f6:	6253      	str	r3, [r2, #36]	; 0x24

	//Prepare Instances for DSI and LTDC handles (required if needing to call imp_deinit() due to failed initialization)
  m_sDSIHandle.Instance = DSI;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a70      	ldr	r2, [pc, #448]	; (80067bc <_ZN8QAD_LTDC8imp_initEv+0x29c>)
 80065fc:	611a      	str	r2, [r3, #16]
  m_sLTDCHandle.Instance = LTDC;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a6f      	ldr	r2, [pc, #444]	; (80067c0 <_ZN8QAD_LTDC8imp_initEv+0x2a0>)
 8006602:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  //-------------------------
  //Initialize DSI peripheral

  //Confirm DSI is currently uninitialized
  HAL_DSI_DeInit(&m_sDSIHandle);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3310      	adds	r3, #16
 800660a:	4618      	mov	r0, r3
 800660c:	f7fc fa02 	bl	8002a14 <HAL_DSI_DeInit>

  //Fill out DSI PLL Initialization structure as required for DSI to operate at required clock speed
  DSI_PLLInitTypeDef DSI_PLLInit = {0};
 8006610:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	605a      	str	r2, [r3, #4]
 800661a:	609a      	str	r2, [r3, #8]
  DSI_PLLInit.PLLNDIV = 100;
 800661c:	2364      	movs	r3, #100	; 0x64
 800661e:	64bb      	str	r3, [r7, #72]	; 0x48
  DSI_PLLInit.PLLIDF  = DSI_PLL_IN_DIV5;
 8006620:	2305      	movs	r3, #5
 8006622:	64fb      	str	r3, [r7, #76]	; 0x4c
  DSI_PLLInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8006624:	2300      	movs	r3, #0
 8006626:	653b      	str	r3, [r7, #80]	; 0x50

  //Fill out required DSI initialization details
  m_sDSIHandle.Init.NumberOfLanes = DSI_TWO_DATA_LANES;                   //Set DSI as using two data lanes
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	61da      	str	r2, [r3, #28]
  m_sDSIHandle.Init.TXEscapeCkdiv = m_uLCDLaneByteClk / m_uLCDClkDivisor; //Set TX Escape Clock Division
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	fbb2 f2f3 	udiv	r2, r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	619a      	str	r2, [r3, #24]

  //Initialize DSI, calling imp_deinit() if initialization fails
  if (HAL_DSI_Init(&m_sDSIHandle, &DSI_PLLInit) != HAL_OK) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3310      	adds	r3, #16
 8006642:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006646:	4611      	mov	r1, r2
 8006648:	4618      	mov	r0, r3
 800664a:	f7fc f8c9 	bl	80027e0 <HAL_DSI_Init>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	bf14      	ite	ne
 8006654:	2301      	movne	r3, #1
 8006656:	2300      	moveq	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <_ZN8QAD_LTDC8imp_initEv+0x148>
  	imp_deinit();
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f9e4 	bl	8006a2c <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8006664:	2301      	movs	r3, #1
 8006666:	e1db      	b.n	8006a20 <_ZN8QAD_LTDC8imp_initEv+0x500>

  //----------------------------------
  //Initialize DSI video configuration

  //Generate base DSI timing parameters
  uint32_t HACT = QAD_LTDC_WIDTH;    //Horizontal Active period in pixels
 8006668:	f44f 7348 	mov.w	r3, #800	; 0x320
 800666c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t VACT = QAD_LTDC_HEIGHT;   //Vertical Active period in pixels
 8006670:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t VSA  = 12;                //Period that vertical sync is active in pixels
 8006678:	230c      	movs	r3, #12
 800667a:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t VBP  = 12;                //Vertical Back Porch in pixels
 800667c:	230c      	movs	r3, #12
 800667e:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t VFP  = 12;                //Vertical Front Porch in pixels
 8006680:	230c      	movs	r3, #12
 8006682:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t HSA  = 63;                //Period that horizontal sync is active in pixels
 8006684:	233f      	movs	r3, #63	; 0x3f
 8006686:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t HBP  = 120;               //Horizontal Back Porch in pixels
 8006688:	2378      	movs	r3, #120	; 0x78
 800668a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t HFP  = 120;               //Horizontal Front Porch in pixels
 800668c:	2378      	movs	r3, #120	; 0x78
 800668e:	66bb      	str	r3, [r7, #104]	; 0x68

  //Fill out details of DSI Configuration Handle
  m_sDSICfgHandle.VirtualChannelID             = 0;                                      //Set virtual channel ID
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	62da      	str	r2, [r3, #44]	; 0x2c
  m_sDSICfgHandle.ColorCoding                  = DSI_RGB888;                             //Set pixel format to 24bit RGB (8bits for each Red, Green and Blue)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2205      	movs	r2, #5
 800669a:	631a      	str	r2, [r3, #48]	; 0x30
  m_sDSICfgHandle.VSPolarity                   = DSI_VSYNC_ACTIVE_HIGH;                  //Set Vertical Sync signal to active high
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	64da      	str	r2, [r3, #76]	; 0x4c
  m_sDSICfgHandle.HSPolarity                   = DSI_HSYNC_ACTIVE_HIGH;                  //Set Horizontal Sync signal to active high
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	649a      	str	r2, [r3, #72]	; 0x48
  m_sDSICfgHandle.DEPolarity                   = DSI_DATA_ENABLE_ACTIVE_HIGH;            //Set Data Enable signal to active high
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	651a      	str	r2, [r3, #80]	; 0x50
  m_sDSICfgHandle.Mode                         = DSI_VID_MODE_BURST;                     //Set Video Mode to burst mode
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2202      	movs	r2, #2
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38
  m_sDSICfgHandle.NullPacketSize               = 0xFFF;                                  //Set null packet size
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80066ba:	645a      	str	r2, [r3, #68]	; 0x44
  m_sDSICfgHandle.NumberOfChunks               = 0;                                      //Set number of chunks
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	641a      	str	r2, [r3, #64]	; 0x40
  m_sDSICfgHandle.PacketSize                   = HACT;                                   //Set packet size to horizontal active period
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80066c8:	63da      	str	r2, [r3, #60]	; 0x3c

  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80066d0:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 80066d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	655a      	str	r2, [r3, #84]	; 0x54

  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80066e6:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 80066ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	659a      	str	r2, [r3, #88]	; 0x58

  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 80066f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80066fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066fc:	441a      	add	r2, r3
 80066fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006700:	441a      	add	r2, r3
 8006702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006704:	4413      	add	r3, r2
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6892      	ldr	r2, [r2, #8]
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 800670a:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	fbb2 f2f3 	udiv	r2, r2, r3
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	65da      	str	r2, [r3, #92]	; 0x5c

  m_sDSICfgHandle.VerticalSyncActive           = VSA;                                    //Set duration for vertical sync signal
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800671e:	661a      	str	r2, [r3, #96]	; 0x60
  m_sDSICfgHandle.VerticalBackPorch            = VBP;                                    //Set duration for vertical back porch
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006724:	665a      	str	r2, [r3, #100]	; 0x64
  m_sDSICfgHandle.VerticalFrontPorch           = VFP;                                    //Set duration for vertical front porch
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800672a:	669a      	str	r2, [r3, #104]	; 0x68
  m_sDSICfgHandle.VerticalActive               = VACT;                                   //Set duration of vertical active period
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006732:	66da      	str	r2, [r3, #108]	; 0x6c

  m_sDSICfgHandle.LPCommandEnable              = DSI_LP_COMMAND_ENABLE;  //Enable DSI low power command
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800673a:	671a      	str	r2, [r3, #112]	; 0x70
  m_sDSICfgHandle.LPLargestPacketSize          = 16;                     //Set largest packet size for low power commands during VSA, VBP and VFP periods.
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2210      	movs	r2, #16
 8006740:	675a      	str	r2, [r3, #116]	; 0x74
  m_sDSICfgHandle.LPVACTLargestPacketSize      = 0;                      //Set largest packet size for low power commands during VACT period
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	679a      	str	r2, [r3, #120]	; 0x78
  m_sDSICfgHandle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;      //Enable low power horizontal front porch
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800674e:	67da      	str	r2, [r3, #124]	; 0x7c
  m_sDSICfgHandle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;      //Enable low power horizontal back porch
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  m_sDSICfgHandle.LPVerticalActiveEnable       = DSI_LP_VACT_ENABLE;     //Enable low power vertical active
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  m_sDSICfgHandle.LPVerticalFrontPorchEnable   = DSI_LP_VFP_ENABLE;      //Enable low power vertical front porch
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800676a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  m_sDSICfgHandle.LPVerticalBackPorchEnable    = DSI_LP_VBP_ENABLE;      //Enable low power vertical back porch
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006774:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  m_sDSICfgHandle.LPVerticalSyncActiveEnable   = DSI_LP_VSYNC_ENABLE;    //Enable low power vertical sync
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800677e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  //Configure DSI Video Mode,
  if (HAL_DSI_ConfigVideoMode(&m_sDSIHandle, &m_sDSICfgHandle) != HAL_OK) {
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f103 0210 	add.w	r2, r3, #16
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	332c      	adds	r3, #44	; 0x2c
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f7fc f9c8 	bl	8002b24 <HAL_DSI_ConfigVideoMode>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	bf14      	ite	ne
 800679a:	2301      	movne	r3, #1
 800679c:	2300      	moveq	r3, #0
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00f      	beq.n	80067c4 <_ZN8QAD_LTDC8imp_initEv+0x2a4>
  	imp_deinit();
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f941 	bl	8006a2c <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e138      	b.n	8006a20 <_ZN8QAD_LTDC8imp_initEv+0x500>
 80067ae:	bf00      	nop
 80067b0:	40022000 	.word	0x40022000
 80067b4:	40022400 	.word	0x40022400
 80067b8:	40023800 	.word	0x40023800
 80067bc:	40016c00 	.word	0x40016c00
 80067c0:	40016800 	.word	0x40016800

  //--------------------------
  //Initialize LTDC Peripheral

  //Fill out details for LTDC initialization
  m_sLTDCHandle.Init.HorizontalSync     = (HSA - 1);                              //Set horizontal syncronization width
 80067c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067c6:	1e5a      	subs	r2, r3, #1
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  m_sLTDCHandle.Init.AccumulatedHBP     = (HSA + HBP - 1);                        //Set accumulated horizontal back porch width
 80067ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80067d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d2:	4413      	add	r3, r2
 80067d4:	1e5a      	subs	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  m_sLTDCHandle.Init.AccumulatedActiveW = (QAD_LTDC_WIDTH + HSA + HBP - 1);       //Set accumulated active width
 80067dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80067de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e0:	4413      	add	r3, r2
 80067e2:	f203 321f 	addw	r2, r3, #799	; 0x31f
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  m_sLTDCHandle.Init.TotalWidth         = (QAD_LTDC_WIDTH + HSA + HBP + HFP - 1); //Set total width
 80067ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80067ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f0:	441a      	add	r2, r3
 80067f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067f4:	4413      	add	r3, r2
 80067f6:	f203 321f 	addw	r2, r3, #799	; 0x31f
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  m_sLTDCHandle.LayerCfg->ImageWidth    = QAD_LTDC_WIDTH;                         //Sets the frame buffer line length (in pixels)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006806:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  m_sLTDCHandle.LayerCfg->ImageHeight   = QAD_LTDC_HEIGHT;                        //Sets the number of frame buffer lines (height in pixels)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006810:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  m_sLTDCHandle.Init.Backcolor.Red      = 0;                                      //Set background color red value
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
  m_sLTDCHandle.Init.Backcolor.Green    = 0;                                      //Set background color green value
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
  m_sLTDCHandle.Init.Backcolor.Blue     = 255;                                    //Set background color blue value
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	22ff      	movs	r2, #255	; 0xff
 8006828:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  m_sLTDCHandle.Init.PCPolarity         = LTDC_PCPOLARITY_IPC;                    //Set pixel clock polarity to non-inverted
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  //Complete initialization structre details based on DSI Configuration, calling imp_deinit() if failed
  if (HAL_LTDC_StructInitFromVideoConfig(&m_sLTDCHandle, &m_sDSICfgHandle) != HAL_OK) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	332c      	adds	r3, #44	; 0x2c
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f7fd fa7d 	bl	8003d40 <HAL_LTDCEx_StructInitFromVideoConfig>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	bf14      	ite	ne
 800684c:	2301      	movne	r3, #1
 800684e:	2300      	moveq	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d004      	beq.n	8006860 <_ZN8QAD_LTDC8imp_initEv+0x340>
  	imp_deinit();
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f8e8 	bl	8006a2c <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 800685c:	2301      	movs	r3, #1
 800685e:	e0df      	b.n	8006a20 <_ZN8QAD_LTDC8imp_initEv+0x500>
  }

  //Initialize LTDC Peripheral
  if (HAL_LTDC_Init(&m_sLTDCHandle) != HAL_OK) {
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3398      	adds	r3, #152	; 0x98
 8006864:	4618      	mov	r0, r3
 8006866:	f7fc ff61 	bl	800372c <HAL_LTDC_Init>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	bf14      	ite	ne
 8006870:	2301      	movne	r3, #1
 8006872:	2300      	moveq	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d004      	beq.n	8006884 <_ZN8QAD_LTDC8imp_initEv+0x364>
  	imp_deinit();
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f8d6 	bl	8006a2c <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8006880:	2301      	movs	r3, #1
 8006882:	e0cd      	b.n	8006a20 <_ZN8QAD_LTDC8imp_initEv+0x500>

    //-------
    //Layer 0

  //Set pointer address for layer 0 double buffer
  m_pLayer0Ptr = (void*)0xC0000000;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800688a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

  //Clear Layer Config structure
  LTDC_Layer = {0};
 800688e:	f107 0314 	add.w	r3, r7, #20
 8006892:	2234      	movs	r2, #52	; 0x34
 8006894:	2100      	movs	r1, #0
 8006896:	4618      	mov	r0, r3
 8006898:	f002 fc34 	bl	8009104 <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 80068a0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80068a4:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 80068aa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80068ae:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 80068b0:	2304      	movs	r3, #4
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80068ba:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 80068bc:	23ff      	movs	r3, #255	; 0xff
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 80068c0:	2300      	movs	r3, #0
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 80068d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80068da:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 80068dc:	2307      	movs	r3, #7
 80068de:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 80068e0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80068e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 80068e6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80068ea:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 0 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 0) != HAL_OK) {
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3398      	adds	r3, #152	; 0x98
 80068f0:	f107 0114 	add.w	r1, r7, #20
 80068f4:	2200      	movs	r2, #0
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fd f814 	bl	8003924 <HAL_LTDC_ConfigLayer>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	bf14      	ite	ne
 8006902:	2301      	movne	r3, #1
 8006904:	2300      	moveq	r3, #0
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <_ZN8QAD_LTDC8imp_initEv+0x3f6>
		imp_deinit();
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f88d 	bl	8006a2c <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 8006912:	2301      	movs	r3, #1
 8006914:	e084      	b.n	8006a20 <_ZN8QAD_LTDC8imp_initEv+0x500>

	  //-------
	  //Layer 1

  //Set pointer address for layer 1 doube buffer
	m_pLayer1Ptr = (void*)((uint32_t)m_pLayer0Ptr + (QAD_LTDC_BUFFERSIZE*2));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800691c:	461a      	mov	r2, r3
 800691e:	4b42      	ldr	r3, [pc, #264]	; (8006a28 <_ZN8QAD_LTDC8imp_initEv+0x508>)
 8006920:	4413      	add	r3, r2
 8006922:	461a      	mov	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  //Clear Layer Config structure
  LTDC_Layer = {0};
 800692a:	f107 0314 	add.w	r3, r7, #20
 800692e:	2234      	movs	r2, #52	; 0x34
 8006930:	2100      	movs	r1, #0
 8006932:	4618      	mov	r0, r3
 8006934:	f002 fbe6 	bl	8009104 <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 800693c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006940:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 8006946:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800694a:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 800694c:	2304      	movs	r3, #4
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006956:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 8006958:	23ff      	movs	r3, #255	; 0xff
 800695a:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 800695c:	2300      	movs	r3, #0
 800695e:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 800696c:	2300      	movs	r3, #0
 800696e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 8006972:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006976:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 8006978:	2307      	movs	r3, #7
 800697a:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 800697c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 8006982:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006986:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 1 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 1) != HAL_OK) {
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3398      	adds	r3, #152	; 0x98
 800698c:	f107 0114 	add.w	r1, r7, #20
 8006990:	2201      	movs	r2, #1
 8006992:	4618      	mov	r0, r3
 8006994:	f7fc ffc6 	bl	8003924 <HAL_LTDC_ConfigLayer>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	bf14      	ite	ne
 800699e:	2301      	movne	r3, #1
 80069a0:	2300      	moveq	r3, #0
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <_ZN8QAD_LTDC8imp_initEv+0x492>
		imp_deinit();
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f83f 	bl	8006a2c <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e036      	b.n	8006a20 <_ZN8QAD_LTDC8imp_initEv+0x500>
	}


	//-------------------------------
	//Enable LTDC Layer 0 and Layer 1
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 0);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069b8:	3384      	adds	r3, #132	; 0x84
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80069c2:	3284      	adds	r2, #132	; 0x84
 80069c4:	f043 0301 	orr.w	r3, r3, #1
 80069c8:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 1);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069d0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80069dc:	f502 7282 	add.w	r2, r2, #260	; 0x104
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	6013      	str	r3, [r2, #0]


	//---------------------
	//Enable DSI Peripheral
	HAL_DSI_Start(&m_sDSIHandle);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3310      	adds	r3, #16
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fc fa9a 	bl	8002f24 <HAL_DSI_Start>


	//--------------------------------------
	//Initialize OTM8009A Display Controller
	OTM8009A_Init(OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 80069f0:	2101      	movs	r1, #1
 80069f2:	2000      	movs	r0, #0
 80069f4:	f7fb fa9c 	bl	8001f30 <OTM8009A_Init>


	//-------------------------------
	//Set Initial Frame Buffer States
	m_eLayer0Back  = QAD_LTDC_Buffer1;   //Set initial layer 0 back buffer as being buffer 1 in double buffer pair
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	m_eLayer0Front = QAD_LTDC_Buffer0;   //Set initial layer 0 front buffer as being buffer 0 in double buffer pair
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	m_eLayer1Back  = QAD_LTDC_Buffer1;   //Set initial layer 1 back buffer as being buffer 1 in double buffer pair
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	m_eLayer1Front = QAD_LTDC_Buffer0;   //Set initial layer 1 front buffer as being buffer 0 in double buffer pair
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b


	//Set Driver State as being initialized
	m_eInitState = QA_Initialized;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	701a      	strb	r2, [r3, #0]

	//Return
	return QA_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3788      	adds	r7, #136	; 0x88
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	00177000 	.word	0x00177000

08006a2c <_ZN8QAD_LTDC10imp_deinitEv>:
//QAD_LTDC::imp_deinit
//QAD_LTDC Initialization Method
//
//To be called from static method deinit(), or from imp_init() in the event of a failed initialization
//Used to deinitialize the DSI and LTDC peripherals, LTDC layers, reset display controller and deinitialize reset and backlight GPIO pins
void QAD_LTDC::imp_deinit(void) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]

	//----------------------
	//Disable DSI Peripheral
	HAL_DSI_Stop(&m_sDSIHandle);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3310      	adds	r3, #16
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fc faaf 	bl	8002f9c <HAL_DSI_Stop>


	//-------------------
	//Disable LTDC Layers
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 1);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a44:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8006a50:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8006a54:	f023 0301 	bic.w	r3, r3, #1
 8006a58:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 0);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a60:	3384      	adds	r3, #132	; 0x84
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8006a6a:	3284      	adds	r2, #132	; 0x84
 8006a6c:	f023 0301 	bic.w	r3, r3, #1
 8006a70:	6013      	str	r3, [r2, #0]


	//----------------------------
	//Deinitialize LTDC Peripheral
	HAL_LTDC_DeInit(&m_sLTDCHandle);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3398      	adds	r3, #152	; 0x98
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fc ff28 	bl	80038cc <HAL_LTDC_DeInit>


	//---------------------------
	//Deinitialize DSI Peripheral
	HAL_DSI_DeInit(&m_sDSIHandle);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3310      	adds	r3, #16
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fb ffc7 	bl	8002a14 <HAL_DSI_DeInit>


	//---------------------------
	//Disable DSI and LTDC Clocks
	__HAL_RCC_DSI_CLK_DISABLE();
 8006a86:	4b16      	ldr	r3, [pc, #88]	; (8006ae0 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8006a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8a:	4a15      	ldr	r2, [pc, #84]	; (8006ae0 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8006a8c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006a90:	6453      	str	r3, [r2, #68]	; 0x44
	__HAL_RCC_LTDC_CLK_DISABLE();
 8006a92:	4b13      	ldr	r3, [pc, #76]	; (8006ae0 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8006a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a96:	4a12      	ldr	r2, [pc, #72]	; (8006ae0 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8006a98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a9c:	6453      	str	r3, [r2, #68]	; 0x44


	//------------------------
	//Reset Display controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET);
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006aa4:	480f      	ldr	r0, [pc, #60]	; (8006ae4 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 8006aa6:	f7fc fe27 	bl	80036f8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006aaa:	2014      	movs	r0, #20
 8006aac:	f7fb fce8 	bl	8002480 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ab6:	480b      	ldr	r0, [pc, #44]	; (8006ae4 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 8006ab8:	f7fc fe1e 	bl	80036f8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8006abc:	200a      	movs	r0, #10
 8006abe:	f7fb fcdf 	bl	8002480 <HAL_Delay>


	//--------------------------------------------------
	//Deinitialize Reset and Backlight control GPIO Pins
	HAL_GPIO_DeInit(QAD_LTDC_BACKLIGHT_PORT, QAD_LTDC_BACKLIGHT_PIN);
 8006ac2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ac6:	4808      	ldr	r0, [pc, #32]	; (8006ae8 <_ZN8QAD_LTDC10imp_deinitEv+0xbc>)
 8006ac8:	f7fc fd0a 	bl	80034e0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN);
 8006acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ad0:	4804      	ldr	r0, [pc, #16]	; (8006ae4 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 8006ad2:	f7fc fd05 	bl	80034e0 <HAL_GPIO_DeInit>

}
 8006ad6:	bf00      	nop
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	40023800 	.word	0x40023800
 8006ae4:	40022400 	.word	0x40022400
 8006ae8:	40022000 	.word	0x40022000

08006aec <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>:
  //DSI Command Methods


//QAD_LTDC::imp_dsi_IO_WriteCmd
//DSI Command Methods
void QAD_LTDC::imp_dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
	if (uNumParams <= 1) {
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d80f      	bhi.n	8006b1e <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x32>
		HAL_DSI_ShortWrite(&m_sDSIHandle, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f103 0010 	add.w	r0, r3, #16
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	4613      	mov	r3, r2
 8006b14:	2215      	movs	r2, #21
 8006b16:	2100      	movs	r1, #0
 8006b18:	f7fc fa7c 	bl	8003014 <HAL_DSI_ShortWrite>
	} else {
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
	}
}
 8006b1c:	e00f      	b.n	8006b3e <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x52>
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f103 0010 	add.w	r0, r3, #16
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	4413      	add	r3, r2
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	9200      	str	r2, [sp, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2239      	movs	r2, #57	; 0x39
 8006b38:	2100      	movs	r1, #0
 8006b3a:	f7fc fa8d 	bl	8003058 <HAL_DSI_LongWrite>
}
 8006b3e:	bf00      	nop
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>:
  //------------------------------
  //QAD_LTDC Layer Control Methods

//QAD_LTDC::imp_flipLayer0Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer0Buffers(void) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d032      	beq.n	8006bbe <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x76>
  	return;

  switch (m_eLayer0Front) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x20>
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d017      	beq.n	8006b96 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x4e>
 8006b66:	e02b      	b.n	8006bc0 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer0Back  = QAD_LTDC_Buffer0;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer1;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006b7e:	461a      	mov	r2, r3
 8006b80:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x80>)
 8006b82:	4413      	add	r3, r2
 8006b84:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3398      	adds	r3, #152	; 0x98
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fc ff06 	bl	80039a0 <HAL_LTDC_SetAddress>
    	break;
 8006b94:	e014      	b.n	8006bc0 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer0Back  = QAD_LTDC_Buffer1;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer0;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006bac:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3398      	adds	r3, #152	; 0x98
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	68f9      	ldr	r1, [r7, #12]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fc fef2 	bl	80039a0 <HAL_LTDC_SetAddress>
    	break;
 8006bbc:	e000      	b.n	8006bc0 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
  	return;
 8006bbe:	bf00      	nop
    }
  }
}
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	000bb800 	.word	0x000bb800

08006bcc <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>:


//QAD_LTDC::imp_flipLayer1Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer1Buffers(void) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d032      	beq.n	8006c42 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x76>
  	return;

  switch (m_eLayer1Front) {
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x20>
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d017      	beq.n	8006c1a <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x4e>
 8006bea:	e02b      	b.n	8006c44 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer1Back  = QAD_LTDC_Buffer0;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer1;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006c02:	461a      	mov	r2, r3
 8006c04:	4b11      	ldr	r3, [pc, #68]	; (8006c4c <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x80>)
 8006c06:	4413      	add	r3, r2
 8006c08:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3398      	adds	r3, #152	; 0x98
 8006c0e:	2201      	movs	r2, #1
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fc fec4 	bl	80039a0 <HAL_LTDC_SetAddress>
    	break;
 8006c18:	e014      	b.n	8006c44 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer1Back  = QAD_LTDC_Buffer1;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer0;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006c30:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3398      	adds	r3, #152	; 0x98
 8006c36:	2201      	movs	r2, #1
 8006c38:	68f9      	ldr	r1, [r7, #12]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fc feb0 	bl	80039a0 <HAL_LTDC_SetAddress>
    	break;
 8006c40:	e000      	b.n	8006c44 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
  	return;
 8006c42:	bf00      	nop
    }
  }
}
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	000bb800 	.word	0x000bb800

08006c50 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>:
}


//QAD_LTDC::imp_getLayer0BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer0BackBuffer(void) {
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x14>
		return NULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	e013      	b.n	8006c8c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>

	switch (m_eLayer0Back) {
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x24>
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d004      	beq.n	8006c7c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x2c>
 8006c72:	e00a      	b.n	8006c8a <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer0Ptr;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006c7a:	e007      	b.n	8006c8c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006c82:	461a      	mov	r2, r3
 8006c84:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x48>)
 8006c86:	4413      	add	r3, r2
 8006c88:	e000      	b.n	8006c8c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	000bb800 	.word	0x000bb800

08006c9c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>:
}


//QAD_LTDC::imp_getLayer1BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer1BackBuffer(void) {
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x14>
		return NULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	e013      	b.n	8006cd8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>

	switch (m_eLayer1Back) {
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x24>
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d004      	beq.n	8006cc8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x2c>
 8006cbe:	e00a      	b.n	8006cd6 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer1Ptr;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006cc6:	e007      	b.n	8006cd8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006cce:	461a      	mov	r2, r3
 8006cd0:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x48>)
 8006cd2:	4413      	add	r3, r2
 8006cd4:	e000      	b.n	8006cd8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	000bb800 	.word	0x000bb800

08006ce8 <DSI_IO_WriteCmd>:

//DSI_IO_WriteCmd
//OTM8009A Display Controller Communication Methods
//Used by the OTM8009A initialization method in the otm8009a.h file
//Calls the static dsi_IO_WriteCmd method in the QAD_LTDC driver class
void DSI_IO_WriteCmd(uint32_t NbrParam, uint8_t* pParams) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  QAD_LTDC::dsi_IO_WriteCmd(NbrParam, pParams);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff fc01 	bl	80064fc <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <_ZN7QAD_RNG8imp_initEv>:
//QAD_RNG Initialization Method
//
//To be called from static method init()
//Used to initialize the RNG peripheral
//Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
QA_Result QAD_RNG::imp_init(void) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]

	//Check peripheral is not already initialized, and return QA_OK if it is
  if (m_eInitState)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <_ZN7QAD_RNG8imp_initEv+0x14>
  	return QA_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	e033      	b.n	8006d80 <_ZN7QAD_RNG8imp_initEv+0x7c>

  //Enable RNG Peripheral Clock
  __HAL_RCC_RNG_CLK_ENABLE();
 8006d18:	4b1b      	ldr	r3, [pc, #108]	; (8006d88 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8006d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1c:	4a1a      	ldr	r2, [pc, #104]	; (8006d88 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8006d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d22:	6353      	str	r3, [r2, #52]	; 0x34
 8006d24:	4b18      	ldr	r3, [pc, #96]	; (8006d88 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8006d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_RNG_FORCE_RESET();
 8006d30:	4b15      	ldr	r3, [pc, #84]	; (8006d88 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	4a14      	ldr	r2, [pc, #80]	; (8006d88 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8006d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d3a:	6153      	str	r3, [r2, #20]
  __HAL_RCC_RNG_RELEASE_RESET();
 8006d3c:	4b12      	ldr	r3, [pc, #72]	; (8006d88 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	4a11      	ldr	r2, [pc, #68]	; (8006d88 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8006d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d46:	6153      	str	r3, [r2, #20]

  //Initialize RNG Peripheral
  m_sHandle.Instance = RNG;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a10      	ldr	r2, [pc, #64]	; (8006d8c <_ZN7QAD_RNG8imp_initEv+0x88>)
 8006d4c:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&m_sHandle) != HAL_OK) {
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3304      	adds	r3, #4
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe f950 	bl	8004ff8 <HAL_RNG_Init>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bf14      	ite	ne
 8006d5e:	2301      	movne	r3, #1
 8006d60:	2300      	moveq	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d007      	beq.n	8006d78 <_ZN7QAD_RNG8imp_initEv+0x74>
  	__HAL_RCC_RNG_CLK_DISABLE();
 8006d68:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8006d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6c:	4a06      	ldr	r2, [pc, #24]	; (8006d88 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8006d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d72:	6353      	str	r3, [r2, #52]	; 0x34
  	return QA_Fail;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e003      	b.n	8006d80 <_ZN7QAD_RNG8imp_initEv+0x7c>
  }

  //Set Driver State as being initialized
  m_eInitState = QA_Initialized;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	701a      	strb	r2, [r3, #0]

  //Return
  return QA_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	40023800 	.word	0x40023800
 8006d8c:	50060800 	.word	0x50060800

08006d90 <_ZN7QAD_RTC8imp_initEv>:
//QAD_RTC Initialization Method
//
//To be called by static method init()
//Used to initialize the RTC peripheral
//Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
QA_Result QAD_RTC::imp_init(void) {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	if (m_eInitState)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <_ZN7QAD_RTC8imp_initEv+0x14>
		return QA_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e045      	b.n	8006e30 <_ZN7QAD_RTC8imp_initEv+0xa0>

	//Enable RTC Clock
	__HAL_RCC_RTC_CLK_ENABLE();
 8006da4:	4b24      	ldr	r3, [pc, #144]	; (8006e38 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	4a23      	ldr	r2, [pc, #140]	; (8006e38 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8006daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006dae:	6413      	str	r3, [r2, #64]	; 0x40
 8006db0:	4b21      	ldr	r3, [pc, #132]	; (8006e38 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_RTC_ENABLE();
 8006dbc:	4b1e      	ldr	r3, [pc, #120]	; (8006e38 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8006dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc0:	4a1d      	ldr	r2, [pc, #116]	; (8006e38 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8006dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc6:	6713      	str	r3, [r2, #112]	; 0x70

	//Init RTC Peripheral
	m_sHandle.Instance               = RTC;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <_ZN7QAD_RTC8imp_initEv+0xac>)
 8006dcc:	605a      	str	r2, [r3, #4]
	m_sHandle.Init.HourFormat        = RTC_HOURFORMAT_24;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	609a      	str	r2, [r3, #8]
	m_sHandle.Init.AsynchPrediv      = 127;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	227f      	movs	r2, #127	; 0x7f
 8006dd8:	60da      	str	r2, [r3, #12]
	m_sHandle.Init.SynchPrediv       = 255;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	22ff      	movs	r2, #255	; 0xff
 8006dde:	611a      	str	r2, [r3, #16]
	m_sHandle.Init.OutPut            = RTC_OUTPUT_DISABLE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	615a      	str	r2, [r3, #20]
	m_sHandle.Init.OutPutPolarity    = RTC_OUTPUT_POLARITY_HIGH;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	619a      	str	r2, [r3, #24]
	m_sHandle.Init.OutPutType        = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&m_sHandle) != HAL_OK) {
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3304      	adds	r3, #4
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe f932 	bl	8005060 <HAL_RTC_Init>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf14      	ite	ne
 8006e02:	2301      	movne	r3, #1
 8006e04:	2300      	moveq	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00d      	beq.n	8006e28 <_ZN7QAD_RTC8imp_initEv+0x98>
		__HAL_RCC_RTC_DISABLE();
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e10:	4a09      	ldr	r2, [pc, #36]	; (8006e38 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8006e12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e16:	6713      	str	r3, [r2, #112]	; 0x70
		__HAL_RCC_RTC_CLK_DISABLE();
 8006e18:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	4a06      	ldr	r2, [pc, #24]	; (8006e38 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8006e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e22:	6413      	str	r3, [r2, #64]	; 0x40
		return QA_Fail;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e003      	b.n	8006e30 <_ZN7QAD_RTC8imp_initEv+0xa0>
	}

	//Update m_sTime and m_sDate with values currently stored in RTC
	imp_update();
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f809 	bl	8006e40 <_ZN7QAD_RTC10imp_updateEv>

	//Return
	return QA_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	40023800 	.word	0x40023800
 8006e3c:	40002800 	.word	0x40002800

08006e40 <_ZN7QAD_RTC10imp_updateEv>:
//
//To be called from static update() method
//Captures the current time and date and stores in m_sTime and m_sDate, so that values can
//be retrieved by the below data methods
//Returns QA_OK if successful, or QA_Fail if unable to get the current time/date
QA_Result QAD_RTC::imp_update(void) {
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]

	//Retrieve current time values from RTC and store in m_sTime structure in binary format
	//Return QA_Fail if not successful
	if (HAL_RTC_GetTime(&m_sHandle, &m_sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	1d18      	adds	r0, r3, #4
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3324      	adds	r3, #36	; 0x24
 8006e50:	2200      	movs	r2, #0
 8006e52:	4619      	mov	r1, r3
 8006e54:	f7fe f9a0 	bl	8005198 <HAL_RTC_GetTime>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	bf14      	ite	ne
 8006e5e:	2301      	movne	r3, #1
 8006e60:	2300      	moveq	r3, #0
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <_ZN7QAD_RTC10imp_updateEv+0x2c>
		return QA_Fail;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e012      	b.n	8006e92 <_ZN7QAD_RTC10imp_updateEv+0x52>
	}

	//Retrieve current date values from RTC and store in m_sDate structure in binary format
	//Return QA_Fail if not successful
	if (HAL_RTC_GetDate(&m_sHandle, &m_sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	1d18      	adds	r0, r3, #4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	333c      	adds	r3, #60	; 0x3c
 8006e74:	2200      	movs	r2, #0
 8006e76:	4619      	mov	r1, r3
 8006e78:	f7fe f9ec 	bl	8005254 <HAL_RTC_GetDate>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	bf14      	ite	ne
 8006e82:	2301      	movne	r3, #1
 8006e84:	2300      	moveq	r3, #0
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <_ZN7QAD_RTC10imp_updateEv+0x50>
		return QA_Fail;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <_ZN7QAD_RTC10imp_updateEv+0x52>
	}

	//Return
	return QA_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <_ZN7QAD_RTC11imp_getHourEv>:
//QAD_RTC Data Method
//
//To be called by static getHour() method
//Used to retrieve the hour value from m_sTime
//Returns a value between 0-23
uint8_t QAD_RTC::imp_getHour(void) {
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  return m_sTime.Hours;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <_ZN7QAD_RTC13imp_getMinuteEv>:
//QAD_RTC Data Method
//
//To be called by static getMinute() method
//Used to retrieve the minute value from m_sTime
//Returns a value between 0-59
uint8_t QAD_RTC::imp_getMinute(void) {
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  return m_sTime.Minutes;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <_ZN7QAD_RTC13imp_getSecondEv>:
//QAD_RTC Data Method
//
//To be called by static getSecond() method
//Used to retrieve the second value from m_sTime
//Returns a value between 0-59
uint8_t QAD_RTC::imp_getSecond(void) {
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  return m_sTime.Seconds;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 8006eec:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	f3bf 8f5b 	dmb	ish
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bf0c      	ite	eq
 8006efe:	2301      	moveq	r3, #1
 8006f00:	2300      	movne	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d010      	beq.n	8006f2a <_ZN11QAD_UARTMgr3getEv+0x42>
 8006f08:	4809      	ldr	r0, [pc, #36]	; (8006f30 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8006f0a:	f002 f846 	bl	8008f9a <__cxa_guard_acquire>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bf14      	ite	ne
 8006f14:	2301      	movne	r3, #1
 8006f16:	2300      	moveq	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <_ZN11QAD_UARTMgr3getEv+0x42>
 8006f1e:	4805      	ldr	r0, [pc, #20]	; (8006f34 <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8006f20:	f000 fa3e 	bl	80073a0 <_ZN11QAD_UARTMgrC1Ev>
 8006f24:	4802      	ldr	r0, [pc, #8]	; (8006f30 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8006f26:	f002 f844 	bl	8008fb2 <__cxa_guard_release>
		return instance;
 8006f2a:	4b02      	ldr	r3, [pc, #8]	; (8006f34 <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	20000350 	.word	0x20000350
 8006f34:	200002f0 	.word	0x200002f0

08006f38 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	2b07      	cmp	r3, #7
 8006f46:	d901      	bls.n	8006f4c <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e00a      	b.n	8006f62 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 8006f4c:	f7ff ffcc 	bl	8006ee8 <_ZN11QAD_UARTMgr3getEv>
 8006f50:	4601      	mov	r1, r0
 8006f52:	79fa      	ldrb	r2, [r7, #7]
 8006f54:	4613      	mov	r3, r2
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	440b      	add	r3, r1
 8006f5e:	3301      	adds	r3, #1
 8006f60:	781b      	ldrb	r3, [r3, #0]
	}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f769xx.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	4603      	mov	r3, r0
 8006f72:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8006f74:	79fb      	ldrb	r3, [r7, #7]
 8006f76:	2b07      	cmp	r3, #7
 8006f78:	d901      	bls.n	8006f7e <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e00a      	b.n	8006f94 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 8006f7e:	f7ff ffb3 	bl	8006ee8 <_ZN11QAD_UARTMgr3getEv>
 8006f82:	4601      	mov	r1, r0
 8006f84:	79fa      	ldrb	r2, [r7, #7]
 8006f86:	4613      	mov	r3, r2
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	3304      	adds	r3, #4
 8006f92:	681b      	ldr	r3, [r3, #0]
	}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	2b07      	cmp	r3, #7
 8006faa:	d902      	bls.n	8006fb2 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 8006fac:	f06f 0309 	mvn.w	r3, #9
 8006fb0:	e00b      	b.n	8006fca <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 8006fb2:	f7ff ff99 	bl	8006ee8 <_ZN11QAD_UARTMgr3getEv>
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	79fa      	ldrb	r2, [r7, #7]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Management Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static void registerUART(QAD_UART_Periph eUART) {
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b082      	sub	sp, #8
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	4603      	mov	r3, r0
 8006fda:	71fb      	strb	r3, [r7, #7]
		get().imp_registerUART(eUART);
 8006fdc:	f7ff ff84 	bl	8006ee8 <_ZN11QAD_UARTMgr3getEv>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	79fb      	ldrb	r3, [r7, #7]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f000 fa5c 	bl	80074a4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
	}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 8006ffe:	f7ff ff73 	bl	8006ee8 <_ZN11QAD_UARTMgr3getEv>
 8007002:	4602      	mov	r2, r0
 8007004:	79fb      	ldrb	r3, [r7, #7]
 8007006:	4619      	mov	r1, r3
 8007008:	4610      	mov	r0, r2
 800700a:	f000 fa74 	bl	80074f6 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	4603      	mov	r3, r0
 800701e:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8007020:	f7ff ff62 	bl	8006ee8 <_ZN11QAD_UARTMgr3getEv>
 8007024:	4602      	mov	r2, r0
 8007026:	79fb      	ldrb	r3, [r7, #7]
 8007028:	4619      	mov	r1, r3
 800702a:	4610      	mov	r0, r2
 800702c:	f000 fa7e 	bl	800752c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 8007042:	f7ff ff51 	bl	8006ee8 <_ZN11QAD_UARTMgr3getEv>
 8007046:	4602      	mov	r2, r0
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	4619      	mov	r1, r3
 800704c:	4610      	mov	r0, r2
 800704e:	f000 fb5f 	bl	8007710 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 8007052:	bf00      	nop
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or QA_Fail if initialization has failed
QA_Result QAD_UART::init(void) {
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
	if (QAD_UARTMgr::getState(m_eUART))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	785b      	ldrb	r3, [r3, #1]
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff ff66 	bl	8006f38 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	bf14      	ite	ne
 8007072:	2301      	movne	r3, #1
 8007074:	2300      	moveq	r3, #0
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 800707c:	2302      	movs	r3, #2
 800707e:	e012      	b.n	80070a6 <_ZN8QAD_UART4initEv+0x4c>

  QAD_UARTMgr::registerUART(m_eUART);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	785b      	ldrb	r3, [r3, #1]
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff ffa4 	bl	8006fd2 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>
  QA_Result eRes = periphInit();
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f8a7 	bl	80071de <_ZN8QAD_UART10periphInitEv>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]

  if (eRes)
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	785b      	ldrb	r3, [r3, #1]
 800709e:	4618      	mov	r0, r3
 80070a0:	f7ff ffa8 	bl	8006ff4 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
  return eRes;
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b082      	sub	sp, #8
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <_ZN8QAD_UART6deinitEv+0x24>
  	return;

  periphDeinit(DeinitFull);
 80070be:	2101      	movs	r1, #1
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f924 	bl	800730e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
  QAD_UARTMgr::deregisterUART(m_eUART);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	785b      	ldrb	r3, [r3, #1]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff ff92 	bl	8006ff4 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 80070d0:	e000      	b.n	80070d4 <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 80070d2:	bf00      	nop
}
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	331c      	adds	r3, #28
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 80070f2:	b480      	push	{r7}
 80070f4:	b083      	sub	sp, #12
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007108:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Active;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8007112:	bf00      	nop
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007134:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Inactive;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	f042 0220 	orr.w	r2, r2, #32
 8007160:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Active;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	f022 0220 	bic.w	r2, r2, #32
 800718c:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Inactive;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART transmit data register (TDR)
void QAD_UART::dataTX(uint8_t uData) {
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	460b      	mov	r3, r1
 80071ac:	70fb      	strb	r3, [r7, #3]
  m_sHandle.Instance->TDR = uData;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	78fa      	ldrb	r2, [r7, #3]
 80071b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART receive data register (RDR)
uint8_t QAD_UART::dataRX(void) {
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  return m_sHandle.Instance->RDR;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	b2db      	uxtb	r3, r3
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 80071de:	b580      	push	{r7, lr}
 80071e0:	b088      	sub	sp, #32
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 80071e6:	f107 030c 	add.w	r3, r7, #12
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	605a      	str	r2, [r3, #4]
 80071f0:	609a      	str	r2, [r3, #8]
 80071f2:	60da      	str	r2, [r3, #12]
 80071f4:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	8a1b      	ldrh	r3, [r3, #16]
 80071fa:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 80071fc:	2302      	movs	r3, #2
 80071fe:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8007204:	2303      	movs	r3, #3
 8007206:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	7c9b      	ldrb	r3, [r3, #18]
 800720c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f107 020c 	add.w	r2, r7, #12
 8007216:	4611      	mov	r1, r2
 8007218:	4618      	mov	r0, r3
 800721a:	f7fb ffb5 	bl	8003188 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	8b1b      	ldrh	r3, [r3, #24]
 8007222:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 8007224:	2302      	movs	r3, #2
 8007226:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8007228:	2301      	movs	r3, #1
 800722a:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 800722c:	2303      	movs	r3, #3
 800722e:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	7e9b      	ldrb	r3, [r3, #26]
 8007234:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	f107 020c 	add.w	r2, r7, #12
 800723e:	4611      	mov	r1, r2
 8007240:	4618      	mov	r0, r3
 8007242:	f7fb ffa1 	bl	8003188 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff fee3 	bl	8007016 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	785b      	ldrb	r3, [r3, #1]
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff fe88 	bl	8006f6a <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 800725a:	4602      	mov	r2, r0
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	220c      	movs	r2, #12
 800727e:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	331c      	adds	r3, #28
 8007290:	4618      	mov	r0, r3
 8007292:	f7fe f92a 	bl	80054ea <HAL_UART_Init>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	bf14      	ite	ne
 800729c:	2301      	movne	r3, #1
 800729e:	2300      	moveq	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 80072a6:	2100      	movs	r1, #0
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f830 	bl	800730e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e029      	b.n	8007306 <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	f042 0201 	orr.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	785b      	ldrb	r3, [r3, #1]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff fe68 	bl	8006f9c <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 80072cc:	4603      	mov	r3, r0
 80072ce:	4618      	mov	r0, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	7a1b      	ldrb	r3, [r3, #8]
 80072d4:	2200      	movs	r2, #0
 80072d6:	4619      	mov	r1, r3
 80072d8:	f7fb f9f5 	bl	80026c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	785b      	ldrb	r3, [r3, #1]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7ff fe5b 	bl	8006f9c <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 80072e6:	4603      	mov	r3, r0
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fb fa08 	bl	80026fe <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  //Return
  return QA_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3720      	adds	r7, #32
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//QAD_UART Private Initialization Method
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	460b      	mov	r3, r1
 8007318:	70fb      	strb	r3, [r7, #3]

	//Disable IRQs
	//Check if full deinitialization is required
	if (eDeinitMode) {
 800731a:	78fb      	ldrb	r3, [r7, #3]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01b      	beq.n	8007358 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff fefc 	bl	800711e <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff ff25 	bl	8007176 <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff fe33 	bl	8006f9c <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8007336:	4603      	mov	r3, r0
 8007338:	4618      	mov	r0, r3
 800733a:	f7fb f9ee 	bl	800271a <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	f022 0201 	bic.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	331c      	adds	r3, #28
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe f917 	bl	8005586 <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff fe6b 	bl	8007038 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	695a      	ldr	r2, [r3, #20]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	8b1b      	ldrh	r3, [r3, #24]
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f7fc f8b7 	bl	80034e0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	8a1b      	ldrh	r3, [r3, #16]
 800737a:	4619      	mov	r1, r3
 800737c:	4610      	mov	r0, r2
 800737e:	f7fc f8af 	bl	80034e0 <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	701a      	strb	r2, [r3, #0]
}
 8007398:	bf00      	nop
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method is a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	2b07      	cmp	r3, #7
 80073b0:	d80d      	bhi.n	80073ce <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 80073b2:	7bfa      	ldrb	r2, [r7, #15]
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	3301      	adds	r3, #1
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	3301      	adds	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]
 80073cc:	e7ee      	b.n	80073ac <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART3].eUART = QAD_UART3;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2202      	movs	r2, #2
 80073de:	761a      	strb	r2, [r3, #24]
	m_sUARTs[QAD_UART4].eUART = QAD_UART4;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2203      	movs	r2, #3
 80073e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sUARTs[QAD_UART5].eUART = QAD_UART5;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2204      	movs	r2, #4
 80073ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2205      	movs	r2, #5
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	m_sUARTs[QAD_UART7].eUART = QAD_UART7;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2206      	movs	r2, #6
 80073fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	m_sUARTs[QAD_UART8].eUART = QAD_UART8;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2207      	movs	r2, #7
 8007404:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a1e      	ldr	r2, [pc, #120]	; (8007484 <_ZN11QAD_UARTMgrC1Ev+0xe4>)
 800740c:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a1d      	ldr	r2, [pc, #116]	; (8007488 <_ZN11QAD_UARTMgrC1Ev+0xe8>)
 8007412:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART3].pInstance = USART3;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a1d      	ldr	r2, [pc, #116]	; (800748c <_ZN11QAD_UARTMgrC1Ev+0xec>)
 8007418:	61da      	str	r2, [r3, #28]
	m_sUARTs[QAD_UART4].pInstance = UART4;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1c      	ldr	r2, [pc, #112]	; (8007490 <_ZN11QAD_UARTMgrC1Ev+0xf0>)
 800741e:	629a      	str	r2, [r3, #40]	; 0x28
	m_sUARTs[QAD_UART5].pInstance = UART5;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a1c      	ldr	r2, [pc, #112]	; (8007494 <_ZN11QAD_UARTMgrC1Ev+0xf4>)
 8007424:	635a      	str	r2, [r3, #52]	; 0x34
	m_sUARTs[QAD_UART6].pInstance = USART6;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a1b      	ldr	r2, [pc, #108]	; (8007498 <_ZN11QAD_UARTMgrC1Ev+0xf8>)
 800742a:	641a      	str	r2, [r3, #64]	; 0x40
	m_sUARTs[QAD_UART7].pInstance = UART7;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a1b      	ldr	r2, [pc, #108]	; (800749c <_ZN11QAD_UARTMgrC1Ev+0xfc>)
 8007430:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sUARTs[QAD_UART8].pInstance = UART8;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a1a      	ldr	r2, [pc, #104]	; (80074a0 <_ZN11QAD_UARTMgrC1Ev+0x100>)
 8007436:	659a      	str	r2, [r3, #88]	; 0x58

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2225      	movs	r2, #37	; 0x25
 800743c:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2226      	movs	r2, #38	; 0x26
 8007442:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART3].eIRQ = USART3_IRQn;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2227      	movs	r2, #39	; 0x27
 8007448:	f883 2020 	strb.w	r2, [r3, #32]
	m_sUARTs[QAD_UART4].eIRQ = UART4_IRQn;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2234      	movs	r2, #52	; 0x34
 8007450:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	m_sUARTs[QAD_UART5].eIRQ = UART5_IRQn;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2235      	movs	r2, #53	; 0x35
 8007458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2247      	movs	r2, #71	; 0x47
 8007460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sUARTs[QAD_UART7].eIRQ = UART7_IRQn;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2252      	movs	r2, #82	; 0x52
 8007468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	m_sUARTs[QAD_UART8].eIRQ = UART8_IRQn;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2253      	movs	r2, #83	; 0x53
 8007470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

}
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40011000 	.word	0x40011000
 8007488:	40004400 	.word	0x40004400
 800748c:	40004800 	.word	0x40004800
 8007490:	40004c00 	.word	0x40004c00
 8007494:	40005000 	.word	0x40005000
 8007498:	40011400 	.word	0x40011400
 800749c:	40007800 	.word	0x40007800
 80074a0:	40007c00 	.word	0x40007c00

080074a4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	2b07      	cmp	r3, #7
 80074b4:	d901      	bls.n	80074ba <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e017      	b.n	80074ea <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	3301      	adds	r3, #1
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 80074d0:	2302      	movs	r3, #2
 80074d2:	e00a      	b.n	80074ea <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	4613      	mov	r3, r2
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	440b      	add	r3, r1
 80074e2:	3301      	adds	r3, #1
 80074e4:	2201      	movs	r2, #1
 80074e6:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	460b      	mov	r3, r1
 8007500:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	2b07      	cmp	r3, #7
 8007506:	d80a      	bhi.n	800751e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8007508:	78fa      	ldrb	r2, [r7, #3]
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	4613      	mov	r3, r2
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	3301      	adds	r3, #1
 8007518:	2200      	movs	r2, #0
 800751a:	701a      	strb	r2, [r3, #0]
 800751c:	e000      	b.n	8007520 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 800751e:	bf00      	nop
}
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
	...

0800752c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 800752c:	b480      	push	{r7}
 800752e:	b08b      	sub	sp, #44	; 0x2c
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	2b08      	cmp	r3, #8
 800753c:	f200 80df 	bhi.w	80076fe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
 8007540:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1c>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	0800756d 	.word	0x0800756d
 800754c:	0800759f 	.word	0x0800759f
 8007550:	080075d1 	.word	0x080075d1
 8007554:	08007603 	.word	0x08007603
 8007558:	08007635 	.word	0x08007635
 800755c:	08007667 	.word	0x08007667
 8007560:	08007699 	.word	0x08007699
 8007564:	080076cb 	.word	0x080076cb
 8007568:	080076fd 	.word	0x080076fd
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 800756c:	4b67      	ldr	r3, [pc, #412]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800756e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007570:	4a66      	ldr	r2, [pc, #408]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007572:	f043 0310 	orr.w	r3, r3, #16
 8007576:	6453      	str	r3, [r2, #68]	; 0x44
 8007578:	4b64      	ldr	r3, [pc, #400]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800757a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_USART1_FORCE_RESET();
 8007584:	4b61      	ldr	r3, [pc, #388]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	4a60      	ldr	r2, [pc, #384]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800758a:	f043 0310 	orr.w	r3, r3, #16
 800758e:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 8007590:	4b5e      	ldr	r3, [pc, #376]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	4a5d      	ldr	r2, [pc, #372]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007596:	f023 0310 	bic.w	r3, r3, #16
 800759a:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 800759c:	e0af      	b.n	80076fe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 800759e:	4b5b      	ldr	r3, [pc, #364]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	4a5a      	ldr	r2, [pc, #360]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075a8:	6413      	str	r3, [r2, #64]	; 0x40
 80075aa:	4b58      	ldr	r3, [pc, #352]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b2:	623b      	str	r3, [r7, #32]
 80075b4:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_USART2_FORCE_RESET();
 80075b6:	4b55      	ldr	r3, [pc, #340]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	4a54      	ldr	r2, [pc, #336]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075c0:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 80075c2:	4b52      	ldr	r3, [pc, #328]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	4a51      	ldr	r2, [pc, #324]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075cc:	6213      	str	r3, [r2, #32]
      break;
 80075ce:	e096      	b.n	80076fe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_ENABLE();
 80075d0:	4b4e      	ldr	r3, [pc, #312]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d4:	4a4d      	ldr	r2, [pc, #308]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075da:	6413      	str	r3, [r2, #64]	; 0x40
 80075dc:	4b4b      	ldr	r3, [pc, #300]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075e4:	61fb      	str	r3, [r7, #28]
 80075e6:	69fb      	ldr	r3, [r7, #28]
      __HAL_RCC_USART3_FORCE_RESET();
 80075e8:	4b48      	ldr	r3, [pc, #288]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075ea:	6a1b      	ldr	r3, [r3, #32]
 80075ec:	4a47      	ldr	r2, [pc, #284]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075f2:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART3_RELEASE_RESET();
 80075f4:	4b45      	ldr	r3, [pc, #276]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	4a44      	ldr	r2, [pc, #272]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80075fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075fe:	6213      	str	r3, [r2, #32]
      break;
 8007600:	e07d      	b.n	80076fe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_ENABLE();
 8007602:	4b42      	ldr	r3, [pc, #264]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	4a41      	ldr	r2, [pc, #260]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007608:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800760c:	6413      	str	r3, [r2, #64]	; 0x40
 800760e:	4b3f      	ldr	r3, [pc, #252]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	69bb      	ldr	r3, [r7, #24]
      __HAL_RCC_UART4_FORCE_RESET();
 800761a:	4b3c      	ldr	r3, [pc, #240]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	4a3b      	ldr	r2, [pc, #236]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007624:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART4_RELEASE_RESET();
 8007626:	4b39      	ldr	r3, [pc, #228]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	4a38      	ldr	r2, [pc, #224]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800762c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007630:	6213      	str	r3, [r2, #32]
      break;
 8007632:	e064      	b.n	80076fe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_ENABLE();
 8007634:	4b35      	ldr	r3, [pc, #212]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	4a34      	ldr	r2, [pc, #208]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800763a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800763e:	6413      	str	r3, [r2, #64]	; 0x40
 8007640:	4b32      	ldr	r3, [pc, #200]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_UART5_FORCE_RESET();
 800764c:	4b2f      	ldr	r3, [pc, #188]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	4a2e      	ldr	r2, [pc, #184]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007656:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART5_RELEASE_RESET();
 8007658:	4b2c      	ldr	r3, [pc, #176]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	4a2b      	ldr	r2, [pc, #172]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800765e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007662:	6213      	str	r3, [r2, #32]
      break;
 8007664:	e04b      	b.n	80076fe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 8007666:	4b29      	ldr	r3, [pc, #164]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766a:	4a28      	ldr	r2, [pc, #160]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800766c:	f043 0320 	orr.w	r3, r3, #32
 8007670:	6453      	str	r3, [r2, #68]	; 0x44
 8007672:	4b26      	ldr	r3, [pc, #152]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	613b      	str	r3, [r7, #16]
 800767c:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART6_FORCE_RESET();
 800767e:	4b23      	ldr	r3, [pc, #140]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	4a22      	ldr	r2, [pc, #136]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007684:	f043 0320 	orr.w	r3, r3, #32
 8007688:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 800768a:	4b20      	ldr	r3, [pc, #128]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	4a1f      	ldr	r2, [pc, #124]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8007690:	f023 0320 	bic.w	r3, r3, #32
 8007694:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8007696:	e032      	b.n	80076fe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_ENABLE();
 8007698:	4b1c      	ldr	r3, [pc, #112]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800769a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769c:	4a1b      	ldr	r2, [pc, #108]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800769e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076a2:	6413      	str	r3, [r2, #64]	; 0x40
 80076a4:	4b19      	ldr	r3, [pc, #100]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80076a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076ac:	60fb      	str	r3, [r7, #12]
 80076ae:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_UART7_FORCE_RESET();
 80076b0:	4b16      	ldr	r3, [pc, #88]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80076b2:	6a1b      	ldr	r3, [r3, #32]
 80076b4:	4a15      	ldr	r2, [pc, #84]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80076b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076ba:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART7_RELEASE_RESET();
 80076bc:	4b13      	ldr	r3, [pc, #76]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	4a12      	ldr	r2, [pc, #72]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80076c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076c6:	6213      	str	r3, [r2, #32]
      break;
 80076c8:	e019      	b.n	80076fe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_ENABLE();
 80076ca:	4b10      	ldr	r3, [pc, #64]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80076cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ce:	4a0f      	ldr	r2, [pc, #60]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80076d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076d4:	6413      	str	r3, [r2, #64]	; 0x40
 80076d6:	4b0d      	ldr	r3, [pc, #52]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076de:	60bb      	str	r3, [r7, #8]
 80076e0:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_UART8_FORCE_RESET();
 80076e2:	4b0a      	ldr	r3, [pc, #40]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	4a09      	ldr	r2, [pc, #36]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80076e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076ec:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART8_RELEASE_RESET();
 80076ee:	4b07      	ldr	r3, [pc, #28]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	4a06      	ldr	r2, [pc, #24]	; (800770c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 80076f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076f8:	6213      	str	r3, [r2, #32]
      break;
 80076fa:	e000      	b.n	80076fe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UARTNone):
    	break;
 80076fc:	bf00      	nop
  }
}
 80076fe:	bf00      	nop
 8007700:	372c      	adds	r7, #44	; 0x2c
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	40023800 	.word	0x40023800

08007710 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	2b08      	cmp	r3, #8
 8007720:	d84d      	bhi.n	80077be <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
 8007722:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	0800774d 	.word	0x0800774d
 800772c:	0800775b 	.word	0x0800775b
 8007730:	08007769 	.word	0x08007769
 8007734:	08007777 	.word	0x08007777
 8007738:	08007785 	.word	0x08007785
 800773c:	08007793 	.word	0x08007793
 8007740:	080077a1 	.word	0x080077a1
 8007744:	080077af 	.word	0x080077af
 8007748:	080077bd 	.word	0x080077bd
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 800774c:	4b1f      	ldr	r3, [pc, #124]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800774e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007750:	4a1e      	ldr	r2, [pc, #120]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8007752:	f023 0310 	bic.w	r3, r3, #16
 8007756:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8007758:	e031      	b.n	80077be <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 800775a:	4b1c      	ldr	r3, [pc, #112]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	4a1b      	ldr	r2, [pc, #108]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8007760:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007764:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8007766:	e02a      	b.n	80077be <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_DISABLE();
 8007768:	4b18      	ldr	r3, [pc, #96]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800776a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776c:	4a17      	ldr	r2, [pc, #92]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800776e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007772:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8007774:	e023      	b.n	80077be <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_DISABLE();
 8007776:	4b15      	ldr	r3, [pc, #84]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	4a14      	ldr	r2, [pc, #80]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800777c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007780:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8007782:	e01c      	b.n	80077be <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_DISABLE();
 8007784:	4b11      	ldr	r3, [pc, #68]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	4a10      	ldr	r2, [pc, #64]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800778a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800778e:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8007790:	e015      	b.n	80077be <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 8007792:	4b0e      	ldr	r3, [pc, #56]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8007794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007796:	4a0d      	ldr	r2, [pc, #52]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8007798:	f023 0320 	bic.w	r3, r3, #32
 800779c:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800779e:	e00e      	b.n	80077be <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_DISABLE();
 80077a0:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80077a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a4:	4a09      	ldr	r2, [pc, #36]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80077a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077aa:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80077ac:	e007      	b.n	80077be <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_DISABLE();
 80077ae:	4b07      	ldr	r3, [pc, #28]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	4a06      	ldr	r2, [pc, #24]	; (80077cc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 80077b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077b8:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80077ba:	e000      	b.n	80077be <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UARTNone):
    	break;
 80077bc:	bf00      	nop
  }
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40023800 	.word	0x40023800

080077d0 <_ZN18QAT_Pixel_ARGB4444aSERKt>:
		m_uPxl = other.pxl();
		return *this;
	}

	//Assignment operator to accept a 16bit pixel value
	QAT_Pixel_ARGB4444& operator=(const uint16_t& other) {
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
		m_uPxl = other;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	881a      	ldrh	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	801a      	strh	r2, [r3, #0]
		return *this;
 80077e2:	687b      	ldr	r3, [r7, #4]
	}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <_ZN18QAT_Pixel_ARGB44443pxlEt>:
	uint16_t pxl(void) const {
		return m_uPxl;
	}

	//Sets the current 16bit pixel value
	void pxl(uint16_t pxl) {
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	807b      	strh	r3, [r7, #2]
		m_uPxl = pxl;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	887a      	ldrh	r2, [r7, #2]
 8007800:	801a      	strh	r2, [r3, #0]
	}
 8007802:	bf00      	nop
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <_ZN8QAD_LTDC4initEv>:
	static QA_Result init(void) {
 800780e:	b580      	push	{r7, lr}
 8007810:	af00      	add	r7, sp, #0
		return get().imp_init();
 8007812:	f7fe fe4b 	bl	80064ac <_ZN8QAD_LTDC3getEv>
 8007816:	4603      	mov	r3, r0
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe fe81 	bl	8006520 <_ZN8QAD_LTDC8imp_initEv>
 800781e:	4603      	mov	r3, r0
	}
 8007820:	4618      	mov	r0, r3
 8007822:	bd80      	pop	{r7, pc}

08007824 <_ZN8QAD_LTDC17flipLayer0BuffersEv>:
	//---------------------
	//Layer Control Methods

	//Used to flip the front and back buffer for layer 0
	//To be used at the end of rendering visual elements to layer 0 in order for them to become visible on the LCD display
	static void flipLayer0Buffers(void) {
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0
		get().imp_flipLayer0Buffers();
 8007828:	f7fe fe40 	bl	80064ac <_ZN8QAD_LTDC3getEv>
 800782c:	4603      	mov	r3, r0
 800782e:	4618      	mov	r0, r3
 8007830:	f7ff f98a 	bl	8006b48 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>
	}
 8007834:	bf00      	nop
 8007836:	bd80      	pop	{r7, pc}

08007838 <_ZN8QAD_LTDC17flipLayer1BuffersEv>:

	//Used to flip the front and back buffer for layer 1
	//To be used at the end of rendering visual elements to layer 1 in order for them to become visible on the LCD display
	static void flipLayer1Buffers(void) {
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
		get().imp_flipLayer1Buffers();
 800783c:	f7fe fe36 	bl	80064ac <_ZN8QAD_LTDC3getEv>
 8007840:	4603      	mov	r3, r0
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff f9c2 	bl	8006bcc <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>
	}
 8007848:	bf00      	nop
 800784a:	bd80      	pop	{r7, pc}

0800784c <_ZN8QAD_LTDC19getLayer0BackBufferEv>:
	static void* getLayer0BackBufferPtr(void) {
		return get().imp_getLayer0BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 0
	static QAD_LTDC_Buffer* getLayer0BackBuffer(void) {
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
		return get().imp_getLayer0BackBuffer();
 8007850:	f7fe fe2c 	bl	80064ac <_ZN8QAD_LTDC3getEv>
 8007854:	4603      	mov	r3, r0
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff f9fa 	bl	8006c50 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>
 800785c:	4603      	mov	r3, r0
	}
 800785e:	4618      	mov	r0, r3
 8007860:	bd80      	pop	{r7, pc}

08007862 <_ZN8QAD_LTDC19getLayer1BackBufferEv>:
	static void* getLayer1BackBufferPtr(void) {
		return get().imp_getLayer1BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 1
	static QAD_LTDC_Buffer* getLayer1BackBuffer(void) {
 8007862:	b580      	push	{r7, lr}
 8007864:	af00      	add	r7, sp, #0
		return get().imp_getLayer1BackBuffer();
 8007866:	f7fe fe21 	bl	80064ac <_ZN8QAD_LTDC3getEv>
 800786a:	4603      	mov	r3, r0
 800786c:	4618      	mov	r0, r3
 800786e:	f7ff fa15 	bl	8006c9c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>
 8007872:	4603      	mov	r3, r0
	}
 8007874:	4618      	mov	r0, r3
 8007876:	bd80      	pop	{r7, pc}

08007878 <_ZN7QAS_LCD8imp_initEv>:
//QAS_LCD Initialization Method
//
//To be called from static method init()
//To be used to initialize the LTDC peripheral and setup the Font Manager class
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAS_LCD::imp_init(void) {
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af04      	add	r7, sp, #16
 800787e:	6078      	str	r0, [r7, #4]

	//Return if system is already initialized
	if (m_eInitState) {
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <_ZN7QAS_LCD8imp_initEv+0x14>
  	return QA_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	e044      	b.n	8007916 <_ZN7QAS_LCD8imp_initEv+0x9e>
  }

	//Initialize LTDC driver class, returning QA_Fail if LTDC doesn't initialize successfully
	if (QAD_LTDC::init())
 800788c:	f7ff ffbf 	bl	800780e <_ZN8QAD_LTDC4initEv>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	bf14      	ite	ne
 8007896:	2301      	movne	r3, #1
 8007898:	2300      	moveq	r3, #0
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <_ZN7QAS_LCD8imp_initEv+0x2c>
		return QA_Fail;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e038      	b.n	8007916 <_ZN7QAS_LCD8imp_initEv+0x9e>


	//Setup font manager
	m_cFontMgr.clear();  //Clear font manager
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	330c      	adds	r3, #12
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fa2e 	bl	8007d0a <_ZN15QAS_LCD_FontMgr5clearEv>

	  //Add SegoeUI 12pt font (defined in QAS_LCD_Fonts_SegoeUI12pt.hpp)
	m_cFontMgr.add("SegoeUI12pt",
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f103 000c 	add.w	r0, r3, #12
 80078b4:	2302      	movs	r3, #2
 80078b6:	9302      	str	r3, [sp, #8]
 80078b8:	2303      	movs	r3, #3
 80078ba:	9301      	str	r3, [sp, #4]
 80078bc:	2311      	movs	r3, #17
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	4b17      	ldr	r3, [pc, #92]	; (8007920 <_ZN7QAS_LCD8imp_initEv+0xa8>)
 80078c2:	4a18      	ldr	r2, [pc, #96]	; (8007924 <_ZN7QAS_LCD8imp_initEv+0xac>)
 80078c4:	4918      	ldr	r1, [pc, #96]	; (8007928 <_ZN7QAS_LCD8imp_initEv+0xb0>)
 80078c6:	f000 f9f9 	bl	8007cbc <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI12pt_Height,
								 QAS_LCD_Fonts_SegoeUI12pt_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI12pt_CharGap);

	  //Add SegoeUI 20pt Semi-bold font (defined in QAS_LCD_Fonts_SegoeUI20ptSB.hpp)
	m_cFontMgr.add("SegoeUI20ptSB",
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f103 000c 	add.w	r0, r3, #12
 80078d0:	2303      	movs	r3, #3
 80078d2:	9302      	str	r3, [sp, #8]
 80078d4:	2305      	movs	r3, #5
 80078d6:	9301      	str	r3, [sp, #4]
 80078d8:	231b      	movs	r3, #27
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	4b13      	ldr	r3, [pc, #76]	; (800792c <_ZN7QAS_LCD8imp_initEv+0xb4>)
 80078de:	4a14      	ldr	r2, [pc, #80]	; (8007930 <_ZN7QAS_LCD8imp_initEv+0xb8>)
 80078e0:	4914      	ldr	r1, [pc, #80]	; (8007934 <_ZN7QAS_LCD8imp_initEv+0xbc>)
 80078e2:	f000 f9eb 	bl	8007cbc <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI20ptSB_Height,
								 QAS_LCD_Fonts_SegoeUI20ptSB_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI20ptSB_CharGap);

	  //Add Showcard Gothic 18pt font (defined in QAS_LCD_Fonts_ShowcardGothic18pt.hpp)
	m_cFontMgr.add("ShowcardGothic18pt",
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f103 000c 	add.w	r0, r3, #12
 80078ec:	2302      	movs	r3, #2
 80078ee:	9302      	str	r3, [sp, #8]
 80078f0:	2302      	movs	r3, #2
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	231a      	movs	r3, #26
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	4b0f      	ldr	r3, [pc, #60]	; (8007938 <_ZN7QAS_LCD8imp_initEv+0xc0>)
 80078fa:	4a10      	ldr	r2, [pc, #64]	; (800793c <_ZN7QAS_LCD8imp_initEv+0xc4>)
 80078fc:	4910      	ldr	r1, [pc, #64]	; (8007940 <_ZN7QAS_LCD8imp_initEv+0xc8>)
 80078fe:	f000 f9dd 	bl	8007cbc <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_ShowcardGothic18pt_SpaceWidth,
								 QAS_LCD_Fonts_ShowcardGothic18pt_CharGap);


	//Set System State
	m_eInitState = QA_Initialized; //Set system as now being initialized
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	701a      	strb	r2, [r3, #0]

	//Set initial data
	m_pDrawBuffer = NULL;   //Set current draw buffer to NULL
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	605a      	str	r2, [r3, #4]
	m_uDrawColor  = 0x0000; //Set current draw color to transparent black
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	811a      	strh	r2, [r3, #8]

	//Return
	return QA_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	0800a01c 	.word	0x0800a01c
 8007924:	08009ea4 	.word	0x08009ea4
 8007928:	08009bfc 	.word	0x08009bfc
 800792c:	0800a918 	.word	0x0800a918
 8007930:	0800a7a0 	.word	0x0800a7a0
 8007934:	08009c08 	.word	0x08009c08
 8007938:	0800be14 	.word	0x0800be14
 800793c:	0800bc9c 	.word	0x0800bc9c
 8007940:	08009c18 	.word	0x08009c18

08007944 <_ZN7QAS_LCD14imp_flipLayer0Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer0()
//Used to flip the front and back buffer for layer 0
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer0(void) {
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer0Buffers();
 800794c:	f7ff ff6a 	bl	8007824 <_ZN8QAD_LTDC17flipLayer0BuffersEv>
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <_ZN7QAS_LCD14imp_flipLayer1Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer1()
//Used to flip the front and back buffer for layer 1
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer1(void) {
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer1Buffers();
 8007960:	f7ff ff6a 	bl	8007838 <_ZN8QAD_LTDC17flipLayer1BuffersEv>
}
 8007964:	bf00      	nop
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method setDrawBuffer()
//Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
//eLayer - Sets whether the current draw buffer is layer 0 or layer1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
void QAS_LCD::imp_setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]

	//Retrieve required Back Buffer pointer based on selected layer and store to m_pDrawBuffer
	switch (eLayer) {
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x18>
 800797e:	2b01      	cmp	r3, #1
 8007980:	d006      	beq.n	8007990 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x24>
 8007982:	e00b      	b.n	800799c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer0):
	  	m_pDrawBuffer = QAD_LTDC::getLayer0BackBuffer();
 8007984:	f7ff ff62 	bl	800784c <_ZN8QAD_LTDC19getLayer0BackBufferEv>
 8007988:	4602      	mov	r2, r0
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	605a      	str	r2, [r3, #4]
	  	break;
 800798e:	e005      	b.n	800799c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer1):
	  	m_pDrawBuffer = QAD_LTDC::getLayer1BackBuffer();
 8007990:	f7ff ff67 	bl	8007862 <_ZN8QAD_LTDC19getLayer1BackBufferEv>
 8007994:	4602      	mov	r2, r0
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	605a      	str	r2, [r3, #4]
	  	break;
 800799a:	bf00      	nop
	}

	//Set currently selected draw buffer to Font Manager as well, to be used for text rendering methods
	m_cFontMgr.setDrawBuffer(m_pDrawBuffer);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f103 020c 	add.w	r2, r3, #12
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	4619      	mov	r1, r3
 80079a8:	4610      	mov	r0, r2
 80079aa:	f000 faef 	bl	8007f8c <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>
}
 80079ae:	bf00      	nop
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <_ZN7QAS_LCD16imp_setDrawColorEt>:
//QAS_LCD::imp_setDrawColor
//QAS_LCD Rendering Setup Method
//
//To be called from either of the two static setDrawColor() methods
//Sets the current color to be used for rendering methods
void QAS_LCD::imp_setDrawColor(uint16_t uColor) {
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	807b      	strh	r3, [r7, #2]

	//Store new draw color
	m_uDrawColor = uColor;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	887a      	ldrh	r2, [r7, #2]
 80079c6:	811a      	strh	r2, [r3, #8]

	//Set currently selected draw color to Font Manager as well, to be used for text rendering methods
  m_cFontMgr.setDrawColor(m_uDrawColor);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f103 020c 	add.w	r2, r3, #12
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	891b      	ldrh	r3, [r3, #8]
 80079d2:	4619      	mov	r1, r3
 80079d4:	4610      	mov	r0, r2
 80079d6:	f000 fae7 	bl	8007fa8 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <_ZN7QAS_LCD15imp_clearBufferEv>:
//QAS_LCD::imp_clearBuffer
//QAS_LCD Rendering Method
//
//To be called from static clearBuffer() method
//Used to clear the currently selected buffer to the currently selected draw color
void QAS_LCD::imp_clearBuffer(void) {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4a0b      	ldr	r2, [pc, #44]	; (8007a20 <_ZN7QAS_LCD15imp_clearBufferEv+0x3c>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d80e      	bhi.n	8007a16 <_ZN7QAS_LCD15imp_clearBufferEv+0x32>
  	m_pDrawBuffer->pixel[i] = m_uDrawColor;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	441a      	add	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3308      	adds	r3, #8
 8007a06:	4619      	mov	r1, r3
 8007a08:	4610      	mov	r0, r2
 8007a0a:	f7ff fee1 	bl	80077d0 <_ZN18QAT_Pixel_ARGB4444aSERKt>
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3301      	adds	r3, #1
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	e7ec      	b.n	80079f0 <_ZN7QAS_LCD15imp_clearBufferEv+0xc>
}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	0005dbff 	.word	0x0005dbff

08007a24 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>:
//
//To be called by static drawRect() method
//Used to draw a non-filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
void QAS_LCD::imp_drawRect(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08c      	sub	sp, #48	; 0x30
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.y) {
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	881a      	ldrh	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	885b      	ldrh	r3, [r3, #2]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d206      	bcs.n	8007a4a <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a48:	e005      	b.n	8007a56 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.y;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	885b      	ldrh	r3, [r3, #2]
 8007a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.y;
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	885b      	ldrh	r3, [r3, #2]
 8007a54:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	885a      	ldrh	r2, [r3, #2]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d206      	bcs.n	8007a70 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	885b      	ldrh	r3, [r3, #2]
 8007a6c:	623b      	str	r3, [r7, #32]
 8007a6e:	e005      	b.n	8007a7c <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	885b      	ldrh	r3, [r3, #2]
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	885b      	ldrh	r3, [r3, #2]
 8007a7a:	623b      	str	r3, [r7, #32]
  }

  //Top & Bottom
  uint32_t yt = ys*QAD_LTDC_WIDTH;
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007a82:	fb02 f303 	mul.w	r3, r2, r3
 8007a86:	617b      	str	r3, [r7, #20]
  uint32_t yb = ye*QAD_LTDC_WIDTH;
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007a8e:	fb02 f303 	mul.w	r3, r2, r3
 8007a92:	613b      	str	r3, [r7, #16]
  for (uint32_t x=xs; x<(xe+1); x++) {
 8007a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a96:	61fb      	str	r3, [r7, #28]
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d21d      	bcs.n	8007ade <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xba>
    m_pDrawBuffer->pixel[x+yt].pxl(m_uDrawColor);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	69f9      	ldr	r1, [r7, #28]
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	440b      	add	r3, r1
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	441a      	add	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	891b      	ldrh	r3, [r3, #8]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	f7ff fe9a 	bl	80077f0 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[x+yb].pxl(m_uDrawColor);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	69f9      	ldr	r1, [r7, #28]
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	440b      	add	r3, r1
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	441a      	add	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	891b      	ldrh	r3, [r3, #8]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	f7ff fe8d 	bl	80077f0 <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t x=xs; x<(xe+1); x++) {
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	61fb      	str	r3, [r7, #28]
 8007adc:	e7dc      	b.n	8007a98 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x74>
  }

  //Left & Right
  for (uint32_t y=(ys+1); y<ye; y++) {
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	61bb      	str	r3, [r7, #24]
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d225      	bcs.n	8007b38 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x114>
    m_pDrawBuffer->pixel[xs+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007af6:	fb01 f103 	mul.w	r1, r1, r3
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	440b      	add	r3, r1
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	441a      	add	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	891b      	ldrh	r3, [r3, #8]
 8007b06:	4619      	mov	r1, r3
 8007b08:	4610      	mov	r0, r2
 8007b0a:	f7ff fe71 	bl	80077f0 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[xe+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007b18:	fb01 f103 	mul.w	r1, r1, r3
 8007b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1e:	440b      	add	r3, r1
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	441a      	add	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	891b      	ldrh	r3, [r3, #8]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	f7ff fe60 	bl	80077f0 <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t y=(ys+1); y<ye; y++) {
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	3301      	adds	r3, #1
 8007b34:	61bb      	str	r3, [r7, #24]
 8007b36:	e7d5      	b.n	8007ae4 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xc0>
  }
}
 8007b38:	bf00      	nop
 8007b3a:	3730      	adds	r7, #48	; 0x30
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>:
//
//To be called by static drawRectFill() method
//Used to draw a filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
void QAS_LCD::imp_drawRectFill(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08c      	sub	sp, #48	; 0x30
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	881a      	ldrh	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d206      	bcs.n	8007b66 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b64:	e005      	b.n	8007b72 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.x;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.x;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	885a      	ldrh	r2, [r3, #2]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	885b      	ldrh	r3, [r3, #2]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d206      	bcs.n	8007b8c <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	885b      	ldrh	r3, [r3, #2]
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	885b      	ldrh	r3, [r3, #2]
 8007b88:	623b      	str	r3, [r7, #32]
 8007b8a:	e005      	b.n	8007b98 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	885b      	ldrh	r3, [r3, #2]
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	885b      	ldrh	r3, [r3, #2]
 8007b96:	623b      	str	r3, [r7, #32]
  }

  uint32_t yofs;
  for (uint32_t y=ys; y<(ye+1); y++) {
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	61fb      	str	r3, [r7, #28]
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	69fa      	ldr	r2, [r7, #28]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d221      	bcs.n	8007bea <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xaa>
    yofs = y*QAD_LTDC_WIDTH;
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007bac:	fb02 f303 	mul.w	r3, r2, r3
 8007bb0:	617b      	str	r3, [r7, #20]
    for (uint32_t x=xs; x<(xe+1); x++) {
 8007bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb4:	61bb      	str	r3, [r7, #24]
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	3301      	adds	r3, #1
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d210      	bcs.n	8007be2 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xa2>
      m_pDrawBuffer->pixel[x+yofs].pxl(m_uDrawColor);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	685a      	ldr	r2, [r3, #4]
 8007bc4:	69b9      	ldr	r1, [r7, #24]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	440b      	add	r3, r1
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	441a      	add	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	891b      	ldrh	r3, [r3, #8]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	f7ff fe0b 	bl	80077f0 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    for (uint32_t x=xs; x<(xe+1); x++) {
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	61bb      	str	r3, [r7, #24]
 8007be0:	e7e9      	b.n	8007bb6 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x76>
  for (uint32_t y=ys; y<(ye+1); y++) {
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	3301      	adds	r3, #1
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	e7d8      	b.n	8007b9c <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x5c>
    }
  }
}
 8007bea:	bf00      	nop
 8007bec:	3730      	adds	r7, #48	; 0x30
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>:
	QAS_LCD_Font(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t& uHeight, uint16_t& uSpaceWidth, uint16_t& uCharGap) :
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b086      	sub	sp, #24
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	607a      	str	r2, [r7, #4]
 8007c16:	603b      	str	r3, [r7, #0]
		m_uCharGap(uCharGap) {
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	881a      	ldrh	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	871a      	strh	r2, [r3, #56]	; 0x38
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	881a      	ldrh	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	881a      	ldrh	r2, [r3, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
		m_pDesc = (QAS_LCD_FontDesc*)pDesc;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	631a      	str	r2, [r3, #48]	; 0x30
		m_pData = (uint8_t*)pData;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	635a      	str	r2, [r3, #52]	; 0x34
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	75fb      	strb	r3, [r7, #23]
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
 8007c42:	2b2f      	cmp	r3, #47	; 0x2f
 8007c44:	d807      	bhi.n	8007c56 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x4c>
			m_cName[i] = 0;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	3301      	adds	r3, #1
 8007c52:	75fb      	strb	r3, [r7, #23]
 8007c54:	e7f4      	b.n	8007c40 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x36>
		strcpy(m_cName, strName);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	68b9      	ldr	r1, [r7, #8]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f001 fb78 	bl	8009350 <strcpy>
	}
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4618      	mov	r0, r3
 8007c64:	3718      	adds	r7, #24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <_ZN12QAS_LCD_FonteqEPKc>:
	bool operator==(const char* strName) {
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
		uint8_t uLen = strlen(strName);
 8007c74:	6838      	ldr	r0, [r7, #0]
 8007c76:	f7f8 fae3 	bl	8000240 <strlen>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	73bb      	strb	r3, [r7, #14]
		uint8_t uIdxLen = (uLen < QAS_LCD_FONTNAME_LENGTH) ? uLen : QAS_LCD_FONTNAME_LENGTH;
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	2b30      	cmp	r3, #48	; 0x30
 8007c82:	bf28      	it	cs
 8007c84:	2330      	movcs	r3, #48	; 0x30
 8007c86:	737b      	strb	r3, [r7, #13]
		for (uint8_t i=0; i<uIdxLen; i++) {
 8007c88:	2300      	movs	r3, #0
 8007c8a:	73fb      	strb	r3, [r7, #15]
 8007c8c:	7bfa      	ldrb	r2, [r7, #15]
 8007c8e:	7b7b      	ldrb	r3, [r7, #13]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d20e      	bcs.n	8007cb2 <_ZN12QAS_LCD_FonteqEPKc+0x48>
			if (m_cName[i] != strName[i])
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	5cd2      	ldrb	r2, [r2, r3]
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	440b      	add	r3, r1
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d001      	beq.n	8007caa <_ZN12QAS_LCD_FonteqEPKc+0x40>
				return false;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e004      	b.n	8007cb4 <_ZN12QAS_LCD_FonteqEPKc+0x4a>
		for (uint8_t i=0; i<uIdxLen; i++) {
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	3301      	adds	r3, #1
 8007cae:	73fb      	strb	r3, [r7, #15]
 8007cb0:	e7ec      	b.n	8007c8c <_ZN12QAS_LCD_FonteqEPKc+0x22>
		return true;
 8007cb2:	2301      	movs	r3, #1
	}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>:
//pDesc       - a pointer to an array of QAS_LCD_FontDesc structures for the font
//pData       - a pointer to an array of uint8_t values storing the bitmap data for the font
//uHeight     - the height in pixels of the font
//uSpaceWidth - the width in pixels of the space character of the font
//uCharGap    - the width in pixels of the gap between each character when rendering strings of characters
void QAS_LCD_FontMgr::add(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t uHeight, uint16_t uSpaceWidth, uint16_t uCharGap) {
 8007cbc:	b590      	push	{r4, r7, lr}
 8007cbe:	b08b      	sub	sp, #44	; 0x2c
 8007cc0:	af04      	add	r7, sp, #16
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]

	//Create the QAS_LCD_Font class for the new font, providing the required details
	QAS_LCD_Font* cFont = new QAS_LCD_Font(strName, pDesc, pData, uHeight, uSpaceWidth, uCharGap);
 8007cca:	2040      	movs	r0, #64	; 0x40
 8007ccc:	f001 f974 	bl	8008fb8 <_Znwj>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	461c      	mov	r4, r3
 8007cd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007cd8:	9302      	str	r3, [sp, #8]
 8007cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	68b9      	ldr	r1, [r7, #8]
 8007cec:	4620      	mov	r0, r4
 8007cee:	f7ff ff8c 	bl	8007c0a <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>
 8007cf2:	617c      	str	r4, [r7, #20]

	//Add the pointer to the font class to the m_vFonts vector
  m_vFonts.push_back(cFont);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f107 0214 	add.w	r2, r7, #20
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 fa56 	bl	80081ae <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>
}
 8007d02:	bf00      	nop
 8007d04:	371c      	adds	r7, #28
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd90      	pop	{r4, r7, pc}

08007d0a <_ZN15QAS_LCD_FontMgr5clearEv>:

//QAS_LCD_FontMgr::clear
//QAS_LCD_FontMgr Management Method
//
//Used to clear all fonts from the font manager
void QAS_LCD_FontMgr::clear(void) {
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  m_vFonts.clear();
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7f9 fdbc 	bl	8001892 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <_ZN15QAS_LCD_FontMgr4findEPKc>:
//QAS_LCD_FontMgr Management Method
//
//Used to find if a font exists in the Font Manager
//strName - The name of the font to search for
//Returns -1 if a matching font is not found, or the index of the font if it is gound
int8_t QAS_LCD_FontMgr::find(const char* strName) {
 8007d22:	b590      	push	{r4, r7, lr}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	6039      	str	r1, [r7, #0]
  int8_t iIdx = -1;
 8007d2c:	23ff      	movs	r3, #255	; 0xff
 8007d2e:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 8007d30:	2300      	movs	r3, #0
 8007d32:	73bb      	strb	r3, [r7, #14]
 8007d34:	7bbc      	ldrb	r4, [r7, #14]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7f9 fdb8 	bl	80018ae <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	429c      	cmp	r4, r3
 8007d42:	bf34      	ite	cc
 8007d44:	2301      	movcc	r3, #1
 8007d46:	2300      	movcs	r3, #0
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d014      	beq.n	8007d78 <_ZN15QAS_LCD_FontMgr4findEPKc+0x56>
  	if (*m_vFonts[i] == strName) {
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	7bba      	ldrb	r2, [r7, #14]
 8007d52:	4611      	mov	r1, r2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7f9 fdba 	bl	80018ce <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff ff82 	bl	8007c6a <_ZN12QAS_LCD_FonteqEPKc>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <_ZN15QAS_LCD_FontMgr4findEPKc+0x4e>
  		iIdx = i;
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 8007d70:	7bbb      	ldrb	r3, [r7, #14]
 8007d72:	3301      	adds	r3, #1
 8007d74:	73bb      	strb	r3, [r7, #14]
 8007d76:	e7dd      	b.n	8007d34 <_ZN15QAS_LCD_FontMgr4findEPKc+0x12>
  	}
  return iIdx;
 8007d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd90      	pop	{r4, r7, pc}

08007d84 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>:
//QAS_LCD_FontMgr::setFontByName
//QAS_LCD_FontMgr Management Method
//
//Used to set the current selected font
//strName - The name of the font to select
void QAS_LCD_FontMgr::setFontByName(const char* strName) {
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]

	//Search for matching font
	int8_t iIdx = find(strName);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff ffc6 	bl	8007d22 <_ZN15QAS_LCD_FontMgr4findEPKc>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73fb      	strb	r3, [r7, #15]

	//If no matching font is found then set current font to none
  if (iIdx < 0) {
 8007d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	da06      	bge.n	8007db0 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x2c>
  	m_iCurrentIdx = -1;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	22ff      	movs	r2, #255	; 0xff
 8007da6:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	611a      	str	r2, [r3, #16]
  	return;
 8007dae:	e00d      	b.n	8007dcc <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x48>
  }

  //If a matching font is found then set details as required
  m_iCurrentIdx = iIdx;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	7bfa      	ldrb	r2, [r7, #15]
 8007db4:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[iIdx];
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7f9 fd85 	bl	80018ce <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	611a      	str	r2, [r3, #16]
}
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>:
//QAS_LCD_FontMgr::setFontByIndex
//QAS_LCD_FontMgr Management Method
//
//Used to set the currently selected font
//uIdx - The index of the font to select
void QAS_LCD_FontMgr::setFontByIndex(uint8_t uIdx) {
 8007dd2:	b590      	push	{r4, r7, lr}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70fb      	strb	r3, [r7, #3]

	//If uIdx is outside of the range of fonts currently stored in m_vFonts index then set current font to none
  if (uIdx >= m_vFonts.size()) {
 8007dde:	78fc      	ldrb	r4, [r7, #3]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7f9 fd63 	bl	80018ae <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007de8:	4603      	mov	r3, r0
 8007dea:	429c      	cmp	r4, r3
 8007dec:	bf2c      	ite	cs
 8007dee:	2301      	movcs	r3, #1
 8007df0:	2300      	movcc	r3, #0
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d006      	beq.n	8007e06 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x34>
  	m_iCurrentIdx = -1;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	22ff      	movs	r2, #255	; 0xff
 8007dfc:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	611a      	str	r2, [r3, #16]
  	return;
 8007e04:	e00d      	b.n	8007e22 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x50>
  }

  //Set current font details as required
  m_iCurrentIdx = uIdx;
 8007e06:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[uIdx];
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	78fa      	ldrb	r2, [r7, #3]
 8007e12:	4611      	mov	r1, r2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7f9 fd5a 	bl	80018ce <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	611a      	str	r2, [r3, #16]
}
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd90      	pop	{r4, r7, pc}

08007e28 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>:

//QAS_LCD_FontMgr::getSpaceWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of the space character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getSpaceWidth(void) const {
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	da01      	bge.n	8007e3e <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x16>
		return 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e003      	b.n	8007e46 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x1e>
	return m_pCurrent->m_uSpaceWidth;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007e44:	b2db      	uxtb	r3, r3
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>:

//QAS_LCD_FontMgr::getCharGap
//QAS_LCD_FontMgr Data Methods
//
//Returns the width is pixels of the gap between each character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getCharGap(void) const {
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	da01      	bge.n	8007e68 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x16>
		return 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	e003      	b.n	8007e70 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x1e>
	return m_pCurrent->m_uCharGap;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007e6e:	b2db      	uxtb	r3, r3
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <_ZN15QAS_LCD_FontMgr12getCharWidthEc>:
//QAS_LCD_FontMgr::getCharWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of a specific character for the currently selected font.
//If no font is currently selected, or an invalid character is selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getCharWidth(char ch) {
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	460b      	mov	r3, r1
 8007e86:	70fb      	strb	r3, [r7, #3]
  if (m_iCurrentIdx < 0)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	da01      	bge.n	8007e96 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x1a>
    return 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	e01a      	b.n	8007ecc <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x50>
  uint16_t uWidth = 0;
 8007e96:	2300      	movs	r3, #0
 8007e98:	81fb      	strh	r3, [r7, #14]
  if (ch == 32) {
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	2b20      	cmp	r3, #32
 8007e9e:	d104      	bne.n	8007eaa <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x2e>
    uWidth = m_pCurrent->m_uSpaceWidth;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007ea6:	81fb      	strh	r3, [r7, #14]
 8007ea8:	e00f      	b.n	8007eca <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
  } else if ((ch >= 33) && (ch <= 126)) {
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	2b20      	cmp	r3, #32
 8007eae:	d90c      	bls.n	8007eca <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	2b7e      	cmp	r3, #126	; 0x7e
 8007eb4:	d809      	bhi.n	8007eca <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
    uWidth = m_pCurrent->m_pDesc[ch-33].uWidth;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ebc:	78f9      	ldrb	r1, [r7, #3]
 8007ebe:	4b06      	ldr	r3, [pc, #24]	; (8007ed8 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x5c>)
 8007ec0:	440b      	add	r3, r1
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	81fb      	strh	r3, [r7, #14]
  }
  return uWidth;
 8007eca:	89fb      	ldrh	r3, [r7, #14]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	3fffffdf 	.word	0x3fffffdf

08007edc <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>:
//QAS_LCD_FontMgr::getStringWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns is width in pixels for a specific C-style string based on the currently selected font.
//If no font is currently selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getStringWidth(const char* str) {
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  uint16_t uWidth = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	81fb      	strh	r3, [r7, #14]
  uint16_t uLength = strlen(str);
 8007eea:	6838      	ldr	r0, [r7, #0]
 8007eec:	f7f8 f9a8 	bl	8000240 <strlen>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	817b      	strh	r3, [r7, #10]
  uint8_t  uChar;

  if ((uLength == 0) || (m_iCurrentIdx < 0))
 8007ef4:	897b      	ldrh	r3, [r7, #10]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x28>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	da01      	bge.n	8007f08 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x2c>
    return uWidth;
 8007f04:	89fb      	ldrh	r3, [r7, #14]
 8007f06:	e03b      	b.n	8007f80 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xa4>

  for (uint8_t i=0; i<uLength; i++) {
 8007f08:	2300      	movs	r3, #0
 8007f0a:	737b      	strb	r3, [r7, #13]
 8007f0c:	7b7a      	ldrb	r2, [r7, #13]
 8007f0e:	897b      	ldrh	r3, [r7, #10]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	da2e      	bge.n	8007f72 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x96>
    uChar = (uint8_t)str[i];
 8007f14:	7b7b      	ldrb	r3, [r7, #13]
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	4413      	add	r3, r2
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	727b      	strb	r3, [r7, #9]
    if (uChar == 32) {
 8007f1e:	7a7b      	ldrb	r3, [r7, #9]
 8007f20:	2b20      	cmp	r3, #32
 8007f22:	d10b      	bne.n	8007f3c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x60>
      uWidth += (m_pCurrent->m_uSpaceWidth + m_pCurrent->m_uCharGap);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007f30:	4413      	add	r3, r2
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	89fb      	ldrh	r3, [r7, #14]
 8007f36:	4413      	add	r3, r2
 8007f38:	81fb      	strh	r3, [r7, #14]
 8007f3a:	e016      	b.n	8007f6a <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
    } else if ((uChar >= 33) && (uChar <= 126)) {
 8007f3c:	7a7b      	ldrb	r3, [r7, #9]
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	d913      	bls.n	8007f6a <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
 8007f42:	7a7b      	ldrb	r3, [r7, #9]
 8007f44:	2b7e      	cmp	r3, #126	; 0x7e
 8007f46:	d810      	bhi.n	8007f6a <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
      uWidth += (m_pCurrent->m_pDesc[uChar-33].uWidth + m_pCurrent->m_uCharGap);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f4e:	7a79      	ldrb	r1, [r7, #9]
 8007f50:	4b0d      	ldr	r3, [pc, #52]	; (8007f88 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xac>)
 8007f52:	440b      	add	r3, r1
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	881a      	ldrh	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007f60:	4413      	add	r3, r2
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	89fb      	ldrh	r3, [r7, #14]
 8007f66:	4413      	add	r3, r2
 8007f68:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i=0; i<uLength; i++) {
 8007f6a:	7b7b      	ldrb	r3, [r7, #13]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	737b      	strb	r3, [r7, #13]
 8007f70:	e7cc      	b.n	8007f0c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x30>
    }
  }
  uWidth -= m_pCurrent->m_uCharGap;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007f78:	89fa      	ldrh	r2, [r7, #14]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	81fb      	strh	r3, [r7, #14]
  return uWidth;
 8007f7e:	89fb      	ldrh	r3, [r7, #14]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	3fffffdf 	.word	0x3fffffdf

08007f8c <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>:
//QAS_LCD_FontMgr::setDrawBuffer
//QAS_LCD_FontMgr Data Methods
//
//Sets the current frame buffer for text to be rendered to
//This method is to be called by QAS_LCD::imp_SetDrawBuffer() method
void QAS_LCD_FontMgr::setDrawBuffer(QAD_LTDC_Buffer* pBuffer) {
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  m_pBuffer = pBuffer;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	615a      	str	r2, [r3, #20]
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>:
//QAS_LCD_FontMgr::setDrawColor
//QAS_LCD_FontMgr Data Methods
//
//Sets the current color for text rendering
//This method is to be called by QAS_LCD::imp_setDrawColor() method
void QAS_LCD_FontMgr::setDrawColor(uint16_t uColor) {
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	807b      	strh	r3, [r7, #2]
  m_uColor = uColor;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	887a      	ldrh	r2, [r7, #2]
 8007fb8:	831a      	strh	r2, [r3, #24]
}
 8007fba:	bf00      	nop
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>:
//
//Used to draw a center-aligned string of characters using the currently selected font/typeface
//String will be drawn to currently selected draw buffer with currently selected draw color
//cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
//str  - The C-style string to be drawn
void QAS_LCD_FontMgr::drawStrC(QAT_Vector2_16 cPos, const char* str) {
 8007fc6:	b590      	push	{r4, r7, lr}
 8007fc8:	b089      	sub	sp, #36	; 0x24
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
  if ((m_pBuffer == NULL) || (m_iCurrentIdx < 0))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d067      	beq.n	80080aa <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	db62      	blt.n	80080aa <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
    return;

  uint8_t uLen = strlen(str);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7f8 f92b 	bl	8000240 <strlen>
 8007fea:	4603      	mov	r3, r0
 8007fec:	77bb      	strb	r3, [r7, #30]
  if (uLen < 0) return;

  QAT_Vector2_16 cDrawPos = cPos;
 8007fee:	f107 0314 	add.w	r3, r7, #20
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7f8 ffa4 	bl	8000f42 <_ZN14QAT_Vector2_16C1ERKS_>
  cDrawPos.x -= (getStringWidth(str) / 2);
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f7ff ff6d 	bl	8007edc <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>
 8008002:	4603      	mov	r3, r0
 8008004:	085b      	lsrs	r3, r3, #1
 8008006:	b29b      	uxth	r3, r3
 8008008:	8aba      	ldrh	r2, [r7, #20]
 800800a:	b29b      	uxth	r3, r3
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	b29b      	uxth	r3, r3
 8008010:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 8008012:	2300      	movs	r3, #0
 8008014:	77fb      	strb	r3, [r7, #31]
 8008016:	7ffa      	ldrb	r2, [r7, #31]
 8008018:	7fbb      	ldrb	r3, [r7, #30]
 800801a:	429a      	cmp	r2, r3
 800801c:	d246      	bcs.n	80080ac <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe6>
  	if ((str[i] >= 33) && (str[i] <= 126)) {
 800801e:	7ffb      	ldrb	r3, [r7, #31]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	4413      	add	r3, r2
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	2b20      	cmp	r3, #32
 8008028:	d92c      	bls.n	8008084 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
 800802a:	7ffb      	ldrb	r3, [r7, #31]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	4413      	add	r3, r2
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b7e      	cmp	r3, #126	; 0x7e
 8008034:	d826      	bhi.n	8008084 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
      drawCharP(cDrawPos, str[i]);
 8008036:	f107 0214 	add.w	r2, r7, #20
 800803a:	f107 0318 	add.w	r3, r7, #24
 800803e:	4611      	mov	r1, r2
 8008040:	4618      	mov	r0, r3
 8008042:	f7f8 ff7e 	bl	8000f42 <_ZN14QAT_Vector2_16C1ERKS_>
 8008046:	7ffb      	ldrb	r3, [r7, #31]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	4413      	add	r3, r2
 800804c:	781a      	ldrb	r2, [r3, #0]
 800804e:	f107 0318 	add.w	r3, r7, #24
 8008052:	4619      	mov	r1, r3
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 f82c 	bl	80080b2 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>
      cDrawPos.x += getCharWidth(str[i]) + getCharGap();
 800805a:	7ffb      	ldrb	r3, [r7, #31]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	4413      	add	r3, r2
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	4619      	mov	r1, r3
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f7ff ff09 	bl	8007e7c <_ZN15QAS_LCD_FontMgr12getCharWidthEc>
 800806a:	4603      	mov	r3, r0
 800806c:	461c      	mov	r4, r3
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f7ff feef 	bl	8007e52 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 8008074:	4603      	mov	r3, r0
 8008076:	4423      	add	r3, r4
 8008078:	8aba      	ldrh	r2, [r7, #20]
 800807a:	b29b      	uxth	r3, r3
 800807c:	4413      	add	r3, r2
 800807e:	b29b      	uxth	r3, r3
 8008080:	82bb      	strh	r3, [r7, #20]
 8008082:	e00e      	b.n	80080a2 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xdc>
  	} else {
  		cDrawPos.x += getSpaceWidth() + getCharGap();
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7ff fecf 	bl	8007e28 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>
 800808a:	4603      	mov	r3, r0
 800808c:	461c      	mov	r4, r3
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f7ff fedf 	bl	8007e52 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 8008094:	4603      	mov	r3, r0
 8008096:	4423      	add	r3, r4
 8008098:	8aba      	ldrh	r2, [r7, #20]
 800809a:	b29b      	uxth	r3, r3
 800809c:	4413      	add	r3, r2
 800809e:	b29b      	uxth	r3, r3
 80080a0:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 80080a2:	7ffb      	ldrb	r3, [r7, #31]
 80080a4:	3301      	adds	r3, #1
 80080a6:	77fb      	strb	r3, [r7, #31]
 80080a8:	e7b5      	b.n	8008016 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0x50>
    return;
 80080aa:	bf00      	nop
  	}
  }
}
 80080ac:	3724      	adds	r7, #36	; 0x24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd90      	pop	{r4, r7, pc}

080080b2 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>:
//QAS_LCD_FontMgr::drawCharP
//QAS_LCD_FontMgr Private Rendering Method
//
//Used to draw an individual character based on selected font's bitmap data
//This method is to be used by drawChar(), drawStrL(), drawStrC() and drawStrR() methods
void QAS_LCD_FontMgr::drawCharP(QAT_Vector2_16 cPos, char ch) {
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b08a      	sub	sp, #40	; 0x28
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	4613      	mov	r3, r2
 80080be:	71fb      	strb	r3, [r7, #7]
  uint16_t uLetter = (uint8_t)ch - 33;
 80080c0:	79fb      	ldrb	r3, [r7, #7]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	3b21      	subs	r3, #33	; 0x21
 80080c6:	83bb      	strh	r3, [r7, #28]
  uint16_t uWidth  = m_pCurrent->m_pDesc[uLetter].uWidth;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ce:	8bbb      	ldrh	r3, [r7, #28]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	837b      	strh	r3, [r7, #26]
  uint32_t uOffset = m_pCurrent->m_pDesc[uLetter].uOffset;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080de:	8bbb      	ldrh	r3, [r7, #28]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	885b      	ldrh	r3, [r3, #2]
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24

  uint8_t uLine;
  uint8_t uLineInc;
  uint32_t uCur;

  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 80080e8:	2300      	movs	r3, #0
 80080ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80080ee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	6912      	ldr	r2, [r2, #16]
 80080f6:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 80080f8:	4293      	cmp	r3, r2
 80080fa:	da54      	bge.n	80081a6 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xf4>
    uLineInc = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uCur = cPos.x+((cPos.y+uHeight)*QAD_LTDC_WIDTH);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	4619      	mov	r1, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	885b      	ldrh	r3, [r3, #2]
 800810c:	461a      	mov	r2, r3
 800810e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008112:	4413      	add	r3, r2
 8008114:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008118:	fb02 f303 	mul.w	r3, r2, r3
 800811c:	440b      	add	r3, r1
 800811e:	617b      	str	r3, [r7, #20]
    for (uint16_t i=0; i<uWidth; i++) {
 8008120:	2300      	movs	r3, #0
 8008122:	83fb      	strh	r3, [r7, #30]
 8008124:	8bfa      	ldrh	r2, [r7, #30]
 8008126:	8b7b      	ldrh	r3, [r7, #26]
 8008128:	429a      	cmp	r2, r3
 800812a:	d236      	bcs.n	800819a <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe8>
      if (uLineInc == 0) {
 800812c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x98>
        uLine = m_pCurrent->m_pData[uOffset];
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	4413      	add	r3, r2
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uOffset++;
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	3301      	adds	r3, #1
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (uLine & 0x01)
 800814a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00c      	beq.n	8008170 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xbe>
        m_pBuffer->pixel[uCur+i] = m_uColor;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	695a      	ldr	r2, [r3, #20]
 800815a:	8bf9      	ldrh	r1, [r7, #30]
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	440b      	add	r3, r1
 8008160:	005b      	lsls	r3, r3, #1
 8008162:	441a      	add	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3318      	adds	r3, #24
 8008168:	4619      	mov	r1, r3
 800816a:	4610      	mov	r0, r2
 800816c:	f7ff fb30 	bl	80077d0 <_ZN18QAT_Pixel_ARGB4444aSERKt>
      uLine = uLine >> 1;
 8008170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008174:	105b      	asrs	r3, r3, #1
 8008176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      uLineInc++;
 800817a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800817e:	3301      	adds	r3, #1
 8008180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (uLineInc > 7)
 8008184:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008188:	2b07      	cmp	r3, #7
 800818a:	d902      	bls.n	8008192 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe0>
        uLineInc = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    for (uint16_t i=0; i<uWidth; i++) {
 8008192:	8bfb      	ldrh	r3, [r7, #30]
 8008194:	3301      	adds	r3, #1
 8008196:	83fb      	strh	r3, [r7, #30]
 8008198:	e7c4      	b.n	8008124 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x72>
  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 800819a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800819e:	3301      	adds	r3, #1
 80081a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80081a4:	e7a3      	b.n	80080ee <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x3c>
    }
  }
}
 80081a6:	bf00      	nop
 80081a8:	3728      	adds	r7, #40	; 0x28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d00c      	beq.n	80081de <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	4619      	mov	r1, r3
 80081ce:	f000 f823 	bl	8008218 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	1d1a      	adds	r2, r3, #4
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	605a      	str	r2, [r3, #4]
      }
 80081dc:	e008      	b.n	80081f0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f82d 	bl	800823e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>
 80081e4:	4603      	mov	r3, r0
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f84e 	bl	800828c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	f107 030c 	add.w	r3, r7, #12
 8008206:	4611      	mov	r1, r2
 8008208:	4618      	mov	r0, r3
 800820a:	f000 f8fb 	bl	8008404 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f908 	bl	800843a <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 800822a:	4603      	mov	r3, r0
 800822c:	461a      	mov	r2, r3
 800822e:	68b9      	ldr	r1, [r7, #8]
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 f90d 	bl	8008450 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8008236:	bf00      	nop
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	1d1a      	adds	r2, r3, #4
 800824a:	f107 030c 	add.w	r3, r7, #12
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f000 f8d7 	bl	8008404 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8008266:	4618      	mov	r0, r3
 8008268:	f000 f805 	bl	8008276 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800826c:	4603      	mov	r3, r0
      }
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800827e:	2301      	movs	r3, #1
      }
 8008280:	4618      	mov	r0, r3
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800828c:	b5b0      	push	{r4, r5, r7, lr}
 800828e:	b08c      	sub	sp, #48	; 0x30
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8008298:	4a59      	ldr	r2, [pc, #356]	; (8008400 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800829a:	2101      	movs	r1, #1
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 f8ed 	bl	800847c <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>
 80082a2:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f7ff ffa1 	bl	80081f8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>
 80082b6:	4603      	mov	r3, r0
 80082b8:	617b      	str	r3, [r7, #20]
 80082ba:	f107 0214 	add.w	r2, r7, #20
 80082be:	f107 0308 	add.w	r3, r7, #8
 80082c2:	4611      	mov	r1, r2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 f920 	bl	800850a <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80082ca:	4603      	mov	r3, r0
 80082cc:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 f92e 	bl	8008534 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>
 80082d8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80082de:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	18d5      	adds	r5, r2, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f8a6 	bl	800843a <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 80082ee:	4603      	mov	r3, r0
 80082f0:	461a      	mov	r2, r3
 80082f2:	4629      	mov	r1, r5
 80082f4:	4620      	mov	r0, r4
 80082f6:	f7ff ff8f 	bl	8008218 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80082fa:	2300      	movs	r3, #0
 80082fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80082fe:	f7ff ffaf 	bl	8008260 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d027      	beq.n	8008358 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008308:	f107 0308 	add.w	r3, r7, #8
 800830c:	4618      	mov	r0, r3
 800830e:	f000 f889 	bl	8008424 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8008312:	4603      	mov	r3, r0
 8008314:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	4618      	mov	r0, r3
 800831a:	f7f9 fb90 	bl	8001a3e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800831e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	4621      	mov	r1, r4
 8008324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008326:	f000 f919 	bl	800855c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800832a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800832c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832e:	3304      	adds	r3, #4
 8008330:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008332:	f107 0308 	add.w	r3, r7, #8
 8008336:	4618      	mov	r0, r3
 8008338:	f000 f874 	bl	8008424 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800833c:	4603      	mov	r3, r0
 800833e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4618      	mov	r0, r3
 8008344:	f7f9 fb7b 	bl	8001a3e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8008348:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800834a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800834c:	6a39      	ldr	r1, [r7, #32]
 800834e:	4620      	mov	r0, r4
 8008350:	f000 f904 	bl	800855c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8008354:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008356:	e026      	b.n	80083a6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8008358:	f107 0308 	add.w	r3, r7, #8
 800835c:	4618      	mov	r0, r3
 800835e:	f000 f861 	bl	8008424 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8008362:	4603      	mov	r3, r0
 8008364:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	4618      	mov	r0, r3
 800836a:	f7f9 fb68 	bl	8001a3e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800836e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	4621      	mov	r1, r4
 8008374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008376:	f000 f905 	bl	8008584 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 800837a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	3304      	adds	r3, #4
 8008380:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8008382:	f107 0308 	add.w	r3, r7, #8
 8008386:	4618      	mov	r0, r3
 8008388:	f000 f84c 	bl	8008424 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800838c:	4603      	mov	r3, r0
 800838e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4618      	mov	r0, r3
 8008394:	f7f9 fb53 	bl	8001a3e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8008398:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800839a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800839c:	6a39      	ldr	r1, [r7, #32]
 800839e:	4620      	mov	r0, r4
 80083a0:	f000 f8f0 	bl	8008584 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 80083a4:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80083a6:	f7ff ff5b 	bl	8008260 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 80083aa:	4603      	mov	r3, r0
 80083ac:	f083 0301 	eor.w	r3, r3, #1
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d009      	beq.n	80083ca <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7f9 fb40 	bl	8001a3e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 80083be:	4603      	mov	r3, r0
 80083c0:	461a      	mov	r2, r3
 80083c2:	6a39      	ldr	r1, [r7, #32]
 80083c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083c6:	f7f9 fb45 	bl	8001a54 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80083ca:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	689a      	ldr	r2, [r3, #8]
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80083d6:	461a      	mov	r2, r3
 80083d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083da:	f7f9 fb1d 	bl	8001a18 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083e8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	441a      	add	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	609a      	str	r2, [r3, #8]
    }
 80083f6:	bf00      	nop
 80083f8:	3730      	adds	r7, #48	; 0x30
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bdb0      	pop	{r4, r5, r7, pc}
 80083fe:	bf00      	nop
 8008400:	08009c2c 	.word	0x08009c2c

08008404 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4618      	mov	r0, r3
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4618      	mov	r0, r3
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8008450:	b590      	push	{r4, r7, lr}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7ff ffec 	bl	800843a <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8008462:	4603      	mov	r3, r0
 8008464:	681c      	ldr	r4, [r3, #0]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	4619      	mov	r1, r3
 800846a:	2004      	movs	r0, #4
 800846c:	f7ff fbc1 	bl	8007bf2 <_ZnwjPv>
 8008470:	4603      	mov	r3, r0
 8008472:	601c      	str	r4, [r3, #0]
 8008474:	bf00      	nop
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	bd90      	pop	{r4, r7, pc}

0800847c <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800847c:	b590      	push	{r4, r7, lr}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 f894 	bl	80085b6 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 800848e:	4604      	mov	r4, r0
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f7f9 fa0c 	bl	80018ae <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8008496:	4603      	mov	r3, r0
 8008498:	1ae2      	subs	r2, r4, r3
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	429a      	cmp	r2, r3
 800849e:	bf34      	ite	cc
 80084a0:	2301      	movcc	r3, #1
 80084a2:	2300      	movcs	r3, #0
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fd9d 	bl	8008fea <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f7f9 f9fc 	bl	80018ae <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 80084b6:	4604      	mov	r4, r0
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f7f9 f9f8 	bl	80018ae <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 80084be:	4603      	mov	r3, r0
 80084c0:	613b      	str	r3, [r7, #16]
 80084c2:	f107 0208 	add.w	r2, r7, #8
 80084c6:	f107 0310 	add.w	r3, r7, #16
 80084ca:	4611      	mov	r1, r2
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 f883 	bl	80085d8 <_ZSt3maxIjERKT_S2_S2_>
 80084d2:	4603      	mov	r3, r0
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4423      	add	r3, r4
 80084d8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f7f9 f9e7 	bl	80018ae <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 80084e0:	4602      	mov	r2, r0
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d306      	bcc.n	80084f6 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 f864 	bl	80085b6 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 80084ee:	4602      	mov	r2, r0
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d904      	bls.n	8008500 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x84>
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 f85d 	bl	80085b6 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 80084fc:	4603      	mov	r3, r0
 80084fe:	e000      	b.n	8008502 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x86>
 8008500:	697b      	ldr	r3, [r7, #20]
      }
 8008502:	4618      	mov	r0, r3
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	bd90      	pop	{r4, r7, pc}

0800850a <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800850a:	b590      	push	{r4, r7, lr}
 800850c:	b083      	sub	sp, #12
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7ff ff85 	bl	8008424 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800851a:	4603      	mov	r3, r0
 800851c:	681c      	ldr	r4, [r3, #0]
 800851e:	6838      	ldr	r0, [r7, #0]
 8008520:	f7ff ff80 	bl	8008424 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8008524:	4603      	mov	r3, r0
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	1ae3      	subs	r3, r4, r3
 800852a:	109b      	asrs	r3, r3, #2
 800852c:	4618      	mov	r0, r3
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	bd90      	pop	{r4, r7, pc}

08008534 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d006      	beq.n	8008552 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x1e>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	4618      	mov	r0, r3
 800854a:	f000 f859 	bl	8008600 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>
 800854e:	4603      	mov	r3, r0
 8008550:	e000      	b.n	8008554 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x20>
 8008552:	2300      	movs	r3, #0
      }
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800855c:	b590      	push	{r4, r7, lr}
 800855e:	b089      	sub	sp, #36	; 0x24
 8008560:	af02      	add	r7, sp, #8
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
 8008568:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800856a:	f88d 4000 	strb.w	r4, [sp]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	68b9      	ldr	r1, [r7, #8]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f852 	bl	800861e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800857a:	4603      	mov	r3, r0
      }
 800857c:	4618      	mov	r0, r3
 800857e:	371c      	adds	r7, #28
 8008580:	46bd      	mov	sp, r7
 8008582:	bd90      	pop	{r4, r7, pc}

08008584 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8008584:	b590      	push	{r4, r7, lr}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
 8008590:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 f855 	bl	8008642 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 8008598:	4604      	mov	r4, r0
 800859a:	68b8      	ldr	r0, [r7, #8]
 800859c:	f000 f851 	bl	8008642 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 80085a0:	4601      	mov	r1, r0
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 f85a 	bl	8008660 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80085ac:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd90      	pop	{r4, r7, pc}

080085b6 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 f878 	bl	80086b6 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 80085c6:	4603      	mov	r3, r0
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 f85a 	bl	8008682 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>
 80085ce:	4603      	mov	r3, r0
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d201      	bcs.n	80085f2 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	e000      	b.n	80085f4 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80085f2:	687b      	ldr	r3, [r7, #4]
    }
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800860a:	2200      	movs	r2, #0
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f85c 	bl	80086cc <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>
 8008614:	4603      	mov	r3, r0
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
 800862a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 f868 	bl	8008708 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008638:	4603      	mov	r3, r0
      }
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800864a:	f107 030c 	add.w	r3, r7, #12
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 f876 	bl	8008742 <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 f874 	bl	8008760 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 8008678:	4603      	mov	r3, r0
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800868a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800868e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f889 	bl	80087a8 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>
 8008696:	4603      	mov	r3, r0
 8008698:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800869a:	f107 0208 	add.w	r2, r7, #8
 800869e:	f107 030c 	add.w	r3, r7, #12
 80086a2:	4611      	mov	r1, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 f88b 	bl	80087c0 <_ZSt3minIjERKT_S2_S2_>
 80086aa:	4603      	mov	r3, r0
 80086ac:	681b      	ldr	r3, [r3, #0]
      }
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80086b6:	b480      	push	{r7}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4618      	mov	r0, r3
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 f885 	bl	80087e8 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 80086de:	4602      	mov	r2, r0
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	4293      	cmp	r3, r2
 80086e4:	bf8c      	ite	hi
 80086e6:	2301      	movhi	r3, #1
 80086e8:	2300      	movls	r3, #0
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80086f0:	f000 fc78 	bl	8008fe4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fc5d 	bl	8008fb8 <_Znwj>
 80086fe:	4603      	mov	r3, r0
      }
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8008708:	b5b0      	push	{r4, r5, r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 f872 	bl	8008800 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800871c:	4604      	mov	r4, r0
 800871e:	68b8      	ldr	r0, [r7, #8]
 8008720:	f000 f86e 	bl	8008800 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8008724:	4605      	mov	r5, r0
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f86a 	bl	8008800 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800872c:	4602      	mov	r2, r0
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	4629      	mov	r1, r5
 8008732:	4620      	mov	r0, r4
 8008734:	f000 f86f 	bl	8008816 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8008738:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bdb0      	pop	{r4, r5, r7, pc}

08008742 <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>:
      move_iterator(iterator_type __i)
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800876c:	2301      	movs	r3, #1
 800876e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f86c 	bl	8008852 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>
 800877a:	4603      	mov	r3, r0
    }
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8008790:	2301      	movs	r3, #1
 8008792:	75fb      	strb	r3, [r7, #23]
			     && __is_pointer<_II>::__value
			     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
			      _Category>::__copy_m(__first, __last, __result);
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 f86a 	bl	8008872 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>
 800879e:	4603      	mov	r3, r0
    }
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f819 	bl	80087e8 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 80087b6:	4603      	mov	r3, r0
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d201      	bcs.n	80087da <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	e000      	b.n	80087dc <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80087da:	687b      	ldr	r3, [r7, #4]
    }
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80087f0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80087f4:	4618      	mov	r0, r3
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>:
    __niter_base(_Iterator __it)
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4618      	mov	r0, r3
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8008816:	b580      	push	{r7, lr}
 8008818:	b086      	sub	sp, #24
 800881a:	af00      	add	r7, sp, #0
 800881c:	60f8      	str	r0, [r7, #12]
 800881e:	60b9      	str	r1, [r7, #8]
 8008820:	607a      	str	r2, [r7, #4]
 8008822:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	109b      	asrs	r3, r3, #2
 800882c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	dd06      	ble.n	8008842 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	461a      	mov	r2, r3
 800883a:	68f9      	ldr	r1, [r7, #12]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fc47 	bl	80090d0 <memmove>
      return __result + __count;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	4413      	add	r3, r2
    }
 800884a:	4618      	mov	r0, r3
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	60f8      	str	r0, [r7, #12]
 800885a:	60b9      	str	r1, [r7, #8]
 800885c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	68b9      	ldr	r1, [r7, #8]
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 f822 	bl	80088ac <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 8008868:	4603      	mov	r3, r0
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008872:	b580      	push	{r7, lr}
 8008874:	b086      	sub	sp, #24
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	109b      	asrs	r3, r3, #2
 8008886:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d006      	beq.n	800889c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	461a      	mov	r2, r3
 8008894:	68f9      	ldr	r1, [r7, #12]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fc1a 	bl	80090d0 <memmove>
	  return __result + _Num;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	4413      	add	r3, r2
	}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80088ac:	b590      	push	{r4, r7, lr}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f000 f80f 	bl	80088dc <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80088be:	4604      	mov	r4, r0
 80088c0:	68b8      	ldr	r0, [r7, #8]
 80088c2:	f000 f80b 	bl	80088dc <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80088c6:	4603      	mov	r3, r0
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	4619      	mov	r1, r3
 80088cc:	4620      	mov	r0, r4
 80088ce:	f000 f816 	bl	80088fe <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 80088d2:	4603      	mov	r3, r0
    }
 80088d4:	4618      	mov	r0, r3
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd90      	pop	{r4, r7, pc}

080088dc <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80088e4:	1d3b      	adds	r3, r7, #4
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f82c 	bl	8008944 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>
 80088ec:	4603      	mov	r3, r0
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 f834 	bl	800895c <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>
 80088f4:	4603      	mov	r3, r0
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80088fe:	b5b0      	push	{r4, r5, r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	60b9      	str	r1, [r7, #8]
 8008908:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f7ff ff78 	bl	8008800 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8008910:	4604      	mov	r4, r0
 8008912:	68b8      	ldr	r0, [r7, #8]
 8008914:	f7ff ff74 	bl	8008800 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8008918:	4605      	mov	r5, r0
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff ff6f 	bl	8008800 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8008922:	4603      	mov	r3, r0
 8008924:	461a      	mov	r2, r3
 8008926:	4629      	mov	r1, r5
 8008928:	4620      	mov	r0, r4
 800892a:	f7ff ff2b 	bl	8008784 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 800892e:	4602      	mov	r2, r0
 8008930:	1d3b      	adds	r3, r7, #4
 8008932:	4611      	mov	r1, r2
 8008934:	4618      	mov	r0, r3
 8008936:	f000 f81c 	bl	8008972 <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>
 800893a:	4603      	mov	r3, r0
    }
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bdb0      	pop	{r4, r5, r7, pc}

08008944 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>:
      base() const
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4618      	mov	r0, r3
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	4618      	mov	r0, r3
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	7b1b      	ldrb	r3, [r3, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	e010      	b.n	80089c2 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	4798      	blx	r3
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
 80089b8:	e003      	b.n	80089c2 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3308      	adds	r3, #8
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	4798      	blx	r3
}
 80089e2:	bf00      	nop
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <_ZN19QAS_Serial_Dev_Base8txStringEPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txString(const char* str) {
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 80089f4:	6838      	ldr	r0, [r7, #0]
 80089f6:	f7f7 fc23 	bl	8000240 <strlen>
 80089fa:	4603      	mov	r3, r0
 80089fc:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 80089fe:	2300      	movs	r3, #0
 8008a00:	81fb      	strh	r3, [r7, #14]
 8008a02:	89fa      	ldrh	r2, [r7, #14]
 8008a04:	89bb      	ldrh	r3, [r7, #12]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d20f      	bcs.n	8008a2a <_ZN19QAS_Serial_Dev_Base8txStringEPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f861 	bl	8008ad6 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008a14:	89fb      	ldrh	r3, [r7, #14]
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	4413      	add	r3, r2
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	f000 fa09 	bl	8008e34 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 8008a22:	89fb      	ldrh	r3, [r7, #14]
 8008a24:	3301      	adds	r3, #1
 8008a26:	81fb      	strh	r3, [r7, #14]
 8008a28:	e7eb      	b.n	8008a02 <_ZN19QAS_Serial_Dev_Base8txStringEPKc+0x18>
  }
  imp_txStart();
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	330c      	adds	r3, #12
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	4798      	blx	r3
}
 8008a36:	bf00      	nop
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 8008a48:	6838      	ldr	r0, [r7, #0]
 8008a4a:	f7f7 fbf9 	bl	8000240 <strlen>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 8008a52:	2300      	movs	r3, #0
 8008a54:	81fb      	strh	r3, [r7, #14]
 8008a56:	89fa      	ldrh	r2, [r7, #14]
 8008a58:	89bb      	ldrh	r3, [r7, #12]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d20f      	bcs.n	8008a7e <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	3304      	adds	r3, #4
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 f837 	bl	8008ad6 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008a68:	89fb      	ldrh	r3, [r7, #14]
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	4619      	mov	r1, r3
 8008a72:	f000 f9df 	bl	8008e34 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 8008a76:	89fb      	ldrh	r3, [r7, #14]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	81fb      	strh	r3, [r7, #14]
 8008a7c:	e7eb      	b.n	8008a56 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	3304      	adds	r3, #4
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 f827 	bl	8008ad6 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	210d      	movs	r1, #13
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f000 f9d1 	bl	8008e34 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	330c      	adds	r3, #12
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	4798      	blx	r3
}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b082      	sub	sp, #8
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 f80f 	bl	8008ad6 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	210d      	movs	r1, #13
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 f9b9 	bl	8008e34 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	330c      	adds	r3, #12
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
}
 8008ace:	bf00      	nop
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
	return get();
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f805 	bl	8008aee <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 8008ae4:	4603      	mov	r3, r0
      }
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 f805 	bl	8008b08 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8008afe:	4603      	mov	r3, r0
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 f806 	bl	8008b24 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 f805 	bl	8008b3e <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008b34:	4603      	mov	r3, r0
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b082      	sub	sp, #8
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f805 	bl	8008b56 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b082      	sub	sp, #8
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 f805 	bl	8008b70 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 8008b66:	4603      	mov	r3, r0
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b082      	sub	sp, #8
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3314      	adds	r3, #20
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 f8e2 	bl	8008d5e <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe fa5c 	bl	800705a <_ZN8QAD_UART4initEv>
 8008ba2:	4603      	mov	r3, r0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	3314      	adds	r3, #20
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 f8d0 	bl	8008d5e <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7fe fa74 	bl	80070ae <_ZN8QAD_UART6deinitEv>
}
 8008bc6:	bf00      	nop
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 8008bce:	b590      	push	{r4, r7, lr}
 8008bd0:	b0a5      	sub	sp, #148	; 0x94
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	3314      	adds	r3, #20
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 f8be 	bl	8008d5e <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008be2:	4603      	mov	r3, r0
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fe fa78 	bl	80070da <_ZN8QAD_UART9getHandleEv>
 8008bea:	4602      	mov	r2, r0
 8008bec:	f107 0308 	add.w	r3, r7, #8
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	2284      	movs	r2, #132	; 0x84
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 fa5d 	bl	80090b4 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	f003 0320 	and.w	r3, r3, #32
 8008c02:	2b20      	cmp	r3, #32
 8008c04:	bf0c      	ite	eq
 8008c06:	2301      	moveq	r3, #1
 8008c08:	2300      	movne	r3, #0
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01e      	beq.n	8008c4e <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x80>
  	uint8_t uData = m_pUART->dataRX();
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3314      	adds	r3, #20
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 f8a2 	bl	8008d5e <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe fad0 	bl	80071c2 <_ZN8QAD_UART6dataRXEv>
 8008c22:	4603      	mov	r3, r0
 8008c24:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  	if (m_eRXState)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	7b9b      	ldrb	r3, [r3, #14]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00b      	beq.n	8008c48 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3308      	adds	r3, #8
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff ff4e 	bl	8008ad6 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008c40:	4619      	mov	r1, r3
 8008c42:	4610      	mov	r0, r2
 8008c44:	f000 f8f6 	bl	8008e34 <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	621a      	str	r2, [r3, #32]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c56:	2b80      	cmp	r3, #128	; 0x80
 8008c58:	bf0c      	ite	eq
 8008c5a:	2301      	moveq	r3, #1
 8008c5c:	2300      	movne	r3, #0
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d034      	beq.n	8008cce <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x100>
  	if (!m_pTXFIFO->empty()) {
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3304      	adds	r3, #4
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff ff34 	bl	8008ad6 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 f8cc 	bl	8008e0e <_ZN14QAT_FIFOBuffer5emptyEv>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	bf0c      	ite	eq
 8008c7c:	2301      	moveq	r3, #1
 8008c7e:	2300      	movne	r3, #0
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d014      	beq.n	8008cb0 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe2>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	3314      	adds	r3, #20
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 f867 	bl	8008d5e <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008c90:	4604      	mov	r4, r0
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	3304      	adds	r3, #4
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff ff1d 	bl	8008ad6 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 f8ec 	bl	8008e7c <_ZN14QAT_FIFOBuffer3popEv>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f7fe fa7a 	bl	80071a2 <_ZN8QAD_UART6dataTXEh>
 8008cae:	e00b      	b.n	8008cc8 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfa>
  	} else {
      m_pUART->stopTX();
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3314      	adds	r3, #20
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 f852 	bl	8008d5e <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe fa2e 	bl	800711e <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2280      	movs	r2, #128	; 0x80
 8008ccc:	621a      	str	r2, [r3, #32]
  }
}
 8008cce:	bf00      	nop
 8008cd0:	3794      	adds	r7, #148	; 0x94
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd90      	pop	{r4, r7, pc}

08008cd6 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b082      	sub	sp, #8
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3314      	adds	r3, #20
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 f83b 	bl	8008d5e <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fe fa01 	bl	80070f2 <_ZN8QAD_UART7startTXEv>
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3314      	adds	r3, #20
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 f82a 	bl	8008d5e <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fa06 	bl	800711e <_ZN8QAD_UART6stopTXEv>
}
 8008d12:	bf00      	nop
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	3314      	adds	r3, #20
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 f819 	bl	8008d5e <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fe fa0b 	bl	800714a <_ZN8QAD_UART7startRXEv>
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3314      	adds	r3, #20
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f000 f808 	bl	8008d5e <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fe fa10 	bl	8007176 <_ZN8QAD_UART6stopRXEv>
}
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
	return get();
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f805 	bl	8008d76 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 8008d6c:	4603      	mov	r3, r0
      }
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b082      	sub	sp, #8
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 f805 	bl	8008d90 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8008d86:	4603      	mov	r3, r0
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 f806 	bl	8008dac <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008da0:	4603      	mov	r3, r0
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4618      	mov	r0, r3
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 f805 	bl	8008dc6 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f805 	bl	8008dde <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 f805 	bl	8008df8 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 8008dee:	4603      	mov	r3, r0
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4618      	mov	r0, r3
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	88da      	ldrh	r2, [r3, #6]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	891b      	ldrh	r3, [r3, #8]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d101      	bne.n	8008e26 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 8008e22:	2301      	movs	r3, #1
 8008e24:	e000      	b.n	8008e28 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	891b      	ldrh	r3, [r3, #8]
 8008e46:	4619      	mov	r1, r3
 8008e48:	4610      	mov	r0, r2
 8008e4a:	f000 f847 	bl	8008edc <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	889a      	ldrh	r2, [r3, #4]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	891b      	ldrh	r3, [r3, #8]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d906      	bls.n	8008e6e <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	891b      	ldrh	r3, [r3, #8]
 8008e64:	3301      	adds	r3, #1
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 8008e6c:	e002      	b.n	8008e74 <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	811a      	strh	r2, [r3, #8]
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7ff ffc2 	bl	8008e0e <_ZN14QAT_FIFOBuffer5emptyEv>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	bf0c      	ite	eq
 8008e90:	2301      	moveq	r3, #1
 8008e92:	2300      	movne	r3, #0
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d01b      	beq.n	8008ed2 <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	88db      	ldrh	r3, [r3, #6]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	f000 f81a 	bl	8008edc <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	889a      	ldrh	r2, [r3, #4]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	88db      	ldrh	r3, [r3, #6]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d906      	bls.n	8008ec8 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	88db      	ldrh	r3, [r3, #6]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	80da      	strh	r2, [r3, #6]
 8008ec6:	e002      	b.n	8008ece <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	80da      	strh	r2, [r3, #6]
		return uData;
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	e000      	b.n	8008ed4 <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
	return get()[__i];
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f807 	bl	8008efa <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8008eec:	4602      	mov	r2, r0
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	4413      	add	r3, r2
      }
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 f805 	bl	8008f14 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 f806 	bl	8008f30 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008f24:	4603      	mov	r3, r0
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 f805 	bl	8008f4a <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008f40:	4603      	mov	r3, r0
 8008f42:	4618      	mov	r0, r3
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f805 	bl	8008f62 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 f805 	bl	8008f7c <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 8008f72:	4603      	mov	r3, r0
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4618      	mov	r0, r3
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <_ZdlPv>:
 8008f92:	f000 b887 	b.w	80090a4 <free>

08008f96 <_ZdlPvj>:
 8008f96:	f7ff bffc 	b.w	8008f92 <_ZdlPv>

08008f9a <__cxa_guard_acquire>:
 8008f9a:	6803      	ldr	r3, [r0, #0]
 8008f9c:	07db      	lsls	r3, r3, #31
 8008f9e:	d406      	bmi.n	8008fae <__cxa_guard_acquire+0x14>
 8008fa0:	7843      	ldrb	r3, [r0, #1]
 8008fa2:	b103      	cbz	r3, 8008fa6 <__cxa_guard_acquire+0xc>
 8008fa4:	deff      	udf	#255	; 0xff
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	7043      	strb	r3, [r0, #1]
 8008faa:	4618      	mov	r0, r3
 8008fac:	4770      	bx	lr
 8008fae:	2000      	movs	r0, #0
 8008fb0:	4770      	bx	lr

08008fb2 <__cxa_guard_release>:
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	6003      	str	r3, [r0, #0]
 8008fb6:	4770      	bx	lr

08008fb8 <_Znwj>:
 8008fb8:	2801      	cmp	r0, #1
 8008fba:	bf38      	it	cc
 8008fbc:	2001      	movcc	r0, #1
 8008fbe:	b510      	push	{r4, lr}
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 f866 	bl	8009094 <malloc>
 8008fc8:	b930      	cbnz	r0, 8008fd8 <_Znwj+0x20>
 8008fca:	f000 f823 	bl	8009014 <_ZSt15get_new_handlerv>
 8008fce:	b908      	cbnz	r0, 8008fd4 <_Znwj+0x1c>
 8008fd0:	f000 f828 	bl	8009024 <abort>
 8008fd4:	4780      	blx	r0
 8008fd6:	e7f4      	b.n	8008fc2 <_Znwj+0xa>
 8008fd8:	bd10      	pop	{r4, pc}

08008fda <_Znaj>:
 8008fda:	f7ff bfed 	b.w	8008fb8 <_Znwj>

08008fde <__cxa_pure_virtual>:
 8008fde:	b508      	push	{r3, lr}
 8008fe0:	f000 f812 	bl	8009008 <_ZSt9terminatev>

08008fe4 <_ZSt17__throw_bad_allocv>:
 8008fe4:	b508      	push	{r3, lr}
 8008fe6:	f000 f81d 	bl	8009024 <abort>

08008fea <_ZSt20__throw_length_errorPKc>:
 8008fea:	b508      	push	{r3, lr}
 8008fec:	f000 f81a 	bl	8009024 <abort>

08008ff0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008ff0:	b508      	push	{r3, lr}
 8008ff2:	4780      	blx	r0
 8008ff4:	f000 f816 	bl	8009024 <abort>

08008ff8 <_ZSt13get_terminatev>:
 8008ff8:	4b02      	ldr	r3, [pc, #8]	; (8009004 <_ZSt13get_terminatev+0xc>)
 8008ffa:	6818      	ldr	r0, [r3, #0]
 8008ffc:	f3bf 8f5b 	dmb	ish
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	2000000c 	.word	0x2000000c

08009008 <_ZSt9terminatev>:
 8009008:	b508      	push	{r3, lr}
 800900a:	f7ff fff5 	bl	8008ff8 <_ZSt13get_terminatev>
 800900e:	f7ff ffef 	bl	8008ff0 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08009014 <_ZSt15get_new_handlerv>:
 8009014:	4b02      	ldr	r3, [pc, #8]	; (8009020 <_ZSt15get_new_handlerv+0xc>)
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	f3bf 8f5b 	dmb	ish
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	20000354 	.word	0x20000354

08009024 <abort>:
 8009024:	b508      	push	{r3, lr}
 8009026:	2006      	movs	r0, #6
 8009028:	f000 f956 	bl	80092d8 <raise>
 800902c:	2001      	movs	r0, #1
 800902e:	f7f8 ff2c 	bl	8001e8a <_exit>

08009032 <atexit>:
 8009032:	2300      	movs	r3, #0
 8009034:	4601      	mov	r1, r0
 8009036:	461a      	mov	r2, r3
 8009038:	4618      	mov	r0, r3
 800903a:	f000 b991 	b.w	8009360 <__register_exitproc>
	...

08009040 <__errno>:
 8009040:	4b01      	ldr	r3, [pc, #4]	; (8009048 <__errno+0x8>)
 8009042:	6818      	ldr	r0, [r3, #0]
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	20000010 	.word	0x20000010

0800904c <__libc_init_array>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	4d0d      	ldr	r5, [pc, #52]	; (8009084 <__libc_init_array+0x38>)
 8009050:	4c0d      	ldr	r4, [pc, #52]	; (8009088 <__libc_init_array+0x3c>)
 8009052:	1b64      	subs	r4, r4, r5
 8009054:	10a4      	asrs	r4, r4, #2
 8009056:	2600      	movs	r6, #0
 8009058:	42a6      	cmp	r6, r4
 800905a:	d109      	bne.n	8009070 <__libc_init_array+0x24>
 800905c:	4d0b      	ldr	r5, [pc, #44]	; (800908c <__libc_init_array+0x40>)
 800905e:	4c0c      	ldr	r4, [pc, #48]	; (8009090 <__libc_init_array+0x44>)
 8009060:	f000 fd0e 	bl	8009a80 <_init>
 8009064:	1b64      	subs	r4, r4, r5
 8009066:	10a4      	asrs	r4, r4, #2
 8009068:	2600      	movs	r6, #0
 800906a:	42a6      	cmp	r6, r4
 800906c:	d105      	bne.n	800907a <__libc_init_array+0x2e>
 800906e:	bd70      	pop	{r4, r5, r6, pc}
 8009070:	f855 3b04 	ldr.w	r3, [r5], #4
 8009074:	4798      	blx	r3
 8009076:	3601      	adds	r6, #1
 8009078:	e7ee      	b.n	8009058 <__libc_init_array+0xc>
 800907a:	f855 3b04 	ldr.w	r3, [r5], #4
 800907e:	4798      	blx	r3
 8009080:	3601      	adds	r6, #1
 8009082:	e7f2      	b.n	800906a <__libc_init_array+0x1e>
 8009084:	0800d240 	.word	0x0800d240
 8009088:	0800d240 	.word	0x0800d240
 800908c:	0800d240 	.word	0x0800d240
 8009090:	0800d244 	.word	0x0800d244

08009094 <malloc>:
 8009094:	4b02      	ldr	r3, [pc, #8]	; (80090a0 <malloc+0xc>)
 8009096:	4601      	mov	r1, r0
 8009098:	6818      	ldr	r0, [r3, #0]
 800909a:	f000 b88b 	b.w	80091b4 <_malloc_r>
 800909e:	bf00      	nop
 80090a0:	20000010 	.word	0x20000010

080090a4 <free>:
 80090a4:	4b02      	ldr	r3, [pc, #8]	; (80090b0 <free+0xc>)
 80090a6:	4601      	mov	r1, r0
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	f000 b833 	b.w	8009114 <_free_r>
 80090ae:	bf00      	nop
 80090b0:	20000010 	.word	0x20000010

080090b4 <memcpy>:
 80090b4:	440a      	add	r2, r1
 80090b6:	4291      	cmp	r1, r2
 80090b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80090bc:	d100      	bne.n	80090c0 <memcpy+0xc>
 80090be:	4770      	bx	lr
 80090c0:	b510      	push	{r4, lr}
 80090c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090ca:	4291      	cmp	r1, r2
 80090cc:	d1f9      	bne.n	80090c2 <memcpy+0xe>
 80090ce:	bd10      	pop	{r4, pc}

080090d0 <memmove>:
 80090d0:	4288      	cmp	r0, r1
 80090d2:	b510      	push	{r4, lr}
 80090d4:	eb01 0402 	add.w	r4, r1, r2
 80090d8:	d902      	bls.n	80090e0 <memmove+0x10>
 80090da:	4284      	cmp	r4, r0
 80090dc:	4623      	mov	r3, r4
 80090de:	d807      	bhi.n	80090f0 <memmove+0x20>
 80090e0:	1e43      	subs	r3, r0, #1
 80090e2:	42a1      	cmp	r1, r4
 80090e4:	d008      	beq.n	80090f8 <memmove+0x28>
 80090e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090ee:	e7f8      	b.n	80090e2 <memmove+0x12>
 80090f0:	4402      	add	r2, r0
 80090f2:	4601      	mov	r1, r0
 80090f4:	428a      	cmp	r2, r1
 80090f6:	d100      	bne.n	80090fa <memmove+0x2a>
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009102:	e7f7      	b.n	80090f4 <memmove+0x24>

08009104 <memset>:
 8009104:	4402      	add	r2, r0
 8009106:	4603      	mov	r3, r0
 8009108:	4293      	cmp	r3, r2
 800910a:	d100      	bne.n	800910e <memset+0xa>
 800910c:	4770      	bx	lr
 800910e:	f803 1b01 	strb.w	r1, [r3], #1
 8009112:	e7f9      	b.n	8009108 <memset+0x4>

08009114 <_free_r>:
 8009114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009116:	2900      	cmp	r1, #0
 8009118:	d048      	beq.n	80091ac <_free_r+0x98>
 800911a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800911e:	9001      	str	r0, [sp, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	f1a1 0404 	sub.w	r4, r1, #4
 8009126:	bfb8      	it	lt
 8009128:	18e4      	addlt	r4, r4, r3
 800912a:	f000 f97f 	bl	800942c <__malloc_lock>
 800912e:	4a20      	ldr	r2, [pc, #128]	; (80091b0 <_free_r+0x9c>)
 8009130:	9801      	ldr	r0, [sp, #4]
 8009132:	6813      	ldr	r3, [r2, #0]
 8009134:	4615      	mov	r5, r2
 8009136:	b933      	cbnz	r3, 8009146 <_free_r+0x32>
 8009138:	6063      	str	r3, [r4, #4]
 800913a:	6014      	str	r4, [r2, #0]
 800913c:	b003      	add	sp, #12
 800913e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009142:	f000 b979 	b.w	8009438 <__malloc_unlock>
 8009146:	42a3      	cmp	r3, r4
 8009148:	d90b      	bls.n	8009162 <_free_r+0x4e>
 800914a:	6821      	ldr	r1, [r4, #0]
 800914c:	1862      	adds	r2, r4, r1
 800914e:	4293      	cmp	r3, r2
 8009150:	bf04      	itt	eq
 8009152:	681a      	ldreq	r2, [r3, #0]
 8009154:	685b      	ldreq	r3, [r3, #4]
 8009156:	6063      	str	r3, [r4, #4]
 8009158:	bf04      	itt	eq
 800915a:	1852      	addeq	r2, r2, r1
 800915c:	6022      	streq	r2, [r4, #0]
 800915e:	602c      	str	r4, [r5, #0]
 8009160:	e7ec      	b.n	800913c <_free_r+0x28>
 8009162:	461a      	mov	r2, r3
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	b10b      	cbz	r3, 800916c <_free_r+0x58>
 8009168:	42a3      	cmp	r3, r4
 800916a:	d9fa      	bls.n	8009162 <_free_r+0x4e>
 800916c:	6811      	ldr	r1, [r2, #0]
 800916e:	1855      	adds	r5, r2, r1
 8009170:	42a5      	cmp	r5, r4
 8009172:	d10b      	bne.n	800918c <_free_r+0x78>
 8009174:	6824      	ldr	r4, [r4, #0]
 8009176:	4421      	add	r1, r4
 8009178:	1854      	adds	r4, r2, r1
 800917a:	42a3      	cmp	r3, r4
 800917c:	6011      	str	r1, [r2, #0]
 800917e:	d1dd      	bne.n	800913c <_free_r+0x28>
 8009180:	681c      	ldr	r4, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	6053      	str	r3, [r2, #4]
 8009186:	4421      	add	r1, r4
 8009188:	6011      	str	r1, [r2, #0]
 800918a:	e7d7      	b.n	800913c <_free_r+0x28>
 800918c:	d902      	bls.n	8009194 <_free_r+0x80>
 800918e:	230c      	movs	r3, #12
 8009190:	6003      	str	r3, [r0, #0]
 8009192:	e7d3      	b.n	800913c <_free_r+0x28>
 8009194:	6825      	ldr	r5, [r4, #0]
 8009196:	1961      	adds	r1, r4, r5
 8009198:	428b      	cmp	r3, r1
 800919a:	bf04      	itt	eq
 800919c:	6819      	ldreq	r1, [r3, #0]
 800919e:	685b      	ldreq	r3, [r3, #4]
 80091a0:	6063      	str	r3, [r4, #4]
 80091a2:	bf04      	itt	eq
 80091a4:	1949      	addeq	r1, r1, r5
 80091a6:	6021      	streq	r1, [r4, #0]
 80091a8:	6054      	str	r4, [r2, #4]
 80091aa:	e7c7      	b.n	800913c <_free_r+0x28>
 80091ac:	b003      	add	sp, #12
 80091ae:	bd30      	pop	{r4, r5, pc}
 80091b0:	20000358 	.word	0x20000358

080091b4 <_malloc_r>:
 80091b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b6:	1ccd      	adds	r5, r1, #3
 80091b8:	f025 0503 	bic.w	r5, r5, #3
 80091bc:	3508      	adds	r5, #8
 80091be:	2d0c      	cmp	r5, #12
 80091c0:	bf38      	it	cc
 80091c2:	250c      	movcc	r5, #12
 80091c4:	2d00      	cmp	r5, #0
 80091c6:	4606      	mov	r6, r0
 80091c8:	db01      	blt.n	80091ce <_malloc_r+0x1a>
 80091ca:	42a9      	cmp	r1, r5
 80091cc:	d903      	bls.n	80091d6 <_malloc_r+0x22>
 80091ce:	230c      	movs	r3, #12
 80091d0:	6033      	str	r3, [r6, #0]
 80091d2:	2000      	movs	r0, #0
 80091d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091d6:	f000 f929 	bl	800942c <__malloc_lock>
 80091da:	4921      	ldr	r1, [pc, #132]	; (8009260 <_malloc_r+0xac>)
 80091dc:	680a      	ldr	r2, [r1, #0]
 80091de:	4614      	mov	r4, r2
 80091e0:	b99c      	cbnz	r4, 800920a <_malloc_r+0x56>
 80091e2:	4f20      	ldr	r7, [pc, #128]	; (8009264 <_malloc_r+0xb0>)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	b923      	cbnz	r3, 80091f2 <_malloc_r+0x3e>
 80091e8:	4621      	mov	r1, r4
 80091ea:	4630      	mov	r0, r6
 80091ec:	f000 f83c 	bl	8009268 <_sbrk_r>
 80091f0:	6038      	str	r0, [r7, #0]
 80091f2:	4629      	mov	r1, r5
 80091f4:	4630      	mov	r0, r6
 80091f6:	f000 f837 	bl	8009268 <_sbrk_r>
 80091fa:	1c43      	adds	r3, r0, #1
 80091fc:	d123      	bne.n	8009246 <_malloc_r+0x92>
 80091fe:	230c      	movs	r3, #12
 8009200:	6033      	str	r3, [r6, #0]
 8009202:	4630      	mov	r0, r6
 8009204:	f000 f918 	bl	8009438 <__malloc_unlock>
 8009208:	e7e3      	b.n	80091d2 <_malloc_r+0x1e>
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	1b5b      	subs	r3, r3, r5
 800920e:	d417      	bmi.n	8009240 <_malloc_r+0x8c>
 8009210:	2b0b      	cmp	r3, #11
 8009212:	d903      	bls.n	800921c <_malloc_r+0x68>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	441c      	add	r4, r3
 8009218:	6025      	str	r5, [r4, #0]
 800921a:	e004      	b.n	8009226 <_malloc_r+0x72>
 800921c:	6863      	ldr	r3, [r4, #4]
 800921e:	42a2      	cmp	r2, r4
 8009220:	bf0c      	ite	eq
 8009222:	600b      	streq	r3, [r1, #0]
 8009224:	6053      	strne	r3, [r2, #4]
 8009226:	4630      	mov	r0, r6
 8009228:	f000 f906 	bl	8009438 <__malloc_unlock>
 800922c:	f104 000b 	add.w	r0, r4, #11
 8009230:	1d23      	adds	r3, r4, #4
 8009232:	f020 0007 	bic.w	r0, r0, #7
 8009236:	1ac2      	subs	r2, r0, r3
 8009238:	d0cc      	beq.n	80091d4 <_malloc_r+0x20>
 800923a:	1a1b      	subs	r3, r3, r0
 800923c:	50a3      	str	r3, [r4, r2]
 800923e:	e7c9      	b.n	80091d4 <_malloc_r+0x20>
 8009240:	4622      	mov	r2, r4
 8009242:	6864      	ldr	r4, [r4, #4]
 8009244:	e7cc      	b.n	80091e0 <_malloc_r+0x2c>
 8009246:	1cc4      	adds	r4, r0, #3
 8009248:	f024 0403 	bic.w	r4, r4, #3
 800924c:	42a0      	cmp	r0, r4
 800924e:	d0e3      	beq.n	8009218 <_malloc_r+0x64>
 8009250:	1a21      	subs	r1, r4, r0
 8009252:	4630      	mov	r0, r6
 8009254:	f000 f808 	bl	8009268 <_sbrk_r>
 8009258:	3001      	adds	r0, #1
 800925a:	d1dd      	bne.n	8009218 <_malloc_r+0x64>
 800925c:	e7cf      	b.n	80091fe <_malloc_r+0x4a>
 800925e:	bf00      	nop
 8009260:	20000358 	.word	0x20000358
 8009264:	2000035c 	.word	0x2000035c

08009268 <_sbrk_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4d06      	ldr	r5, [pc, #24]	; (8009284 <_sbrk_r+0x1c>)
 800926c:	2300      	movs	r3, #0
 800926e:	4604      	mov	r4, r0
 8009270:	4608      	mov	r0, r1
 8009272:	602b      	str	r3, [r5, #0]
 8009274:	f7f8 fe14 	bl	8001ea0 <_sbrk>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_sbrk_r+0x1a>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_sbrk_r+0x1a>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	20000400 	.word	0x20000400

08009288 <_raise_r>:
 8009288:	291f      	cmp	r1, #31
 800928a:	b538      	push	{r3, r4, r5, lr}
 800928c:	4604      	mov	r4, r0
 800928e:	460d      	mov	r5, r1
 8009290:	d904      	bls.n	800929c <_raise_r+0x14>
 8009292:	2316      	movs	r3, #22
 8009294:	6003      	str	r3, [r0, #0]
 8009296:	f04f 30ff 	mov.w	r0, #4294967295
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800929e:	b112      	cbz	r2, 80092a6 <_raise_r+0x1e>
 80092a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092a4:	b94b      	cbnz	r3, 80092ba <_raise_r+0x32>
 80092a6:	4620      	mov	r0, r4
 80092a8:	f000 f830 	bl	800930c <_getpid_r>
 80092ac:	462a      	mov	r2, r5
 80092ae:	4601      	mov	r1, r0
 80092b0:	4620      	mov	r0, r4
 80092b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092b6:	f000 b817 	b.w	80092e8 <_kill_r>
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d00a      	beq.n	80092d4 <_raise_r+0x4c>
 80092be:	1c59      	adds	r1, r3, #1
 80092c0:	d103      	bne.n	80092ca <_raise_r+0x42>
 80092c2:	2316      	movs	r3, #22
 80092c4:	6003      	str	r3, [r0, #0]
 80092c6:	2001      	movs	r0, #1
 80092c8:	e7e7      	b.n	800929a <_raise_r+0x12>
 80092ca:	2400      	movs	r4, #0
 80092cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092d0:	4628      	mov	r0, r5
 80092d2:	4798      	blx	r3
 80092d4:	2000      	movs	r0, #0
 80092d6:	e7e0      	b.n	800929a <_raise_r+0x12>

080092d8 <raise>:
 80092d8:	4b02      	ldr	r3, [pc, #8]	; (80092e4 <raise+0xc>)
 80092da:	4601      	mov	r1, r0
 80092dc:	6818      	ldr	r0, [r3, #0]
 80092de:	f7ff bfd3 	b.w	8009288 <_raise_r>
 80092e2:	bf00      	nop
 80092e4:	20000010 	.word	0x20000010

080092e8 <_kill_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4d07      	ldr	r5, [pc, #28]	; (8009308 <_kill_r+0x20>)
 80092ec:	2300      	movs	r3, #0
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	4611      	mov	r1, r2
 80092f4:	602b      	str	r3, [r5, #0]
 80092f6:	f7f8 fdb8 	bl	8001e6a <_kill>
 80092fa:	1c43      	adds	r3, r0, #1
 80092fc:	d102      	bne.n	8009304 <_kill_r+0x1c>
 80092fe:	682b      	ldr	r3, [r5, #0]
 8009300:	b103      	cbz	r3, 8009304 <_kill_r+0x1c>
 8009302:	6023      	str	r3, [r4, #0]
 8009304:	bd38      	pop	{r3, r4, r5, pc}
 8009306:	bf00      	nop
 8009308:	20000400 	.word	0x20000400

0800930c <_getpid_r>:
 800930c:	f7f8 bda5 	b.w	8001e5a <_getpid>

08009310 <siprintf>:
 8009310:	b40e      	push	{r1, r2, r3}
 8009312:	b500      	push	{lr}
 8009314:	b09c      	sub	sp, #112	; 0x70
 8009316:	ab1d      	add	r3, sp, #116	; 0x74
 8009318:	9002      	str	r0, [sp, #8]
 800931a:	9006      	str	r0, [sp, #24]
 800931c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009320:	4809      	ldr	r0, [pc, #36]	; (8009348 <siprintf+0x38>)
 8009322:	9107      	str	r1, [sp, #28]
 8009324:	9104      	str	r1, [sp, #16]
 8009326:	4909      	ldr	r1, [pc, #36]	; (800934c <siprintf+0x3c>)
 8009328:	f853 2b04 	ldr.w	r2, [r3], #4
 800932c:	9105      	str	r1, [sp, #20]
 800932e:	6800      	ldr	r0, [r0, #0]
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	a902      	add	r1, sp, #8
 8009334:	f000 f8e2 	bl	80094fc <_svfiprintf_r>
 8009338:	9b02      	ldr	r3, [sp, #8]
 800933a:	2200      	movs	r2, #0
 800933c:	701a      	strb	r2, [r3, #0]
 800933e:	b01c      	add	sp, #112	; 0x70
 8009340:	f85d eb04 	ldr.w	lr, [sp], #4
 8009344:	b003      	add	sp, #12
 8009346:	4770      	bx	lr
 8009348:	20000010 	.word	0x20000010
 800934c:	ffff0208 	.word	0xffff0208

08009350 <strcpy>:
 8009350:	4603      	mov	r3, r0
 8009352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009356:	f803 2b01 	strb.w	r2, [r3], #1
 800935a:	2a00      	cmp	r2, #0
 800935c:	d1f9      	bne.n	8009352 <strcpy+0x2>
 800935e:	4770      	bx	lr

08009360 <__register_exitproc>:
 8009360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009364:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8009420 <__register_exitproc+0xc0>
 8009368:	4606      	mov	r6, r0
 800936a:	f8d8 0000 	ldr.w	r0, [r8]
 800936e:	461f      	mov	r7, r3
 8009370:	460d      	mov	r5, r1
 8009372:	4691      	mov	r9, r2
 8009374:	f000 f856 	bl	8009424 <__retarget_lock_acquire_recursive>
 8009378:	4b25      	ldr	r3, [pc, #148]	; (8009410 <__register_exitproc+0xb0>)
 800937a:	681c      	ldr	r4, [r3, #0]
 800937c:	b934      	cbnz	r4, 800938c <__register_exitproc+0x2c>
 800937e:	4c25      	ldr	r4, [pc, #148]	; (8009414 <__register_exitproc+0xb4>)
 8009380:	601c      	str	r4, [r3, #0]
 8009382:	4b25      	ldr	r3, [pc, #148]	; (8009418 <__register_exitproc+0xb8>)
 8009384:	b113      	cbz	r3, 800938c <__register_exitproc+0x2c>
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800938c:	6863      	ldr	r3, [r4, #4]
 800938e:	2b1f      	cmp	r3, #31
 8009390:	dd07      	ble.n	80093a2 <__register_exitproc+0x42>
 8009392:	f8d8 0000 	ldr.w	r0, [r8]
 8009396:	f000 f847 	bl	8009428 <__retarget_lock_release_recursive>
 800939a:	f04f 30ff 	mov.w	r0, #4294967295
 800939e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093a2:	b34e      	cbz	r6, 80093f8 <__register_exitproc+0x98>
 80093a4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80093a8:	b988      	cbnz	r0, 80093ce <__register_exitproc+0x6e>
 80093aa:	4b1c      	ldr	r3, [pc, #112]	; (800941c <__register_exitproc+0xbc>)
 80093ac:	b923      	cbnz	r3, 80093b8 <__register_exitproc+0x58>
 80093ae:	f8d8 0000 	ldr.w	r0, [r8]
 80093b2:	f000 f838 	bl	8009426 <__retarget_lock_release>
 80093b6:	e7f0      	b.n	800939a <__register_exitproc+0x3a>
 80093b8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80093bc:	f7ff fe6a 	bl	8009094 <malloc>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d0f4      	beq.n	80093ae <__register_exitproc+0x4e>
 80093c4:	2300      	movs	r3, #0
 80093c6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80093ca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80093ce:	6863      	ldr	r3, [r4, #4]
 80093d0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80093d4:	2201      	movs	r2, #1
 80093d6:	409a      	lsls	r2, r3
 80093d8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80093dc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80093e0:	4313      	orrs	r3, r2
 80093e2:	2e02      	cmp	r6, #2
 80093e4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80093e8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80093ec:	bf02      	ittt	eq
 80093ee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80093f2:	431a      	orreq	r2, r3
 80093f4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80093f8:	6863      	ldr	r3, [r4, #4]
 80093fa:	f8d8 0000 	ldr.w	r0, [r8]
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	3302      	adds	r3, #2
 8009402:	6062      	str	r2, [r4, #4]
 8009404:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8009408:	f000 f80e 	bl	8009428 <__retarget_lock_release_recursive>
 800940c:	2000      	movs	r0, #0
 800940e:	e7c6      	b.n	800939e <__register_exitproc+0x3e>
 8009410:	200003ec 	.word	0x200003ec
 8009414:	20000360 	.word	0x20000360
 8009418:	00000000 	.word	0x00000000
 800941c:	08009095 	.word	0x08009095
 8009420:	20000074 	.word	0x20000074

08009424 <__retarget_lock_acquire_recursive>:
 8009424:	4770      	bx	lr

08009426 <__retarget_lock_release>:
 8009426:	4770      	bx	lr

08009428 <__retarget_lock_release_recursive>:
 8009428:	4770      	bx	lr
	...

0800942c <__malloc_lock>:
 800942c:	4801      	ldr	r0, [pc, #4]	; (8009434 <__malloc_lock+0x8>)
 800942e:	f7ff bff9 	b.w	8009424 <__retarget_lock_acquire_recursive>
 8009432:	bf00      	nop
 8009434:	200003f8 	.word	0x200003f8

08009438 <__malloc_unlock>:
 8009438:	4801      	ldr	r0, [pc, #4]	; (8009440 <__malloc_unlock+0x8>)
 800943a:	f7ff bff5 	b.w	8009428 <__retarget_lock_release_recursive>
 800943e:	bf00      	nop
 8009440:	200003f8 	.word	0x200003f8

08009444 <__ssputs_r>:
 8009444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009448:	688e      	ldr	r6, [r1, #8]
 800944a:	429e      	cmp	r6, r3
 800944c:	4682      	mov	sl, r0
 800944e:	460c      	mov	r4, r1
 8009450:	4690      	mov	r8, r2
 8009452:	461f      	mov	r7, r3
 8009454:	d838      	bhi.n	80094c8 <__ssputs_r+0x84>
 8009456:	898a      	ldrh	r2, [r1, #12]
 8009458:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800945c:	d032      	beq.n	80094c4 <__ssputs_r+0x80>
 800945e:	6825      	ldr	r5, [r4, #0]
 8009460:	6909      	ldr	r1, [r1, #16]
 8009462:	eba5 0901 	sub.w	r9, r5, r1
 8009466:	6965      	ldr	r5, [r4, #20]
 8009468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800946c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009470:	3301      	adds	r3, #1
 8009472:	444b      	add	r3, r9
 8009474:	106d      	asrs	r5, r5, #1
 8009476:	429d      	cmp	r5, r3
 8009478:	bf38      	it	cc
 800947a:	461d      	movcc	r5, r3
 800947c:	0553      	lsls	r3, r2, #21
 800947e:	d531      	bpl.n	80094e4 <__ssputs_r+0xa0>
 8009480:	4629      	mov	r1, r5
 8009482:	f7ff fe97 	bl	80091b4 <_malloc_r>
 8009486:	4606      	mov	r6, r0
 8009488:	b950      	cbnz	r0, 80094a0 <__ssputs_r+0x5c>
 800948a:	230c      	movs	r3, #12
 800948c:	f8ca 3000 	str.w	r3, [sl]
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	f04f 30ff 	mov.w	r0, #4294967295
 800949c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a0:	6921      	ldr	r1, [r4, #16]
 80094a2:	464a      	mov	r2, r9
 80094a4:	f7ff fe06 	bl	80090b4 <memcpy>
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b2:	81a3      	strh	r3, [r4, #12]
 80094b4:	6126      	str	r6, [r4, #16]
 80094b6:	6165      	str	r5, [r4, #20]
 80094b8:	444e      	add	r6, r9
 80094ba:	eba5 0509 	sub.w	r5, r5, r9
 80094be:	6026      	str	r6, [r4, #0]
 80094c0:	60a5      	str	r5, [r4, #8]
 80094c2:	463e      	mov	r6, r7
 80094c4:	42be      	cmp	r6, r7
 80094c6:	d900      	bls.n	80094ca <__ssputs_r+0x86>
 80094c8:	463e      	mov	r6, r7
 80094ca:	4632      	mov	r2, r6
 80094cc:	6820      	ldr	r0, [r4, #0]
 80094ce:	4641      	mov	r1, r8
 80094d0:	f7ff fdfe 	bl	80090d0 <memmove>
 80094d4:	68a3      	ldr	r3, [r4, #8]
 80094d6:	6822      	ldr	r2, [r4, #0]
 80094d8:	1b9b      	subs	r3, r3, r6
 80094da:	4432      	add	r2, r6
 80094dc:	60a3      	str	r3, [r4, #8]
 80094de:	6022      	str	r2, [r4, #0]
 80094e0:	2000      	movs	r0, #0
 80094e2:	e7db      	b.n	800949c <__ssputs_r+0x58>
 80094e4:	462a      	mov	r2, r5
 80094e6:	f000 fa9d 	bl	8009a24 <_realloc_r>
 80094ea:	4606      	mov	r6, r0
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d1e1      	bne.n	80094b4 <__ssputs_r+0x70>
 80094f0:	6921      	ldr	r1, [r4, #16]
 80094f2:	4650      	mov	r0, sl
 80094f4:	f7ff fe0e 	bl	8009114 <_free_r>
 80094f8:	e7c7      	b.n	800948a <__ssputs_r+0x46>
	...

080094fc <_svfiprintf_r>:
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	4698      	mov	r8, r3
 8009502:	898b      	ldrh	r3, [r1, #12]
 8009504:	061b      	lsls	r3, r3, #24
 8009506:	b09d      	sub	sp, #116	; 0x74
 8009508:	4607      	mov	r7, r0
 800950a:	460d      	mov	r5, r1
 800950c:	4614      	mov	r4, r2
 800950e:	d50e      	bpl.n	800952e <_svfiprintf_r+0x32>
 8009510:	690b      	ldr	r3, [r1, #16]
 8009512:	b963      	cbnz	r3, 800952e <_svfiprintf_r+0x32>
 8009514:	2140      	movs	r1, #64	; 0x40
 8009516:	f7ff fe4d 	bl	80091b4 <_malloc_r>
 800951a:	6028      	str	r0, [r5, #0]
 800951c:	6128      	str	r0, [r5, #16]
 800951e:	b920      	cbnz	r0, 800952a <_svfiprintf_r+0x2e>
 8009520:	230c      	movs	r3, #12
 8009522:	603b      	str	r3, [r7, #0]
 8009524:	f04f 30ff 	mov.w	r0, #4294967295
 8009528:	e0d1      	b.n	80096ce <_svfiprintf_r+0x1d2>
 800952a:	2340      	movs	r3, #64	; 0x40
 800952c:	616b      	str	r3, [r5, #20]
 800952e:	2300      	movs	r3, #0
 8009530:	9309      	str	r3, [sp, #36]	; 0x24
 8009532:	2320      	movs	r3, #32
 8009534:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009538:	f8cd 800c 	str.w	r8, [sp, #12]
 800953c:	2330      	movs	r3, #48	; 0x30
 800953e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80096e8 <_svfiprintf_r+0x1ec>
 8009542:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009546:	f04f 0901 	mov.w	r9, #1
 800954a:	4623      	mov	r3, r4
 800954c:	469a      	mov	sl, r3
 800954e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009552:	b10a      	cbz	r2, 8009558 <_svfiprintf_r+0x5c>
 8009554:	2a25      	cmp	r2, #37	; 0x25
 8009556:	d1f9      	bne.n	800954c <_svfiprintf_r+0x50>
 8009558:	ebba 0b04 	subs.w	fp, sl, r4
 800955c:	d00b      	beq.n	8009576 <_svfiprintf_r+0x7a>
 800955e:	465b      	mov	r3, fp
 8009560:	4622      	mov	r2, r4
 8009562:	4629      	mov	r1, r5
 8009564:	4638      	mov	r0, r7
 8009566:	f7ff ff6d 	bl	8009444 <__ssputs_r>
 800956a:	3001      	adds	r0, #1
 800956c:	f000 80aa 	beq.w	80096c4 <_svfiprintf_r+0x1c8>
 8009570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009572:	445a      	add	r2, fp
 8009574:	9209      	str	r2, [sp, #36]	; 0x24
 8009576:	f89a 3000 	ldrb.w	r3, [sl]
 800957a:	2b00      	cmp	r3, #0
 800957c:	f000 80a2 	beq.w	80096c4 <_svfiprintf_r+0x1c8>
 8009580:	2300      	movs	r3, #0
 8009582:	f04f 32ff 	mov.w	r2, #4294967295
 8009586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800958a:	f10a 0a01 	add.w	sl, sl, #1
 800958e:	9304      	str	r3, [sp, #16]
 8009590:	9307      	str	r3, [sp, #28]
 8009592:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009596:	931a      	str	r3, [sp, #104]	; 0x68
 8009598:	4654      	mov	r4, sl
 800959a:	2205      	movs	r2, #5
 800959c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a0:	4851      	ldr	r0, [pc, #324]	; (80096e8 <_svfiprintf_r+0x1ec>)
 80095a2:	f7f6 fe55 	bl	8000250 <memchr>
 80095a6:	9a04      	ldr	r2, [sp, #16]
 80095a8:	b9d8      	cbnz	r0, 80095e2 <_svfiprintf_r+0xe6>
 80095aa:	06d0      	lsls	r0, r2, #27
 80095ac:	bf44      	itt	mi
 80095ae:	2320      	movmi	r3, #32
 80095b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095b4:	0711      	lsls	r1, r2, #28
 80095b6:	bf44      	itt	mi
 80095b8:	232b      	movmi	r3, #43	; 0x2b
 80095ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095be:	f89a 3000 	ldrb.w	r3, [sl]
 80095c2:	2b2a      	cmp	r3, #42	; 0x2a
 80095c4:	d015      	beq.n	80095f2 <_svfiprintf_r+0xf6>
 80095c6:	9a07      	ldr	r2, [sp, #28]
 80095c8:	4654      	mov	r4, sl
 80095ca:	2000      	movs	r0, #0
 80095cc:	f04f 0c0a 	mov.w	ip, #10
 80095d0:	4621      	mov	r1, r4
 80095d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095d6:	3b30      	subs	r3, #48	; 0x30
 80095d8:	2b09      	cmp	r3, #9
 80095da:	d94e      	bls.n	800967a <_svfiprintf_r+0x17e>
 80095dc:	b1b0      	cbz	r0, 800960c <_svfiprintf_r+0x110>
 80095de:	9207      	str	r2, [sp, #28]
 80095e0:	e014      	b.n	800960c <_svfiprintf_r+0x110>
 80095e2:	eba0 0308 	sub.w	r3, r0, r8
 80095e6:	fa09 f303 	lsl.w	r3, r9, r3
 80095ea:	4313      	orrs	r3, r2
 80095ec:	9304      	str	r3, [sp, #16]
 80095ee:	46a2      	mov	sl, r4
 80095f0:	e7d2      	b.n	8009598 <_svfiprintf_r+0x9c>
 80095f2:	9b03      	ldr	r3, [sp, #12]
 80095f4:	1d19      	adds	r1, r3, #4
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	9103      	str	r1, [sp, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	bfbb      	ittet	lt
 80095fe:	425b      	neglt	r3, r3
 8009600:	f042 0202 	orrlt.w	r2, r2, #2
 8009604:	9307      	strge	r3, [sp, #28]
 8009606:	9307      	strlt	r3, [sp, #28]
 8009608:	bfb8      	it	lt
 800960a:	9204      	strlt	r2, [sp, #16]
 800960c:	7823      	ldrb	r3, [r4, #0]
 800960e:	2b2e      	cmp	r3, #46	; 0x2e
 8009610:	d10c      	bne.n	800962c <_svfiprintf_r+0x130>
 8009612:	7863      	ldrb	r3, [r4, #1]
 8009614:	2b2a      	cmp	r3, #42	; 0x2a
 8009616:	d135      	bne.n	8009684 <_svfiprintf_r+0x188>
 8009618:	9b03      	ldr	r3, [sp, #12]
 800961a:	1d1a      	adds	r2, r3, #4
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	9203      	str	r2, [sp, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	bfb8      	it	lt
 8009624:	f04f 33ff 	movlt.w	r3, #4294967295
 8009628:	3402      	adds	r4, #2
 800962a:	9305      	str	r3, [sp, #20]
 800962c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80096f8 <_svfiprintf_r+0x1fc>
 8009630:	7821      	ldrb	r1, [r4, #0]
 8009632:	2203      	movs	r2, #3
 8009634:	4650      	mov	r0, sl
 8009636:	f7f6 fe0b 	bl	8000250 <memchr>
 800963a:	b140      	cbz	r0, 800964e <_svfiprintf_r+0x152>
 800963c:	2340      	movs	r3, #64	; 0x40
 800963e:	eba0 000a 	sub.w	r0, r0, sl
 8009642:	fa03 f000 	lsl.w	r0, r3, r0
 8009646:	9b04      	ldr	r3, [sp, #16]
 8009648:	4303      	orrs	r3, r0
 800964a:	3401      	adds	r4, #1
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009652:	4826      	ldr	r0, [pc, #152]	; (80096ec <_svfiprintf_r+0x1f0>)
 8009654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009658:	2206      	movs	r2, #6
 800965a:	f7f6 fdf9 	bl	8000250 <memchr>
 800965e:	2800      	cmp	r0, #0
 8009660:	d038      	beq.n	80096d4 <_svfiprintf_r+0x1d8>
 8009662:	4b23      	ldr	r3, [pc, #140]	; (80096f0 <_svfiprintf_r+0x1f4>)
 8009664:	bb1b      	cbnz	r3, 80096ae <_svfiprintf_r+0x1b2>
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	3307      	adds	r3, #7
 800966a:	f023 0307 	bic.w	r3, r3, #7
 800966e:	3308      	adds	r3, #8
 8009670:	9303      	str	r3, [sp, #12]
 8009672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009674:	4433      	add	r3, r6
 8009676:	9309      	str	r3, [sp, #36]	; 0x24
 8009678:	e767      	b.n	800954a <_svfiprintf_r+0x4e>
 800967a:	fb0c 3202 	mla	r2, ip, r2, r3
 800967e:	460c      	mov	r4, r1
 8009680:	2001      	movs	r0, #1
 8009682:	e7a5      	b.n	80095d0 <_svfiprintf_r+0xd4>
 8009684:	2300      	movs	r3, #0
 8009686:	3401      	adds	r4, #1
 8009688:	9305      	str	r3, [sp, #20]
 800968a:	4619      	mov	r1, r3
 800968c:	f04f 0c0a 	mov.w	ip, #10
 8009690:	4620      	mov	r0, r4
 8009692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009696:	3a30      	subs	r2, #48	; 0x30
 8009698:	2a09      	cmp	r2, #9
 800969a:	d903      	bls.n	80096a4 <_svfiprintf_r+0x1a8>
 800969c:	2b00      	cmp	r3, #0
 800969e:	d0c5      	beq.n	800962c <_svfiprintf_r+0x130>
 80096a0:	9105      	str	r1, [sp, #20]
 80096a2:	e7c3      	b.n	800962c <_svfiprintf_r+0x130>
 80096a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80096a8:	4604      	mov	r4, r0
 80096aa:	2301      	movs	r3, #1
 80096ac:	e7f0      	b.n	8009690 <_svfiprintf_r+0x194>
 80096ae:	ab03      	add	r3, sp, #12
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	462a      	mov	r2, r5
 80096b4:	4b0f      	ldr	r3, [pc, #60]	; (80096f4 <_svfiprintf_r+0x1f8>)
 80096b6:	a904      	add	r1, sp, #16
 80096b8:	4638      	mov	r0, r7
 80096ba:	f3af 8000 	nop.w
 80096be:	1c42      	adds	r2, r0, #1
 80096c0:	4606      	mov	r6, r0
 80096c2:	d1d6      	bne.n	8009672 <_svfiprintf_r+0x176>
 80096c4:	89ab      	ldrh	r3, [r5, #12]
 80096c6:	065b      	lsls	r3, r3, #25
 80096c8:	f53f af2c 	bmi.w	8009524 <_svfiprintf_r+0x28>
 80096cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ce:	b01d      	add	sp, #116	; 0x74
 80096d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d4:	ab03      	add	r3, sp, #12
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	462a      	mov	r2, r5
 80096da:	4b06      	ldr	r3, [pc, #24]	; (80096f4 <_svfiprintf_r+0x1f8>)
 80096dc:	a904      	add	r1, sp, #16
 80096de:	4638      	mov	r0, r7
 80096e0:	f000 f87a 	bl	80097d8 <_printf_i>
 80096e4:	e7eb      	b.n	80096be <_svfiprintf_r+0x1c2>
 80096e6:	bf00      	nop
 80096e8:	0800d204 	.word	0x0800d204
 80096ec:	0800d20e 	.word	0x0800d20e
 80096f0:	00000000 	.word	0x00000000
 80096f4:	08009445 	.word	0x08009445
 80096f8:	0800d20a 	.word	0x0800d20a

080096fc <_printf_common>:
 80096fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009700:	4616      	mov	r6, r2
 8009702:	4699      	mov	r9, r3
 8009704:	688a      	ldr	r2, [r1, #8]
 8009706:	690b      	ldr	r3, [r1, #16]
 8009708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800970c:	4293      	cmp	r3, r2
 800970e:	bfb8      	it	lt
 8009710:	4613      	movlt	r3, r2
 8009712:	6033      	str	r3, [r6, #0]
 8009714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009718:	4607      	mov	r7, r0
 800971a:	460c      	mov	r4, r1
 800971c:	b10a      	cbz	r2, 8009722 <_printf_common+0x26>
 800971e:	3301      	adds	r3, #1
 8009720:	6033      	str	r3, [r6, #0]
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	0699      	lsls	r1, r3, #26
 8009726:	bf42      	ittt	mi
 8009728:	6833      	ldrmi	r3, [r6, #0]
 800972a:	3302      	addmi	r3, #2
 800972c:	6033      	strmi	r3, [r6, #0]
 800972e:	6825      	ldr	r5, [r4, #0]
 8009730:	f015 0506 	ands.w	r5, r5, #6
 8009734:	d106      	bne.n	8009744 <_printf_common+0x48>
 8009736:	f104 0a19 	add.w	sl, r4, #25
 800973a:	68e3      	ldr	r3, [r4, #12]
 800973c:	6832      	ldr	r2, [r6, #0]
 800973e:	1a9b      	subs	r3, r3, r2
 8009740:	42ab      	cmp	r3, r5
 8009742:	dc26      	bgt.n	8009792 <_printf_common+0x96>
 8009744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009748:	1e13      	subs	r3, r2, #0
 800974a:	6822      	ldr	r2, [r4, #0]
 800974c:	bf18      	it	ne
 800974e:	2301      	movne	r3, #1
 8009750:	0692      	lsls	r2, r2, #26
 8009752:	d42b      	bmi.n	80097ac <_printf_common+0xb0>
 8009754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009758:	4649      	mov	r1, r9
 800975a:	4638      	mov	r0, r7
 800975c:	47c0      	blx	r8
 800975e:	3001      	adds	r0, #1
 8009760:	d01e      	beq.n	80097a0 <_printf_common+0xa4>
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	68e5      	ldr	r5, [r4, #12]
 8009766:	6832      	ldr	r2, [r6, #0]
 8009768:	f003 0306 	and.w	r3, r3, #6
 800976c:	2b04      	cmp	r3, #4
 800976e:	bf08      	it	eq
 8009770:	1aad      	subeq	r5, r5, r2
 8009772:	68a3      	ldr	r3, [r4, #8]
 8009774:	6922      	ldr	r2, [r4, #16]
 8009776:	bf0c      	ite	eq
 8009778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800977c:	2500      	movne	r5, #0
 800977e:	4293      	cmp	r3, r2
 8009780:	bfc4      	itt	gt
 8009782:	1a9b      	subgt	r3, r3, r2
 8009784:	18ed      	addgt	r5, r5, r3
 8009786:	2600      	movs	r6, #0
 8009788:	341a      	adds	r4, #26
 800978a:	42b5      	cmp	r5, r6
 800978c:	d11a      	bne.n	80097c4 <_printf_common+0xc8>
 800978e:	2000      	movs	r0, #0
 8009790:	e008      	b.n	80097a4 <_printf_common+0xa8>
 8009792:	2301      	movs	r3, #1
 8009794:	4652      	mov	r2, sl
 8009796:	4649      	mov	r1, r9
 8009798:	4638      	mov	r0, r7
 800979a:	47c0      	blx	r8
 800979c:	3001      	adds	r0, #1
 800979e:	d103      	bne.n	80097a8 <_printf_common+0xac>
 80097a0:	f04f 30ff 	mov.w	r0, #4294967295
 80097a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a8:	3501      	adds	r5, #1
 80097aa:	e7c6      	b.n	800973a <_printf_common+0x3e>
 80097ac:	18e1      	adds	r1, r4, r3
 80097ae:	1c5a      	adds	r2, r3, #1
 80097b0:	2030      	movs	r0, #48	; 0x30
 80097b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097b6:	4422      	add	r2, r4
 80097b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097c0:	3302      	adds	r3, #2
 80097c2:	e7c7      	b.n	8009754 <_printf_common+0x58>
 80097c4:	2301      	movs	r3, #1
 80097c6:	4622      	mov	r2, r4
 80097c8:	4649      	mov	r1, r9
 80097ca:	4638      	mov	r0, r7
 80097cc:	47c0      	blx	r8
 80097ce:	3001      	adds	r0, #1
 80097d0:	d0e6      	beq.n	80097a0 <_printf_common+0xa4>
 80097d2:	3601      	adds	r6, #1
 80097d4:	e7d9      	b.n	800978a <_printf_common+0x8e>
	...

080097d8 <_printf_i>:
 80097d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097dc:	460c      	mov	r4, r1
 80097de:	4691      	mov	r9, r2
 80097e0:	7e27      	ldrb	r7, [r4, #24]
 80097e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80097e4:	2f78      	cmp	r7, #120	; 0x78
 80097e6:	4680      	mov	r8, r0
 80097e8:	469a      	mov	sl, r3
 80097ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097ee:	d807      	bhi.n	8009800 <_printf_i+0x28>
 80097f0:	2f62      	cmp	r7, #98	; 0x62
 80097f2:	d80a      	bhi.n	800980a <_printf_i+0x32>
 80097f4:	2f00      	cmp	r7, #0
 80097f6:	f000 80d8 	beq.w	80099aa <_printf_i+0x1d2>
 80097fa:	2f58      	cmp	r7, #88	; 0x58
 80097fc:	f000 80a3 	beq.w	8009946 <_printf_i+0x16e>
 8009800:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009808:	e03a      	b.n	8009880 <_printf_i+0xa8>
 800980a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800980e:	2b15      	cmp	r3, #21
 8009810:	d8f6      	bhi.n	8009800 <_printf_i+0x28>
 8009812:	a001      	add	r0, pc, #4	; (adr r0, 8009818 <_printf_i+0x40>)
 8009814:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009818:	08009871 	.word	0x08009871
 800981c:	08009885 	.word	0x08009885
 8009820:	08009801 	.word	0x08009801
 8009824:	08009801 	.word	0x08009801
 8009828:	08009801 	.word	0x08009801
 800982c:	08009801 	.word	0x08009801
 8009830:	08009885 	.word	0x08009885
 8009834:	08009801 	.word	0x08009801
 8009838:	08009801 	.word	0x08009801
 800983c:	08009801 	.word	0x08009801
 8009840:	08009801 	.word	0x08009801
 8009844:	08009991 	.word	0x08009991
 8009848:	080098b5 	.word	0x080098b5
 800984c:	08009973 	.word	0x08009973
 8009850:	08009801 	.word	0x08009801
 8009854:	08009801 	.word	0x08009801
 8009858:	080099b3 	.word	0x080099b3
 800985c:	08009801 	.word	0x08009801
 8009860:	080098b5 	.word	0x080098b5
 8009864:	08009801 	.word	0x08009801
 8009868:	08009801 	.word	0x08009801
 800986c:	0800997b 	.word	0x0800997b
 8009870:	680b      	ldr	r3, [r1, #0]
 8009872:	1d1a      	adds	r2, r3, #4
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	600a      	str	r2, [r1, #0]
 8009878:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800987c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009880:	2301      	movs	r3, #1
 8009882:	e0a3      	b.n	80099cc <_printf_i+0x1f4>
 8009884:	6825      	ldr	r5, [r4, #0]
 8009886:	6808      	ldr	r0, [r1, #0]
 8009888:	062e      	lsls	r6, r5, #24
 800988a:	f100 0304 	add.w	r3, r0, #4
 800988e:	d50a      	bpl.n	80098a6 <_printf_i+0xce>
 8009890:	6805      	ldr	r5, [r0, #0]
 8009892:	600b      	str	r3, [r1, #0]
 8009894:	2d00      	cmp	r5, #0
 8009896:	da03      	bge.n	80098a0 <_printf_i+0xc8>
 8009898:	232d      	movs	r3, #45	; 0x2d
 800989a:	426d      	negs	r5, r5
 800989c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098a0:	485e      	ldr	r0, [pc, #376]	; (8009a1c <_printf_i+0x244>)
 80098a2:	230a      	movs	r3, #10
 80098a4:	e019      	b.n	80098da <_printf_i+0x102>
 80098a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80098aa:	6805      	ldr	r5, [r0, #0]
 80098ac:	600b      	str	r3, [r1, #0]
 80098ae:	bf18      	it	ne
 80098b0:	b22d      	sxthne	r5, r5
 80098b2:	e7ef      	b.n	8009894 <_printf_i+0xbc>
 80098b4:	680b      	ldr	r3, [r1, #0]
 80098b6:	6825      	ldr	r5, [r4, #0]
 80098b8:	1d18      	adds	r0, r3, #4
 80098ba:	6008      	str	r0, [r1, #0]
 80098bc:	0628      	lsls	r0, r5, #24
 80098be:	d501      	bpl.n	80098c4 <_printf_i+0xec>
 80098c0:	681d      	ldr	r5, [r3, #0]
 80098c2:	e002      	b.n	80098ca <_printf_i+0xf2>
 80098c4:	0669      	lsls	r1, r5, #25
 80098c6:	d5fb      	bpl.n	80098c0 <_printf_i+0xe8>
 80098c8:	881d      	ldrh	r5, [r3, #0]
 80098ca:	4854      	ldr	r0, [pc, #336]	; (8009a1c <_printf_i+0x244>)
 80098cc:	2f6f      	cmp	r7, #111	; 0x6f
 80098ce:	bf0c      	ite	eq
 80098d0:	2308      	moveq	r3, #8
 80098d2:	230a      	movne	r3, #10
 80098d4:	2100      	movs	r1, #0
 80098d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098da:	6866      	ldr	r6, [r4, #4]
 80098dc:	60a6      	str	r6, [r4, #8]
 80098de:	2e00      	cmp	r6, #0
 80098e0:	bfa2      	ittt	ge
 80098e2:	6821      	ldrge	r1, [r4, #0]
 80098e4:	f021 0104 	bicge.w	r1, r1, #4
 80098e8:	6021      	strge	r1, [r4, #0]
 80098ea:	b90d      	cbnz	r5, 80098f0 <_printf_i+0x118>
 80098ec:	2e00      	cmp	r6, #0
 80098ee:	d04d      	beq.n	800998c <_printf_i+0x1b4>
 80098f0:	4616      	mov	r6, r2
 80098f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80098f6:	fb03 5711 	mls	r7, r3, r1, r5
 80098fa:	5dc7      	ldrb	r7, [r0, r7]
 80098fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009900:	462f      	mov	r7, r5
 8009902:	42bb      	cmp	r3, r7
 8009904:	460d      	mov	r5, r1
 8009906:	d9f4      	bls.n	80098f2 <_printf_i+0x11a>
 8009908:	2b08      	cmp	r3, #8
 800990a:	d10b      	bne.n	8009924 <_printf_i+0x14c>
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	07df      	lsls	r7, r3, #31
 8009910:	d508      	bpl.n	8009924 <_printf_i+0x14c>
 8009912:	6923      	ldr	r3, [r4, #16]
 8009914:	6861      	ldr	r1, [r4, #4]
 8009916:	4299      	cmp	r1, r3
 8009918:	bfde      	ittt	le
 800991a:	2330      	movle	r3, #48	; 0x30
 800991c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009920:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009924:	1b92      	subs	r2, r2, r6
 8009926:	6122      	str	r2, [r4, #16]
 8009928:	f8cd a000 	str.w	sl, [sp]
 800992c:	464b      	mov	r3, r9
 800992e:	aa03      	add	r2, sp, #12
 8009930:	4621      	mov	r1, r4
 8009932:	4640      	mov	r0, r8
 8009934:	f7ff fee2 	bl	80096fc <_printf_common>
 8009938:	3001      	adds	r0, #1
 800993a:	d14c      	bne.n	80099d6 <_printf_i+0x1fe>
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	b004      	add	sp, #16
 8009942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009946:	4835      	ldr	r0, [pc, #212]	; (8009a1c <_printf_i+0x244>)
 8009948:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	680e      	ldr	r6, [r1, #0]
 8009950:	061f      	lsls	r7, r3, #24
 8009952:	f856 5b04 	ldr.w	r5, [r6], #4
 8009956:	600e      	str	r6, [r1, #0]
 8009958:	d514      	bpl.n	8009984 <_printf_i+0x1ac>
 800995a:	07d9      	lsls	r1, r3, #31
 800995c:	bf44      	itt	mi
 800995e:	f043 0320 	orrmi.w	r3, r3, #32
 8009962:	6023      	strmi	r3, [r4, #0]
 8009964:	b91d      	cbnz	r5, 800996e <_printf_i+0x196>
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	f023 0320 	bic.w	r3, r3, #32
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	2310      	movs	r3, #16
 8009970:	e7b0      	b.n	80098d4 <_printf_i+0xfc>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	f043 0320 	orr.w	r3, r3, #32
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	2378      	movs	r3, #120	; 0x78
 800997c:	4828      	ldr	r0, [pc, #160]	; (8009a20 <_printf_i+0x248>)
 800997e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009982:	e7e3      	b.n	800994c <_printf_i+0x174>
 8009984:	065e      	lsls	r6, r3, #25
 8009986:	bf48      	it	mi
 8009988:	b2ad      	uxthmi	r5, r5
 800998a:	e7e6      	b.n	800995a <_printf_i+0x182>
 800998c:	4616      	mov	r6, r2
 800998e:	e7bb      	b.n	8009908 <_printf_i+0x130>
 8009990:	680b      	ldr	r3, [r1, #0]
 8009992:	6826      	ldr	r6, [r4, #0]
 8009994:	6960      	ldr	r0, [r4, #20]
 8009996:	1d1d      	adds	r5, r3, #4
 8009998:	600d      	str	r5, [r1, #0]
 800999a:	0635      	lsls	r5, r6, #24
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	d501      	bpl.n	80099a4 <_printf_i+0x1cc>
 80099a0:	6018      	str	r0, [r3, #0]
 80099a2:	e002      	b.n	80099aa <_printf_i+0x1d2>
 80099a4:	0671      	lsls	r1, r6, #25
 80099a6:	d5fb      	bpl.n	80099a0 <_printf_i+0x1c8>
 80099a8:	8018      	strh	r0, [r3, #0]
 80099aa:	2300      	movs	r3, #0
 80099ac:	6123      	str	r3, [r4, #16]
 80099ae:	4616      	mov	r6, r2
 80099b0:	e7ba      	b.n	8009928 <_printf_i+0x150>
 80099b2:	680b      	ldr	r3, [r1, #0]
 80099b4:	1d1a      	adds	r2, r3, #4
 80099b6:	600a      	str	r2, [r1, #0]
 80099b8:	681e      	ldr	r6, [r3, #0]
 80099ba:	6862      	ldr	r2, [r4, #4]
 80099bc:	2100      	movs	r1, #0
 80099be:	4630      	mov	r0, r6
 80099c0:	f7f6 fc46 	bl	8000250 <memchr>
 80099c4:	b108      	cbz	r0, 80099ca <_printf_i+0x1f2>
 80099c6:	1b80      	subs	r0, r0, r6
 80099c8:	6060      	str	r0, [r4, #4]
 80099ca:	6863      	ldr	r3, [r4, #4]
 80099cc:	6123      	str	r3, [r4, #16]
 80099ce:	2300      	movs	r3, #0
 80099d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099d4:	e7a8      	b.n	8009928 <_printf_i+0x150>
 80099d6:	6923      	ldr	r3, [r4, #16]
 80099d8:	4632      	mov	r2, r6
 80099da:	4649      	mov	r1, r9
 80099dc:	4640      	mov	r0, r8
 80099de:	47d0      	blx	sl
 80099e0:	3001      	adds	r0, #1
 80099e2:	d0ab      	beq.n	800993c <_printf_i+0x164>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	079b      	lsls	r3, r3, #30
 80099e8:	d413      	bmi.n	8009a12 <_printf_i+0x23a>
 80099ea:	68e0      	ldr	r0, [r4, #12]
 80099ec:	9b03      	ldr	r3, [sp, #12]
 80099ee:	4298      	cmp	r0, r3
 80099f0:	bfb8      	it	lt
 80099f2:	4618      	movlt	r0, r3
 80099f4:	e7a4      	b.n	8009940 <_printf_i+0x168>
 80099f6:	2301      	movs	r3, #1
 80099f8:	4632      	mov	r2, r6
 80099fa:	4649      	mov	r1, r9
 80099fc:	4640      	mov	r0, r8
 80099fe:	47d0      	blx	sl
 8009a00:	3001      	adds	r0, #1
 8009a02:	d09b      	beq.n	800993c <_printf_i+0x164>
 8009a04:	3501      	adds	r5, #1
 8009a06:	68e3      	ldr	r3, [r4, #12]
 8009a08:	9903      	ldr	r1, [sp, #12]
 8009a0a:	1a5b      	subs	r3, r3, r1
 8009a0c:	42ab      	cmp	r3, r5
 8009a0e:	dcf2      	bgt.n	80099f6 <_printf_i+0x21e>
 8009a10:	e7eb      	b.n	80099ea <_printf_i+0x212>
 8009a12:	2500      	movs	r5, #0
 8009a14:	f104 0619 	add.w	r6, r4, #25
 8009a18:	e7f5      	b.n	8009a06 <_printf_i+0x22e>
 8009a1a:	bf00      	nop
 8009a1c:	0800d215 	.word	0x0800d215
 8009a20:	0800d226 	.word	0x0800d226

08009a24 <_realloc_r>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	4607      	mov	r7, r0
 8009a28:	4614      	mov	r4, r2
 8009a2a:	460e      	mov	r6, r1
 8009a2c:	b921      	cbnz	r1, 8009a38 <_realloc_r+0x14>
 8009a2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a32:	4611      	mov	r1, r2
 8009a34:	f7ff bbbe 	b.w	80091b4 <_malloc_r>
 8009a38:	b922      	cbnz	r2, 8009a44 <_realloc_r+0x20>
 8009a3a:	f7ff fb6b 	bl	8009114 <_free_r>
 8009a3e:	4625      	mov	r5, r4
 8009a40:	4628      	mov	r0, r5
 8009a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a44:	f000 f814 	bl	8009a70 <_malloc_usable_size_r>
 8009a48:	42a0      	cmp	r0, r4
 8009a4a:	d20f      	bcs.n	8009a6c <_realloc_r+0x48>
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	4638      	mov	r0, r7
 8009a50:	f7ff fbb0 	bl	80091b4 <_malloc_r>
 8009a54:	4605      	mov	r5, r0
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d0f2      	beq.n	8009a40 <_realloc_r+0x1c>
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	f7ff fb29 	bl	80090b4 <memcpy>
 8009a62:	4631      	mov	r1, r6
 8009a64:	4638      	mov	r0, r7
 8009a66:	f7ff fb55 	bl	8009114 <_free_r>
 8009a6a:	e7e9      	b.n	8009a40 <_realloc_r+0x1c>
 8009a6c:	4635      	mov	r5, r6
 8009a6e:	e7e7      	b.n	8009a40 <_realloc_r+0x1c>

08009a70 <_malloc_usable_size_r>:
 8009a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a74:	1f18      	subs	r0, r3, #4
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	bfbc      	itt	lt
 8009a7a:	580b      	ldrlt	r3, [r1, r0]
 8009a7c:	18c0      	addlt	r0, r0, r3
 8009a7e:	4770      	bx	lr

08009a80 <_init>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	bf00      	nop
 8009a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a86:	bc08      	pop	{r3}
 8009a88:	469e      	mov	lr, r3
 8009a8a:	4770      	bx	lr

08009a8c <_fini>:
 8009a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8e:	bf00      	nop
 8009a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a92:	bc08      	pop	{r3}
 8009a94:	469e      	mov	lr, r3
 8009a96:	4770      	bx	lr
