
STM32 F7D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afb4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038cc  0800b1b4  0800b1b4  0001b1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea80  0800ea80  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea80  0800ea80  0001ea80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea88  0800ea88  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea88  0800ea88  0001ea88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea8c  0800ea8c  0001ea8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800ea90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000078  0800eb08  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  0800eb08  00020474  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002924c  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00046f9c  00000000  00000000  000492f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008f97  00000000  00000000  0009028e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f60  00000000  00000000  00099228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014aca9  00000000  00000000  0009b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001d28  00000000  00000000  001e5e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b8f2  00000000  00000000  001e7b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00223452  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cd8  00000000  00000000  002234a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b19c 	.word	0x0800b19c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	0800b19c 	.word	0x0800b19c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000620 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000604:	4c0b      	ldr	r4, [pc, #44]	; (8000634 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000612:	f001 fec3 	bl	800239c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000616:	f00a f8a7 	bl	800a768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800061a:	f000 ff1b 	bl	8001454 <main>
  bx  lr    
 800061e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000620:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800062c:	0800ea90 	.word	0x0800ea90
  ldr r2, =_sbss
 8000630:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000634:	20000474 	.word	0x20000474

08000638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC_IRQHandler>
	...

0800063c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000640:	f3bf 8f4f 	dsb	sy
}
 8000644:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000646:	f3bf 8f6f 	isb	sy
}
 800064a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <SCB_EnableICache+0x48>)
 800064e:	2200      	movs	r2, #0
 8000650:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000654:	f3bf 8f4f 	dsb	sy
}
 8000658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800065a:	f3bf 8f6f 	isb	sy
}
 800065e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SCB_EnableICache+0x48>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SCB_EnableICache+0x48>)
 8000666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000690:	2200      	movs	r2, #0
 8000692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000696:	f3bf 8f4f 	dsb	sy
}
 800069a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <SCB_EnableDCache+0x9c>)
 800069e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	0b5b      	lsrs	r3, r3, #13
 80006a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	015a      	lsls	r2, r3, #5
 80006bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80006c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006c6:	4917      	ldr	r1, [pc, #92]	; (8000724 <SCB_EnableDCache+0x9c>)
 80006c8:	4313      	orrs	r3, r2
 80006ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	1e5a      	subs	r2, r3, #1
 80006d2:	60ba      	str	r2, [r7, #8]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d000      	beq.n	80006e4 <SCB_EnableDCache+0x5c>
      do {
 80006e2:	e7e9      	b.n	80006b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	60fa      	str	r2, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d000      	beq.n	80006fa <SCB_EnableDCache+0x72>
    do {
 80006f8:	e7d9      	b.n	80006ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80006fa:	f3bf 8f4f 	dsb	sy
}
 80006fe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800070a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800070c:	f3bf 8f4f 	dsb	sy
}
 8000710:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000712:	f3bf 8f6f 	isb	sy
}
 8000716:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks
//Also enables all GPIO ports, and both DMA1 and DMA2 peripherals
//
//Returns QA_OK if successful, or QA_Fail if initialization failed
QA_Result SystemInitialize(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b0c6      	sub	sp, #280	; 0x118
 800072c:	af00      	add	r7, sp, #0

  //------------------------------------
  //Enable CPU Instruction & Data Caches
  SCB_EnableICache();
 800072e:	f7ff ff85 	bl	800063c <SCB_EnableICache>
  SCB_EnableDCache();
 8000732:	f7ff ffa9 	bl	8000688 <SCB_EnableDCache>

	//----------------------
	//Enable ART Accelerator
  __HAL_FLASH_ART_ENABLE();
 8000736:	4b67      	ldr	r3, [pc, #412]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a66      	ldr	r2, [pc, #408]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 800073c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000740:	6013      	str	r3, [r2, #0]

  //---------------------
  //Enable Flash Prefetch
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000742:	4b64      	ldr	r3, [pc, #400]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a63      	ldr	r2, [pc, #396]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074c:	6013      	str	r3, [r2, #0]

  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074e:	2003      	movs	r0, #3
 8000750:	f002 f9f6 	bl	8002b40 <HAL_NVIC_SetPriorityGrouping>

  //------------
  //Init SysTick
  HAL_InitTick(TICK_INT_PRIORITY);
 8000754:	2000      	movs	r0, #0
 8000756:	f002 f88b 	bl	8002870 <HAL_InitTick>

  //------------------------------
  //Configure LSE Drive Capability
  HAL_PWR_EnableBkUpAccess();
 800075a:	f004 f93f 	bl	80049dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800075e:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000762:	4a5d      	ldr	r2, [pc, #372]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000764:	f023 0318 	bic.w	r3, r3, #24
 8000768:	6713      	str	r3, [r2, #112]	; 0x70

  //------------------------------------------------
  //Configure Main Internal Regulator Output Voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b5b      	ldr	r3, [pc, #364]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a5a      	ldr	r2, [pc, #360]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b58      	ldr	r3, [pc, #352]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000782:	4b56      	ldr	r3, [pc, #344]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a55      	ldr	r2, [pc, #340]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	4b53      	ldr	r3, [pc, #332]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
 8000798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  //
  //Configure High Speed External (HSE) oscillator to be used for primary system clocks, and setup primary PLL to provide a 216MHz clock
  //Configure Low Speed External (LSE) oscillator to be used for clock source for Real Timer Clock (RTC) peripheral
  //NOTE: HSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 25MHz oscillator (labeled X2 on the PCB)
  //      LSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 32.768kHz oscillator (labeled X3 on the PCB)
  RCC_OscInitTypeDef RCC_OscInit = {0};
 800079a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800079e:	2234      	movs	r2, #52	; 0x34
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00a f83c 	bl	800a820 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | //Define HSE (High Speed External) oscillator to be configured (used for main system clock)
 80007a8:	2305      	movs	r3, #5
 80007aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  		                         RCC_OSCILLATORTYPE_LSE;  //Define LSE (Low Speed External) oscillator to be configured (used for RTC - Real Time Clock)
  RCC_OscInit.HSEState       = RCC_HSE_ON;              //Enable HSE
 80007ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInit.LSEState       = RCC_LSE_ON;              //Enable LSE
 80007b6:	2301      	movs	r3, #1
 80007b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;              //Enable primary PLL
 80007bc:	2302      	movs	r3, #2
 80007be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;       //Set primary PLL source to HSE
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    //Set primary PLL values required for 216Mhz system clock
  RCC_OscInit.PLL.PLLM       = 25;
 80007ca:	2319      	movs	r3, #25
 80007cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInit.PLL.PLLN       = 432;
 80007d0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80007d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInit.PLL.PLLQ       = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {  //Initialize Oscillators using values in init structure
 80007e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 f957 	bl	8004a9c <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <_Z16SystemInitializev+0xda>
  	return QA_Fail;
 80007fe:	2301      	movs	r3, #1
 8000800:	e123      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a34      	ldr	r2, [pc, #208]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
 8000818:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  //---------------------
  //Enable Overdrive Mode
  //
  //This is required to provide best system stability given that we are running at the maximum clock rate of 216MHz for the STM32F769I device
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800081a:	f004 f8ef 	bl	80049fc <HAL_PWREx_EnableOverDrive>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	bf14      	ite	ne
 8000824:	2301      	movne	r3, #1
 8000826:	2300      	moveq	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <_Z16SystemInitializev+0x10a>
  	return QA_Fail;
 800082e:	2301      	movs	r3, #1
 8000830:	e10b      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //---------------------------
  //Initialize CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000832:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |      //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 8000842:	230f      	movs	r3, #15
 8000844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  		                         RCC_CLOCKTYPE_SYSCLK |
                               RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;  //Define primary PLL clock as system clock source
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;          //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 216MHz
 800084e:	2300      	movs	r3, #0
 8000850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV4;            //Set clock divider for peripheral bus 1 (APB1), DIV4 provides an APB1 frequency of 54MHz
 8000854:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                                                         //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 108MHz

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;            //Set clock divider for peripheral bus 2 (APB2), DIV2 provides an APB2 frequency of 108MHz
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                                                         //NOTE: APB2 timer clocks are clock doubled, providing APB2 timers with 216MHz clocks

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_7) != HAL_OK) { //Initialize system clocks using required values, and setting Flash latency to 7 cycles
 8000864:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000868:	2107      	movs	r1, #7
 800086a:	4618      	mov	r0, r3
 800086c:	f004 fbc4 	bl	8004ff8 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf14      	ite	ne
 8000876:	2301      	movne	r3, #1
 8000878:	2300      	moveq	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <_Z16SystemInitializev+0x15c>
  	return QA_Fail;
 8000880:	2301      	movs	r3, #1
 8000882:	e0e2      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //----------------------------
  //Initialize Peripheral Clocks
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 8000884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000888:	2290      	movs	r2, #144	; 0x90
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f009 ffc7 	bl	800a820 <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC |
 8000892:	2328      	movs	r3, #40	; 0x28
 8000894:	643b      	str	r3, [r7, #64]	; 0x40
  		                                     RCC_PERIPHCLK_LTDC;

    //Define settings for PLLSAI, as this PLL is also used as the clock source for the LTDC peripheral which we require to run the LCD screen
	RCC_PeriphClkInit.PLLSAI.PLLSAIN       = 384;
 8000896:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800089a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_PeriphClkInit.PLLSAI.PLLSAIP       = RCC_PLLSAIP_DIV8;
 800089c:	2303      	movs	r3, #3
 800089e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_PeriphClkInit.PLLSAI.PLLSAIR       = 7;
 80008a0:	2307      	movs	r3, #7
 80008a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_PeriphClkInit.PLLSAI.PLLSAIQ       = 8;
 80008a4:	2308      	movs	r3, #8
 80008a6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_PeriphClkInit.PLLSAIDivQ           = 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_PeriphClkInit.PLLSAIDivR           = RCC_PLLSAIDIVR_2;
 80008ac:	2300      	movs	r3, #0
 80008ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  RCC_PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE; //Set the LSE oscillator as the clock source for the Real Time Clock
 80008b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b4:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK) { //Initialize the peripheral clocks used the required values
 80008b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ba:	4618      	mov	r0, r3
 80008bc:	f004 fd72 	bl	80053a4 <HAL_RCCEx_PeriphCLKConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bf14      	ite	ne
 80008c6:	2301      	movne	r3, #1
 80008c8:	2300      	moveq	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d007      	beq.n	80008e0 <_Z16SystemInitializev+0x1b8>
  	return QA_Fail;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e0ba      	b.n	8000a4a <_Z16SystemInitializev+0x322>
 80008d4:	40023c00 	.word	0x40023c00
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000
  }

  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b5c      	ldr	r3, [pc, #368]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a5b      	ldr	r2, [pc, #364]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
 80008ec:	4b59      	ldr	r3, [pc, #356]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
 80008f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b56      	ldr	r3, [pc, #344]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a55      	ldr	r2, [pc, #340]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b53      	ldr	r3, [pc, #332]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000910:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a4f      	ldr	r2, [pc, #316]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000928:	4b4a      	ldr	r3, [pc, #296]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a49      	ldr	r2, [pc, #292]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000940:	4b44      	ldr	r3, [pc, #272]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a43      	ldr	r2, [pc, #268]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000958:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a3d      	ldr	r2, [pc, #244]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
 800096e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
 800099c:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a27      	ldr	r2, [pc, #156]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	681b      	ldr	r3, [r3, #0]

  //-----------------
  //Enable DMA Clocks
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000a40:	463b      	mov	r3, r7
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	463b      	mov	r3, r7
 8000a46:	681b      	ldr	r3, [r3, #0]

  //Return
  return QA_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800

08000a58 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HardFault_Handler+0x1c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f006 fc20 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HardFault_Handler+0x20>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f006 fc1b 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000a80:	e7fe      	b.n	8000a80 <HardFault_Handler+0x18>
 8000a82:	bf00      	nop
 8000a84:	200001c4 	.word	0x200001c4
 8000a88:	200001c8 	.word	0x200001c8

08000a8c <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MemManage_Handler+0x1c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f006 fc0e 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <MemManage_Handler+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f006 fc09 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x18>
 8000aa6:	bf00      	nop
 8000aa8:	200001c4 	.word	0x200001c4
 8000aac:	200001c8 	.word	0x200001c8

08000ab0 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <BusFault_Handler+0x1c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f006 fbfc 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <BusFault_Handler+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f006 fbf7 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000ac8:	e7fe      	b.n	8000ac8 <BusFault_Handler+0x18>
 8000aca:	bf00      	nop
 8000acc:	200001c4 	.word	0x200001c4
 8000ad0:	200001c8 	.word	0x200001c8

08000ad4 <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <UsageFault_Handler+0x1c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f006 fbea 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <UsageFault_Handler+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f006 fbe5 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x18>
 8000aee:	bf00      	nop
 8000af0:	200001c4 	.word	0x200001c4
 8000af4:	200001c8 	.word	0x200001c8

08000af8 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000b26:	f001 fed3 	bl	80028d0 <HAL_IncTick>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <USART1_IRQHandler>:
  //Interrupt Handler Functions


//USART1_IRQHandler
//Interrupt Handler Function
void USART1_IRQHandler(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL);
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <USART1_IRQHandler+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f009 fad3 	bl	800a0e6 <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200001d0 	.word	0x200001d0

08000b48 <_ZN7QAD_FMCC1Ev>:

	//------------
	//Constructors

	//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_FMC() :
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	  m_eState(QA_NotInitialized) {}
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2202      	movs	r2, #2
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2204      	movs	r2, #4
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2208      	movs	r2, #8
 8000b72:	615a      	str	r2, [r3, #20]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2220      	movs	r2, #32
 8000b78:	619a      	str	r2, [r3, #24]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2230      	movs	r2, #48	; 0x30
 8000b7e:	61da      	str	r2, [r3, #28]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f240 6203 	movw	r2, #1539	; 0x603
 8000ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <_ZN7QAD_FMC3getEv>:

	//-----------------
	//Singleton Methods
  //
	//Used to retrieve a reference to the singleton class
  static QAD_FMC& get(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  	static QAD_FMC instance;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	f3bf 8f5b 	dmb	ish
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d010      	beq.n	8000bfe <_ZN7QAD_FMC3getEv+0x42>
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bde:	f009 fd6a 	bl	800a6b6 <__cxa_guard_acquire>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bf14      	ite	ne
 8000be8:	2301      	movne	r3, #1
 8000bea:	2300      	moveq	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d005      	beq.n	8000bfe <_ZN7QAD_FMC3getEv+0x42>
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <_ZN7QAD_FMC3getEv+0x4c>)
 8000bf4:	f7ff ffa8 	bl	8000b48 <_ZN7QAD_FMCC1Ev>
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bfa:	f009 fd68 	bl	800a6ce <__cxa_guard_release>
  	return instance;
 8000bfe:	4b02      	ldr	r3, [pc, #8]	; (8000c08 <_ZN7QAD_FMC3getEv+0x4c>)
  }
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000100 	.word	0x20000100
 8000c08:	20000094 	.word	0x20000094

08000c0c <_ZN7QAD_FMC4initEv>:

  //NOTE: No deinitialization method is supplied due to SDRAM being seen as a primary system component
  //in this codebase and is required for operation of systems such as LCD among others

  //Used to initialize the FMC peripheral and SDRAM module
  static QA_Result init(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000c10:	f7ff ffd4 	bl	8000bbc <_ZN7QAD_FMC3getEv>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f006 f9ca 	bl	8006fb0 <_ZN7QAD_FMC8imp_initEv>
 8000c1c:	4603      	mov	r3, r0
  }
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_ZN7QAD_FMC4testEv>:
  //Memory Testing Methods

  //Used to perform a memory test of the SDRAM module
  //Performs a full read and write test of all 16 megabytes of the SDRAM
  //Returns QA_OK if memory test is successful, or QA_Fail if not successful
  static QA_Result test(void) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  	return get().imp_test();
 8000c26:	f7ff ffc9 	bl	8000bbc <_ZN7QAD_FMC3getEv>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f006 fadb 	bl	80071e8 <_ZN7QAD_FMC8imp_testEv>
 8000c32:	4603      	mov	r3, r0
  }
 8000c34:	4618      	mov	r0, r3
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_ZN7QAD_RNGC1Ev>:
	//-----------
	//Constructor

	//As this is a private method within a singleton class, this method will be called the
	//first time the static get() method is called.
	QAD_RNG() :
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_sHandle({0}) {}
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <_ZN7QAD_RNG3getEv>:

  //-----------------
  //Singleton Methods
  //
  //Used to retrieve a reference to the singleton class
  static QAD_RNG& get(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  	static QAD_RNG instance;
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	f3bf 8f5b 	dmb	ish
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf0c      	ite	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	2300      	movne	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d010      	beq.n	8000ca6 <_ZN7QAD_RNG3getEv+0x42>
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000c86:	f009 fd16 	bl	800a6b6 <__cxa_guard_acquire>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bf14      	ite	ne
 8000c90:	2301      	movne	r3, #1
 8000c92:	2300      	moveq	r3, #0
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <_ZN7QAD_RNG3getEv+0x42>
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <_ZN7QAD_RNG3getEv+0x4c>)
 8000c9c:	f7ff ffcc 	bl	8000c38 <_ZN7QAD_RNGC1Ev>
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000ca2:	f009 fd14 	bl	800a6ce <__cxa_guard_release>
  	return instance;
 8000ca6:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <_ZN7QAD_RNG3getEv+0x4c>)
  }
 8000ca8:	4618      	mov	r0, r3
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000118 	.word	0x20000118
 8000cb0:	20000104 	.word	0x20000104

08000cb4 <_ZN7QAD_RNG4initEv>:
  //----------------------
  //Initialization Methods

  //Used to initialize the RNG peripheral
  //Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
  static QA_Result init(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000cb8:	f7ff ffd4 	bl	8000c64 <_ZN7QAD_RNG3getEv>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f007 fa72 	bl	80081a8 <_ZN7QAD_RNG8imp_initEv>
 8000cc4:	4603      	mov	r3, r0
  }
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_ZN7QAD_RTCC1Ev>:
	//------------
	//Constructors

	//As this is a private method within a singleton class, this method will be called the
	//first time the static get() method is called
	QAD_RTC() :
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
		m_eInitState(QA_NotInitialized),
		m_sHandle({0}) {}
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3304      	adds	r3, #4
 8000cdc:	2220      	movs	r2, #32
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f009 fd9d 	bl	800a820 <memset>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_ZN7QAD_RTC3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_RTC& get(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
		static QAD_RTC instance;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_ZN7QAD_RTC3getEv+0x48>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	f3bf 8f5b 	dmb	ish
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bf0c      	ite	eq
 8000d06:	2301      	moveq	r3, #1
 8000d08:	2300      	movne	r3, #0
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d010      	beq.n	8000d32 <_ZN7QAD_RTC3getEv+0x42>
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <_ZN7QAD_RTC3getEv+0x48>)
 8000d12:	f009 fcd0 	bl	800a6b6 <__cxa_guard_acquire>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	2301      	movne	r3, #1
 8000d1e:	2300      	moveq	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <_ZN7QAD_RTC3getEv+0x42>
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <_ZN7QAD_RTC3getEv+0x4c>)
 8000d28:	f7ff ffcf 	bl	8000cca <_ZN7QAD_RTCC1Ev>
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <_ZN7QAD_RTC3getEv+0x48>)
 8000d2e:	f009 fcce 	bl	800a6ce <__cxa_guard_release>
		return instance;
 8000d32:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <_ZN7QAD_RTC3getEv+0x4c>)
	}
 8000d34:	4618      	mov	r0, r3
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000015c 	.word	0x2000015c
 8000d3c:	2000011c 	.word	0x2000011c

08000d40 <_ZN7QAD_RTC4initEv>:
	//----------------------
	//Initialization Methods

	//Used to initialize the RTC peripheral
	//Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
	static QA_Result init(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
		return get().imp_init();
 8000d44:	f7ff ffd4 	bl	8000cf0 <_ZN7QAD_RTC3getEv>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f007 fa72 	bl	8008234 <_ZN7QAD_RTC8imp_initEv>
 8000d50:	4603      	mov	r3, r0
	}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_ZN7QAD_I2CC1ER18QAD_I2C_InitStruct>:
		//--------------------------
		//Constructors / Destructors

	QAD_I2C() = delete;                      //Delete the default class constructor, as we need an initialization structure to be provided on class creation.

	QAD_I2C(QAD_I2C_InitStruct& sInit) :     //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
		m_pSDA_GPIO(sInit.pSDA_GPIO),
		m_uSDA_Pin(sInit.uSDA_Pin),
		m_uSDA_AF(sInit.uSDA_AF),
		m_eIRQ_Event(I2C1_EV_IRQn),
		m_eIRQ_Error(I2C1_ER_IRQn),
		m_sHandle({0}) {}
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d66:	801a      	strh	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	709a      	strb	r2, [r3, #2]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2202      	movs	r2, #2
 8000d72:	70da      	strb	r2, [r3, #3]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	711a      	strb	r2, [r3, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	715a      	strb	r2, [r3, #5]
		m_eI2C(sInit.eI2C),
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	781a      	ldrb	r2, [r3, #0]
		m_sHandle({0}) {}
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	719a      	strb	r2, [r3, #6]
		m_uIRQPriority_Event(sInit.uIRQPriority_Event),
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	785a      	ldrb	r2, [r3, #1]
		m_sHandle({0}) {}
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	71da      	strb	r2, [r3, #7]
		m_uIRQPriority_Error(sInit.uIRQPriority_Error),
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	789a      	ldrb	r2, [r3, #2]
		m_sHandle({0}) {}
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	721a      	strb	r2, [r3, #8]
		m_uTiming(sInit.uTiming),
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685a      	ldr	r2, [r3, #4]
		m_sHandle({0}) {}
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	60da      	str	r2, [r3, #12]
		m_eAddressingMode(sInit.eAddressingMode),
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
		m_sHandle({0}) {}
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	611a      	str	r2, [r3, #16]
		m_eDualAddressingMode(sInit.eDualAddressingMode),
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68da      	ldr	r2, [r3, #12]
		m_sHandle({0}) {}
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	615a      	str	r2, [r3, #20]
		m_eGeneralCallMode(sInit.eGeneralCallMode),
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	691a      	ldr	r2, [r3, #16]
		m_sHandle({0}) {}
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	619a      	str	r2, [r3, #24]
		m_eNoStretchMode(sInit.eNoStretchMode),
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	695a      	ldr	r2, [r3, #20]
		m_sHandle({0}) {}
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	61da      	str	r2, [r3, #28]
		m_uOwnAddress1(sInit.uOwnAddress1),
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	8b1a      	ldrh	r2, [r3, #24]
		m_sHandle({0}) {}
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	841a      	strh	r2, [r3, #32]
		m_uOwnAddress2(sInit.uOwnAddress2),
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	8b5a      	ldrh	r2, [r3, #26]
		m_sHandle({0}) {}
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	845a      	strh	r2, [r3, #34]	; 0x22
		m_pSCL_GPIO(sInit.pSCL_GPIO),
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	69da      	ldr	r2, [r3, #28]
		m_sHandle({0}) {}
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
		m_uSCL_Pin(sInit.uSCL_Pin),
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	8c1a      	ldrh	r2, [r3, #32]
		m_sHandle({0}) {}
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	851a      	strh	r2, [r3, #40]	; 0x28
		m_uSCL_AF(sInit.uSCL_AF),
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		m_sHandle({0}) {}
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		m_pSDA_GPIO(sInit.pSDA_GPIO),
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		m_sHandle({0}) {}
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
		m_uSDA_Pin(sInit.uSDA_Pin),
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
		m_sHandle({0}) {}
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	861a      	strh	r2, [r3, #48]	; 0x30
		m_uSDA_AF(sInit.uSDA_AF),
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
		m_sHandle({0}) {}
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	221f      	movs	r2, #31
 8000e0c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2220      	movs	r2, #32
 8000e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3338      	adds	r3, #56	; 0x38
 8000e1c:	224c      	movs	r2, #76	; 0x4c
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f009 fcfd 	bl	800a820 <memset>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_ZN14QAT_Vector2_16C1Ett>:
	//Default constructor. Sets both X and Y components to zero
  QAT_Vector2_16() :
    val(0) {}

  //Constructor used to set individual X and Y components
  QAT_Vector2_16(uint16_t x, uint16_t y) :
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	803b      	strh	r3, [r7, #0]
    x(x), y(y) {}
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	883a      	ldrh	r2, [r7, #0]
 8000e4a:	805a      	strh	r2, [r3, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_ZN14QAT_Vector2_16C1ERKS_>:

  //Copy Constructor
  //Copies data as single 32bit value for performance reasons
  QAT_Vector2_16(const QAT_Vector2_16& other) :
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
    val(other.val) {}
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_ZN10QAD_FT6206C1Ev>:


	//------------
	//Constructors

	QAD_FT6206() :
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
	  m_cI2C(NULL),
		m_eInitState(QA_NotInitialized) {}
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2254      	movs	r2, #84	; 0x54
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2270      	movs	r2, #112	; 0x70
 8000e8c:	705a      	strb	r2, [r3, #1]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	22a8      	movs	r2, #168	; 0xa8
 8000e92:	709a      	strb	r2, [r3, #2]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	22a4      	movs	r2, #164	; 0xa4
 8000e98:	70da      	strb	r2, [r3, #3]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	711a      	strb	r2, [r3, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	715a      	strb	r2, [r3, #5]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2209      	movs	r2, #9
 8000eaa:	719a      	strb	r2, [r3, #6]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2211      	movs	r2, #17
 8000eb0:	71da      	strb	r2, [r3, #7]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	721a      	strb	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	725a      	strb	r2, [r3, #9]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	729a      	strb	r2, [r3, #10]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	72da      	strb	r2, [r3, #11]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f640 2228 	movw	r2, #2600	; 0xa28
 8000ed0:	819a      	strh	r2, [r3, #12]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	751a      	strb	r2, [r3, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_ZN10QAD_FT62063getEv>:


	//-----------------
	//Singleton Methods

	static QAD_FT6206& get(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
		static QAD_FT6206 instance;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <_ZN10QAD_FT62063getEv+0x48>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	f3bf 8f5b 	dmb	ish
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf0c      	ite	eq
 8000f02:	2301      	moveq	r3, #1
 8000f04:	2300      	movne	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d010      	beq.n	8000f2e <_ZN10QAD_FT62063getEv+0x42>
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <_ZN10QAD_FT62063getEv+0x48>)
 8000f0e:	f009 fbd2 	bl	800a6b6 <__cxa_guard_acquire>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf14      	ite	ne
 8000f18:	2301      	movne	r3, #1
 8000f1a:	2300      	moveq	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <_ZN10QAD_FT62063getEv+0x42>
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <_ZN10QAD_FT62063getEv+0x4c>)
 8000f24:	f7ff ffa9 	bl	8000e7a <_ZN10QAD_FT6206C1Ev>
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <_ZN10QAD_FT62063getEv+0x48>)
 8000f2a:	f009 fbd0 	bl	800a6ce <__cxa_guard_release>
		return instance;
 8000f2e:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <_ZN10QAD_FT62063getEv+0x4c>)
	}
 8000f30:	4618      	mov	r0, r3
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000194 	.word	0x20000194
 8000f38:	20000160 	.word	0x20000160

08000f3c <_ZN10QAD_FT62064initEP7QAD_I2C>:


	//----------------------
	//Initialization Methods

	static QA_Result init(QAD_I2C* cI2C) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
		return get().imp_init(cI2C);
 8000f44:	f7ff ffd2 	bl	8000eec <_ZN10QAD_FT62063getEv>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f005 fe58 	bl	8006c02 <_ZN10QAD_FT62068imp_initEP7QAD_I2C>
 8000f52:	4603      	mov	r3, r0
	}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_ZN10QAD_FT62064pollEm>:


	//------------------
	//Processing Methods

	static void poll(uint32_t uTicks) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
		get().imp_poll(uTicks);
 8000f64:	f7ff ffc2 	bl	8000eec <_ZN10QAD_FT62063getEv>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4610      	mov	r0, r2
 8000f70:	f005 fe6c 	bl	8006c4c <_ZN10QAD_FT62068imp_pollERm>
	}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_ZN10QAD_FT62066getNewEv>:

	static bool getEvent(void) {
		return get().m_uData_Event;
	}

	static bool getNew(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
		return get().m_uData_New;
 8000f80:	f7ff ffb4 	bl	8000eec <_ZN10QAD_FT62063getEv>
 8000f84:	4603      	mov	r3, r0
 8000f86:	7e5b      	ldrb	r3, [r3, #25]
	}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <_ZN10QAD_FT62066getEndEv>:

	static bool getEnd(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
		return get().m_uData_End;
 8000f90:	f7ff ffac 	bl	8000eec <_ZN10QAD_FT62063getEv>
 8000f94:	4603      	mov	r3, r0
 8000f96:	7e9b      	ldrb	r3, [r3, #26]
	}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_ZN10QAD_FT62067getDownEv>:

	static bool getDown(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
		return get().m_uData_CurDown;
 8000fa0:	f7ff ffa4 	bl	8000eec <_ZN10QAD_FT62063getEv>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	7d9b      	ldrb	r3, [r3, #22]
	}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_ZN10QAD_FT62067getLongEv>:

	static bool getLong(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
		return get().m_uData_Long;
 8000fb0:	f7ff ff9c 	bl	8000eec <_ZN10QAD_FT62063getEv>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	7edb      	ldrb	r3, [r3, #27]
	}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZN10QAD_FT62067getCurXEv>:

	static uint16_t getCurX(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
		return get().m_uData_CurX;
 8000fc0:	f7ff ff94 	bl	8000eec <_ZN10QAD_FT62063getEv>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_ZN10QAD_FT62067getCurYEv>:

	static uint16_t getCurY(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
		return get().m_uData_CurY;
 8000fd0:	f7ff ff8c 	bl	8000eec <_ZN10QAD_FT62063getEv>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
	}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_ZN10QAD_FT62068getMoveXEv>:

	static int16_t getMoveX(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
		return get().m_iData_MoveX;
 8000fe0:	f7ff ff84 	bl	8000eec <_ZN10QAD_FT62063getEv>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
	}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_ZN10QAD_FT62068getMoveYEv>:

	static int16_t getMoveY(void) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
		return get().m_iData_MoveY;
 8000ff2:	f7ff ff7b 	bl	8000eec <_ZN10QAD_FT62063getEv>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
	}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 800100c:	887a      	ldrh	r2, [r7, #2]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fde4 	bl	8001be0 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	887a      	ldrh	r2, [r7, #2]
 800101c:	809a      	strh	r2, [r3, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	80da      	strh	r2, [r3, #6]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	811a      	strh	r2, [r3, #8]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	4608      	mov	r0, r1
 800103e:	4611      	mov	r1, r2
 8001040:	461a      	mov	r2, r3
 8001042:	4603      	mov	r3, r0
 8001044:	817b      	strh	r3, [r7, #10]
 8001046:	460b      	mov	r3, r1
 8001048:	813b      	strh	r3, [r7, #8]
 800104a:	4613      	mov	r3, r2
 800104c:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3304      	adds	r3, #4
 8001058:	f107 020a 	add.w	r2, r7, #10
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fdda 	bl	8001c18 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3308      	adds	r3, #8
 8001068:	f107 0208 	add.w	r2, r7, #8
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fdd2 	bl	8001c18 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2200      	movs	r2, #0
 8001078:	731a      	strb	r2, [r3, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2200      	movs	r2, #0
 800107e:	735a      	strb	r2, [r3, #13]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2200      	movs	r2, #0
 8001084:	739a      	strb	r2, [r3, #14]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	79fa      	ldrb	r2, [r7, #7]
 800108a:	73da      	strb	r2, [r3, #15]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	0800b498 	.word	0x0800b498

0800109c <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	769a      	strb	r2, [r3, #26]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2225      	movs	r2, #37	; 0x25
 80010f8:	76da      	strb	r2, [r3, #27]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	331c      	adds	r3, #28
 80010fe:	2284      	movs	r2, #132	; 0x84
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f009 fb8c 	bl	800a820 <memset>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	8b99      	ldrh	r1, [r3, #28]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	8bda      	ldrh	r2, [r3, #30]
 8001138:	2300      	movs	r3, #0
 800113a:	f7ff ff7b 	bl	8001034 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	741a      	strb	r2, [r3, #16]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3314      	adds	r3, #20
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fd7a 	bl	8001c4e <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0800ea30 	.word	0x0800ea30

08001168 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 fd96 	bl	8001ca2 <_ZNSaIP12QAS_LCD_FontED1Ev>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fd79 	bl	8001c82 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ffeb 	bl	8001180 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_ZN15QAS_LCD_FontMgrC1Ev>:

	//--------------------------
	//Constructors / Destructors

	//Default constructor, which clears all data to default on class construction
	QAS_LCD_FontMgr() :
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
		m_iCurrentIdx(-1),
		m_pCurrent(NULL),
		m_pBuffer(NULL),
		m_uColor(0x0000) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ffeb 	bl	800119a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	22ff      	movs	r2, #255	; 0xff
 80011c8:	731a      	strb	r2, [r3, #12]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	831a      	strh	r2, [r3, #24]
		m_vFonts.clear();
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fd9f 	bl	8001d22 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
	}
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_ZN15QAS_LCD_FontMgrD1Ev>:

	//Class destructor which iterates through all fonts stored in m_vFonts vector and
	//deletes/deallocates them to prevent memory leaks when class is destroyed
	~QAS_LCD_FontMgr() {
 80011ee:	b590      	push	{r4, r7, lr}
 80011f0:	b085      	sub	sp, #20
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	7bfc      	ldrb	r4, [r7, #15]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fd9d 	bl	8001d3e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8001204:	4603      	mov	r3, r0
 8001206:	429c      	cmp	r4, r3
 8001208:	bf34      	ite	cc
 800120a:	2301      	movcc	r3, #1
 800120c:	2300      	movcs	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d011      	beq.n	8001238 <_ZN15QAS_LCD_FontMgrD1Ev+0x4a>
			delete m_vFonts[i];
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fd9f 	bl	8001d5e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8001220:	4603      	mov	r3, r0
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <_ZN15QAS_LCD_FontMgrD1Ev+0x42>
 8001228:	2140      	movs	r1, #64	; 0x40
 800122a:	4618      	mov	r0, r3
 800122c:	f009 fa41 	bl	800a6b2 <_ZdlPvj>
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	3301      	adds	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e7e0      	b.n	80011fa <_ZN15QAS_LCD_FontMgrD1Ev+0xc>
	~QAS_LCD_FontMgr() {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fd56 	bl	8001cec <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>
		}
	}
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	bd90      	pop	{r4, r7, pc}

0800124a <_ZN7QAS_LCDC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAS_LCD() :
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_pDrawBuffer(NULL),
		m_uDrawColor(0x0000) {}
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	811a      	strh	r2, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	330c      	adds	r3, #12
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ffa3 	bl	80011b4 <_ZN15QAS_LCD_FontMgrC1Ev>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZN7QAS_LCDD1Ev>:
class QAS_LCD {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	330c      	adds	r3, #12
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ffb2 	bl	80011ee <_ZN15QAS_LCD_FontMgrD1Ev>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <__tcf_0>:
  //-----------------
  //Singleton Methods
  //
  //Used to retrieve a reference to the singleton class
  static QAS_LCD& get() {
  	static QAS_LCD instance;
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
 8001298:	4801      	ldr	r0, [pc, #4]	; (80012a0 <__tcf_0+0xc>)
 800129a:	f7ff ffed 	bl	8001278 <_ZN7QAS_LCDD1Ev>
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000198 	.word	0x20000198

080012a4 <_ZN7QAS_LCD3getEv>:
  static QAS_LCD& get() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  	static QAS_LCD instance;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <_ZN7QAS_LCD3getEv+0x50>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	f3bf 8f5b 	dmb	ish
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf0c      	ite	eq
 80012ba:	2301      	moveq	r3, #1
 80012bc:	2300      	movne	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <_ZN7QAS_LCD3getEv+0x48>
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <_ZN7QAS_LCD3getEv+0x50>)
 80012c6:	f009 f9f6 	bl	800a6b6 <__cxa_guard_acquire>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf14      	ite	ne
 80012d0:	2301      	movne	r3, #1
 80012d2:	2300      	moveq	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d008      	beq.n	80012ec <_ZN7QAS_LCD3getEv+0x48>
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <_ZN7QAS_LCD3getEv+0x54>)
 80012dc:	f7ff ffb5 	bl	800124a <_ZN7QAS_LCDC1Ev>
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <_ZN7QAS_LCD3getEv+0x50>)
 80012e2:	f009 f9f4 	bl	800a6ce <__cxa_guard_release>
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <_ZN7QAS_LCD3getEv+0x58>)
 80012e8:	f009 fa31 	bl	800a74e <atexit>
  	return instance;
 80012ec:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <_ZN7QAS_LCD3getEv+0x54>)
  }
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200001c0 	.word	0x200001c0
 80012f8:	20000198 	.word	0x20000198
 80012fc:	08001295 	.word	0x08001295

08001300 <_ZN7QAS_LCD4initEv>:
	//----------------------
	//Initialization Methods

  //Used to initialize the LTDC peripheral and setup Font Manager class
  //Returns QA_OK if initialization successful, or QA_Fail if initialization fails
  static QA_Result init(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8001304:	f7ff ffce 	bl	80012a4 <_ZN7QAS_LCD3getEv>
 8001308:	4603      	mov	r3, r0
 800130a:	4618      	mov	r0, r3
 800130c:	f007 fe42 	bl	8008f94 <_ZN7QAS_LCD8imp_initEv>
 8001310:	4603      	mov	r3, r0
  }
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}

08001316 <_ZN7QAS_LCD10flipLayer0Ev>:
	//-----------------------
	//Rendering Setup Methods

  //Used to flip the front and back buffer for layer 0
  //See QAD_LTDC.hpp for more details
  static void flipLayer0(void) {
 8001316:	b580      	push	{r7, lr}
 8001318:	af00      	add	r7, sp, #0
  	get().imp_flipLayer0();
 800131a:	f7ff ffc3 	bl	80012a4 <_ZN7QAS_LCD3getEv>
 800131e:	4603      	mov	r3, r0
 8001320:	4618      	mov	r0, r3
 8001322:	f007 fe9d 	bl	8009060 <_ZN7QAS_LCD14imp_flipLayer0Ev>
  }
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}

0800132a <_ZN7QAS_LCD10flipLayer1Ev>:

  //Used to flip the front and back buffer for layer 1
  //See QAD_LTDC.hpp for more details
  static void flipLayer1(void) {
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  	get().imp_flipLayer1();
 800132e:	f7ff ffb9 	bl	80012a4 <_ZN7QAS_LCD3getEv>
 8001332:	4603      	mov	r3, r0
 8001334:	4618      	mov	r0, r3
 8001336:	f007 fe9d 	bl	8009074 <_ZN7QAS_LCD14imp_flipLayer1Ev>
  }
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}

0800133e <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>:

  //Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
  //eLayer - Sets whether the current draw buffer is layer 0 or layer 1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
  static void setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  	get().imp_setDrawBuffer(eLayer);
 8001348:	f7ff ffac 	bl	80012a4 <_ZN7QAS_LCD3getEv>
 800134c:	4602      	mov	r2, r0
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f007 fe98 	bl	8009088 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>
  }
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_ZN7QAS_LCD12setDrawColorEt>:

  //Used to set the current draw color
  //uColor - A 16bit ARGB4444 color value
  static void setDrawColor(uint16_t uColor) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
  	get().imp_setDrawColor(uColor);
 800136a:	f7ff ff9b 	bl	80012a4 <_ZN7QAS_LCD3getEv>
 800136e:	4602      	mov	r2, r0
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	4619      	mov	r1, r3
 8001374:	4610      	mov	r0, r2
 8001376:	f007 feac 	bl	80090d2 <_ZN7QAS_LCD16imp_setDrawColorEt>
  }
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_ZN7QAS_LCD11clearBufferEv>:

	//-----------------
	//Rendering Methods

  //Used to clear the currently selected draw buffer to the currently selected draw color
  static void clearBuffer(void) {
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  	get().imp_clearBuffer();
 8001386:	f7ff ff8d 	bl	80012a4 <_ZN7QAS_LCD3getEv>
 800138a:	4603      	mov	r3, r0
 800138c:	4618      	mov	r0, r3
 800138e:	f007 feb7 	bl	8009100 <_ZN7QAS_LCD15imp_clearBufferEv>
  }
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}

08001396 <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>:
  }

  //Used to draw a non-filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
  static void drawRect(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
  	get().imp_drawRect(cStart, cEnd);
 80013a0:	f7ff ff80 	bl	80012a4 <_ZN7QAS_LCD3getEv>
 80013a4:	4603      	mov	r3, r0
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f007 fec8 	bl	8009140 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>
  }
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>:

  //Used to draw a filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
  static void drawRectFill(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  	get().imp_drawRectFill(cStart, cEnd);
 80013c2:	f7ff ff6f 	bl	80012a4 <_ZN7QAS_LCD3getEv>
 80013c6:	4603      	mov	r3, r0
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f007 ff45 	bl	800925c <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>
  }
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_ZN7QAS_LCD13setFontByNameEPKc>:
	//Font Rendering Methods

  //Used to set the selected font/typeface to be used for text rendering
  //strName - A C-style string containing the name of the font to be selected. This must match one of the
  //          fonts stored in the font manager, otherwise no font will be selected
  static void setFontByName(const char* strName) {
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  	get().m_cFontMgr.setFontByName(strName);
 80013e2:	f7ff ff5f 	bl	80012a4 <_ZN7QAS_LCD3getEv>
 80013e6:	4603      	mov	r3, r0
 80013e8:	330c      	adds	r3, #12
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f008 f857 	bl	80094a0 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>
  }
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_ZN7QAS_LCD14setFontByIndexEh>:

  //Used to set the selected font/typeface to be used for text rendering
  //uIdx - The index of the fond to be selected, based on the array of fonts stored in the font manager
  static void setFontByIndex(uint8_t uIdx) {
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
  	get().m_cFontMgr.setFontByIndex(uIdx);
 8001404:	f7ff ff4e 	bl	80012a4 <_ZN7QAS_LCD3getEv>
 8001408:	4603      	mov	r3, r0
 800140a:	330c      	adds	r3, #12
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f008 f86c 	bl	80094ee <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>
  }
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>:

  //Used to draw a center-aligned string of characters using the currently selected font/typeface
  //String will be drawn to currently selected draw buffer with currently selected draw color
  //cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
  //str  - The C-style string to be drawn
  static void drawStrC(QAT_Vector2_16 cPos, const char* str) {
 800141e:	b590      	push	{r4, r7, lr}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  	get().m_cFontMgr.drawStrC(cPos, str);
 8001428:	f7ff ff3c 	bl	80012a4 <_ZN7QAS_LCD3getEv>
 800142c:	4603      	mov	r3, r0
 800142e:	f103 040c 	add.w	r4, r3, #12
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fd0e 	bl	8000e5a <_ZN14QAT_Vector2_16C1ERKS_>
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	4620      	mov	r0, r4
 8001448:	f008 f94b 	bl	80096e2 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>
  }
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bd90      	pop	{r4, r7, pc}

08001454 <main>:
//main
//Application Entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f769nihx.s
int main(void) {
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b0e7      	sub	sp, #412	; 0x19c
 8001458:	af02      	add	r7, sp, #8
  //System Initialization

	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method
	if (SystemInitialize()) {
 800145a:	f7ff f965 	bl	8000728 <_Z16SystemInitializev>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d000      	beq.n	8001470 <main+0x1c>
	  while (1) {}
 800146e:	e7fe      	b.n	800146e <main+0x1a>


	//----------------------------------
	//Initialize the User LEDs using the QAD_GPIO_Output driver class.
	//QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PORT, QAD_USER_LED_RED_GPIO_PIN and QAD_USERLED_GREEN_GPIO_PIN are defined in setup.hpp
  GPIO_UserLED_Red   = new QAD_GPIO_Output(QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_RED_GPIO_PIN);
 8001470:	2014      	movs	r0, #20
 8001472:	f009 f92f 	bl	800a6d4 <_Znwj>
 8001476:	4603      	mov	r3, r0
 8001478:	461c      	mov	r4, r3
 800147a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147e:	49bf      	ldr	r1, [pc, #764]	; (800177c <main+0x328>)
 8001480:	4620      	mov	r0, r4
 8001482:	f005 fef7 	bl	8007274 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8001486:	4bbe      	ldr	r3, [pc, #760]	; (8001780 <main+0x32c>)
 8001488:	601c      	str	r4, [r3, #0]
  GPIO_UserLED_Green = new QAD_GPIO_Output(QAD_USERLED_GREEN_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PIN);
 800148a:	2014      	movs	r0, #20
 800148c:	f009 f922 	bl	800a6d4 <_Znwj>
 8001490:	4603      	mov	r3, r0
 8001492:	461c      	mov	r4, r3
 8001494:	2220      	movs	r2, #32
 8001496:	49b9      	ldr	r1, [pc, #740]	; (800177c <main+0x328>)
 8001498:	4620      	mov	r0, r4
 800149a:	f005 feeb 	bl	8007274 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 800149e:	4bb9      	ldr	r3, [pc, #740]	; (8001784 <main+0x330>)
 80014a0:	601c      	str	r4, [r3, #0]


	//----------------------------------
  //Initialize the User Button using the QAD_GPIO_Input driver class.
  //QAD_USERBUTTON_GPIO_PORT and QAD_USERBUTTON_GPIO_PIN are defined in setup.hpp
  GPIO_UserButton = new QAD_GPIO_Input(QAD_USERBUTTON_GPIO_PORT, QAD_USERBUTTON_GPIO_PIN);
 80014a2:	2010      	movs	r0, #16
 80014a4:	f009 f916 	bl	800a6d4 <_Znwj>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461c      	mov	r4, r3
 80014ac:	2201      	movs	r2, #1
 80014ae:	49b6      	ldr	r1, [pc, #728]	; (8001788 <main+0x334>)
 80014b0:	4620      	mov	r0, r4
 80014b2:	f005 ff65 	bl	8007380 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>
 80014b6:	4bb5      	ldr	r3, [pc, #724]	; (800178c <main+0x338>)
 80014b8:	601c      	str	r4, [r3, #0]
  //Initialize UART1, which is used to communicate over serial via the STLINK connection
  //Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

  //Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
  sSerialInit.sUART_Init.baudrate    = QAD_UART1_BAUDRATE;
 80014c0:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80014c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART1;
 80014c8:	2309      	movs	r3, #9
 80014ca:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
  sSerialInit.sUART_Init.txgpio      = QAD_UART1_TX_PORT;
 80014ce:	4bae      	ldr	r3, [pc, #696]	; (8001788 <main+0x334>)
 80014d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  sSerialInit.sUART_Init.txpin       = QAD_UART1_TX_PIN;
 80014d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d8:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
  sSerialInit.sUART_Init.txaf        = QAD_UART1_TX_AF;
 80014dc:	2307      	movs	r3, #7
 80014de:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
  sSerialInit.sUART_Init.rxgpio      = QAD_UART1_RX_PORT;
 80014e2:	4ba9      	ldr	r3, [pc, #676]	; (8001788 <main+0x334>)
 80014e4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  sSerialInit.sUART_Init.rxpin       = QAD_UART1_RX_PIN;
 80014e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ec:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
  sSerialInit.sUART_Init.rxaf        = QAD_UART1_RX_AF;
 80014f0:	2307      	movs	r3, #7
 80014f2:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
  sSerialInit.uTXFIFO_Size           = QAD_UART1_TX_FIFOSIZE;
 80014f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fa:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
  sSerialInit.uRXFIFO_Size           = QAD_UART1_RX_FIFOSIZE;
 80014fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001502:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 8001506:	2018      	movs	r0, #24
 8001508:	f009 f8e4 	bl	800a6d4 <_Znwj>
 800150c:	4603      	mov	r3, r0
 800150e:	461c      	mov	r4, r3
 8001510:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001514:	4619      	mov	r1, r3
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff fe04 	bl	8001124 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 800151c:	4b9c      	ldr	r3, [pc, #624]	; (8001790 <main+0x33c>)
 800151e:	601c      	str	r4, [r3, #0]

  //If initialization failed the turn on User LED and enter infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 8001520:	4b9b      	ldr	r3, [pc, #620]	; (8001790 <main+0x33c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f008 fdbd 	bl	800a0a6 <_ZN19QAS_Serial_Dev_Base4initEPv>
 800152c:	4603      	mov	r3, r0
 800152e:	2b01      	cmp	r3, #1
 8001530:	bf0c      	ite	eq
 8001532:	2301      	moveq	r3, #1
 8001534:	2300      	movne	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <main+0xf4>
  	GPIO_UserLED_Red->on();
 800153c:	4b90      	ldr	r3, [pc, #576]	; (8001780 <main+0x32c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f005 feb8 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8001546:	e7fe      	b.n	8001546 <main+0xf2>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8001548:	4b91      	ldr	r3, [pc, #580]	; (8001790 <main+0x33c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f008 fe38 	bl	800a1c2 <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F769I Discovery Booting...");
 8001552:	4b8f      	ldr	r3, [pc, #572]	; (8001790 <main+0x33c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	498f      	ldr	r1, [pc, #572]	; (8001794 <main+0x340>)
 8001558:	4618      	mov	r0, r3
 800155a:	f008 fdfe 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>



	//----------------------------------
  //Initialize FMC / SDRAM driver using the QAD_FMC singleton driver class
  if (QAD_FMC::init() == QA_OK) {
 800155e:	f7ff fb55 	bl	8000c0c <_ZN7QAD_FMC4initEv>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf0c      	ite	eq
 8001568:	2301      	moveq	r3, #1
 800156a:	2300      	movne	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d02c      	beq.n	80015cc <main+0x178>

  	//If initialization passed then output message via serial
    UART_STLink->txStringCR("SDRAM: Initialized");
 8001572:	4b87      	ldr	r3, [pc, #540]	; (8001790 <main+0x33c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4988      	ldr	r1, [pc, #544]	; (8001798 <main+0x344>)
 8001578:	4618      	mov	r0, r3
 800157a:	f008 fdee 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

    //Test SDRAM to confirm correct operation
  	if (QAD_FMC::test() == QA_OK) {
 800157e:	f7ff fb50 	bl	8000c22 <_ZN7QAD_FMC4testEv>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d010      	beq.n	80015b4 <main+0x160>

  		//If SDRAM test passed then output message via serial
  		UART_STLink->txStringCR("SDRAM: Test Passed");
 8001592:	4b7f      	ldr	r3, [pc, #508]	; (8001790 <main+0x33c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4981      	ldr	r1, [pc, #516]	; (800179c <main+0x348>)
 8001598:	4618      	mov	r0, r3
 800159a:	f008 fdde 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


	//----------------------------------
  //Initialize LCD using QAS_LCD singleton class.
  //This will also initialize LTDC and DSI peripherals, and also initialize otm8009a display controller
  if (QAS_LCD::init()) {
 800159e:	f7ff feaf 	bl	8001300 <_ZN7QAS_LCD4initEv>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf14      	ite	ne
 80015a8:	2301      	movne	r3, #1
 80015aa:	2300      	moveq	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d01e      	beq.n	80015f0 <main+0x19c>
 80015b2:	e017      	b.n	80015e4 <main+0x190>
  		UART_STLink->txStringCR("SDRAM: Test Failed");
 80015b4:	4b76      	ldr	r3, [pc, #472]	; (8001790 <main+0x33c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4979      	ldr	r1, [pc, #484]	; (80017a0 <main+0x34c>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f008 fdcd 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  		GPIO_UserLED_Red->on();
 80015c0:	4b6f      	ldr	r3, [pc, #444]	; (8001780 <main+0x32c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f005 fe76 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
  		while(1) {}
 80015ca:	e7fe      	b.n	80015ca <main+0x176>
    UART_STLink->txStringCR("SDRAM: Initialization failed");
 80015cc:	4b70      	ldr	r3, [pc, #448]	; (8001790 <main+0x33c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4974      	ldr	r1, [pc, #464]	; (80017a4 <main+0x350>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f008 fdc1 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
    GPIO_UserLED_Red->on();
 80015d8:	4b69      	ldr	r3, [pc, #420]	; (8001780 <main+0x32c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f005 fe6a 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 80015e2:	e7fe      	b.n	80015e2 <main+0x18e>
  	UART_STLink->txStringCR("LCD: Initialization failed");
 80015e4:	4b6a      	ldr	r3, [pc, #424]	; (8001790 <main+0x33c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	496f      	ldr	r1, [pc, #444]	; (80017a8 <main+0x354>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f008 fdb5 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  }
  UART_STLink->txStringCR("LCD: Initialized");
 80015f0:	4b67      	ldr	r3, [pc, #412]	; (8001790 <main+0x33c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	496d      	ldr	r1, [pc, #436]	; (80017ac <main+0x358>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f008 fdaf 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //Test rendering methods to confirm LCD and rendering subsystem are working correctly

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer0);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fe9e 	bl	800133e <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0xFFFF);
 8001602:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001606:	f7ff feab 	bl	8001360 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 800160a:	f7ff feba 	bl	8001382 <_ZN7QAS_LCD11clearBufferEv>

  //Shapes
  QAS_LCD::setDrawColor(0xF003);
 800160e:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001612:	f7ff fea5 	bl	8001360 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRectFill(QAT_Vector2_16(40, 40), QAT_Vector2_16(760, 440));
 8001616:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800161a:	2228      	movs	r2, #40	; 0x28
 800161c:	2128      	movs	r1, #40	; 0x28
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fc06 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001624:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001628:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800162c:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fbfd 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001636:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800163a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff feb9 	bl	80013b8 <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawColor(0xFFFF);
 8001646:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800164a:	f7ff fe89 	bl	8001360 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRect(QAT_Vector2_16(50, 50), QAT_Vector2_16(750, 430));
 800164e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001652:	2232      	movs	r2, #50	; 0x32
 8001654:	2132      	movs	r1, #50	; 0x32
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fbea 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 800165c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001660:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8001664:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fbe1 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 800166e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001672:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fe8c 	bl	8001396 <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer1);
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff fe5d 	bl	800133e <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0x0000);
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fe6b 	bl	8001360 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 800168a:	f7ff fe7a 	bl	8001382 <_ZN7QAS_LCD11clearBufferEv>

  QAS_LCD::setDrawColor(0xFBFB);
 800168e:	f64f 30fb 	movw	r0, #64507	; 0xfbfb
 8001692:	f7ff fe65 	bl	8001360 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::setFontByName("SegoeUI12pt");
 8001696:	4846      	ldr	r0, [pc, #280]	; (80017b0 <main+0x35c>)
 8001698:	f7ff fe9f 	bl	80013da <_ZN7QAS_LCD13setFontByNameEPKc>
  //QAS_LCD::setFontByIndex(0);
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 150), "Hello World!");
 800169c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80016a0:	2296      	movs	r2, #150	; 0x96
 80016a2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fbc2 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 80016ac:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80016b0:	4940      	ldr	r1, [pc, #256]	; (80017b4 <main+0x360>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff feb3 	bl	800141e <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::setDrawColor(0xFBBF);
 80016b8:	f64f 30bf 	movw	r0, #64447	; 0xfbbf
 80016bc:	f7ff fe50 	bl	8001360 <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("SegoeUI20ptSB");
  QAS_LCD::setFontByIndex(1);
 80016c0:	2001      	movs	r0, #1
 80016c2:	f7ff fe9a 	bl	80013fa <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 250), "Welcome to 1s and 0s");
 80016c6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80016ca:	22fa      	movs	r2, #250	; 0xfa
 80016cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fbad 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 80016d6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80016da:	4937      	ldr	r1, [pc, #220]	; (80017b8 <main+0x364>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fe9e 	bl	800141e <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::setDrawColor(0xFFBB);
 80016e2:	f64f 70bb 	movw	r0, #65467	; 0xffbb
 80016e6:	f7ff fe3b 	bl	8001360 <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("ShowcardGothic18pt");
  QAS_LCD::setFontByIndex(2);
 80016ea:	2002      	movs	r0, #2
 80016ec:	f7ff fe85 	bl	80013fa <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 350), "Test Font");
 80016f0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80016f4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80016f8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb97 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001702:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001706:	492d      	ldr	r1, [pc, #180]	; (80017bc <main+0x368>)
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fe88 	bl	800141e <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::flipLayer0();
 800170e:	f7ff fe02 	bl	8001316 <_ZN7QAS_LCD10flipLayer0Ev>
  QAS_LCD::flipLayer1();
 8001712:	f7ff fe0a 	bl	800132a <_ZN7QAS_LCD10flipLayer1Ev>


  //---------------
  //Init RNG Driver
  if (QAD_RNG::init()) {
 8001716:	f7ff facd 	bl	8000cb4 <_ZN7QAD_RNG4initEv>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf14      	ite	ne
 8001720:	2301      	movne	r3, #1
 8001722:	2300      	moveq	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <main+0x2ee>
  	UART_STLink->txStringCR("RNG: Initialization Failed");
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <main+0x33c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4924      	ldr	r1, [pc, #144]	; (80017c0 <main+0x36c>)
 8001730:	4618      	mov	r0, r3
 8001732:	f008 fd12 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <main+0x32c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f005 fdbb 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8001740:	e7fe      	b.n	8001740 <main+0x2ec>
  }
  UART_STLink->txString("RNG: Initialized");
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <main+0x33c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	491f      	ldr	r1, [pc, #124]	; (80017c4 <main+0x370>)
 8001748:	4618      	mov	r0, r3
 800174a:	f008 fcdc 	bl	800a106 <_ZN19QAS_Serial_Dev_Base8txStringEPKc>


  //---------------
  //Init RTC Driver
  if (QAD_RTC::init()) {
 800174e:	f7ff faf7 	bl	8000d40 <_ZN7QAD_RTC4initEv>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d034      	beq.n	80017cc <main+0x378>
  	UART_STLink->txStringCR("RTC: Initialization Failed");
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <main+0x33c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4918      	ldr	r1, [pc, #96]	; (80017c8 <main+0x374>)
 8001768:	4618      	mov	r0, r3
 800176a:	f008 fcf6 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <main+0x32c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f005 fd9f 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8001778:	e7fe      	b.n	8001778 <main+0x324>
 800177a:	bf00      	nop
 800177c:	40022400 	.word	0x40022400
 8001780:	200001c4 	.word	0x200001c4
 8001784:	200001c8 	.word	0x200001c8
 8001788:	40020000 	.word	0x40020000
 800178c:	200001cc 	.word	0x200001cc
 8001790:	200001d0 	.word	0x200001d0
 8001794:	0800b1b4 	.word	0x0800b1b4
 8001798:	0800b1d4 	.word	0x0800b1d4
 800179c:	0800b1e8 	.word	0x0800b1e8
 80017a0:	0800b1fc 	.word	0x0800b1fc
 80017a4:	0800b210 	.word	0x0800b210
 80017a8:	0800b230 	.word	0x0800b230
 80017ac:	0800b24c 	.word	0x0800b24c
 80017b0:	0800b260 	.word	0x0800b260
 80017b4:	0800b26c 	.word	0x0800b26c
 80017b8:	0800b27c 	.word	0x0800b27c
 80017bc:	0800b294 	.word	0x0800b294
 80017c0:	0800b2a0 	.word	0x0800b2a0
 80017c4:	0800b2bc 	.word	0x0800b2bc
 80017c8:	0800b2d0 	.word	0x0800b2d0
  }
  UART_STLink->txString("RTC: Initialized");
 80017cc:	4bd1      	ldr	r3, [pc, #836]	; (8001b14 <main+0x6c0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	49d1      	ldr	r1, [pc, #836]	; (8001b18 <main+0x6c4>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f008 fc97 	bl	800a106 <_ZN19QAS_Serial_Dev_Base8txStringEPKc>


  //---------------------
  //Initialize System I2C
  QAD_I2C_InitStruct I2C_Init;
  I2C_Init.eI2C                = QAD_I2C4;
 80017d8:	2303      	movs	r3, #3
 80017da:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
  I2C_Init.uIRQPriority_Event  = 0xE;
 80017de:	230e      	movs	r3, #14
 80017e0:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
  I2C_Init.uIRQPriority_Error  = 0xE;
 80017e4:	230e      	movs	r3, #14
 80017e6:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
  I2C_Init.uTiming             = 40912732;
 80017ea:	4bcc      	ldr	r3, [pc, #816]	; (8001b1c <main+0x6c8>)
 80017ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  I2C_Init.eAddressingMode     = QAD_I2C_AddressingMode_7Bit;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  I2C_Init.eDualAddressingMode = QAD_I2C_DualAddressingMode_Disable;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  I2C_Init.eGeneralCallMode    = QAD_I2C_GeneralCallMode_Disable;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  I2C_Init.eNoStretchMode      = QAD_I2C_NoStretchMode_Disable;
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  I2C_Init.uOwnAddress1        = 0x0;
 8001808:	2300      	movs	r3, #0
 800180a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  I2C_Init.uOwnAddress2        = 0x0;
 800180e:	2300      	movs	r3, #0
 8001810:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  I2C_Init.pSCL_GPIO           = GPIOD;
 8001814:	4bc2      	ldr	r3, [pc, #776]	; (8001b20 <main+0x6cc>)
 8001816:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  I2C_Init.uSCL_Pin            = GPIO_PIN_12;
 800181a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181e:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
  I2C_Init.uSCL_AF             = GPIO_AF4_I2C4;
 8001822:	2304      	movs	r3, #4
 8001824:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
  I2C_Init.pSDA_GPIO           = GPIOB;
 8001828:	4bbe      	ldr	r3, [pc, #760]	; (8001b24 <main+0x6d0>)
 800182a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  I2C_Init.uSDA_Pin            = GPIO_PIN_7;
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
  I2C_Init.uSDA_AF             = GPIO_AF11_I2C4;
 8001834:	230b      	movs	r3, #11
 8001836:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
  I2C_System = new QAD_I2C(I2C_Init);
 800183a:	2084      	movs	r0, #132	; 0x84
 800183c:	f008 ff4a 	bl	800a6d4 <_Znwj>
 8001840:	4603      	mov	r3, r0
 8001842:	461c      	mov	r4, r3
 8001844:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001848:	4619      	mov	r1, r3
 800184a:	4620      	mov	r0, r4
 800184c:	f7ff fa83 	bl	8000d56 <_ZN7QAD_I2CC1ER18QAD_I2C_InitStruct>
 8001850:	4bb5      	ldr	r3, [pc, #724]	; (8001b28 <main+0x6d4>)
 8001852:	601c      	str	r4, [r3, #0]

  if (I2C_System->init()) {
 8001854:	4bb4      	ldr	r3, [pc, #720]	; (8001b28 <main+0x6d4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f005 feb8 	bl	80075ce <_ZN7QAD_I2C4initEv>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf14      	ite	ne
 8001864:	2301      	movne	r3, #1
 8001866:	2300      	moveq	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <main+0x432>
  	UART_STLink->txStringCR("System I2C: Initialization Failed");
 800186e:	4ba9      	ldr	r3, [pc, #676]	; (8001b14 <main+0x6c0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	49ae      	ldr	r1, [pc, #696]	; (8001b2c <main+0x6d8>)
 8001874:	4618      	mov	r0, r3
 8001876:	f008 fc70 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 800187a:	4bad      	ldr	r3, [pc, #692]	; (8001b30 <main+0x6dc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f005 fd19 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8001884:	e7fe      	b.n	8001884 <main+0x430>
  }
  I2C_System->start();
 8001886:	4ba8      	ldr	r3, [pc, #672]	; (8001b28 <main+0x6d4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f005 feca 	bl	8007624 <_ZN7QAD_I2C5startEv>
  UART_STLink->txStringCR("System I2C: Initialized and Started");
 8001890:	4ba0      	ldr	r3, [pc, #640]	; (8001b14 <main+0x6c0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	49a7      	ldr	r1, [pc, #668]	; (8001b34 <main+0x6e0>)
 8001896:	4618      	mov	r0, r3
 8001898:	f008 fc5f 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  //----------------------------------
  //Initialize FT6206 Touch Controller
  if (QAD_FT6206::init(I2C_System)) {
 800189c:	4ba2      	ldr	r3, [pc, #648]	; (8001b28 <main+0x6d4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fb4b 	bl	8000f3c <_ZN10QAD_FT62064initEP7QAD_I2C>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf14      	ite	ne
 80018ac:	2301      	movne	r3, #1
 80018ae:	2300      	moveq	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <main+0x47a>
  	UART_STLink->txStringCR("FT6206: Initialization Failed");
 80018b6:	4b97      	ldr	r3, [pc, #604]	; (8001b14 <main+0x6c0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	499f      	ldr	r1, [pc, #636]	; (8001b38 <main+0x6e4>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f008 fc4c 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 80018c2:	4b9b      	ldr	r3, [pc, #620]	; (8001b30 <main+0x6dc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f005 fcf5 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 80018cc:	e7fe      	b.n	80018cc <main+0x478>
  }
  UART_STLink->txStringCR("FT6206: Initialized");
 80018ce:	4b91      	ldr	r3, [pc, #580]	; (8001b14 <main+0x6c0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	499a      	ldr	r1, [pc, #616]	; (8001b3c <main+0x6e8>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f008 fc40 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  //Processing Loop

  //Create processing loop timing variables
  uint32_t uTicks;
  uint32_t uCurTick;
  uint32_t uNewTick = HAL_GetTick();
 80018da:	f001 f80d 	bl	80028f8 <HAL_GetTick>
 80018de:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
  uint32_t uOldTick = uNewTick;
 80018e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80018e6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

  //Create task timing variables
  uint32_t uTouchUpdateTicks = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  uint32_t uHeartbeatTicks = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

  	//----------------------------------
  	//Frame Timing
  	//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
  	//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 80018f6:	f000 ffff 	bl	80028f8 <HAL_GetTick>
 80018fa:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 80018fe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001902:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001906:	429a      	cmp	r2, r3
 8001908:	d01e      	beq.n	8001948 <main+0x4f4>
    	uOldTick = uNewTick;
 800190a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800190e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    	uNewTick = uCurTick;
 8001912:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001916:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 800191a:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800191e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001922:	429a      	cmp	r2, r3
 8001924:	d208      	bcs.n	8001938 <main+0x4e4>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8001926:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800192a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	3b01      	subs	r3, #1
 8001932:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001936:	e00a      	b.n	800194e <main+0x4fa>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8001938:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800193c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001946:	e002      	b.n	800194e <main+0x4fa>
    	}

    } else {
    	uTicks = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    }


  	//----------------------------------
    //Update Touch Data
    uTouchUpdateTicks += uTicks;
 800194e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001952:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001956:	4413      	add	r3, r2
 8001958:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    if (uTouchUpdateTicks >= QA_FT_TouchUpdateTickThreshold) {
 800195c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001960:	2b63      	cmp	r3, #99	; 0x63
 8001962:	f240 811c 	bls.w	8001b9e <main+0x74a>
      QAD_FT6206::poll(uTouchUpdateTicks);
 8001966:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 800196a:	f7ff faf7 	bl	8000f5c <_ZN10QAD_FT62064pollEm>

    	uint16_t uX = QAD_FT6206::getCurX();
 800196e:	f7ff fb25 	bl	8000fbc <_ZN10QAD_FT62067getCurXEv>
 8001972:	4603      	mov	r3, r0
 8001974:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
    	uint16_t uY = QAD_FT6206::getCurY();
 8001978:	f7ff fb28 	bl	8000fcc <_ZN10QAD_FT62067getCurYEv>
 800197c:	4603      	mov	r3, r0
 800197e:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
    	int16_t iX = QAD_FT6206::getMoveX();
 8001982:	f7ff fb2b 	bl	8000fdc <_ZN10QAD_FT62068getMoveXEv>
 8001986:	4603      	mov	r3, r0
 8001988:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
    	int16_t iY = QAD_FT6206::getMoveY();
 800198c:	f7ff fb2f 	bl	8000fee <_ZN10QAD_FT62068getMoveYEv>
 8001990:	4603      	mov	r3, r0
 8001992:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170


      if (uX < 80)
 8001996:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 800199a:	2b4f      	cmp	r3, #79	; 0x4f
 800199c:	d803      	bhi.n	80019a6 <main+0x552>
      	uX = 80; else
 800199e:	2350      	movs	r3, #80	; 0x50
 80019a0:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
 80019a4:	e008      	b.n	80019b8 <main+0x564>
      if (uX > 719)
 80019a6:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 80019aa:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80019ae:	d303      	bcc.n	80019b8 <main+0x564>
      	uX = 719;
 80019b0:	f240 23cf 	movw	r3, #719	; 0x2cf
 80019b4:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e

      if (uY < 80)
 80019b8:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 80019bc:	2b4f      	cmp	r3, #79	; 0x4f
 80019be:	d803      	bhi.n	80019c8 <main+0x574>
      	uY = 80; else
 80019c0:	2350      	movs	r3, #80	; 0x50
 80019c2:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
 80019c6:	e008      	b.n	80019da <main+0x586>
      if (uY > 399)
 80019c8:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 80019cc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80019d0:	d303      	bcc.n	80019da <main+0x586>
      	uY = 399;
 80019d2:	f240 138f 	movw	r3, #399	; 0x18f
 80019d6:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c

      QAS_LCD::setDrawBuffer(QAD_LTDC_Layer0);
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fcaf 	bl	800133e <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
      QAS_LCD::setDrawColor(0xF000);
 80019e0:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80019e4:	f7ff fcbc 	bl	8001360 <_ZN7QAS_LCD12setDrawColorEt>
      QAS_LCD::clearBuffer();
 80019e8:	f7ff fccb 	bl	8001382 <_ZN7QAS_LCD11clearBufferEv>

      QAS_LCD::setDrawBuffer(QAD_LTDC_Layer1);
 80019ec:	2001      	movs	r0, #1
 80019ee:	f7ff fca6 	bl	800133e <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
      QAS_LCD::setDrawColor(0x0000);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff fcb4 	bl	8001360 <_ZN7QAS_LCD12setDrawColorEt>
      QAS_LCD::clearBuffer();
 80019f8:	f7ff fcc3 	bl	8001382 <_ZN7QAS_LCD11clearBufferEv>

      if (QAD_FT6206::getDown() || QAD_FT6206::getEnd()) {
 80019fc:	f7ff face 	bl	8000f9c <_ZN10QAD_FT62067getDownEv>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d104      	bne.n	8001a10 <main+0x5bc>
 8001a06:	f7ff fac1 	bl	8000f8c <_ZN10QAD_FT62066getEndEv>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <main+0x5c0>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <main+0x5c2>
 8001a14:	2300      	movs	r3, #0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d025      	beq.n	8001a66 <main+0x612>
				QAS_LCD::setDrawColor(0xFFFF);
 8001a1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a1e:	f7ff fc9f 	bl	8001360 <_ZN7QAS_LCD12setDrawColorEt>
				QAS_LCD::drawRect(QAT_Vector2_16(uX-80, uY-80), QAT_Vector2_16(uX+80, uY+80));
 8001a22:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8001a26:	3b50      	subs	r3, #80	; 0x50
 8001a28:	b299      	uxth	r1, r3
 8001a2a:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8001a2e:	3b50      	subs	r3, #80	; 0x50
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f9fa 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001a3c:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8001a40:	3350      	adds	r3, #80	; 0x50
 8001a42:	b299      	uxth	r1, r3
 8001a44:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8001a48:	3350      	adds	r3, #80	; 0x50
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff f9ed 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001a56:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8001a5a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fc98 	bl	8001396 <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>
      }

      QAS_LCD::flipLayer0();
 8001a66:	f7ff fc56 	bl	8001316 <_ZN7QAS_LCD10flipLayer0Ev>
      QAS_LCD::flipLayer1();
 8001a6a:	f7ff fc5e 	bl	800132a <_ZN7QAS_LCD10flipLayer1Ev>

  		if (QAD_FT6206::getNew()) {
 8001a6e:	f7ff fa85 	bl	8000f7c <_ZN10QAD_FT62066getNewEv>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d010      	beq.n	8001a9a <main+0x646>
    		sprintf(strOut, "FT6206: Touch Start (X: %u, Y: %u", uX, uY);
 8001a78:	f8b7 217e 	ldrh.w	r2, [r7, #382]	; 0x17e
 8001a7c:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8001a80:	4638      	mov	r0, r7
 8001a82:	492f      	ldr	r1, [pc, #188]	; (8001b40 <main+0x6ec>)
 8001a84:	f008 ffd2 	bl	800aa2c <siprintf>
    		UART_STLink->txStringCR(strOut);
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <main+0x6c0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	463b      	mov	r3, r7
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f008 fb61 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
 8001a98:	e07c      	b.n	8001b94 <main+0x740>

  		} else if (QAD_FT6206::getEnd()) {
 8001a9a:	f7ff fa77 	bl	8000f8c <_ZN10QAD_FT62066getEndEv>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d018      	beq.n	8001ad6 <main+0x682>
    		sprintf(strOut, "FT6206: Touch End (X: %u, Y: %u, MX: %i, MY: %i", uX, uY, iX, iY);
 8001aa4:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 8001aa8:	f8b7 417c 	ldrh.w	r4, [r7, #380]	; 0x17c
 8001aac:	f9b7 3172 	ldrsh.w	r3, [r7, #370]	; 0x172
 8001ab0:	f9b7 2170 	ldrsh.w	r2, [r7, #368]	; 0x170
 8001ab4:	4638      	mov	r0, r7
 8001ab6:	9201      	str	r2, [sp, #4]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	4623      	mov	r3, r4
 8001abc:	460a      	mov	r2, r1
 8001abe:	4921      	ldr	r1, [pc, #132]	; (8001b44 <main+0x6f0>)
 8001ac0:	f008 ffb4 	bl	800aa2c <siprintf>
    		UART_STLink->txStringCR(strOut);
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <main+0x6c0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	463b      	mov	r3, r7
 8001acc:	4619      	mov	r1, r3
 8001ace:	4610      	mov	r0, r2
 8001ad0:	f008 fb43 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
 8001ad4:	e05e      	b.n	8001b94 <main+0x740>

  		}	else if (QAD_FT6206::getLong()) {
 8001ad6:	f7ff fa69 	bl	8000fac <_ZN10QAD_FT62067getLongEv>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d035      	beq.n	8001b4c <main+0x6f8>
    		sprintf(strOut, "FT6206: Long Touch (X: %u, Y: %u, MX: %i, MY: %i", uX, uY, iX, iY);
 8001ae0:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 8001ae4:	f8b7 417c 	ldrh.w	r4, [r7, #380]	; 0x17c
 8001ae8:	f9b7 3172 	ldrsh.w	r3, [r7, #370]	; 0x172
 8001aec:	f9b7 2170 	ldrsh.w	r2, [r7, #368]	; 0x170
 8001af0:	4638      	mov	r0, r7
 8001af2:	9201      	str	r2, [sp, #4]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	4623      	mov	r3, r4
 8001af8:	460a      	mov	r2, r1
 8001afa:	4913      	ldr	r1, [pc, #76]	; (8001b48 <main+0x6f4>)
 8001afc:	f008 ff96 	bl	800aa2c <siprintf>
    		UART_STLink->txStringCR(strOut);
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <main+0x6c0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	463b      	mov	r3, r7
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	f008 fb25 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
 8001b10:	e040      	b.n	8001b94 <main+0x740>
 8001b12:	bf00      	nop
 8001b14:	200001d0 	.word	0x200001d0
 8001b18:	0800b2ec 	.word	0x0800b2ec
 8001b1c:	0270475c 	.word	0x0270475c
 8001b20:	40020c00 	.word	0x40020c00
 8001b24:	40020400 	.word	0x40020400
 8001b28:	200001d4 	.word	0x200001d4
 8001b2c:	0800b300 	.word	0x0800b300
 8001b30:	200001c4 	.word	0x200001c4
 8001b34:	0800b324 	.word	0x0800b324
 8001b38:	0800b348 	.word	0x0800b348
 8001b3c:	0800b368 	.word	0x0800b368
 8001b40:	0800b37c 	.word	0x0800b37c
 8001b44:	0800b3a0 	.word	0x0800b3a0
 8001b48:	0800b3d0 	.word	0x0800b3d0

      } else if (QAD_FT6206::getDown()) {
 8001b4c:	f7ff fa26 	bl	8000f9c <_ZN10QAD_FT62067getDownEv>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d018      	beq.n	8001b88 <main+0x734>
    		sprintf(strOut, "FT6206: Touch (X: %u, Y: %u, MX: %i, MY: %i", uX, uY, iX, iY);
 8001b56:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 8001b5a:	f8b7 417c 	ldrh.w	r4, [r7, #380]	; 0x17c
 8001b5e:	f9b7 3172 	ldrsh.w	r3, [r7, #370]	; 0x172
 8001b62:	f9b7 2170 	ldrsh.w	r2, [r7, #368]	; 0x170
 8001b66:	4638      	mov	r0, r7
 8001b68:	9201      	str	r2, [sp, #4]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	4623      	mov	r3, r4
 8001b6e:	460a      	mov	r2, r1
 8001b70:	4917      	ldr	r1, [pc, #92]	; (8001bd0 <main+0x77c>)
 8001b72:	f008 ff5b 	bl	800aa2c <siprintf>
    		UART_STLink->txStringCR(strOut);
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <main+0x780>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4610      	mov	r0, r2
 8001b82:	f008 faea 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
 8001b86:	e005      	b.n	8001b94 <main+0x740>

    	} else {
    		UART_STLink->txStringCR("FT6206: No Touch");
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <main+0x780>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4912      	ldr	r1, [pc, #72]	; (8001bd8 <main+0x784>)
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f008 fae3 	bl	800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
    	}

    	uTouchUpdateTicks -= QA_FT_TouchUpdateTickThreshold;
 8001b94:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b98:	3b64      	subs	r3, #100	; 0x64
 8001b9a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the green User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //has become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8001b9e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001ba2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) {
 8001bac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001bb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bb4:	f4ff ae9f 	bcc.w	80018f6 <main+0x4a2>
    	GPIO_UserLED_Green->toggle();
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <main+0x788>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f005 fba0 	bl	8007302 <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;
 8001bc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001bc6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001bca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    }

  }
 8001bce:	e692      	b.n	80018f6 <main+0x4a2>
 8001bd0:	0800b404 	.word	0x0800b404
 8001bd4:	200001d0 	.word	0x200001d0
 8001bd8:	0800b430 	.word	0x0800b430
 8001bdc:	200001c8 	.word	0x200001c8

08001be0 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8001bea:	683c      	ldr	r4, [r7, #0]
 8001bec:	4620      	mov	r0, r4
 8001bee:	f008 fd82 	bl	800a6f6 <_Znaj>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	1e63      	subs	r3, r4, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db04      	blt.n	8001c08 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8001bfe:	2100      	movs	r1, #0
 8001c00:	7011      	strb	r1, [r2, #0]
 8001c02:	3201      	adds	r2, #1
 8001c04:	3b01      	subs	r3, #1
 8001c06:	e7f8      	b.n	8001bfa <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8001c08:	4601      	mov	r1, r0
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f8b7 	bl	8001d7e <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd90      	pop	{r4, r7, pc}

08001c18 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8001c18:	b5b0      	push	{r4, r5, r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001c22:	6838      	ldr	r0, [r7, #0]
 8001c24:	f000 f8c7 	bl	8001db6 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	881c      	ldrh	r4, [r3, #0]
 8001c2c:	200c      	movs	r0, #12
 8001c2e:	f008 fd51 	bl	800a6d4 <_Znwj>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461d      	mov	r5, r3
 8001c36:	4621      	mov	r1, r4
 8001c38:	4628      	mov	r0, r5
 8001c3a:	f7ff f9e1 	bl	8001000 <_ZN14QAT_FIFOBufferC1Et>
 8001c3e:	4629      	mov	r1, r5
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f8c3 	bl	8001dcc <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}

08001c4e <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8001c4e:	b5b0      	push	{r4, r5, r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001c58:	6838      	ldr	r0, [r7, #0]
 8001c5a:	f000 f8d3 	bl	8001e04 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 8001c5e:	4605      	mov	r5, r0
 8001c60:	20a4      	movs	r0, #164	; 0xa4
 8001c62:	f008 fd37 	bl	800a6d4 <_Znwj>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461c      	mov	r4, r3
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7ff fa15 	bl	800109c <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 8001c72:	4621      	mov	r1, r4
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f8d0 	bl	8001e1a <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bdb0      	pop	{r4, r5, r7, pc}

08001c82 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8e1 	bl	8001e52 <_ZNSaIP12QAS_LCD_FontEC1Ev>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f8e9 	bl	8001e6a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_ZNSaIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8f1 	bl	8001e92 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8e7 	bl	8001ea8 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      }
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fa43 	bl	8001168 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001cec:	b5b0      	push	{r4, r5, r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681c      	ldr	r4, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f8e5 	bl	8001ece <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8001d04:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001d06:	461a      	mov	r2, r3
 8001d08:	4629      	mov	r1, r5
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f000 f8ea 	bl	8001ee4 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ffd1 	bl	8001cba <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bdb0      	pop	{r4, r5, r7, pc}

08001d22 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8e5 	bl	8001f00 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	109b      	asrs	r3, r3, #2
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
      }
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 f8d8 	bl	8001f42 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f8df 	bl	8001f6a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6839      	ldr	r1, [r7, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f8d2 	bl	8001f84 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f8d9 	bl	8001fac <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6839      	ldr	r1, [r7, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 f8cc 	bl	8001fc6 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f8d3 	bl	8001fee <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_ZNSaIP12QAS_LCD_FontEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8d4 	bl	8002008 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
	{ }
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	if (__p)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 f8ac 	bl	800201e <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>
      }
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f8a2 	bl	800203c <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>
    }
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	109b      	asrs	r3, r3, #2
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00e      	beq.n	8001f3a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ffd3 	bl	8001ece <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8001f28:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	6838      	ldr	r0, [r7, #0]
 8001f30:	f7ff ffd8 	bl	8001ee4 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd90      	pop	{r4, r7, pc}

08001f42 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f881 	bl	8002056 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff21 	bl	8001d9c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f87b 	bl	8002070 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f879 	bl	8002088 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff27 	bl	8001dea <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f873 	bl	80020a2 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f871 	bl	80020ba <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff2d 	bl	8001e38 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 f86b 	bl	80020d4 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f85c 	bl	80020ec <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002046:	6839      	ldr	r1, [r7, #0]
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f85c 	bl	8002106 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>
    }
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f85b 	bl	800211c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f85f 	bl	800213c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 800207e:	4603      	mov	r3, r0
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f85f 	bl	8002156 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f863 	bl	8002176 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 f863 	bl	8002190 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f867 	bl	80021b0 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80020f8:	68b8      	ldr	r0, [r7, #8]
 80020fa:	f008 fad8 	bl	800a6ae <_ZdlPv>
      }
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f850 	bl	80021ca <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f858 	bl	80021e2 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f859 	bl	80021fe <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 800214c:	4603      	mov	r3, r0
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f858 	bl	8002214 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f860 	bl	800222c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f861 	bl	8002248 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 8002186:	4603      	mov	r3, r0
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f860 	bl	800225e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 f868 	bl	8002276 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f869 	bl	8002292 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f868 	bl	80022a8 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f84e 	bl	80022be <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f834 	bl	80022d4 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
	return 1;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <_kill>:

int _kill(int pid, int sig)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002304:	f008 fa2a 	bl	800a75c <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	2216      	movs	r2, #22
 800230c:	601a      	str	r2, [r3, #0]
	return -1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <_exit>:

void _exit (int status)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002322:	f04f 31ff 	mov.w	r1, #4294967295
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffe7 	bl	80022fa <_kill>
	while (1) {}		/* Make sure we hang here */
 800232c:	e7fe      	b.n	800232c <_exit+0x12>
	...

08002330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002338:	4a14      	ldr	r2, [pc, #80]	; (800238c <_sbrk+0x5c>)
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <_sbrk+0x60>)
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <_sbrk+0x64>)
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <_sbrk+0x68>)
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	429a      	cmp	r2, r3
 800235e:	d207      	bcs.n	8002370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002360:	f008 f9fc 	bl	800a75c <__errno>
 8002364:	4603      	mov	r3, r0
 8002366:	220c      	movs	r2, #12
 8002368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	e009      	b.n	8002384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <_sbrk+0x64>)
 8002380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20080000 	.word	0x20080000
 8002390:	00000400 	.word	0x00000400
 8002394:	200001d8 	.word	0x200001d8
 8002398:	20000478 	.word	0x20000478

0800239c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <SystemInit+0x20>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <SystemInit+0x20>)
 80023a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80023ca:	49c1      	ldr	r1, [pc, #772]	; (80026d0 <OTM8009A_Init+0x310>)
 80023cc:	2000      	movs	r0, #0
 80023ce:	f005 fedd 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80023d2:	49c0      	ldr	r1, [pc, #768]	; (80026d4 <OTM8009A_Init+0x314>)
 80023d4:	2003      	movs	r0, #3
 80023d6:	f005 fed9 	bl	800818c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80023da:	49bf      	ldr	r1, [pc, #764]	; (80026d8 <OTM8009A_Init+0x318>)
 80023dc:	2000      	movs	r0, #0
 80023de:	f005 fed5 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80023e2:	49be      	ldr	r1, [pc, #760]	; (80026dc <OTM8009A_Init+0x31c>)
 80023e4:	2002      	movs	r0, #2
 80023e6:	f005 fed1 	bl	800818c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80023ea:	49bb      	ldr	r1, [pc, #748]	; (80026d8 <OTM8009A_Init+0x318>)
 80023ec:	2000      	movs	r0, #0
 80023ee:	f005 fecd 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80023f2:	49bb      	ldr	r1, [pc, #748]	; (80026e0 <OTM8009A_Init+0x320>)
 80023f4:	2000      	movs	r0, #0
 80023f6:	f005 fec9 	bl	800818c <DSI_IO_WriteCmd>
  HAL_Delay(10);
 80023fa:	200a      	movs	r0, #10
 80023fc:	f000 fa88 	bl	8002910 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8002400:	49b8      	ldr	r1, [pc, #736]	; (80026e4 <OTM8009A_Init+0x324>)
 8002402:	2000      	movs	r0, #0
 8002404:	f005 fec2 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8002408:	49b7      	ldr	r1, [pc, #732]	; (80026e8 <OTM8009A_Init+0x328>)
 800240a:	2000      	movs	r0, #0
 800240c:	f005 febe 	bl	800818c <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8002410:	200a      	movs	r0, #10
 8002412:	f000 fa7d 	bl	8002910 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8002416:	49b5      	ldr	r1, [pc, #724]	; (80026ec <OTM8009A_Init+0x32c>)
 8002418:	2000      	movs	r0, #0
 800241a:	f005 feb7 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800241e:	49b4      	ldr	r1, [pc, #720]	; (80026f0 <OTM8009A_Init+0x330>)
 8002420:	2000      	movs	r0, #0
 8002422:	f005 feb3 	bl	800818c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8002426:	49b3      	ldr	r1, [pc, #716]	; (80026f4 <OTM8009A_Init+0x334>)
 8002428:	2000      	movs	r0, #0
 800242a:	f005 feaf 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800242e:	49b2      	ldr	r1, [pc, #712]	; (80026f8 <OTM8009A_Init+0x338>)
 8002430:	2000      	movs	r0, #0
 8002432:	f005 feab 	bl	800818c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8002436:	49b1      	ldr	r1, [pc, #708]	; (80026fc <OTM8009A_Init+0x33c>)
 8002438:	2000      	movs	r0, #0
 800243a:	f005 fea7 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 800243e:	49b0      	ldr	r1, [pc, #704]	; (8002700 <OTM8009A_Init+0x340>)
 8002440:	2000      	movs	r0, #0
 8002442:	f005 fea3 	bl	800818c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002446:	49a2      	ldr	r1, [pc, #648]	; (80026d0 <OTM8009A_Init+0x310>)
 8002448:	2000      	movs	r0, #0
 800244a:	f005 fe9f 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 800244e:	49ad      	ldr	r1, [pc, #692]	; (8002704 <OTM8009A_Init+0x344>)
 8002450:	2000      	movs	r0, #0
 8002452:	f005 fe9b 	bl	800818c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002456:	49ac      	ldr	r1, [pc, #688]	; (8002708 <OTM8009A_Init+0x348>)
 8002458:	2000      	movs	r0, #0
 800245a:	f005 fe97 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 800245e:	49ab      	ldr	r1, [pc, #684]	; (800270c <OTM8009A_Init+0x34c>)
 8002460:	2000      	movs	r0, #0
 8002462:	f005 fe93 	bl	800818c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8002466:	49aa      	ldr	r1, [pc, #680]	; (8002710 <OTM8009A_Init+0x350>)
 8002468:	2000      	movs	r0, #0
 800246a:	f005 fe8f 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800246e:	49a9      	ldr	r1, [pc, #676]	; (8002714 <OTM8009A_Init+0x354>)
 8002470:	2000      	movs	r0, #0
 8002472:	f005 fe8b 	bl	800818c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8002476:	49a8      	ldr	r1, [pc, #672]	; (8002718 <OTM8009A_Init+0x358>)
 8002478:	2000      	movs	r0, #0
 800247a:	f005 fe87 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800247e:	49a7      	ldr	r1, [pc, #668]	; (800271c <OTM8009A_Init+0x35c>)
 8002480:	2000      	movs	r0, #0
 8002482:	f005 fe83 	bl	800818c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8002486:	49a6      	ldr	r1, [pc, #664]	; (8002720 <OTM8009A_Init+0x360>)
 8002488:	2000      	movs	r0, #0
 800248a:	f005 fe7f 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800248e:	499a      	ldr	r1, [pc, #616]	; (80026f8 <OTM8009A_Init+0x338>)
 8002490:	2000      	movs	r0, #0
 8002492:	f005 fe7b 	bl	800818c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002496:	498e      	ldr	r1, [pc, #568]	; (80026d0 <OTM8009A_Init+0x310>)
 8002498:	2000      	movs	r0, #0
 800249a:	f005 fe77 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800249e:	49a1      	ldr	r1, [pc, #644]	; (8002724 <OTM8009A_Init+0x364>)
 80024a0:	2002      	movs	r0, #2
 80024a2:	f005 fe73 	bl	800818c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80024a6:	49a0      	ldr	r1, [pc, #640]	; (8002728 <OTM8009A_Init+0x368>)
 80024a8:	2000      	movs	r0, #0
 80024aa:	f005 fe6f 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80024ae:	499f      	ldr	r1, [pc, #636]	; (800272c <OTM8009A_Init+0x36c>)
 80024b0:	2000      	movs	r0, #0
 80024b2:	f005 fe6b 	bl	800818c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80024b6:	499e      	ldr	r1, [pc, #632]	; (8002730 <OTM8009A_Init+0x370>)
 80024b8:	2000      	movs	r0, #0
 80024ba:	f005 fe67 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80024be:	499d      	ldr	r1, [pc, #628]	; (8002734 <OTM8009A_Init+0x374>)
 80024c0:	2000      	movs	r0, #0
 80024c2:	f005 fe63 	bl	800818c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80024c6:	499c      	ldr	r1, [pc, #624]	; (8002738 <OTM8009A_Init+0x378>)
 80024c8:	2000      	movs	r0, #0
 80024ca:	f005 fe5f 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80024ce:	499b      	ldr	r1, [pc, #620]	; (800273c <OTM8009A_Init+0x37c>)
 80024d0:	2000      	movs	r0, #0
 80024d2:	f005 fe5b 	bl	800818c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80024d6:	498c      	ldr	r1, [pc, #560]	; (8002708 <OTM8009A_Init+0x348>)
 80024d8:	2000      	movs	r0, #0
 80024da:	f005 fe57 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80024de:	4998      	ldr	r1, [pc, #608]	; (8002740 <OTM8009A_Init+0x380>)
 80024e0:	2000      	movs	r0, #0
 80024e2:	f005 fe53 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80024e6:	498a      	ldr	r1, [pc, #552]	; (8002710 <OTM8009A_Init+0x350>)
 80024e8:	2000      	movs	r0, #0
 80024ea:	f005 fe4f 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 80024ee:	4995      	ldr	r1, [pc, #596]	; (8002744 <OTM8009A_Init+0x384>)
 80024f0:	2000      	movs	r0, #0
 80024f2:	f005 fe4b 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80024f6:	4994      	ldr	r1, [pc, #592]	; (8002748 <OTM8009A_Init+0x388>)
 80024f8:	2000      	movs	r0, #0
 80024fa:	f005 fe47 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80024fe:	4993      	ldr	r1, [pc, #588]	; (800274c <OTM8009A_Init+0x38c>)
 8002500:	2002      	movs	r0, #2
 8002502:	f005 fe43 	bl	800818c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002506:	4974      	ldr	r1, [pc, #464]	; (80026d8 <OTM8009A_Init+0x318>)
 8002508:	2000      	movs	r0, #0
 800250a:	f005 fe3f 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800250e:	4990      	ldr	r1, [pc, #576]	; (8002750 <OTM8009A_Init+0x390>)
 8002510:	2006      	movs	r0, #6
 8002512:	f005 fe3b 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002516:	498f      	ldr	r1, [pc, #572]	; (8002754 <OTM8009A_Init+0x394>)
 8002518:	2000      	movs	r0, #0
 800251a:	f005 fe37 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800251e:	498e      	ldr	r1, [pc, #568]	; (8002758 <OTM8009A_Init+0x398>)
 8002520:	200e      	movs	r0, #14
 8002522:	f005 fe33 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002526:	498d      	ldr	r1, [pc, #564]	; (800275c <OTM8009A_Init+0x39c>)
 8002528:	2000      	movs	r0, #0
 800252a:	f005 fe2f 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800252e:	498c      	ldr	r1, [pc, #560]	; (8002760 <OTM8009A_Init+0x3a0>)
 8002530:	200e      	movs	r0, #14
 8002532:	f005 fe2b 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002536:	498b      	ldr	r1, [pc, #556]	; (8002764 <OTM8009A_Init+0x3a4>)
 8002538:	2000      	movs	r0, #0
 800253a:	f005 fe27 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 800253e:	498a      	ldr	r1, [pc, #552]	; (8002768 <OTM8009A_Init+0x3a8>)
 8002540:	200a      	movs	r0, #10
 8002542:	f005 fe23 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002546:	4989      	ldr	r1, [pc, #548]	; (800276c <OTM8009A_Init+0x3ac>)
 8002548:	2000      	movs	r0, #0
 800254a:	f005 fe1f 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 800254e:	4988      	ldr	r1, [pc, #544]	; (8002770 <OTM8009A_Init+0x3b0>)
 8002550:	2000      	movs	r0, #0
 8002552:	f005 fe1b 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002556:	4960      	ldr	r1, [pc, #384]	; (80026d8 <OTM8009A_Init+0x318>)
 8002558:	2000      	movs	r0, #0
 800255a:	f005 fe17 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800255e:	4985      	ldr	r1, [pc, #532]	; (8002774 <OTM8009A_Init+0x3b4>)
 8002560:	200a      	movs	r0, #10
 8002562:	f005 fe13 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8002566:	4984      	ldr	r1, [pc, #528]	; (8002778 <OTM8009A_Init+0x3b8>)
 8002568:	2000      	movs	r0, #0
 800256a:	f005 fe0f 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 800256e:	4983      	ldr	r1, [pc, #524]	; (800277c <OTM8009A_Init+0x3bc>)
 8002570:	200f      	movs	r0, #15
 8002572:	f005 fe0b 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002576:	4977      	ldr	r1, [pc, #476]	; (8002754 <OTM8009A_Init+0x394>)
 8002578:	2000      	movs	r0, #0
 800257a:	f005 fe07 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 800257e:	4980      	ldr	r1, [pc, #512]	; (8002780 <OTM8009A_Init+0x3c0>)
 8002580:	200f      	movs	r0, #15
 8002582:	f005 fe03 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002586:	4975      	ldr	r1, [pc, #468]	; (800275c <OTM8009A_Init+0x39c>)
 8002588:	2000      	movs	r0, #0
 800258a:	f005 fdff 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 800258e:	497d      	ldr	r1, [pc, #500]	; (8002784 <OTM8009A_Init+0x3c4>)
 8002590:	200a      	movs	r0, #10
 8002592:	f005 fdfb 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002596:	4973      	ldr	r1, [pc, #460]	; (8002764 <OTM8009A_Init+0x3a4>)
 8002598:	2000      	movs	r0, #0
 800259a:	f005 fdf7 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 800259e:	497a      	ldr	r1, [pc, #488]	; (8002788 <OTM8009A_Init+0x3c8>)
 80025a0:	200f      	movs	r0, #15
 80025a2:	f005 fdf3 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80025a6:	4971      	ldr	r1, [pc, #452]	; (800276c <OTM8009A_Init+0x3ac>)
 80025a8:	2000      	movs	r0, #0
 80025aa:	f005 fdef 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80025ae:	4977      	ldr	r1, [pc, #476]	; (800278c <OTM8009A_Init+0x3cc>)
 80025b0:	200f      	movs	r0, #15
 80025b2:	f005 fdeb 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80025b6:	4976      	ldr	r1, [pc, #472]	; (8002790 <OTM8009A_Init+0x3d0>)
 80025b8:	2000      	movs	r0, #0
 80025ba:	f005 fde7 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80025be:	4975      	ldr	r1, [pc, #468]	; (8002794 <OTM8009A_Init+0x3d4>)
 80025c0:	200a      	movs	r0, #10
 80025c2:	f005 fde3 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80025c6:	4974      	ldr	r1, [pc, #464]	; (8002798 <OTM8009A_Init+0x3d8>)
 80025c8:	2000      	movs	r0, #0
 80025ca:	f005 fddf 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 80025ce:	4973      	ldr	r1, [pc, #460]	; (800279c <OTM8009A_Init+0x3dc>)
 80025d0:	200a      	movs	r0, #10
 80025d2:	f005 fddb 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80025d6:	4940      	ldr	r1, [pc, #256]	; (80026d8 <OTM8009A_Init+0x318>)
 80025d8:	2000      	movs	r0, #0
 80025da:	f005 fdd7 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80025de:	4970      	ldr	r1, [pc, #448]	; (80027a0 <OTM8009A_Init+0x3e0>)
 80025e0:	200a      	movs	r0, #10
 80025e2:	f005 fdd3 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80025e6:	4964      	ldr	r1, [pc, #400]	; (8002778 <OTM8009A_Init+0x3b8>)
 80025e8:	2000      	movs	r0, #0
 80025ea:	f005 fdcf 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 80025ee:	496d      	ldr	r1, [pc, #436]	; (80027a4 <OTM8009A_Init+0x3e4>)
 80025f0:	200f      	movs	r0, #15
 80025f2:	f005 fdcb 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80025f6:	4957      	ldr	r1, [pc, #348]	; (8002754 <OTM8009A_Init+0x394>)
 80025f8:	2000      	movs	r0, #0
 80025fa:	f005 fdc7 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80025fe:	496a      	ldr	r1, [pc, #424]	; (80027a8 <OTM8009A_Init+0x3e8>)
 8002600:	200f      	movs	r0, #15
 8002602:	f005 fdc3 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002606:	4955      	ldr	r1, [pc, #340]	; (800275c <OTM8009A_Init+0x39c>)
 8002608:	2000      	movs	r0, #0
 800260a:	f005 fdbf 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800260e:	4967      	ldr	r1, [pc, #412]	; (80027ac <OTM8009A_Init+0x3ec>)
 8002610:	200a      	movs	r0, #10
 8002612:	f005 fdbb 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002616:	4953      	ldr	r1, [pc, #332]	; (8002764 <OTM8009A_Init+0x3a4>)
 8002618:	2000      	movs	r0, #0
 800261a:	f005 fdb7 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800261e:	4964      	ldr	r1, [pc, #400]	; (80027b0 <OTM8009A_Init+0x3f0>)
 8002620:	200f      	movs	r0, #15
 8002622:	f005 fdb3 	bl	800818c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002626:	4951      	ldr	r1, [pc, #324]	; (800276c <OTM8009A_Init+0x3ac>)
 8002628:	2000      	movs	r0, #0
 800262a:	f005 fdaf 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800262e:	4961      	ldr	r1, [pc, #388]	; (80027b4 <OTM8009A_Init+0x3f4>)
 8002630:	200f      	movs	r0, #15
 8002632:	f005 fdab 	bl	800818c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002636:	4934      	ldr	r1, [pc, #208]	; (8002708 <OTM8009A_Init+0x348>)
 8002638:	2000      	movs	r0, #0
 800263a:	f005 fda7 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800263e:	495e      	ldr	r1, [pc, #376]	; (80027b8 <OTM8009A_Init+0x3f8>)
 8002640:	2000      	movs	r0, #0
 8002642:	f005 fda3 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8002646:	495d      	ldr	r1, [pc, #372]	; (80027bc <OTM8009A_Init+0x3fc>)
 8002648:	2000      	movs	r0, #0
 800264a:	f005 fd9f 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800264e:	495c      	ldr	r1, [pc, #368]	; (80027c0 <OTM8009A_Init+0x400>)
 8002650:	2000      	movs	r0, #0
 8002652:	f005 fd9b 	bl	800818c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8002656:	495b      	ldr	r1, [pc, #364]	; (80027c4 <OTM8009A_Init+0x404>)
 8002658:	2000      	movs	r0, #0
 800265a:	f005 fd97 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 800265e:	495a      	ldr	r1, [pc, #360]	; (80027c8 <OTM8009A_Init+0x408>)
 8002660:	2000      	movs	r0, #0
 8002662:	f005 fd93 	bl	800818c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002666:	491a      	ldr	r1, [pc, #104]	; (80026d0 <OTM8009A_Init+0x310>)
 8002668:	2000      	movs	r0, #0
 800266a:	f005 fd8f 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 800266e:	4957      	ldr	r1, [pc, #348]	; (80027cc <OTM8009A_Init+0x40c>)
 8002670:	2003      	movs	r0, #3
 8002672:	f005 fd8b 	bl	800818c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002676:	4916      	ldr	r1, [pc, #88]	; (80026d0 <OTM8009A_Init+0x310>)
 8002678:	2000      	movs	r0, #0
 800267a:	f005 fd87 	bl	800818c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800267e:	4914      	ldr	r1, [pc, #80]	; (80026d0 <OTM8009A_Init+0x310>)
 8002680:	2000      	movs	r0, #0
 8002682:	f005 fd83 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8002686:	4952      	ldr	r1, [pc, #328]	; (80027d0 <OTM8009A_Init+0x410>)
 8002688:	2010      	movs	r0, #16
 800268a:	f005 fd7f 	bl	800818c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800268e:	4910      	ldr	r1, [pc, #64]	; (80026d0 <OTM8009A_Init+0x310>)
 8002690:	2000      	movs	r0, #0
 8002692:	f005 fd7b 	bl	800818c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8002696:	494f      	ldr	r1, [pc, #316]	; (80027d4 <OTM8009A_Init+0x414>)
 8002698:	2010      	movs	r0, #16
 800269a:	f005 fd77 	bl	800818c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 800269e:	494e      	ldr	r1, [pc, #312]	; (80027d8 <OTM8009A_Init+0x418>)
 80026a0:	2000      	movs	r0, #0
 80026a2:	f005 fd73 	bl	800818c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  HAL_Delay(120);
 80026a6:	2078      	movs	r0, #120	; 0x78
 80026a8:	f000 f932 	bl	8002910 <HAL_Delay>

  switch(ColorCoding)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <OTM8009A_Init+0x304>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	f040 8095 	bne.w	80027e4 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 80026ba:	4948      	ldr	r1, [pc, #288]	; (80027dc <OTM8009A_Init+0x41c>)
 80026bc:	2000      	movs	r0, #0
 80026be:	f005 fd65 	bl	800818c <DSI_IO_WriteCmd>
    break;
 80026c2:	e090      	b.n	80027e6 <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80026c4:	4946      	ldr	r1, [pc, #280]	; (80027e0 <OTM8009A_Init+0x420>)
 80026c6:	2000      	movs	r0, #0
 80026c8:	f005 fd60 	bl	800818c <DSI_IO_WriteCmd>
    break;
 80026cc:	e08b      	b.n	80027e6 <OTM8009A_Init+0x426>
 80026ce:	bf00      	nop
 80026d0:	0800b614 	.word	0x0800b614
 80026d4:	0800b4cc 	.word	0x0800b4cc
 80026d8:	0800b618 	.word	0x0800b618
 80026dc:	0800b4d0 	.word	0x0800b4d0
 80026e0:	0800b61c 	.word	0x0800b61c
 80026e4:	0800b620 	.word	0x0800b620
 80026e8:	0800b624 	.word	0x0800b624
 80026ec:	0800b628 	.word	0x0800b628
 80026f0:	0800b62c 	.word	0x0800b62c
 80026f4:	0800b630 	.word	0x0800b630
 80026f8:	0800b634 	.word	0x0800b634
 80026fc:	0800b638 	.word	0x0800b638
 8002700:	0800b63c 	.word	0x0800b63c
 8002704:	0800b640 	.word	0x0800b640
 8002708:	0800b644 	.word	0x0800b644
 800270c:	0800b648 	.word	0x0800b648
 8002710:	0800b64c 	.word	0x0800b64c
 8002714:	0800b650 	.word	0x0800b650
 8002718:	0800b654 	.word	0x0800b654
 800271c:	0800b658 	.word	0x0800b658
 8002720:	0800b65c 	.word	0x0800b65c
 8002724:	0800b4fc 	.word	0x0800b4fc
 8002728:	0800b660 	.word	0x0800b660
 800272c:	0800b664 	.word	0x0800b664
 8002730:	0800b668 	.word	0x0800b668
 8002734:	0800b66c 	.word	0x0800b66c
 8002738:	0800b670 	.word	0x0800b670
 800273c:	0800b674 	.word	0x0800b674
 8002740:	0800b678 	.word	0x0800b678
 8002744:	0800b67c 	.word	0x0800b67c
 8002748:	0800b680 	.word	0x0800b680
 800274c:	0800b500 	.word	0x0800b500
 8002750:	0800b504 	.word	0x0800b504
 8002754:	0800b684 	.word	0x0800b684
 8002758:	0800b50c 	.word	0x0800b50c
 800275c:	0800b688 	.word	0x0800b688
 8002760:	0800b51c 	.word	0x0800b51c
 8002764:	0800b68c 	.word	0x0800b68c
 8002768:	0800b52c 	.word	0x0800b52c
 800276c:	0800b690 	.word	0x0800b690
 8002770:	0800b6c8 	.word	0x0800b6c8
 8002774:	0800b538 	.word	0x0800b538
 8002778:	0800b694 	.word	0x0800b694
 800277c:	0800b544 	.word	0x0800b544
 8002780:	0800b554 	.word	0x0800b554
 8002784:	0800b564 	.word	0x0800b564
 8002788:	0800b570 	.word	0x0800b570
 800278c:	0800b580 	.word	0x0800b580
 8002790:	0800b698 	.word	0x0800b698
 8002794:	0800b590 	.word	0x0800b590
 8002798:	0800b69c 	.word	0x0800b69c
 800279c:	0800b59c 	.word	0x0800b59c
 80027a0:	0800b5a8 	.word	0x0800b5a8
 80027a4:	0800b5b4 	.word	0x0800b5b4
 80027a8:	0800b5c4 	.word	0x0800b5c4
 80027ac:	0800b5d4 	.word	0x0800b5d4
 80027b0:	0800b5e0 	.word	0x0800b5e0
 80027b4:	0800b5f0 	.word	0x0800b5f0
 80027b8:	0800b6cc 	.word	0x0800b6cc
 80027bc:	0800b6d0 	.word	0x0800b6d0
 80027c0:	0800b6d4 	.word	0x0800b6d4
 80027c4:	0800b6d8 	.word	0x0800b6d8
 80027c8:	0800b6dc 	.word	0x0800b6dc
 80027cc:	0800b600 	.word	0x0800b600
 80027d0:	0800b4d4 	.word	0x0800b4d4
 80027d4:	0800b4e8 	.word	0x0800b4e8
 80027d8:	0800b6a0 	.word	0x0800b6a0
 80027dc:	0800b6a4 	.word	0x0800b6a4
 80027e0:	0800b6a8 	.word	0x0800b6a8
  default :
    break;
 80027e4:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d10b      	bne.n	8002804 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 80027ec:	4916      	ldr	r1, [pc, #88]	; (8002848 <OTM8009A_Init+0x488>)
 80027ee:	2000      	movs	r0, #0
 80027f0:	f005 fccc 	bl	800818c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 80027f4:	4915      	ldr	r1, [pc, #84]	; (800284c <OTM8009A_Init+0x48c>)
 80027f6:	2004      	movs	r0, #4
 80027f8:	f005 fcc8 	bl	800818c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 80027fc:	4914      	ldr	r1, [pc, #80]	; (8002850 <OTM8009A_Init+0x490>)
 80027fe:	2004      	movs	r0, #4
 8002800:	f005 fcc4 	bl	800818c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8002804:	4913      	ldr	r1, [pc, #76]	; (8002854 <OTM8009A_Init+0x494>)
 8002806:	2000      	movs	r0, #0
 8002808:	f005 fcc0 	bl	800818c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 800280c:	4912      	ldr	r1, [pc, #72]	; (8002858 <OTM8009A_Init+0x498>)
 800280e:	2000      	movs	r0, #0
 8002810:	f005 fcbc 	bl	800818c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8002814:	4911      	ldr	r1, [pc, #68]	; (800285c <OTM8009A_Init+0x49c>)
 8002816:	2000      	movs	r0, #0
 8002818:	f005 fcb8 	bl	800818c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 800281c:	4910      	ldr	r1, [pc, #64]	; (8002860 <OTM8009A_Init+0x4a0>)
 800281e:	2000      	movs	r0, #0
 8002820:	f005 fcb4 	bl	800818c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002824:	490f      	ldr	r1, [pc, #60]	; (8002864 <OTM8009A_Init+0x4a4>)
 8002826:	2000      	movs	r0, #0
 8002828:	f005 fcb0 	bl	800818c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800282c:	490e      	ldr	r1, [pc, #56]	; (8002868 <OTM8009A_Init+0x4a8>)
 800282e:	2000      	movs	r0, #0
 8002830:	f005 fcac 	bl	800818c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8002834:	490d      	ldr	r1, [pc, #52]	; (800286c <OTM8009A_Init+0x4ac>)
 8002836:	2000      	movs	r0, #0
 8002838:	f005 fca8 	bl	800818c <DSI_IO_WriteCmd>

  return 0;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	0800b6ac 	.word	0x0800b6ac
 800284c:	0800b604 	.word	0x0800b604
 8002850:	0800b60c 	.word	0x0800b60c
 8002854:	0800b6b0 	.word	0x0800b6b0
 8002858:	0800b6b4 	.word	0x0800b6b4
 800285c:	0800b6b8 	.word	0x0800b6b8
 8002860:	0800b6bc 	.word	0x0800b6bc
 8002864:	0800b6c0 	.word	0x0800b6c0
 8002868:	0800b614 	.word	0x0800b614
 800286c:	0800b6c4 	.word	0x0800b6c4

08002870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_InitTick+0x54>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_InitTick+0x58>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	4619      	mov	r1, r3
 8002882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002886:	fbb3 f3f1 	udiv	r3, r3, r1
 800288a:	fbb2 f3f3 	udiv	r3, r2, r3
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f999 	bl	8002bc6 <HAL_SYSTICK_Config>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e00e      	b.n	80028bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b0f      	cmp	r3, #15
 80028a2:	d80a      	bhi.n	80028ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a4:	2200      	movs	r2, #0
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	f000 f953 	bl	8002b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b0:	4a06      	ldr	r2, [pc, #24]	; (80028cc <HAL_InitTick+0x5c>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e000      	b.n	80028bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000000 	.word	0x20000000
 80028c8:	20000008 	.word	0x20000008
 80028cc:	20000004 	.word	0x20000004

080028d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_IncTick+0x20>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_IncTick+0x24>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <HAL_IncTick+0x24>)
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000008 	.word	0x20000008
 80028f4:	20000460 	.word	0x20000460

080028f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return uwTick;
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <HAL_GetTick+0x14>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000460 	.word	0x20000460

08002910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002918:	f7ff ffee 	bl	80028f8 <HAL_GetTick>
 800291c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d005      	beq.n	8002936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_Delay+0x44>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002936:	bf00      	nop
 8002938:	f7ff ffde 	bl	80028f8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	429a      	cmp	r2, r3
 8002946:	d8f7      	bhi.n	8002938 <HAL_Delay+0x28>
  {
  }
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000008 	.word	0x20000008

08002958 <__NVIC_SetPriorityGrouping>:
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <__NVIC_SetPriorityGrouping+0x40>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002974:	4013      	ands	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <__NVIC_SetPriorityGrouping+0x44>)
 8002982:	4313      	orrs	r3, r2
 8002984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002986:	4a04      	ldr	r2, [pc, #16]	; (8002998 <__NVIC_SetPriorityGrouping+0x40>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	60d3      	str	r3, [r2, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00
 800299c:	05fa0000 	.word	0x05fa0000

080029a0 <__NVIC_GetPriorityGrouping>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <__NVIC_GetPriorityGrouping+0x18>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	0a1b      	lsrs	r3, r3, #8
 80029aa:	f003 0307 	and.w	r3, r3, #7
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <__NVIC_EnableIRQ>:
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	db0b      	blt.n	80029e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	f003 021f 	and.w	r2, r3, #31
 80029d4:	4907      	ldr	r1, [pc, #28]	; (80029f4 <__NVIC_EnableIRQ+0x38>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	2001      	movs	r0, #1
 80029de:	fa00 f202 	lsl.w	r2, r0, r2
 80029e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000e100 	.word	0xe000e100

080029f8 <__NVIC_DisableIRQ>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	db12      	blt.n	8002a30 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 021f 	and.w	r2, r3, #31
 8002a10:	490a      	ldr	r1, [pc, #40]	; (8002a3c <__NVIC_DisableIRQ+0x44>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	2001      	movs	r0, #1
 8002a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1e:	3320      	adds	r3, #32
 8002a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a24:	f3bf 8f4f 	dsb	sy
}
 8002a28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a2a:	f3bf 8f6f 	isb	sy
}
 8002a2e:	bf00      	nop
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100

08002a40 <__NVIC_SetPriority>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	db0a      	blt.n	8002a6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	490c      	ldr	r1, [pc, #48]	; (8002a8c <__NVIC_SetPriority+0x4c>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	440b      	add	r3, r1
 8002a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a68:	e00a      	b.n	8002a80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4908      	ldr	r1, [pc, #32]	; (8002a90 <__NVIC_SetPriority+0x50>)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	3b04      	subs	r3, #4
 8002a78:	0112      	lsls	r2, r2, #4
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	761a      	strb	r2, [r3, #24]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000e100 	.word	0xe000e100
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <NVIC_EncodePriority>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	; 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f1c3 0307 	rsb	r3, r3, #7
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	bf28      	it	cs
 8002ab2:	2304      	movcs	r3, #4
 8002ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d902      	bls.n	8002ac4 <NVIC_EncodePriority+0x30>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3b03      	subs	r3, #3
 8002ac2:	e000      	b.n	8002ac6 <NVIC_EncodePriority+0x32>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	43d9      	mvns	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	4313      	orrs	r3, r2
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3724      	adds	r7, #36	; 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b0c:	d301      	bcc.n	8002b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e00f      	b.n	8002b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <SysTick_Config+0x40>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b1a:	210f      	movs	r1, #15
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b20:	f7ff ff8e 	bl	8002a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <SysTick_Config+0x40>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b2a:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <SysTick_Config+0x40>)
 8002b2c:	2207      	movs	r2, #7
 8002b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	e000e010 	.word	0xe000e010

08002b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ff05 	bl	8002958 <__NVIC_SetPriorityGrouping>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b68:	f7ff ff1a 	bl	80029a0 <__NVIC_GetPriorityGrouping>
 8002b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	6978      	ldr	r0, [r7, #20]
 8002b74:	f7ff ff8e 	bl	8002a94 <NVIC_EncodePriority>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff5d 	bl	8002a40 <__NVIC_SetPriority>
}
 8002b86:	bf00      	nop
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff0d 	bl	80029bc <__NVIC_EnableIRQ>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff1d 	bl	80029f8 <__NVIC_DisableIRQ>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ff94 	bl	8002afc <SysTick_Config>
 8002bd4:	4603      	mov	r3, r0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	019a      	lsls	r2, r3, #6
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	041b      	lsls	r3, r3, #16
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c1e:	f7ff fe6b 	bl	80028f8 <HAL_GetTick>
 8002c22:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002c24:	e009      	b.n	8002c3a <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8002c26:	f7ff fe67 	bl	80028f8 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c34:	d901      	bls.n	8002c3a <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e015      	b.n	8002c66 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ee      	beq.n	8002c26 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	019a      	lsls	r2, r3, #6
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	ea42 0103 	orr.w	r1, r2, r3
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	041a      	lsls	r2, r3, #16
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e106      	b.n	8002e92 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7c5b      	ldrb	r3, [r3, #17]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f97c 	bl	8002f8c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2203      	movs	r2, #3
 8002c98:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002cae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc2:	f7ff fe19 	bl	80028f8 <HAL_GetTick>
 8002cc6:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002cc8:	e009      	b.n	8002cde <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002cca:	f7ff fe15 	bl	80028f8 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cd8:	d901      	bls.n	8002cde <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0d9      	b.n	8002e92 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0ed      	beq.n	8002cca <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4b68      	ldr	r3, [pc, #416]	; (8002e9c <HAL_DSI_Init+0x22c>)
 8002cfc:	400b      	ands	r3, r1
 8002cfe:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	009a      	lsls	r2, r3, #2
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	02db      	lsls	r3, r3, #11
 8002d16:	431a      	orrs	r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	041b      	lsls	r3, r3, #16
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d52:	f7ff fdd1 	bl	80028f8 <HAL_GetTick>
 8002d56:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002d58:	e009      	b.n	8002d6e <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002d5a:	f7ff fdcd 	bl	80028f8 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d68:	d901      	bls.n	8002d6e <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e091      	b.n	8002e92 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0ed      	beq.n	8002d5a <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0206 	orr.w	r2, r2, #6
 8002d8e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0203 	bic.w	r2, r2, #3
 8002da2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0203 	bic.w	r2, r2, #3
 8002dd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002df8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6899      	ldr	r1, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_DSI_Init+0x1aa>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	e000      	b.n	8002e1c <HAL_DSI_Init+0x1ac>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <HAL_DSI_Init+0x230>)
 8002e22:	fb02 f203 	mul.w	r2, r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002e52:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3720      	adds	r7, #32
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	fffc8603 	.word	0xfffc8603
 8002ea0:	003d0900 	.word	0x003d0900

08002ea4 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e066      	b.n	8002f84 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0208 	bic.w	r2, r2, #8
 8002ed0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0206 	bic.w	r2, r2, #6
 8002f16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002f56:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f818 	bl	8002fa0 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	7c1b      	ldrb	r3, [r3, #16]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_DSI_ConfigVideoMode+0x16>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e1ee      	b.n	80033a8 <HAL_DSI_ConfigVideoMode+0x3f4>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0203 	bic.w	r2, r2, #3
 8003002:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4b8b      	ldr	r3, [pc, #556]	; (8003250 <HAL_DSI_ConfigVideoMode+0x29c>)
 8003022:	400b      	ands	r3, r1
 8003024:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b84      	ldr	r3, [pc, #528]	; (8003254 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003044:	400b      	ands	r3, r1
 8003046:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b7b      	ldr	r3, [pc, #492]	; (8003254 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003066:	400b      	ands	r3, r1
 8003068:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	699a      	ldr	r2, [r3, #24]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0203 	bic.w	r2, r2, #3
 800308a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68d9      	ldr	r1, [r3, #12]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0207 	bic.w	r2, r2, #7
 80030ac:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6959      	ldr	r1, [r3, #20]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	431a      	orrs	r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 020f 	bic.w	r2, r2, #15
 80030da:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6919      	ldr	r1, [r3, #16]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 020e 	bic.w	r2, r2, #14
 80030fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	005a      	lsls	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d110      	bne.n	8003144 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003130:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6919      	ldr	r1, [r3, #16]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b42      	ldr	r3, [pc, #264]	; (8003258 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8003150:	400b      	ands	r3, r1
 8003152:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b39      	ldr	r3, [pc, #228]	; (8003258 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8003172:	400b      	ands	r3, r1
 8003174:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b32      	ldr	r3, [pc, #200]	; (800325c <HAL_DSI_ConfigVideoMode+0x2a8>)
 8003194:	400b      	ands	r3, r1
 8003196:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80031b6:	400b      	ands	r3, r1
 80031b8:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4b22      	ldr	r3, [pc, #136]	; (8003260 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80031d8:	400b      	ands	r3, r1
 80031da:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80031fa:	400b      	ands	r3, r1
 80031fc:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_DSI_ConfigVideoMode+0x29c>)
 800321c:	400b      	ands	r3, r1
 800321e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003240:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800324c:	e00a      	b.n	8003264 <HAL_DSI_ConfigVideoMode+0x2b0>
 800324e:	bf00      	nop
 8003250:	ffffc000 	.word	0xffffc000
 8003254:	ffffe000 	.word	0xffffe000
 8003258:	fffff000 	.word	0xfffff000
 800325c:	ffff8000 	.word	0xffff8000
 8003260:	fffffc00 	.word	0xfffffc00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800327a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6999      	ldr	r1, [r3, #24]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003286:	041a      	lsls	r2, r3, #16
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800329e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6999      	ldr	r1, [r3, #24]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003326:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800336a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800338c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	7c1b      	ldrb	r3, [r3, #16]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_DSI_Start+0x14>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e02b      	b.n	8003420 <HAL_DSI_Start+0x6c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80033f0:	2300      	movs	r3, #0
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0208 	orr.w	r2, r2, #8
 8003404:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7c1b      	ldrb	r3, [r3, #16]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_DSI_Stop+0x14>
 800343c:	2302      	movs	r3, #2
 800343e:	e02b      	b.n	8003498 <HAL_DSI_Stop+0x6c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0201 	bic.w	r2, r2, #1
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0208 	bic.w	r2, r2, #8
 800347c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	7c1b      	ldrb	r3, [r3, #16]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_DSI_ShortWrite+0x1a>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e010      	b.n	80034e0 <HAL_DSI_ShortWrite+0x3c>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f7ff fb9e 	bl	8002c10 <DSI_ShortWrite>
 80034d4:	4603      	mov	r3, r0
 80034d6:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	741a      	strb	r2, [r3, #16]

  return status;
 80034de:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08c      	sub	sp, #48	; 0x30
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80034f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f8:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	7c1b      	ldrb	r3, [r3, #16]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_DSI_LongWrite+0x1e>
 8003502:	2302      	movs	r3, #2
 8003504:	e084      	b.n	8003610 <HAL_DSI_LongWrite+0x128>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800350c:	f7ff f9f4 	bl	80028f8 <HAL_GetTick>
 8003510:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003512:	e00c      	b.n	800352e <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003514:	f7ff f9f0 	bl	80028f8 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003522:	d904      	bls.n	800352e <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e070      	b.n	8003610 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0eb      	beq.n	8003514 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b03      	cmp	r3, #3
 8003544:	bf28      	it	cs
 8003546:	2303      	movcs	r3, #3
 8003548:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800354a:	2300      	movs	r3, #0
 800354c:	623b      	str	r3, [r7, #32]
 800354e:	e00f      	b.n	8003570 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	4413      	add	r3, r2
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	3301      	adds	r3, #1
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	4313      	orrs	r3, r2
 8003568:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	3301      	adds	r3, #1
 800356e:	623b      	str	r3, [r7, #32]
 8003570:	6a3a      	ldr	r2, [r7, #32]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	429a      	cmp	r2, r3
 8003576:	d3eb      	bcc.n	8003550 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003590:	e028      	b.n	80035e4 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	2b04      	cmp	r3, #4
 8003596:	bf28      	it	cs
 8003598:	2304      	movcs	r3, #4
 800359a:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	623b      	str	r3, [r7, #32]
 80035a4:	e00e      	b.n	80035c4 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	4413      	add	r3, r2
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	3301      	adds	r3, #1
 80035c2:	623b      	str	r3, [r7, #32]
 80035c4:	6a3a      	ldr	r2, [r7, #32]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d3ec      	bcc.n	80035a6 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80035d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4413      	add	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1d3      	bne.n	8003592 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80035f2:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	3301      	adds	r3, #1
 80035f8:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	4613      	mov	r3, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	f7ff faeb 	bl	8002bde <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3728      	adds	r7, #40	; 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	e175      	b.n	8003924 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003638:	2201      	movs	r2, #1
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	429a      	cmp	r2, r3
 8003652:	f040 8164 	bne.w	800391e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d00b      	beq.n	8003676 <HAL_GPIO_Init+0x5e>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d007      	beq.n	8003676 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800366a:	2b11      	cmp	r3, #17
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b12      	cmp	r3, #18
 8003674:	d130      	bne.n	80036d8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2203      	movs	r2, #3
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ac:	2201      	movs	r2, #1
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 0201 	and.w	r2, r3, #1
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2203      	movs	r2, #3
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d003      	beq.n	8003718 <HAL_GPIO_Init+0x100>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b12      	cmp	r3, #18
 8003716:	d123      	bne.n	8003760 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	08da      	lsrs	r2, r3, #3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3208      	adds	r2, #8
 8003720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	220f      	movs	r2, #15
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	08da      	lsrs	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3208      	adds	r2, #8
 800375a:	69b9      	ldr	r1, [r7, #24]
 800375c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	2203      	movs	r2, #3
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0203 	and.w	r2, r3, #3
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80be 	beq.w	800391e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a2:	4b66      	ldr	r3, [pc, #408]	; (800393c <HAL_GPIO_Init+0x324>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	4a65      	ldr	r2, [pc, #404]	; (800393c <HAL_GPIO_Init+0x324>)
 80037a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ac:	6453      	str	r3, [r2, #68]	; 0x44
 80037ae:	4b63      	ldr	r3, [pc, #396]	; (800393c <HAL_GPIO_Init+0x324>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037ba:	4a61      	ldr	r2, [pc, #388]	; (8003940 <HAL_GPIO_Init+0x328>)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	3302      	adds	r3, #2
 80037c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	220f      	movs	r2, #15
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a58      	ldr	r2, [pc, #352]	; (8003944 <HAL_GPIO_Init+0x32c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d037      	beq.n	8003856 <HAL_GPIO_Init+0x23e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a57      	ldr	r2, [pc, #348]	; (8003948 <HAL_GPIO_Init+0x330>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d031      	beq.n	8003852 <HAL_GPIO_Init+0x23a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a56      	ldr	r2, [pc, #344]	; (800394c <HAL_GPIO_Init+0x334>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d02b      	beq.n	800384e <HAL_GPIO_Init+0x236>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a55      	ldr	r2, [pc, #340]	; (8003950 <HAL_GPIO_Init+0x338>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d025      	beq.n	800384a <HAL_GPIO_Init+0x232>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a54      	ldr	r2, [pc, #336]	; (8003954 <HAL_GPIO_Init+0x33c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d01f      	beq.n	8003846 <HAL_GPIO_Init+0x22e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a53      	ldr	r2, [pc, #332]	; (8003958 <HAL_GPIO_Init+0x340>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d019      	beq.n	8003842 <HAL_GPIO_Init+0x22a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a52      	ldr	r2, [pc, #328]	; (800395c <HAL_GPIO_Init+0x344>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d013      	beq.n	800383e <HAL_GPIO_Init+0x226>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a51      	ldr	r2, [pc, #324]	; (8003960 <HAL_GPIO_Init+0x348>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00d      	beq.n	800383a <HAL_GPIO_Init+0x222>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a50      	ldr	r2, [pc, #320]	; (8003964 <HAL_GPIO_Init+0x34c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d007      	beq.n	8003836 <HAL_GPIO_Init+0x21e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a4f      	ldr	r2, [pc, #316]	; (8003968 <HAL_GPIO_Init+0x350>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d101      	bne.n	8003832 <HAL_GPIO_Init+0x21a>
 800382e:	2309      	movs	r3, #9
 8003830:	e012      	b.n	8003858 <HAL_GPIO_Init+0x240>
 8003832:	230a      	movs	r3, #10
 8003834:	e010      	b.n	8003858 <HAL_GPIO_Init+0x240>
 8003836:	2308      	movs	r3, #8
 8003838:	e00e      	b.n	8003858 <HAL_GPIO_Init+0x240>
 800383a:	2307      	movs	r3, #7
 800383c:	e00c      	b.n	8003858 <HAL_GPIO_Init+0x240>
 800383e:	2306      	movs	r3, #6
 8003840:	e00a      	b.n	8003858 <HAL_GPIO_Init+0x240>
 8003842:	2305      	movs	r3, #5
 8003844:	e008      	b.n	8003858 <HAL_GPIO_Init+0x240>
 8003846:	2304      	movs	r3, #4
 8003848:	e006      	b.n	8003858 <HAL_GPIO_Init+0x240>
 800384a:	2303      	movs	r3, #3
 800384c:	e004      	b.n	8003858 <HAL_GPIO_Init+0x240>
 800384e:	2302      	movs	r3, #2
 8003850:	e002      	b.n	8003858 <HAL_GPIO_Init+0x240>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <HAL_GPIO_Init+0x240>
 8003856:	2300      	movs	r3, #0
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	f002 0203 	and.w	r2, r2, #3
 800385e:	0092      	lsls	r2, r2, #2
 8003860:	4093      	lsls	r3, r2
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003868:	4935      	ldr	r1, [pc, #212]	; (8003940 <HAL_GPIO_Init+0x328>)
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	089b      	lsrs	r3, r3, #2
 800386e:	3302      	adds	r3, #2
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003876:	4b3d      	ldr	r3, [pc, #244]	; (800396c <HAL_GPIO_Init+0x354>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800389a:	4a34      	ldr	r2, [pc, #208]	; (800396c <HAL_GPIO_Init+0x354>)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038a0:	4b32      	ldr	r3, [pc, #200]	; (800396c <HAL_GPIO_Init+0x354>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038c4:	4a29      	ldr	r2, [pc, #164]	; (800396c <HAL_GPIO_Init+0x354>)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ca:	4b28      	ldr	r3, [pc, #160]	; (800396c <HAL_GPIO_Init+0x354>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <HAL_GPIO_Init+0x354>)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_GPIO_Init+0x354>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <HAL_GPIO_Init+0x354>)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3301      	adds	r3, #1
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	2b0f      	cmp	r3, #15
 8003928:	f67f ae86 	bls.w	8003638 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	3724      	adds	r7, #36	; 0x24
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	40013800 	.word	0x40013800
 8003944:	40020000 	.word	0x40020000
 8003948:	40020400 	.word	0x40020400
 800394c:	40020800 	.word	0x40020800
 8003950:	40020c00 	.word	0x40020c00
 8003954:	40021000 	.word	0x40021000
 8003958:	40021400 	.word	0x40021400
 800395c:	40021800 	.word	0x40021800
 8003960:	40021c00 	.word	0x40021c00
 8003964:	40022000 	.word	0x40022000
 8003968:	40022400 	.word	0x40022400
 800396c:	40013c00 	.word	0x40013c00

08003970 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	e0d9      	b.n	8003b40 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800398c:	2201      	movs	r2, #1
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4013      	ands	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	f040 80c9 	bne.w	8003b3a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80039a8:	4a6b      	ldr	r2, [pc, #428]	; (8003b58 <HAL_GPIO_DeInit+0x1e8>)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	3302      	adds	r3, #2
 80039b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	220f      	movs	r2, #15
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	4013      	ands	r3, r2
 80039c8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a63      	ldr	r2, [pc, #396]	; (8003b5c <HAL_GPIO_DeInit+0x1ec>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d037      	beq.n	8003a42 <HAL_GPIO_DeInit+0xd2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a62      	ldr	r2, [pc, #392]	; (8003b60 <HAL_GPIO_DeInit+0x1f0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d031      	beq.n	8003a3e <HAL_GPIO_DeInit+0xce>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a61      	ldr	r2, [pc, #388]	; (8003b64 <HAL_GPIO_DeInit+0x1f4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d02b      	beq.n	8003a3a <HAL_GPIO_DeInit+0xca>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a60      	ldr	r2, [pc, #384]	; (8003b68 <HAL_GPIO_DeInit+0x1f8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d025      	beq.n	8003a36 <HAL_GPIO_DeInit+0xc6>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a5f      	ldr	r2, [pc, #380]	; (8003b6c <HAL_GPIO_DeInit+0x1fc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01f      	beq.n	8003a32 <HAL_GPIO_DeInit+0xc2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a5e      	ldr	r2, [pc, #376]	; (8003b70 <HAL_GPIO_DeInit+0x200>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d019      	beq.n	8003a2e <HAL_GPIO_DeInit+0xbe>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a5d      	ldr	r2, [pc, #372]	; (8003b74 <HAL_GPIO_DeInit+0x204>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_DeInit+0xba>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a5c      	ldr	r2, [pc, #368]	; (8003b78 <HAL_GPIO_DeInit+0x208>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00d      	beq.n	8003a26 <HAL_GPIO_DeInit+0xb6>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a5b      	ldr	r2, [pc, #364]	; (8003b7c <HAL_GPIO_DeInit+0x20c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <HAL_GPIO_DeInit+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a5a      	ldr	r2, [pc, #360]	; (8003b80 <HAL_GPIO_DeInit+0x210>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_GPIO_DeInit+0xae>
 8003a1a:	2309      	movs	r3, #9
 8003a1c:	e012      	b.n	8003a44 <HAL_GPIO_DeInit+0xd4>
 8003a1e:	230a      	movs	r3, #10
 8003a20:	e010      	b.n	8003a44 <HAL_GPIO_DeInit+0xd4>
 8003a22:	2308      	movs	r3, #8
 8003a24:	e00e      	b.n	8003a44 <HAL_GPIO_DeInit+0xd4>
 8003a26:	2307      	movs	r3, #7
 8003a28:	e00c      	b.n	8003a44 <HAL_GPIO_DeInit+0xd4>
 8003a2a:	2306      	movs	r3, #6
 8003a2c:	e00a      	b.n	8003a44 <HAL_GPIO_DeInit+0xd4>
 8003a2e:	2305      	movs	r3, #5
 8003a30:	e008      	b.n	8003a44 <HAL_GPIO_DeInit+0xd4>
 8003a32:	2304      	movs	r3, #4
 8003a34:	e006      	b.n	8003a44 <HAL_GPIO_DeInit+0xd4>
 8003a36:	2303      	movs	r3, #3
 8003a38:	e004      	b.n	8003a44 <HAL_GPIO_DeInit+0xd4>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e002      	b.n	8003a44 <HAL_GPIO_DeInit+0xd4>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_GPIO_DeInit+0xd4>
 8003a42:	2300      	movs	r3, #0
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	f002 0203 	and.w	r2, r2, #3
 8003a4a:	0092      	lsls	r2, r2, #2
 8003a4c:	4093      	lsls	r3, r2
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d132      	bne.n	8003aba <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a54:	4b4b      	ldr	r3, [pc, #300]	; (8003b84 <HAL_GPIO_DeInit+0x214>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	4949      	ldr	r1, [pc, #292]	; (8003b84 <HAL_GPIO_DeInit+0x214>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a62:	4b48      	ldr	r3, [pc, #288]	; (8003b84 <HAL_GPIO_DeInit+0x214>)
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	4946      	ldr	r1, [pc, #280]	; (8003b84 <HAL_GPIO_DeInit+0x214>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a70:	4b44      	ldr	r3, [pc, #272]	; (8003b84 <HAL_GPIO_DeInit+0x214>)
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	4942      	ldr	r1, [pc, #264]	; (8003b84 <HAL_GPIO_DeInit+0x214>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a7e:	4b41      	ldr	r3, [pc, #260]	; (8003b84 <HAL_GPIO_DeInit+0x214>)
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	493f      	ldr	r1, [pc, #252]	; (8003b84 <HAL_GPIO_DeInit+0x214>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	220f      	movs	r2, #15
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003a9c:	4a2e      	ldr	r2, [pc, #184]	; (8003b58 <HAL_GPIO_DeInit+0x1e8>)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	482a      	ldr	r0, [pc, #168]	; (8003b58 <HAL_GPIO_DeInit+0x1e8>)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	2103      	movs	r1, #3
 8003ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	401a      	ands	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	08da      	lsrs	r2, r3, #3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3208      	adds	r2, #8
 8003ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	220f      	movs	r2, #15
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	08d2      	lsrs	r2, r2, #3
 8003af0:	4019      	ands	r1, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3208      	adds	r2, #8
 8003af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	2103      	movs	r1, #3
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	2101      	movs	r1, #1
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	401a      	ands	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	2103      	movs	r1, #3
 8003b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	401a      	ands	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b0f      	cmp	r3, #15
 8003b44:	f67f af22 	bls.w	800398c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40013800 	.word	0x40013800
 8003b5c:	40020000 	.word	0x40020000
 8003b60:	40020400 	.word	0x40020400
 8003b64:	40020800 	.word	0x40020800
 8003b68:	40020c00 	.word	0x40020c00
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40021400 	.word	0x40021400
 8003b74:	40021800 	.word	0x40021800
 8003b78:	40021c00 	.word	0x40021c00
 8003b7c:	40022000 	.word	0x40022000
 8003b80:	40022400 	.word	0x40022400
 8003b84:	40013c00 	.word	0x40013c00

08003b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	807b      	strh	r3, [r7, #2]
 8003b94:	4613      	mov	r3, r2
 8003b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b98:	787b      	ldrb	r3, [r7, #1]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b9e:	887a      	ldrh	r2, [r7, #2]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ba4:	e003      	b.n	8003bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ba6:	887b      	ldrh	r3, [r7, #2]
 8003ba8:	041a      	lsls	r2, r3, #16
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	619a      	str	r2, [r3, #24]
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e07f      	b.n	8003cce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f8a9 	bl	8003d3a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2224      	movs	r2, #36	; 0x24
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	e006      	b.n	8003c44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d104      	bne.n	8003c56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6859      	ldr	r1, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <HAL_I2C_Init+0x11c>)
 8003c62:	430b      	orrs	r3, r1
 8003c64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	ea42 0103 	orr.w	r1, r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	021a      	lsls	r2, r3, #8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69d9      	ldr	r1, [r3, #28]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1a      	ldr	r2, [r3, #32]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	02008000 	.word	0x02008000

08003cdc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e021      	b.n	8003d32 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2224      	movs	r2, #36	; 0x24
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f821 	bl	8003d4e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	4611      	mov	r1, r2
 8003d70:	461a      	mov	r2, r3
 8003d72:	4603      	mov	r3, r0
 8003d74:	817b      	strh	r3, [r7, #10]
 8003d76:	460b      	mov	r3, r1
 8003d78:	813b      	strh	r3, [r7, #8]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	f040 80fd 	bne.w	8003f86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_I2C_Mem_Read+0x34>
 8003d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d105      	bne.n	8003da4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0f1      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_I2C_Mem_Read+0x4e>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e0ea      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dba:	f7fe fd9d 	bl	80028f8 <HAL_GetTick>
 8003dbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	2319      	movs	r3, #25
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f95b 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0d5      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2222      	movs	r2, #34	; 0x22
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2240      	movs	r2, #64	; 0x40
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a3a      	ldr	r2, [r7, #32]
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e04:	88f8      	ldrh	r0, [r7, #6]
 8003e06:	893a      	ldrh	r2, [r7, #8]
 8003e08:	8979      	ldrh	r1, [r7, #10]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	4603      	mov	r3, r0
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f8bf 	bl	8003f98 <I2C_RequestMemoryRead>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0ad      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2bff      	cmp	r3, #255	; 0xff
 8003e34:	d90e      	bls.n	8003e54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	22ff      	movs	r2, #255	; 0xff
 8003e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	8979      	ldrh	r1, [r7, #10]
 8003e44:	4b52      	ldr	r3, [pc, #328]	; (8003f90 <HAL_I2C_Mem_Read+0x22c>)
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fa3d 	bl	80042cc <I2C_TransferConfig>
 8003e52:	e00f      	b.n	8003e74 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	8979      	ldrh	r1, [r7, #10]
 8003e66:	4b4a      	ldr	r3, [pc, #296]	; (8003f90 <HAL_I2C_Mem_Read+0x22c>)
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fa2c 	bl	80042cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2104      	movs	r1, #4
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f902 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e07c      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d034      	beq.n	8003f34 <HAL_I2C_Mem_Read+0x1d0>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d130      	bne.n	8003f34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2180      	movs	r1, #128	; 0x80
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f8d3 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e04d      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2bff      	cmp	r3, #255	; 0xff
 8003ef4:	d90e      	bls.n	8003f14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	22ff      	movs	r2, #255	; 0xff
 8003efa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	8979      	ldrh	r1, [r7, #10]
 8003f04:	2300      	movs	r3, #0
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f9dd 	bl	80042cc <I2C_TransferConfig>
 8003f12:	e00f      	b.n	8003f34 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	8979      	ldrh	r1, [r7, #10]
 8003f26:	2300      	movs	r3, #0
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f9cc 	bl	80042cc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d19a      	bne.n	8003e74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f920 	bl	8004188 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e01a      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2220      	movs	r2, #32
 8003f58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6859      	ldr	r1, [r3, #4]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_I2C_Mem_Read+0x230>)
 8003f66:	400b      	ands	r3, r1
 8003f68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e000      	b.n	8003f88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003f86:	2302      	movs	r3, #2
  }
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	80002400 	.word	0x80002400
 8003f94:	fe00e800 	.word	0xfe00e800

08003f98 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	817b      	strh	r3, [r7, #10]
 8003faa:	460b      	mov	r3, r1
 8003fac:	813b      	strh	r3, [r7, #8]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	8979      	ldrh	r1, [r7, #10]
 8003fb8:	4b20      	ldr	r3, [pc, #128]	; (800403c <I2C_RequestMemoryRead+0xa4>)
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f984 	bl	80042cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	69b9      	ldr	r1, [r7, #24]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f89d 	bl	8004108 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e02c      	b.n	8004032 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d105      	bne.n	8003fea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fde:	893b      	ldrh	r3, [r7, #8]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fe8:	e015      	b.n	8004016 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fea:	893b      	ldrh	r3, [r7, #8]
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	69b9      	ldr	r1, [r7, #24]
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f883 	bl	8004108 <I2C_WaitOnTXISFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e012      	b.n	8004032 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800400c:	893b      	ldrh	r3, [r7, #8]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2200      	movs	r2, #0
 800401e:	2140      	movs	r1, #64	; 0x40
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f831 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	80002000 	.word	0x80002000

08004040 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d103      	bne.n	800405e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2200      	movs	r2, #0
 800405c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d007      	beq.n	800407c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	619a      	str	r2, [r3, #24]
  }
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	4613      	mov	r3, r2
 8004096:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004098:	e022      	b.n	80040e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a0:	d01e      	beq.n	80040e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a2:	f7fe fc29 	bl	80028f8 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d302      	bcc.n	80040b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d113      	bne.n	80040e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040bc:	f043 0220 	orr.w	r2, r3, #32
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e00f      	b.n	8004100 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4013      	ands	r3, r2
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d0cd      	beq.n	800409a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004114:	e02c      	b.n	8004170 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f870 	bl	8004200 <I2C_IsAcknowledgeFailed>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e02a      	b.n	8004180 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d01e      	beq.n	8004170 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004132:	f7fe fbe1 	bl	80028f8 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	429a      	cmp	r2, r3
 8004140:	d302      	bcc.n	8004148 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d113      	bne.n	8004170 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e007      	b.n	8004180 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b02      	cmp	r3, #2
 800417c:	d1cb      	bne.n	8004116 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004194:	e028      	b.n	80041e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f830 	bl	8004200 <I2C_IsAcknowledgeFailed>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e026      	b.n	80041f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fe fba5 	bl	80028f8 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d113      	bne.n	80041e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e007      	b.n	80041f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d1cf      	bne.n	8004196 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b10      	cmp	r3, #16
 8004218:	d151      	bne.n	80042be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800421a:	e022      	b.n	8004262 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004222:	d01e      	beq.n	8004262 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004224:	f7fe fb68 	bl	80028f8 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	429a      	cmp	r2, r3
 8004232:	d302      	bcc.n	800423a <I2C_IsAcknowledgeFailed+0x3a>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d113      	bne.n	8004262 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f043 0220 	orr.w	r2, r3, #32
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e02e      	b.n	80042c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b20      	cmp	r3, #32
 800426e:	d1d5      	bne.n	800421c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2210      	movs	r2, #16
 8004276:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2220      	movs	r2, #32
 800427e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff fedd 	bl	8004040 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8004292:	400b      	ands	r3, r1
 8004294:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f043 0204 	orr.w	r2, r3, #4
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	fe00e800 	.word	0xfe00e800

080042cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	607b      	str	r3, [r7, #4]
 80042d6:	460b      	mov	r3, r1
 80042d8:	817b      	strh	r3, [r7, #10]
 80042da:	4613      	mov	r3, r2
 80042dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	0d5b      	lsrs	r3, r3, #21
 80042e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80042ec:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <I2C_TransferConfig+0x58>)
 80042ee:	430b      	orrs	r3, r1
 80042f0:	43db      	mvns	r3, r3
 80042f2:	ea02 0103 	and.w	r1, r2, r3
 80042f6:	897b      	ldrh	r3, [r7, #10]
 80042f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042fc:	7a7b      	ldrb	r3, [r7, #9]
 80042fe:	041b      	lsls	r3, r3, #16
 8004300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	431a      	orrs	r2, r3
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	03ff63ff 	.word	0x03ff63ff

08004328 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e0bf      	b.n	80044ba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8d2 	bl	80044f8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800436a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6999      	ldr	r1, [r3, #24]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004380:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6899      	ldr	r1, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	4b4a      	ldr	r3, [pc, #296]	; (80044c4 <HAL_LTDC_Init+0x19c>)
 800439c:	400b      	ands	r3, r1
 800439e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6899      	ldr	r1, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68d9      	ldr	r1, [r3, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b3e      	ldr	r3, [pc, #248]	; (80044c4 <HAL_LTDC_Init+0x19c>)
 80043ca:	400b      	ands	r3, r1
 80043cc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68d9      	ldr	r1, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1a      	ldr	r2, [r3, #32]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6919      	ldr	r1, [r3, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b33      	ldr	r3, [pc, #204]	; (80044c4 <HAL_LTDC_Init+0x19c>)
 80043f8:	400b      	ands	r3, r1
 80043fa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	041b      	lsls	r3, r3, #16
 8004402:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6919      	ldr	r1, [r3, #16]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6959      	ldr	r1, [r3, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <HAL_LTDC_Init+0x19c>)
 8004426:	400b      	ands	r3, r1
 8004428:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	041b      	lsls	r3, r3, #16
 8004430:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6959      	ldr	r1, [r3, #20]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004458:	041b      	lsls	r3, r3, #16
 800445a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0206 	orr.w	r2, r2, #6
 8004496:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	f000f800 	.word	0xf000f800

080044c8 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f81b 	bl	800450c <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004520:	b5b0      	push	{r4, r5, r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_LTDC_ConfigLayer+0x1a>
 8004536:	2302      	movs	r3, #2
 8004538:	e02c      	b.n	8004594 <HAL_LTDC_ConfigLayer+0x74>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2134      	movs	r1, #52	; 0x34
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	4413      	add	r3, r2
 8004556:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4614      	mov	r4, r2
 800455e:	461d      	mov	r5, r3
 8004560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800456a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f847 	bl	8004608 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2201      	movs	r2, #1
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bdb0      	pop	{r4, r5, r7, pc}

0800459c <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_LTDC_SetAddress+0x1a>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e024      	b.n	8004600 <HAL_LTDC_SetAddress+0x64>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2202      	movs	r2, #2
 80045c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2234      	movs	r2, #52	; 0x34
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	3338      	adds	r3, #56	; 0x38
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6979      	ldr	r1, [r7, #20]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f811 	bl	8004608 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2201      	movs	r2, #1
 80045ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	0c1b      	lsrs	r3, r3, #16
 8004620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004624:	4413      	add	r3, r2
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	01db      	lsls	r3, r3, #7
 8004634:	4413      	add	r3, r2
 8004636:	3384      	adds	r3, #132	; 0x84
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	4611      	mov	r1, r2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	01d2      	lsls	r2, r2, #7
 8004644:	440a      	add	r2, r1
 8004646:	3284      	adds	r2, #132	; 0x84
 8004648:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800464c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465e:	4413      	add	r3, r2
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4619      	mov	r1, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	01db      	lsls	r3, r3, #7
 800466c:	440b      	add	r3, r1
 800466e:	3384      	adds	r3, #132	; 0x84
 8004670:	4619      	mov	r1, r3
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4313      	orrs	r3, r2
 8004676:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004686:	4413      	add	r3, r2
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	01db      	lsls	r3, r3, #7
 8004696:	4413      	add	r3, r2
 8004698:	3384      	adds	r3, #132	; 0x84
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	4611      	mov	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	01d2      	lsls	r2, r2, #7
 80046a6:	440a      	add	r2, r1
 80046a8:	3284      	adds	r2, #132	; 0x84
 80046aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80046ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046be:	4413      	add	r3, r2
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4619      	mov	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	01db      	lsls	r3, r3, #7
 80046cc:	440b      	add	r3, r1
 80046ce:	3384      	adds	r3, #132	; 0x84
 80046d0:	4619      	mov	r1, r3
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	01db      	lsls	r3, r3, #7
 80046e2:	4413      	add	r3, r2
 80046e4:	3384      	adds	r3, #132	; 0x84
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	4611      	mov	r1, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	01d2      	lsls	r2, r2, #7
 80046f2:	440a      	add	r2, r1
 80046f4:	3284      	adds	r2, #132	; 0x84
 80046f6:	f023 0307 	bic.w	r3, r3, #7
 80046fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	01db      	lsls	r3, r3, #7
 8004706:	4413      	add	r3, r2
 8004708:	3384      	adds	r3, #132	; 0x84
 800470a:	461a      	mov	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004722:	041b      	lsls	r3, r3, #16
 8004724:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	061b      	lsls	r3, r3, #24
 800472c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	01db      	lsls	r3, r3, #7
 8004738:	4413      	add	r3, r2
 800473a:	3384      	adds	r3, #132	; 0x84
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	01db      	lsls	r3, r3, #7
 8004748:	4413      	add	r3, r2
 800474a:	3384      	adds	r3, #132	; 0x84
 800474c:	461a      	mov	r2, r3
 800474e:	2300      	movs	r3, #0
 8004750:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004758:	461a      	mov	r2, r3
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	431a      	orrs	r2, r3
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4619      	mov	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	01db      	lsls	r3, r3, #7
 800476c:	440b      	add	r3, r1
 800476e:	3384      	adds	r3, #132	; 0x84
 8004770:	4619      	mov	r1, r3
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	01db      	lsls	r3, r3, #7
 8004782:	4413      	add	r3, r2
 8004784:	3384      	adds	r3, #132	; 0x84
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	4611      	mov	r1, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	01d2      	lsls	r2, r2, #7
 8004792:	440a      	add	r2, r1
 8004794:	3284      	adds	r2, #132	; 0x84
 8004796:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800479a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	01db      	lsls	r3, r3, #7
 80047a6:	4413      	add	r3, r2
 80047a8:	3384      	adds	r3, #132	; 0x84
 80047aa:	461a      	mov	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	01db      	lsls	r3, r3, #7
 80047bc:	4413      	add	r3, r2
 80047be:	3384      	adds	r3, #132	; 0x84
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4619      	mov	r1, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	01db      	lsls	r3, r3, #7
 80047cc:	440b      	add	r3, r1
 80047ce:	3384      	adds	r3, #132	; 0x84
 80047d0:	4619      	mov	r1, r3
 80047d2:	4b58      	ldr	r3, [pc, #352]	; (8004934 <LTDC_SetConfig+0x32c>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	68f9      	ldr	r1, [r7, #12]
 80047e2:	6809      	ldr	r1, [r1, #0]
 80047e4:	4608      	mov	r0, r1
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	01c9      	lsls	r1, r1, #7
 80047ea:	4401      	add	r1, r0
 80047ec:	3184      	adds	r1, #132	; 0x84
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	01db      	lsls	r3, r3, #7
 80047fc:	4413      	add	r3, r2
 80047fe:	3384      	adds	r3, #132	; 0x84
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	01db      	lsls	r3, r3, #7
 800480c:	4413      	add	r3, r2
 800480e:	3384      	adds	r3, #132	; 0x84
 8004810:	461a      	mov	r2, r3
 8004812:	2300      	movs	r3, #0
 8004814:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	01db      	lsls	r3, r3, #7
 8004820:	4413      	add	r3, r2
 8004822:	3384      	adds	r3, #132	; 0x84
 8004824:	461a      	mov	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004834:	2304      	movs	r3, #4
 8004836:	61fb      	str	r3, [r7, #28]
 8004838:	e01b      	b.n	8004872 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d102      	bne.n	8004848 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004842:	2303      	movs	r3, #3
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	e014      	b.n	8004872 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d00b      	beq.n	8004868 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004854:	2b02      	cmp	r3, #2
 8004856:	d007      	beq.n	8004868 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800485c:	2b03      	cmp	r3, #3
 800485e:	d003      	beq.n	8004868 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004864:	2b07      	cmp	r3, #7
 8004866:	d102      	bne.n	800486e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004868:	2302      	movs	r3, #2
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	e001      	b.n	8004872 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800486e:	2301      	movs	r3, #1
 8004870:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	01db      	lsls	r3, r3, #7
 800487c:	4413      	add	r3, r2
 800487e:	3384      	adds	r3, #132	; 0x84
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	4611      	mov	r1, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	01d2      	lsls	r2, r2, #7
 800488c:	440a      	add	r2, r1
 800488e:	3284      	adds	r2, #132	; 0x84
 8004890:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004894:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	fb02 f303 	mul.w	r3, r2, r3
 80048a0:	041a      	lsls	r2, r3, #16
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	6859      	ldr	r1, [r3, #4]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	1acb      	subs	r3, r1, r3
 80048ac:	69f9      	ldr	r1, [r7, #28]
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	3303      	adds	r3, #3
 80048b4:	68f9      	ldr	r1, [r7, #12]
 80048b6:	6809      	ldr	r1, [r1, #0]
 80048b8:	4608      	mov	r0, r1
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	01c9      	lsls	r1, r1, #7
 80048be:	4401      	add	r1, r0
 80048c0:	3184      	adds	r1, #132	; 0x84
 80048c2:	4313      	orrs	r3, r2
 80048c4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	01db      	lsls	r3, r3, #7
 80048d0:	4413      	add	r3, r2
 80048d2:	3384      	adds	r3, #132	; 0x84
 80048d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	01db      	lsls	r3, r3, #7
 80048e0:	440b      	add	r3, r1
 80048e2:	3384      	adds	r3, #132	; 0x84
 80048e4:	4619      	mov	r1, r3
 80048e6:	4b14      	ldr	r3, [pc, #80]	; (8004938 <LTDC_SetConfig+0x330>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	01db      	lsls	r3, r3, #7
 80048f6:	4413      	add	r3, r2
 80048f8:	3384      	adds	r3, #132	; 0x84
 80048fa:	461a      	mov	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	01db      	lsls	r3, r3, #7
 800490c:	4413      	add	r3, r2
 800490e:	3384      	adds	r3, #132	; 0x84
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	4611      	mov	r1, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	01d2      	lsls	r2, r2, #7
 800491c:	440a      	add	r2, r1
 800491e:	3284      	adds	r2, #132	; 0x84
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6013      	str	r3, [r2, #0]
}
 8004926:	bf00      	nop
 8004928:	3724      	adds	r7, #36	; 0x24
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	fffff8f8 	.word	0xfffff8f8
 8004938:	fffff800 	.word	0xfffff800

0800493c <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800494e:	2200      	movs	r2, #0
 8004950:	e001      	b.n	8004956 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8004952:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d102      	bne.n	8004968 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8004962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004966:	e000      	b.n	800496a <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8004968:	2200      	movs	r2, #0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8004976:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800497a:	e000      	b.n	800497e <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 800497c:	2200      	movs	r2, #0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004986:	1e5a      	subs	r2, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	4413      	add	r3, r2
 8004996:	1e5a      	subs	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	441a      	add	r2, r3
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	4413      	add	r3, r2
 80049ac:	1e5a      	subs	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	441a      	add	r2, r3
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	441a      	add	r2, r3
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	4413      	add	r3, r2
 80049c8:	1e5a      	subs	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a04      	ldr	r2, [pc, #16]	; (80049f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ea:	6013      	str	r3, [r2, #0]
}
 80049ec:	bf00      	nop
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40007000 	.word	0x40007000

080049fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	4a22      	ldr	r2, [pc, #136]	; (8004a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a10:	6413      	str	r3, [r2, #64]	; 0x40
 8004a12:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a1e:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1d      	ldr	r2, [pc, #116]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a2a:	f7fd ff65 	bl	80028f8 <HAL_GetTick>
 8004a2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a30:	e009      	b.n	8004a46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a32:	f7fd ff61 	bl	80028f8 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a40:	d901      	bls.n	8004a46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e022      	b.n	8004a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a46:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a52:	d1ee      	bne.n	8004a32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a54:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0f      	ldr	r2, [pc, #60]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a60:	f7fd ff4a 	bl	80028f8 <HAL_GetTick>
 8004a64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a66:	e009      	b.n	8004a7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a68:	f7fd ff46 	bl	80028f8 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a76:	d901      	bls.n	8004a7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e007      	b.n	8004a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a88:	d1ee      	bne.n	8004a68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40007000 	.word	0x40007000

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e29b      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8087 	beq.w	8004bce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac0:	4b96      	ldr	r3, [pc, #600]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d00c      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004acc:	4b93      	ldr	r3, [pc, #588]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 030c 	and.w	r3, r3, #12
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d112      	bne.n	8004afe <HAL_RCC_OscConfig+0x62>
 8004ad8:	4b90      	ldr	r3, [pc, #576]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae4:	d10b      	bne.n	8004afe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae6:	4b8d      	ldr	r3, [pc, #564]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d06c      	beq.n	8004bcc <HAL_RCC_OscConfig+0x130>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d168      	bne.n	8004bcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e275      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b06:	d106      	bne.n	8004b16 <HAL_RCC_OscConfig+0x7a>
 8004b08:	4b84      	ldr	r3, [pc, #528]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a83      	ldr	r2, [pc, #524]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e02e      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0x9c>
 8004b1e:	4b7f      	ldr	r3, [pc, #508]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a7e      	ldr	r2, [pc, #504]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b7c      	ldr	r3, [pc, #496]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a7b      	ldr	r2, [pc, #492]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e01d      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCC_OscConfig+0xc0>
 8004b42:	4b76      	ldr	r3, [pc, #472]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a75      	ldr	r2, [pc, #468]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4b73      	ldr	r3, [pc, #460]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a72      	ldr	r2, [pc, #456]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e00b      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b5c:	4b6f      	ldr	r3, [pc, #444]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a6e      	ldr	r2, [pc, #440]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b6c      	ldr	r3, [pc, #432]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a6b      	ldr	r2, [pc, #428]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fd febc 	bl	80028f8 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fd feb8 	bl	80028f8 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e229      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b96:	4b61      	ldr	r3, [pc, #388]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0xe8>
 8004ba2:	e014      	b.n	8004bce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fea8 	bl	80028f8 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fd fea4 	bl	80028f8 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e215      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bbe:	4b57      	ldr	r3, [pc, #348]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x110>
 8004bca:	e000      	b.n	8004bce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d069      	beq.n	8004cae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bda:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be6:	4b4d      	ldr	r3, [pc, #308]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d11c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x190>
 8004bf2:	4b4a      	ldr	r3, [pc, #296]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfe:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_RCC_OscConfig+0x17a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e1e9      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c16:	4b41      	ldr	r3, [pc, #260]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	493d      	ldr	r1, [pc, #244]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2a:	e040      	b.n	8004cae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d023      	beq.n	8004c7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c34:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a38      	ldr	r2, [pc, #224]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fd fe5a 	bl	80028f8 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c48:	f7fd fe56 	bl	80028f8 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e1c7      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5a:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c66:	4b2d      	ldr	r3, [pc, #180]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4929      	ldr	r1, [pc, #164]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	600b      	str	r3, [r1, #0]
 8004c7a:	e018      	b.n	8004cae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7c:	4b27      	ldr	r3, [pc, #156]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fd fe36 	bl	80028f8 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c90:	f7fd fe32 	bl	80028f8 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e1a3      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca2:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d038      	beq.n	8004d2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d019      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc2:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cce:	f7fd fe13 	bl	80028f8 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd6:	f7fd fe0f 	bl	80028f8 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e180      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x23a>
 8004cf4:	e01a      	b.n	8004d2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfa:	4a08      	ldr	r2, [pc, #32]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d02:	f7fd fdf9 	bl	80028f8 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0a:	f7fd fdf5 	bl	80028f8 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d903      	bls.n	8004d20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e166      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
 8004d1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d20:	4b92      	ldr	r3, [pc, #584]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1ee      	bne.n	8004d0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80a4 	beq.w	8004e82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3a:	4b8c      	ldr	r3, [pc, #560]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10d      	bne.n	8004d62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	4b89      	ldr	r3, [pc, #548]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a88      	ldr	r2, [pc, #544]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	; 0x40
 8004d52:	4b86      	ldr	r3, [pc, #536]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d62:	4b83      	ldr	r3, [pc, #524]	; (8004f70 <HAL_RCC_OscConfig+0x4d4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d118      	bne.n	8004da0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d6e:	4b80      	ldr	r3, [pc, #512]	; (8004f70 <HAL_RCC_OscConfig+0x4d4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a7f      	ldr	r2, [pc, #508]	; (8004f70 <HAL_RCC_OscConfig+0x4d4>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7a:	f7fd fdbd 	bl	80028f8 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7fd fdb9 	bl	80028f8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b64      	cmp	r3, #100	; 0x64
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e12a      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d94:	4b76      	ldr	r3, [pc, #472]	; (8004f70 <HAL_RCC_OscConfig+0x4d4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <HAL_RCC_OscConfig+0x31a>
 8004da8:	4b70      	ldr	r3, [pc, #448]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dac:	4a6f      	ldr	r2, [pc, #444]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	; 0x70
 8004db4:	e02d      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x33c>
 8004dbe:	4b6b      	ldr	r3, [pc, #428]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	4a6a      	ldr	r2, [pc, #424]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dca:	4b68      	ldr	r3, [pc, #416]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dce:	4a67      	ldr	r2, [pc, #412]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dd0:	f023 0304 	bic.w	r3, r3, #4
 8004dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd6:	e01c      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b05      	cmp	r3, #5
 8004dde:	d10c      	bne.n	8004dfa <HAL_RCC_OscConfig+0x35e>
 8004de0:	4b62      	ldr	r3, [pc, #392]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	4a61      	ldr	r2, [pc, #388]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004de6:	f043 0304 	orr.w	r3, r3, #4
 8004dea:	6713      	str	r3, [r2, #112]	; 0x70
 8004dec:	4b5f      	ldr	r3, [pc, #380]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	4a5e      	ldr	r2, [pc, #376]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6713      	str	r3, [r2, #112]	; 0x70
 8004df8:	e00b      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
 8004dfa:	4b5c      	ldr	r3, [pc, #368]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	4a5b      	ldr	r2, [pc, #364]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	6713      	str	r3, [r2, #112]	; 0x70
 8004e06:	4b59      	ldr	r3, [pc, #356]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0a:	4a58      	ldr	r2, [pc, #352]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e0c:	f023 0304 	bic.w	r3, r3, #4
 8004e10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d015      	beq.n	8004e46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1a:	f7fd fd6d 	bl	80028f8 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fd fd69 	bl	80028f8 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0d8      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e38:	4b4c      	ldr	r3, [pc, #304]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ee      	beq.n	8004e22 <HAL_RCC_OscConfig+0x386>
 8004e44:	e014      	b.n	8004e70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e46:	f7fd fd57 	bl	80028f8 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e4c:	e00a      	b.n	8004e64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4e:	f7fd fd53 	bl	80028f8 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e0c2      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e64:	4b41      	ldr	r3, [pc, #260]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ee      	bne.n	8004e4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e76:	4b3d      	ldr	r3, [pc, #244]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	4a3c      	ldr	r2, [pc, #240]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80ae 	beq.w	8004fe8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e8c:	4b37      	ldr	r3, [pc, #220]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 030c 	and.w	r3, r3, #12
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d06d      	beq.n	8004f74 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d14b      	bne.n	8004f38 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea0:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a31      	ldr	r2, [pc, #196]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eac:	f7fd fd24 	bl	80028f8 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb4:	f7fd fd20 	bl	80028f8 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e091      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec6:	4b29      	ldr	r3, [pc, #164]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69da      	ldr	r2, [r3, #28]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	019b      	lsls	r3, r3, #6
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	3b01      	subs	r3, #1
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	061b      	lsls	r3, r3, #24
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	071b      	lsls	r3, r3, #28
 8004efe:	491b      	ldr	r1, [pc, #108]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fd fcf2 	bl	80028f8 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fd fcee 	bl	80028f8 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e05f      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f2a:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x47c>
 8004f36:	e057      	b.n	8004fe8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fd fcd8 	bl	80028f8 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fd fcd4 	bl	80028f8 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e045      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	4b03      	ldr	r3, [pc, #12]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x4b0>
 8004f6a:	e03d      	b.n	8004fe8 <HAL_RCC_OscConfig+0x54c>
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f74:	4b1f      	ldr	r3, [pc, #124]	; (8004ff4 <HAL_RCC_OscConfig+0x558>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d030      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d129      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d122      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004faa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d119      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d10f      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d107      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800

08004ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0d0      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005010:	4b6a      	ldr	r3, [pc, #424]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d910      	bls.n	8005040 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b67      	ldr	r3, [pc, #412]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 020f 	bic.w	r2, r3, #15
 8005026:	4965      	ldr	r1, [pc, #404]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	4313      	orrs	r3, r2
 800502c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502e:	4b63      	ldr	r3, [pc, #396]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d001      	beq.n	8005040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0b8      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d020      	beq.n	800508e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005058:	4b59      	ldr	r3, [pc, #356]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	4a58      	ldr	r2, [pc, #352]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800505e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005062:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005070:	4b53      	ldr	r3, [pc, #332]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	4a52      	ldr	r2, [pc, #328]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005076:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800507a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800507c:	4b50      	ldr	r3, [pc, #320]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	494d      	ldr	r1, [pc, #308]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800508a:	4313      	orrs	r3, r2
 800508c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d040      	beq.n	800511c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d107      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a2:	4b47      	ldr	r3, [pc, #284]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d115      	bne.n	80050da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e07f      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ba:	4b41      	ldr	r3, [pc, #260]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e073      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ca:	4b3d      	ldr	r3, [pc, #244]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e06b      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050da:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4936      	ldr	r1, [pc, #216]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ec:	f7fd fc04 	bl	80028f8 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fd fc00 	bl	80028f8 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e053      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 020c 	and.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	429a      	cmp	r2, r3
 800511a:	d1eb      	bne.n	80050f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800511c:	4b27      	ldr	r3, [pc, #156]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d210      	bcs.n	800514c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b24      	ldr	r3, [pc, #144]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 020f 	bic.w	r2, r3, #15
 8005132:	4922      	ldr	r1, [pc, #136]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4313      	orrs	r3, r2
 8005138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513a:	4b20      	ldr	r3, [pc, #128]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d001      	beq.n	800514c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e032      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d008      	beq.n	800516a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005158:	4b19      	ldr	r3, [pc, #100]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	4916      	ldr	r1, [pc, #88]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005166:	4313      	orrs	r3, r2
 8005168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d009      	beq.n	800518a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005176:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	490e      	ldr	r1, [pc, #56]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005186:	4313      	orrs	r3, r2
 8005188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800518a:	f000 f821 	bl	80051d0 <HAL_RCC_GetSysClockFreq>
 800518e:	4602      	mov	r2, r0
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	091b      	lsrs	r3, r3, #4
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	490a      	ldr	r1, [pc, #40]	; (80051c4 <HAL_RCC_ClockConfig+0x1cc>)
 800519c:	5ccb      	ldrb	r3, [r1, r3]
 800519e:	fa22 f303 	lsr.w	r3, r2, r3
 80051a2:	4a09      	ldr	r2, [pc, #36]	; (80051c8 <HAL_RCC_ClockConfig+0x1d0>)
 80051a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <HAL_RCC_ClockConfig+0x1d4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fd fb60 	bl	8002870 <HAL_InitTick>

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40023c00 	.word	0x40023c00
 80051c0:	40023800 	.word	0x40023800
 80051c4:	0800b4b4 	.word	0x0800b4b4
 80051c8:	20000000 	.word	0x20000000
 80051cc:	20000004 	.word	0x20000004

080051d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d0:	b5b0      	push	{r4, r5, r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051d6:	2100      	movs	r1, #0
 80051d8:	6079      	str	r1, [r7, #4]
 80051da:	2100      	movs	r1, #0
 80051dc:	60f9      	str	r1, [r7, #12]
 80051de:	2100      	movs	r1, #0
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80051e2:	2100      	movs	r1, #0
 80051e4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051e6:	4952      	ldr	r1, [pc, #328]	; (8005330 <HAL_RCC_GetSysClockFreq+0x160>)
 80051e8:	6889      	ldr	r1, [r1, #8]
 80051ea:	f001 010c 	and.w	r1, r1, #12
 80051ee:	2908      	cmp	r1, #8
 80051f0:	d00d      	beq.n	800520e <HAL_RCC_GetSysClockFreq+0x3e>
 80051f2:	2908      	cmp	r1, #8
 80051f4:	f200 8094 	bhi.w	8005320 <HAL_RCC_GetSysClockFreq+0x150>
 80051f8:	2900      	cmp	r1, #0
 80051fa:	d002      	beq.n	8005202 <HAL_RCC_GetSysClockFreq+0x32>
 80051fc:	2904      	cmp	r1, #4
 80051fe:	d003      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x38>
 8005200:	e08e      	b.n	8005320 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005202:	4b4c      	ldr	r3, [pc, #304]	; (8005334 <HAL_RCC_GetSysClockFreq+0x164>)
 8005204:	60bb      	str	r3, [r7, #8]
      break;
 8005206:	e08e      	b.n	8005326 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005208:	4b4b      	ldr	r3, [pc, #300]	; (8005338 <HAL_RCC_GetSysClockFreq+0x168>)
 800520a:	60bb      	str	r3, [r7, #8]
      break;
 800520c:	e08b      	b.n	8005326 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800520e:	4948      	ldr	r1, [pc, #288]	; (8005330 <HAL_RCC_GetSysClockFreq+0x160>)
 8005210:	6849      	ldr	r1, [r1, #4]
 8005212:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005216:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005218:	4945      	ldr	r1, [pc, #276]	; (8005330 <HAL_RCC_GetSysClockFreq+0x160>)
 800521a:	6849      	ldr	r1, [r1, #4]
 800521c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005220:	2900      	cmp	r1, #0
 8005222:	d024      	beq.n	800526e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005224:	4942      	ldr	r1, [pc, #264]	; (8005330 <HAL_RCC_GetSysClockFreq+0x160>)
 8005226:	6849      	ldr	r1, [r1, #4]
 8005228:	0989      	lsrs	r1, r1, #6
 800522a:	4608      	mov	r0, r1
 800522c:	f04f 0100 	mov.w	r1, #0
 8005230:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005234:	f04f 0500 	mov.w	r5, #0
 8005238:	ea00 0204 	and.w	r2, r0, r4
 800523c:	ea01 0305 	and.w	r3, r1, r5
 8005240:	493d      	ldr	r1, [pc, #244]	; (8005338 <HAL_RCC_GetSysClockFreq+0x168>)
 8005242:	fb01 f003 	mul.w	r0, r1, r3
 8005246:	2100      	movs	r1, #0
 8005248:	fb01 f102 	mul.w	r1, r1, r2
 800524c:	1844      	adds	r4, r0, r1
 800524e:	493a      	ldr	r1, [pc, #232]	; (8005338 <HAL_RCC_GetSysClockFreq+0x168>)
 8005250:	fba2 0101 	umull	r0, r1, r2, r1
 8005254:	1863      	adds	r3, r4, r1
 8005256:	4619      	mov	r1, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	461a      	mov	r2, r3
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	f7fb f846 	bl	80002f0 <__aeabi_uldivmod>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4613      	mov	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e04a      	b.n	8005304 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800526e:	4b30      	ldr	r3, [pc, #192]	; (8005330 <HAL_RCC_GetSysClockFreq+0x160>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	099b      	lsrs	r3, r3, #6
 8005274:	461a      	mov	r2, r3
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800527e:	f04f 0100 	mov.w	r1, #0
 8005282:	ea02 0400 	and.w	r4, r2, r0
 8005286:	ea03 0501 	and.w	r5, r3, r1
 800528a:	4620      	mov	r0, r4
 800528c:	4629      	mov	r1, r5
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	014b      	lsls	r3, r1, #5
 8005298:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800529c:	0142      	lsls	r2, r0, #5
 800529e:	4610      	mov	r0, r2
 80052a0:	4619      	mov	r1, r3
 80052a2:	1b00      	subs	r0, r0, r4
 80052a4:	eb61 0105 	sbc.w	r1, r1, r5
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	018b      	lsls	r3, r1, #6
 80052b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052b6:	0182      	lsls	r2, r0, #6
 80052b8:	1a12      	subs	r2, r2, r0
 80052ba:	eb63 0301 	sbc.w	r3, r3, r1
 80052be:	f04f 0000 	mov.w	r0, #0
 80052c2:	f04f 0100 	mov.w	r1, #0
 80052c6:	00d9      	lsls	r1, r3, #3
 80052c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052cc:	00d0      	lsls	r0, r2, #3
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	1912      	adds	r2, r2, r4
 80052d4:	eb45 0303 	adc.w	r3, r5, r3
 80052d8:	f04f 0000 	mov.w	r0, #0
 80052dc:	f04f 0100 	mov.w	r1, #0
 80052e0:	0299      	lsls	r1, r3, #10
 80052e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052e6:	0290      	lsls	r0, r2, #10
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4610      	mov	r0, r2
 80052ee:	4619      	mov	r1, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	f7fa fffa 	bl	80002f0 <__aeabi_uldivmod>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4613      	mov	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005304:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <HAL_RCC_GetSysClockFreq+0x160>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	0c1b      	lsrs	r3, r3, #16
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	3301      	adds	r3, #1
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	fbb2 f3f3 	udiv	r3, r2, r3
 800531c:	60bb      	str	r3, [r7, #8]
      break;
 800531e:	e002      	b.n	8005326 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005320:	4b04      	ldr	r3, [pc, #16]	; (8005334 <HAL_RCC_GetSysClockFreq+0x164>)
 8005322:	60bb      	str	r3, [r7, #8]
      break;
 8005324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005326:	68bb      	ldr	r3, [r7, #8]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bdb0      	pop	{r4, r5, r7, pc}
 8005330:	40023800 	.word	0x40023800
 8005334:	00f42400 	.word	0x00f42400
 8005338:	017d7840 	.word	0x017d7840

0800533c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005340:	4b03      	ldr	r3, [pc, #12]	; (8005350 <HAL_RCC_GetHCLKFreq+0x14>)
 8005342:	681b      	ldr	r3, [r3, #0]
}
 8005344:	4618      	mov	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20000000 	.word	0x20000000

08005354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005358:	f7ff fff0 	bl	800533c <HAL_RCC_GetHCLKFreq>
 800535c:	4602      	mov	r2, r0
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	0a9b      	lsrs	r3, r3, #10
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	4903      	ldr	r1, [pc, #12]	; (8005378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800536a:	5ccb      	ldrb	r3, [r1, r3]
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40023800 	.word	0x40023800
 8005378:	0800b4c4 	.word	0x0800b4c4

0800537c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005380:	f7ff ffdc 	bl	800533c <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0b5b      	lsrs	r3, r3, #13
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4903      	ldr	r1, [pc, #12]	; (80053a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40023800 	.word	0x40023800
 80053a0:	0800b4c4 	.word	0x0800b4c4

080053a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053bc:	2300      	movs	r3, #0
 80053be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d012      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053cc:	4b69      	ldr	r3, [pc, #420]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	4a68      	ldr	r2, [pc, #416]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053d6:	6093      	str	r3, [r2, #8]
 80053d8:	4b66      	ldr	r3, [pc, #408]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e0:	4964      	ldr	r1, [pc, #400]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80053ee:	2301      	movs	r3, #1
 80053f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d017      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053fe:	4b5d      	ldr	r3, [pc, #372]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005404:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540c:	4959      	ldr	r1, [pc, #356]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800541c:	d101      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800541e:	2301      	movs	r3, #1
 8005420:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800542a:	2301      	movs	r3, #1
 800542c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d017      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800543a:	4b4e      	ldr	r3, [pc, #312]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005440:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	494a      	ldr	r1, [pc, #296]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005458:	d101      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800545a:	2301      	movs	r3, #1
 800545c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005466:	2301      	movs	r3, #1
 8005468:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005476:	2301      	movs	r3, #1
 8005478:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 808b 	beq.w	800559e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005488:	4b3a      	ldr	r3, [pc, #232]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	4a39      	ldr	r2, [pc, #228]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005492:	6413      	str	r3, [r2, #64]	; 0x40
 8005494:	4b37      	ldr	r3, [pc, #220]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054a0:	4b35      	ldr	r3, [pc, #212]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a34      	ldr	r2, [pc, #208]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ac:	f7fd fa24 	bl	80028f8 <HAL_GetTick>
 80054b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b4:	f7fd fa20 	bl	80028f8 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	; 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e38f      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054c6:	4b2c      	ldr	r3, [pc, #176]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054d2:	4b28      	ldr	r3, [pc, #160]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d035      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d02e      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054f0:	4b20      	ldr	r3, [pc, #128]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054fa:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fe:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005504:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005506:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550a:	4a1a      	ldr	r2, [pc, #104]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005510:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005512:	4a18      	ldr	r2, [pc, #96]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005518:	4b16      	ldr	r3, [pc, #88]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800551a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b01      	cmp	r3, #1
 8005522:	d114      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005524:	f7fd f9e8 	bl	80028f8 <HAL_GetTick>
 8005528:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552a:	e00a      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800552c:	f7fd f9e4 	bl	80028f8 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f241 3288 	movw	r2, #5000	; 0x1388
 800553a:	4293      	cmp	r3, r2
 800553c:	d901      	bls.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e351      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005542:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0ee      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800555a:	d111      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800555c:	4b05      	ldr	r3, [pc, #20]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800556a:	400b      	ands	r3, r1
 800556c:	4901      	ldr	r1, [pc, #4]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556e:	4313      	orrs	r3, r2
 8005570:	608b      	str	r3, [r1, #8]
 8005572:	e00b      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005574:	40023800 	.word	0x40023800
 8005578:	40007000 	.word	0x40007000
 800557c:	0ffffcff 	.word	0x0ffffcff
 8005580:	4bb3      	ldr	r3, [pc, #716]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	4ab2      	ldr	r2, [pc, #712]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005586:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800558a:	6093      	str	r3, [r2, #8]
 800558c:	4bb0      	ldr	r3, [pc, #704]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800558e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005598:	49ad      	ldr	r1, [pc, #692]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800559a:	4313      	orrs	r3, r2
 800559c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d010      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055aa:	4ba9      	ldr	r3, [pc, #676]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b0:	4aa7      	ldr	r2, [pc, #668]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80055ba:	4ba5      	ldr	r3, [pc, #660]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	49a2      	ldr	r1, [pc, #648]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055d8:	4b9d      	ldr	r3, [pc, #628]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e6:	499a      	ldr	r1, [pc, #616]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055fa:	4b95      	ldr	r3, [pc, #596]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005600:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005608:	4991      	ldr	r1, [pc, #580]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800561c:	4b8c      	ldr	r3, [pc, #560]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800562a:	4989      	ldr	r1, [pc, #548]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800563e:	4b84      	ldr	r3, [pc, #528]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005644:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564c:	4980      	ldr	r1, [pc, #512]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005660:	4b7b      	ldr	r3, [pc, #492]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005666:	f023 0203 	bic.w	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	4978      	ldr	r1, [pc, #480]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005682:	4b73      	ldr	r3, [pc, #460]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005688:	f023 020c 	bic.w	r2, r3, #12
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005690:	496f      	ldr	r1, [pc, #444]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056a4:	4b6a      	ldr	r3, [pc, #424]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b2:	4967      	ldr	r1, [pc, #412]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056c6:	4b62      	ldr	r3, [pc, #392]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d4:	495e      	ldr	r1, [pc, #376]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056e8:	4b59      	ldr	r3, [pc, #356]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	4956      	ldr	r1, [pc, #344]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800570a:	4b51      	ldr	r3, [pc, #324]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800570c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005710:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005718:	494d      	ldr	r1, [pc, #308]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00a      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800572c:	4b48      	ldr	r3, [pc, #288]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005732:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573a:	4945      	ldr	r1, [pc, #276]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800573c:	4313      	orrs	r3, r2
 800573e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800574e:	4b40      	ldr	r3, [pc, #256]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005754:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575c:	493c      	ldr	r1, [pc, #240]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00a      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005770:	4b37      	ldr	r3, [pc, #220]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005776:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800577e:	4934      	ldr	r1, [pc, #208]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005780:	4313      	orrs	r3, r2
 8005782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d011      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005792:	4b2f      	ldr	r3, [pc, #188]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005798:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057a0:	492b      	ldr	r1, [pc, #172]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b0:	d101      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80057b2:	2301      	movs	r3, #1
 80057b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80057c2:	2301      	movs	r3, #1
 80057c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057d2:	4b1f      	ldr	r3, [pc, #124]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e0:	491b      	ldr	r1, [pc, #108]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00b      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057f4:	4b16      	ldr	r3, [pc, #88]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005804:	4912      	ldr	r1, [pc, #72]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00b      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005818:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005828:	4909      	ldr	r1, [pc, #36]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00f      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800583c:	4b04      	ldr	r3, [pc, #16]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800583e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005842:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584c:	e002      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800584e:	bf00      	nop
 8005850:	40023800 	.word	0x40023800
 8005854:	4986      	ldr	r1, [pc, #536]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005868:	4b81      	ldr	r3, [pc, #516]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800586a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800586e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005878:	497d      	ldr	r1, [pc, #500]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d006      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80d6 	beq.w	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005894:	4b76      	ldr	r3, [pc, #472]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a75      	ldr	r2, [pc, #468]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800589a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800589e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a0:	f7fd f82a 	bl	80028f8 <HAL_GetTick>
 80058a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058a8:	f7fd f826 	bl	80028f8 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b64      	cmp	r3, #100	; 0x64
 80058b4:	d901      	bls.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e195      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058ba:	4b6d      	ldr	r3, [pc, #436]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d021      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d11d      	bne.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058da:	4b65      	ldr	r3, [pc, #404]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058e8:	4b61      	ldr	r3, [pc, #388]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ee:	0e1b      	lsrs	r3, r3, #24
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	019a      	lsls	r2, r3, #6
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	431a      	orrs	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	061b      	lsls	r3, r3, #24
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	071b      	lsls	r3, r3, #28
 800590e:	4958      	ldr	r1, [pc, #352]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d004      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592a:	d00a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005934:	2b00      	cmp	r3, #0
 8005936:	d02e      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005940:	d129      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005942:	4b4b      	ldr	r3, [pc, #300]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005948:	0c1b      	lsrs	r3, r3, #16
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005950:	4b47      	ldr	r3, [pc, #284]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005956:	0f1b      	lsrs	r3, r3, #28
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	019a      	lsls	r2, r3, #6
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	041b      	lsls	r3, r3, #16
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	061b      	lsls	r3, r3, #24
 8005970:	431a      	orrs	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	071b      	lsls	r3, r3, #28
 8005976:	493e      	ldr	r1, [pc, #248]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800597e:	4b3c      	ldr	r3, [pc, #240]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005984:	f023 021f 	bic.w	r2, r3, #31
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	3b01      	subs	r3, #1
 800598e:	4938      	ldr	r1, [pc, #224]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d01d      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059a2:	4b33      	ldr	r3, [pc, #204]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a8:	0e1b      	lsrs	r3, r3, #24
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059b0:	4b2f      	ldr	r3, [pc, #188]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b6:	0f1b      	lsrs	r3, r3, #28
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	019a      	lsls	r2, r3, #6
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	431a      	orrs	r2, r3
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	061b      	lsls	r3, r3, #24
 80059d0:	431a      	orrs	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	071b      	lsls	r3, r3, #28
 80059d6:	4926      	ldr	r1, [pc, #152]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d011      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	019a      	lsls	r2, r3, #6
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	041b      	lsls	r3, r3, #16
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	061b      	lsls	r3, r3, #24
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	071b      	lsls	r3, r3, #28
 8005a06:	491a      	ldr	r1, [pc, #104]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a0e:	4b18      	ldr	r3, [pc, #96]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a17      	ldr	r2, [pc, #92]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a1a:	f7fc ff6d 	bl	80028f8 <HAL_GetTick>
 8005a1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a20:	e008      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a22:	f7fc ff69 	bl	80028f8 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b64      	cmp	r3, #100	; 0x64
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e0d8      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a34:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0f0      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	f040 80ce 	bne.w	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a48:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a54:	f7fc ff50 	bl	80028f8 <HAL_GetTick>
 8005a58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a5a:	e00b      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a5c:	f7fc ff4c 	bl	80028f8 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b64      	cmp	r3, #100	; 0x64
 8005a68:	d904      	bls.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e0bb      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005a6e:	bf00      	nop
 8005a70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a74:	4b5e      	ldr	r3, [pc, #376]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a80:	d0ec      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d02e      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d12a      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005aaa:	4b51      	ldr	r3, [pc, #324]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab0:	0c1b      	lsrs	r3, r3, #16
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ab8:	4b4d      	ldr	r3, [pc, #308]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	0f1b      	lsrs	r3, r3, #28
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	019a      	lsls	r2, r3, #6
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	041b      	lsls	r3, r3, #16
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	061b      	lsls	r3, r3, #24
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	071b      	lsls	r3, r3, #28
 8005ade:	4944      	ldr	r1, [pc, #272]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ae6:	4b42      	ldr	r3, [pc, #264]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	3b01      	subs	r3, #1
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	493d      	ldr	r1, [pc, #244]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d022      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b14:	d11d      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b16:	4b36      	ldr	r3, [pc, #216]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1c:	0e1b      	lsrs	r3, r3, #24
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b24:	4b32      	ldr	r3, [pc, #200]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	0f1b      	lsrs	r3, r3, #28
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	019a      	lsls	r2, r3, #6
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	041b      	lsls	r3, r3, #16
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	061b      	lsls	r3, r3, #24
 8005b44:	431a      	orrs	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	071b      	lsls	r3, r3, #28
 8005b4a:	4929      	ldr	r1, [pc, #164]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d028      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b5e:	4b24      	ldr	r3, [pc, #144]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b64:	0e1b      	lsrs	r3, r3, #24
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b6c:	4b20      	ldr	r3, [pc, #128]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b72:	0c1b      	lsrs	r3, r3, #16
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	019a      	lsls	r2, r3, #6
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	041b      	lsls	r3, r3, #16
 8005b84:	431a      	orrs	r2, r3
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	061b      	lsls	r3, r3, #24
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	071b      	lsls	r3, r3, #28
 8005b92:	4917      	ldr	r1, [pc, #92]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b9a:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba8:	4911      	ldr	r1, [pc, #68]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bb0:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a0e      	ldr	r2, [pc, #56]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bbc:	f7fc fe9c 	bl	80028f8 <HAL_GetTick>
 8005bc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bc4:	f7fc fe98 	bl	80028f8 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b64      	cmp	r3, #100	; 0x64
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e007      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bd6:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be2:	d1ef      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40023800 	.word	0x40023800

08005bf4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e01c      	b.n	8005c40 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	795b      	ldrb	r3, [r3, #5]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d105      	bne.n	8005c1c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f816 	bl	8005c48 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f042 0204 	orr.w	r2, r2, #4
 8005c30:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_RNG_MspInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e081      	b.n	8005d72 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	7f5b      	ldrb	r3, [r3, #29]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d105      	bne.n	8005c84 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f87e 	bl	8005d80 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	22ca      	movs	r2, #202	; 0xca
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2253      	movs	r2, #83	; 0x53
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f950 	bl	8005f40 <RTC_EnterInitMode>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d008      	beq.n	8005cb8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	22ff      	movs	r2, #255	; 0xff
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2204      	movs	r2, #4
 8005cb2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e05c      	b.n	8005d72 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6899      	ldr	r1, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4b2e      	ldr	r3, [pc, #184]	; (8005d7c <HAL_RTC_Init+0x120>)
 8005cc4:	400b      	ands	r3, r1
 8005cc6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6899      	ldr	r1, [r3, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	68d2      	ldr	r2, [r2, #12]
 8005cee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6919      	ldr	r1, [r3, #16]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	041a      	lsls	r2, r3, #16
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d12:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10e      	bne.n	8005d40 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f8e4 	bl	8005ef0 <HAL_RTC_WaitForSynchro>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d008      	beq.n	8005d40 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	22ff      	movs	r2, #255	; 0xff
 8005d34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2204      	movs	r2, #4
 8005d3a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e018      	b.n	8005d72 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0208 	bic.w	r2, r2, #8
 8005d4e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	22ff      	movs	r2, #255	; 0xff
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005d70:	2300      	movs	r3, #0
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	ff8fffbf 	.word	0xff8fffbf

08005d80 <HAL_RTC_MspInit>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b22      	ldr	r3, [pc, #136]	; (8005e4c <HAL_RTC_GetTime+0xb8>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	0c1b      	lsrs	r3, r3, #16
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	0a1b      	lsrs	r3, r3, #8
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	0c1b      	lsrs	r3, r3, #16
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d11a      	bne.n	8005e42 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 f8c1 	bl	8005f98 <RTC_Bcd2ToByte>
 8005e16:	4603      	mov	r3, r0
 8005e18:	461a      	mov	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 f8b8 	bl	8005f98 <RTC_Bcd2ToByte>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	789b      	ldrb	r3, [r3, #2]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 f8af 	bl	8005f98 <RTC_Bcd2ToByte>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	007f7f7f 	.word	0x007f7f7f

08005e50 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4b21      	ldr	r3, [pc, #132]	; (8005eec <HAL_RTC_GetDate+0x9c>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	0c1b      	lsrs	r3, r3, #16
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	0b5b      	lsrs	r3, r3, #13
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d11a      	bne.n	8005ee0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	78db      	ldrb	r3, [r3, #3]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 f872 	bl	8005f98 <RTC_Bcd2ToByte>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 f869 	bl	8005f98 <RTC_Bcd2ToByte>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	789b      	ldrb	r3, [r3, #2]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 f860 	bl	8005f98 <RTC_Bcd2ToByte>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	461a      	mov	r2, r3
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	00ffff3f 	.word	0x00ffff3f

08005ef0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f0c:	f7fc fcf4 	bl	80028f8 <HAL_GetTick>
 8005f10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005f12:	e009      	b.n	8005f28 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f14:	f7fc fcf0 	bl	80028f8 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f22:	d901      	bls.n	8005f28 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e007      	b.n	8005f38 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0ee      	beq.n	8005f14 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d119      	bne.n	8005f8e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f62:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f64:	f7fc fcc8 	bl	80028f8 <HAL_GetTick>
 8005f68:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f6a:	e009      	b.n	8005f80 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f6c:	f7fc fcc4 	bl	80028f8 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f7a:	d901      	bls.n	8005f80 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e007      	b.n	8005f90 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0ee      	beq.n	8005f6c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	461a      	mov	r2, r3
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	b2db      	uxtb	r3, r3
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e025      	b.n	8006034 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d106      	bne.n	8006002 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f81d 	bl	800603c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3304      	adds	r3, #4
 8006012:	4619      	mov	r1, r3
 8006014:	4610      	mov	r0, r2
 8006016:	f000 fccb 	bl	80069b0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	461a      	mov	r2, r3
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	f000 fd35 	bl	8006a94 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d101      	bne.n	800606c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006068:	2302      	movs	r3, #2
 800606a:	e018      	b.n	800609e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fd89 	bl	8006b94 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b02      	cmp	r3, #2
 8006088:	d104      	bne.n	8006094 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2205      	movs	r2, #5
 800608e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006092:	e003      	b.n	800609c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d101      	bne.n	80060c0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80060bc:	2302      	movs	r3, #2
 80060be:	e00e      	b.n	80060de <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fd84 	bl	8006bdc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e040      	b.n	800617a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d106      	bne.n	800610e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f873 	bl	80061f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2224      	movs	r2, #36	; 0x24
 8006112:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0201 	bic.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f879 	bl	800621c <UART_SetConfig>
 800612a:	4603      	mov	r3, r0
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e022      	b.n	800617a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 facf 	bl	80066e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006150:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006160:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0201 	orr.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fb56 	bl	8006824 <UART_CheckIdleState>
 8006178:	4603      	mov	r3, r0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e02b      	b.n	80061ec <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2224      	movs	r2, #36	; 0x24
 8006198:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0201 	bic.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2200      	movs	r2, #0
 80061b0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2200      	movs	r2, #0
 80061b8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2200      	movs	r2, #0
 80061c0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f820 	bl	8006208 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	431a      	orrs	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	4ba7      	ldr	r3, [pc, #668]	; (80064e4 <UART_SetConfig+0x2c8>)
 8006248:	4013      	ands	r3, r2
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	6979      	ldr	r1, [r7, #20]
 8006250:	430b      	orrs	r3, r1
 8006252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	430a      	orrs	r2, r1
 800628c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a95      	ldr	r2, [pc, #596]	; (80064e8 <UART_SetConfig+0x2cc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d120      	bne.n	80062da <UART_SetConfig+0xbe>
 8006298:	4b94      	ldr	r3, [pc, #592]	; (80064ec <UART_SetConfig+0x2d0>)
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d816      	bhi.n	80062d4 <UART_SetConfig+0xb8>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <UART_SetConfig+0x90>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	080062bd 	.word	0x080062bd
 80062b0:	080062c9 	.word	0x080062c9
 80062b4:	080062c3 	.word	0x080062c3
 80062b8:	080062cf 	.word	0x080062cf
 80062bc:	2301      	movs	r3, #1
 80062be:	77fb      	strb	r3, [r7, #31]
 80062c0:	e14f      	b.n	8006562 <UART_SetConfig+0x346>
 80062c2:	2302      	movs	r3, #2
 80062c4:	77fb      	strb	r3, [r7, #31]
 80062c6:	e14c      	b.n	8006562 <UART_SetConfig+0x346>
 80062c8:	2304      	movs	r3, #4
 80062ca:	77fb      	strb	r3, [r7, #31]
 80062cc:	e149      	b.n	8006562 <UART_SetConfig+0x346>
 80062ce:	2308      	movs	r3, #8
 80062d0:	77fb      	strb	r3, [r7, #31]
 80062d2:	e146      	b.n	8006562 <UART_SetConfig+0x346>
 80062d4:	2310      	movs	r3, #16
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e143      	b.n	8006562 <UART_SetConfig+0x346>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a84      	ldr	r2, [pc, #528]	; (80064f0 <UART_SetConfig+0x2d4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d132      	bne.n	800634a <UART_SetConfig+0x12e>
 80062e4:	4b81      	ldr	r3, [pc, #516]	; (80064ec <UART_SetConfig+0x2d0>)
 80062e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ea:	f003 030c 	and.w	r3, r3, #12
 80062ee:	2b0c      	cmp	r3, #12
 80062f0:	d828      	bhi.n	8006344 <UART_SetConfig+0x128>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <UART_SetConfig+0xdc>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	0800632d 	.word	0x0800632d
 80062fc:	08006345 	.word	0x08006345
 8006300:	08006345 	.word	0x08006345
 8006304:	08006345 	.word	0x08006345
 8006308:	08006339 	.word	0x08006339
 800630c:	08006345 	.word	0x08006345
 8006310:	08006345 	.word	0x08006345
 8006314:	08006345 	.word	0x08006345
 8006318:	08006333 	.word	0x08006333
 800631c:	08006345 	.word	0x08006345
 8006320:	08006345 	.word	0x08006345
 8006324:	08006345 	.word	0x08006345
 8006328:	0800633f 	.word	0x0800633f
 800632c:	2300      	movs	r3, #0
 800632e:	77fb      	strb	r3, [r7, #31]
 8006330:	e117      	b.n	8006562 <UART_SetConfig+0x346>
 8006332:	2302      	movs	r3, #2
 8006334:	77fb      	strb	r3, [r7, #31]
 8006336:	e114      	b.n	8006562 <UART_SetConfig+0x346>
 8006338:	2304      	movs	r3, #4
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e111      	b.n	8006562 <UART_SetConfig+0x346>
 800633e:	2308      	movs	r3, #8
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e10e      	b.n	8006562 <UART_SetConfig+0x346>
 8006344:	2310      	movs	r3, #16
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e10b      	b.n	8006562 <UART_SetConfig+0x346>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a69      	ldr	r2, [pc, #420]	; (80064f4 <UART_SetConfig+0x2d8>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d120      	bne.n	8006396 <UART_SetConfig+0x17a>
 8006354:	4b65      	ldr	r3, [pc, #404]	; (80064ec <UART_SetConfig+0x2d0>)
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800635e:	2b30      	cmp	r3, #48	; 0x30
 8006360:	d013      	beq.n	800638a <UART_SetConfig+0x16e>
 8006362:	2b30      	cmp	r3, #48	; 0x30
 8006364:	d814      	bhi.n	8006390 <UART_SetConfig+0x174>
 8006366:	2b20      	cmp	r3, #32
 8006368:	d009      	beq.n	800637e <UART_SetConfig+0x162>
 800636a:	2b20      	cmp	r3, #32
 800636c:	d810      	bhi.n	8006390 <UART_SetConfig+0x174>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <UART_SetConfig+0x15c>
 8006372:	2b10      	cmp	r3, #16
 8006374:	d006      	beq.n	8006384 <UART_SetConfig+0x168>
 8006376:	e00b      	b.n	8006390 <UART_SetConfig+0x174>
 8006378:	2300      	movs	r3, #0
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	e0f1      	b.n	8006562 <UART_SetConfig+0x346>
 800637e:	2302      	movs	r3, #2
 8006380:	77fb      	strb	r3, [r7, #31]
 8006382:	e0ee      	b.n	8006562 <UART_SetConfig+0x346>
 8006384:	2304      	movs	r3, #4
 8006386:	77fb      	strb	r3, [r7, #31]
 8006388:	e0eb      	b.n	8006562 <UART_SetConfig+0x346>
 800638a:	2308      	movs	r3, #8
 800638c:	77fb      	strb	r3, [r7, #31]
 800638e:	e0e8      	b.n	8006562 <UART_SetConfig+0x346>
 8006390:	2310      	movs	r3, #16
 8006392:	77fb      	strb	r3, [r7, #31]
 8006394:	e0e5      	b.n	8006562 <UART_SetConfig+0x346>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a57      	ldr	r2, [pc, #348]	; (80064f8 <UART_SetConfig+0x2dc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d120      	bne.n	80063e2 <UART_SetConfig+0x1c6>
 80063a0:	4b52      	ldr	r3, [pc, #328]	; (80064ec <UART_SetConfig+0x2d0>)
 80063a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063aa:	2bc0      	cmp	r3, #192	; 0xc0
 80063ac:	d013      	beq.n	80063d6 <UART_SetConfig+0x1ba>
 80063ae:	2bc0      	cmp	r3, #192	; 0xc0
 80063b0:	d814      	bhi.n	80063dc <UART_SetConfig+0x1c0>
 80063b2:	2b80      	cmp	r3, #128	; 0x80
 80063b4:	d009      	beq.n	80063ca <UART_SetConfig+0x1ae>
 80063b6:	2b80      	cmp	r3, #128	; 0x80
 80063b8:	d810      	bhi.n	80063dc <UART_SetConfig+0x1c0>
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <UART_SetConfig+0x1a8>
 80063be:	2b40      	cmp	r3, #64	; 0x40
 80063c0:	d006      	beq.n	80063d0 <UART_SetConfig+0x1b4>
 80063c2:	e00b      	b.n	80063dc <UART_SetConfig+0x1c0>
 80063c4:	2300      	movs	r3, #0
 80063c6:	77fb      	strb	r3, [r7, #31]
 80063c8:	e0cb      	b.n	8006562 <UART_SetConfig+0x346>
 80063ca:	2302      	movs	r3, #2
 80063cc:	77fb      	strb	r3, [r7, #31]
 80063ce:	e0c8      	b.n	8006562 <UART_SetConfig+0x346>
 80063d0:	2304      	movs	r3, #4
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e0c5      	b.n	8006562 <UART_SetConfig+0x346>
 80063d6:	2308      	movs	r3, #8
 80063d8:	77fb      	strb	r3, [r7, #31]
 80063da:	e0c2      	b.n	8006562 <UART_SetConfig+0x346>
 80063dc:	2310      	movs	r3, #16
 80063de:	77fb      	strb	r3, [r7, #31]
 80063e0:	e0bf      	b.n	8006562 <UART_SetConfig+0x346>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a45      	ldr	r2, [pc, #276]	; (80064fc <UART_SetConfig+0x2e0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d125      	bne.n	8006438 <UART_SetConfig+0x21c>
 80063ec:	4b3f      	ldr	r3, [pc, #252]	; (80064ec <UART_SetConfig+0x2d0>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063fa:	d017      	beq.n	800642c <UART_SetConfig+0x210>
 80063fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006400:	d817      	bhi.n	8006432 <UART_SetConfig+0x216>
 8006402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006406:	d00b      	beq.n	8006420 <UART_SetConfig+0x204>
 8006408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800640c:	d811      	bhi.n	8006432 <UART_SetConfig+0x216>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <UART_SetConfig+0x1fe>
 8006412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006416:	d006      	beq.n	8006426 <UART_SetConfig+0x20a>
 8006418:	e00b      	b.n	8006432 <UART_SetConfig+0x216>
 800641a:	2300      	movs	r3, #0
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e0a0      	b.n	8006562 <UART_SetConfig+0x346>
 8006420:	2302      	movs	r3, #2
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e09d      	b.n	8006562 <UART_SetConfig+0x346>
 8006426:	2304      	movs	r3, #4
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e09a      	b.n	8006562 <UART_SetConfig+0x346>
 800642c:	2308      	movs	r3, #8
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e097      	b.n	8006562 <UART_SetConfig+0x346>
 8006432:	2310      	movs	r3, #16
 8006434:	77fb      	strb	r3, [r7, #31]
 8006436:	e094      	b.n	8006562 <UART_SetConfig+0x346>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a30      	ldr	r2, [pc, #192]	; (8006500 <UART_SetConfig+0x2e4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d125      	bne.n	800648e <UART_SetConfig+0x272>
 8006442:	4b2a      	ldr	r3, [pc, #168]	; (80064ec <UART_SetConfig+0x2d0>)
 8006444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006448:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800644c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006450:	d017      	beq.n	8006482 <UART_SetConfig+0x266>
 8006452:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006456:	d817      	bhi.n	8006488 <UART_SetConfig+0x26c>
 8006458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800645c:	d00b      	beq.n	8006476 <UART_SetConfig+0x25a>
 800645e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006462:	d811      	bhi.n	8006488 <UART_SetConfig+0x26c>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <UART_SetConfig+0x254>
 8006468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646c:	d006      	beq.n	800647c <UART_SetConfig+0x260>
 800646e:	e00b      	b.n	8006488 <UART_SetConfig+0x26c>
 8006470:	2301      	movs	r3, #1
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e075      	b.n	8006562 <UART_SetConfig+0x346>
 8006476:	2302      	movs	r3, #2
 8006478:	77fb      	strb	r3, [r7, #31]
 800647a:	e072      	b.n	8006562 <UART_SetConfig+0x346>
 800647c:	2304      	movs	r3, #4
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e06f      	b.n	8006562 <UART_SetConfig+0x346>
 8006482:	2308      	movs	r3, #8
 8006484:	77fb      	strb	r3, [r7, #31]
 8006486:	e06c      	b.n	8006562 <UART_SetConfig+0x346>
 8006488:	2310      	movs	r3, #16
 800648a:	77fb      	strb	r3, [r7, #31]
 800648c:	e069      	b.n	8006562 <UART_SetConfig+0x346>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1c      	ldr	r2, [pc, #112]	; (8006504 <UART_SetConfig+0x2e8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d137      	bne.n	8006508 <UART_SetConfig+0x2ec>
 8006498:	4b14      	ldr	r3, [pc, #80]	; (80064ec <UART_SetConfig+0x2d0>)
 800649a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80064a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064a6:	d017      	beq.n	80064d8 <UART_SetConfig+0x2bc>
 80064a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064ac:	d817      	bhi.n	80064de <UART_SetConfig+0x2c2>
 80064ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b2:	d00b      	beq.n	80064cc <UART_SetConfig+0x2b0>
 80064b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b8:	d811      	bhi.n	80064de <UART_SetConfig+0x2c2>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <UART_SetConfig+0x2aa>
 80064be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c2:	d006      	beq.n	80064d2 <UART_SetConfig+0x2b6>
 80064c4:	e00b      	b.n	80064de <UART_SetConfig+0x2c2>
 80064c6:	2300      	movs	r3, #0
 80064c8:	77fb      	strb	r3, [r7, #31]
 80064ca:	e04a      	b.n	8006562 <UART_SetConfig+0x346>
 80064cc:	2302      	movs	r3, #2
 80064ce:	77fb      	strb	r3, [r7, #31]
 80064d0:	e047      	b.n	8006562 <UART_SetConfig+0x346>
 80064d2:	2304      	movs	r3, #4
 80064d4:	77fb      	strb	r3, [r7, #31]
 80064d6:	e044      	b.n	8006562 <UART_SetConfig+0x346>
 80064d8:	2308      	movs	r3, #8
 80064da:	77fb      	strb	r3, [r7, #31]
 80064dc:	e041      	b.n	8006562 <UART_SetConfig+0x346>
 80064de:	2310      	movs	r3, #16
 80064e0:	77fb      	strb	r3, [r7, #31]
 80064e2:	e03e      	b.n	8006562 <UART_SetConfig+0x346>
 80064e4:	efff69f3 	.word	0xefff69f3
 80064e8:	40011000 	.word	0x40011000
 80064ec:	40023800 	.word	0x40023800
 80064f0:	40004400 	.word	0x40004400
 80064f4:	40004800 	.word	0x40004800
 80064f8:	40004c00 	.word	0x40004c00
 80064fc:	40005000 	.word	0x40005000
 8006500:	40011400 	.word	0x40011400
 8006504:	40007800 	.word	0x40007800
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a71      	ldr	r2, [pc, #452]	; (80066d4 <UART_SetConfig+0x4b8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d125      	bne.n	800655e <UART_SetConfig+0x342>
 8006512:	4b71      	ldr	r3, [pc, #452]	; (80066d8 <UART_SetConfig+0x4bc>)
 8006514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006518:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800651c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006520:	d017      	beq.n	8006552 <UART_SetConfig+0x336>
 8006522:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006526:	d817      	bhi.n	8006558 <UART_SetConfig+0x33c>
 8006528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800652c:	d00b      	beq.n	8006546 <UART_SetConfig+0x32a>
 800652e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006532:	d811      	bhi.n	8006558 <UART_SetConfig+0x33c>
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <UART_SetConfig+0x324>
 8006538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800653c:	d006      	beq.n	800654c <UART_SetConfig+0x330>
 800653e:	e00b      	b.n	8006558 <UART_SetConfig+0x33c>
 8006540:	2300      	movs	r3, #0
 8006542:	77fb      	strb	r3, [r7, #31]
 8006544:	e00d      	b.n	8006562 <UART_SetConfig+0x346>
 8006546:	2302      	movs	r3, #2
 8006548:	77fb      	strb	r3, [r7, #31]
 800654a:	e00a      	b.n	8006562 <UART_SetConfig+0x346>
 800654c:	2304      	movs	r3, #4
 800654e:	77fb      	strb	r3, [r7, #31]
 8006550:	e007      	b.n	8006562 <UART_SetConfig+0x346>
 8006552:	2308      	movs	r3, #8
 8006554:	77fb      	strb	r3, [r7, #31]
 8006556:	e004      	b.n	8006562 <UART_SetConfig+0x346>
 8006558:	2310      	movs	r3, #16
 800655a:	77fb      	strb	r3, [r7, #31]
 800655c:	e001      	b.n	8006562 <UART_SetConfig+0x346>
 800655e:	2310      	movs	r3, #16
 8006560:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800656a:	d15b      	bne.n	8006624 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800656c:	7ffb      	ldrb	r3, [r7, #31]
 800656e:	2b08      	cmp	r3, #8
 8006570:	d827      	bhi.n	80065c2 <UART_SetConfig+0x3a6>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <UART_SetConfig+0x35c>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	0800659d 	.word	0x0800659d
 800657c:	080065a5 	.word	0x080065a5
 8006580:	080065ad 	.word	0x080065ad
 8006584:	080065c3 	.word	0x080065c3
 8006588:	080065b3 	.word	0x080065b3
 800658c:	080065c3 	.word	0x080065c3
 8006590:	080065c3 	.word	0x080065c3
 8006594:	080065c3 	.word	0x080065c3
 8006598:	080065bb 	.word	0x080065bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800659c:	f7fe feda 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 80065a0:	61b8      	str	r0, [r7, #24]
        break;
 80065a2:	e013      	b.n	80065cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a4:	f7fe feea 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 80065a8:	61b8      	str	r0, [r7, #24]
        break;
 80065aa:	e00f      	b.n	80065cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065ac:	4b4b      	ldr	r3, [pc, #300]	; (80066dc <UART_SetConfig+0x4c0>)
 80065ae:	61bb      	str	r3, [r7, #24]
        break;
 80065b0:	e00c      	b.n	80065cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065b2:	f7fe fe0d 	bl	80051d0 <HAL_RCC_GetSysClockFreq>
 80065b6:	61b8      	str	r0, [r7, #24]
        break;
 80065b8:	e008      	b.n	80065cc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065be:	61bb      	str	r3, [r7, #24]
        break;
 80065c0:	e004      	b.n	80065cc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	77bb      	strb	r3, [r7, #30]
        break;
 80065ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d074      	beq.n	80066bc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	005a      	lsls	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	085b      	lsrs	r3, r3, #1
 80065dc:	441a      	add	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b0f      	cmp	r3, #15
 80065ee:	d916      	bls.n	800661e <UART_SetConfig+0x402>
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f6:	d212      	bcs.n	800661e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f023 030f 	bic.w	r3, r3, #15
 8006600:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	085b      	lsrs	r3, r3, #1
 8006606:	b29b      	uxth	r3, r3
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	b29a      	uxth	r2, r3
 800660e:	89fb      	ldrh	r3, [r7, #14]
 8006610:	4313      	orrs	r3, r2
 8006612:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	89fa      	ldrh	r2, [r7, #14]
 800661a:	60da      	str	r2, [r3, #12]
 800661c:	e04e      	b.n	80066bc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	77bb      	strb	r3, [r7, #30]
 8006622:	e04b      	b.n	80066bc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006624:	7ffb      	ldrb	r3, [r7, #31]
 8006626:	2b08      	cmp	r3, #8
 8006628:	d827      	bhi.n	800667a <UART_SetConfig+0x45e>
 800662a:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <UART_SetConfig+0x414>)
 800662c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006630:	08006655 	.word	0x08006655
 8006634:	0800665d 	.word	0x0800665d
 8006638:	08006665 	.word	0x08006665
 800663c:	0800667b 	.word	0x0800667b
 8006640:	0800666b 	.word	0x0800666b
 8006644:	0800667b 	.word	0x0800667b
 8006648:	0800667b 	.word	0x0800667b
 800664c:	0800667b 	.word	0x0800667b
 8006650:	08006673 	.word	0x08006673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006654:	f7fe fe7e 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 8006658:	61b8      	str	r0, [r7, #24]
        break;
 800665a:	e013      	b.n	8006684 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800665c:	f7fe fe8e 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 8006660:	61b8      	str	r0, [r7, #24]
        break;
 8006662:	e00f      	b.n	8006684 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006664:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <UART_SetConfig+0x4c0>)
 8006666:	61bb      	str	r3, [r7, #24]
        break;
 8006668:	e00c      	b.n	8006684 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666a:	f7fe fdb1 	bl	80051d0 <HAL_RCC_GetSysClockFreq>
 800666e:	61b8      	str	r0, [r7, #24]
        break;
 8006670:	e008      	b.n	8006684 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006676:	61bb      	str	r3, [r7, #24]
        break;
 8006678:	e004      	b.n	8006684 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	77bb      	strb	r3, [r7, #30]
        break;
 8006682:	bf00      	nop
    }

    if (pclk != 0U)
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d018      	beq.n	80066bc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	085a      	lsrs	r2, r3, #1
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	441a      	add	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	fbb2 f3f3 	udiv	r3, r2, r3
 800669c:	b29b      	uxth	r3, r3
 800669e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	2b0f      	cmp	r3, #15
 80066a4:	d908      	bls.n	80066b8 <UART_SetConfig+0x49c>
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ac:	d204      	bcs.n	80066b8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	60da      	str	r2, [r3, #12]
 80066b6:	e001      	b.n	80066bc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3720      	adds	r7, #32
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	40007c00 	.word	0x40007c00
 80066d8:	40023800 	.word	0x40023800
 80066dc:	00f42400 	.word	0x00f42400

080066e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01a      	beq.n	80067f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067de:	d10a      	bne.n	80067f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	605a      	str	r2, [r3, #4]
  }
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af02      	add	r7, sp, #8
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006834:	f7fc f860 	bl	80028f8 <HAL_GetTick>
 8006838:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b08      	cmp	r3, #8
 8006846:	d10e      	bne.n	8006866 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f82d 	bl	80068b6 <UART_WaitOnFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e023      	b.n	80068ae <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b04      	cmp	r3, #4
 8006872:	d10e      	bne.n	8006892 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f817 	bl	80068b6 <UART_WaitOnFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e00d      	b.n	80068ae <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	603b      	str	r3, [r7, #0]
 80068c2:	4613      	mov	r3, r2
 80068c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c6:	e05e      	b.n	8006986 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ce:	d05a      	beq.n	8006986 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d0:	f7fc f812 	bl	80028f8 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d302      	bcc.n	80068e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d11b      	bne.n	800691e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0201 	bic.w	r2, r2, #1
 8006904:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2220      	movs	r2, #32
 800690a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e043      	b.n	80069a6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d02c      	beq.n	8006986 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800693a:	d124      	bne.n	8006986 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006944:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006954:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0201 	bic.w	r2, r2, #1
 8006964:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2220      	movs	r2, #32
 8006976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e00f      	b.n	80069a6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69da      	ldr	r2, [r3, #28]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4013      	ands	r3, r2
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	429a      	cmp	r2, r3
 8006994:	bf0c      	ite	eq
 8006996:	2301      	moveq	r3, #1
 8006998:	2300      	movne	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	461a      	mov	r2, r3
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d091      	beq.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d027      	beq.n	8006a1a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4b2f      	ldr	r3, [pc, #188]	; (8006a90 <FMC_SDRAM_Init+0xe0>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069e0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80069e6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80069ec:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80069f2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80069f8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80069fe:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8006a04:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006a0a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	e032      	b.n	8006a80 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a26:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006a30:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006a36:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	4b12      	ldr	r3, [pc, #72]	; (8006a90 <FMC_SDRAM_Init+0xe0>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a54:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8006a5a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8006a60:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8006a66:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8006a6c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	ffff8000 	.word	0xffff8000

08006a94 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d02e      	beq.n	8006b0c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006aba:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006aca:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006ad4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006ade:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006ae8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006af2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006afc:	4313      	orrs	r3, r2
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	609a      	str	r2, [r3, #8]
 8006b0a:	e039      	b.n	8006b80 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4b1e      	ldr	r3, [pc, #120]	; (8006b90 <FMC_SDRAM_Timing_Init+0xfc>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006b3e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006b4e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006b58:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006b62:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	ff0f0fff 	.word	0xff0f0fff

08006b94 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <FMC_SDRAM_SendCommand+0x44>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	6811      	ldr	r1, [r2, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	6852      	ldr	r2, [r2, #4]
 8006bb0:	4311      	orrs	r1, r2
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	6892      	ldr	r2, [r2, #8]
 8006bb6:	3a01      	subs	r2, #1
 8006bb8:	0152      	lsls	r2, r2, #5
 8006bba:	4311      	orrs	r1, r2
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	68d2      	ldr	r2, [r2, #12]
 8006bc0:	0252      	lsls	r2, r2, #9
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	ffc00000 	.word	0xffc00000

08006bdc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695a      	ldr	r2, [r3, #20]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <_ZN10QAD_FT62068imp_initEP7QAD_I2C>:
	//---------------------------------
	//QAD_FT6206 Initialization Methods

//QAD_FT6206::imp_init
//QAD_FT6206 Initialization Method
QA_Result QAD_FT6206::imp_init(QAD_I2C* cI2C) {
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]

	//Store Handle to I2C Driver
	if (!cI2C)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <_ZN10QAD_FT62068imp_initEP7QAD_I2C+0x14>
		return QA_Fail;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e016      	b.n	8006c44 <_ZN10QAD_FT62068imp_initEP7QAD_I2C+0x42>

	m_cI2C = cI2C;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	611a      	str	r2, [r3, #16]

	//Initialize FT6206 device
	if (imp_confirmAddress())
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f954 	bl	8006eca <_ZN10QAD_FT620618imp_confirmAddressEv>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bf14      	ite	ne
 8006c28:	2301      	movne	r3, #1
 8006c2a:	2300      	moveq	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <_ZN10QAD_FT62068imp_initEP7QAD_I2C+0x34>
		return QA_Fail;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e006      	b.n	8006c44 <_ZN10QAD_FT62068imp_initEP7QAD_I2C+0x42>

	//Clear Data
	imp_clearData();
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f980 	bl	8006f3c <_ZN10QAD_FT620613imp_clearDataEv>

	//Set Driver States
	m_eInitState = QA_Initialized;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	751a      	strb	r2, [r3, #20]

	//Return
	return QA_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <_ZN10QAD_FT62068imp_pollERm>:
	//-----------------------------
	//QAD_FT6206 Processing Methods

//QAD_FT6206::imp_poll
//QAD_FT6206 Processing Method
void QAD_FT6206::imp_poll(uint32_t& uTicks) {
 8006c4c:	b590      	push	{r4, r7, lr}
 8006c4e:	b08b      	sub	sp, #44	; 0x2c
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
	m_uData_LastX = m_uData_CurX;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	851a      	strh	r2, [r3, #40]	; 0x28
	m_uData_LastY = m_uData_CurY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	855a      	strh	r2, [r3, #42]	; 0x2a

	m_uData_CurX = 0;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	849a      	strh	r2, [r3, #36]	; 0x24
	m_uData_CurY = 0;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	84da      	strh	r2, [r3, #38]	; 0x26

	//---------------
	//Check for touch
	uint8_t uNumTouch = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	73fb      	strb	r3, [r7, #15]
	m_cI2C->read8Bit(m_uAddr, m_uReg_Status, &uNumTouch);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6918      	ldr	r0, [r3, #16]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	7d5b      	ldrb	r3, [r3, #21]
 8006c7e:	b299      	uxth	r1, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	791a      	ldrb	r2, [r3, #4]
 8006c84:	f107 030f 	add.w	r3, r7, #15
 8006c88:	f000 fcf6 	bl	8007678 <_ZN7QAD_I2C8read8BitEthPh>
	if (uNumTouch > 0) {
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d073      	beq.n	8006d7a <_ZN10QAD_FT62068imp_pollERm+0x12e>
		uint8_t uDataXY[4];
		m_cI2C->readMultiple8Bit(m_uAddr, m_uReg_Touch1, uDataXY, sizeof(uDataXY));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6918      	ldr	r0, [r3, #16]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	7d5b      	ldrb	r3, [r3, #21]
 8006c9a:	b299      	uxth	r1, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	795a      	ldrb	r2, [r3, #5]
 8006ca0:	f107 0308 	add.w	r3, r7, #8
 8006ca4:	2404      	movs	r4, #4
 8006ca6:	9400      	str	r4, [sp, #0]
 8006ca8:	f000 fd02 	bl	80076b0 <_ZN7QAD_I2C16readMultiple8BitEthPht>

		uint16_t uRawX = ((uDataXY[2] & 0x0F) << 8) | uDataXY[3];
 8006cac:	7abb      	ldrb	r3, [r7, #10]
 8006cae:	021b      	lsls	r3, r3, #8
 8006cb0:	b21b      	sxth	r3, r3
 8006cb2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006cb6:	b21a      	sxth	r2, r3
 8006cb8:	7afb      	ldrb	r3, [r7, #11]
 8006cba:	b21b      	sxth	r3, r3
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	b21b      	sxth	r3, r3
 8006cc0:	82fb      	strh	r3, [r7, #22]
		uint16_t uRawY = ((uDataXY[0] & 0x0F) << 8) | uDataXY[1];
 8006cc2:	7a3b      	ldrb	r3, [r7, #8]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	b21b      	sxth	r3, r3
 8006cc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006ccc:	b21a      	sxth	r2, r3
 8006cce:	7a7b      	ldrb	r3, [r7, #9]
 8006cd0:	b21b      	sxth	r3, r3
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	b21b      	sxth	r3, r3
 8006cd6:	82bb      	strh	r3, [r7, #20]

		//Flip Y
		uRawY = (QAD_LTDC_HEIGHT - 1) - uRawY;
 8006cd8:	8abb      	ldrh	r3, [r7, #20]
 8006cda:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8006cde:	3301      	adds	r3, #1
 8006ce0:	82bb      	strh	r3, [r7, #20]

		uint32_t uX = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61fb      	str	r3, [r7, #28]
		uint32_t uY = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61bb      	str	r3, [r7, #24]

		uint16_t uXDiff = (uRawX > uX) ? (uRawX - uX) : (uX - uRawX);
 8006cea:	8afb      	ldrh	r3, [r7, #22]
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d205      	bcs.n	8006cfe <_ZN10QAD_FT62068imp_pollERm+0xb2>
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	8afa      	ldrh	r2, [r7, #22]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	e004      	b.n	8006d08 <_ZN10QAD_FT62068imp_pollERm+0xbc>
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	8afb      	ldrh	r3, [r7, #22]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	827b      	strh	r3, [r7, #18]
		uint16_t uYDiff = (uRawY > uY) ? (uRawY - uY) : (uY - uRawY);
 8006d0a:	8abb      	ldrh	r3, [r7, #20]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d205      	bcs.n	8006d1e <_ZN10QAD_FT62068imp_pollERm+0xd2>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	8aba      	ldrh	r2, [r7, #20]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	e004      	b.n	8006d28 <_ZN10QAD_FT62068imp_pollERm+0xdc>
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	8abb      	ldrh	r3, [r7, #20]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	823b      	strh	r3, [r7, #16]

		if ((uXDiff + uYDiff) > 5) {
 8006d2a:	8a7a      	ldrh	r2, [r7, #18]
 8006d2c:	8a3b      	ldrh	r3, [r7, #16]
 8006d2e:	4413      	add	r3, r2
 8006d30:	2b05      	cmp	r3, #5
 8006d32:	dd03      	ble.n	8006d3c <_ZN10QAD_FT62068imp_pollERm+0xf0>
			uX = uRawX;
 8006d34:	8afb      	ldrh	r3, [r7, #22]
 8006d36:	61fb      	str	r3, [r7, #28]
			uY = uRawY;
 8006d38:	8abb      	ldrh	r3, [r7, #20]
 8006d3a:	61bb      	str	r3, [r7, #24]
		}

		if ((uX >= 800) | (uY >= 480)) {
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f240 321f 	movw	r2, #799	; 0x31f
 8006d42:	4293      	cmp	r3, r2
 8006d44:	bf8c      	ite	hi
 8006d46:	2301      	movhi	r3, #1
 8006d48:	2300      	movls	r3, #0
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	f240 11df 	movw	r1, #479	; 0x1df
 8006d52:	428b      	cmp	r3, r1
 8006d54:	bf8c      	ite	hi
 8006d56:	2301      	movhi	r3, #1
 8006d58:	2300      	movls	r3, #0
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <_ZN10QAD_FT62068imp_pollERm+0x11e>
			uNumTouch = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]
 8006d68:	e007      	b.n	8006d7a <_ZN10QAD_FT62068imp_pollERm+0x12e>
		} else {
			m_uData_CurX = uX;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	849a      	strh	r2, [r3, #36]	; 0x24
			m_uData_CurY = uY;
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	84da      	strh	r2, [r3, #38]	; 0x26
	}


	//------------------
	//Process Touch Data
	m_uData_LastDown = m_uData_CurDown;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	7d9a      	ldrb	r2, [r3, #22]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	75da      	strb	r2, [r3, #23]
	m_uData_CurDown  = (uNumTouch>0);
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bf14      	ite	ne
 8006d88:	2301      	movne	r3, #1
 8006d8a:	2300      	moveq	r3, #0
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	759a      	strb	r2, [r3, #22]

	m_uData_New = ((!m_uData_LastDown) && (m_uData_CurDown));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	7ddb      	ldrb	r3, [r3, #23]
 8006d96:	f083 0301 	eor.w	r3, r3, #1
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <_ZN10QAD_FT62068imp_pollERm+0x160>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	7d9b      	ldrb	r3, [r3, #22]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <_ZN10QAD_FT62068imp_pollERm+0x160>
 8006da8:	2201      	movs	r2, #1
 8006daa:	e000      	b.n	8006dae <_ZN10QAD_FT62068imp_pollERm+0x162>
 8006dac:	2200      	movs	r2, #0
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	765a      	strb	r2, [r3, #25]
	m_uData_End = ((m_uData_LastDown) && (!m_uData_CurDown));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	7ddb      	ldrb	r3, [r3, #23]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d008      	beq.n	8006dcc <_ZN10QAD_FT62068imp_pollERm+0x180>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	7d9b      	ldrb	r3, [r3, #22]
 8006dbe:	f083 0301 	eor.w	r3, r3, #1
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <_ZN10QAD_FT62068imp_pollERm+0x180>
 8006dc8:	2201      	movs	r2, #1
 8006dca:	e000      	b.n	8006dce <_ZN10QAD_FT62068imp_pollERm+0x182>
 8006dcc:	2200      	movs	r2, #0
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	769a      	strb	r2, [r3, #26]
	m_uData_Event = (m_uData_LastDown || m_uData_CurDown);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	7ddb      	ldrb	r3, [r3, #23]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d103      	bne.n	8006de2 <_ZN10QAD_FT62068imp_pollERm+0x196>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	7d9b      	ldrb	r3, [r3, #22]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <_ZN10QAD_FT62068imp_pollERm+0x19a>
 8006de2:	2201      	movs	r2, #1
 8006de4:	e000      	b.n	8006de8 <_ZN10QAD_FT62068imp_pollERm+0x19c>
 8006de6:	2200      	movs	r2, #0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	761a      	strb	r2, [r3, #24]

	if (m_uData_LastDown && m_uData_CurDown) {
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	7ddb      	ldrb	r3, [r3, #23]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d028      	beq.n	8006e46 <_ZN10QAD_FT62068imp_pollERm+0x1fa>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	7d9b      	ldrb	r3, [r3, #22]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d024      	beq.n	8006e46 <_ZN10QAD_FT62068imp_pollERm+0x1fa>

		m_iData_MoveX = m_uData_CurX - m_uData_LastX;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	b21a      	sxth	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	859a      	strh	r2, [r3, #44]	; 0x2c
		m_iData_MoveY = m_uData_CurY - m_uData_LastY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	b21a      	sxth	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	85da      	strh	r2, [r3, #46]	; 0x2e
		m_uData_Long_Count += uTicks;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1a      	ldr	r2, [r3, #32]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	441a      	add	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	621a      	str	r2, [r3, #32]
		m_uData_Long = (m_uData_Long_Count >= m_uLongTouchThreshold);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	8992      	ldrh	r2, [r2, #12]
 8006e36:	4293      	cmp	r3, r2
 8006e38:	bf2c      	ite	cs
 8006e3a:	2301      	movcs	r3, #1
 8006e3c:	2300      	movcc	r3, #0
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	76da      	strb	r2, [r3, #27]
 8006e44:	e015      	b.n	8006e72 <_ZN10QAD_FT62068imp_pollERm+0x226>

	} else {

		m_iData_MoveX = 0;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	859a      	strh	r2, [r3, #44]	; 0x2c
		m_iData_MoveY = 0;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	85da      	strh	r2, [r3, #46]	; 0x2e
		if (!m_uData_End) {
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	7e9b      	ldrb	r3, [r3, #26]
 8006e56:	f083 0301 	eor.w	r3, r3, #1
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d008      	beq.n	8006e72 <_ZN10QAD_FT62068imp_pollERm+0x226>
			m_uData_Long = false;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	76da      	strb	r2, [r3, #27]
			m_uData_Long_Count = 0;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	621a      	str	r2, [r3, #32]
			m_uData_Long_Pulse = 0;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	771a      	strb	r2, [r3, #28]
		}

	}

	if (m_uData_New) {
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	7e5b      	ldrb	r3, [r3, #25]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d007      	beq.n	8006e8a <_ZN10QAD_FT62068imp_pollERm+0x23e>
		m_uData_StartX = m_uData_CurX;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	861a      	strh	r2, [r3, #48]	; 0x30
		m_uData_StartY = m_uData_CurY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	865a      	strh	r2, [r3, #50]	; 0x32
	}

	if (m_uData_Long && m_uData_End) {
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	7edb      	ldrb	r3, [r3, #27]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d006      	beq.n	8006ea0 <_ZN10QAD_FT62068imp_pollERm+0x254>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	7e9b      	ldrb	r3, [r3, #26]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <_ZN10QAD_FT62068imp_pollERm+0x254>
		m_uData_End = false;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	769a      	strb	r2, [r3, #26]
	}

	if (m_uData_Long) {
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	7edb      	ldrb	r3, [r3, #27]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00c      	beq.n	8006ec2 <_ZN10QAD_FT62068imp_pollERm+0x276>
		if (m_uData_Long_Pulse > 0)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	7f1b      	ldrb	r3, [r3, #28]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <_ZN10QAD_FT62068imp_pollERm+0x26a>
			m_uData_Long = false;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	76da      	strb	r2, [r3, #27]
		m_uData_Long_Pulse++;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7f1b      	ldrb	r3, [r3, #28]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	771a      	strb	r2, [r3, #28]
	}

}
 8006ec2:	bf00      	nop
 8006ec4:	3724      	adds	r7, #36	; 0x24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd90      	pop	{r4, r7, pc}

08006eca <_ZN10QAD_FT620618imp_confirmAddressEv>:
	//-----------------------
	//QAD_FT6206 Tool Methods

//QAD_FT6206::imp_confirmAddress
//QAD_FT6206 Tool Method
QA_Result QAD_FT6206::imp_confirmAddress(void) {
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
	uint8_t uResA = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73fb      	strb	r3, [r7, #15]
	uint8_t uResB = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73bb      	strb	r3, [r7, #14]
	m_cI2C->read8Bit(m_uAddrA, m_uReg_ID, &uResA);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6918      	ldr	r0, [r3, #16]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	b299      	uxth	r1, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	789a      	ldrb	r2, [r3, #2]
 8006ee8:	f107 030f 	add.w	r3, r7, #15
 8006eec:	f000 fbc4 	bl	8007678 <_ZN7QAD_I2C8read8BitEthPh>
	m_cI2C->read8Bit(m_uAddrB, m_uReg_ID, &uResB);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6918      	ldr	r0, [r3, #16]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	785b      	ldrb	r3, [r3, #1]
 8006ef8:	b299      	uxth	r1, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	789a      	ldrb	r2, [r3, #2]
 8006efe:	f107 030e 	add.w	r3, r7, #14
 8006f02:	f000 fbb9 	bl	8007678 <_ZN7QAD_I2C8read8BitEthPh>

	if (uResA == m_uID) {
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	79da      	ldrb	r2, [r3, #7]
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d104      	bne.n	8006f1a <_ZN10QAD_FT620618imp_confirmAddressEv+0x50>
		m_uAddr = m_uAddrA;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	781a      	ldrb	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	755a      	strb	r2, [r3, #21]
 8006f18:	e00b      	b.n	8006f32 <_ZN10QAD_FT620618imp_confirmAddressEv+0x68>
	} else if (uResB == m_uID) {
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	79da      	ldrb	r2, [r3, #7]
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d104      	bne.n	8006f2e <_ZN10QAD_FT620618imp_confirmAddressEv+0x64>
		m_uAddr = m_uAddrB;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	785a      	ldrb	r2, [r3, #1]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	755a      	strb	r2, [r3, #21]
 8006f2c:	e001      	b.n	8006f32 <_ZN10QAD_FT620618imp_confirmAddressEv+0x68>
	} else {
		return QA_Fail;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <_ZN10QAD_FT620618imp_confirmAddressEv+0x6a>
	}

	return QA_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <_ZN10QAD_FT620613imp_clearDataEv>:


//QAD_FT6206::imp_clearData
//QAD_FT6206 Tool Method
void QAD_FT6206::imp_clearData(void) {
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  m_uData_CurDown     = false;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	759a      	strb	r2, [r3, #22]
  m_uData_LastDown    = false;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	75da      	strb	r2, [r3, #23]
  m_uData_Event       = false;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	761a      	strb	r2, [r3, #24]
  m_uData_New         = false;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	765a      	strb	r2, [r3, #25]
  m_uData_End         = false;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	769a      	strb	r2, [r3, #26]
  m_uData_Long        = false;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	76da      	strb	r2, [r3, #27]
  m_uData_Long_Pulse  = 0;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	771a      	strb	r2, [r3, #28]
  m_uData_Long_Count  = 0;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	621a      	str	r2, [r3, #32]

  m_uData_CurX        = 0;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	849a      	strh	r2, [r3, #36]	; 0x24
  m_uData_CurY        = 0;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	84da      	strh	r2, [r3, #38]	; 0x26
  m_uData_LastX       = 0;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	851a      	strh	r2, [r3, #40]	; 0x28
  m_uData_LastY       = 0;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  m_iData_MoveX       = 0;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	859a      	strh	r2, [r3, #44]	; 0x2c
  m_iData_MoveY       = 0;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	85da      	strh	r2, [r3, #46]	; 0x2e
  m_uData_StartX      = 0;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	861a      	strh	r2, [r3, #48]	; 0x30
  m_uData_StartY      = 0;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	865a      	strh	r2, [r3, #50]	; 0x32
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <_ZN7QAD_FMC8imp_initEv>:
//QAD_FMC Initialization Method
//
//To be called from static method init()
//Used to initialize the required GPIOs, FMC driver and SDRAM module
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAD_FMC::imp_init() {
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b094      	sub	sp, #80	; 0x50
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]

	//Return if FMC driver is already initialized
	if (m_eState)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <_ZN7QAD_FMC8imp_initEv+0x16>
		return QA_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e0fc      	b.n	80071c0 <_ZN7QAD_FMC8imp_initEv+0x210>


	//----------------
	//Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 8006fc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	605a      	str	r2, [r3, #4]
 8006fd0:	609a      	str	r2, [r3, #8]
 8006fd2:	60da      	str	r2, [r3, #12]
 8006fd4:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set pins as alternate function in push-pull mode
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistors on pins
 8006fda:	2301      	movs	r3, #1
 8006fdc:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set pin speed to very high
 8006fde:	2303      	movs	r3, #3
 8006fe0:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_Init.Alternate = GPIO_AF12_FMC;              //Set alternate function to suit use with FMC peripheral
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	64fb      	str	r3, [r7, #76]	; 0x4c

	  //Initialize required pins from GPIO port D
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 8006fe6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006fea:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_Init);
 8006fec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4875      	ldr	r0, [pc, #468]	; (80071c8 <_ZN7QAD_FMC8imp_initEv+0x218>)
 8006ff4:	f7fc fb10 	bl	8003618 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port E
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8006ff8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 8006ffe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007002:	4619      	mov	r1, r3
 8007004:	4871      	ldr	r0, [pc, #452]	; (80071cc <_ZN7QAD_FMC8imp_initEv+0x21c>)
 8007006:	f7fc fb07 	bl	8003618 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port F
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800700a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800700e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_Init);
 8007010:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007014:	4619      	mov	r1, r3
 8007016:	486e      	ldr	r0, [pc, #440]	; (80071d0 <_ZN7QAD_FMC8imp_initEv+0x220>)
 8007018:	f7fc fafe 	bl	8003618 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port G
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800701c:	f248 1337 	movw	r3, #33079	; 0x8137
 8007020:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_Init);
 8007022:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007026:	4619      	mov	r1, r3
 8007028:	486a      	ldr	r0, [pc, #424]	; (80071d4 <_ZN7QAD_FMC8imp_initEv+0x224>)
 800702a:	f7fc faf5 	bl	8003618 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port H
	GPIO_Init.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800702e:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8007032:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_Init);
 8007034:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007038:	4619      	mov	r1, r3
 800703a:	4867      	ldr	r0, [pc, #412]	; (80071d8 <_ZN7QAD_FMC8imp_initEv+0x228>)
 800703c:	f7fc faec 	bl	8003618 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port I
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
 8007040:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8007044:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8007046:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800704a:	4619      	mov	r1, r3
 800704c:	4863      	ldr	r0, [pc, #396]	; (80071dc <_ZN7QAD_FMC8imp_initEv+0x22c>)
 800704e:	f7fc fae3 	bl	8003618 <HAL_GPIO_Init>

	//-------------------------
	//Initialize FMC Peripheral

	//Initialize FMC Clock
	__HAL_RCC_FMC_CLK_ENABLE();
 8007052:	4b63      	ldr	r3, [pc, #396]	; (80071e0 <_ZN7QAD_FMC8imp_initEv+0x230>)
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	4a62      	ldr	r2, [pc, #392]	; (80071e0 <_ZN7QAD_FMC8imp_initEv+0x230>)
 8007058:	f043 0301 	orr.w	r3, r3, #1
 800705c:	6393      	str	r3, [r2, #56]	; 0x38
 800705e:	4b60      	ldr	r3, [pc, #384]	; (80071e0 <_ZN7QAD_FMC8imp_initEv+0x230>)
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]

	//Fill FMC initialization details into Handle structure
	//NOTE: The settings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	m_sHandle.Instance                = FMC_SDRAM_DEVICE;                     //Set FMC SDRAM Device as required instance
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a5d      	ldr	r2, [pc, #372]	; (80071e4 <_ZN7QAD_FMC8imp_initEv+0x234>)
 800706e:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.SDBank             = FMC_SDRAM_BANK1;                      //Set SDRAM as being connected to FMCs SDRAM bank 1
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	639a      	str	r2, [r3, #56]	; 0x38
	m_sHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;          //Set size of column address to 8 bits
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	63da      	str	r2, [r3, #60]	; 0x3c
	m_sHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;            //Set size of row address to 12 bits
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2204      	movs	r2, #4
 8007080:	641a      	str	r2, [r3, #64]	; 0x40
	m_sHandle.Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;           //Set data bus width to 32 bits
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	645a      	str	r2, [r3, #68]	; 0x44
	m_sHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;         //Set number of SDRAM module internal banks to 4
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2240      	movs	r2, #64	; 0x40
 800708c:	649a      	str	r2, [r3, #72]	; 0x48
	m_sHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;              //Set column address strobe (CAS) latency to 3 cycles
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8007094:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;   //Disable write protection, as we want to be able to both read and write to SDRAM
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	651a      	str	r2, [r3, #80]	; 0x50
	m_sHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;             //Set SDRAM clock period to 2 clock cycles
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070a2:	655a      	str	r2, [r3, #84]	; 0x54
	m_sHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;              //Enable read burst
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80070aa:	659a      	str	r2, [r3, #88]	; 0x58
	m_sHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;              //Set read pipe delay to 0 clock cycles
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	65da      	str	r2, [r3, #92]	; 0x5c

	//Fill SDRAM timing details into timing structure
	//NOTE: The timings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	FMC_SDRAM_TimingTypeDef SDRAM_Timing = {0};
 80070b2:	f107 0320 	add.w	r3, r7, #32
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	605a      	str	r2, [r3, #4]
 80070bc:	609a      	str	r2, [r3, #8]
 80070be:	60da      	str	r2, [r3, #12]
 80070c0:	611a      	str	r2, [r3, #16]
 80070c2:	615a      	str	r2, [r3, #20]
 80070c4:	619a      	str	r2, [r3, #24]
	SDRAM_Timing.LoadToActiveDelay    = 2;  //Set delay between a Load Mode Register command and an Active or Refresh command to 2 clock cycles
 80070c6:	2302      	movs	r3, #2
 80070c8:	623b      	str	r3, [r7, #32]
	SDRAM_Timing.ExitSelfRefreshDelay = 7;  //Set delay between releasing Self Refresh command and issuing of Active command to 7 clock cycles
 80070ca:	2307      	movs	r3, #7
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
	SDRAM_Timing.SelfRefreshTime      = 4;  //Set minimum Self Refresh period to 4 clock cycles
 80070ce:	2304      	movs	r3, #4
 80070d0:	62bb      	str	r3, [r7, #40]	; 0x28
	SDRAM_Timing.RowCycleDelay        = 7;  //Set delay between Refresh command and Activate command, or between consecutive Refresh commands to 7 clock cycles
 80070d2:	2307      	movs	r3, #7
 80070d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	SDRAM_Timing.WriteRecoveryTime    = 2;  //Set Write Recovery Time to 2 clock cycles
 80070d6:	2302      	movs	r3, #2
 80070d8:	633b      	str	r3, [r7, #48]	; 0x30
	SDRAM_Timing.RPDelay              = 2;  //Set delay between a Precharge command and any other command to 2 clock cycles
 80070da:	2302      	movs	r3, #2
 80070dc:	637b      	str	r3, [r7, #52]	; 0x34
	SDRAM_Timing.RCDDelay             = 2;  //Set delay between an Activate command and a Read/Write command to 2 clock cycles
 80070de:	2302      	movs	r3, #2
 80070e0:	63bb      	str	r3, [r7, #56]	; 0x38

	//Initialize the FMC peripheral using the required settings and timings to suit the specific SDRAM module
	if (HAL_SDRAM_Init(&m_sHandle, &SDRAM_Timing) != HAL_OK) {
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3334      	adds	r3, #52	; 0x34
 80070e6:	f107 0220 	add.w	r2, r7, #32
 80070ea:	4611      	mov	r1, r2
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fe ff71 	bl	8005fd4 <HAL_SDRAM_Init>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	bf14      	ite	ne
 80070f8:	2301      	movne	r3, #1
 80070fa:	2300      	moveq	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <_ZN7QAD_FMC8imp_initEv+0x156>
		return QA_Fail;
 8007102:	2301      	movs	r3, #1
 8007104:	e05c      	b.n	80071c0 <_ZN7QAD_FMC8imp_initEv+0x210>
	}

  //-------------------
	//Initialize SDRAM IC

	FMC_SDRAM_CommandTypeDef  SDRAM_Cmd = {0};
 8007106:	f107 0310 	add.w	r3, r7, #16
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	605a      	str	r2, [r3, #4]
 8007110:	609a      	str	r2, [r3, #8]
 8007112:	60da      	str	r2, [r3, #12]

		//Send command to SDRAM module to enable its clock
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;   //Set to Clock Enable Command
 8007114:	2301      	movs	r3, #1
 8007116:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007118:	2310      	movs	r3, #16
 800711a:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 800711c:	2301      	movs	r3, #1
 800711e:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8007120:	2300      	movs	r3, #0
 8007122:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8007124:	f107 0310 	add.w	r3, r7, #16
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f890 	bl	8007250 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Delay for 1ms to allow time for SDRAM clock to enable
	HAL_Delay(1);
 8007130:	2001      	movs	r0, #1
 8007132:	f7fb fbed 	bl	8002910 <HAL_Delay>

		//Send command to SDRAM module to precharge all banks
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_PALL;  //Set to Precharge All command
 8007136:	2302      	movs	r3, #2
 8007138:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800713a:	2310      	movs	r3, #16
 800713c:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 800713e:	2301      	movs	r3, #1
 8007140:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8007146:	f107 0310 	add.w	r3, r7, #16
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f87f 	bl	8007250 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Send command to SDRAM module to Configure Auto Refresh
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; //Set to Auto Refresh Mode command
 8007152:	2303      	movs	r3, #3
 8007154:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007156:	2310      	movs	r3, #16
 8007158:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 8;                              //Set number of consecutive auto refresh commands to 8
 800715a:	2308      	movs	r3, #8
 800715c:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8007162:	f107 0310 	add.w	r3, r7, #16
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f871 	bl	8007250 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Program Mode Register
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;        //Set to Load Mode Register command
 800716e:	2304      	movs	r3, #4
 8007170:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007172:	2310      	movs	r3, #16
 8007174:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 8007176:	2301      	movs	r3, #1
 8007178:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681a      	ldr	r2, [r3, #0]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8007182:	431a      	orrs	r2, r3
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	69db      	ldr	r3, [r3, #28]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 8007188:	431a      	orrs	r2, r3
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 800718e:	431a      	orrs	r2, r3
																		 m_uModeReg_WriteBurst_Single;   //Set write burst length to 1 32bit word
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 8007194:	4313      	orrs	r3, r2
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8007196:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8007198:	f107 0310 	add.w	r3, r7, #16
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f856 	bl	8007250 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>


	//---------------------------------
	//Program SDRAM module refresh rate
	HAL_SDRAM_ProgramRefreshRate(&m_sHandle, m_uRefresh);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	4619      	mov	r1, r3
 80071b0:	4610      	mov	r0, r2
 80071b2:	f7fe ff78 	bl	80060a6 <HAL_SDRAM_ProgramRefreshRate>

	//Set Driver State
	m_eState = QA_Initialized; //Set driver as being initializeed
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	//Return
	return QA_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3750      	adds	r7, #80	; 0x50
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40020c00 	.word	0x40020c00
 80071cc:	40021000 	.word	0x40021000
 80071d0:	40021400 	.word	0x40021400
 80071d4:	40021800 	.word	0x40021800
 80071d8:	40021c00 	.word	0x40021c00
 80071dc:	40022000 	.word	0x40022000
 80071e0:	40023800 	.word	0x40023800
 80071e4:	a0000140 	.word	0xa0000140

080071e8 <_ZN7QAD_FMC8imp_testEv>:
//QAD_FMC::imp_test
//QAD_FMC Test Method
//
//Used to perform read and write test of full 16 megabytes of SDRAM
//Returns QA_OK if test passes, or QA_Fail if test is not successful
QA_Result QAD_FMC::imp_test(void) {
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]

	//Write values to whole 16 megabytes of SDRAM
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 80071f0:	2300      	movs	r3, #0
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071fa:	d209      	bcs.n	8007210 <_ZN7QAD_FMC8imp_testEv+0x28>
		QAD_FMC_Data->words[i] = i;
 80071fc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	e7f1      	b.n	80071f4 <_ZN7QAD_FMC8imp_testEv+0xc>
	}

	//Read values from while 16 megabytes of SDRAM, and confirm that they match the values that were written to it
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8007210:	2300      	movs	r3, #0
 8007212:	60bb      	str	r3, [r7, #8]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800721a:	d212      	bcs.n	8007242 <_ZN7QAD_FMC8imp_testEv+0x5a>

		//If data read doesn't match data written then return QA_Fail
		if (QAD_FMC_Data->words[i] != i)
 800721c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	429a      	cmp	r2, r3
 800722a:	bf14      	ite	ne
 800722c:	2301      	movne	r3, #1
 800722e:	2300      	moveq	r3, #0
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <_ZN7QAD_FMC8imp_testEv+0x52>
			return QA_Fail;
 8007236:	2301      	movs	r3, #1
 8007238:	e004      	b.n	8007244 <_ZN7QAD_FMC8imp_testEv+0x5c>
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	3301      	adds	r3, #1
 800723e:	60bb      	str	r3, [r7, #8]
 8007240:	e7e8      	b.n	8007214 <_ZN7QAD_FMC8imp_testEv+0x2c>
	}

	//Return QA_OK as if we reach this point then the test has passed
	return QA_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>:
//QAD_FMC::cmd
//QAD_FMC Initialization Method
//
//Used to send commands to SDRAM module
//pCmd - FMC_SDRAM_CommandTypeDef containing details of command to be sent to SDRAM module
void QAD_FMC::cmd(FMC_SDRAM_CommandTypeDef& pCmd) {
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
	HAL_SDRAM_SendCommand(&m_sHandle, &pCmd, m_uTimeout);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	461a      	mov	r2, r3
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	f7fe fef2 	bl	8006050 <HAL_SDRAM_SendCommand>
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4613      	mov	r3, r2
 8007280:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	88fa      	ldrh	r2, [r7, #6]
 800728c:	809a      	strh	r2, [r3, #4]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	719a      	strb	r2, [r3, #6]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	609a      	str	r2, [r3, #8]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	60da      	str	r2, [r3, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 f841 	bl	800732e <_ZN15QAD_GPIO_Output10periphInitEv>
}
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	889b      	ldrh	r3, [r3, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	4619      	mov	r1, r3
 80072ca:	f7fc fc5d 	bl	8003b88 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	741a      	strb	r2, [r3, #16]
}
 80072d4:	bf00      	nop
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	889b      	ldrh	r3, [r3, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	4619      	mov	r1, r3
 80072f0:	f7fc fc4a 	bl	8003b88 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	741a      	strb	r2, [r3, #16]
}
 80072fa:	bf00      	nop
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	7c1b      	ldrb	r3, [r3, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d005      	beq.n	800731e <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8007312:	2b01      	cmp	r3, #1
 8007314:	d107      	bne.n	8007326 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff ffe0 	bl	80072dc <_ZN15QAD_GPIO_Output3offEv>
	    break;
 800731c:	e003      	b.n	8007326 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff ffc9 	bl	80072b6 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8007324:	bf00      	nop
	}
}
 8007326:	bf00      	nop
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 800732e:	b580      	push	{r7, lr}
 8007330:	b088      	sub	sp, #32
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8007336:	f107 030c 	add.w	r3, r7, #12
 800733a:	2200      	movs	r2, #0
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	605a      	str	r2, [r3, #4]
 8007340:	609a      	str	r2, [r3, #8]
 8007342:	60da      	str	r2, [r3, #12]
 8007344:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	889b      	ldrh	r3, [r3, #4]
 800734a:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	799b      	ldrb	r3, [r3, #6]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8007354:	2311      	movs	r3, #17
 8007356:	e000      	b.n	800735a <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8007358:	2301      	movs	r3, #1
 800735a:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f107 020c 	add.w	r2, r7, #12
 8007370:	4611      	mov	r1, r2
 8007372:	4618      	mov	r0, r3
 8007374:	f7fc f950 	bl	8003618 <HAL_GPIO_Init>
}
 8007378:	bf00      	nop
 800737a:	3720      	adds	r7, #32
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Input Constructor
//
//This method will initialize the required GPIO pin with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Input::QAD_GPIO_Input(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	80fb      	strh	r3, [r7, #6]
		m_pGPIO(pGPIO),
		m_uPin(uPin),
		m_ePullMode(QAD_GPIO_PullMode_NoPull) {
 800738e:	4a0a      	ldr	r2, [pc, #40]	; (80073b8 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft+0x38>)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	605a      	str	r2, [r3, #4]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	88fa      	ldrh	r2, [r7, #6]
 800739e:	811a      	strh	r2, [r3, #8]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	60da      	str	r2, [r3, #12]

	//Initialize the GPIO pin
	periphInit();
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 f817 	bl	80073da <_ZN14QAD_GPIO_Input10periphInitEv>
}
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	0800b6e8 	.word	0x0800b6e8

080073bc <_ZN14QAD_GPIO_Input11setPullModeE17QAD_GPIO_PullMode>:
//QAD_GPIO_Input::setPullMode
//QAD_GPIO_Input Control Method
//
//Sets new pull mode (Pull-up, Pull-down or No-pull)
//ePull - New pull mode. Member of QAD_GPIO_PullMode as defined in QAD_GPIO.hpp
void QAD_GPIO_Input::setPullMode(QAD_GPIO_PullMode ePull) {
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]

	//Store new Pull mode setting
	m_ePullMode = ePull;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	60da      	str	r2, [r3, #12]

	//Reinitialize peripheral with new Pull mode
	periphInit();
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f804 	bl	80073da <_ZN14QAD_GPIO_Input10periphInitEv>
}
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <_ZN14QAD_GPIO_Input10periphInitEv>:
//QAD_GPIO_Input::periphInit
//QAD_GPIO_Input Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Input::periphInit(void) {
 80073da:	b580      	push	{r7, lr}
 80073dc:	b088      	sub	sp, #32
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_Init = {0};
 80073e2:	f107 030c 	add.w	r3, r7, #12
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	605a      	str	r2, [r3, #4]
 80073ec:	609a      	str	r2, [r3, #8]
 80073ee:	60da      	str	r2, [r3, #12]
 80073f0:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	891b      	ldrh	r3, [r3, #8]
 80073f6:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = GPIO_MODE_INPUT;
 80073f8:	2300      	movs	r3, #0
 80073fa:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 8007402:	2300      	movs	r3, #0
 8007404:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f107 020c 	add.w	r2, r7, #12
 800740e:	4611      	mov	r1, r2
 8007410:	4618      	mov	r0, r3
 8007412:	f7fc f901 	bl	8003618 <HAL_GPIO_Init>
}
 8007416:	bf00      	nop
 8007418:	3720      	adds	r7, #32
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <_ZN10QAD_I2CMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_I2CMgr& get(void) {
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
		static QAD_I2CMgr instance;
 8007424:	4b10      	ldr	r3, [pc, #64]	; (8007468 <_ZN10QAD_I2CMgr3getEv+0x48>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f3bf 8f5b 	dmb	ish
 800742c:	b2db      	uxtb	r3, r3
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	bf0c      	ite	eq
 8007436:	2301      	moveq	r3, #1
 8007438:	2300      	movne	r3, #0
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d010      	beq.n	8007462 <_ZN10QAD_I2CMgr3getEv+0x42>
 8007440:	4809      	ldr	r0, [pc, #36]	; (8007468 <_ZN10QAD_I2CMgr3getEv+0x48>)
 8007442:	f003 f938 	bl	800a6b6 <__cxa_guard_acquire>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	bf14      	ite	ne
 800744c:	2301      	movne	r3, #1
 800744e:	2300      	moveq	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d005      	beq.n	8007462 <_ZN10QAD_I2CMgr3getEv+0x42>
 8007456:	4805      	ldr	r0, [pc, #20]	; (800746c <_ZN10QAD_I2CMgr3getEv+0x4c>)
 8007458:	f001 f9ce 	bl	80087f8 <_ZN10QAD_I2CMgrC1Ev>
 800745c:	4802      	ldr	r0, [pc, #8]	; (8007468 <_ZN10QAD_I2CMgr3getEv+0x48>)
 800745e:	f003 f936 	bl	800a6ce <__cxa_guard_release>
		return instance;
 8007462:	4b02      	ldr	r3, [pc, #8]	; (800746c <_ZN10QAD_I2CMgr3getEv+0x4c>)
	}
 8007464:	4618      	mov	r0, r3
 8007466:	bd80      	pop	{r7, pc}
 8007468:	2000020c 	.word	0x2000020c
 800746c:	200001dc 	.word	0x200001dc

08007470 <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_I2C_PeriphState enum) of a I2C peripheral
	//eI2C - The I2C peripheral to retrieve the state for. Member of QAD_I2C_Periph
	//Returns a member of QAD_I2C_State enum (QAD_I2C_Unused, etc)
	static QAD_I2C_State getState(QAD_I2C_Periph eI2C) {
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 800747a:	79fb      	ldrb	r3, [r7, #7]
 800747c:	2b03      	cmp	r3, #3
 800747e:	d901      	bls.n	8007484 <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph+0x14>
			return QAD_I2C_InvalidDevice;
 8007480:	2304      	movs	r3, #4
 8007482:	e00a      	b.n	800749a <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph+0x2a>

		return get().m_sI2Cs[eI2C].eState;
 8007484:	f7ff ffcc 	bl	8007420 <_ZN10QAD_I2CMgr3getEv>
 8007488:	4601      	mov	r1, r0
 800748a:	79fa      	ldrb	r2, [r7, #7]
 800748c:	4613      	mov	r3, r2
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	440b      	add	r3, r1
 8007496:	3301      	adds	r3, #1
 8007498:	781b      	ldrb	r3, [r3, #0]
	}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph>:


	//Used to retrieve an instance for an I2C peripheral
	//eI2C - The I2C peripheral to retrieve the instance for. Member of QAD_I2C_Periph
	//Returns I2C_TypeDef, as defined in stm32f769xx.h
	static I2C_TypeDef* getInstance(QAD_I2C_Periph eI2C) {
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	4603      	mov	r3, r0
 80074aa:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 80074ac:	79fb      	ldrb	r3, [r7, #7]
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d901      	bls.n	80074b6 <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph+0x14>
			return NULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e00a      	b.n	80074cc <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph+0x2a>

		return get().m_sI2Cs[eI2C].pInstance;
 80074b6:	f7ff ffb3 	bl	8007420 <_ZN10QAD_I2CMgr3getEv>
 80074ba:	4601      	mov	r1, r0
 80074bc:	79fa      	ldrb	r2, [r7, #7]
 80074be:	4613      	mov	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	3304      	adds	r3, #4
 80074ca:	681b      	ldr	r3, [r3, #0]
	}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>:


	//Used to retrieve an Event IRQ Enum for an I2C peripheral
	//eI2C - The I2C peripheral to retrieve the IRQ enum for. Member of QAD_I2C_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQEvent(QAD_I2C_Periph eI2C) {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	4603      	mov	r3, r0
 80074dc:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 80074de:	79fb      	ldrb	r3, [r7, #7]
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d902      	bls.n	80074ea <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph+0x16>
			return UsageFault_IRQn;
 80074e4:	f06f 0309 	mvn.w	r3, #9
 80074e8:	e00b      	b.n	8007502 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph+0x2e>

		return get().m_sI2Cs[eI2C].eIRQ_Event;
 80074ea:	f7ff ff99 	bl	8007420 <_ZN10QAD_I2CMgr3getEv>
 80074ee:	4601      	mov	r1, r0
 80074f0:	79fa      	ldrb	r2, [r7, #7]
 80074f2:	4613      	mov	r3, r2
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	440b      	add	r3, r1
 80074fc:	3308      	adds	r3, #8
 80074fe:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>:


	//Used to retrieve an Error IRQ Enum for an I2C peripheral
	//eI2C - The I2C peripheral to retrieve the IRQ enum for. Member of QAD_I2C_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQError(QAD_I2C_Periph eI2C) {
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	4603      	mov	r3, r0
 8007512:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	2b03      	cmp	r3, #3
 8007518:	d902      	bls.n	8007520 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph+0x16>
			return UsageFault_IRQn;
 800751a:	f06f 0309 	mvn.w	r3, #9
 800751e:	e00b      	b.n	8007538 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph+0x2e>

		return get().m_sI2Cs[eI2C].eIRQ_Error;
 8007520:	f7ff ff7e 	bl	8007420 <_ZN10QAD_I2CMgr3getEv>
 8007524:	4601      	mov	r1, r0
 8007526:	79fa      	ldrb	r2, [r7, #7]
 8007528:	4613      	mov	r3, r2
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	3309      	adds	r3, #9
 8007534:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <_ZN10QAD_I2CMgr11registerI2CE14QAD_I2C_Periph13QAD_I2C_State>:
	//Management Methods

	//Used to register an I2C peripheral as being used by a driver
	//eI2C - the I2C peripheral to be registered
	//Returns QA_OK if successful, or returns QA_Error_PeriphBusy if the selected I2C is already in use
	static QA_Result registerI2C(QAD_I2C_Periph eI2C, QAD_I2C_State eMode) {
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	460a      	mov	r2, r1
 800754a:	71fb      	strb	r3, [r7, #7]
 800754c:	4613      	mov	r3, r2
 800754e:	71bb      	strb	r3, [r7, #6]
		return get().imp_registerI2C(eI2C, eMode);
 8007550:	f7ff ff66 	bl	8007420 <_ZN10QAD_I2CMgr3getEv>
 8007554:	79ba      	ldrb	r2, [r7, #6]
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	4619      	mov	r1, r3
 800755a:	f001 f9a9 	bl	80088b0 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State>
 800755e:	4603      	mov	r3, r0
	}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <_ZN10QAD_I2CMgr13deregisterI2CE14QAD_I2C_Periph>:


	//Used to deregister an I2C to mark it as no longer being used by a driver
	//eI2C - the I2C Peripheral to be deregistered
	static void deregisterI2C(QAD_I2C_Periph eI2C) {
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	4603      	mov	r3, r0
 8007570:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterI2C(eI2C);
 8007572:	f7ff ff55 	bl	8007420 <_ZN10QAD_I2CMgr3getEv>
 8007576:	4602      	mov	r2, r0
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	4619      	mov	r1, r3
 800757c:	4610      	mov	r0, r2
 800757e:	f001 f9c2 	bl	8008906 <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph>
	}
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <_ZN10QAD_I2CMgr11enableClockE14QAD_I2C_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific I2C peripheral
	//eI2C - the I2C peripheral to enable the clock for
	static void enableClock(QAD_I2C_Periph eI2C) {
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	4603      	mov	r3, r0
 8007592:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eI2C);
 8007594:	f7ff ff44 	bl	8007420 <_ZN10QAD_I2CMgr3getEv>
 8007598:	4602      	mov	r2, r0
 800759a:	79fb      	ldrb	r3, [r7, #7]
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f001 f9cc 	bl	800893c <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph>
	}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <_ZN10QAD_I2CMgr12disableClockE14QAD_I2C_Periph>:

	//Used to disable the clock for a specific I2C peripheral
	//eI2C - the I2C peripheral to disable the clock for
	static void disableClock(QAD_I2C_Periph eI2C) {
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	4603      	mov	r3, r0
 80075b4:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eI2C);
 80075b6:	f7ff ff33 	bl	8007420 <_ZN10QAD_I2CMgr3getEv>
 80075ba:	4602      	mov	r2, r0
 80075bc:	79fb      	ldrb	r3, [r7, #7]
 80075be:	4619      	mov	r1, r3
 80075c0:	4610      	mov	r0, r2
 80075c2:	f001 fa3f 	bl	8008a44 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph>
	}
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <_ZN7QAD_I2C4initEv>:
//QAD_I2C::init
//QAD_I2C Initialization Method
//
//Used to initialize the I2C driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result aas defined in setup.hpp)
QA_Result QAD_I2C::init(void) {
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b084      	sub	sp, #16
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]

	//Check if selected I2C peripheral is currently available
  if (QAD_I2CMgr::getState(m_eI2C))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	799b      	ldrb	r3, [r3, #6]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff ff48 	bl	8007470 <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bf14      	ite	ne
 80075e6:	2301      	movne	r3, #1
 80075e8:	2300      	moveq	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <_ZN7QAD_I2C4initEv+0x26>
  	return QA_Error_PeriphBusy;
 80075f0:	2302      	movs	r3, #2
 80075f2:	e013      	b.n	800761c <_ZN7QAD_I2C4initEv+0x4e>

  //Register I2C peripheral as now being in use
  QAD_I2CMgr::registerI2C(m_eI2C, QAD_I2C_InUse_Master);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	799b      	ldrb	r3, [r3, #6]
 80075f8:	2101      	movs	r1, #1
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff ffa0 	bl	8007540 <_ZN10QAD_I2CMgr11registerI2CE14QAD_I2C_Periph13QAD_I2C_State>

  //Initialize I2C peripheral
  QA_Result eRes = periphInit();
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f871 	bl	80076e8 <_ZN7QAD_I2C10periphInitEv>
 8007606:	4603      	mov	r3, r0
 8007608:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister I2C peripheral
  if (eRes)
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d004      	beq.n	800761a <_ZN7QAD_I2C4initEv+0x4c>
  	QAD_I2CMgr::deregisterI2C(m_eI2C);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	799b      	ldrb	r3, [r3, #6]
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff ffa7 	bl	8007568 <_ZN10QAD_I2CMgr13deregisterI2CE14QAD_I2C_Periph>

  //Return initialization result
  return eRes;
 800761a:	7bfb      	ldrb	r3, [r7, #15]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <_ZN7QAD_I2C5startEv>:

//QAD_I2C::start
//QAD_I2C Control Method
//
//Used to enable the I2C driver
void QAD_I2C::start(void) {
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  __HAL_I2C_ENABLE(&m_sHandle);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]
  m_eState = QA_Active;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	715a      	strb	r2, [r3, #5]
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <_ZN7QAD_I2C4stopEv>:

//QAD_I2C::stop
//QAD_I2C Control Method
//
//Used to disable the I2C driver
void QAD_I2C::stop(void) {
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  __HAL_I2C_DISABLE(&m_sHandle);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	f022 0201 	bic.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
  m_eState = QA_Inactive;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	715a      	strb	r2, [r3, #5]
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <_ZN7QAD_I2C8read8BitEthPh>:
//Used to read a value from an I2C device connected to the bus, using an 8bit register address and 8bit data
//uAddr  - The address of the I2C device to read from
//uReg   - The register address to access on the I2C device that is being read from
//pValue - A pointer to a uint8_t where the read data will be stored
//Returns QA_OK if successful, or QA_Fail if unable to perform read
QA_Result QAD_I2C::read8Bit(uint16_t uAddr, uint8_t uReg, uint8_t* pValue) {
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af02      	add	r7, sp, #8
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	607b      	str	r3, [r7, #4]
 8007682:	460b      	mov	r3, r1
 8007684:	817b      	strh	r3, [r7, #10]
 8007686:	4613      	mov	r3, r2
 8007688:	727b      	strb	r3, [r7, #9]
  return read(uAddr, (uint16_t)uReg, m_uMemAddrSize8Bit, pValue, 1);
 800768a:	7a7b      	ldrb	r3, [r7, #9]
 800768c:	b29a      	uxth	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	789b      	ldrb	r3, [r3, #2]
 8007692:	b298      	uxth	r0, r3
 8007694:	8979      	ldrh	r1, [r7, #10]
 8007696:	2301      	movs	r3, #1
 8007698:	9301      	str	r3, [sp, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	4603      	mov	r3, r0
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f90e 	bl	80078c2 <_ZN7QAD_I2C4readEtttPht>
 80076a6:	4603      	mov	r3, r0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <_ZN7QAD_I2C16readMultiple8BitEthPht>:
//uAddr  - The address of the I2C device to read from
//uReg   - The register address to access on the I2C device that is being read from
//pData   - A pointer to an array of bytes that will contain the data to be read
//uLength - The number of bytes to be read
//Returns QA_OK if successful, or QA_Fail if unable to perform read
QA_Result QAD_I2C::readMultiple8Bit(uint16_t uAddr, uint8_t uReg, uint8_t* pData, uint16_t uLength) {
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af02      	add	r7, sp, #8
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	607b      	str	r3, [r7, #4]
 80076ba:	460b      	mov	r3, r1
 80076bc:	817b      	strh	r3, [r7, #10]
 80076be:	4613      	mov	r3, r2
 80076c0:	727b      	strb	r3, [r7, #9]
  return read(uAddr, (uint16_t)uReg, m_uMemAddrSize8Bit, pData, uLength);
 80076c2:	7a7b      	ldrb	r3, [r7, #9]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	789b      	ldrb	r3, [r3, #2]
 80076ca:	b298      	uxth	r0, r3
 80076cc:	8979      	ldrh	r1, [r7, #10]
 80076ce:	8b3b      	ldrh	r3, [r7, #24]
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	4603      	mov	r3, r0
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 f8f2 	bl	80078c2 <_ZN7QAD_I2C4readEtttPht>
 80076de:	4603      	mov	r3, r0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <_ZN7QAD_I2C10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the I2C peripheral itself as well as setting interrupt priorities and enabling the interrupts
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_I2C::periphInit(void) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init = {0};
 80076f0:	f107 030c 	add.w	r3, r7, #12
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	605a      	str	r2, [r3, #4]
 80076fa:	609a      	str	r2, [r3, #8]
 80076fc:	60da      	str	r2, [r3, #12]
 80076fe:	611a      	str	r2, [r3, #16]

  //Init SCK GPIO Pin
  GPIO_Init.Pin       = m_uSCL_Pin;                //Set pin number
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007704:	60fb      	str	r3, [r7, #12]
  GPIO_Init.Mode      = GPIO_MODE_AF_OD;           //Set clock pin as alternate function in open-drain mode
 8007706:	2312      	movs	r3, #18
 8007708:	613b      	str	r3, [r7, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;               //Enable pull-up resistor on pin
 800770a:	2301      	movs	r3, #1
 800770c:	617b      	str	r3, [r7, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH; //Set GPIO pin speed
 800770e:	2303      	movs	r3, #3
 8007710:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Alternate = m_uSCL_AF;                 //Set alternate function to suit required I2C peripheral
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8007718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(m_pSCL_GPIO, &GPIO_Init);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	f107 020c 	add.w	r2, r7, #12
 8007722:	4611      	mov	r1, r2
 8007724:	4618      	mov	r0, r3
 8007726:	f7fb ff77 	bl	8003618 <HAL_GPIO_Init>

  //Init SDA GPIO Pin
  GPIO_Init.Pin       = m_uSDA_Pin;                //Set pin number
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800772e:	60fb      	str	r3, [r7, #12]
  GPIO_Init.Mode      = GPIO_MODE_AF_OD;           //Set clock pin as alternate function in open-drain mode
 8007730:	2312      	movs	r3, #18
 8007732:	613b      	str	r3, [r7, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;               //Enable pull-up resistor on pin
 8007734:	2301      	movs	r3, #1
 8007736:	617b      	str	r3, [r7, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH; //Set GPIO pin speed
 8007738:	2303      	movs	r3, #3
 800773a:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Alternate = m_uSDA_AF;                 //Set alternate function to suit required I2C peripheral
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(m_pSDA_GPIO, &GPIO_Init);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	f107 020c 	add.w	r2, r7, #12
 800774c:	4611      	mov	r1, r2
 800774e:	4618      	mov	r0, r3
 8007750:	f7fb ff62 	bl	8003618 <HAL_GPIO_Init>


  //Enable I2C Clock
  QAD_I2CMgr::enableClock(m_eI2C);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	799b      	ldrb	r3, [r3, #6]
 8007758:	4618      	mov	r0, r3
 800775a:	f7ff ff16 	bl	800758a <_ZN10QAD_I2CMgr11enableClockE14QAD_I2C_Periph>


  //Initialize I2C Peripheral
  m_sHandle.Instance             = QAD_I2CMgr::getInstance(m_eI2C);  //Set instance for required I2C peripheral
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	799b      	ldrb	r3, [r3, #6]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fe9d 	bl	80074a2 <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph>
 8007768:	4602      	mov	r2, r0
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	639a      	str	r2, [r3, #56]	; 0x38
  m_sHandle.Init.Timing          = m_uTiming;                        //Set selected clock speed
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	63da      	str	r2, [r3, #60]	; 0x3c
  m_sHandle.Init.AddressingMode  = m_eAddressingMode;                //Set selected addressing mode
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	645a      	str	r2, [r3, #68]	; 0x44
  m_sHandle.Init.DualAddressMode = m_eDualAddressingMode;            //Set whether dual addressing mode is being used
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	695a      	ldr	r2, [r3, #20]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	649a      	str	r2, [r3, #72]	; 0x48
  m_sHandle.Init.GeneralCallMode = m_eGeneralCallMode;               //Set whether general call addressing mode is being used
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	655a      	str	r2, [r3, #84]	; 0x54
  m_sHandle.Init.NoStretchMode   = m_eNoStretchMode;                 //Set whether clock stretching is currently disabled
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69da      	ldr	r2, [r3, #28]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	659a      	str	r2, [r3, #88]	; 0x58
  m_sHandle.Init.OwnAddress1     = m_uOwnAddress1;                   //Set primary peripheral I2C address
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	8c1b      	ldrh	r3, [r3, #32]
 800779a:	461a      	mov	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	641a      	str	r2, [r3, #64]	; 0x40
  m_sHandle.Init.OwnAddress2     = m_uOwnAddress2;                   //Set secondary peripheral I2C address
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80077a4:	461a      	mov	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_I2C_Init(&m_sHandle) != HAL_OK) {
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3338      	adds	r3, #56	; 0x38
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fc fa04 	bl	8003bbc <HAL_I2C_Init>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	bf14      	ite	ne
 80077ba:	2301      	movne	r3, #1
 80077bc:	2300      	moveq	r3, #0
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <_ZN7QAD_I2C10periphInitEv+0xe8>
  	periphDeinit(DeinitPartial);
 80077c4:	2100      	movs	r1, #0
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f839 	bl	800783e <_ZN7QAD_I2C12periphDeinitENS_10DeinitModeE>
  	return QA_Fail;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e032      	b.n	8007836 <_ZN7QAD_I2C10periphInitEv+0x14e>
  }


  //Enable I2C Interrupt priorties and enable IRQs
  HAL_NVIC_SetPriority(QAD_I2CMgr::getIRQEvent(m_eI2C), m_uIRQPriority_Event, 0x0);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	799b      	ldrb	r3, [r3, #6]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff fe7d 	bl	80074d4 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>
 80077da:	4603      	mov	r3, r0
 80077dc:	4618      	mov	r0, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	79db      	ldrb	r3, [r3, #7]
 80077e2:	2200      	movs	r2, #0
 80077e4:	4619      	mov	r1, r3
 80077e6:	f7fb f9b6 	bl	8002b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QAD_I2CMgr::getIRQEvent(m_eI2C));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	799b      	ldrb	r3, [r3, #6]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff fe70 	bl	80074d4 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>
 80077f4:	4603      	mov	r3, r0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fb f9c9 	bl	8002b8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(QAD_I2CMgr::getIRQError(m_eI2C), m_uIRQPriority_Error, 0x0);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	799b      	ldrb	r3, [r3, #6]
 8007800:	4618      	mov	r0, r3
 8007802:	f7ff fe82 	bl	800750a <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>
 8007806:	4603      	mov	r3, r0
 8007808:	4618      	mov	r0, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7a1b      	ldrb	r3, [r3, #8]
 800780e:	2200      	movs	r2, #0
 8007810:	4619      	mov	r1, r3
 8007812:	f7fb f9a0 	bl	8002b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QAD_I2CMgr::getIRQError(m_eI2C));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	799b      	ldrb	r3, [r3, #6]
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff fe75 	bl	800750a <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>
 8007820:	4603      	mov	r3, r0
 8007822:	4618      	mov	r0, r3
 8007824:	f7fb f9b3 	bl	8002b8e <HAL_NVIC_EnableIRQ>


  //Set Driver States
  m_eInitState = QA_Initialized; //Set driver state as initialized
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	711a      	strb	r2, [r3, #4]
  m_eState     = QA_Inactive;    //Set driver as currently inactive
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	715a      	strb	r2, [r3, #5]


  //Return
  return QA_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3720      	adds	r7, #32
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <_ZN7QAD_I2C12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling interrupts
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed).
//              Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_I2C::periphDeinit(DeinitMode eDeinitMode) {
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	460b      	mov	r3, r1
 8007848:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d019      	beq.n	8007884 <_ZN7QAD_I2C12periphDeinitENS_10DeinitModeE+0x46>

		//Deactivate the peripheral
		stop();
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff fefc 	bl	800764e <_ZN7QAD_I2C4stopEv>

		//Disable the interrupts
		HAL_NVIC_DisableIRQ(QAD_I2CMgr::getIRQError(m_eI2C));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	799b      	ldrb	r3, [r3, #6]
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff fe55 	bl	800750a <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>
 8007860:	4603      	mov	r3, r0
 8007862:	4618      	mov	r0, r3
 8007864:	f7fb f9a1 	bl	8002baa <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(QAD_I2CMgr::getIRQEvent(m_eI2C));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	799b      	ldrb	r3, [r3, #6]
 800786c:	4618      	mov	r0, r3
 800786e:	f7ff fe31 	bl	80074d4 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>
 8007872:	4603      	mov	r3, r0
 8007874:	4618      	mov	r0, r3
 8007876:	f7fb f998 	bl	8002baa <HAL_NVIC_DisableIRQ>

		//Deinitialize the peripheral
		HAL_I2C_DeInit(&m_sHandle);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3338      	adds	r3, #56	; 0x38
 800787e:	4618      	mov	r0, r3
 8007880:	f7fc fa2c 	bl	8003cdc <HAL_I2C_DeInit>
	}

	//Disable peripheral clock
	QAD_I2CMgr::disableClock(m_eI2C);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	799b      	ldrb	r3, [r3, #6]
 8007888:	4618      	mov	r0, r3
 800788a:	f7ff fe8f 	bl	80075ac <_ZN10QAD_I2CMgr12disableClockE14QAD_I2C_Periph>

	//Deinitialize GPIOs
	HAL_GPIO_DeInit(m_pSCL_GPIO, m_uSCL_Pin);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007896:	4619      	mov	r1, r3
 8007898:	4610      	mov	r0, r2
 800789a:	f7fc f869 	bl	8003970 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pSDA_GPIO, m_uSDA_Pin);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80078a6:	4619      	mov	r1, r3
 80078a8:	4610      	mov	r0, r2
 80078aa:	f7fc f861 	bl	8003970 <HAL_GPIO_DeInit>

  //Set Driver States
	m_eState     = QA_Inactive;       //Set driver as being inactive
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	715a      	strb	r2, [r3, #5]
	m_eInitState = QA_NotInitialized; //Set driver as not being initialized
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	711a      	strb	r2, [r3, #4]

}
 80078ba:	bf00      	nop
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <_ZN7QAD_I2C4readEtttPht>:
//uReg        - The register address to access on the I2C device that is being read from
//uMemAddress - The number of bytes in size of the register/memory address
//pData       - A pointer to an array of bytes to contain the data to be read
//uLength     - The number of bytes to be read
//Returns QA_OK if successful, or QA_Fail if unable to perform read
QA_Result QAD_I2C::read(uint16_t uAddr, uint16_t uReg, uint16_t uMemAddress, uint8_t* pData, uint16_t uLength) {
 80078c2:	b590      	push	{r4, r7, lr}
 80078c4:	b089      	sub	sp, #36	; 0x24
 80078c6:	af04      	add	r7, sp, #16
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	4608      	mov	r0, r1
 80078cc:	4611      	mov	r1, r2
 80078ce:	461a      	mov	r2, r3
 80078d0:	4603      	mov	r3, r0
 80078d2:	817b      	strh	r3, [r7, #10]
 80078d4:	460b      	mov	r3, r1
 80078d6:	813b      	strh	r3, [r7, #8]
 80078d8:	4613      	mov	r3, r2
 80078da:	80fb      	strh	r3, [r7, #6]
  if (HAL_I2C_Mem_Read(&m_sHandle, uAddr, (uint16_t)uReg, uMemAddress, pData, uLength, m_uTimeout) != HAL_OK)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	88fc      	ldrh	r4, [r7, #6]
 80078e8:	893a      	ldrh	r2, [r7, #8]
 80078ea:	8979      	ldrh	r1, [r7, #10]
 80078ec:	9302      	str	r3, [sp, #8]
 80078ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	4623      	mov	r3, r4
 80078f8:	f7fc fa34 	bl	8003d64 <HAL_I2C_Mem_Read>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	bf14      	ite	ne
 8007902:	2301      	movne	r3, #1
 8007904:	2300      	moveq	r3, #0
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <_ZN7QAD_I2C4readEtttPht+0x4e>
  	return QA_Fail;
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <_ZN7QAD_I2C4readEtttPht+0x50>

  return QA_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	bd90      	pop	{r4, r7, pc}

0800791a <_ZN8QAD_LTDCC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_LTDC() :
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized) {}
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	701a      	strb	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f646 3225 	movw	r2, #27429	; 0x6b25
 800792e:	605a      	str	r2, [r3, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f24f 4224 	movw	r2, #62500	; 0xf424
 8007936:	609a      	str	r2, [r3, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f643 5209 	movw	r2, #15625	; 0x3d09
 800793e:	60da      	str	r2, [r3, #12]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4618      	mov	r0, r3
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
	...

08007950 <_ZN8QAD_LTDC3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_LTDC& get(void) {
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
		static QAD_LTDC instance;
 8007954:	4b10      	ldr	r3, [pc, #64]	; (8007998 <_ZN8QAD_LTDC3getEv+0x48>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	f3bf 8f5b 	dmb	ish
 800795c:	b2db      	uxtb	r3, r3
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	bf0c      	ite	eq
 8007966:	2301      	moveq	r3, #1
 8007968:	2300      	movne	r3, #0
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d010      	beq.n	8007992 <_ZN8QAD_LTDC3getEv+0x42>
 8007970:	4809      	ldr	r0, [pc, #36]	; (8007998 <_ZN8QAD_LTDC3getEv+0x48>)
 8007972:	f002 fea0 	bl	800a6b6 <__cxa_guard_acquire>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	bf14      	ite	ne
 800797c:	2301      	movne	r3, #1
 800797e:	2300      	moveq	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d005      	beq.n	8007992 <_ZN8QAD_LTDC3getEv+0x42>
 8007986:	4805      	ldr	r0, [pc, #20]	; (800799c <_ZN8QAD_LTDC3getEv+0x4c>)
 8007988:	f7ff ffc7 	bl	800791a <_ZN8QAD_LTDCC1Ev>
 800798c:	4802      	ldr	r0, [pc, #8]	; (8007998 <_ZN8QAD_LTDC3getEv+0x48>)
 800798e:	f002 fe9e 	bl	800a6ce <__cxa_guard_release>
		return instance;
 8007992:	4b02      	ldr	r3, [pc, #8]	; (800799c <_ZN8QAD_LTDC3getEv+0x4c>)
	}
 8007994:	4618      	mov	r0, r3
 8007996:	bd80      	pop	{r7, pc}
 8007998:	2000035c 	.word	0x2000035c
 800799c:	20000210 	.word	0x20000210

080079a0 <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>:
	//Communication Methods

	//Used to allow OTM8009A driver (in otm8009a.h file) to communicate with OTM8009A display controller via DSI
	//uNumParams - The number of parameters being supplied
	//pParams    - Pointer to the list of parameters to be supplied
	static void dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
		get().imp_dsi_IO_WriteCmd(uNumParams, pParams);
 80079aa:	f7ff ffd1 	bl	8007950 <_ZN8QAD_LTDC3getEv>
 80079ae:	4603      	mov	r3, r0
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 faeb 	bl	8007f90 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>
	}
 80079ba:	bf00      	nop
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <_ZN8QAD_LTDC8imp_initEv>:
//QAD_LTDC Initialization Method
//
//To be called from static method init()
//Used to initialize the DSI and LTDC peripherals, LTDC layers, the OTM8009A display controller and the required reset and backlight control GPIO pins
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails.
QA_Result QAD_LTDC::imp_init(void) {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b0a2      	sub	sp, #136	; 0x88
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]

  //Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 80079cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	605a      	str	r2, [r3, #4]
 80079d6:	609a      	str	r2, [r3, #8]
 80079d8:	60da      	str	r2, [r3, #12]
 80079da:	611a      	str	r2, [r3, #16]

	  //Initialize Backlight Control Pin
	GPIO_Init.Pin    = QAD_LTDC_BACKLIGHT_PIN;          //Set pin number. (QAD_LTDC_BACKLIGHT_PIN is defined in setup.hpp)
 80079dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079e0:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 80079e2:	2301      	movs	r3, #1
 80079e4:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLDOWN;                   //Enable pull-down resistor so backlight defaults to off
 80079e6:	2302      	movs	r3, #2
 80079e8:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 80079ea:	2300      	movs	r3, #0
 80079ec:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_BACKLIGHT_PORT, &GPIO_Init); //Initialize pin. (QAD_LTDC_BACKLIGHT_PORT is defined in setup.hpp)
 80079ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80079f2:	4619      	mov	r1, r3
 80079f4:	4897      	ldr	r0, [pc, #604]	; (8007c54 <_ZN8QAD_LTDC8imp_initEv+0x290>)
 80079f6:	f7fb fe0f 	bl	8003618 <HAL_GPIO_Init>

		//Initialize OTM8009A Controller Reset Pin
	GPIO_Init.Pin    = QAD_LTDC_RESET_PIN;              //Set pin number. (QAD_LTDC_RESET_PIN is defined in setup.hpp)
 80079fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079fe:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 8007a00:	2301      	movs	r3, #1
 8007a02:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLUP;                     //Enable pull-up resistor as reset is active-low
 8007a04:	2301      	movs	r3, #1
 8007a06:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 8007a08:	2300      	movs	r3, #0
 8007a0a:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_RESET_PORT, &GPIO_Init);     //Initialize pin. (QAD_LTDC_RESET_PORT is defined in setup.hpp)
 8007a0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007a10:	4619      	mov	r1, r3
 8007a12:	4891      	ldr	r0, [pc, #580]	; (8007c58 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8007a14:	f7fb fe00 	bl	8003618 <HAL_GPIO_Init>


	//Reset OTM8009A Controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET); //Pull reset pin low
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a1e:	488e      	ldr	r0, [pc, #568]	; (8007c58 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8007a20:	f7fc f8b2 	bl	8003b88 <HAL_GPIO_WritePin>
	HAL_Delay(20);                                                              //Delay for 20ms to allow for reset process
 8007a24:	2014      	movs	r0, #20
 8007a26:	f7fa ff73 	bl	8002910 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);   //Pull reset pin high
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a30:	4889      	ldr	r0, [pc, #548]	; (8007c58 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8007a32:	f7fc f8a9 	bl	8003b88 <HAL_GPIO_WritePin>
	HAL_Delay(10);                                                              //Delay for 10ms to allow reset process time to complete
 8007a36:	200a      	movs	r0, #10
 8007a38:	f7fa ff6a 	bl	8002910 <HAL_Delay>


	//Initialize LTDC Peripheral Clock
	__HAL_RCC_LTDC_CLK_ENABLE();
 8007a3c:	4b87      	ldr	r3, [pc, #540]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a40:	4a86      	ldr	r2, [pc, #536]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a46:	6453      	str	r3, [r2, #68]	; 0x44
 8007a48:	4b84      	ldr	r3, [pc, #528]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a50:	613b      	str	r3, [r7, #16]
 8007a52:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_LTDC_FORCE_RESET();
 8007a54:	4b81      	ldr	r3, [pc, #516]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	4a80      	ldr	r2, [pc, #512]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a5e:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_LTDC_RELEASE_RESET();
 8007a60:	4b7e      	ldr	r3, [pc, #504]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	4a7d      	ldr	r2, [pc, #500]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a6a:	6253      	str	r3, [r2, #36]	; 0x24

	//Initialize DSI Peripheral Clock
	__HAL_RCC_DSI_CLK_ENABLE();
 8007a6c:	4b7b      	ldr	r3, [pc, #492]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a70:	4a7a      	ldr	r2, [pc, #488]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a76:	6453      	str	r3, [r2, #68]	; 0x44
 8007a78:	4b78      	ldr	r3, [pc, #480]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DSI_FORCE_RESET();
 8007a84:	4b75      	ldr	r3, [pc, #468]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	4a74      	ldr	r2, [pc, #464]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a8e:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_DSI_RELEASE_RESET();
 8007a90:	4b72      	ldr	r3, [pc, #456]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	4a71      	ldr	r2, [pc, #452]	; (8007c5c <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8007a96:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007a9a:	6253      	str	r3, [r2, #36]	; 0x24

	//Prepare Instances for DSI and LTDC handles (required if needing to call imp_deinit() due to failed initialization)
  m_sDSIHandle.Instance = DSI;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a70      	ldr	r2, [pc, #448]	; (8007c60 <_ZN8QAD_LTDC8imp_initEv+0x29c>)
 8007aa0:	611a      	str	r2, [r3, #16]
  m_sLTDCHandle.Instance = LTDC;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a6f      	ldr	r2, [pc, #444]	; (8007c64 <_ZN8QAD_LTDC8imp_initEv+0x2a0>)
 8007aa6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  //-------------------------
  //Initialize DSI peripheral

  //Confirm DSI is currently uninitialized
  HAL_DSI_DeInit(&m_sDSIHandle);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	3310      	adds	r3, #16
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fb f9f8 	bl	8002ea4 <HAL_DSI_DeInit>

  //Fill out DSI PLL Initialization structure as required for DSI to operate at required clock speed
  DSI_PLLInitTypeDef DSI_PLLInit = {0};
 8007ab4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	605a      	str	r2, [r3, #4]
 8007abe:	609a      	str	r2, [r3, #8]
  DSI_PLLInit.PLLNDIV = 100;
 8007ac0:	2364      	movs	r3, #100	; 0x64
 8007ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  DSI_PLLInit.PLLIDF  = DSI_PLL_IN_DIV5;
 8007ac4:	2305      	movs	r3, #5
 8007ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  DSI_PLLInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	653b      	str	r3, [r7, #80]	; 0x50

  //Fill out required DSI initialization details
  m_sDSIHandle.Init.NumberOfLanes = DSI_TWO_DATA_LANES;                   //Set DSI as using two data lanes
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	61da      	str	r2, [r3, #28]
  m_sDSIHandle.Init.TXEscapeCkdiv = m_uLCDLaneByteClk / m_uLCDClkDivisor; //Set TX Escape Clock Division
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689a      	ldr	r2, [r3, #8]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	619a      	str	r2, [r3, #24]

  //Initialize DSI, calling imp_deinit() if initialization fails
  if (HAL_DSI_Init(&m_sDSIHandle, &DSI_PLLInit) != HAL_OK) {
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	3310      	adds	r3, #16
 8007ae6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007aea:	4611      	mov	r1, r2
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fb f8bf 	bl	8002c70 <HAL_DSI_Init>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bf14      	ite	ne
 8007af8:	2301      	movne	r3, #1
 8007afa:	2300      	moveq	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d004      	beq.n	8007b0c <_ZN8QAD_LTDC8imp_initEv+0x148>
  	imp_deinit();
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f9e4 	bl	8007ed0 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e1db      	b.n	8007ec4 <_ZN8QAD_LTDC8imp_initEv+0x500>

  //----------------------------------
  //Initialize DSI video configuration

  //Generate base DSI timing parameters
  uint32_t HACT = QAD_LTDC_WIDTH;    //Horizontal Active period in pixels
 8007b0c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t VACT = QAD_LTDC_HEIGHT;   //Vertical Active period in pixels
 8007b14:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007b18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t VSA  = 12;                //Period that vertical sync is active in pixels
 8007b1c:	230c      	movs	r3, #12
 8007b1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t VBP  = 12;                //Vertical Back Porch in pixels
 8007b20:	230c      	movs	r3, #12
 8007b22:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t VFP  = 12;                //Vertical Front Porch in pixels
 8007b24:	230c      	movs	r3, #12
 8007b26:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t HSA  = 63;                //Period that horizontal sync is active in pixels
 8007b28:	233f      	movs	r3, #63	; 0x3f
 8007b2a:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t HBP  = 120;               //Horizontal Back Porch in pixels
 8007b2c:	2378      	movs	r3, #120	; 0x78
 8007b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t HFP  = 120;               //Horizontal Front Porch in pixels
 8007b30:	2378      	movs	r3, #120	; 0x78
 8007b32:	66bb      	str	r3, [r7, #104]	; 0x68

  //Fill out details of DSI Configuration Handle
  m_sDSICfgHandle.VirtualChannelID             = 0;                                      //Set virtual channel ID
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	62da      	str	r2, [r3, #44]	; 0x2c
  m_sDSICfgHandle.ColorCoding                  = DSI_RGB888;                             //Set pixel format to 24bit RGB (8bits for each Red, Green and Blue)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2205      	movs	r2, #5
 8007b3e:	631a      	str	r2, [r3, #48]	; 0x30
  m_sDSICfgHandle.VSPolarity                   = DSI_VSYNC_ACTIVE_HIGH;                  //Set Vertical Sync signal to active high
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	64da      	str	r2, [r3, #76]	; 0x4c
  m_sDSICfgHandle.HSPolarity                   = DSI_HSYNC_ACTIVE_HIGH;                  //Set Horizontal Sync signal to active high
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	649a      	str	r2, [r3, #72]	; 0x48
  m_sDSICfgHandle.DEPolarity                   = DSI_DATA_ENABLE_ACTIVE_HIGH;            //Set Data Enable signal to active high
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	651a      	str	r2, [r3, #80]	; 0x50
  m_sDSICfgHandle.Mode                         = DSI_VID_MODE_BURST;                     //Set Video Mode to burst mode
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2202      	movs	r2, #2
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38
  m_sDSICfgHandle.NullPacketSize               = 0xFFF;                                  //Set null packet size
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007b5e:	645a      	str	r2, [r3, #68]	; 0x44
  m_sDSICfgHandle.NumberOfChunks               = 0;                                      //Set number of chunks
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	641a      	str	r2, [r3, #64]	; 0x40
  m_sDSICfgHandle.PacketSize                   = HACT;                                   //Set packet size to horizontal active period
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007b6c:	63da      	str	r2, [r3, #60]	; 0x3c

  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b74:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 8007b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	655a      	str	r2, [r3, #84]	; 0x54

  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007b8a:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 8007b92:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	659a      	str	r2, [r3, #88]	; 0x58

  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8007b9a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ba0:	441a      	add	r2, r3
 8007ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba4:	441a      	add	r2, r3
 8007ba6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ba8:	4413      	add	r3, r2
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6892      	ldr	r2, [r2, #8]
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8007bae:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	fbb2 f2f3 	udiv	r2, r2, r3
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	65da      	str	r2, [r3, #92]	; 0x5c

  m_sDSICfgHandle.VerticalSyncActive           = VSA;                                    //Set duration for vertical sync signal
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007bc2:	661a      	str	r2, [r3, #96]	; 0x60
  m_sDSICfgHandle.VerticalBackPorch            = VBP;                                    //Set duration for vertical back porch
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007bc8:	665a      	str	r2, [r3, #100]	; 0x64
  m_sDSICfgHandle.VerticalFrontPorch           = VFP;                                    //Set duration for vertical front porch
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007bce:	669a      	str	r2, [r3, #104]	; 0x68
  m_sDSICfgHandle.VerticalActive               = VACT;                                   //Set duration of vertical active period
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007bd6:	66da      	str	r2, [r3, #108]	; 0x6c

  m_sDSICfgHandle.LPCommandEnable              = DSI_LP_COMMAND_ENABLE;  //Enable DSI low power command
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007bde:	671a      	str	r2, [r3, #112]	; 0x70
  m_sDSICfgHandle.LPLargestPacketSize          = 16;                     //Set largest packet size for low power commands during VSA, VBP and VFP periods.
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2210      	movs	r2, #16
 8007be4:	675a      	str	r2, [r3, #116]	; 0x74
  m_sDSICfgHandle.LPVACTLargestPacketSize      = 0;                      //Set largest packet size for low power commands during VACT period
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	679a      	str	r2, [r3, #120]	; 0x78
  m_sDSICfgHandle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;      //Enable low power horizontal front porch
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007bf2:	67da      	str	r2, [r3, #124]	; 0x7c
  m_sDSICfgHandle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;      //Enable low power horizontal back porch
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  m_sDSICfgHandle.LPVerticalActiveEnable       = DSI_LP_VACT_ENABLE;     //Enable low power vertical active
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  m_sDSICfgHandle.LPVerticalFrontPorchEnable   = DSI_LP_VFP_ENABLE;      //Enable low power vertical front porch
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  m_sDSICfgHandle.LPVerticalBackPorchEnable    = DSI_LP_VBP_ENABLE;      //Enable low power vertical back porch
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  m_sDSICfgHandle.LPVerticalSyncActiveEnable   = DSI_LP_VSYNC_ENABLE;    //Enable low power vertical sync
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  //Configure DSI Video Mode,
  if (HAL_DSI_ConfigVideoMode(&m_sDSIHandle, &m_sDSICfgHandle) != HAL_OK) {
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f103 0210 	add.w	r2, r3, #16
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	332c      	adds	r3, #44	; 0x2c
 8007c30:	4619      	mov	r1, r3
 8007c32:	4610      	mov	r0, r2
 8007c34:	f7fb f9be 	bl	8002fb4 <HAL_DSI_ConfigVideoMode>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bf14      	ite	ne
 8007c3e:	2301      	movne	r3, #1
 8007c40:	2300      	moveq	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00f      	beq.n	8007c68 <_ZN8QAD_LTDC8imp_initEv+0x2a4>
  	imp_deinit();
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f941 	bl	8007ed0 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e138      	b.n	8007ec4 <_ZN8QAD_LTDC8imp_initEv+0x500>
 8007c52:	bf00      	nop
 8007c54:	40022000 	.word	0x40022000
 8007c58:	40022400 	.word	0x40022400
 8007c5c:	40023800 	.word	0x40023800
 8007c60:	40016c00 	.word	0x40016c00
 8007c64:	40016800 	.word	0x40016800

  //--------------------------
  //Initialize LTDC Peripheral

  //Fill out details for LTDC initialization
  m_sLTDCHandle.Init.HorizontalSync     = (HSA - 1);                              //Set horizontal syncronization width
 8007c68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c6a:	1e5a      	subs	r2, r3, #1
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  m_sLTDCHandle.Init.AccumulatedHBP     = (HSA + HBP - 1);                        //Set accumulated horizontal back porch width
 8007c72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c76:	4413      	add	r3, r2
 8007c78:	1e5a      	subs	r2, r3, #1
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  m_sLTDCHandle.Init.AccumulatedActiveW = (QAD_LTDC_WIDTH + HSA + HBP - 1);       //Set accumulated active width
 8007c80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c84:	4413      	add	r3, r2
 8007c86:	f203 321f 	addw	r2, r3, #799	; 0x31f
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  m_sLTDCHandle.Init.TotalWidth         = (QAD_LTDC_WIDTH + HSA + HBP + HFP - 1); //Set total width
 8007c90:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c94:	441a      	add	r2, r3
 8007c96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c98:	4413      	add	r3, r2
 8007c9a:	f203 321f 	addw	r2, r3, #799	; 0x31f
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  m_sLTDCHandle.LayerCfg->ImageWidth    = QAD_LTDC_WIDTH;                         //Sets the frame buffer line length (in pixels)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007caa:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  m_sLTDCHandle.LayerCfg->ImageHeight   = QAD_LTDC_HEIGHT;                        //Sets the number of frame buffer lines (height in pixels)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007cb4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  m_sLTDCHandle.Init.Backcolor.Red      = 0;                                      //Set background color red value
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
  m_sLTDCHandle.Init.Backcolor.Green    = 0;                                      //Set background color green value
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
  m_sLTDCHandle.Init.Backcolor.Blue     = 255;                                    //Set background color blue value
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	22ff      	movs	r2, #255	; 0xff
 8007ccc:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  m_sLTDCHandle.Init.PCPolarity         = LTDC_PCPOLARITY_IPC;                    //Set pixel clock polarity to non-inverted
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  //Complete initialization structre details based on DSI Configuration, calling imp_deinit() if failed
  if (HAL_LTDC_StructInitFromVideoConfig(&m_sLTDCHandle, &m_sDSICfgHandle) != HAL_OK) {
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	332c      	adds	r3, #44	; 0x2c
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f7fc fe29 	bl	800493c <HAL_LTDCEx_StructInitFromVideoConfig>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bf14      	ite	ne
 8007cf0:	2301      	movne	r3, #1
 8007cf2:	2300      	moveq	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d004      	beq.n	8007d04 <_ZN8QAD_LTDC8imp_initEv+0x340>
  	imp_deinit();
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f8e8 	bl	8007ed0 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e0df      	b.n	8007ec4 <_ZN8QAD_LTDC8imp_initEv+0x500>
  }

  //Initialize LTDC Peripheral
  if (HAL_LTDC_Init(&m_sLTDCHandle) != HAL_OK) {
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3398      	adds	r3, #152	; 0x98
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fc fb0d 	bl	8004328 <HAL_LTDC_Init>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	bf14      	ite	ne
 8007d14:	2301      	movne	r3, #1
 8007d16:	2300      	moveq	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d004      	beq.n	8007d28 <_ZN8QAD_LTDC8imp_initEv+0x364>
  	imp_deinit();
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f8d6 	bl	8007ed0 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e0cd      	b.n	8007ec4 <_ZN8QAD_LTDC8imp_initEv+0x500>

    //-------
    //Layer 0

  //Set pointer address for layer 0 double buffer
  m_pLayer0Ptr = (void*)0xC0000000;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8007d2e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

  //Clear Layer Config structure
  LTDC_Layer = {0};
 8007d32:	f107 0314 	add.w	r3, r7, #20
 8007d36:	2234      	movs	r2, #52	; 0x34
 8007d38:	2100      	movs	r1, #0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f002 fd70 	bl	800a820 <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 8007d44:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007d48:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 8007d4e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007d52:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 8007d54:	2304      	movs	r3, #4
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007d5e:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 8007d60:	23ff      	movs	r3, #255	; 0xff
 8007d62:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 8007d64:	2300      	movs	r3, #0
 8007d66:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 8007d7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007d7e:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 8007d80:	2307      	movs	r3, #7
 8007d82:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 8007d84:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007d88:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 8007d8a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007d8e:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 0 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 0) != HAL_OK) {
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3398      	adds	r3, #152	; 0x98
 8007d94:	f107 0114 	add.w	r1, r7, #20
 8007d98:	2200      	movs	r2, #0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fc fbc0 	bl	8004520 <HAL_LTDC_ConfigLayer>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	bf14      	ite	ne
 8007da6:	2301      	movne	r3, #1
 8007da8:	2300      	moveq	r3, #0
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <_ZN8QAD_LTDC8imp_initEv+0x3f6>
		imp_deinit();
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f88d 	bl	8007ed0 <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e084      	b.n	8007ec4 <_ZN8QAD_LTDC8imp_initEv+0x500>

	  //-------
	  //Layer 1

  //Set pointer address for layer 1 doube buffer
	m_pLayer1Ptr = (void*)((uint32_t)m_pLayer0Ptr + (QAD_LTDC_BUFFERSIZE*2));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	4b42      	ldr	r3, [pc, #264]	; (8007ecc <_ZN8QAD_LTDC8imp_initEv+0x508>)
 8007dc4:	4413      	add	r3, r2
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  //Clear Layer Config structure
  LTDC_Layer = {0};
 8007dce:	f107 0314 	add.w	r3, r7, #20
 8007dd2:	2234      	movs	r2, #52	; 0x34
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f002 fd22 	bl	800a820 <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 8007de0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007de4:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 8007dea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007dee:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 8007df0:	2304      	movs	r3, #4
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007dfa:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 8007dfc:	23ff      	movs	r3, #255	; 0xff
 8007dfe:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 8007e00:	2300      	movs	r3, #0
 8007e02:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 8007e16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007e1a:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 8007e1c:	2307      	movs	r3, #7
 8007e1e:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 8007e20:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007e24:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 8007e26:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007e2a:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 1 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 1) != HAL_OK) {
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3398      	adds	r3, #152	; 0x98
 8007e30:	f107 0114 	add.w	r1, r7, #20
 8007e34:	2201      	movs	r2, #1
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fc fb72 	bl	8004520 <HAL_LTDC_ConfigLayer>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	bf14      	ite	ne
 8007e42:	2301      	movne	r3, #1
 8007e44:	2300      	moveq	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <_ZN8QAD_LTDC8imp_initEv+0x492>
		imp_deinit();
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f83f 	bl	8007ed0 <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e036      	b.n	8007ec4 <_ZN8QAD_LTDC8imp_initEv+0x500>
	}


	//-------------------------------
	//Enable LTDC Layer 0 and Layer 1
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 0);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e5c:	3384      	adds	r3, #132	; 0x84
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8007e66:	3284      	adds	r2, #132	; 0x84
 8007e68:	f043 0301 	orr.w	r3, r3, #1
 8007e6c:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 1);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e74:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8007e80:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8007e84:	f043 0301 	orr.w	r3, r3, #1
 8007e88:	6013      	str	r3, [r2, #0]


	//---------------------
	//Enable DSI Peripheral
	HAL_DSI_Start(&m_sDSIHandle);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	3310      	adds	r3, #16
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fb fa90 	bl	80033b4 <HAL_DSI_Start>


	//--------------------------------------
	//Initialize OTM8009A Display Controller
	OTM8009A_Init(OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8007e94:	2101      	movs	r1, #1
 8007e96:	2000      	movs	r0, #0
 8007e98:	f7fa fa92 	bl	80023c0 <OTM8009A_Init>


	//-------------------------------
	//Set Initial Frame Buffer States
	m_eLayer0Back  = QAD_LTDC_Buffer1;   //Set initial layer 0 back buffer as being buffer 1 in double buffer pair
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	m_eLayer0Front = QAD_LTDC_Buffer0;   //Set initial layer 0 front buffer as being buffer 0 in double buffer pair
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	m_eLayer1Back  = QAD_LTDC_Buffer1;   //Set initial layer 1 back buffer as being buffer 1 in double buffer pair
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	m_eLayer1Front = QAD_LTDC_Buffer0;   //Set initial layer 1 front buffer as being buffer 0 in double buffer pair
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b


	//Set Driver State as being initialized
	m_eInitState = QA_Initialized;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	701a      	strb	r2, [r3, #0]

	//Return
	return QA_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3788      	adds	r7, #136	; 0x88
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	00177000 	.word	0x00177000

08007ed0 <_ZN8QAD_LTDC10imp_deinitEv>:
//QAD_LTDC::imp_deinit
//QAD_LTDC Initialization Method
//
//To be called from static method deinit(), or from imp_init() in the event of a failed initialization
//Used to deinitialize the DSI and LTDC peripherals, LTDC layers, reset display controller and deinitialize reset and backlight GPIO pins
void QAD_LTDC::imp_deinit(void) {
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]

	//----------------------
	//Disable DSI Peripheral
	HAL_DSI_Stop(&m_sDSIHandle);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3310      	adds	r3, #16
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fb faa5 	bl	800342c <HAL_DSI_Stop>


	//-------------------
	//Disable LTDC Layers
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 1);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ee8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8007ef4:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8007ef8:	f023 0301 	bic.w	r3, r3, #1
 8007efc:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 0);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f04:	3384      	adds	r3, #132	; 0x84
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8007f0e:	3284      	adds	r2, #132	; 0x84
 8007f10:	f023 0301 	bic.w	r3, r3, #1
 8007f14:	6013      	str	r3, [r2, #0]


	//----------------------------
	//Deinitialize LTDC Peripheral
	HAL_LTDC_DeInit(&m_sLTDCHandle);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3398      	adds	r3, #152	; 0x98
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fc fad4 	bl	80044c8 <HAL_LTDC_DeInit>


	//---------------------------
	//Deinitialize DSI Peripheral
	HAL_DSI_DeInit(&m_sDSIHandle);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3310      	adds	r3, #16
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fa ffbd 	bl	8002ea4 <HAL_DSI_DeInit>


	//---------------------------
	//Disable DSI and LTDC Clocks
	__HAL_RCC_DSI_CLK_DISABLE();
 8007f2a:	4b16      	ldr	r3, [pc, #88]	; (8007f84 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8007f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2e:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8007f30:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007f34:	6453      	str	r3, [r2, #68]	; 0x44
	__HAL_RCC_LTDC_CLK_DISABLE();
 8007f36:	4b13      	ldr	r3, [pc, #76]	; (8007f84 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8007f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f3a:	4a12      	ldr	r2, [pc, #72]	; (8007f84 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8007f3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f40:	6453      	str	r3, [r2, #68]	; 0x44


	//------------------------
	//Reset Display controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET);
 8007f42:	2200      	movs	r2, #0
 8007f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f48:	480f      	ldr	r0, [pc, #60]	; (8007f88 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 8007f4a:	f7fb fe1d 	bl	8003b88 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8007f4e:	2014      	movs	r0, #20
 8007f50:	f7fa fcde 	bl	8002910 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);
 8007f54:	2201      	movs	r2, #1
 8007f56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f5a:	480b      	ldr	r0, [pc, #44]	; (8007f88 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 8007f5c:	f7fb fe14 	bl	8003b88 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8007f60:	200a      	movs	r0, #10
 8007f62:	f7fa fcd5 	bl	8002910 <HAL_Delay>


	//--------------------------------------------------
	//Deinitialize Reset and Backlight control GPIO Pins
	HAL_GPIO_DeInit(QAD_LTDC_BACKLIGHT_PORT, QAD_LTDC_BACKLIGHT_PIN);
 8007f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007f6a:	4808      	ldr	r0, [pc, #32]	; (8007f8c <_ZN8QAD_LTDC10imp_deinitEv+0xbc>)
 8007f6c:	f7fb fd00 	bl	8003970 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN);
 8007f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f74:	4804      	ldr	r0, [pc, #16]	; (8007f88 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 8007f76:	f7fb fcfb 	bl	8003970 <HAL_GPIO_DeInit>

}
 8007f7a:	bf00      	nop
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	40023800 	.word	0x40023800
 8007f88:	40022400 	.word	0x40022400
 8007f8c:	40022000 	.word	0x40022000

08007f90 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>:
  //DSI Command Methods


//QAD_LTDC::imp_dsi_IO_WriteCmd
//DSI Command Methods
void QAD_LTDC::imp_dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
	if (uNumParams <= 1) {
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d80f      	bhi.n	8007fc2 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x32>
		HAL_DSI_ShortWrite(&m_sDSIHandle, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f103 0010 	add.w	r0, r3, #16
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	461a      	mov	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	2215      	movs	r2, #21
 8007fba:	2100      	movs	r1, #0
 8007fbc:	f7fb fa72 	bl	80034a4 <HAL_DSI_ShortWrite>
	} else {
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
	}
}
 8007fc0:	e00f      	b.n	8007fe2 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x52>
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f103 0010 	add.w	r0, r3, #16
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	4413      	add	r3, r2
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	9301      	str	r3, [sp, #4]
 8007fd6:	9200      	str	r2, [sp, #0]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2239      	movs	r2, #57	; 0x39
 8007fdc:	2100      	movs	r1, #0
 8007fde:	f7fb fa83 	bl	80034e8 <HAL_DSI_LongWrite>
}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>:
  //------------------------------
  //QAD_LTDC Layer Control Methods

//QAD_LTDC::imp_flipLayer0Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer0Buffers(void) {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d032      	beq.n	8008062 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x76>
  	return;

  switch (m_eLayer0Front) {
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x20>
 8008006:	2b01      	cmp	r3, #1
 8008008:	d017      	beq.n	800803a <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x4e>
 800800a:	e02b      	b.n	8008064 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer0Back  = QAD_LTDC_Buffer0;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer1;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008022:	461a      	mov	r2, r3
 8008024:	4b11      	ldr	r3, [pc, #68]	; (800806c <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x80>)
 8008026:	4413      	add	r3, r2
 8008028:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3398      	adds	r3, #152	; 0x98
 800802e:	2200      	movs	r2, #0
 8008030:	68b9      	ldr	r1, [r7, #8]
 8008032:	4618      	mov	r0, r3
 8008034:	f7fc fab2 	bl	800459c <HAL_LTDC_SetAddress>
    	break;
 8008038:	e014      	b.n	8008064 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer0Back  = QAD_LTDC_Buffer1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer0;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008050:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3398      	adds	r3, #152	; 0x98
 8008056:	2200      	movs	r2, #0
 8008058:	68f9      	ldr	r1, [r7, #12]
 800805a:	4618      	mov	r0, r3
 800805c:	f7fc fa9e 	bl	800459c <HAL_LTDC_SetAddress>
    	break;
 8008060:	e000      	b.n	8008064 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
  	return;
 8008062:	bf00      	nop
    }
  }
}
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	000bb800 	.word	0x000bb800

08008070 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>:


//QAD_LTDC::imp_flipLayer1Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer1Buffers(void) {
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d032      	beq.n	80080e6 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x76>
  	return;

  switch (m_eLayer1Front) {
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x20>
 800808a:	2b01      	cmp	r3, #1
 800808c:	d017      	beq.n	80080be <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x4e>
 800808e:	e02b      	b.n	80080e8 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer1Back  = QAD_LTDC_Buffer0;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer1;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80080a6:	461a      	mov	r2, r3
 80080a8:	4b11      	ldr	r3, [pc, #68]	; (80080f0 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x80>)
 80080aa:	4413      	add	r3, r2
 80080ac:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	3398      	adds	r3, #152	; 0x98
 80080b2:	2201      	movs	r2, #1
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fc fa70 	bl	800459c <HAL_LTDC_SetAddress>
    	break;
 80080bc:	e014      	b.n	80080e8 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer1Back  = QAD_LTDC_Buffer1;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer0;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80080d4:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3398      	adds	r3, #152	; 0x98
 80080da:	2201      	movs	r2, #1
 80080dc:	68f9      	ldr	r1, [r7, #12]
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fc fa5c 	bl	800459c <HAL_LTDC_SetAddress>
    	break;
 80080e4:	e000      	b.n	80080e8 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
  	return;
 80080e6:	bf00      	nop
    }
  }
}
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	000bb800 	.word	0x000bb800

080080f4 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>:
}


//QAD_LTDC::imp_getLayer0BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer0BackBuffer(void) {
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x14>
		return NULL;
 8008104:	2300      	movs	r3, #0
 8008106:	e013      	b.n	8008130 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>

	switch (m_eLayer0Back) {
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x24>
 8008112:	2b01      	cmp	r3, #1
 8008114:	d004      	beq.n	8008120 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x2c>
 8008116:	e00a      	b.n	800812e <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer0Ptr;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800811e:	e007      	b.n	8008130 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008126:	461a      	mov	r2, r3
 8008128:	4b04      	ldr	r3, [pc, #16]	; (800813c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x48>)
 800812a:	4413      	add	r3, r2
 800812c:	e000      	b.n	8008130 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	000bb800 	.word	0x000bb800

08008140 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>:
}


//QAD_LTDC::imp_getLayer1BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer1BackBuffer(void) {
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x14>
		return NULL;
 8008150:	2300      	movs	r3, #0
 8008152:	e013      	b.n	800817c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>

	switch (m_eLayer1Back) {
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 800815a:	2b00      	cmp	r3, #0
 800815c:	d002      	beq.n	8008164 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x24>
 800815e:	2b01      	cmp	r3, #1
 8008160:	d004      	beq.n	800816c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x2c>
 8008162:	e00a      	b.n	800817a <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer1Ptr;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800816a:	e007      	b.n	800817c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8008172:	461a      	mov	r2, r3
 8008174:	4b04      	ldr	r3, [pc, #16]	; (8008188 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x48>)
 8008176:	4413      	add	r3, r2
 8008178:	e000      	b.n	800817c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	000bb800 	.word	0x000bb800

0800818c <DSI_IO_WriteCmd>:

//DSI_IO_WriteCmd
//OTM8009A Display Controller Communication Methods
//Used by the OTM8009A initialization method in the otm8009a.h file
//Calls the static dsi_IO_WriteCmd method in the QAD_LTDC driver class
void DSI_IO_WriteCmd(uint32_t NbrParam, uint8_t* pParams) {
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  QAD_LTDC::dsi_IO_WriteCmd(NbrParam, pParams);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff fc01 	bl	80079a0 <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>
}
 800819e:	bf00      	nop
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
	...

080081a8 <_ZN7QAD_RNG8imp_initEv>:
//QAD_RNG Initialization Method
//
//To be called from static method init()
//Used to initialize the RNG peripheral
//Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
QA_Result QAD_RNG::imp_init(void) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]

	//Check peripheral is not already initialized, and return QA_OK if it is
  if (m_eInitState)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <_ZN7QAD_RNG8imp_initEv+0x14>
  	return QA_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e033      	b.n	8008224 <_ZN7QAD_RNG8imp_initEv+0x7c>

  //Enable RNG Peripheral Clock
  __HAL_RCC_RNG_CLK_ENABLE();
 80081bc:	4b1b      	ldr	r3, [pc, #108]	; (800822c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80081be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c0:	4a1a      	ldr	r2, [pc, #104]	; (800822c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80081c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c6:	6353      	str	r3, [r2, #52]	; 0x34
 80081c8:	4b18      	ldr	r3, [pc, #96]	; (800822c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80081ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_RNG_FORCE_RESET();
 80081d4:	4b15      	ldr	r3, [pc, #84]	; (800822c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	4a14      	ldr	r2, [pc, #80]	; (800822c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80081da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081de:	6153      	str	r3, [r2, #20]
  __HAL_RCC_RNG_RELEASE_RESET();
 80081e0:	4b12      	ldr	r3, [pc, #72]	; (800822c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	4a11      	ldr	r2, [pc, #68]	; (800822c <_ZN7QAD_RNG8imp_initEv+0x84>)
 80081e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ea:	6153      	str	r3, [r2, #20]

  //Initialize RNG Peripheral
  m_sHandle.Instance = RNG;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a10      	ldr	r2, [pc, #64]	; (8008230 <_ZN7QAD_RNG8imp_initEv+0x88>)
 80081f0:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&m_sHandle) != HAL_OK) {
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3304      	adds	r3, #4
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fd fcfc 	bl	8005bf4 <HAL_RNG_Init>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	bf14      	ite	ne
 8008202:	2301      	movne	r3, #1
 8008204:	2300      	moveq	r3, #0
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d007      	beq.n	800821c <_ZN7QAD_RNG8imp_initEv+0x74>
  	__HAL_RCC_RNG_CLK_DISABLE();
 800820c:	4b07      	ldr	r3, [pc, #28]	; (800822c <_ZN7QAD_RNG8imp_initEv+0x84>)
 800820e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008210:	4a06      	ldr	r2, [pc, #24]	; (800822c <_ZN7QAD_RNG8imp_initEv+0x84>)
 8008212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008216:	6353      	str	r3, [r2, #52]	; 0x34
  	return QA_Fail;
 8008218:	2301      	movs	r3, #1
 800821a:	e003      	b.n	8008224 <_ZN7QAD_RNG8imp_initEv+0x7c>
  }

  //Set Driver State as being initialized
  m_eInitState = QA_Initialized;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	701a      	strb	r2, [r3, #0]

  //Return
  return QA_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	40023800 	.word	0x40023800
 8008230:	50060800 	.word	0x50060800

08008234 <_ZN7QAD_RTC8imp_initEv>:
//QAD_RTC Initialization Method
//
//To be called by static method init()
//Used to initialize the RTC peripheral
//Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
QA_Result QAD_RTC::imp_init(void) {
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	if (m_eInitState)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <_ZN7QAD_RTC8imp_initEv+0x14>
		return QA_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	e045      	b.n	80082d4 <_ZN7QAD_RTC8imp_initEv+0xa0>

	//Enable RTC Clock
	__HAL_RCC_RTC_CLK_ENABLE();
 8008248:	4b24      	ldr	r3, [pc, #144]	; (80082dc <_ZN7QAD_RTC8imp_initEv+0xa8>)
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	4a23      	ldr	r2, [pc, #140]	; (80082dc <_ZN7QAD_RTC8imp_initEv+0xa8>)
 800824e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008252:	6413      	str	r3, [r2, #64]	; 0x40
 8008254:	4b21      	ldr	r3, [pc, #132]	; (80082dc <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8008256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_RTC_ENABLE();
 8008260:	4b1e      	ldr	r3, [pc, #120]	; (80082dc <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8008262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008264:	4a1d      	ldr	r2, [pc, #116]	; (80082dc <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8008266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800826a:	6713      	str	r3, [r2, #112]	; 0x70

	//Init RTC Peripheral
	m_sHandle.Instance               = RTC;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a1c      	ldr	r2, [pc, #112]	; (80082e0 <_ZN7QAD_RTC8imp_initEv+0xac>)
 8008270:	605a      	str	r2, [r3, #4]
	m_sHandle.Init.HourFormat        = RTC_HOURFORMAT_24;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	609a      	str	r2, [r3, #8]
	m_sHandle.Init.AsynchPrediv      = 127;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	227f      	movs	r2, #127	; 0x7f
 800827c:	60da      	str	r2, [r3, #12]
	m_sHandle.Init.SynchPrediv       = 255;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	22ff      	movs	r2, #255	; 0xff
 8008282:	611a      	str	r2, [r3, #16]
	m_sHandle.Init.OutPut            = RTC_OUTPUT_DISABLE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	615a      	str	r2, [r3, #20]
	m_sHandle.Init.OutPutPolarity    = RTC_OUTPUT_POLARITY_HIGH;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	619a      	str	r2, [r3, #24]
	m_sHandle.Init.OutPutType        = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&m_sHandle) != HAL_OK) {
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3304      	adds	r3, #4
 800829a:	4618      	mov	r0, r3
 800829c:	f7fd fcde 	bl	8005c5c <HAL_RTC_Init>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	bf14      	ite	ne
 80082a6:	2301      	movne	r3, #1
 80082a8:	2300      	moveq	r3, #0
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00d      	beq.n	80082cc <_ZN7QAD_RTC8imp_initEv+0x98>
		__HAL_RCC_RTC_DISABLE();
 80082b0:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <_ZN7QAD_RTC8imp_initEv+0xa8>)
 80082b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b4:	4a09      	ldr	r2, [pc, #36]	; (80082dc <_ZN7QAD_RTC8imp_initEv+0xa8>)
 80082b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082ba:	6713      	str	r3, [r2, #112]	; 0x70
		__HAL_RCC_RTC_CLK_DISABLE();
 80082bc:	4b07      	ldr	r3, [pc, #28]	; (80082dc <_ZN7QAD_RTC8imp_initEv+0xa8>)
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	4a06      	ldr	r2, [pc, #24]	; (80082dc <_ZN7QAD_RTC8imp_initEv+0xa8>)
 80082c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082c6:	6413      	str	r3, [r2, #64]	; 0x40
		return QA_Fail;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e003      	b.n	80082d4 <_ZN7QAD_RTC8imp_initEv+0xa0>
	}

	//Update m_sTime and m_sDate with values currently stored in RTC
	imp_update();
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f809 	bl	80082e4 <_ZN7QAD_RTC10imp_updateEv>

	//Return
	return QA_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	40023800 	.word	0x40023800
 80082e0:	40002800 	.word	0x40002800

080082e4 <_ZN7QAD_RTC10imp_updateEv>:
//
//To be called from static update() method
//Captures the current time and date and stores in m_sTime and m_sDate, so that values can
//be retrieved by the below data methods
//Returns QA_OK if successful, or QA_Fail if unable to get the current time/date
QA_Result QAD_RTC::imp_update(void) {
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]

	//Retrieve current time values from RTC and store in m_sTime structure in binary format
	//Return QA_Fail if not successful
	if (HAL_RTC_GetTime(&m_sHandle, &m_sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	1d18      	adds	r0, r3, #4
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3324      	adds	r3, #36	; 0x24
 80082f4:	2200      	movs	r2, #0
 80082f6:	4619      	mov	r1, r3
 80082f8:	f7fd fd4c 	bl	8005d94 <HAL_RTC_GetTime>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	bf14      	ite	ne
 8008302:	2301      	movne	r3, #1
 8008304:	2300      	moveq	r3, #0
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <_ZN7QAD_RTC10imp_updateEv+0x2c>
		return QA_Fail;
 800830c:	2301      	movs	r3, #1
 800830e:	e012      	b.n	8008336 <_ZN7QAD_RTC10imp_updateEv+0x52>
	}

	//Retrieve current date values from RTC and store in m_sDate structure in binary format
	//Return QA_Fail if not successful
	if (HAL_RTC_GetDate(&m_sHandle, &m_sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	1d18      	adds	r0, r3, #4
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	333c      	adds	r3, #60	; 0x3c
 8008318:	2200      	movs	r2, #0
 800831a:	4619      	mov	r1, r3
 800831c:	f7fd fd98 	bl	8005e50 <HAL_RTC_GetDate>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	bf14      	ite	ne
 8008326:	2301      	movne	r3, #1
 8008328:	2300      	moveq	r3, #0
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <_ZN7QAD_RTC10imp_updateEv+0x50>
		return QA_Fail;
 8008330:	2301      	movs	r3, #1
 8008332:	e000      	b.n	8008336 <_ZN7QAD_RTC10imp_updateEv+0x52>
	}

	//Return
	return QA_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 8008340:	b580      	push	{r7, lr}
 8008342:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 8008344:	4b10      	ldr	r3, [pc, #64]	; (8008388 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	f3bf 8f5b 	dmb	ish
 800834c:	b2db      	uxtb	r3, r3
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	bf0c      	ite	eq
 8008356:	2301      	moveq	r3, #1
 8008358:	2300      	movne	r3, #0
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	d010      	beq.n	8008382 <_ZN11QAD_UARTMgr3getEv+0x42>
 8008360:	4809      	ldr	r0, [pc, #36]	; (8008388 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8008362:	f002 f9a8 	bl	800a6b6 <__cxa_guard_acquire>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	bf14      	ite	ne
 800836c:	2301      	movne	r3, #1
 800836e:	2300      	moveq	r3, #0
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <_ZN11QAD_UARTMgr3getEv+0x42>
 8008376:	4805      	ldr	r0, [pc, #20]	; (800838c <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8008378:	f000 fba0 	bl	8008abc <_ZN11QAD_UARTMgrC1Ev>
 800837c:	4802      	ldr	r0, [pc, #8]	; (8008388 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800837e:	f002 f9a6 	bl	800a6ce <__cxa_guard_release>
		return instance;
 8008382:	4b02      	ldr	r3, [pc, #8]	; (800838c <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 8008384:	4618      	mov	r0, r3
 8008386:	bd80      	pop	{r7, pc}
 8008388:	200003c0 	.word	0x200003c0
 800838c:	20000360 	.word	0x20000360

08008390 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	2b07      	cmp	r3, #7
 800839e:	d901      	bls.n	80083a4 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 80083a0:	2302      	movs	r3, #2
 80083a2:	e00a      	b.n	80083ba <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 80083a4:	f7ff ffcc 	bl	8008340 <_ZN11QAD_UARTMgr3getEv>
 80083a8:	4601      	mov	r1, r0
 80083aa:	79fa      	ldrb	r2, [r7, #7]
 80083ac:	4613      	mov	r3, r2
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	4413      	add	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	440b      	add	r3, r1
 80083b6:	3301      	adds	r3, #1
 80083b8:	781b      	ldrb	r3, [r3, #0]
	}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f769xx.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b082      	sub	sp, #8
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	4603      	mov	r3, r0
 80083ca:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	2b07      	cmp	r3, #7
 80083d0:	d901      	bls.n	80083d6 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 80083d2:	2300      	movs	r3, #0
 80083d4:	e00a      	b.n	80083ec <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 80083d6:	f7ff ffb3 	bl	8008340 <_ZN11QAD_UARTMgr3getEv>
 80083da:	4601      	mov	r1, r0
 80083dc:	79fa      	ldrb	r2, [r7, #7]
 80083de:	4613      	mov	r3, r2
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	440b      	add	r3, r1
 80083e8:	3304      	adds	r3, #4
 80083ea:	681b      	ldr	r3, [r3, #0]
	}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	2b07      	cmp	r3, #7
 8008402:	d902      	bls.n	800840a <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 8008404:	f06f 0309 	mvn.w	r3, #9
 8008408:	e00b      	b.n	8008422 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 800840a:	f7ff ff99 	bl	8008340 <_ZN11QAD_UARTMgr3getEv>
 800840e:	4601      	mov	r1, r0
 8008410:	79fa      	ldrb	r2, [r7, #7]
 8008412:	4613      	mov	r3, r2
 8008414:	005b      	lsls	r3, r3, #1
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	440b      	add	r3, r1
 800841c:	3308      	adds	r3, #8
 800841e:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Management Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static void registerUART(QAD_UART_Periph eUART) {
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	4603      	mov	r3, r0
 8008432:	71fb      	strb	r3, [r7, #7]
		get().imp_registerUART(eUART);
 8008434:	f7ff ff84 	bl	8008340 <_ZN11QAD_UARTMgr3getEv>
 8008438:	4602      	mov	r2, r0
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	4619      	mov	r1, r3
 800843e:	4610      	mov	r0, r2
 8008440:	f000 fbbe 	bl	8008bc0 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
	}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 8008456:	f7ff ff73 	bl	8008340 <_ZN11QAD_UARTMgr3getEv>
 800845a:	4602      	mov	r2, r0
 800845c:	79fb      	ldrb	r3, [r7, #7]
 800845e:	4619      	mov	r1, r3
 8008460:	4610      	mov	r0, r2
 8008462:	f000 fbd6 	bl	8008c12 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 8008466:	bf00      	nop
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	4603      	mov	r3, r0
 8008476:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8008478:	f7ff ff62 	bl	8008340 <_ZN11QAD_UARTMgr3getEv>
 800847c:	4602      	mov	r2, r0
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	4619      	mov	r1, r3
 8008482:	4610      	mov	r0, r2
 8008484:	f000 fbe0 	bl	8008c48 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 800849a:	f7ff ff51 	bl	8008340 <_ZN11QAD_UARTMgr3getEv>
 800849e:	4602      	mov	r2, r0
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	4619      	mov	r1, r3
 80084a4:	4610      	mov	r0, r2
 80084a6:	f000 fcc1 	bl	8008e2c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 80084aa:	bf00      	nop
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or QA_Fail if initialization has failed
QA_Result QAD_UART::init(void) {
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
	if (QAD_UARTMgr::getState(m_eUART))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	785b      	ldrb	r3, [r3, #1]
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff ff66 	bl	8008390 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	bf14      	ite	ne
 80084ca:	2301      	movne	r3, #1
 80084cc:	2300      	moveq	r3, #0
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 80084d4:	2302      	movs	r3, #2
 80084d6:	e012      	b.n	80084fe <_ZN8QAD_UART4initEv+0x4c>

  QAD_UARTMgr::registerUART(m_eUART);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7ff ffa4 	bl	800842a <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>
  QA_Result eRes = periphInit();
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f8a7 	bl	8008636 <_ZN8QAD_UART10periphInitEv>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]

  if (eRes)
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d004      	beq.n	80084fc <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	785b      	ldrb	r3, [r3, #1]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff ffa8 	bl	800844c <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
  return eRes;
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <_ZN8QAD_UART6deinitEv+0x24>
  	return;

  periphDeinit(DeinitFull);
 8008516:	2101      	movs	r1, #1
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f924 	bl	8008766 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
  QAD_UARTMgr::deregisterUART(m_eUART);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff ff92 	bl	800844c <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 8008528:	e000      	b.n	800852c <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 800852a:	bf00      	nop
}
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 8008532:	b480      	push	{r7}
 8008534:	b083      	sub	sp, #12
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	331c      	adds	r3, #28
}
 800853e:	4618      	mov	r0, r3
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 800854a:	b480      	push	{r7}
 800854c:	b083      	sub	sp, #12
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008560:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Active;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800858c:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Inactive;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	69db      	ldr	r3, [r3, #28]
 80085b4:	f042 0220 	orr.w	r2, r2, #32
 80085b8:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Active;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 80085c2:	bf00      	nop
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	f022 0220 	bic.w	r2, r2, #32
 80085e4:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Inactive;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 80085ee:	bf00      	nop
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART transmit data register (TDR)
void QAD_UART::dataTX(uint8_t uData) {
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	460b      	mov	r3, r1
 8008604:	70fb      	strb	r3, [r7, #3]
  m_sHandle.Instance->TDR = uData;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	78fa      	ldrb	r2, [r7, #3]
 800860c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800860e:	bf00      	nop
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART receive data register (RDR)
uint8_t QAD_UART::dataRX(void) {
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  return m_sHandle.Instance->RDR;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	b2db      	uxtb	r3, r3
}
 800862a:	4618      	mov	r0, r3
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 8008636:	b580      	push	{r7, lr}
 8008638:	b088      	sub	sp, #32
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 800863e:	f107 030c 	add.w	r3, r7, #12
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	605a      	str	r2, [r3, #4]
 8008648:	609a      	str	r2, [r3, #8]
 800864a:	60da      	str	r2, [r3, #12]
 800864c:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	8a1b      	ldrh	r3, [r3, #16]
 8008652:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 8008654:	2302      	movs	r3, #2
 8008656:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8008658:	2300      	movs	r3, #0
 800865a:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 800865c:	2303      	movs	r3, #3
 800865e:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	7c9b      	ldrb	r3, [r3, #18]
 8008664:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f107 020c 	add.w	r2, r7, #12
 800866e:	4611      	mov	r1, r2
 8008670:	4618      	mov	r0, r3
 8008672:	f7fa ffd1 	bl	8003618 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	8b1b      	ldrh	r3, [r3, #24]
 800867a:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 800867c:	2302      	movs	r3, #2
 800867e:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8008680:	2301      	movs	r3, #1
 8008682:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8008684:	2303      	movs	r3, #3
 8008686:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	7e9b      	ldrb	r3, [r3, #26]
 800868c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	f107 020c 	add.w	r2, r7, #12
 8008696:	4611      	mov	r1, r2
 8008698:	4618      	mov	r0, r3
 800869a:	f7fa ffbd 	bl	8003618 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	785b      	ldrb	r3, [r3, #1]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff fee3 	bl	800846e <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	785b      	ldrb	r3, [r3, #1]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff fe88 	bl	80083c2 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 80086b2:	4602      	mov	r2, r0
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	220c      	movs	r2, #12
 80086d6:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	331c      	adds	r3, #28
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fd fcfc 	bl	80060e6 <HAL_UART_Init>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	bf14      	ite	ne
 80086f4:	2301      	movne	r3, #1
 80086f6:	2300      	moveq	r3, #0
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 80086fe:	2100      	movs	r1, #0
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f830 	bl	8008766 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8008706:	2301      	movs	r3, #1
 8008708:	e029      	b.n	800875e <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	f042 0201 	orr.w	r2, r2, #1
 8008718:	601a      	str	r2, [r3, #0]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff fe68 	bl	80083f4 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8008724:	4603      	mov	r3, r0
 8008726:	4618      	mov	r0, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	7a1b      	ldrb	r3, [r3, #8]
 800872c:	2200      	movs	r2, #0
 800872e:	4619      	mov	r1, r3
 8008730:	f7fa fa11 	bl	8002b56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	785b      	ldrb	r3, [r3, #1]
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff fe5b 	bl	80083f4 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 800873e:	4603      	mov	r3, r0
 8008740:	4618      	mov	r0, r3
 8008742:	f7fa fa24 	bl	8002b8e <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  //Return
  return QA_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3720      	adds	r7, #32
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//QAD_UART Private Initialization Method
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	460b      	mov	r3, r1
 8008770:	70fb      	strb	r3, [r7, #3]

	//Disable IRQs
	//Check if full deinitialization is required
	if (eDeinitMode) {
 8008772:	78fb      	ldrb	r3, [r7, #3]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01b      	beq.n	80087b0 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff fefc 	bl	8008576 <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff ff25 	bl	80085ce <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	785b      	ldrb	r3, [r3, #1]
 8008788:	4618      	mov	r0, r3
 800878a:	f7ff fe33 	bl	80083f4 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 800878e:	4603      	mov	r3, r0
 8008790:	4618      	mov	r0, r3
 8008792:	f7fa fa0a 	bl	8002baa <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	f022 0201 	bic.w	r2, r2, #1
 80087a4:	601a      	str	r2, [r3, #0]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	331c      	adds	r3, #28
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fd fce9 	bl	8006182 <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	785b      	ldrb	r3, [r3, #1]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff fe6b 	bl	8008490 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	8b1b      	ldrh	r3, [r3, #24]
 80087c2:	4619      	mov	r1, r3
 80087c4:	4610      	mov	r0, r2
 80087c6:	f7fb f8d3 	bl	8003970 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	8a1b      	ldrh	r3, [r3, #16]
 80087d2:	4619      	mov	r1, r3
 80087d4:	4610      	mov	r0, r2
 80087d6:	f7fb f8cb 	bl	8003970 <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	701a      	strb	r2, [r3, #0]
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <_ZN10QAD_I2CMgrC1Ev>:
//QAD_I2CMgr::QAD_I2CMgr
//QAD_I2CMgr Constructor
//
//Fills out details for the system's I2C peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's static get() method is called.
QAD_I2CMgr::QAD_I2CMgr() {
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_I2C_PeriphCount; i++) {
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	2b03      	cmp	r3, #3
 8008808:	d80d      	bhi.n	8008826 <_ZN10QAD_I2CMgrC1Ev+0x2e>
		//Set current state of peripheral to unused
		m_sI2Cs[i].eState = QAD_I2C_Unused;
 800880a:	7bfa      	ldrb	r2, [r7, #15]
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	4613      	mov	r3, r2
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	440b      	add	r3, r1
 8008818:	3301      	adds	r3, #1
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_I2C_PeriphCount; i++) {
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	3301      	adds	r3, #1
 8008822:	73fb      	strb	r3, [r7, #15]
 8008824:	e7ee      	b.n	8008804 <_ZN10QAD_I2CMgrC1Ev+0xc>
	}

	//Set Peripheral IDs
	m_sI2Cs[QAD_I2C1].eI2C = QAD_I2C1;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	701a      	strb	r2, [r3, #0]
	m_sI2Cs[QAD_I2C2].eI2C = QAD_I2C2;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	731a      	strb	r2, [r3, #12]
	m_sI2Cs[QAD_I2C3].eI2C = QAD_I2C3;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2202      	movs	r2, #2
 8008836:	761a      	strb	r2, [r3, #24]
	m_sI2Cs[QAD_I2C4].eI2C = QAD_I2C4;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2203      	movs	r2, #3
 800883c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	//Set Instances
	m_sI2Cs[QAD_I2C1].pInstance = I2C1;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a17      	ldr	r2, [pc, #92]	; (80088a0 <_ZN10QAD_I2CMgrC1Ev+0xa8>)
 8008844:	605a      	str	r2, [r3, #4]
	m_sI2Cs[QAD_I2C2].pInstance = I2C2;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a16      	ldr	r2, [pc, #88]	; (80088a4 <_ZN10QAD_I2CMgrC1Ev+0xac>)
 800884a:	611a      	str	r2, [r3, #16]
	m_sI2Cs[QAD_I2C3].pInstance = I2C3;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a16      	ldr	r2, [pc, #88]	; (80088a8 <_ZN10QAD_I2CMgrC1Ev+0xb0>)
 8008850:	61da      	str	r2, [r3, #28]
	m_sI2Cs[QAD_I2C4].pInstance = I2C4;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a15      	ldr	r2, [pc, #84]	; (80088ac <_ZN10QAD_I2CMgrC1Ev+0xb4>)
 8008856:	629a      	str	r2, [r3, #40]	; 0x28

  //Set Event IRQs
	m_sI2Cs[QAD_I2C1].eIRQ_Event = I2C1_EV_IRQn;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	221f      	movs	r2, #31
 800885c:	721a      	strb	r2, [r3, #8]
	m_sI2Cs[QAD_I2C2].eIRQ_Event = I2C2_EV_IRQn;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2221      	movs	r2, #33	; 0x21
 8008862:	751a      	strb	r2, [r3, #20]
	m_sI2Cs[QAD_I2C3].eIRQ_Event = I2C3_EV_IRQn;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2248      	movs	r2, #72	; 0x48
 8008868:	f883 2020 	strb.w	r2, [r3, #32]
	m_sI2Cs[QAD_I2C4].eIRQ_Event = I2C4_EV_IRQn;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	225f      	movs	r2, #95	; 0x5f
 8008870:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	//Set Error IRQs
	m_sI2Cs[QAD_I2C1].eIRQ_Error = I2C1_ER_IRQn;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2220      	movs	r2, #32
 8008878:	725a      	strb	r2, [r3, #9]
	m_sI2Cs[QAD_I2C2].eIRQ_Error = I2C2_ER_IRQn;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2222      	movs	r2, #34	; 0x22
 800887e:	755a      	strb	r2, [r3, #21]
	m_sI2Cs[QAD_I2C3].eIRQ_Error = I2C3_ER_IRQn;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2249      	movs	r2, #73	; 0x49
 8008884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	m_sI2Cs[QAD_I2C4].eIRQ_Error = I2C4_ER_IRQn;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2260      	movs	r2, #96	; 0x60
 800888c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

}
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	40005400 	.word	0x40005400
 80088a4:	40005800 	.word	0x40005800
 80088a8:	40005c00 	.word	0x40005c00
 80088ac:	40006000 	.word	0x40006000

080088b0 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State>:
//
//To be called from static method registerI2C()
//Used to register an I2C peripheral as being used by a driver
//eI2C - the I2C peripheral to be registered
//Returns QA_OK if successful, or returns QA_Error_PeriphBusy if the selected I2C is already in use
QA_Result QAD_I2CMgr::imp_registerI2C(QAD_I2C_Periph eI2C, QAD_I2C_State eMode) {
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70fb      	strb	r3, [r7, #3]
 80088bc:	4613      	mov	r3, r2
 80088be:	70bb      	strb	r3, [r7, #2]
  if (eI2C >= QAD_I2CNone)
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d901      	bls.n	80088ca <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x1a>
  	return QA_Fail;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e017      	b.n	80088fa <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x4a>

  if (m_sI2Cs[eI2C].eState)
 80088ca:	78fa      	ldrb	r2, [r7, #3]
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	4613      	mov	r3, r2
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	440b      	add	r3, r1
 80088d8:	3301      	adds	r3, #1
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x34>
  	return QA_Error_PeriphBusy;
 80088e0:	2302      	movs	r3, #2
 80088e2:	e00a      	b.n	80088fa <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x4a>

  m_sI2Cs[eI2C].eState = eMode;
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4613      	mov	r3, r2
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	4413      	add	r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	3301      	adds	r3, #1
 80088f4:	78ba      	ldrb	r2, [r7, #2]
 80088f6:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph>:
//QAD_I2CMgr Management Method
//
//To be called from static method deregisterI2C()
//Used to deregister an I2C to mark it as no longer being used by a driver
//eI2C - the I2C Peripheral to be deregistered
void QAD_I2CMgr::imp_deregisterI2C(QAD_I2C_Periph eI2C) {
 8008906:	b480      	push	{r7}
 8008908:	b083      	sub	sp, #12
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	460b      	mov	r3, r1
 8008910:	70fb      	strb	r3, [r7, #3]
  if (eI2C >= QAD_I2CNone)
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	2b03      	cmp	r3, #3
 8008916:	d80a      	bhi.n	800892e <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph+0x28>
  	return;

  m_sI2Cs[eI2C].eState = QAD_I2C_Unused;
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	4613      	mov	r3, r2
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	3301      	adds	r3, #1
 8008928:	2200      	movs	r2, #0
 800892a:	701a      	strb	r2, [r3, #0]
 800892c:	e000      	b.n	8008930 <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph+0x2a>
  	return;
 800892e:	bf00      	nop
}
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
	...

0800893c <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph>:
//QAD_I2CMgr Clock Method
//
//To be called by static method enableClock()
//Used to enable the clock for a specific I2C peripheral
//eI2C - the I2C peripheral to enable the clock for
void QAD_I2CMgr::imp_enableClock(QAD_I2C_Periph eI2C) {
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
  switch (eI2C) {
 8008948:	78fb      	ldrb	r3, [r7, #3]
 800894a:	2b04      	cmp	r3, #4
 800894c:	d871      	bhi.n	8008a32 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
 800894e:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x18>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	08008969 	.word	0x08008969
 8008958:	0800899b 	.word	0x0800899b
 800895c:	080089cd 	.word	0x080089cd
 8008960:	080089ff 	.word	0x080089ff
 8008964:	08008a31 	.word	0x08008a31
    case (QAD_I2C1):
    	__HAL_RCC_I2C1_CLK_ENABLE();
 8008968:	4b35      	ldr	r3, [pc, #212]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800896a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896c:	4a34      	ldr	r2, [pc, #208]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800896e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008972:	6413      	str	r3, [r2, #64]	; 0x40
 8008974:	4b32      	ldr	r3, [pc, #200]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 8008976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800897c:	617b      	str	r3, [r7, #20]
 800897e:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_I2C1_FORCE_RESET();
 8008980:	4b2f      	ldr	r3, [pc, #188]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	4a2e      	ldr	r2, [pc, #184]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 8008986:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800898a:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C1_RELEASE_RESET();
 800898c:	4b2c      	ldr	r3, [pc, #176]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	4a2b      	ldr	r2, [pc, #172]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 8008992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008996:	6213      	str	r3, [r2, #32]
    	break;
 8008998:	e04b      	b.n	8008a32 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
    case (QAD_I2C2):
    	__HAL_RCC_I2C2_CLK_ENABLE();
 800899a:	4b29      	ldr	r3, [pc, #164]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	4a28      	ldr	r2, [pc, #160]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 80089a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80089a4:	6413      	str	r3, [r2, #64]	; 0x40
 80089a6:	4b26      	ldr	r3, [pc, #152]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089ae:	613b      	str	r3, [r7, #16]
 80089b0:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_I2C2_FORCE_RESET();
 80089b2:	4b23      	ldr	r3, [pc, #140]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	4a22      	ldr	r2, [pc, #136]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 80089b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80089bc:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C2_RELEASE_RESET();
 80089be:	4b20      	ldr	r3, [pc, #128]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	4a1f      	ldr	r2, [pc, #124]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 80089c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80089c8:	6213      	str	r3, [r2, #32]
    	break;
 80089ca:	e032      	b.n	8008a32 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
    case (QAD_I2C3):
    	__HAL_RCC_I2C3_CLK_ENABLE();
 80089cc:	4b1c      	ldr	r3, [pc, #112]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 80089ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d0:	4a1b      	ldr	r2, [pc, #108]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 80089d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80089d6:	6413      	str	r3, [r2, #64]	; 0x40
 80089d8:	4b19      	ldr	r3, [pc, #100]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 80089da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089e0:	60fb      	str	r3, [r7, #12]
 80089e2:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_I2C3_FORCE_RESET();
 80089e4:	4b16      	ldr	r3, [pc, #88]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	4a15      	ldr	r2, [pc, #84]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 80089ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80089ee:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C3_RELEASE_RESET();
 80089f0:	4b13      	ldr	r3, [pc, #76]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	4a12      	ldr	r2, [pc, #72]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 80089f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80089fa:	6213      	str	r3, [r2, #32]
    	break;
 80089fc:	e019      	b.n	8008a32 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
    case (QAD_I2C4):
    	__HAL_RCC_I2C4_CLK_ENABLE();
 80089fe:	4b10      	ldr	r3, [pc, #64]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	4a0f      	ldr	r2, [pc, #60]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 8008a04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a08:	6413      	str	r3, [r2, #64]	; 0x40
 8008a0a:	4b0d      	ldr	r3, [pc, #52]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a12:	60bb      	str	r3, [r7, #8]
 8008a14:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_I2C4_FORCE_RESET();
 8008a16:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	4a09      	ldr	r2, [pc, #36]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 8008a1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a20:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C4_RELEASE_RESET();
 8008a22:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	4a06      	ldr	r2, [pc, #24]	; (8008a40 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 8008a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a2c:	6213      	str	r3, [r2, #32]
    	break;
 8008a2e:	e000      	b.n	8008a32 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
    case (QAD_I2CNone):
    	break;
 8008a30:	bf00      	nop
  }
}
 8008a32:	bf00      	nop
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	40023800 	.word	0x40023800

08008a44 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph>:
//QAD_I2CMgr Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific I2C peripheral
//eI2C - the I2C peripheral to disable the clock for
void QAD_I2CMgr::imp_disableClock(QAD_I2C_Periph eI2C) {
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  switch (eI2C) {
 8008a50:	78fb      	ldrb	r3, [r7, #3]
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	d829      	bhi.n	8008aaa <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
 8008a56:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x18>)
 8008a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5c:	08008a71 	.word	0x08008a71
 8008a60:	08008a7f 	.word	0x08008a7f
 8008a64:	08008a8d 	.word	0x08008a8d
 8008a68:	08008a9b 	.word	0x08008a9b
 8008a6c:	08008aa9 	.word	0x08008aa9
    case (QAD_I2C1):
    	__HAL_RCC_I2C1_CLK_DISABLE();
 8008a70:	4b11      	ldr	r3, [pc, #68]	; (8008ab8 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 8008a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a74:	4a10      	ldr	r2, [pc, #64]	; (8008ab8 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 8008a76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a7a:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 8008a7c:	e015      	b.n	8008aaa <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
    case (QAD_I2C2):
    	__HAL_RCC_I2C2_CLK_DISABLE();
 8008a7e:	4b0e      	ldr	r3, [pc, #56]	; (8008ab8 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 8008a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a82:	4a0d      	ldr	r2, [pc, #52]	; (8008ab8 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 8008a84:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008a88:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 8008a8a:	e00e      	b.n	8008aaa <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
    case (QAD_I2C3):
    	__HAL_RCC_I2C3_CLK_DISABLE();
 8008a8c:	4b0a      	ldr	r3, [pc, #40]	; (8008ab8 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a90:	4a09      	ldr	r2, [pc, #36]	; (8008ab8 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 8008a92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008a96:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 8008a98:	e007      	b.n	8008aaa <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
    case (QAD_I2C4):
    	__HAL_RCC_I2C4_CLK_DISABLE();
 8008a9a:	4b07      	ldr	r3, [pc, #28]	; (8008ab8 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	4a06      	ldr	r2, [pc, #24]	; (8008ab8 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 8008aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008aa4:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 8008aa6:	e000      	b.n	8008aaa <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
    case (QAD_I2CNone):
    	break;
 8008aa8:	bf00      	nop
  }
}
 8008aaa:	bf00      	nop
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	40023800 	.word	0x40023800

08008abc <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method is a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73fb      	strb	r3, [r7, #15]
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	2b07      	cmp	r3, #7
 8008acc:	d80d      	bhi.n	8008aea <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 8008ace:	7bfa      	ldrb	r2, [r7, #15]
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	005b      	lsls	r3, r3, #1
 8008ad6:	4413      	add	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	440b      	add	r3, r1
 8008adc:	3301      	adds	r3, #1
 8008ade:	2200      	movs	r2, #0
 8008ae0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	73fb      	strb	r3, [r7, #15]
 8008ae8:	e7ee      	b.n	8008ac8 <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART3].eUART = QAD_UART3;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2202      	movs	r2, #2
 8008afa:	761a      	strb	r2, [r3, #24]
	m_sUARTs[QAD_UART4].eUART = QAD_UART4;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2203      	movs	r2, #3
 8008b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sUARTs[QAD_UART5].eUART = QAD_UART5;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2204      	movs	r2, #4
 8008b08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2205      	movs	r2, #5
 8008b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	m_sUARTs[QAD_UART7].eUART = QAD_UART7;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2206      	movs	r2, #6
 8008b18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	m_sUARTs[QAD_UART8].eUART = QAD_UART8;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2207      	movs	r2, #7
 8008b20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a1e      	ldr	r2, [pc, #120]	; (8008ba0 <_ZN11QAD_UARTMgrC1Ev+0xe4>)
 8008b28:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a1d      	ldr	r2, [pc, #116]	; (8008ba4 <_ZN11QAD_UARTMgrC1Ev+0xe8>)
 8008b2e:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART3].pInstance = USART3;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a1d      	ldr	r2, [pc, #116]	; (8008ba8 <_ZN11QAD_UARTMgrC1Ev+0xec>)
 8008b34:	61da      	str	r2, [r3, #28]
	m_sUARTs[QAD_UART4].pInstance = UART4;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a1c      	ldr	r2, [pc, #112]	; (8008bac <_ZN11QAD_UARTMgrC1Ev+0xf0>)
 8008b3a:	629a      	str	r2, [r3, #40]	; 0x28
	m_sUARTs[QAD_UART5].pInstance = UART5;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a1c      	ldr	r2, [pc, #112]	; (8008bb0 <_ZN11QAD_UARTMgrC1Ev+0xf4>)
 8008b40:	635a      	str	r2, [r3, #52]	; 0x34
	m_sUARTs[QAD_UART6].pInstance = USART6;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a1b      	ldr	r2, [pc, #108]	; (8008bb4 <_ZN11QAD_UARTMgrC1Ev+0xf8>)
 8008b46:	641a      	str	r2, [r3, #64]	; 0x40
	m_sUARTs[QAD_UART7].pInstance = UART7;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a1b      	ldr	r2, [pc, #108]	; (8008bb8 <_ZN11QAD_UARTMgrC1Ev+0xfc>)
 8008b4c:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sUARTs[QAD_UART8].pInstance = UART8;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a1a      	ldr	r2, [pc, #104]	; (8008bbc <_ZN11QAD_UARTMgrC1Ev+0x100>)
 8008b52:	659a      	str	r2, [r3, #88]	; 0x58

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2225      	movs	r2, #37	; 0x25
 8008b58:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2226      	movs	r2, #38	; 0x26
 8008b5e:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART3].eIRQ = USART3_IRQn;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2227      	movs	r2, #39	; 0x27
 8008b64:	f883 2020 	strb.w	r2, [r3, #32]
	m_sUARTs[QAD_UART4].eIRQ = UART4_IRQn;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2234      	movs	r2, #52	; 0x34
 8008b6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	m_sUARTs[QAD_UART5].eIRQ = UART5_IRQn;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2235      	movs	r2, #53	; 0x35
 8008b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2247      	movs	r2, #71	; 0x47
 8008b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sUARTs[QAD_UART7].eIRQ = UART7_IRQn;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2252      	movs	r2, #82	; 0x52
 8008b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	m_sUARTs[QAD_UART8].eIRQ = UART8_IRQn;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2253      	movs	r2, #83	; 0x53
 8008b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

}
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	40011000 	.word	0x40011000
 8008ba4:	40004400 	.word	0x40004400
 8008ba8:	40004800 	.word	0x40004800
 8008bac:	40004c00 	.word	0x40004c00
 8008bb0:	40005000 	.word	0x40005000
 8008bb4:	40011400 	.word	0x40011400
 8008bb8:	40007800 	.word	0x40007800
 8008bbc:	40007c00 	.word	0x40007c00

08008bc0 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	2b07      	cmp	r3, #7
 8008bd0:	d901      	bls.n	8008bd6 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e017      	b.n	8008c06 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 8008bd6:	78fa      	ldrb	r2, [r7, #3]
 8008bd8:	6879      	ldr	r1, [r7, #4]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	440b      	add	r3, r1
 8008be4:	3301      	adds	r3, #1
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 8008bec:	2302      	movs	r3, #2
 8008bee:	e00a      	b.n	8008c06 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 8008bf0:	78fa      	ldrb	r2, [r7, #3]
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	440b      	add	r3, r1
 8008bfe:	3301      	adds	r3, #1
 8008c00:	2201      	movs	r2, #1
 8008c02:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8008c1e:	78fb      	ldrb	r3, [r7, #3]
 8008c20:	2b07      	cmp	r3, #7
 8008c22:	d80a      	bhi.n	8008c3a <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8008c24:	78fa      	ldrb	r2, [r7, #3]
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	440b      	add	r3, r1
 8008c32:	3301      	adds	r3, #1
 8008c34:	2200      	movs	r2, #0
 8008c36:	701a      	strb	r2, [r3, #0]
 8008c38:	e000      	b.n	8008c3c <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 8008c3a:	bf00      	nop
}
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
	...

08008c48 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 8008c48:	b480      	push	{r7}
 8008c4a:	b08b      	sub	sp, #44	; 0x2c
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	2b08      	cmp	r3, #8
 8008c58:	f200 80df 	bhi.w	8008e1a <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
 8008c5c:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1c>)
 8008c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c62:	bf00      	nop
 8008c64:	08008c89 	.word	0x08008c89
 8008c68:	08008cbb 	.word	0x08008cbb
 8008c6c:	08008ced 	.word	0x08008ced
 8008c70:	08008d1f 	.word	0x08008d1f
 8008c74:	08008d51 	.word	0x08008d51
 8008c78:	08008d83 	.word	0x08008d83
 8008c7c:	08008db5 	.word	0x08008db5
 8008c80:	08008de7 	.word	0x08008de7
 8008c84:	08008e19 	.word	0x08008e19
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 8008c88:	4b67      	ldr	r3, [pc, #412]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c8c:	4a66      	ldr	r2, [pc, #408]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008c8e:	f043 0310 	orr.w	r3, r3, #16
 8008c92:	6453      	str	r3, [r2, #68]	; 0x44
 8008c94:	4b64      	ldr	r3, [pc, #400]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c98:	f003 0310 	and.w	r3, r3, #16
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_USART1_FORCE_RESET();
 8008ca0:	4b61      	ldr	r3, [pc, #388]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	4a60      	ldr	r2, [pc, #384]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008ca6:	f043 0310 	orr.w	r3, r3, #16
 8008caa:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 8008cac:	4b5e      	ldr	r3, [pc, #376]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb0:	4a5d      	ldr	r2, [pc, #372]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008cb2:	f023 0310 	bic.w	r3, r3, #16
 8008cb6:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8008cb8:	e0af      	b.n	8008e1a <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 8008cba:	4b5b      	ldr	r3, [pc, #364]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbe:	4a5a      	ldr	r2, [pc, #360]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8008cc6:	4b58      	ldr	r3, [pc, #352]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cce:	623b      	str	r3, [r7, #32]
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_USART2_FORCE_RESET();
 8008cd2:	4b55      	ldr	r3, [pc, #340]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	4a54      	ldr	r2, [pc, #336]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cdc:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 8008cde:	4b52      	ldr	r3, [pc, #328]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	4a51      	ldr	r2, [pc, #324]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008ce4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ce8:	6213      	str	r3, [r2, #32]
      break;
 8008cea:	e096      	b.n	8008e1a <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_ENABLE();
 8008cec:	4b4e      	ldr	r3, [pc, #312]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf0:	4a4d      	ldr	r2, [pc, #308]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8008cf8:	4b4b      	ldr	r3, [pc, #300]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d00:	61fb      	str	r3, [r7, #28]
 8008d02:	69fb      	ldr	r3, [r7, #28]
      __HAL_RCC_USART3_FORCE_RESET();
 8008d04:	4b48      	ldr	r3, [pc, #288]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	4a47      	ldr	r2, [pc, #284]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d0e:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART3_RELEASE_RESET();
 8008d10:	4b45      	ldr	r3, [pc, #276]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d12:	6a1b      	ldr	r3, [r3, #32]
 8008d14:	4a44      	ldr	r2, [pc, #272]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d1a:	6213      	str	r3, [r2, #32]
      break;
 8008d1c:	e07d      	b.n	8008e1a <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_ENABLE();
 8008d1e:	4b42      	ldr	r3, [pc, #264]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	4a41      	ldr	r2, [pc, #260]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d28:	6413      	str	r3, [r2, #64]	; 0x40
 8008d2a:	4b3f      	ldr	r3, [pc, #252]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d32:	61bb      	str	r3, [r7, #24]
 8008d34:	69bb      	ldr	r3, [r7, #24]
      __HAL_RCC_UART4_FORCE_RESET();
 8008d36:	4b3c      	ldr	r3, [pc, #240]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	4a3b      	ldr	r2, [pc, #236]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d40:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART4_RELEASE_RESET();
 8008d42:	4b39      	ldr	r3, [pc, #228]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	4a38      	ldr	r2, [pc, #224]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d48:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008d4c:	6213      	str	r3, [r2, #32]
      break;
 8008d4e:	e064      	b.n	8008e1a <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_ENABLE();
 8008d50:	4b35      	ldr	r3, [pc, #212]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d54:	4a34      	ldr	r2, [pc, #208]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8008d5c:	4b32      	ldr	r3, [pc, #200]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d64:	617b      	str	r3, [r7, #20]
 8008d66:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_UART5_FORCE_RESET();
 8008d68:	4b2f      	ldr	r3, [pc, #188]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	4a2e      	ldr	r2, [pc, #184]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d72:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART5_RELEASE_RESET();
 8008d74:	4b2c      	ldr	r3, [pc, #176]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	4a2b      	ldr	r2, [pc, #172]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d7e:	6213      	str	r3, [r2, #32]
      break;
 8008d80:	e04b      	b.n	8008e1a <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 8008d82:	4b29      	ldr	r3, [pc, #164]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d86:	4a28      	ldr	r2, [pc, #160]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d88:	f043 0320 	orr.w	r3, r3, #32
 8008d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8008d8e:	4b26      	ldr	r3, [pc, #152]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d92:	f003 0320 	and.w	r3, r3, #32
 8008d96:	613b      	str	r3, [r7, #16]
 8008d98:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART6_FORCE_RESET();
 8008d9a:	4b23      	ldr	r3, [pc, #140]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	4a22      	ldr	r2, [pc, #136]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008da0:	f043 0320 	orr.w	r3, r3, #32
 8008da4:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 8008da6:	4b20      	ldr	r3, [pc, #128]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	4a1f      	ldr	r2, [pc, #124]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008dac:	f023 0320 	bic.w	r3, r3, #32
 8008db0:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8008db2:	e032      	b.n	8008e1a <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_ENABLE();
 8008db4:	4b1c      	ldr	r3, [pc, #112]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db8:	4a1b      	ldr	r2, [pc, #108]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008dba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8008dc0:	4b19      	ldr	r3, [pc, #100]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008dc8:	60fb      	str	r3, [r7, #12]
 8008dca:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_UART7_FORCE_RESET();
 8008dcc:	4b16      	ldr	r3, [pc, #88]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	4a15      	ldr	r2, [pc, #84]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008dd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dd6:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART7_RELEASE_RESET();
 8008dd8:	4b13      	ldr	r3, [pc, #76]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	4a12      	ldr	r2, [pc, #72]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008dde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008de2:	6213      	str	r3, [r2, #32]
      break;
 8008de4:	e019      	b.n	8008e1a <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_ENABLE();
 8008de6:	4b10      	ldr	r3, [pc, #64]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	4a0f      	ldr	r2, [pc, #60]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008dec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008df0:	6413      	str	r3, [r2, #64]	; 0x40
 8008df2:	4b0d      	ldr	r3, [pc, #52]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dfa:	60bb      	str	r3, [r7, #8]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_UART8_FORCE_RESET();
 8008dfe:	4b0a      	ldr	r3, [pc, #40]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	4a09      	ldr	r2, [pc, #36]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008e04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e08:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART8_RELEASE_RESET();
 8008e0a:	4b07      	ldr	r3, [pc, #28]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	4a06      	ldr	r2, [pc, #24]	; (8008e28 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8008e10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e14:	6213      	str	r3, [r2, #32]
      break;
 8008e16:	e000      	b.n	8008e1a <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UARTNone):
    	break;
 8008e18:	bf00      	nop
  }
}
 8008e1a:	bf00      	nop
 8008e1c:	372c      	adds	r7, #44	; 0x2c
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	40023800 	.word	0x40023800

08008e2c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8008e38:	78fb      	ldrb	r3, [r7, #3]
 8008e3a:	2b08      	cmp	r3, #8
 8008e3c:	d84d      	bhi.n	8008eda <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
 8008e3e:	a201      	add	r2, pc, #4	; (adr r2, 8008e44 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e69 	.word	0x08008e69
 8008e48:	08008e77 	.word	0x08008e77
 8008e4c:	08008e85 	.word	0x08008e85
 8008e50:	08008e93 	.word	0x08008e93
 8008e54:	08008ea1 	.word	0x08008ea1
 8008e58:	08008eaf 	.word	0x08008eaf
 8008e5c:	08008ebd 	.word	0x08008ebd
 8008e60:	08008ecb 	.word	0x08008ecb
 8008e64:	08008ed9 	.word	0x08008ed9
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 8008e68:	4b1f      	ldr	r3, [pc, #124]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6c:	4a1e      	ldr	r2, [pc, #120]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008e6e:	f023 0310 	bic.w	r3, r3, #16
 8008e72:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8008e74:	e031      	b.n	8008eda <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 8008e76:	4b1c      	ldr	r3, [pc, #112]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7a:	4a1b      	ldr	r2, [pc, #108]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008e7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e80:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8008e82:	e02a      	b.n	8008eda <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_DISABLE();
 8008e84:	4b18      	ldr	r3, [pc, #96]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e88:	4a17      	ldr	r2, [pc, #92]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e8e:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8008e90:	e023      	b.n	8008eda <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_DISABLE();
 8008e92:	4b15      	ldr	r3, [pc, #84]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	4a14      	ldr	r2, [pc, #80]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008e98:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008e9c:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8008e9e:	e01c      	b.n	8008eda <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_DISABLE();
 8008ea0:	4b11      	ldr	r3, [pc, #68]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea4:	4a10      	ldr	r2, [pc, #64]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008ea6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008eaa:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8008eac:	e015      	b.n	8008eda <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 8008eae:	4b0e      	ldr	r3, [pc, #56]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb2:	4a0d      	ldr	r2, [pc, #52]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008eb4:	f023 0320 	bic.w	r3, r3, #32
 8008eb8:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8008eba:	e00e      	b.n	8008eda <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_DISABLE();
 8008ebc:	4b0a      	ldr	r3, [pc, #40]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec0:	4a09      	ldr	r2, [pc, #36]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008ec2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ec6:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8008ec8:	e007      	b.n	8008eda <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_DISABLE();
 8008eca:	4b07      	ldr	r3, [pc, #28]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	4a06      	ldr	r2, [pc, #24]	; (8008ee8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8008ed0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ed4:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8008ed6:	e000      	b.n	8008eda <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UARTNone):
    	break;
 8008ed8:	bf00      	nop
  }
}
 8008eda:	bf00      	nop
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	40023800 	.word	0x40023800

08008eec <_ZN18QAT_Pixel_ARGB4444aSERKt>:
		m_uPxl = other.pxl();
		return *this;
	}

	//Assignment operator to accept a 16bit pixel value
	QAT_Pixel_ARGB4444& operator=(const uint16_t& other) {
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
		m_uPxl = other;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	881a      	ldrh	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	801a      	strh	r2, [r3, #0]
		return *this;
 8008efe:	687b      	ldr	r3, [r7, #4]
	}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <_ZN18QAT_Pixel_ARGB44443pxlEt>:
	uint16_t pxl(void) const {
		return m_uPxl;
	}

	//Sets the current 16bit pixel value
	void pxl(uint16_t pxl) {
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	807b      	strh	r3, [r7, #2]
		m_uPxl = pxl;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	887a      	ldrh	r2, [r7, #2]
 8008f1c:	801a      	strh	r2, [r3, #0]
	}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <_ZN8QAD_LTDC4initEv>:
	static QA_Result init(void) {
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	af00      	add	r7, sp, #0
		return get().imp_init();
 8008f2e:	f7fe fd0f 	bl	8007950 <_ZN8QAD_LTDC3getEv>
 8008f32:	4603      	mov	r3, r0
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fe fd45 	bl	80079c4 <_ZN8QAD_LTDC8imp_initEv>
 8008f3a:	4603      	mov	r3, r0
	}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <_ZN8QAD_LTDC17flipLayer0BuffersEv>:
	//---------------------
	//Layer Control Methods

	//Used to flip the front and back buffer for layer 0
	//To be used at the end of rendering visual elements to layer 0 in order for them to become visible on the LCD display
	static void flipLayer0Buffers(void) {
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
		get().imp_flipLayer0Buffers();
 8008f44:	f7fe fd04 	bl	8007950 <_ZN8QAD_LTDC3getEv>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7ff f84e 	bl	8007fec <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>
	}
 8008f50:	bf00      	nop
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <_ZN8QAD_LTDC17flipLayer1BuffersEv>:

	//Used to flip the front and back buffer for layer 1
	//To be used at the end of rendering visual elements to layer 1 in order for them to become visible on the LCD display
	static void flipLayer1Buffers(void) {
 8008f54:	b580      	push	{r7, lr}
 8008f56:	af00      	add	r7, sp, #0
		get().imp_flipLayer1Buffers();
 8008f58:	f7fe fcfa 	bl	8007950 <_ZN8QAD_LTDC3getEv>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff f886 	bl	8008070 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>
	}
 8008f64:	bf00      	nop
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <_ZN8QAD_LTDC19getLayer0BackBufferEv>:
	static void* getLayer0BackBufferPtr(void) {
		return get().imp_getLayer0BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 0
	static QAD_LTDC_Buffer* getLayer0BackBuffer(void) {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
		return get().imp_getLayer0BackBuffer();
 8008f6c:	f7fe fcf0 	bl	8007950 <_ZN8QAD_LTDC3getEv>
 8008f70:	4603      	mov	r3, r0
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7ff f8be 	bl	80080f4 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>
 8008f78:	4603      	mov	r3, r0
	}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <_ZN8QAD_LTDC19getLayer1BackBufferEv>:
	static void* getLayer1BackBufferPtr(void) {
		return get().imp_getLayer1BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 1
	static QAD_LTDC_Buffer* getLayer1BackBuffer(void) {
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	af00      	add	r7, sp, #0
		return get().imp_getLayer1BackBuffer();
 8008f82:	f7fe fce5 	bl	8007950 <_ZN8QAD_LTDC3getEv>
 8008f86:	4603      	mov	r3, r0
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7ff f8d9 	bl	8008140 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>
 8008f8e:	4603      	mov	r3, r0
	}
 8008f90:	4618      	mov	r0, r3
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <_ZN7QAS_LCD8imp_initEv>:
//QAS_LCD Initialization Method
//
//To be called from static method init()
//To be used to initialize the LTDC peripheral and setup the Font Manager class
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAS_LCD::imp_init(void) {
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af04      	add	r7, sp, #16
 8008f9a:	6078      	str	r0, [r7, #4]

	//Return if system is already initialized
	if (m_eInitState) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d001      	beq.n	8008fa8 <_ZN7QAS_LCD8imp_initEv+0x14>
  	return QA_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	e044      	b.n	8009032 <_ZN7QAS_LCD8imp_initEv+0x9e>
  }

	//Initialize LTDC driver class, returning QA_Fail if LTDC doesn't initialize successfully
	if (QAD_LTDC::init())
 8008fa8:	f7ff ffbf 	bl	8008f2a <_ZN8QAD_LTDC4initEv>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	bf14      	ite	ne
 8008fb2:	2301      	movne	r3, #1
 8008fb4:	2300      	moveq	r3, #0
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <_ZN7QAS_LCD8imp_initEv+0x2c>
		return QA_Fail;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e038      	b.n	8009032 <_ZN7QAS_LCD8imp_initEv+0x9e>


	//Setup font manager
	m_cFontMgr.clear();  //Clear font manager
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	330c      	adds	r3, #12
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 fa2e 	bl	8009426 <_ZN15QAS_LCD_FontMgr5clearEv>

	  //Add SegoeUI 12pt font (defined in QAS_LCD_Fonts_SegoeUI12pt.hpp)
	m_cFontMgr.add("SegoeUI12pt",
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f103 000c 	add.w	r0, r3, #12
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	9302      	str	r3, [sp, #8]
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	2311      	movs	r3, #17
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	4b17      	ldr	r3, [pc, #92]	; (800903c <_ZN7QAS_LCD8imp_initEv+0xa8>)
 8008fde:	4a18      	ldr	r2, [pc, #96]	; (8009040 <_ZN7QAS_LCD8imp_initEv+0xac>)
 8008fe0:	4918      	ldr	r1, [pc, #96]	; (8009044 <_ZN7QAS_LCD8imp_initEv+0xb0>)
 8008fe2:	f000 f9f9 	bl	80093d8 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI12pt_Height,
								 QAS_LCD_Fonts_SegoeUI12pt_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI12pt_CharGap);

	  //Add SegoeUI 20pt Semi-bold font (defined in QAS_LCD_Fonts_SegoeUI20ptSB.hpp)
	m_cFontMgr.add("SegoeUI20ptSB",
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f103 000c 	add.w	r0, r3, #12
 8008fec:	2303      	movs	r3, #3
 8008fee:	9302      	str	r3, [sp, #8]
 8008ff0:	2305      	movs	r3, #5
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	231b      	movs	r3, #27
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	4b13      	ldr	r3, [pc, #76]	; (8009048 <_ZN7QAS_LCD8imp_initEv+0xb4>)
 8008ffa:	4a14      	ldr	r2, [pc, #80]	; (800904c <_ZN7QAS_LCD8imp_initEv+0xb8>)
 8008ffc:	4914      	ldr	r1, [pc, #80]	; (8009050 <_ZN7QAS_LCD8imp_initEv+0xbc>)
 8008ffe:	f000 f9eb 	bl	80093d8 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI20ptSB_Height,
								 QAS_LCD_Fonts_SegoeUI20ptSB_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI20ptSB_CharGap);

	  //Add Showcard Gothic 18pt font (defined in QAS_LCD_Fonts_ShowcardGothic18pt.hpp)
	m_cFontMgr.add("ShowcardGothic18pt",
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f103 000c 	add.w	r0, r3, #12
 8009008:	2302      	movs	r3, #2
 800900a:	9302      	str	r3, [sp, #8]
 800900c:	2302      	movs	r3, #2
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	231a      	movs	r3, #26
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <_ZN7QAS_LCD8imp_initEv+0xc0>)
 8009016:	4a10      	ldr	r2, [pc, #64]	; (8009058 <_ZN7QAS_LCD8imp_initEv+0xc4>)
 8009018:	4910      	ldr	r1, [pc, #64]	; (800905c <_ZN7QAS_LCD8imp_initEv+0xc8>)
 800901a:	f000 f9dd 	bl	80093d8 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_ShowcardGothic18pt_SpaceWidth,
								 QAS_LCD_Fonts_ShowcardGothic18pt_CharGap);


	//Set System State
	m_eInitState = QA_Initialized; //Set system as now being initialized
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	701a      	strb	r2, [r3, #0]

	//Set initial data
	m_pDrawBuffer = NULL;   //Set current draw buffer to NULL
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	605a      	str	r2, [r3, #4]
	m_uDrawColor  = 0x0000; //Set current draw color to transparent black
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	811a      	strh	r2, [r3, #8]

	//Return
	return QA_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	0800b864 	.word	0x0800b864
 8009040:	0800b6ec 	.word	0x0800b6ec
 8009044:	0800b444 	.word	0x0800b444
 8009048:	0800c160 	.word	0x0800c160
 800904c:	0800bfe8 	.word	0x0800bfe8
 8009050:	0800b450 	.word	0x0800b450
 8009054:	0800d65c 	.word	0x0800d65c
 8009058:	0800d4e4 	.word	0x0800d4e4
 800905c:	0800b460 	.word	0x0800b460

08009060 <_ZN7QAS_LCD14imp_flipLayer0Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer0()
//Used to flip the front and back buffer for layer 0
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer0(void) {
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer0Buffers();
 8009068:	f7ff ff6a 	bl	8008f40 <_ZN8QAD_LTDC17flipLayer0BuffersEv>
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <_ZN7QAS_LCD14imp_flipLayer1Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer1()
//Used to flip the front and back buffer for layer 1
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer1(void) {
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer1Buffers();
 800907c:	f7ff ff6a 	bl	8008f54 <_ZN8QAD_LTDC17flipLayer1BuffersEv>
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method setDrawBuffer()
//Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
//eLayer - Sets whether the current draw buffer is layer 0 or layer1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
void QAS_LCD::imp_setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]

	//Retrieve required Back Buffer pointer based on selected layer and store to m_pDrawBuffer
	switch (eLayer) {
 8009094:	78fb      	ldrb	r3, [r7, #3]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x18>
 800909a:	2b01      	cmp	r3, #1
 800909c:	d006      	beq.n	80090ac <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x24>
 800909e:	e00b      	b.n	80090b8 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer0):
	  	m_pDrawBuffer = QAD_LTDC::getLayer0BackBuffer();
 80090a0:	f7ff ff62 	bl	8008f68 <_ZN8QAD_LTDC19getLayer0BackBufferEv>
 80090a4:	4602      	mov	r2, r0
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	605a      	str	r2, [r3, #4]
	  	break;
 80090aa:	e005      	b.n	80090b8 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer1):
	  	m_pDrawBuffer = QAD_LTDC::getLayer1BackBuffer();
 80090ac:	f7ff ff67 	bl	8008f7e <_ZN8QAD_LTDC19getLayer1BackBufferEv>
 80090b0:	4602      	mov	r2, r0
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	605a      	str	r2, [r3, #4]
	  	break;
 80090b6:	bf00      	nop
	}

	//Set currently selected draw buffer to Font Manager as well, to be used for text rendering methods
	m_cFontMgr.setDrawBuffer(m_pDrawBuffer);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f103 020c 	add.w	r2, r3, #12
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	4619      	mov	r1, r3
 80090c4:	4610      	mov	r0, r2
 80090c6:	f000 faef 	bl	80096a8 <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>
}
 80090ca:	bf00      	nop
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <_ZN7QAS_LCD16imp_setDrawColorEt>:
//QAS_LCD::imp_setDrawColor
//QAS_LCD Rendering Setup Method
//
//To be called from either of the two static setDrawColor() methods
//Sets the current color to be used for rendering methods
void QAS_LCD::imp_setDrawColor(uint16_t uColor) {
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	460b      	mov	r3, r1
 80090dc:	807b      	strh	r3, [r7, #2]

	//Store new draw color
	m_uDrawColor = uColor;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	887a      	ldrh	r2, [r7, #2]
 80090e2:	811a      	strh	r2, [r3, #8]

	//Set currently selected draw color to Font Manager as well, to be used for text rendering methods
  m_cFontMgr.setDrawColor(m_uDrawColor);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f103 020c 	add.w	r2, r3, #12
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	891b      	ldrh	r3, [r3, #8]
 80090ee:	4619      	mov	r1, r3
 80090f0:	4610      	mov	r0, r2
 80090f2:	f000 fae7 	bl	80096c4 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>
}
 80090f6:	bf00      	nop
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
	...

08009100 <_ZN7QAS_LCD15imp_clearBufferEv>:
//QAS_LCD::imp_clearBuffer
//QAS_LCD Rendering Method
//
//To be called from static clearBuffer() method
//Used to clear the currently selected buffer to the currently selected draw color
void QAS_LCD::imp_clearBuffer(void) {
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 8009108:	2300      	movs	r3, #0
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4a0b      	ldr	r2, [pc, #44]	; (800913c <_ZN7QAS_LCD15imp_clearBufferEv+0x3c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d80e      	bhi.n	8009132 <_ZN7QAS_LCD15imp_clearBufferEv+0x32>
  	m_pDrawBuffer->pixel[i] = m_uDrawColor;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685a      	ldr	r2, [r3, #4]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	005b      	lsls	r3, r3, #1
 800911c:	441a      	add	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	3308      	adds	r3, #8
 8009122:	4619      	mov	r1, r3
 8009124:	4610      	mov	r0, r2
 8009126:	f7ff fee1 	bl	8008eec <_ZN18QAT_Pixel_ARGB4444aSERKt>
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	3301      	adds	r3, #1
 800912e:	60fb      	str	r3, [r7, #12]
 8009130:	e7ec      	b.n	800910c <_ZN7QAS_LCD15imp_clearBufferEv+0xc>
}
 8009132:	bf00      	nop
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	0005dbff 	.word	0x0005dbff

08009140 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>:
//
//To be called by static drawRect() method
//Used to draw a non-filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
void QAS_LCD::imp_drawRect(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 8009140:	b580      	push	{r7, lr}
 8009142:	b08c      	sub	sp, #48	; 0x30
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	881a      	ldrh	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d206      	bcs.n	8009166 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	62bb      	str	r3, [r7, #40]	; 0x28
 8009164:	e005      	b.n	8009172 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.x;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.x;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	885a      	ldrh	r2, [r3, #2]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	885b      	ldrh	r3, [r3, #2]
 800917a:	429a      	cmp	r2, r3
 800917c:	d206      	bcs.n	800918c <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	885b      	ldrh	r3, [r3, #2]
 8009182:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	885b      	ldrh	r3, [r3, #2]
 8009188:	623b      	str	r3, [r7, #32]
 800918a:	e005      	b.n	8009198 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	885b      	ldrh	r3, [r3, #2]
 8009190:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	885b      	ldrh	r3, [r3, #2]
 8009196:	623b      	str	r3, [r7, #32]
  }

  //Top & Bottom
  uint32_t yt = ys*QAD_LTDC_WIDTH;
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800919e:	fb02 f303 	mul.w	r3, r2, r3
 80091a2:	617b      	str	r3, [r7, #20]
  uint32_t yb = ye*QAD_LTDC_WIDTH;
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80091aa:	fb02 f303 	mul.w	r3, r2, r3
 80091ae:	613b      	str	r3, [r7, #16]
  for (uint32_t x=xs; x<(xe+1); x++) {
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	61fb      	str	r3, [r7, #28]
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	3301      	adds	r3, #1
 80091b8:	69fa      	ldr	r2, [r7, #28]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d21d      	bcs.n	80091fa <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xba>
    m_pDrawBuffer->pixel[x+yt].pxl(m_uDrawColor);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	69f9      	ldr	r1, [r7, #28]
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	440b      	add	r3, r1
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	441a      	add	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	891b      	ldrh	r3, [r3, #8]
 80091d0:	4619      	mov	r1, r3
 80091d2:	4610      	mov	r0, r2
 80091d4:	f7ff fe9a 	bl	8008f0c <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[x+yb].pxl(m_uDrawColor);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	69f9      	ldr	r1, [r7, #28]
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	440b      	add	r3, r1
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	441a      	add	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	891b      	ldrh	r3, [r3, #8]
 80091ea:	4619      	mov	r1, r3
 80091ec:	4610      	mov	r0, r2
 80091ee:	f7ff fe8d 	bl	8008f0c <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t x=xs; x<(xe+1); x++) {
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	3301      	adds	r3, #1
 80091f6:	61fb      	str	r3, [r7, #28]
 80091f8:	e7dc      	b.n	80091b4 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x74>
  }

  //Left & Right
  for (uint32_t y=(ys+1); y<ye; y++) {
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	3301      	adds	r3, #1
 80091fe:	61bb      	str	r3, [r7, #24]
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	429a      	cmp	r2, r3
 8009206:	d225      	bcs.n	8009254 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x114>
    m_pDrawBuffer->pixel[xs+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009212:	fb01 f103 	mul.w	r1, r1, r3
 8009216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009218:	440b      	add	r3, r1
 800921a:	005b      	lsls	r3, r3, #1
 800921c:	441a      	add	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	891b      	ldrh	r3, [r3, #8]
 8009222:	4619      	mov	r1, r3
 8009224:	4610      	mov	r0, r2
 8009226:	f7ff fe71 	bl	8008f0c <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[xe+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009234:	fb01 f103 	mul.w	r1, r1, r3
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	440b      	add	r3, r1
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	441a      	add	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	891b      	ldrh	r3, [r3, #8]
 8009244:	4619      	mov	r1, r3
 8009246:	4610      	mov	r0, r2
 8009248:	f7ff fe60 	bl	8008f0c <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t y=(ys+1); y<ye; y++) {
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	3301      	adds	r3, #1
 8009250:	61bb      	str	r3, [r7, #24]
 8009252:	e7d5      	b.n	8009200 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xc0>
  }
}
 8009254:	bf00      	nop
 8009256:	3730      	adds	r7, #48	; 0x30
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>:
//
//To be called by static drawRectFill() method
//Used to draw a filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
void QAS_LCD::imp_drawRectFill(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 800925c:	b580      	push	{r7, lr}
 800925e:	b08c      	sub	sp, #48	; 0x30
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	881a      	ldrh	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	429a      	cmp	r2, r3
 8009272:	d206      	bcs.n	8009282 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009280:	e005      	b.n	800928e <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.x;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.x;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	885a      	ldrh	r2, [r3, #2]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	885b      	ldrh	r3, [r3, #2]
 8009296:	429a      	cmp	r2, r3
 8009298:	d206      	bcs.n	80092a8 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	885b      	ldrh	r3, [r3, #2]
 800929e:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	885b      	ldrh	r3, [r3, #2]
 80092a4:	623b      	str	r3, [r7, #32]
 80092a6:	e005      	b.n	80092b4 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	885b      	ldrh	r3, [r3, #2]
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	885b      	ldrh	r3, [r3, #2]
 80092b2:	623b      	str	r3, [r7, #32]
  }

  uint32_t yofs;
  for (uint32_t y=ys; y<(ye+1); y++) {
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	61fb      	str	r3, [r7, #28]
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	3301      	adds	r3, #1
 80092bc:	69fa      	ldr	r2, [r7, #28]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d221      	bcs.n	8009306 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xaa>
    yofs = y*QAD_LTDC_WIDTH;
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80092c8:	fb02 f303 	mul.w	r3, r2, r3
 80092cc:	617b      	str	r3, [r7, #20]
    for (uint32_t x=xs; x<(xe+1); x++) {
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	61bb      	str	r3, [r7, #24]
 80092d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d4:	3301      	adds	r3, #1
 80092d6:	69ba      	ldr	r2, [r7, #24]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d210      	bcs.n	80092fe <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xa2>
      m_pDrawBuffer->pixel[x+yofs].pxl(m_uDrawColor);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	69b9      	ldr	r1, [r7, #24]
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	440b      	add	r3, r1
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	441a      	add	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	891b      	ldrh	r3, [r3, #8]
 80092ee:	4619      	mov	r1, r3
 80092f0:	4610      	mov	r0, r2
 80092f2:	f7ff fe0b 	bl	8008f0c <_ZN18QAT_Pixel_ARGB44443pxlEt>
    for (uint32_t x=xs; x<(xe+1); x++) {
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	3301      	adds	r3, #1
 80092fa:	61bb      	str	r3, [r7, #24]
 80092fc:	e7e9      	b.n	80092d2 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x76>
  for (uint32_t y=ys; y<(ye+1); y++) {
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	3301      	adds	r3, #1
 8009302:	61fb      	str	r3, [r7, #28]
 8009304:	e7d8      	b.n	80092b8 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x5c>
    }
  }
}
 8009306:	bf00      	nop
 8009308:	3730      	adds	r7, #48	; 0x30
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	4618      	mov	r0, r3
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>:
	QAS_LCD_Font(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t& uHeight, uint16_t& uSpaceWidth, uint16_t& uCharGap) :
 8009326:	b580      	push	{r7, lr}
 8009328:	b086      	sub	sp, #24
 800932a:	af00      	add	r7, sp, #0
 800932c:	60f8      	str	r0, [r7, #12]
 800932e:	60b9      	str	r1, [r7, #8]
 8009330:	607a      	str	r2, [r7, #4]
 8009332:	603b      	str	r3, [r7, #0]
		m_uCharGap(uCharGap) {
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	881a      	ldrh	r2, [r3, #0]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	871a      	strh	r2, [r3, #56]	; 0x38
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	881a      	ldrh	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	875a      	strh	r2, [r3, #58]	; 0x3a
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	881a      	ldrh	r2, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	879a      	strh	r2, [r3, #60]	; 0x3c
		m_pDesc = (QAS_LCD_FontDesc*)pDesc;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	631a      	str	r2, [r3, #48]	; 0x30
		m_pData = (uint8_t*)pData;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	635a      	str	r2, [r3, #52]	; 0x34
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 8009358:	2300      	movs	r3, #0
 800935a:	75fb      	strb	r3, [r7, #23]
 800935c:	7dfb      	ldrb	r3, [r7, #23]
 800935e:	2b2f      	cmp	r3, #47	; 0x2f
 8009360:	d807      	bhi.n	8009372 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x4c>
			m_cName[i] = 0;
 8009362:	7dfb      	ldrb	r3, [r7, #23]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	2100      	movs	r1, #0
 8009368:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	3301      	adds	r3, #1
 800936e:	75fb      	strb	r3, [r7, #23]
 8009370:	e7f4      	b.n	800935c <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x36>
		strcpy(m_cName, strName);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	68b9      	ldr	r1, [r7, #8]
 8009376:	4618      	mov	r0, r3
 8009378:	f001 fb78 	bl	800aa6c <strcpy>
	}
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4618      	mov	r0, r3
 8009380:	3718      	adds	r7, #24
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <_ZN12QAS_LCD_FonteqEPKc>:
	bool operator==(const char* strName) {
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	6039      	str	r1, [r7, #0]
		uint8_t uLen = strlen(strName);
 8009390:	6838      	ldr	r0, [r7, #0]
 8009392:	f7f6 ff55 	bl	8000240 <strlen>
 8009396:	4603      	mov	r3, r0
 8009398:	73bb      	strb	r3, [r7, #14]
		uint8_t uIdxLen = (uLen < QAS_LCD_FONTNAME_LENGTH) ? uLen : QAS_LCD_FONTNAME_LENGTH;
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	2b30      	cmp	r3, #48	; 0x30
 800939e:	bf28      	it	cs
 80093a0:	2330      	movcs	r3, #48	; 0x30
 80093a2:	737b      	strb	r3, [r7, #13]
		for (uint8_t i=0; i<uIdxLen; i++) {
 80093a4:	2300      	movs	r3, #0
 80093a6:	73fb      	strb	r3, [r7, #15]
 80093a8:	7bfa      	ldrb	r2, [r7, #15]
 80093aa:	7b7b      	ldrb	r3, [r7, #13]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d20e      	bcs.n	80093ce <_ZN12QAS_LCD_FonteqEPKc+0x48>
			if (m_cName[i] != strName[i])
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	5cd2      	ldrb	r2, [r2, r3]
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	440b      	add	r3, r1
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d001      	beq.n	80093c6 <_ZN12QAS_LCD_FonteqEPKc+0x40>
				return false;
 80093c2:	2300      	movs	r3, #0
 80093c4:	e004      	b.n	80093d0 <_ZN12QAS_LCD_FonteqEPKc+0x4a>
		for (uint8_t i=0; i<uIdxLen; i++) {
 80093c6:	7bfb      	ldrb	r3, [r7, #15]
 80093c8:	3301      	adds	r3, #1
 80093ca:	73fb      	strb	r3, [r7, #15]
 80093cc:	e7ec      	b.n	80093a8 <_ZN12QAS_LCD_FonteqEPKc+0x22>
		return true;
 80093ce:	2301      	movs	r3, #1
	}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>:
//pDesc       - a pointer to an array of QAS_LCD_FontDesc structures for the font
//pData       - a pointer to an array of uint8_t values storing the bitmap data for the font
//uHeight     - the height in pixels of the font
//uSpaceWidth - the width in pixels of the space character of the font
//uCharGap    - the width in pixels of the gap between each character when rendering strings of characters
void QAS_LCD_FontMgr::add(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t uHeight, uint16_t uSpaceWidth, uint16_t uCharGap) {
 80093d8:	b590      	push	{r4, r7, lr}
 80093da:	b08b      	sub	sp, #44	; 0x2c
 80093dc:	af04      	add	r7, sp, #16
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
 80093e4:	603b      	str	r3, [r7, #0]

	//Create the QAS_LCD_Font class for the new font, providing the required details
	QAS_LCD_Font* cFont = new QAS_LCD_Font(strName, pDesc, pData, uHeight, uSpaceWidth, uCharGap);
 80093e6:	2040      	movs	r0, #64	; 0x40
 80093e8:	f001 f974 	bl	800a6d4 <_Znwj>
 80093ec:	4603      	mov	r3, r0
 80093ee:	461c      	mov	r4, r3
 80093f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80093f4:	9302      	str	r3, [sp, #8]
 80093f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093fa:	9301      	str	r3, [sp, #4]
 80093fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	68b9      	ldr	r1, [r7, #8]
 8009408:	4620      	mov	r0, r4
 800940a:	f7ff ff8c 	bl	8009326 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>
 800940e:	617c      	str	r4, [r7, #20]

	//Add the pointer to the font class to the m_vFonts vector
  m_vFonts.push_back(cFont);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f107 0214 	add.w	r2, r7, #20
 8009416:	4611      	mov	r1, r2
 8009418:	4618      	mov	r0, r3
 800941a:	f000 fa56 	bl	80098ca <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>
}
 800941e:	bf00      	nop
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	bd90      	pop	{r4, r7, pc}

08009426 <_ZN15QAS_LCD_FontMgr5clearEv>:

//QAS_LCD_FontMgr::clear
//QAS_LCD_FontMgr Management Method
//
//Used to clear all fonts from the font manager
void QAS_LCD_FontMgr::clear(void) {
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  m_vFonts.clear();
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4618      	mov	r0, r3
 8009432:	f7f8 fc76 	bl	8001d22 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
}
 8009436:	bf00      	nop
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <_ZN15QAS_LCD_FontMgr4findEPKc>:
//QAS_LCD_FontMgr Management Method
//
//Used to find if a font exists in the Font Manager
//strName - The name of the font to search for
//Returns -1 if a matching font is not found, or the index of the font if it is gound
int8_t QAS_LCD_FontMgr::find(const char* strName) {
 800943e:	b590      	push	{r4, r7, lr}
 8009440:	b085      	sub	sp, #20
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	6039      	str	r1, [r7, #0]
  int8_t iIdx = -1;
 8009448:	23ff      	movs	r3, #255	; 0xff
 800944a:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 800944c:	2300      	movs	r3, #0
 800944e:	73bb      	strb	r3, [r7, #14]
 8009450:	7bbc      	ldrb	r4, [r7, #14]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4618      	mov	r0, r3
 8009456:	f7f8 fc72 	bl	8001d3e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800945a:	4603      	mov	r3, r0
 800945c:	429c      	cmp	r4, r3
 800945e:	bf34      	ite	cc
 8009460:	2301      	movcc	r3, #1
 8009462:	2300      	movcs	r3, #0
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d014      	beq.n	8009494 <_ZN15QAS_LCD_FontMgr4findEPKc+0x56>
  	if (*m_vFonts[i] == strName) {
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	7bba      	ldrb	r2, [r7, #14]
 800946e:	4611      	mov	r1, r2
 8009470:	4618      	mov	r0, r3
 8009472:	f7f8 fc74 	bl	8001d5e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8009476:	4603      	mov	r3, r0
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	4618      	mov	r0, r3
 800947e:	f7ff ff82 	bl	8009386 <_ZN12QAS_LCD_FonteqEPKc>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <_ZN15QAS_LCD_FontMgr4findEPKc+0x4e>
  		iIdx = i;
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 800948c:	7bbb      	ldrb	r3, [r7, #14]
 800948e:	3301      	adds	r3, #1
 8009490:	73bb      	strb	r3, [r7, #14]
 8009492:	e7dd      	b.n	8009450 <_ZN15QAS_LCD_FontMgr4findEPKc+0x12>
  	}
  return iIdx;
 8009494:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	bd90      	pop	{r4, r7, pc}

080094a0 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>:
//QAS_LCD_FontMgr::setFontByName
//QAS_LCD_FontMgr Management Method
//
//Used to set the current selected font
//strName - The name of the font to select
void QAS_LCD_FontMgr::setFontByName(const char* strName) {
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]

	//Search for matching font
	int8_t iIdx = find(strName);
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff ffc6 	bl	800943e <_ZN15QAS_LCD_FontMgr4findEPKc>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]

	//If no matching font is found then set current font to none
  if (iIdx < 0) {
 80094b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	da06      	bge.n	80094cc <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x2c>
  	m_iCurrentIdx = -1;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	22ff      	movs	r2, #255	; 0xff
 80094c2:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	611a      	str	r2, [r3, #16]
  	return;
 80094ca:	e00d      	b.n	80094e8 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x48>
  }

  //If a matching font is found then set details as required
  m_iCurrentIdx = iIdx;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	7bfa      	ldrb	r2, [r7, #15]
 80094d0:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[iIdx];
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80094d8:	4611      	mov	r1, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f7f8 fc3f 	bl	8001d5e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 80094e0:	4603      	mov	r3, r0
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	611a      	str	r2, [r3, #16]
}
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>:
//QAS_LCD_FontMgr::setFontByIndex
//QAS_LCD_FontMgr Management Method
//
//Used to set the currently selected font
//uIdx - The index of the font to select
void QAS_LCD_FontMgr::setFontByIndex(uint8_t uIdx) {
 80094ee:	b590      	push	{r4, r7, lr}
 80094f0:	b083      	sub	sp, #12
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	70fb      	strb	r3, [r7, #3]

	//If uIdx is outside of the range of fonts currently stored in m_vFonts index then set current font to none
  if (uIdx >= m_vFonts.size()) {
 80094fa:	78fc      	ldrb	r4, [r7, #3]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4618      	mov	r0, r3
 8009500:	f7f8 fc1d 	bl	8001d3e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8009504:	4603      	mov	r3, r0
 8009506:	429c      	cmp	r4, r3
 8009508:	bf2c      	ite	cs
 800950a:	2301      	movcs	r3, #1
 800950c:	2300      	movcc	r3, #0
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b00      	cmp	r3, #0
 8009512:	d006      	beq.n	8009522 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x34>
  	m_iCurrentIdx = -1;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	22ff      	movs	r2, #255	; 0xff
 8009518:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	611a      	str	r2, [r3, #16]
  	return;
 8009520:	e00d      	b.n	800953e <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x50>
  }

  //Set current font details as required
  m_iCurrentIdx = uIdx;
 8009522:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[uIdx];
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	78fa      	ldrb	r2, [r7, #3]
 800952e:	4611      	mov	r1, r2
 8009530:	4618      	mov	r0, r3
 8009532:	f7f8 fc14 	bl	8001d5e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8009536:	4603      	mov	r3, r0
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	611a      	str	r2, [r3, #16]
}
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	bd90      	pop	{r4, r7, pc}

08009544 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>:

//QAS_LCD_FontMgr::getSpaceWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of the space character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getSpaceWidth(void) const {
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	da01      	bge.n	800955a <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x16>
		return 0;
 8009556:	2300      	movs	r3, #0
 8009558:	e003      	b.n	8009562 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x1e>
	return m_pCurrent->m_uSpaceWidth;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8009560:	b2db      	uxtb	r3, r3
}
 8009562:	4618      	mov	r0, r3
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <_ZNK15QAS_LCD_FontMgr10getCharGapEv>:

//QAS_LCD_FontMgr::getCharGap
//QAS_LCD_FontMgr Data Methods
//
//Returns the width is pixels of the gap between each character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getCharGap(void) const {
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	da01      	bge.n	8009584 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x16>
		return 0;
 8009580:	2300      	movs	r3, #0
 8009582:	e003      	b.n	800958c <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x1e>
	return m_pCurrent->m_uCharGap;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800958a:	b2db      	uxtb	r3, r3
}
 800958c:	4618      	mov	r0, r3
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <_ZN15QAS_LCD_FontMgr12getCharWidthEc>:
//QAS_LCD_FontMgr::getCharWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of a specific character for the currently selected font.
//If no font is currently selected, or an invalid character is selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getCharWidth(char ch) {
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  if (m_iCurrentIdx < 0)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	da01      	bge.n	80095b2 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x1a>
    return 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	e01a      	b.n	80095e8 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x50>
  uint16_t uWidth = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	81fb      	strh	r3, [r7, #14]
  if (ch == 32) {
 80095b6:	78fb      	ldrb	r3, [r7, #3]
 80095b8:	2b20      	cmp	r3, #32
 80095ba:	d104      	bne.n	80095c6 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x2e>
    uWidth = m_pCurrent->m_uSpaceWidth;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80095c2:	81fb      	strh	r3, [r7, #14]
 80095c4:	e00f      	b.n	80095e6 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
  } else if ((ch >= 33) && (ch <= 126)) {
 80095c6:	78fb      	ldrb	r3, [r7, #3]
 80095c8:	2b20      	cmp	r3, #32
 80095ca:	d90c      	bls.n	80095e6 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	2b7e      	cmp	r3, #126	; 0x7e
 80095d0:	d809      	bhi.n	80095e6 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
    uWidth = m_pCurrent->m_pDesc[ch-33].uWidth;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095d8:	78f9      	ldrb	r1, [r7, #3]
 80095da:	4b06      	ldr	r3, [pc, #24]	; (80095f4 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x5c>)
 80095dc:	440b      	add	r3, r1
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	81fb      	strh	r3, [r7, #14]
  }
  return uWidth;
 80095e6:	89fb      	ldrh	r3, [r7, #14]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	3fffffdf 	.word	0x3fffffdf

080095f8 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>:
//QAS_LCD_FontMgr::getStringWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns is width in pixels for a specific C-style string based on the currently selected font.
//If no font is currently selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getStringWidth(const char* str) {
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  uint16_t uWidth = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	81fb      	strh	r3, [r7, #14]
  uint16_t uLength = strlen(str);
 8009606:	6838      	ldr	r0, [r7, #0]
 8009608:	f7f6 fe1a 	bl	8000240 <strlen>
 800960c:	4603      	mov	r3, r0
 800960e:	817b      	strh	r3, [r7, #10]
  uint8_t  uChar;

  if ((uLength == 0) || (m_iCurrentIdx < 0))
 8009610:	897b      	ldrh	r3, [r7, #10]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d004      	beq.n	8009620 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x28>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	da01      	bge.n	8009624 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x2c>
    return uWidth;
 8009620:	89fb      	ldrh	r3, [r7, #14]
 8009622:	e03b      	b.n	800969c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xa4>

  for (uint8_t i=0; i<uLength; i++) {
 8009624:	2300      	movs	r3, #0
 8009626:	737b      	strb	r3, [r7, #13]
 8009628:	7b7a      	ldrb	r2, [r7, #13]
 800962a:	897b      	ldrh	r3, [r7, #10]
 800962c:	429a      	cmp	r2, r3
 800962e:	da2e      	bge.n	800968e <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x96>
    uChar = (uint8_t)str[i];
 8009630:	7b7b      	ldrb	r3, [r7, #13]
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	4413      	add	r3, r2
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	727b      	strb	r3, [r7, #9]
    if (uChar == 32) {
 800963a:	7a7b      	ldrb	r3, [r7, #9]
 800963c:	2b20      	cmp	r3, #32
 800963e:	d10b      	bne.n	8009658 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x60>
      uWidth += (m_pCurrent->m_uSpaceWidth + m_pCurrent->m_uCharGap);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800964c:	4413      	add	r3, r2
 800964e:	b29a      	uxth	r2, r3
 8009650:	89fb      	ldrh	r3, [r7, #14]
 8009652:	4413      	add	r3, r2
 8009654:	81fb      	strh	r3, [r7, #14]
 8009656:	e016      	b.n	8009686 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
    } else if ((uChar >= 33) && (uChar <= 126)) {
 8009658:	7a7b      	ldrb	r3, [r7, #9]
 800965a:	2b20      	cmp	r3, #32
 800965c:	d913      	bls.n	8009686 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
 800965e:	7a7b      	ldrb	r3, [r7, #9]
 8009660:	2b7e      	cmp	r3, #126	; 0x7e
 8009662:	d810      	bhi.n	8009686 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
      uWidth += (m_pCurrent->m_pDesc[uChar-33].uWidth + m_pCurrent->m_uCharGap);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800966a:	7a79      	ldrb	r1, [r7, #9]
 800966c:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xac>)
 800966e:	440b      	add	r3, r1
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	881a      	ldrh	r2, [r3, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800967c:	4413      	add	r3, r2
 800967e:	b29a      	uxth	r2, r3
 8009680:	89fb      	ldrh	r3, [r7, #14]
 8009682:	4413      	add	r3, r2
 8009684:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i=0; i<uLength; i++) {
 8009686:	7b7b      	ldrb	r3, [r7, #13]
 8009688:	3301      	adds	r3, #1
 800968a:	737b      	strb	r3, [r7, #13]
 800968c:	e7cc      	b.n	8009628 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x30>
    }
  }
  uWidth -= m_pCurrent->m_uCharGap;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8009694:	89fa      	ldrh	r2, [r7, #14]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	81fb      	strh	r3, [r7, #14]
  return uWidth;
 800969a:	89fb      	ldrh	r3, [r7, #14]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	3fffffdf 	.word	0x3fffffdf

080096a8 <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>:
//QAS_LCD_FontMgr::setDrawBuffer
//QAS_LCD_FontMgr Data Methods
//
//Sets the current frame buffer for text to be rendered to
//This method is to be called by QAS_LCD::imp_SetDrawBuffer() method
void QAS_LCD_FontMgr::setDrawBuffer(QAD_LTDC_Buffer* pBuffer) {
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  m_pBuffer = pBuffer;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	615a      	str	r2, [r3, #20]
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>:
//QAS_LCD_FontMgr::setDrawColor
//QAS_LCD_FontMgr Data Methods
//
//Sets the current color for text rendering
//This method is to be called by QAS_LCD::imp_setDrawColor() method
void QAS_LCD_FontMgr::setDrawColor(uint16_t uColor) {
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	460b      	mov	r3, r1
 80096ce:	807b      	strh	r3, [r7, #2]
  m_uColor = uColor;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	887a      	ldrh	r2, [r7, #2]
 80096d4:	831a      	strh	r2, [r3, #24]
}
 80096d6:	bf00      	nop
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>:
//
//Used to draw a center-aligned string of characters using the currently selected font/typeface
//String will be drawn to currently selected draw buffer with currently selected draw color
//cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
//str  - The C-style string to be drawn
void QAS_LCD_FontMgr::drawStrC(QAT_Vector2_16 cPos, const char* str) {
 80096e2:	b590      	push	{r4, r7, lr}
 80096e4:	b089      	sub	sp, #36	; 0x24
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	60b9      	str	r1, [r7, #8]
 80096ec:	607a      	str	r2, [r7, #4]
  if ((m_pBuffer == NULL) || (m_iCurrentIdx < 0))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d067      	beq.n	80097c6 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	db62      	blt.n	80097c6 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
    return;

  uint8_t uLen = strlen(str);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7f6 fd9d 	bl	8000240 <strlen>
 8009706:	4603      	mov	r3, r0
 8009708:	77bb      	strb	r3, [r7, #30]
  if (uLen < 0) return;

  QAT_Vector2_16 cDrawPos = cPos;
 800970a:	f107 0314 	add.w	r3, r7, #20
 800970e:	68b9      	ldr	r1, [r7, #8]
 8009710:	4618      	mov	r0, r3
 8009712:	f7f7 fba2 	bl	8000e5a <_ZN14QAT_Vector2_16C1ERKS_>
  cDrawPos.x -= (getStringWidth(str) / 2);
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f7ff ff6d 	bl	80095f8 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>
 800971e:	4603      	mov	r3, r0
 8009720:	085b      	lsrs	r3, r3, #1
 8009722:	b29b      	uxth	r3, r3
 8009724:	8aba      	ldrh	r2, [r7, #20]
 8009726:	b29b      	uxth	r3, r3
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	b29b      	uxth	r3, r3
 800972c:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 800972e:	2300      	movs	r3, #0
 8009730:	77fb      	strb	r3, [r7, #31]
 8009732:	7ffa      	ldrb	r2, [r7, #31]
 8009734:	7fbb      	ldrb	r3, [r7, #30]
 8009736:	429a      	cmp	r2, r3
 8009738:	d246      	bcs.n	80097c8 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe6>
  	if ((str[i] >= 33) && (str[i] <= 126)) {
 800973a:	7ffb      	ldrb	r3, [r7, #31]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	4413      	add	r3, r2
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	2b20      	cmp	r3, #32
 8009744:	d92c      	bls.n	80097a0 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
 8009746:	7ffb      	ldrb	r3, [r7, #31]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	4413      	add	r3, r2
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	2b7e      	cmp	r3, #126	; 0x7e
 8009750:	d826      	bhi.n	80097a0 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
      drawCharP(cDrawPos, str[i]);
 8009752:	f107 0214 	add.w	r2, r7, #20
 8009756:	f107 0318 	add.w	r3, r7, #24
 800975a:	4611      	mov	r1, r2
 800975c:	4618      	mov	r0, r3
 800975e:	f7f7 fb7c 	bl	8000e5a <_ZN14QAT_Vector2_16C1ERKS_>
 8009762:	7ffb      	ldrb	r3, [r7, #31]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	4413      	add	r3, r2
 8009768:	781a      	ldrb	r2, [r3, #0]
 800976a:	f107 0318 	add.w	r3, r7, #24
 800976e:	4619      	mov	r1, r3
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 f82c 	bl	80097ce <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>
      cDrawPos.x += getCharWidth(str[i]) + getCharGap();
 8009776:	7ffb      	ldrb	r3, [r7, #31]
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	4413      	add	r3, r2
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	4619      	mov	r1, r3
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f7ff ff09 	bl	8009598 <_ZN15QAS_LCD_FontMgr12getCharWidthEc>
 8009786:	4603      	mov	r3, r0
 8009788:	461c      	mov	r4, r3
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f7ff feef 	bl	800956e <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 8009790:	4603      	mov	r3, r0
 8009792:	4423      	add	r3, r4
 8009794:	8aba      	ldrh	r2, [r7, #20]
 8009796:	b29b      	uxth	r3, r3
 8009798:	4413      	add	r3, r2
 800979a:	b29b      	uxth	r3, r3
 800979c:	82bb      	strh	r3, [r7, #20]
 800979e:	e00e      	b.n	80097be <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xdc>
  	} else {
  		cDrawPos.x += getSpaceWidth() + getCharGap();
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f7ff fecf 	bl	8009544 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>
 80097a6:	4603      	mov	r3, r0
 80097a8:	461c      	mov	r4, r3
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f7ff fedf 	bl	800956e <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 80097b0:	4603      	mov	r3, r0
 80097b2:	4423      	add	r3, r4
 80097b4:	8aba      	ldrh	r2, [r7, #20]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	4413      	add	r3, r2
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 80097be:	7ffb      	ldrb	r3, [r7, #31]
 80097c0:	3301      	adds	r3, #1
 80097c2:	77fb      	strb	r3, [r7, #31]
 80097c4:	e7b5      	b.n	8009732 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0x50>
    return;
 80097c6:	bf00      	nop
  	}
  }
}
 80097c8:	3724      	adds	r7, #36	; 0x24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd90      	pop	{r4, r7, pc}

080097ce <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>:
//QAS_LCD_FontMgr::drawCharP
//QAS_LCD_FontMgr Private Rendering Method
//
//Used to draw an individual character based on selected font's bitmap data
//This method is to be used by drawChar(), drawStrL(), drawStrC() and drawStrR() methods
void QAS_LCD_FontMgr::drawCharP(QAT_Vector2_16 cPos, char ch) {
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b08a      	sub	sp, #40	; 0x28
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	60f8      	str	r0, [r7, #12]
 80097d6:	60b9      	str	r1, [r7, #8]
 80097d8:	4613      	mov	r3, r2
 80097da:	71fb      	strb	r3, [r7, #7]
  uint16_t uLetter = (uint8_t)ch - 33;
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	b29b      	uxth	r3, r3
 80097e0:	3b21      	subs	r3, #33	; 0x21
 80097e2:	83bb      	strh	r3, [r7, #28]
  uint16_t uWidth  = m_pCurrent->m_pDesc[uLetter].uWidth;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ea:	8bbb      	ldrh	r3, [r7, #28]
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	837b      	strh	r3, [r7, #26]
  uint32_t uOffset = m_pCurrent->m_pDesc[uLetter].uOffset;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097fa:	8bbb      	ldrh	r3, [r7, #28]
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	885b      	ldrh	r3, [r3, #2]
 8009802:	627b      	str	r3, [r7, #36]	; 0x24

  uint8_t uLine;
  uint8_t uLineInc;
  uint32_t uCur;

  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 8009804:	2300      	movs	r3, #0
 8009806:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800980a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	6912      	ldr	r2, [r2, #16]
 8009812:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8009814:	4293      	cmp	r3, r2
 8009816:	da54      	bge.n	80098c2 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xf4>
    uLineInc = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uCur = cPos.x+((cPos.y+uHeight)*QAD_LTDC_WIDTH);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	4619      	mov	r1, r3
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	885b      	ldrh	r3, [r3, #2]
 8009828:	461a      	mov	r2, r3
 800982a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800982e:	4413      	add	r3, r2
 8009830:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009834:	fb02 f303 	mul.w	r3, r2, r3
 8009838:	440b      	add	r3, r1
 800983a:	617b      	str	r3, [r7, #20]
    for (uint16_t i=0; i<uWidth; i++) {
 800983c:	2300      	movs	r3, #0
 800983e:	83fb      	strh	r3, [r7, #30]
 8009840:	8bfa      	ldrh	r2, [r7, #30]
 8009842:	8b7b      	ldrh	r3, [r7, #26]
 8009844:	429a      	cmp	r2, r3
 8009846:	d236      	bcs.n	80098b6 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe8>
      if (uLineInc == 0) {
 8009848:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10a      	bne.n	8009866 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x98>
        uLine = m_pCurrent->m_pData[uOffset];
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	4413      	add	r3, r2
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uOffset++;
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	3301      	adds	r3, #1
 8009864:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (uLine & 0x01)
 8009866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00c      	beq.n	800988c <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xbe>
        m_pBuffer->pixel[uCur+i] = m_uColor;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	695a      	ldr	r2, [r3, #20]
 8009876:	8bf9      	ldrh	r1, [r7, #30]
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	440b      	add	r3, r1
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	441a      	add	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	3318      	adds	r3, #24
 8009884:	4619      	mov	r1, r3
 8009886:	4610      	mov	r0, r2
 8009888:	f7ff fb30 	bl	8008eec <_ZN18QAT_Pixel_ARGB4444aSERKt>
      uLine = uLine >> 1;
 800988c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009890:	105b      	asrs	r3, r3, #1
 8009892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      uLineInc++;
 8009896:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800989a:	3301      	adds	r3, #1
 800989c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (uLineInc > 7)
 80098a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80098a4:	2b07      	cmp	r3, #7
 80098a6:	d902      	bls.n	80098ae <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe0>
        uLineInc = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    for (uint16_t i=0; i<uWidth; i++) {
 80098ae:	8bfb      	ldrh	r3, [r7, #30]
 80098b0:	3301      	adds	r3, #1
 80098b2:	83fb      	strh	r3, [r7, #30]
 80098b4:	e7c4      	b.n	8009840 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x72>
  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 80098b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80098ba:	3301      	adds	r3, #1
 80098bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80098c0:	e7a3      	b.n	800980a <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x3c>
    }
  }
}
 80098c2:	bf00      	nop
 80098c4:	3728      	adds	r7, #40	; 0x28
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685a      	ldr	r2, [r3, #4]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d00c      	beq.n	80098fa <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	4619      	mov	r1, r3
 80098ea:	f000 f823 	bl	8009934 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	1d1a      	adds	r2, r3, #4
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	605a      	str	r2, [r3, #4]
      }
 80098f8:	e008      	b.n	800990c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f82d 	bl	800995a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>
 8009900:	4603      	mov	r3, r0
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f84e 	bl	80099a8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800990c:	bf00      	nop
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	f107 030c 	add.w	r3, r7, #12
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f000 f8fb 	bl	8009b20 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f908 	bl	8009b56 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8009946:	4603      	mov	r3, r0
 8009948:	461a      	mov	r2, r3
 800994a:	68b9      	ldr	r1, [r7, #8]
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 f90d 	bl	8009b6c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8009952:	bf00      	nop
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	1d1a      	adds	r2, r3, #4
 8009966:	f107 030c 	add.w	r3, r7, #12
 800996a:	4611      	mov	r1, r2
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f8d7 	bl	8009b20 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8009982:	4618      	mov	r0, r3
 8009984:	f000 f805 	bl	8009992 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8009988:	4603      	mov	r3, r0
      }
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8009992:	b480      	push	{r7}
 8009994:	b083      	sub	sp, #12
 8009996:	af00      	add	r7, sp, #0
 8009998:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800999a:	2301      	movs	r3, #1
      }
 800999c:	4618      	mov	r0, r3
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80099a8:	b5b0      	push	{r4, r5, r7, lr}
 80099aa:	b08c      	sub	sp, #48	; 0x30
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80099b4:	4a59      	ldr	r2, [pc, #356]	; (8009b1c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 80099b6:	2101      	movs	r1, #1
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 f8ed 	bl	8009b98 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>
 80099be:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f7ff ffa1 	bl	8009914 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>
 80099d2:	4603      	mov	r3, r0
 80099d4:	617b      	str	r3, [r7, #20]
 80099d6:	f107 0214 	add.w	r2, r7, #20
 80099da:	f107 0308 	add.w	r3, r7, #8
 80099de:	4611      	mov	r1, r2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 f920 	bl	8009c26 <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80099e6:	4603      	mov	r3, r0
 80099e8:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 f92e 	bl	8009c50 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>
 80099f4:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80099fa:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8009a00:	69ba      	ldr	r2, [r7, #24]
 8009a02:	18d5      	adds	r5, r2, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f8a6 	bl	8009b56 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4629      	mov	r1, r5
 8009a10:	4620      	mov	r0, r4
 8009a12:	f7ff ff8f 	bl	8009934 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8009a16:	2300      	movs	r3, #0
 8009a18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8009a1a:	f7ff ffaf 	bl	800997c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d027      	beq.n	8009a74 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009a24:	f107 0308 	add.w	r3, r7, #8
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 f889 	bl	8009b40 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7f8 fa4a 	bl	8001ece <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8009a3a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009a3c:	69ba      	ldr	r2, [r7, #24]
 8009a3e:	4621      	mov	r1, r4
 8009a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a42:	f000 f919 	bl	8009c78 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009a46:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8009a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009a4e:	f107 0308 	add.w	r3, r7, #8
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 f874 	bl	8009b40 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7f8 fa35 	bl	8001ece <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8009a64:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a68:	6a39      	ldr	r1, [r7, #32]
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 f904 	bl	8009c78 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009a70:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009a72:	e026      	b.n	8009ac2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8009a74:	f107 0308 	add.w	r3, r7, #8
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 f861 	bl	8009b40 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7f8 fa22 	bl	8001ece <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8009a8a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	4621      	mov	r1, r4
 8009a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a92:	f000 f905 	bl	8009ca0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 8009a96:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8009a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8009a9e:	f107 0308 	add.w	r3, r7, #8
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 f84c 	bl	8009b40 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7f8 fa0d 	bl	8001ece <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8009ab4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8009ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ab8:	6a39      	ldr	r1, [r7, #32]
 8009aba:	4620      	mov	r0, r4
 8009abc:	f000 f8f0 	bl	8009ca0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 8009ac0:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8009ac2:	f7ff ff5b 	bl	800997c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	f083 0301 	eor.w	r3, r3, #1
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d009      	beq.n	8009ae6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7f8 f9fa 	bl	8001ece <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8009ada:	4603      	mov	r3, r0
 8009adc:	461a      	mov	r2, r3
 8009ade:	6a39      	ldr	r1, [r7, #32]
 8009ae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ae2:	f7f8 f9ff 	bl	8001ee4 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8009ae6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	689a      	ldr	r2, [r3, #8]
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8009af2:	461a      	mov	r2, r3
 8009af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009af6:	f7f8 f9d7 	bl	8001ea8 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	69ba      	ldr	r2, [r7, #24]
 8009afe:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b04:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	69ba      	ldr	r2, [r7, #24]
 8009b0c:	441a      	add	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	609a      	str	r2, [r3, #8]
    }
 8009b12:	bf00      	nop
 8009b14:	3730      	adds	r7, #48	; 0x30
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bdb0      	pop	{r4, r5, r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	0800b474 	.word	0x0800b474

08009b20 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	601a      	str	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4618      	mov	r0, r3
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	370c      	adds	r7, #12
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr

08009b56 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009b56:	b480      	push	{r7}
 8009b58:	b083      	sub	sp, #12
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4618      	mov	r0, r3
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8009b6c:	b590      	push	{r4, r7, lr}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff ffec 	bl	8009b56 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	681c      	ldr	r4, [r3, #0]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	4619      	mov	r1, r3
 8009b86:	2004      	movs	r0, #4
 8009b88:	f7ff fbc1 	bl	800930e <_ZnwjPv>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	601c      	str	r4, [r3, #0]
 8009b90:	bf00      	nop
 8009b92:	3714      	adds	r7, #20
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd90      	pop	{r4, r7, pc}

08009b98 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009b98:	b590      	push	{r4, r7, lr}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f000 f894 	bl	8009cd2 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8009baa:	4604      	mov	r4, r0
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f7f8 f8c6 	bl	8001d3e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	1ae2      	subs	r2, r4, r3
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	bf34      	ite	cc
 8009bbc:	2301      	movcc	r3, #1
 8009bbe:	2300      	movcs	r3, #0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fd9d 	bl	800a706 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f7f8 f8b6 	bl	8001d3e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f7f8 f8b2 	bl	8001d3e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	613b      	str	r3, [r7, #16]
 8009bde:	f107 0208 	add.w	r2, r7, #8
 8009be2:	f107 0310 	add.w	r3, r7, #16
 8009be6:	4611      	mov	r1, r2
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 f883 	bl	8009cf4 <_ZSt3maxIjERKT_S2_S2_>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4423      	add	r3, r4
 8009bf4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f7f8 f8a1 	bl	8001d3e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d306      	bcc.n	8009c12 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f000 f864 	bl	8009cd2 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d904      	bls.n	8009c1c <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x84>
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f000 f85d 	bl	8009cd2 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	e000      	b.n	8009c1e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x86>
 8009c1c:	697b      	ldr	r3, [r7, #20]
      }
 8009c1e:	4618      	mov	r0, r3
 8009c20:	371c      	adds	r7, #28
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd90      	pop	{r4, r7, pc}

08009c26 <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009c26:	b590      	push	{r4, r7, lr}
 8009c28:	b083      	sub	sp, #12
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7ff ff85 	bl	8009b40 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8009c36:	4603      	mov	r3, r0
 8009c38:	681c      	ldr	r4, [r3, #0]
 8009c3a:	6838      	ldr	r0, [r7, #0]
 8009c3c:	f7ff ff80 	bl	8009b40 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8009c40:	4603      	mov	r3, r0
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	1ae3      	subs	r3, r4, r3
 8009c46:	109b      	asrs	r3, r3, #2
 8009c48:	4618      	mov	r0, r3
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd90      	pop	{r4, r7, pc}

08009c50 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d006      	beq.n	8009c6e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x1e>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 f859 	bl	8009d1c <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	e000      	b.n	8009c70 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x20>
 8009c6e:	2300      	movs	r3, #0
      }
 8009c70:	4618      	mov	r0, r3
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8009c78:	b590      	push	{r4, r7, lr}
 8009c7a:	b089      	sub	sp, #36	; 0x24
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
 8009c84:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8009c86:	f88d 4000 	strb.w	r4, [sp]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	68b9      	ldr	r1, [r7, #8]
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f000 f852 	bl	8009d3a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8009c96:	4603      	mov	r3, r0
      }
 8009c98:	4618      	mov	r0, r3
 8009c9a:	371c      	adds	r7, #28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd90      	pop	{r4, r7, pc}

08009ca0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8009ca0:	b590      	push	{r4, r7, lr}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
 8009cac:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f000 f855 	bl	8009d5e <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	68b8      	ldr	r0, [r7, #8]
 8009cb8:	f000 f851 	bl	8009d5e <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 8009cbc:	4601      	mov	r1, r0
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f000 f85a 	bl	8009d7c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8009cc8:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd90      	pop	{r4, r7, pc}

08009cd2 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b082      	sub	sp, #8
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 f878 	bl	8009dd2 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f000 f85a 	bl	8009d9e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>
 8009cea:	4603      	mov	r3, r0
 8009cec:	4618      	mov	r0, r3
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d201      	bcs.n	8009d0e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	e000      	b.n	8009d10 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8009d0e:	687b      	ldr	r3, [r7, #4]
    }
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009d26:	2200      	movs	r2, #0
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 f85c 	bl	8009de8 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>
 8009d30:	4603      	mov	r3, r0
 8009d32:	4618      	mov	r0, r3
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	607a      	str	r2, [r7, #4]
 8009d46:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	68b9      	ldr	r1, [r7, #8]
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f000 f868 	bl	8009e24 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 8009d54:	4603      	mov	r3, r0
      }
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8009d66:	f107 030c 	add.w	r3, r7, #12
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 f876 	bl	8009e5e <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
 8009d88:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	68b9      	ldr	r1, [r7, #8]
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 f874 	bl	8009e7c <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 8009d94:	4603      	mov	r3, r0
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8009da6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009daa:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f889 	bl	8009ec4 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>
 8009db2:	4603      	mov	r3, r0
 8009db4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8009db6:	f107 0208 	add.w	r2, r7, #8
 8009dba:	f107 030c 	add.w	r3, r7, #12
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 f88b 	bl	8009edc <_ZSt3minIjERKT_S2_S2_>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	681b      	ldr	r3, [r3, #0]
      }
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009dd2:	b480      	push	{r7}
 8009dd4:	b083      	sub	sp, #12
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f000 f885 	bl	8009f04 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	bf8c      	ite	hi
 8009e02:	2301      	movhi	r3, #1
 8009e04:	2300      	movls	r3, #0
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8009e0c:	f000 fc78 	bl	800a700 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 fc5d 	bl	800a6d4 <_Znwj>
 8009e1a:	4603      	mov	r3, r0
      }
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8009e24:	b5b0      	push	{r4, r5, r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 f872 	bl	8009f1c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8009e38:	4604      	mov	r4, r0
 8009e3a:	68b8      	ldr	r0, [r7, #8]
 8009e3c:	f000 f86e 	bl	8009f1c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8009e40:	4605      	mov	r5, r0
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f86a 	bl	8009f1c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f000 f86f 	bl	8009f32 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8009e54:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bdb0      	pop	{r4, r5, r7, pc}

08009e5e <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>:
      move_iterator(iterator_type __i)
 8009e5e:	b480      	push	{r7}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	68b9      	ldr	r1, [r7, #8]
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 f86c 	bl	8009f6e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>
 8009e96:	4603      	mov	r3, r0
    }
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3718      	adds	r7, #24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8009eac:	2301      	movs	r3, #1
 8009eae:	75fb      	strb	r3, [r7, #23]
			     && __is_pointer<_II>::__value
			     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
			      _Category>::__copy_m(__first, __last, __result);
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	68b9      	ldr	r1, [r7, #8]
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f000 f86a 	bl	8009f8e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>
 8009eba:	4603      	mov	r3, r0
    }
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f819 	bl	8009f04 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d201      	bcs.n	8009ef6 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	e000      	b.n	8009ef8 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8009ef6:	687b      	ldr	r3, [r7, #4]
    }
 8009ef8:	4618      	mov	r0, r3
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009f0c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8009f10:	4618      	mov	r0, r3
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>:
    __niter_base(_Iterator __it)
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4618      	mov	r0, r3
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b086      	sub	sp, #24
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	60f8      	str	r0, [r7, #12]
 8009f3a:	60b9      	str	r1, [r7, #8]
 8009f3c:	607a      	str	r2, [r7, #4]
 8009f3e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	1ad3      	subs	r3, r2, r3
 8009f46:	109b      	asrs	r3, r3, #2
 8009f48:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	dd06      	ble.n	8009f5e <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	461a      	mov	r2, r3
 8009f56:	68f9      	ldr	r1, [r7, #12]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fc47 	bl	800a7ec <memmove>
      return __result + __count;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	4413      	add	r3, r2
    }
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b084      	sub	sp, #16
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	60f8      	str	r0, [r7, #12]
 8009f76:	60b9      	str	r1, [r7, #8]
 8009f78:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	68b9      	ldr	r1, [r7, #8]
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f000 f822 	bl	8009fc8 <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 8009f84:	4603      	mov	r3, r0
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b086      	sub	sp, #24
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	60f8      	str	r0, [r7, #12]
 8009f96:	60b9      	str	r1, [r7, #8]
 8009f98:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	109b      	asrs	r3, r3, #2
 8009fa2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d006      	beq.n	8009fb8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	461a      	mov	r2, r3
 8009fb0:	68f9      	ldr	r1, [r7, #12]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fc1a 	bl	800a7ec <memmove>
	  return __result + _Num;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	4413      	add	r3, r2
	}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3718      	adds	r7, #24
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8009fc8:	b590      	push	{r4, r7, lr}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 f80f 	bl	8009ff8 <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009fda:	4604      	mov	r4, r0
 8009fdc:	68b8      	ldr	r0, [r7, #8]
 8009fde:	f000 f80b 	bl	8009ff8 <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f000 f816 	bl	800a01a <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 8009fee:	4603      	mov	r3, r0
    }
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd90      	pop	{r4, r7, pc}

08009ff8 <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800a000:	1d3b      	adds	r3, r7, #4
 800a002:	4618      	mov	r0, r3
 800a004:	f000 f82c 	bl	800a060 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>
 800a008:	4603      	mov	r3, r0
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 f834 	bl	800a078 <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>
 800a010:	4603      	mov	r3, r0
 800a012:	4618      	mov	r0, r3
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800a01a:	b5b0      	push	{r4, r5, r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	60f8      	str	r0, [r7, #12]
 800a022:	60b9      	str	r1, [r7, #8]
 800a024:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f7ff ff78 	bl	8009f1c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800a02c:	4604      	mov	r4, r0
 800a02e:	68b8      	ldr	r0, [r7, #8]
 800a030:	f7ff ff74 	bl	8009f1c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800a034:	4605      	mov	r5, r0
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4618      	mov	r0, r3
 800a03a:	f7ff ff6f 	bl	8009f1c <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800a03e:	4603      	mov	r3, r0
 800a040:	461a      	mov	r2, r3
 800a042:	4629      	mov	r1, r5
 800a044:	4620      	mov	r0, r4
 800a046:	f7ff ff2b 	bl	8009ea0 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 800a04a:	4602      	mov	r2, r0
 800a04c:	1d3b      	adds	r3, r7, #4
 800a04e:	4611      	mov	r1, r2
 800a050:	4618      	mov	r0, r3
 800a052:	f000 f81c 	bl	800a08e <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>
 800a056:	4603      	mov	r3, r0
    }
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bdb0      	pop	{r4, r5, r7, pc}

0800a060 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>:
      base() const
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4618      	mov	r0, r3
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4618      	mov	r0, r3
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800a08e:	b480      	push	{r7}
 800a090:	b083      	sub	sp, #12
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	6039      	str	r1, [r7, #0]
    { return __res; }
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	4618      	mov	r0, r3
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b084      	sub	sp, #16
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	7b1b      	ldrb	r3, [r3, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	e010      	b.n	800a0de <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6839      	ldr	r1, [r7, #0]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	4798      	blx	r3
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
 800a0d4:	e003      	b.n	800a0de <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b082      	sub	sp, #8
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3308      	adds	r3, #8
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	4798      	blx	r3
}
 800a0fe:	bf00      	nop
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <_ZN19QAS_Serial_Dev_Base8txStringEPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txString(const char* str) {
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 800a110:	6838      	ldr	r0, [r7, #0]
 800a112:	f7f6 f895 	bl	8000240 <strlen>
 800a116:	4603      	mov	r3, r0
 800a118:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 800a11a:	2300      	movs	r3, #0
 800a11c:	81fb      	strh	r3, [r7, #14]
 800a11e:	89fa      	ldrh	r2, [r7, #14]
 800a120:	89bb      	ldrh	r3, [r7, #12]
 800a122:	429a      	cmp	r2, r3
 800a124:	d20f      	bcs.n	800a146 <_ZN19QAS_Serial_Dev_Base8txStringEPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3304      	adds	r3, #4
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 f861 	bl	800a1f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800a130:	89fb      	ldrh	r3, [r7, #14]
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	4413      	add	r3, r2
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	4619      	mov	r1, r3
 800a13a:	f000 fa09 	bl	800a550 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 800a13e:	89fb      	ldrh	r3, [r7, #14]
 800a140:	3301      	adds	r3, #1
 800a142:	81fb      	strh	r3, [r7, #14]
 800a144:	e7eb      	b.n	800a11e <_ZN19QAS_Serial_Dev_Base8txStringEPKc+0x18>
  }
  imp_txStart();
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	330c      	adds	r3, #12
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	4798      	blx	r3
}
 800a152:	bf00      	nop
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 800a164:	6838      	ldr	r0, [r7, #0]
 800a166:	f7f6 f86b 	bl	8000240 <strlen>
 800a16a:	4603      	mov	r3, r0
 800a16c:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 800a16e:	2300      	movs	r3, #0
 800a170:	81fb      	strh	r3, [r7, #14]
 800a172:	89fa      	ldrh	r2, [r7, #14]
 800a174:	89bb      	ldrh	r3, [r7, #12]
 800a176:	429a      	cmp	r2, r3
 800a178:	d20f      	bcs.n	800a19a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3304      	adds	r3, #4
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 f837 	bl	800a1f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800a184:	89fb      	ldrh	r3, [r7, #14]
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	4413      	add	r3, r2
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	4619      	mov	r1, r3
 800a18e:	f000 f9df 	bl	800a550 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 800a192:	89fb      	ldrh	r3, [r7, #14]
 800a194:	3301      	adds	r3, #1
 800a196:	81fb      	strh	r3, [r7, #14]
 800a198:	e7eb      	b.n	800a172 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 f827 	bl	800a1f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	210d      	movs	r1, #13
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 f9d1 	bl	800a550 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	330c      	adds	r3, #12
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	4798      	blx	r3
}
 800a1ba:	bf00      	nop
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 f80f 	bl	800a1f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	210d      	movs	r1, #13
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 f9b9 	bl	800a550 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	330c      	adds	r3, #12
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	4798      	blx	r3
}
 800a1ea:	bf00      	nop
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b082      	sub	sp, #8
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
	return get();
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f805 	bl	800a20a <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 800a200:	4603      	mov	r3, r0
      }
 800a202:	4618      	mov	r0, r3
 800a204:	3708      	adds	r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b082      	sub	sp, #8
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4618      	mov	r0, r3
 800a216:	f000 f805 	bl	800a224 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 800a21a:	4603      	mov	r3, r0
 800a21c:	4618      	mov	r0, r3
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 f806 	bl	800a240 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a234:	4603      	mov	r3, r0
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4618      	mov	r0, r3
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 f805 	bl	800a25a <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a250:	4603      	mov	r3, r0
 800a252:	4618      	mov	r0, r3
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b082      	sub	sp, #8
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f805 	bl	800a272 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 800a268:	4603      	mov	r3, r0
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a272:	b580      	push	{r7, lr}
 800a274:	b082      	sub	sp, #8
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 f805 	bl	800a28c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 800a282:	4603      	mov	r3, r0
 800a284:	4618      	mov	r0, r3
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4618      	mov	r0, r3
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	3314      	adds	r3, #20
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f000 f8e2 	bl	800a47a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7fe f8fa 	bl	80084b2 <_ZN8QAD_UART4initEv>
 800a2be:	4603      	mov	r3, r0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	3314      	adds	r3, #20
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f000 f8d0 	bl	800a47a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7fe f912 	bl	8008506 <_ZN8QAD_UART6deinitEv>
}
 800a2e2:	bf00      	nop
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 800a2ea:	b590      	push	{r4, r7, lr}
 800a2ec:	b0a5      	sub	sp, #148	; 0x94
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3314      	adds	r3, #20
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 f8be 	bl	800a47a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800a2fe:	4603      	mov	r3, r0
 800a300:	4618      	mov	r0, r3
 800a302:	f7fe f916 	bl	8008532 <_ZN8QAD_UART9getHandleEv>
 800a306:	4602      	mov	r2, r0
 800a308:	f107 0308 	add.w	r3, r7, #8
 800a30c:	4611      	mov	r1, r2
 800a30e:	2284      	movs	r2, #132	; 0x84
 800a310:	4618      	mov	r0, r3
 800a312:	f000 fa5d 	bl	800a7d0 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	f003 0320 	and.w	r3, r3, #32
 800a31e:	2b20      	cmp	r3, #32
 800a320:	bf0c      	ite	eq
 800a322:	2301      	moveq	r3, #1
 800a324:	2300      	movne	r3, #0
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d01e      	beq.n	800a36a <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x80>
  	uint8_t uData = m_pUART->dataRX();
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	3314      	adds	r3, #20
 800a330:	4618      	mov	r0, r3
 800a332:	f000 f8a2 	bl	800a47a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800a336:	4603      	mov	r3, r0
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fe f96e 	bl	800861a <_ZN8QAD_UART6dataRXEv>
 800a33e:	4603      	mov	r3, r0
 800a340:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  	if (m_eRXState)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	7b9b      	ldrb	r3, [r3, #14]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00b      	beq.n	800a364 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	3308      	adds	r3, #8
 800a350:	4618      	mov	r0, r3
 800a352:	f7ff ff4e 	bl	800a1f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800a356:	4602      	mov	r2, r0
 800a358:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a35c:	4619      	mov	r1, r3
 800a35e:	4610      	mov	r0, r2
 800a360:	f000 f8f6 	bl	800a550 <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2220      	movs	r2, #32
 800a368:	621a      	str	r2, [r3, #32]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a372:	2b80      	cmp	r3, #128	; 0x80
 800a374:	bf0c      	ite	eq
 800a376:	2301      	moveq	r3, #1
 800a378:	2300      	movne	r3, #0
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d034      	beq.n	800a3ea <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x100>
  	if (!m_pTXFIFO->empty()) {
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	3304      	adds	r3, #4
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff ff34 	bl	800a1f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800a38a:	4603      	mov	r3, r0
 800a38c:	4618      	mov	r0, r3
 800a38e:	f000 f8cc 	bl	800a52a <_ZN14QAT_FIFOBuffer5emptyEv>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	bf0c      	ite	eq
 800a398:	2301      	moveq	r3, #1
 800a39a:	2300      	movne	r3, #0
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d014      	beq.n	800a3cc <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe2>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	3314      	adds	r3, #20
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 f867 	bl	800a47a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7ff ff1d 	bl	800a1f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 f8ec 	bl	800a598 <_ZN14QAT_FIFOBuffer3popEv>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f7fe f918 	bl	80085fa <_ZN8QAD_UART6dataTXEh>
 800a3ca:	e00b      	b.n	800a3e4 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfa>
  	} else {
      m_pUART->stopTX();
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	3314      	adds	r3, #20
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f000 f852 	bl	800a47a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe f8cc 	bl	8008576 <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2280      	movs	r2, #128	; 0x80
 800a3e8:	621a      	str	r2, [r3, #32]
  }
}
 800a3ea:	bf00      	nop
 800a3ec:	3794      	adds	r7, #148	; 0x94
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd90      	pop	{r4, r7, pc}

0800a3f2 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	3314      	adds	r3, #20
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 f83b 	bl	800a47a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800a404:	4603      	mov	r3, r0
 800a406:	4618      	mov	r0, r3
 800a408:	f7fe f89f 	bl	800854a <_ZN8QAD_UART7startTXEv>
}
 800a40c:	bf00      	nop
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3314      	adds	r3, #20
 800a420:	4618      	mov	r0, r3
 800a422:	f000 f82a 	bl	800a47a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800a426:	4603      	mov	r3, r0
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fe f8a4 	bl	8008576 <_ZN8QAD_UART6stopTXEv>
}
 800a42e:	bf00      	nop
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 800a436:	b580      	push	{r7, lr}
 800a438:	b082      	sub	sp, #8
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	3314      	adds	r3, #20
 800a442:	4618      	mov	r0, r3
 800a444:	f000 f819 	bl	800a47a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800a448:	4603      	mov	r3, r0
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe f8a9 	bl	80085a2 <_ZN8QAD_UART7startRXEv>
}
 800a450:	bf00      	nop
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3314      	adds	r3, #20
 800a464:	4618      	mov	r0, r3
 800a466:	f000 f808 	bl	800a47a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800a46a:	4603      	mov	r3, r0
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe f8ae 	bl	80085ce <_ZN8QAD_UART6stopRXEv>
}
 800a472:	bf00      	nop
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b082      	sub	sp, #8
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
	return get();
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f805 	bl	800a492 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 800a488:	4603      	mov	r3, r0
      }
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800a492:	b580      	push	{r7, lr}
 800a494:	b082      	sub	sp, #8
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 f805 	bl	800a4ac <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 f806 	bl	800a4c8 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 f805 	bl	800a4e2 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f805 	bl	800a4fa <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b082      	sub	sp, #8
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4618      	mov	r0, r3
 800a506:	f000 f805 	bl	800a514 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 800a50a:	4603      	mov	r3, r0
 800a50c:	4618      	mov	r0, r3
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4618      	mov	r0, r3
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 800a52a:	b480      	push	{r7}
 800a52c:	b083      	sub	sp, #12
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	88da      	ldrh	r2, [r3, #6]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	891b      	ldrh	r3, [r3, #8]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d101      	bne.n	800a542 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 800a53e:	2301      	movs	r3, #1
 800a540:	e000      	b.n	800a544 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	460b      	mov	r3, r1
 800a55a:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	891b      	ldrh	r3, [r3, #8]
 800a562:	4619      	mov	r1, r3
 800a564:	4610      	mov	r0, r2
 800a566:	f000 f847 	bl	800a5f8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800a56a:	4602      	mov	r2, r0
 800a56c:	78fb      	ldrb	r3, [r7, #3]
 800a56e:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	889a      	ldrh	r2, [r3, #4]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	891b      	ldrh	r3, [r3, #8]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d906      	bls.n	800a58a <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	891b      	ldrh	r3, [r3, #8]
 800a580:	3301      	adds	r3, #1
 800a582:	b29a      	uxth	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 800a588:	e002      	b.n	800a590 <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	811a      	strh	r2, [r3, #8]
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7ff ffc2 	bl	800a52a <_ZN14QAT_FIFOBuffer5emptyEv>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	bf0c      	ite	eq
 800a5ac:	2301      	moveq	r3, #1
 800a5ae:	2300      	movne	r3, #0
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d01b      	beq.n	800a5ee <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	88db      	ldrh	r3, [r3, #6]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f000 f81a 	bl	800a5f8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	889a      	ldrh	r2, [r3, #4]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	88db      	ldrh	r3, [r3, #6]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d906      	bls.n	800a5e4 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	88db      	ldrh	r3, [r3, #6]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	80da      	strh	r2, [r3, #6]
 800a5e2:	e002      	b.n	800a5ea <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	80da      	strh	r2, [r3, #6]
		return uData;
 800a5ea:	7bfb      	ldrb	r3, [r7, #15]
 800a5ec:	e000      	b.n	800a5f0 <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
	return get()[__i];
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f807 	bl	800a616 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800a608:	4602      	mov	r2, r0
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	4413      	add	r3, r2
      }
 800a60e:	4618      	mov	r0, r3
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800a616:	b580      	push	{r7, lr}
 800a618:	b082      	sub	sp, #8
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4618      	mov	r0, r3
 800a622:	f000 f805 	bl	800a630 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800a626:	4603      	mov	r3, r0
 800a628:	4618      	mov	r0, r3
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 f806 	bl	800a64c <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800a640:	4603      	mov	r3, r0
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4618      	mov	r0, r3
 800a658:	f000 f805 	bl	800a666 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a65c:	4603      	mov	r3, r0
 800a65e:	4618      	mov	r0, r3
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800a666:	b580      	push	{r7, lr}
 800a668:	b082      	sub	sp, #8
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f805 	bl	800a67e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 800a674:	4603      	mov	r3, r0
 800a676:	4618      	mov	r0, r3
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800a67e:	b580      	push	{r7, lr}
 800a680:	b082      	sub	sp, #8
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 f805 	bl	800a698 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 800a68e:	4603      	mov	r3, r0
 800a690:	4618      	mov	r0, r3
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <_ZdlPv>:
 800a6ae:	f000 b887 	b.w	800a7c0 <free>

0800a6b2 <_ZdlPvj>:
 800a6b2:	f7ff bffc 	b.w	800a6ae <_ZdlPv>

0800a6b6 <__cxa_guard_acquire>:
 800a6b6:	6803      	ldr	r3, [r0, #0]
 800a6b8:	07db      	lsls	r3, r3, #31
 800a6ba:	d406      	bmi.n	800a6ca <__cxa_guard_acquire+0x14>
 800a6bc:	7843      	ldrb	r3, [r0, #1]
 800a6be:	b103      	cbz	r3, 800a6c2 <__cxa_guard_acquire+0xc>
 800a6c0:	deff      	udf	#255	; 0xff
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	7043      	strb	r3, [r0, #1]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	4770      	bx	lr
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	4770      	bx	lr

0800a6ce <__cxa_guard_release>:
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	6003      	str	r3, [r0, #0]
 800a6d2:	4770      	bx	lr

0800a6d4 <_Znwj>:
 800a6d4:	2801      	cmp	r0, #1
 800a6d6:	bf38      	it	cc
 800a6d8:	2001      	movcc	r0, #1
 800a6da:	b510      	push	{r4, lr}
 800a6dc:	4604      	mov	r4, r0
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f000 f866 	bl	800a7b0 <malloc>
 800a6e4:	b930      	cbnz	r0, 800a6f4 <_Znwj+0x20>
 800a6e6:	f000 f823 	bl	800a730 <_ZSt15get_new_handlerv>
 800a6ea:	b908      	cbnz	r0, 800a6f0 <_Znwj+0x1c>
 800a6ec:	f000 f828 	bl	800a740 <abort>
 800a6f0:	4780      	blx	r0
 800a6f2:	e7f4      	b.n	800a6de <_Znwj+0xa>
 800a6f4:	bd10      	pop	{r4, pc}

0800a6f6 <_Znaj>:
 800a6f6:	f7ff bfed 	b.w	800a6d4 <_Znwj>

0800a6fa <__cxa_pure_virtual>:
 800a6fa:	b508      	push	{r3, lr}
 800a6fc:	f000 f812 	bl	800a724 <_ZSt9terminatev>

0800a700 <_ZSt17__throw_bad_allocv>:
 800a700:	b508      	push	{r3, lr}
 800a702:	f000 f81d 	bl	800a740 <abort>

0800a706 <_ZSt20__throw_length_errorPKc>:
 800a706:	b508      	push	{r3, lr}
 800a708:	f000 f81a 	bl	800a740 <abort>

0800a70c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a70c:	b508      	push	{r3, lr}
 800a70e:	4780      	blx	r0
 800a710:	f000 f816 	bl	800a740 <abort>

0800a714 <_ZSt13get_terminatev>:
 800a714:	4b02      	ldr	r3, [pc, #8]	; (800a720 <_ZSt13get_terminatev+0xc>)
 800a716:	6818      	ldr	r0, [r3, #0]
 800a718:	f3bf 8f5b 	dmb	ish
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	2000000c 	.word	0x2000000c

0800a724 <_ZSt9terminatev>:
 800a724:	b508      	push	{r3, lr}
 800a726:	f7ff fff5 	bl	800a714 <_ZSt13get_terminatev>
 800a72a:	f7ff ffef 	bl	800a70c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800a730 <_ZSt15get_new_handlerv>:
 800a730:	4b02      	ldr	r3, [pc, #8]	; (800a73c <_ZSt15get_new_handlerv+0xc>)
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	f3bf 8f5b 	dmb	ish
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	200003c4 	.word	0x200003c4

0800a740 <abort>:
 800a740:	b508      	push	{r3, lr}
 800a742:	2006      	movs	r0, #6
 800a744:	f000 f956 	bl	800a9f4 <raise>
 800a748:	2001      	movs	r0, #1
 800a74a:	f7f7 fde6 	bl	800231a <_exit>

0800a74e <atexit>:
 800a74e:	2300      	movs	r3, #0
 800a750:	4601      	mov	r1, r0
 800a752:	461a      	mov	r2, r3
 800a754:	4618      	mov	r0, r3
 800a756:	f000 b991 	b.w	800aa7c <__register_exitproc>
	...

0800a75c <__errno>:
 800a75c:	4b01      	ldr	r3, [pc, #4]	; (800a764 <__errno+0x8>)
 800a75e:	6818      	ldr	r0, [r3, #0]
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	20000010 	.word	0x20000010

0800a768 <__libc_init_array>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	4d0d      	ldr	r5, [pc, #52]	; (800a7a0 <__libc_init_array+0x38>)
 800a76c:	4c0d      	ldr	r4, [pc, #52]	; (800a7a4 <__libc_init_array+0x3c>)
 800a76e:	1b64      	subs	r4, r4, r5
 800a770:	10a4      	asrs	r4, r4, #2
 800a772:	2600      	movs	r6, #0
 800a774:	42a6      	cmp	r6, r4
 800a776:	d109      	bne.n	800a78c <__libc_init_array+0x24>
 800a778:	4d0b      	ldr	r5, [pc, #44]	; (800a7a8 <__libc_init_array+0x40>)
 800a77a:	4c0c      	ldr	r4, [pc, #48]	; (800a7ac <__libc_init_array+0x44>)
 800a77c:	f000 fd0e 	bl	800b19c <_init>
 800a780:	1b64      	subs	r4, r4, r5
 800a782:	10a4      	asrs	r4, r4, #2
 800a784:	2600      	movs	r6, #0
 800a786:	42a6      	cmp	r6, r4
 800a788:	d105      	bne.n	800a796 <__libc_init_array+0x2e>
 800a78a:	bd70      	pop	{r4, r5, r6, pc}
 800a78c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a790:	4798      	blx	r3
 800a792:	3601      	adds	r6, #1
 800a794:	e7ee      	b.n	800a774 <__libc_init_array+0xc>
 800a796:	f855 3b04 	ldr.w	r3, [r5], #4
 800a79a:	4798      	blx	r3
 800a79c:	3601      	adds	r6, #1
 800a79e:	e7f2      	b.n	800a786 <__libc_init_array+0x1e>
 800a7a0:	0800ea88 	.word	0x0800ea88
 800a7a4:	0800ea88 	.word	0x0800ea88
 800a7a8:	0800ea88 	.word	0x0800ea88
 800a7ac:	0800ea8c 	.word	0x0800ea8c

0800a7b0 <malloc>:
 800a7b0:	4b02      	ldr	r3, [pc, #8]	; (800a7bc <malloc+0xc>)
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	6818      	ldr	r0, [r3, #0]
 800a7b6:	f000 b88b 	b.w	800a8d0 <_malloc_r>
 800a7ba:	bf00      	nop
 800a7bc:	20000010 	.word	0x20000010

0800a7c0 <free>:
 800a7c0:	4b02      	ldr	r3, [pc, #8]	; (800a7cc <free+0xc>)
 800a7c2:	4601      	mov	r1, r0
 800a7c4:	6818      	ldr	r0, [r3, #0]
 800a7c6:	f000 b833 	b.w	800a830 <_free_r>
 800a7ca:	bf00      	nop
 800a7cc:	20000010 	.word	0x20000010

0800a7d0 <memcpy>:
 800a7d0:	440a      	add	r2, r1
 800a7d2:	4291      	cmp	r1, r2
 800a7d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7d8:	d100      	bne.n	800a7dc <memcpy+0xc>
 800a7da:	4770      	bx	lr
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7e6:	4291      	cmp	r1, r2
 800a7e8:	d1f9      	bne.n	800a7de <memcpy+0xe>
 800a7ea:	bd10      	pop	{r4, pc}

0800a7ec <memmove>:
 800a7ec:	4288      	cmp	r0, r1
 800a7ee:	b510      	push	{r4, lr}
 800a7f0:	eb01 0402 	add.w	r4, r1, r2
 800a7f4:	d902      	bls.n	800a7fc <memmove+0x10>
 800a7f6:	4284      	cmp	r4, r0
 800a7f8:	4623      	mov	r3, r4
 800a7fa:	d807      	bhi.n	800a80c <memmove+0x20>
 800a7fc:	1e43      	subs	r3, r0, #1
 800a7fe:	42a1      	cmp	r1, r4
 800a800:	d008      	beq.n	800a814 <memmove+0x28>
 800a802:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a80a:	e7f8      	b.n	800a7fe <memmove+0x12>
 800a80c:	4402      	add	r2, r0
 800a80e:	4601      	mov	r1, r0
 800a810:	428a      	cmp	r2, r1
 800a812:	d100      	bne.n	800a816 <memmove+0x2a>
 800a814:	bd10      	pop	{r4, pc}
 800a816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a81a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a81e:	e7f7      	b.n	800a810 <memmove+0x24>

0800a820 <memset>:
 800a820:	4402      	add	r2, r0
 800a822:	4603      	mov	r3, r0
 800a824:	4293      	cmp	r3, r2
 800a826:	d100      	bne.n	800a82a <memset+0xa>
 800a828:	4770      	bx	lr
 800a82a:	f803 1b01 	strb.w	r1, [r3], #1
 800a82e:	e7f9      	b.n	800a824 <memset+0x4>

0800a830 <_free_r>:
 800a830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a832:	2900      	cmp	r1, #0
 800a834:	d048      	beq.n	800a8c8 <_free_r+0x98>
 800a836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a83a:	9001      	str	r0, [sp, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f1a1 0404 	sub.w	r4, r1, #4
 800a842:	bfb8      	it	lt
 800a844:	18e4      	addlt	r4, r4, r3
 800a846:	f000 f97f 	bl	800ab48 <__malloc_lock>
 800a84a:	4a20      	ldr	r2, [pc, #128]	; (800a8cc <_free_r+0x9c>)
 800a84c:	9801      	ldr	r0, [sp, #4]
 800a84e:	6813      	ldr	r3, [r2, #0]
 800a850:	4615      	mov	r5, r2
 800a852:	b933      	cbnz	r3, 800a862 <_free_r+0x32>
 800a854:	6063      	str	r3, [r4, #4]
 800a856:	6014      	str	r4, [r2, #0]
 800a858:	b003      	add	sp, #12
 800a85a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a85e:	f000 b979 	b.w	800ab54 <__malloc_unlock>
 800a862:	42a3      	cmp	r3, r4
 800a864:	d90b      	bls.n	800a87e <_free_r+0x4e>
 800a866:	6821      	ldr	r1, [r4, #0]
 800a868:	1862      	adds	r2, r4, r1
 800a86a:	4293      	cmp	r3, r2
 800a86c:	bf04      	itt	eq
 800a86e:	681a      	ldreq	r2, [r3, #0]
 800a870:	685b      	ldreq	r3, [r3, #4]
 800a872:	6063      	str	r3, [r4, #4]
 800a874:	bf04      	itt	eq
 800a876:	1852      	addeq	r2, r2, r1
 800a878:	6022      	streq	r2, [r4, #0]
 800a87a:	602c      	str	r4, [r5, #0]
 800a87c:	e7ec      	b.n	800a858 <_free_r+0x28>
 800a87e:	461a      	mov	r2, r3
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	b10b      	cbz	r3, 800a888 <_free_r+0x58>
 800a884:	42a3      	cmp	r3, r4
 800a886:	d9fa      	bls.n	800a87e <_free_r+0x4e>
 800a888:	6811      	ldr	r1, [r2, #0]
 800a88a:	1855      	adds	r5, r2, r1
 800a88c:	42a5      	cmp	r5, r4
 800a88e:	d10b      	bne.n	800a8a8 <_free_r+0x78>
 800a890:	6824      	ldr	r4, [r4, #0]
 800a892:	4421      	add	r1, r4
 800a894:	1854      	adds	r4, r2, r1
 800a896:	42a3      	cmp	r3, r4
 800a898:	6011      	str	r1, [r2, #0]
 800a89a:	d1dd      	bne.n	800a858 <_free_r+0x28>
 800a89c:	681c      	ldr	r4, [r3, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	6053      	str	r3, [r2, #4]
 800a8a2:	4421      	add	r1, r4
 800a8a4:	6011      	str	r1, [r2, #0]
 800a8a6:	e7d7      	b.n	800a858 <_free_r+0x28>
 800a8a8:	d902      	bls.n	800a8b0 <_free_r+0x80>
 800a8aa:	230c      	movs	r3, #12
 800a8ac:	6003      	str	r3, [r0, #0]
 800a8ae:	e7d3      	b.n	800a858 <_free_r+0x28>
 800a8b0:	6825      	ldr	r5, [r4, #0]
 800a8b2:	1961      	adds	r1, r4, r5
 800a8b4:	428b      	cmp	r3, r1
 800a8b6:	bf04      	itt	eq
 800a8b8:	6819      	ldreq	r1, [r3, #0]
 800a8ba:	685b      	ldreq	r3, [r3, #4]
 800a8bc:	6063      	str	r3, [r4, #4]
 800a8be:	bf04      	itt	eq
 800a8c0:	1949      	addeq	r1, r1, r5
 800a8c2:	6021      	streq	r1, [r4, #0]
 800a8c4:	6054      	str	r4, [r2, #4]
 800a8c6:	e7c7      	b.n	800a858 <_free_r+0x28>
 800a8c8:	b003      	add	sp, #12
 800a8ca:	bd30      	pop	{r4, r5, pc}
 800a8cc:	200003c8 	.word	0x200003c8

0800a8d0 <_malloc_r>:
 800a8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d2:	1ccd      	adds	r5, r1, #3
 800a8d4:	f025 0503 	bic.w	r5, r5, #3
 800a8d8:	3508      	adds	r5, #8
 800a8da:	2d0c      	cmp	r5, #12
 800a8dc:	bf38      	it	cc
 800a8de:	250c      	movcc	r5, #12
 800a8e0:	2d00      	cmp	r5, #0
 800a8e2:	4606      	mov	r6, r0
 800a8e4:	db01      	blt.n	800a8ea <_malloc_r+0x1a>
 800a8e6:	42a9      	cmp	r1, r5
 800a8e8:	d903      	bls.n	800a8f2 <_malloc_r+0x22>
 800a8ea:	230c      	movs	r3, #12
 800a8ec:	6033      	str	r3, [r6, #0]
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8f2:	f000 f929 	bl	800ab48 <__malloc_lock>
 800a8f6:	4921      	ldr	r1, [pc, #132]	; (800a97c <_malloc_r+0xac>)
 800a8f8:	680a      	ldr	r2, [r1, #0]
 800a8fa:	4614      	mov	r4, r2
 800a8fc:	b99c      	cbnz	r4, 800a926 <_malloc_r+0x56>
 800a8fe:	4f20      	ldr	r7, [pc, #128]	; (800a980 <_malloc_r+0xb0>)
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	b923      	cbnz	r3, 800a90e <_malloc_r+0x3e>
 800a904:	4621      	mov	r1, r4
 800a906:	4630      	mov	r0, r6
 800a908:	f000 f83c 	bl	800a984 <_sbrk_r>
 800a90c:	6038      	str	r0, [r7, #0]
 800a90e:	4629      	mov	r1, r5
 800a910:	4630      	mov	r0, r6
 800a912:	f000 f837 	bl	800a984 <_sbrk_r>
 800a916:	1c43      	adds	r3, r0, #1
 800a918:	d123      	bne.n	800a962 <_malloc_r+0x92>
 800a91a:	230c      	movs	r3, #12
 800a91c:	6033      	str	r3, [r6, #0]
 800a91e:	4630      	mov	r0, r6
 800a920:	f000 f918 	bl	800ab54 <__malloc_unlock>
 800a924:	e7e3      	b.n	800a8ee <_malloc_r+0x1e>
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	1b5b      	subs	r3, r3, r5
 800a92a:	d417      	bmi.n	800a95c <_malloc_r+0x8c>
 800a92c:	2b0b      	cmp	r3, #11
 800a92e:	d903      	bls.n	800a938 <_malloc_r+0x68>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	441c      	add	r4, r3
 800a934:	6025      	str	r5, [r4, #0]
 800a936:	e004      	b.n	800a942 <_malloc_r+0x72>
 800a938:	6863      	ldr	r3, [r4, #4]
 800a93a:	42a2      	cmp	r2, r4
 800a93c:	bf0c      	ite	eq
 800a93e:	600b      	streq	r3, [r1, #0]
 800a940:	6053      	strne	r3, [r2, #4]
 800a942:	4630      	mov	r0, r6
 800a944:	f000 f906 	bl	800ab54 <__malloc_unlock>
 800a948:	f104 000b 	add.w	r0, r4, #11
 800a94c:	1d23      	adds	r3, r4, #4
 800a94e:	f020 0007 	bic.w	r0, r0, #7
 800a952:	1ac2      	subs	r2, r0, r3
 800a954:	d0cc      	beq.n	800a8f0 <_malloc_r+0x20>
 800a956:	1a1b      	subs	r3, r3, r0
 800a958:	50a3      	str	r3, [r4, r2]
 800a95a:	e7c9      	b.n	800a8f0 <_malloc_r+0x20>
 800a95c:	4622      	mov	r2, r4
 800a95e:	6864      	ldr	r4, [r4, #4]
 800a960:	e7cc      	b.n	800a8fc <_malloc_r+0x2c>
 800a962:	1cc4      	adds	r4, r0, #3
 800a964:	f024 0403 	bic.w	r4, r4, #3
 800a968:	42a0      	cmp	r0, r4
 800a96a:	d0e3      	beq.n	800a934 <_malloc_r+0x64>
 800a96c:	1a21      	subs	r1, r4, r0
 800a96e:	4630      	mov	r0, r6
 800a970:	f000 f808 	bl	800a984 <_sbrk_r>
 800a974:	3001      	adds	r0, #1
 800a976:	d1dd      	bne.n	800a934 <_malloc_r+0x64>
 800a978:	e7cf      	b.n	800a91a <_malloc_r+0x4a>
 800a97a:	bf00      	nop
 800a97c:	200003c8 	.word	0x200003c8
 800a980:	200003cc 	.word	0x200003cc

0800a984 <_sbrk_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4d06      	ldr	r5, [pc, #24]	; (800a9a0 <_sbrk_r+0x1c>)
 800a988:	2300      	movs	r3, #0
 800a98a:	4604      	mov	r4, r0
 800a98c:	4608      	mov	r0, r1
 800a98e:	602b      	str	r3, [r5, #0]
 800a990:	f7f7 fcce 	bl	8002330 <_sbrk>
 800a994:	1c43      	adds	r3, r0, #1
 800a996:	d102      	bne.n	800a99e <_sbrk_r+0x1a>
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	b103      	cbz	r3, 800a99e <_sbrk_r+0x1a>
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	20000470 	.word	0x20000470

0800a9a4 <_raise_r>:
 800a9a4:	291f      	cmp	r1, #31
 800a9a6:	b538      	push	{r3, r4, r5, lr}
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	460d      	mov	r5, r1
 800a9ac:	d904      	bls.n	800a9b8 <_raise_r+0x14>
 800a9ae:	2316      	movs	r3, #22
 800a9b0:	6003      	str	r3, [r0, #0]
 800a9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9ba:	b112      	cbz	r2, 800a9c2 <_raise_r+0x1e>
 800a9bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9c0:	b94b      	cbnz	r3, 800a9d6 <_raise_r+0x32>
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 f830 	bl	800aa28 <_getpid_r>
 800a9c8:	462a      	mov	r2, r5
 800a9ca:	4601      	mov	r1, r0
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9d2:	f000 b817 	b.w	800aa04 <_kill_r>
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d00a      	beq.n	800a9f0 <_raise_r+0x4c>
 800a9da:	1c59      	adds	r1, r3, #1
 800a9dc:	d103      	bne.n	800a9e6 <_raise_r+0x42>
 800a9de:	2316      	movs	r3, #22
 800a9e0:	6003      	str	r3, [r0, #0]
 800a9e2:	2001      	movs	r0, #1
 800a9e4:	e7e7      	b.n	800a9b6 <_raise_r+0x12>
 800a9e6:	2400      	movs	r4, #0
 800a9e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	4798      	blx	r3
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	e7e0      	b.n	800a9b6 <_raise_r+0x12>

0800a9f4 <raise>:
 800a9f4:	4b02      	ldr	r3, [pc, #8]	; (800aa00 <raise+0xc>)
 800a9f6:	4601      	mov	r1, r0
 800a9f8:	6818      	ldr	r0, [r3, #0]
 800a9fa:	f7ff bfd3 	b.w	800a9a4 <_raise_r>
 800a9fe:	bf00      	nop
 800aa00:	20000010 	.word	0x20000010

0800aa04 <_kill_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4d07      	ldr	r5, [pc, #28]	; (800aa24 <_kill_r+0x20>)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	4611      	mov	r1, r2
 800aa10:	602b      	str	r3, [r5, #0]
 800aa12:	f7f7 fc72 	bl	80022fa <_kill>
 800aa16:	1c43      	adds	r3, r0, #1
 800aa18:	d102      	bne.n	800aa20 <_kill_r+0x1c>
 800aa1a:	682b      	ldr	r3, [r5, #0]
 800aa1c:	b103      	cbz	r3, 800aa20 <_kill_r+0x1c>
 800aa1e:	6023      	str	r3, [r4, #0]
 800aa20:	bd38      	pop	{r3, r4, r5, pc}
 800aa22:	bf00      	nop
 800aa24:	20000470 	.word	0x20000470

0800aa28 <_getpid_r>:
 800aa28:	f7f7 bc5f 	b.w	80022ea <_getpid>

0800aa2c <siprintf>:
 800aa2c:	b40e      	push	{r1, r2, r3}
 800aa2e:	b500      	push	{lr}
 800aa30:	b09c      	sub	sp, #112	; 0x70
 800aa32:	ab1d      	add	r3, sp, #116	; 0x74
 800aa34:	9002      	str	r0, [sp, #8]
 800aa36:	9006      	str	r0, [sp, #24]
 800aa38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa3c:	4809      	ldr	r0, [pc, #36]	; (800aa64 <siprintf+0x38>)
 800aa3e:	9107      	str	r1, [sp, #28]
 800aa40:	9104      	str	r1, [sp, #16]
 800aa42:	4909      	ldr	r1, [pc, #36]	; (800aa68 <siprintf+0x3c>)
 800aa44:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa48:	9105      	str	r1, [sp, #20]
 800aa4a:	6800      	ldr	r0, [r0, #0]
 800aa4c:	9301      	str	r3, [sp, #4]
 800aa4e:	a902      	add	r1, sp, #8
 800aa50:	f000 f8e2 	bl	800ac18 <_svfiprintf_r>
 800aa54:	9b02      	ldr	r3, [sp, #8]
 800aa56:	2200      	movs	r2, #0
 800aa58:	701a      	strb	r2, [r3, #0]
 800aa5a:	b01c      	add	sp, #112	; 0x70
 800aa5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa60:	b003      	add	sp, #12
 800aa62:	4770      	bx	lr
 800aa64:	20000010 	.word	0x20000010
 800aa68:	ffff0208 	.word	0xffff0208

0800aa6c <strcpy>:
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa72:	f803 2b01 	strb.w	r2, [r3], #1
 800aa76:	2a00      	cmp	r2, #0
 800aa78:	d1f9      	bne.n	800aa6e <strcpy+0x2>
 800aa7a:	4770      	bx	lr

0800aa7c <__register_exitproc>:
 800aa7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa80:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800ab3c <__register_exitproc+0xc0>
 800aa84:	4606      	mov	r6, r0
 800aa86:	f8d8 0000 	ldr.w	r0, [r8]
 800aa8a:	461f      	mov	r7, r3
 800aa8c:	460d      	mov	r5, r1
 800aa8e:	4691      	mov	r9, r2
 800aa90:	f000 f856 	bl	800ab40 <__retarget_lock_acquire_recursive>
 800aa94:	4b25      	ldr	r3, [pc, #148]	; (800ab2c <__register_exitproc+0xb0>)
 800aa96:	681c      	ldr	r4, [r3, #0]
 800aa98:	b934      	cbnz	r4, 800aaa8 <__register_exitproc+0x2c>
 800aa9a:	4c25      	ldr	r4, [pc, #148]	; (800ab30 <__register_exitproc+0xb4>)
 800aa9c:	601c      	str	r4, [r3, #0]
 800aa9e:	4b25      	ldr	r3, [pc, #148]	; (800ab34 <__register_exitproc+0xb8>)
 800aaa0:	b113      	cbz	r3, 800aaa8 <__register_exitproc+0x2c>
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800aaa8:	6863      	ldr	r3, [r4, #4]
 800aaaa:	2b1f      	cmp	r3, #31
 800aaac:	dd07      	ble.n	800aabe <__register_exitproc+0x42>
 800aaae:	f8d8 0000 	ldr.w	r0, [r8]
 800aab2:	f000 f847 	bl	800ab44 <__retarget_lock_release_recursive>
 800aab6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aabe:	b34e      	cbz	r6, 800ab14 <__register_exitproc+0x98>
 800aac0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800aac4:	b988      	cbnz	r0, 800aaea <__register_exitproc+0x6e>
 800aac6:	4b1c      	ldr	r3, [pc, #112]	; (800ab38 <__register_exitproc+0xbc>)
 800aac8:	b923      	cbnz	r3, 800aad4 <__register_exitproc+0x58>
 800aaca:	f8d8 0000 	ldr.w	r0, [r8]
 800aace:	f000 f838 	bl	800ab42 <__retarget_lock_release>
 800aad2:	e7f0      	b.n	800aab6 <__register_exitproc+0x3a>
 800aad4:	f44f 7084 	mov.w	r0, #264	; 0x108
 800aad8:	f7ff fe6a 	bl	800a7b0 <malloc>
 800aadc:	2800      	cmp	r0, #0
 800aade:	d0f4      	beq.n	800aaca <__register_exitproc+0x4e>
 800aae0:	2300      	movs	r3, #0
 800aae2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800aae6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800aaea:	6863      	ldr	r3, [r4, #4]
 800aaec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	409a      	lsls	r2, r3
 800aaf4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800aaf8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800aafc:	4313      	orrs	r3, r2
 800aafe:	2e02      	cmp	r6, #2
 800ab00:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800ab04:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800ab08:	bf02      	ittt	eq
 800ab0a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800ab0e:	431a      	orreq	r2, r3
 800ab10:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 800ab14:	6863      	ldr	r3, [r4, #4]
 800ab16:	f8d8 0000 	ldr.w	r0, [r8]
 800ab1a:	1c5a      	adds	r2, r3, #1
 800ab1c:	3302      	adds	r3, #2
 800ab1e:	6062      	str	r2, [r4, #4]
 800ab20:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800ab24:	f000 f80e 	bl	800ab44 <__retarget_lock_release_recursive>
 800ab28:	2000      	movs	r0, #0
 800ab2a:	e7c6      	b.n	800aaba <__register_exitproc+0x3e>
 800ab2c:	2000045c 	.word	0x2000045c
 800ab30:	200003d0 	.word	0x200003d0
 800ab34:	00000000 	.word	0x00000000
 800ab38:	0800a7b1 	.word	0x0800a7b1
 800ab3c:	20000074 	.word	0x20000074

0800ab40 <__retarget_lock_acquire_recursive>:
 800ab40:	4770      	bx	lr

0800ab42 <__retarget_lock_release>:
 800ab42:	4770      	bx	lr

0800ab44 <__retarget_lock_release_recursive>:
 800ab44:	4770      	bx	lr
	...

0800ab48 <__malloc_lock>:
 800ab48:	4801      	ldr	r0, [pc, #4]	; (800ab50 <__malloc_lock+0x8>)
 800ab4a:	f7ff bff9 	b.w	800ab40 <__retarget_lock_acquire_recursive>
 800ab4e:	bf00      	nop
 800ab50:	20000468 	.word	0x20000468

0800ab54 <__malloc_unlock>:
 800ab54:	4801      	ldr	r0, [pc, #4]	; (800ab5c <__malloc_unlock+0x8>)
 800ab56:	f7ff bff5 	b.w	800ab44 <__retarget_lock_release_recursive>
 800ab5a:	bf00      	nop
 800ab5c:	20000468 	.word	0x20000468

0800ab60 <__ssputs_r>:
 800ab60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab64:	688e      	ldr	r6, [r1, #8]
 800ab66:	429e      	cmp	r6, r3
 800ab68:	4682      	mov	sl, r0
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	4690      	mov	r8, r2
 800ab6e:	461f      	mov	r7, r3
 800ab70:	d838      	bhi.n	800abe4 <__ssputs_r+0x84>
 800ab72:	898a      	ldrh	r2, [r1, #12]
 800ab74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab78:	d032      	beq.n	800abe0 <__ssputs_r+0x80>
 800ab7a:	6825      	ldr	r5, [r4, #0]
 800ab7c:	6909      	ldr	r1, [r1, #16]
 800ab7e:	eba5 0901 	sub.w	r9, r5, r1
 800ab82:	6965      	ldr	r5, [r4, #20]
 800ab84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	444b      	add	r3, r9
 800ab90:	106d      	asrs	r5, r5, #1
 800ab92:	429d      	cmp	r5, r3
 800ab94:	bf38      	it	cc
 800ab96:	461d      	movcc	r5, r3
 800ab98:	0553      	lsls	r3, r2, #21
 800ab9a:	d531      	bpl.n	800ac00 <__ssputs_r+0xa0>
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	f7ff fe97 	bl	800a8d0 <_malloc_r>
 800aba2:	4606      	mov	r6, r0
 800aba4:	b950      	cbnz	r0, 800abbc <__ssputs_r+0x5c>
 800aba6:	230c      	movs	r3, #12
 800aba8:	f8ca 3000 	str.w	r3, [sl]
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abb2:	81a3      	strh	r3, [r4, #12]
 800abb4:	f04f 30ff 	mov.w	r0, #4294967295
 800abb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abbc:	6921      	ldr	r1, [r4, #16]
 800abbe:	464a      	mov	r2, r9
 800abc0:	f7ff fe06 	bl	800a7d0 <memcpy>
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abce:	81a3      	strh	r3, [r4, #12]
 800abd0:	6126      	str	r6, [r4, #16]
 800abd2:	6165      	str	r5, [r4, #20]
 800abd4:	444e      	add	r6, r9
 800abd6:	eba5 0509 	sub.w	r5, r5, r9
 800abda:	6026      	str	r6, [r4, #0]
 800abdc:	60a5      	str	r5, [r4, #8]
 800abde:	463e      	mov	r6, r7
 800abe0:	42be      	cmp	r6, r7
 800abe2:	d900      	bls.n	800abe6 <__ssputs_r+0x86>
 800abe4:	463e      	mov	r6, r7
 800abe6:	4632      	mov	r2, r6
 800abe8:	6820      	ldr	r0, [r4, #0]
 800abea:	4641      	mov	r1, r8
 800abec:	f7ff fdfe 	bl	800a7ec <memmove>
 800abf0:	68a3      	ldr	r3, [r4, #8]
 800abf2:	6822      	ldr	r2, [r4, #0]
 800abf4:	1b9b      	subs	r3, r3, r6
 800abf6:	4432      	add	r2, r6
 800abf8:	60a3      	str	r3, [r4, #8]
 800abfa:	6022      	str	r2, [r4, #0]
 800abfc:	2000      	movs	r0, #0
 800abfe:	e7db      	b.n	800abb8 <__ssputs_r+0x58>
 800ac00:	462a      	mov	r2, r5
 800ac02:	f000 fa9d 	bl	800b140 <_realloc_r>
 800ac06:	4606      	mov	r6, r0
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d1e1      	bne.n	800abd0 <__ssputs_r+0x70>
 800ac0c:	6921      	ldr	r1, [r4, #16]
 800ac0e:	4650      	mov	r0, sl
 800ac10:	f7ff fe0e 	bl	800a830 <_free_r>
 800ac14:	e7c7      	b.n	800aba6 <__ssputs_r+0x46>
	...

0800ac18 <_svfiprintf_r>:
 800ac18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	4698      	mov	r8, r3
 800ac1e:	898b      	ldrh	r3, [r1, #12]
 800ac20:	061b      	lsls	r3, r3, #24
 800ac22:	b09d      	sub	sp, #116	; 0x74
 800ac24:	4607      	mov	r7, r0
 800ac26:	460d      	mov	r5, r1
 800ac28:	4614      	mov	r4, r2
 800ac2a:	d50e      	bpl.n	800ac4a <_svfiprintf_r+0x32>
 800ac2c:	690b      	ldr	r3, [r1, #16]
 800ac2e:	b963      	cbnz	r3, 800ac4a <_svfiprintf_r+0x32>
 800ac30:	2140      	movs	r1, #64	; 0x40
 800ac32:	f7ff fe4d 	bl	800a8d0 <_malloc_r>
 800ac36:	6028      	str	r0, [r5, #0]
 800ac38:	6128      	str	r0, [r5, #16]
 800ac3a:	b920      	cbnz	r0, 800ac46 <_svfiprintf_r+0x2e>
 800ac3c:	230c      	movs	r3, #12
 800ac3e:	603b      	str	r3, [r7, #0]
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295
 800ac44:	e0d1      	b.n	800adea <_svfiprintf_r+0x1d2>
 800ac46:	2340      	movs	r3, #64	; 0x40
 800ac48:	616b      	str	r3, [r5, #20]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac4e:	2320      	movs	r3, #32
 800ac50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac54:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac58:	2330      	movs	r3, #48	; 0x30
 800ac5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae04 <_svfiprintf_r+0x1ec>
 800ac5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac62:	f04f 0901 	mov.w	r9, #1
 800ac66:	4623      	mov	r3, r4
 800ac68:	469a      	mov	sl, r3
 800ac6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac6e:	b10a      	cbz	r2, 800ac74 <_svfiprintf_r+0x5c>
 800ac70:	2a25      	cmp	r2, #37	; 0x25
 800ac72:	d1f9      	bne.n	800ac68 <_svfiprintf_r+0x50>
 800ac74:	ebba 0b04 	subs.w	fp, sl, r4
 800ac78:	d00b      	beq.n	800ac92 <_svfiprintf_r+0x7a>
 800ac7a:	465b      	mov	r3, fp
 800ac7c:	4622      	mov	r2, r4
 800ac7e:	4629      	mov	r1, r5
 800ac80:	4638      	mov	r0, r7
 800ac82:	f7ff ff6d 	bl	800ab60 <__ssputs_r>
 800ac86:	3001      	adds	r0, #1
 800ac88:	f000 80aa 	beq.w	800ade0 <_svfiprintf_r+0x1c8>
 800ac8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac8e:	445a      	add	r2, fp
 800ac90:	9209      	str	r2, [sp, #36]	; 0x24
 800ac92:	f89a 3000 	ldrb.w	r3, [sl]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f000 80a2 	beq.w	800ade0 <_svfiprintf_r+0x1c8>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aca6:	f10a 0a01 	add.w	sl, sl, #1
 800acaa:	9304      	str	r3, [sp, #16]
 800acac:	9307      	str	r3, [sp, #28]
 800acae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acb2:	931a      	str	r3, [sp, #104]	; 0x68
 800acb4:	4654      	mov	r4, sl
 800acb6:	2205      	movs	r2, #5
 800acb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acbc:	4851      	ldr	r0, [pc, #324]	; (800ae04 <_svfiprintf_r+0x1ec>)
 800acbe:	f7f5 fac7 	bl	8000250 <memchr>
 800acc2:	9a04      	ldr	r2, [sp, #16]
 800acc4:	b9d8      	cbnz	r0, 800acfe <_svfiprintf_r+0xe6>
 800acc6:	06d0      	lsls	r0, r2, #27
 800acc8:	bf44      	itt	mi
 800acca:	2320      	movmi	r3, #32
 800accc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acd0:	0711      	lsls	r1, r2, #28
 800acd2:	bf44      	itt	mi
 800acd4:	232b      	movmi	r3, #43	; 0x2b
 800acd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acda:	f89a 3000 	ldrb.w	r3, [sl]
 800acde:	2b2a      	cmp	r3, #42	; 0x2a
 800ace0:	d015      	beq.n	800ad0e <_svfiprintf_r+0xf6>
 800ace2:	9a07      	ldr	r2, [sp, #28]
 800ace4:	4654      	mov	r4, sl
 800ace6:	2000      	movs	r0, #0
 800ace8:	f04f 0c0a 	mov.w	ip, #10
 800acec:	4621      	mov	r1, r4
 800acee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acf2:	3b30      	subs	r3, #48	; 0x30
 800acf4:	2b09      	cmp	r3, #9
 800acf6:	d94e      	bls.n	800ad96 <_svfiprintf_r+0x17e>
 800acf8:	b1b0      	cbz	r0, 800ad28 <_svfiprintf_r+0x110>
 800acfa:	9207      	str	r2, [sp, #28]
 800acfc:	e014      	b.n	800ad28 <_svfiprintf_r+0x110>
 800acfe:	eba0 0308 	sub.w	r3, r0, r8
 800ad02:	fa09 f303 	lsl.w	r3, r9, r3
 800ad06:	4313      	orrs	r3, r2
 800ad08:	9304      	str	r3, [sp, #16]
 800ad0a:	46a2      	mov	sl, r4
 800ad0c:	e7d2      	b.n	800acb4 <_svfiprintf_r+0x9c>
 800ad0e:	9b03      	ldr	r3, [sp, #12]
 800ad10:	1d19      	adds	r1, r3, #4
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	9103      	str	r1, [sp, #12]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	bfbb      	ittet	lt
 800ad1a:	425b      	neglt	r3, r3
 800ad1c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad20:	9307      	strge	r3, [sp, #28]
 800ad22:	9307      	strlt	r3, [sp, #28]
 800ad24:	bfb8      	it	lt
 800ad26:	9204      	strlt	r2, [sp, #16]
 800ad28:	7823      	ldrb	r3, [r4, #0]
 800ad2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ad2c:	d10c      	bne.n	800ad48 <_svfiprintf_r+0x130>
 800ad2e:	7863      	ldrb	r3, [r4, #1]
 800ad30:	2b2a      	cmp	r3, #42	; 0x2a
 800ad32:	d135      	bne.n	800ada0 <_svfiprintf_r+0x188>
 800ad34:	9b03      	ldr	r3, [sp, #12]
 800ad36:	1d1a      	adds	r2, r3, #4
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	9203      	str	r2, [sp, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	bfb8      	it	lt
 800ad40:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad44:	3402      	adds	r4, #2
 800ad46:	9305      	str	r3, [sp, #20]
 800ad48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae14 <_svfiprintf_r+0x1fc>
 800ad4c:	7821      	ldrb	r1, [r4, #0]
 800ad4e:	2203      	movs	r2, #3
 800ad50:	4650      	mov	r0, sl
 800ad52:	f7f5 fa7d 	bl	8000250 <memchr>
 800ad56:	b140      	cbz	r0, 800ad6a <_svfiprintf_r+0x152>
 800ad58:	2340      	movs	r3, #64	; 0x40
 800ad5a:	eba0 000a 	sub.w	r0, r0, sl
 800ad5e:	fa03 f000 	lsl.w	r0, r3, r0
 800ad62:	9b04      	ldr	r3, [sp, #16]
 800ad64:	4303      	orrs	r3, r0
 800ad66:	3401      	adds	r4, #1
 800ad68:	9304      	str	r3, [sp, #16]
 800ad6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad6e:	4826      	ldr	r0, [pc, #152]	; (800ae08 <_svfiprintf_r+0x1f0>)
 800ad70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad74:	2206      	movs	r2, #6
 800ad76:	f7f5 fa6b 	bl	8000250 <memchr>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d038      	beq.n	800adf0 <_svfiprintf_r+0x1d8>
 800ad7e:	4b23      	ldr	r3, [pc, #140]	; (800ae0c <_svfiprintf_r+0x1f4>)
 800ad80:	bb1b      	cbnz	r3, 800adca <_svfiprintf_r+0x1b2>
 800ad82:	9b03      	ldr	r3, [sp, #12]
 800ad84:	3307      	adds	r3, #7
 800ad86:	f023 0307 	bic.w	r3, r3, #7
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	9303      	str	r3, [sp, #12]
 800ad8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad90:	4433      	add	r3, r6
 800ad92:	9309      	str	r3, [sp, #36]	; 0x24
 800ad94:	e767      	b.n	800ac66 <_svfiprintf_r+0x4e>
 800ad96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	2001      	movs	r0, #1
 800ad9e:	e7a5      	b.n	800acec <_svfiprintf_r+0xd4>
 800ada0:	2300      	movs	r3, #0
 800ada2:	3401      	adds	r4, #1
 800ada4:	9305      	str	r3, [sp, #20]
 800ada6:	4619      	mov	r1, r3
 800ada8:	f04f 0c0a 	mov.w	ip, #10
 800adac:	4620      	mov	r0, r4
 800adae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adb2:	3a30      	subs	r2, #48	; 0x30
 800adb4:	2a09      	cmp	r2, #9
 800adb6:	d903      	bls.n	800adc0 <_svfiprintf_r+0x1a8>
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d0c5      	beq.n	800ad48 <_svfiprintf_r+0x130>
 800adbc:	9105      	str	r1, [sp, #20]
 800adbe:	e7c3      	b.n	800ad48 <_svfiprintf_r+0x130>
 800adc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800adc4:	4604      	mov	r4, r0
 800adc6:	2301      	movs	r3, #1
 800adc8:	e7f0      	b.n	800adac <_svfiprintf_r+0x194>
 800adca:	ab03      	add	r3, sp, #12
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	462a      	mov	r2, r5
 800add0:	4b0f      	ldr	r3, [pc, #60]	; (800ae10 <_svfiprintf_r+0x1f8>)
 800add2:	a904      	add	r1, sp, #16
 800add4:	4638      	mov	r0, r7
 800add6:	f3af 8000 	nop.w
 800adda:	1c42      	adds	r2, r0, #1
 800addc:	4606      	mov	r6, r0
 800adde:	d1d6      	bne.n	800ad8e <_svfiprintf_r+0x176>
 800ade0:	89ab      	ldrh	r3, [r5, #12]
 800ade2:	065b      	lsls	r3, r3, #25
 800ade4:	f53f af2c 	bmi.w	800ac40 <_svfiprintf_r+0x28>
 800ade8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adea:	b01d      	add	sp, #116	; 0x74
 800adec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf0:	ab03      	add	r3, sp, #12
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	462a      	mov	r2, r5
 800adf6:	4b06      	ldr	r3, [pc, #24]	; (800ae10 <_svfiprintf_r+0x1f8>)
 800adf8:	a904      	add	r1, sp, #16
 800adfa:	4638      	mov	r0, r7
 800adfc:	f000 f87a 	bl	800aef4 <_printf_i>
 800ae00:	e7eb      	b.n	800adda <_svfiprintf_r+0x1c2>
 800ae02:	bf00      	nop
 800ae04:	0800ea4c 	.word	0x0800ea4c
 800ae08:	0800ea56 	.word	0x0800ea56
 800ae0c:	00000000 	.word	0x00000000
 800ae10:	0800ab61 	.word	0x0800ab61
 800ae14:	0800ea52 	.word	0x0800ea52

0800ae18 <_printf_common>:
 800ae18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae1c:	4616      	mov	r6, r2
 800ae1e:	4699      	mov	r9, r3
 800ae20:	688a      	ldr	r2, [r1, #8]
 800ae22:	690b      	ldr	r3, [r1, #16]
 800ae24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	bfb8      	it	lt
 800ae2c:	4613      	movlt	r3, r2
 800ae2e:	6033      	str	r3, [r6, #0]
 800ae30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae34:	4607      	mov	r7, r0
 800ae36:	460c      	mov	r4, r1
 800ae38:	b10a      	cbz	r2, 800ae3e <_printf_common+0x26>
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	6033      	str	r3, [r6, #0]
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	0699      	lsls	r1, r3, #26
 800ae42:	bf42      	ittt	mi
 800ae44:	6833      	ldrmi	r3, [r6, #0]
 800ae46:	3302      	addmi	r3, #2
 800ae48:	6033      	strmi	r3, [r6, #0]
 800ae4a:	6825      	ldr	r5, [r4, #0]
 800ae4c:	f015 0506 	ands.w	r5, r5, #6
 800ae50:	d106      	bne.n	800ae60 <_printf_common+0x48>
 800ae52:	f104 0a19 	add.w	sl, r4, #25
 800ae56:	68e3      	ldr	r3, [r4, #12]
 800ae58:	6832      	ldr	r2, [r6, #0]
 800ae5a:	1a9b      	subs	r3, r3, r2
 800ae5c:	42ab      	cmp	r3, r5
 800ae5e:	dc26      	bgt.n	800aeae <_printf_common+0x96>
 800ae60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae64:	1e13      	subs	r3, r2, #0
 800ae66:	6822      	ldr	r2, [r4, #0]
 800ae68:	bf18      	it	ne
 800ae6a:	2301      	movne	r3, #1
 800ae6c:	0692      	lsls	r2, r2, #26
 800ae6e:	d42b      	bmi.n	800aec8 <_printf_common+0xb0>
 800ae70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae74:	4649      	mov	r1, r9
 800ae76:	4638      	mov	r0, r7
 800ae78:	47c0      	blx	r8
 800ae7a:	3001      	adds	r0, #1
 800ae7c:	d01e      	beq.n	800aebc <_printf_common+0xa4>
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	68e5      	ldr	r5, [r4, #12]
 800ae82:	6832      	ldr	r2, [r6, #0]
 800ae84:	f003 0306 	and.w	r3, r3, #6
 800ae88:	2b04      	cmp	r3, #4
 800ae8a:	bf08      	it	eq
 800ae8c:	1aad      	subeq	r5, r5, r2
 800ae8e:	68a3      	ldr	r3, [r4, #8]
 800ae90:	6922      	ldr	r2, [r4, #16]
 800ae92:	bf0c      	ite	eq
 800ae94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae98:	2500      	movne	r5, #0
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	bfc4      	itt	gt
 800ae9e:	1a9b      	subgt	r3, r3, r2
 800aea0:	18ed      	addgt	r5, r5, r3
 800aea2:	2600      	movs	r6, #0
 800aea4:	341a      	adds	r4, #26
 800aea6:	42b5      	cmp	r5, r6
 800aea8:	d11a      	bne.n	800aee0 <_printf_common+0xc8>
 800aeaa:	2000      	movs	r0, #0
 800aeac:	e008      	b.n	800aec0 <_printf_common+0xa8>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	4652      	mov	r2, sl
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	47c0      	blx	r8
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d103      	bne.n	800aec4 <_printf_common+0xac>
 800aebc:	f04f 30ff 	mov.w	r0, #4294967295
 800aec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aec4:	3501      	adds	r5, #1
 800aec6:	e7c6      	b.n	800ae56 <_printf_common+0x3e>
 800aec8:	18e1      	adds	r1, r4, r3
 800aeca:	1c5a      	adds	r2, r3, #1
 800aecc:	2030      	movs	r0, #48	; 0x30
 800aece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aed2:	4422      	add	r2, r4
 800aed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aedc:	3302      	adds	r3, #2
 800aede:	e7c7      	b.n	800ae70 <_printf_common+0x58>
 800aee0:	2301      	movs	r3, #1
 800aee2:	4622      	mov	r2, r4
 800aee4:	4649      	mov	r1, r9
 800aee6:	4638      	mov	r0, r7
 800aee8:	47c0      	blx	r8
 800aeea:	3001      	adds	r0, #1
 800aeec:	d0e6      	beq.n	800aebc <_printf_common+0xa4>
 800aeee:	3601      	adds	r6, #1
 800aef0:	e7d9      	b.n	800aea6 <_printf_common+0x8e>
	...

0800aef4 <_printf_i>:
 800aef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aef8:	460c      	mov	r4, r1
 800aefa:	4691      	mov	r9, r2
 800aefc:	7e27      	ldrb	r7, [r4, #24]
 800aefe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800af00:	2f78      	cmp	r7, #120	; 0x78
 800af02:	4680      	mov	r8, r0
 800af04:	469a      	mov	sl, r3
 800af06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af0a:	d807      	bhi.n	800af1c <_printf_i+0x28>
 800af0c:	2f62      	cmp	r7, #98	; 0x62
 800af0e:	d80a      	bhi.n	800af26 <_printf_i+0x32>
 800af10:	2f00      	cmp	r7, #0
 800af12:	f000 80d8 	beq.w	800b0c6 <_printf_i+0x1d2>
 800af16:	2f58      	cmp	r7, #88	; 0x58
 800af18:	f000 80a3 	beq.w	800b062 <_printf_i+0x16e>
 800af1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800af20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af24:	e03a      	b.n	800af9c <_printf_i+0xa8>
 800af26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af2a:	2b15      	cmp	r3, #21
 800af2c:	d8f6      	bhi.n	800af1c <_printf_i+0x28>
 800af2e:	a001      	add	r0, pc, #4	; (adr r0, 800af34 <_printf_i+0x40>)
 800af30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800af34:	0800af8d 	.word	0x0800af8d
 800af38:	0800afa1 	.word	0x0800afa1
 800af3c:	0800af1d 	.word	0x0800af1d
 800af40:	0800af1d 	.word	0x0800af1d
 800af44:	0800af1d 	.word	0x0800af1d
 800af48:	0800af1d 	.word	0x0800af1d
 800af4c:	0800afa1 	.word	0x0800afa1
 800af50:	0800af1d 	.word	0x0800af1d
 800af54:	0800af1d 	.word	0x0800af1d
 800af58:	0800af1d 	.word	0x0800af1d
 800af5c:	0800af1d 	.word	0x0800af1d
 800af60:	0800b0ad 	.word	0x0800b0ad
 800af64:	0800afd1 	.word	0x0800afd1
 800af68:	0800b08f 	.word	0x0800b08f
 800af6c:	0800af1d 	.word	0x0800af1d
 800af70:	0800af1d 	.word	0x0800af1d
 800af74:	0800b0cf 	.word	0x0800b0cf
 800af78:	0800af1d 	.word	0x0800af1d
 800af7c:	0800afd1 	.word	0x0800afd1
 800af80:	0800af1d 	.word	0x0800af1d
 800af84:	0800af1d 	.word	0x0800af1d
 800af88:	0800b097 	.word	0x0800b097
 800af8c:	680b      	ldr	r3, [r1, #0]
 800af8e:	1d1a      	adds	r2, r3, #4
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	600a      	str	r2, [r1, #0]
 800af94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800af98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af9c:	2301      	movs	r3, #1
 800af9e:	e0a3      	b.n	800b0e8 <_printf_i+0x1f4>
 800afa0:	6825      	ldr	r5, [r4, #0]
 800afa2:	6808      	ldr	r0, [r1, #0]
 800afa4:	062e      	lsls	r6, r5, #24
 800afa6:	f100 0304 	add.w	r3, r0, #4
 800afaa:	d50a      	bpl.n	800afc2 <_printf_i+0xce>
 800afac:	6805      	ldr	r5, [r0, #0]
 800afae:	600b      	str	r3, [r1, #0]
 800afb0:	2d00      	cmp	r5, #0
 800afb2:	da03      	bge.n	800afbc <_printf_i+0xc8>
 800afb4:	232d      	movs	r3, #45	; 0x2d
 800afb6:	426d      	negs	r5, r5
 800afb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afbc:	485e      	ldr	r0, [pc, #376]	; (800b138 <_printf_i+0x244>)
 800afbe:	230a      	movs	r3, #10
 800afc0:	e019      	b.n	800aff6 <_printf_i+0x102>
 800afc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800afc6:	6805      	ldr	r5, [r0, #0]
 800afc8:	600b      	str	r3, [r1, #0]
 800afca:	bf18      	it	ne
 800afcc:	b22d      	sxthne	r5, r5
 800afce:	e7ef      	b.n	800afb0 <_printf_i+0xbc>
 800afd0:	680b      	ldr	r3, [r1, #0]
 800afd2:	6825      	ldr	r5, [r4, #0]
 800afd4:	1d18      	adds	r0, r3, #4
 800afd6:	6008      	str	r0, [r1, #0]
 800afd8:	0628      	lsls	r0, r5, #24
 800afda:	d501      	bpl.n	800afe0 <_printf_i+0xec>
 800afdc:	681d      	ldr	r5, [r3, #0]
 800afde:	e002      	b.n	800afe6 <_printf_i+0xf2>
 800afe0:	0669      	lsls	r1, r5, #25
 800afe2:	d5fb      	bpl.n	800afdc <_printf_i+0xe8>
 800afe4:	881d      	ldrh	r5, [r3, #0]
 800afe6:	4854      	ldr	r0, [pc, #336]	; (800b138 <_printf_i+0x244>)
 800afe8:	2f6f      	cmp	r7, #111	; 0x6f
 800afea:	bf0c      	ite	eq
 800afec:	2308      	moveq	r3, #8
 800afee:	230a      	movne	r3, #10
 800aff0:	2100      	movs	r1, #0
 800aff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aff6:	6866      	ldr	r6, [r4, #4]
 800aff8:	60a6      	str	r6, [r4, #8]
 800affa:	2e00      	cmp	r6, #0
 800affc:	bfa2      	ittt	ge
 800affe:	6821      	ldrge	r1, [r4, #0]
 800b000:	f021 0104 	bicge.w	r1, r1, #4
 800b004:	6021      	strge	r1, [r4, #0]
 800b006:	b90d      	cbnz	r5, 800b00c <_printf_i+0x118>
 800b008:	2e00      	cmp	r6, #0
 800b00a:	d04d      	beq.n	800b0a8 <_printf_i+0x1b4>
 800b00c:	4616      	mov	r6, r2
 800b00e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b012:	fb03 5711 	mls	r7, r3, r1, r5
 800b016:	5dc7      	ldrb	r7, [r0, r7]
 800b018:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b01c:	462f      	mov	r7, r5
 800b01e:	42bb      	cmp	r3, r7
 800b020:	460d      	mov	r5, r1
 800b022:	d9f4      	bls.n	800b00e <_printf_i+0x11a>
 800b024:	2b08      	cmp	r3, #8
 800b026:	d10b      	bne.n	800b040 <_printf_i+0x14c>
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	07df      	lsls	r7, r3, #31
 800b02c:	d508      	bpl.n	800b040 <_printf_i+0x14c>
 800b02e:	6923      	ldr	r3, [r4, #16]
 800b030:	6861      	ldr	r1, [r4, #4]
 800b032:	4299      	cmp	r1, r3
 800b034:	bfde      	ittt	le
 800b036:	2330      	movle	r3, #48	; 0x30
 800b038:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b03c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b040:	1b92      	subs	r2, r2, r6
 800b042:	6122      	str	r2, [r4, #16]
 800b044:	f8cd a000 	str.w	sl, [sp]
 800b048:	464b      	mov	r3, r9
 800b04a:	aa03      	add	r2, sp, #12
 800b04c:	4621      	mov	r1, r4
 800b04e:	4640      	mov	r0, r8
 800b050:	f7ff fee2 	bl	800ae18 <_printf_common>
 800b054:	3001      	adds	r0, #1
 800b056:	d14c      	bne.n	800b0f2 <_printf_i+0x1fe>
 800b058:	f04f 30ff 	mov.w	r0, #4294967295
 800b05c:	b004      	add	sp, #16
 800b05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b062:	4835      	ldr	r0, [pc, #212]	; (800b138 <_printf_i+0x244>)
 800b064:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	680e      	ldr	r6, [r1, #0]
 800b06c:	061f      	lsls	r7, r3, #24
 800b06e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b072:	600e      	str	r6, [r1, #0]
 800b074:	d514      	bpl.n	800b0a0 <_printf_i+0x1ac>
 800b076:	07d9      	lsls	r1, r3, #31
 800b078:	bf44      	itt	mi
 800b07a:	f043 0320 	orrmi.w	r3, r3, #32
 800b07e:	6023      	strmi	r3, [r4, #0]
 800b080:	b91d      	cbnz	r5, 800b08a <_printf_i+0x196>
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	f023 0320 	bic.w	r3, r3, #32
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	2310      	movs	r3, #16
 800b08c:	e7b0      	b.n	800aff0 <_printf_i+0xfc>
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	f043 0320 	orr.w	r3, r3, #32
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	2378      	movs	r3, #120	; 0x78
 800b098:	4828      	ldr	r0, [pc, #160]	; (800b13c <_printf_i+0x248>)
 800b09a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b09e:	e7e3      	b.n	800b068 <_printf_i+0x174>
 800b0a0:	065e      	lsls	r6, r3, #25
 800b0a2:	bf48      	it	mi
 800b0a4:	b2ad      	uxthmi	r5, r5
 800b0a6:	e7e6      	b.n	800b076 <_printf_i+0x182>
 800b0a8:	4616      	mov	r6, r2
 800b0aa:	e7bb      	b.n	800b024 <_printf_i+0x130>
 800b0ac:	680b      	ldr	r3, [r1, #0]
 800b0ae:	6826      	ldr	r6, [r4, #0]
 800b0b0:	6960      	ldr	r0, [r4, #20]
 800b0b2:	1d1d      	adds	r5, r3, #4
 800b0b4:	600d      	str	r5, [r1, #0]
 800b0b6:	0635      	lsls	r5, r6, #24
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	d501      	bpl.n	800b0c0 <_printf_i+0x1cc>
 800b0bc:	6018      	str	r0, [r3, #0]
 800b0be:	e002      	b.n	800b0c6 <_printf_i+0x1d2>
 800b0c0:	0671      	lsls	r1, r6, #25
 800b0c2:	d5fb      	bpl.n	800b0bc <_printf_i+0x1c8>
 800b0c4:	8018      	strh	r0, [r3, #0]
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	6123      	str	r3, [r4, #16]
 800b0ca:	4616      	mov	r6, r2
 800b0cc:	e7ba      	b.n	800b044 <_printf_i+0x150>
 800b0ce:	680b      	ldr	r3, [r1, #0]
 800b0d0:	1d1a      	adds	r2, r3, #4
 800b0d2:	600a      	str	r2, [r1, #0]
 800b0d4:	681e      	ldr	r6, [r3, #0]
 800b0d6:	6862      	ldr	r2, [r4, #4]
 800b0d8:	2100      	movs	r1, #0
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f7f5 f8b8 	bl	8000250 <memchr>
 800b0e0:	b108      	cbz	r0, 800b0e6 <_printf_i+0x1f2>
 800b0e2:	1b80      	subs	r0, r0, r6
 800b0e4:	6060      	str	r0, [r4, #4]
 800b0e6:	6863      	ldr	r3, [r4, #4]
 800b0e8:	6123      	str	r3, [r4, #16]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0f0:	e7a8      	b.n	800b044 <_printf_i+0x150>
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	4632      	mov	r2, r6
 800b0f6:	4649      	mov	r1, r9
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	47d0      	blx	sl
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	d0ab      	beq.n	800b058 <_printf_i+0x164>
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	079b      	lsls	r3, r3, #30
 800b104:	d413      	bmi.n	800b12e <_printf_i+0x23a>
 800b106:	68e0      	ldr	r0, [r4, #12]
 800b108:	9b03      	ldr	r3, [sp, #12]
 800b10a:	4298      	cmp	r0, r3
 800b10c:	bfb8      	it	lt
 800b10e:	4618      	movlt	r0, r3
 800b110:	e7a4      	b.n	800b05c <_printf_i+0x168>
 800b112:	2301      	movs	r3, #1
 800b114:	4632      	mov	r2, r6
 800b116:	4649      	mov	r1, r9
 800b118:	4640      	mov	r0, r8
 800b11a:	47d0      	blx	sl
 800b11c:	3001      	adds	r0, #1
 800b11e:	d09b      	beq.n	800b058 <_printf_i+0x164>
 800b120:	3501      	adds	r5, #1
 800b122:	68e3      	ldr	r3, [r4, #12]
 800b124:	9903      	ldr	r1, [sp, #12]
 800b126:	1a5b      	subs	r3, r3, r1
 800b128:	42ab      	cmp	r3, r5
 800b12a:	dcf2      	bgt.n	800b112 <_printf_i+0x21e>
 800b12c:	e7eb      	b.n	800b106 <_printf_i+0x212>
 800b12e:	2500      	movs	r5, #0
 800b130:	f104 0619 	add.w	r6, r4, #25
 800b134:	e7f5      	b.n	800b122 <_printf_i+0x22e>
 800b136:	bf00      	nop
 800b138:	0800ea5d 	.word	0x0800ea5d
 800b13c:	0800ea6e 	.word	0x0800ea6e

0800b140 <_realloc_r>:
 800b140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b142:	4607      	mov	r7, r0
 800b144:	4614      	mov	r4, r2
 800b146:	460e      	mov	r6, r1
 800b148:	b921      	cbnz	r1, 800b154 <_realloc_r+0x14>
 800b14a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b14e:	4611      	mov	r1, r2
 800b150:	f7ff bbbe 	b.w	800a8d0 <_malloc_r>
 800b154:	b922      	cbnz	r2, 800b160 <_realloc_r+0x20>
 800b156:	f7ff fb6b 	bl	800a830 <_free_r>
 800b15a:	4625      	mov	r5, r4
 800b15c:	4628      	mov	r0, r5
 800b15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b160:	f000 f814 	bl	800b18c <_malloc_usable_size_r>
 800b164:	42a0      	cmp	r0, r4
 800b166:	d20f      	bcs.n	800b188 <_realloc_r+0x48>
 800b168:	4621      	mov	r1, r4
 800b16a:	4638      	mov	r0, r7
 800b16c:	f7ff fbb0 	bl	800a8d0 <_malloc_r>
 800b170:	4605      	mov	r5, r0
 800b172:	2800      	cmp	r0, #0
 800b174:	d0f2      	beq.n	800b15c <_realloc_r+0x1c>
 800b176:	4631      	mov	r1, r6
 800b178:	4622      	mov	r2, r4
 800b17a:	f7ff fb29 	bl	800a7d0 <memcpy>
 800b17e:	4631      	mov	r1, r6
 800b180:	4638      	mov	r0, r7
 800b182:	f7ff fb55 	bl	800a830 <_free_r>
 800b186:	e7e9      	b.n	800b15c <_realloc_r+0x1c>
 800b188:	4635      	mov	r5, r6
 800b18a:	e7e7      	b.n	800b15c <_realloc_r+0x1c>

0800b18c <_malloc_usable_size_r>:
 800b18c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b190:	1f18      	subs	r0, r3, #4
 800b192:	2b00      	cmp	r3, #0
 800b194:	bfbc      	itt	lt
 800b196:	580b      	ldrlt	r3, [r1, r0]
 800b198:	18c0      	addlt	r0, r0, r3
 800b19a:	4770      	bx	lr

0800b19c <_init>:
 800b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19e:	bf00      	nop
 800b1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1a2:	bc08      	pop	{r3}
 800b1a4:	469e      	mov	lr, r3
 800b1a6:	4770      	bx	lr

0800b1a8 <_fini>:
 800b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1aa:	bf00      	nop
 800b1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ae:	bc08      	pop	{r3}
 800b1b0:	469e      	mov	lr, r3
 800b1b2:	4770      	bx	lr
