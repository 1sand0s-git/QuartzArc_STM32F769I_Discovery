
STM32 F7D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7b4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038ac  0800c9b4  0800c9b4  0001c9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010260  08010260  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08010260  08010260  00020260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010268  08010268  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010268  08010268  00020268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801026c  0801026c  0002026c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08010270  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000078  080102e8  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  080102e8  000304e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002b9a3  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0004aacf  00000000  00000000  0005ba49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009569  00000000  00000000  000a6518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002190  00000000  00000000  000afa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c842  00000000  00000000  000b1c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001f38  00000000  00000000  001fe460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003bfcf  00000000  00000000  00200398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023c367  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096c0  00000000  00000000  0023c3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c99c 	.word	0x0800c99c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	0800c99c 	.word	0x0800c99c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000620 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000604:	4c0b      	ldr	r4, [pc, #44]	; (8000634 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000612:	f002 f863 	bl	80026dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000616:	f00b fca7 	bl	800bf68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800061a:	f000 ff55 	bl	80014c8 <main>
  bx  lr    
 800061e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000620:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800062c:	08010270 	.word	0x08010270
  ldr r2, =_sbss
 8000630:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000634:	200004e8 	.word	0x200004e8

08000638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC_IRQHandler>
	...

0800063c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000640:	f3bf 8f4f 	dsb	sy
}
 8000644:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000646:	f3bf 8f6f 	isb	sy
}
 800064a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <SCB_EnableICache+0x48>)
 800064e:	2200      	movs	r2, #0
 8000650:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000654:	f3bf 8f4f 	dsb	sy
}
 8000658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800065a:	f3bf 8f6f 	isb	sy
}
 800065e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SCB_EnableICache+0x48>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SCB_EnableICache+0x48>)
 8000666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800066c:	f3bf 8f4f 	dsb	sy
}
 8000670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000672:	f3bf 8f6f 	isb	sy
}
 8000676:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000690:	2200      	movs	r2, #0
 8000692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000696:	f3bf 8f4f 	dsb	sy
}
 800069a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <SCB_EnableDCache+0x9c>)
 800069e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	0b5b      	lsrs	r3, r3, #13
 80006a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	015a      	lsls	r2, r3, #5
 80006bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80006c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006c6:	4917      	ldr	r1, [pc, #92]	; (8000724 <SCB_EnableDCache+0x9c>)
 80006c8:	4313      	orrs	r3, r2
 80006ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	1e5a      	subs	r2, r3, #1
 80006d2:	60ba      	str	r2, [r7, #8]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d000      	beq.n	80006e4 <SCB_EnableDCache+0x5c>
      do {
 80006e2:	e7e9      	b.n	80006b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	60fa      	str	r2, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d000      	beq.n	80006fa <SCB_EnableDCache+0x72>
    do {
 80006f8:	e7d9      	b.n	80006ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80006fa:	f3bf 8f4f 	dsb	sy
}
 80006fe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <SCB_EnableDCache+0x9c>)
 8000706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800070a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800070c:	f3bf 8f4f 	dsb	sy
}
 8000710:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000712:	f3bf 8f6f 	isb	sy
}
 8000716:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks
//Also enables all GPIO ports, and both DMA1 and DMA2 peripherals
//
//Returns QA_OK if successful, or QA_Fail if initialization failed
QA_Result SystemInitialize(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b0c6      	sub	sp, #280	; 0x118
 800072c:	af00      	add	r7, sp, #0

  //------------------------------------
  //Enable CPU Instruction & Data Caches
  SCB_EnableICache();
 800072e:	f7ff ff85 	bl	800063c <SCB_EnableICache>
  SCB_EnableDCache();
 8000732:	f7ff ffa9 	bl	8000688 <SCB_EnableDCache>

	//----------------------
	//Enable ART Accelerator
  __HAL_FLASH_ART_ENABLE();
 8000736:	4b67      	ldr	r3, [pc, #412]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a66      	ldr	r2, [pc, #408]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 800073c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000740:	6013      	str	r3, [r2, #0]

  //---------------------
  //Enable Flash Prefetch
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000742:	4b64      	ldr	r3, [pc, #400]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a63      	ldr	r2, [pc, #396]	; (80008d4 <_Z16SystemInitializev+0x1ac>)
 8000748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074c:	6013      	str	r3, [r2, #0]

  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074e:	2003      	movs	r0, #3
 8000750:	f002 fb96 	bl	8002e80 <HAL_NVIC_SetPriorityGrouping>

  //------------
  //Init SysTick
  HAL_InitTick(TICK_INT_PRIORITY);
 8000754:	2000      	movs	r0, #0
 8000756:	f002 fa2b 	bl	8002bb0 <HAL_InitTick>

  //------------------------------
  //Configure LSE Drive Capability
  HAL_PWR_EnableBkUpAccess();
 800075a:	f004 fadf 	bl	8004d1c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800075e:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000762:	4a5d      	ldr	r2, [pc, #372]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000764:	f023 0318 	bic.w	r3, r3, #24
 8000768:	6713      	str	r3, [r2, #112]	; 0x70

  //------------------------------------------------
  //Configure Main Internal Regulator Output Voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b5b      	ldr	r3, [pc, #364]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a5a      	ldr	r2, [pc, #360]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b58      	ldr	r3, [pc, #352]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000782:	4b56      	ldr	r3, [pc, #344]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a55      	ldr	r2, [pc, #340]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	4b53      	ldr	r3, [pc, #332]	; (80008dc <_Z16SystemInitializev+0x1b4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
 8000798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  //
  //Configure High Speed External (HSE) oscillator to be used for primary system clocks, and setup primary PLL to provide a 216MHz clock
  //Configure Low Speed External (LSE) oscillator to be used for clock source for Real Timer Clock (RTC) peripheral
  //NOTE: HSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 25MHz oscillator (labeled X2 on the PCB)
  //      LSE Oscillator on STM32F769I-DISCO/STM32F769I-DISC1 board is provided by a 32.768kHz oscillator (labeled X3 on the PCB)
  RCC_OscInitTypeDef RCC_OscInit = {0};
 800079a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800079e:	2234      	movs	r2, #52	; 0x34
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00b fc3c 	bl	800c020 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | //Define HSE (High Speed External) oscillator to be configured (used for main system clock)
 80007a8:	2305      	movs	r3, #5
 80007aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  		                         RCC_OSCILLATORTYPE_LSE;  //Define LSE (Low Speed External) oscillator to be configured (used for RTC - Real Time Clock)
  RCC_OscInit.HSEState       = RCC_HSE_ON;              //Enable HSE
 80007ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInit.LSEState       = RCC_LSE_ON;              //Enable LSE
 80007b6:	2301      	movs	r3, #1
 80007b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;              //Enable primary PLL
 80007bc:	2302      	movs	r3, #2
 80007be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;       //Set primary PLL source to HSE
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    //Set primary PLL values required for 216Mhz system clock
  RCC_OscInit.PLL.PLLM       = 25;
 80007ca:	2319      	movs	r3, #25
 80007cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInit.PLL.PLLN       = 432;
 80007d0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80007d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInit.PLL.PLLQ       = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {  //Initialize Oscillators using values in init structure
 80007e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 ff7b 	bl	80056e4 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <_Z16SystemInitializev+0xda>
  	return QA_Fail;
 80007fe:	2301      	movs	r3, #1
 8000800:	e123      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a34      	ldr	r2, [pc, #208]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <_Z16SystemInitializev+0x1b0>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
 8000818:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  //---------------------
  //Enable Overdrive Mode
  //
  //This is required to provide best system stability given that we are running at the maximum clock rate of 216MHz for the STM32F769I device
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800081a:	f004 fa8f 	bl	8004d3c <HAL_PWREx_EnableOverDrive>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	bf14      	ite	ne
 8000824:	2301      	movne	r3, #1
 8000826:	2300      	moveq	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <_Z16SystemInitializev+0x10a>
  	return QA_Fail;
 800082e:	2301      	movs	r3, #1
 8000830:	e10b      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //---------------------------
  //Initialize CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000832:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |      //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 8000842:	230f      	movs	r3, #15
 8000844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  		                         RCC_CLOCKTYPE_SYSCLK |
                               RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;  //Define primary PLL clock as system clock source
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;          //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 216MHz
 800084e:	2300      	movs	r3, #0
 8000850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV4;            //Set clock divider for peripheral bus 1 (APB1), DIV4 provides an APB1 frequency of 54MHz
 8000854:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                                                         //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 108MHz

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;            //Set clock divider for peripheral bus 2 (APB2), DIV2 provides an APB2 frequency of 108MHz
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                                                         //NOTE: APB2 timer clocks are clock doubled, providing APB2 timers with 216MHz clocks

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_7) != HAL_OK) { //Initialize system clocks using required values, and setting Flash latency to 7 cycles
 8000864:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000868:	2107      	movs	r1, #7
 800086a:	4618      	mov	r0, r3
 800086c:	f005 f9e8 	bl	8005c40 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf14      	ite	ne
 8000876:	2301      	movne	r3, #1
 8000878:	2300      	moveq	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <_Z16SystemInitializev+0x15c>
  	return QA_Fail;
 8000880:	2301      	movs	r3, #1
 8000882:	e0e2      	b.n	8000a4a <_Z16SystemInitializev+0x322>
  }

  //----------------------------
  //Initialize Peripheral Clocks
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 8000884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000888:	2290      	movs	r2, #144	; 0x90
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f00b fbc7 	bl	800c020 <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC |
 8000892:	2328      	movs	r3, #40	; 0x28
 8000894:	643b      	str	r3, [r7, #64]	; 0x40
  		                                     RCC_PERIPHCLK_LTDC;

    //Define settings for PLLSAI, as this PLL is also used as the clock source for the LTDC peripheral which we require to run the LCD screen
	RCC_PeriphClkInit.PLLSAI.PLLSAIN       = 384;
 8000896:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800089a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_PeriphClkInit.PLLSAI.PLLSAIP       = RCC_PLLSAIP_DIV8;
 800089c:	2303      	movs	r3, #3
 800089e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_PeriphClkInit.PLLSAI.PLLSAIR       = 7;
 80008a0:	2307      	movs	r3, #7
 80008a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_PeriphClkInit.PLLSAI.PLLSAIQ       = 8;
 80008a4:	2308      	movs	r3, #8
 80008a6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_PeriphClkInit.PLLSAIDivQ           = 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_PeriphClkInit.PLLSAIDivR           = RCC_PLLSAIDIVR_2;
 80008ac:	2300      	movs	r3, #0
 80008ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  RCC_PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE; //Set the LSE oscillator as the clock source for the Real Time Clock
 80008b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b4:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK) { //Initialize the peripheral clocks used the required values
 80008b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ba:	4618      	mov	r0, r3
 80008bc:	f005 fb96 	bl	8005fec <HAL_RCCEx_PeriphCLKConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	bf14      	ite	ne
 80008c6:	2301      	movne	r3, #1
 80008c8:	2300      	moveq	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d007      	beq.n	80008e0 <_Z16SystemInitializev+0x1b8>
  	return QA_Fail;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e0ba      	b.n	8000a4a <_Z16SystemInitializev+0x322>
 80008d4:	40023c00 	.word	0x40023c00
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000
  }

  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b5c      	ldr	r3, [pc, #368]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a5b      	ldr	r2, [pc, #364]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
 80008ec:	4b59      	ldr	r3, [pc, #356]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
 80008f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b56      	ldr	r3, [pc, #344]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a55      	ldr	r2, [pc, #340]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b53      	ldr	r3, [pc, #332]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000910:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a4f      	ldr	r2, [pc, #316]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000928:	4b4a      	ldr	r3, [pc, #296]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a49      	ldr	r2, [pc, #292]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000940:	4b44      	ldr	r3, [pc, #272]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a43      	ldr	r2, [pc, #268]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000958:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a3d      	ldr	r2, [pc, #244]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
 800096e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
 800099c:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a27      	ldr	r2, [pc, #156]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009da:	6313      	str	r3, [r2, #48]	; 0x30
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	681b      	ldr	r3, [r3, #0]

  //-----------------
  //Enable DMA Clocks
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <_Z16SystemInitializev+0x32c>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000a40:	463b      	mov	r3, r7
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	463b      	mov	r3, r7
 8000a46:	681b      	ldr	r3, [r3, #0]

  //Return
  return QA_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800

08000a58 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HardFault_Handler+0x1c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f007 f906 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <HardFault_Handler+0x20>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f007 f901 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000a80:	e7fe      	b.n	8000a80 <HardFault_Handler+0x18>
 8000a82:	bf00      	nop
 8000a84:	20000238 	.word	0x20000238
 8000a88:	2000023c 	.word	0x2000023c

08000a8c <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MemManage_Handler+0x1c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f007 f8f4 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <MemManage_Handler+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f007 f8ef 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x18>
 8000aa6:	bf00      	nop
 8000aa8:	20000238 	.word	0x20000238
 8000aac:	2000023c 	.word	0x2000023c

08000ab0 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <BusFault_Handler+0x1c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f007 f8e2 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <BusFault_Handler+0x20>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f007 f8dd 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000ac8:	e7fe      	b.n	8000ac8 <BusFault_Handler+0x18>
 8000aca:	bf00      	nop
 8000acc:	20000238 	.word	0x20000238
 8000ad0:	2000023c 	.word	0x2000023c

08000ad4 <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <UsageFault_Handler+0x1c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f007 f8d0 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <UsageFault_Handler+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f007 f8cb 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x18>
 8000aee:	bf00      	nop
 8000af0:	20000238 	.word	0x20000238
 8000af4:	2000023c 	.word	0x2000023c

08000af8 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000b26:	f002 f873 	bl	8002c10 <HAL_IncTick>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <USART1_IRQHandler>:
  //Interrupt Handler Functions


//USART1_IRQHandler
//Interrupt Handler Function
void USART1_IRQHandler(void) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL);
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <USART1_IRQHandler+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f00a fefd 	bl	800b93a <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000244 	.word	0x20000244

08000b48 <_ZN7QAD_FMCC1Ev>:

	//------------
	//Constructors

	//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_FMC() :
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	  m_eState(QA_NotInitialized) {}
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2202      	movs	r2, #2
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2204      	movs	r2, #4
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2208      	movs	r2, #8
 8000b72:	615a      	str	r2, [r3, #20]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2220      	movs	r2, #32
 8000b78:	619a      	str	r2, [r3, #24]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2230      	movs	r2, #48	; 0x30
 8000b7e:	61da      	str	r2, [r3, #28]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f240 6203 	movw	r2, #1539	; 0x603
 8000ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <_ZN7QAD_FMC3getEv>:

	//-----------------
	//Singleton Methods
  //
	//Used to retrieve a reference to the singleton class
  static QAD_FMC& get(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  	static QAD_FMC instance;
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	f3bf 8f5b 	dmb	ish
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2301      	moveq	r3, #1
 8000bd4:	2300      	movne	r3, #0
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d010      	beq.n	8000bfe <_ZN7QAD_FMC3getEv+0x42>
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bde:	f00b f96a 	bl	800beb6 <__cxa_guard_acquire>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bf14      	ite	ne
 8000be8:	2301      	movne	r3, #1
 8000bea:	2300      	moveq	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d005      	beq.n	8000bfe <_ZN7QAD_FMC3getEv+0x42>
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <_ZN7QAD_FMC3getEv+0x4c>)
 8000bf4:	f7ff ffa8 	bl	8000b48 <_ZN7QAD_FMCC1Ev>
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <_ZN7QAD_FMC3getEv+0x48>)
 8000bfa:	f00b f968 	bl	800bece <__cxa_guard_release>
  	return instance;
 8000bfe:	4b02      	ldr	r3, [pc, #8]	; (8000c08 <_ZN7QAD_FMC3getEv+0x4c>)
  }
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000100 	.word	0x20000100
 8000c08:	20000094 	.word	0x20000094

08000c0c <_ZN7QAD_FMC4initEv>:

  //NOTE: No deinitialization method is supplied due to SDRAM being seen as a primary system component
  //in this codebase and is required for operation of systems such as LCD among others

  //Used to initialize the FMC peripheral and SDRAM module
  static QA_Result init(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000c10:	f7ff ffd4 	bl	8000bbc <_ZN7QAD_FMC3getEv>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f006 feb0 	bl	800797c <_ZN7QAD_FMC8imp_initEv>
 8000c1c:	4603      	mov	r3, r0
  }
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_ZN7QAD_FMC4testEv>:
  //Memory Testing Methods

  //Used to perform a memory test of the SDRAM module
  //Performs a full read and write test of all 16 megabytes of the SDRAM
  //Returns QA_OK if memory test is successful, or QA_Fail if not successful
  static QA_Result test(void) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  	return get().imp_test();
 8000c26:	f7ff ffc9 	bl	8000bbc <_ZN7QAD_FMC3getEv>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f006 ffc1 	bl	8007bb4 <_ZN7QAD_FMC8imp_testEv>
 8000c32:	4603      	mov	r3, r0
  }
 8000c34:	4618      	mov	r0, r3
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_ZN7QAD_RNGC1Ev>:
	//-----------
	//Constructor

	//As this is a private method within a singleton class, this method will be called the
	//first time the static get() method is called.
	QAD_RNG() :
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_sHandle({0}) {}
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <_ZN7QAD_RNG3getEv>:

  //-----------------
  //Singleton Methods
  //
  //Used to retrieve a reference to the singleton class
  static QAD_RNG& get(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  	static QAD_RNG instance;
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	f3bf 8f5b 	dmb	ish
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf0c      	ite	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	2300      	movne	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d010      	beq.n	8000ca6 <_ZN7QAD_RNG3getEv+0x42>
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000c86:	f00b f916 	bl	800beb6 <__cxa_guard_acquire>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bf14      	ite	ne
 8000c90:	2301      	movne	r3, #1
 8000c92:	2300      	moveq	r3, #0
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <_ZN7QAD_RNG3getEv+0x42>
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <_ZN7QAD_RNG3getEv+0x4c>)
 8000c9c:	f7ff ffcc 	bl	8000c38 <_ZN7QAD_RNGC1Ev>
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <_ZN7QAD_RNG3getEv+0x48>)
 8000ca2:	f00b f914 	bl	800bece <__cxa_guard_release>
  	return instance;
 8000ca6:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <_ZN7QAD_RNG3getEv+0x4c>)
  }
 8000ca8:	4618      	mov	r0, r3
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000118 	.word	0x20000118
 8000cb0:	20000104 	.word	0x20000104

08000cb4 <_ZN7QAD_RNG4initEv>:
  //----------------------
  //Initialization Methods

  //Used to initialize the RNG peripheral
  //Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
  static QA_Result init(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000cb8:	f7ff ffd4 	bl	8000c64 <_ZN7QAD_RNG3getEv>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f008 fe9c 	bl	80099fc <_ZN7QAD_RNG8imp_initEv>
 8000cc4:	4603      	mov	r3, r0
  }
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_ZN7QAD_RTCC1Ev>:
	//------------
	//Constructors

	//As this is a private method within a singleton class, this method will be called the
	//first time the static get() method is called
	QAD_RTC() :
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
		m_eInitState(QA_NotInitialized),
		m_sHandle({0}) {}
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3304      	adds	r3, #4
 8000cdc:	2220      	movs	r2, #32
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f00b f99d 	bl	800c020 <memset>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_ZN7QAD_RTC3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_RTC& get(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
		static QAD_RTC instance;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_ZN7QAD_RTC3getEv+0x48>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	f3bf 8f5b 	dmb	ish
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bf0c      	ite	eq
 8000d06:	2301      	moveq	r3, #1
 8000d08:	2300      	movne	r3, #0
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d010      	beq.n	8000d32 <_ZN7QAD_RTC3getEv+0x42>
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <_ZN7QAD_RTC3getEv+0x48>)
 8000d12:	f00b f8d0 	bl	800beb6 <__cxa_guard_acquire>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	2301      	movne	r3, #1
 8000d1e:	2300      	moveq	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <_ZN7QAD_RTC3getEv+0x42>
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <_ZN7QAD_RTC3getEv+0x4c>)
 8000d28:	f7ff ffcf 	bl	8000cca <_ZN7QAD_RTCC1Ev>
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <_ZN7QAD_RTC3getEv+0x48>)
 8000d2e:	f00b f8ce 	bl	800bece <__cxa_guard_release>
		return instance;
 8000d32:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <_ZN7QAD_RTC3getEv+0x4c>)
	}
 8000d34:	4618      	mov	r0, r3
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000015c 	.word	0x2000015c
 8000d3c:	2000011c 	.word	0x2000011c

08000d40 <_ZN7QAD_RTC4initEv>:
	//----------------------
	//Initialization Methods

	//Used to initialize the RTC peripheral
	//Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
	static QA_Result init(void) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
		return get().imp_init();
 8000d44:	f7ff ffd4 	bl	8000cf0 <_ZN7QAD_RTC3getEv>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f008 fe9c 	bl	8009a88 <_ZN7QAD_RTC8imp_initEv>
 8000d50:	4603      	mov	r3, r0
	}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_ZN7QAD_I2CC1ER18QAD_I2C_InitStruct>:
		//--------------------------
		//Constructors / Destructors

	QAD_I2C() = delete;                      //Delete the default class constructor, as we need an initialization structure to be provided on class creation.

	QAD_I2C(QAD_I2C_InitStruct& sInit) :     //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
		m_pSDA_GPIO(sInit.pSDA_GPIO),
		m_uSDA_Pin(sInit.uSDA_Pin),
		m_uSDA_AF(sInit.uSDA_AF),
		m_eIRQ_Event(I2C1_EV_IRQn),
		m_eIRQ_Error(I2C1_ER_IRQn),
		m_sHandle({0}) {}
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d66:	801a      	strh	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	709a      	strb	r2, [r3, #2]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2202      	movs	r2, #2
 8000d72:	70da      	strb	r2, [r3, #3]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	711a      	strb	r2, [r3, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	715a      	strb	r2, [r3, #5]
		m_eI2C(sInit.eI2C),
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	781a      	ldrb	r2, [r3, #0]
		m_sHandle({0}) {}
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	719a      	strb	r2, [r3, #6]
		m_uIRQPriority_Event(sInit.uIRQPriority_Event),
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	785a      	ldrb	r2, [r3, #1]
		m_sHandle({0}) {}
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	71da      	strb	r2, [r3, #7]
		m_uIRQPriority_Error(sInit.uIRQPriority_Error),
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	789a      	ldrb	r2, [r3, #2]
		m_sHandle({0}) {}
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	721a      	strb	r2, [r3, #8]
		m_uTiming(sInit.uTiming),
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685a      	ldr	r2, [r3, #4]
		m_sHandle({0}) {}
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	60da      	str	r2, [r3, #12]
		m_eAddressingMode(sInit.eAddressingMode),
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
		m_sHandle({0}) {}
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	611a      	str	r2, [r3, #16]
		m_eDualAddressingMode(sInit.eDualAddressingMode),
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68da      	ldr	r2, [r3, #12]
		m_sHandle({0}) {}
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	615a      	str	r2, [r3, #20]
		m_eGeneralCallMode(sInit.eGeneralCallMode),
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	691a      	ldr	r2, [r3, #16]
		m_sHandle({0}) {}
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	619a      	str	r2, [r3, #24]
		m_eNoStretchMode(sInit.eNoStretchMode),
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	695a      	ldr	r2, [r3, #20]
		m_sHandle({0}) {}
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	61da      	str	r2, [r3, #28]
		m_uOwnAddress1(sInit.uOwnAddress1),
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	8b1a      	ldrh	r2, [r3, #24]
		m_sHandle({0}) {}
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	841a      	strh	r2, [r3, #32]
		m_uOwnAddress2(sInit.uOwnAddress2),
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	8b5a      	ldrh	r2, [r3, #26]
		m_sHandle({0}) {}
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	845a      	strh	r2, [r3, #34]	; 0x22
		m_pSCL_GPIO(sInit.pSCL_GPIO),
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	69da      	ldr	r2, [r3, #28]
		m_sHandle({0}) {}
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
		m_uSCL_Pin(sInit.uSCL_Pin),
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	8c1a      	ldrh	r2, [r3, #32]
		m_sHandle({0}) {}
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	851a      	strh	r2, [r3, #40]	; 0x28
		m_uSCL_AF(sInit.uSCL_AF),
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		m_sHandle({0}) {}
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		m_pSDA_GPIO(sInit.pSDA_GPIO),
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		m_sHandle({0}) {}
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
		m_uSDA_Pin(sInit.uSDA_Pin),
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
		m_sHandle({0}) {}
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	861a      	strh	r2, [r3, #48]	; 0x30
		m_uSDA_AF(sInit.uSDA_AF),
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
		m_sHandle({0}) {}
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	221f      	movs	r2, #31
 8000e0c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2220      	movs	r2, #32
 8000e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3338      	adds	r3, #56	; 0x38
 8000e1c:	224c      	movs	r2, #76	; 0x4c
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f00b f8fd 	bl	800c020 <memset>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_ZN14QAT_Vector2_16C1Ett>:
	//Default constructor. Sets both X and Y components to zero
  QAT_Vector2_16() :
    val(0) {}

  //Constructor used to set individual X and Y components
  QAT_Vector2_16(uint16_t x, uint16_t y) :
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	803b      	strh	r3, [r7, #0]
    x(x), y(y) {}
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	883a      	ldrh	r2, [r7, #0]
 8000e4a:	805a      	strh	r2, [r3, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_ZN14QAT_Vector2_16C1ERKS_>:

  //Copy Constructor
  //Copies data as single 32bit value for performance reasons
  QAT_Vector2_16(const QAT_Vector2_16& other) :
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
    val(other.val) {}
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_ZN10QAD_FT6206C1Ev>:


	//------------
	//Constructors

	QAD_FT6206() :
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
	  m_cI2C(NULL),
		m_eInitState(QA_NotInitialized) {}
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2254      	movs	r2, #84	; 0x54
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2270      	movs	r2, #112	; 0x70
 8000e8c:	705a      	strb	r2, [r3, #1]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	22a8      	movs	r2, #168	; 0xa8
 8000e92:	709a      	strb	r2, [r3, #2]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	22a4      	movs	r2, #164	; 0xa4
 8000e98:	70da      	strb	r2, [r3, #3]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	711a      	strb	r2, [r3, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	715a      	strb	r2, [r3, #5]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2209      	movs	r2, #9
 8000eaa:	719a      	strb	r2, [r3, #6]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2211      	movs	r2, #17
 8000eb0:	71da      	strb	r2, [r3, #7]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	721a      	strb	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	725a      	strb	r2, [r3, #9]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	729a      	strb	r2, [r3, #10]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	72da      	strb	r2, [r3, #11]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f640 2228 	movw	r2, #2600	; 0xa28
 8000ed0:	819a      	strh	r2, [r3, #12]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	751a      	strb	r2, [r3, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_ZN10QAD_FT62063getEv>:


	//-----------------
	//Singleton Methods

	static QAD_FT6206& get(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
		static QAD_FT6206 instance;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <_ZN10QAD_FT62063getEv+0x48>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	f3bf 8f5b 	dmb	ish
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf0c      	ite	eq
 8000f02:	2301      	moveq	r3, #1
 8000f04:	2300      	movne	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d010      	beq.n	8000f2e <_ZN10QAD_FT62063getEv+0x42>
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <_ZN10QAD_FT62063getEv+0x48>)
 8000f0e:	f00a ffd2 	bl	800beb6 <__cxa_guard_acquire>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf14      	ite	ne
 8000f18:	2301      	movne	r3, #1
 8000f1a:	2300      	moveq	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <_ZN10QAD_FT62063getEv+0x42>
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <_ZN10QAD_FT62063getEv+0x4c>)
 8000f24:	f7ff ffa9 	bl	8000e7a <_ZN10QAD_FT6206C1Ev>
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <_ZN10QAD_FT62063getEv+0x48>)
 8000f2a:	f00a ffd0 	bl	800bece <__cxa_guard_release>
		return instance;
 8000f2e:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <_ZN10QAD_FT62063getEv+0x4c>)
	}
 8000f30:	4618      	mov	r0, r3
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000194 	.word	0x20000194
 8000f38:	20000160 	.word	0x20000160

08000f3c <_ZN10QAD_FT62064initEP7QAD_I2C>:


	//----------------------
	//Initialization Methods

	static QA_Result init(QAD_I2C* cI2C) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
		return get().imp_init(cI2C);
 8000f44:	f7ff ffd2 	bl	8000eec <_ZN10QAD_FT62063getEv>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f006 fc7c 	bl	800784a <_ZN10QAD_FT62068imp_initEP7QAD_I2C>
 8000f52:	4603      	mov	r3, r0
	}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_ZN11QAD_QuadSPIC1Ev>:


	//------------
	//Constructors

	QAD_QuadSPI() :
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
		m_eInitState(QA_NotInitialized),
		m_eMemoryMappedState(QAD_QuadSPI_MemoryMapped_Disabled) {}
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f92:	615a      	str	r2, [r3, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f9a:	619a      	str	r2, [r3, #24]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
 8000fa2:	61da      	str	r2, [r3, #28]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2020 	strb.w	r2, [r3, #32]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <_ZN11QAD_QuadSPI3getEv>:
	QAD_QuadSPI& operator=(const QAD_QuadSPI& other) = delete;


	//-----------------
	//Singleton Methods
	static QAD_QuadSPI& get(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
		static QAD_QuadSPI instance;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <_ZN11QAD_QuadSPI3getEv+0x48>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	f3bf 8f5b 	dmb	ish
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	bf0c      	ite	eq
 8000fda:	2301      	moveq	r3, #1
 8000fdc:	2300      	movne	r3, #0
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d010      	beq.n	8001006 <_ZN11QAD_QuadSPI3getEv+0x42>
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <_ZN11QAD_QuadSPI3getEv+0x48>)
 8000fe6:	f00a ff66 	bl	800beb6 <__cxa_guard_acquire>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	bf14      	ite	ne
 8000ff0:	2301      	movne	r3, #1
 8000ff2:	2300      	moveq	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <_ZN11QAD_QuadSPI3getEv+0x42>
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <_ZN11QAD_QuadSPI3getEv+0x4c>)
 8000ffc:	f7ff ffae 	bl	8000f5c <_ZN11QAD_QuadSPIC1Ev>
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <_ZN11QAD_QuadSPI3getEv+0x48>)
 8001002:	f00a ff64 	bl	800bece <__cxa_guard_release>
		return instance;
 8001006:	4b02      	ldr	r3, [pc, #8]	; (8001010 <_ZN11QAD_QuadSPI3getEv+0x4c>)
	}
 8001008:	4618      	mov	r0, r3
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000208 	.word	0x20000208
 8001010:	20000198 	.word	0x20000198

08001014 <_ZN11QAD_QuadSPI4initEv>:


	//----------------------
	//Initialization Methods

	static QA_Result init(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
		return get().imp_init();
 8001018:	f7ff ffd4 	bl	8000fc4 <_ZN11QAD_QuadSPI3getEv>
 800101c:	4603      	mov	r3, r0
 800101e:	4618      	mov	r0, r3
 8001020:	f007 fd8b 	bl	8008b3a <_ZN11QAD_QuadSPI8imp_initEv>
 8001024:	4603      	mov	r3, r0
	}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}

0800102a <_ZN11QAD_QuadSPI13readSubsectorEmPh>:

	static QA_Result read(uint32_t uAddr, uint8_t* pData, uint32_t uSize) {
		return get().imp_read(uAddr, pData, uSize);
	}

	static QA_Result readSubsector(uint32_t uIdx, uint8_t* pData) {
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
		return get().imp_readSubsector(uIdx, pData);
 8001034:	f7ff ffc6 	bl	8000fc4 <_ZN11QAD_QuadSPI3getEv>
 8001038:	4603      	mov	r3, r0
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4618      	mov	r0, r3
 8001040:	f007 ff4f 	bl	8008ee2 <_ZN11QAD_QuadSPI17imp_readSubsectorEmPh>
 8001044:	4603      	mov	r3, r0
	}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_ZN11QAD_QuadSPI22eraseAndWriteSubsectorEmPh>:

	static QA_Result write(uint32_t uAddr, uint8_t* pData, uint32_t uSize) {
		return get().imp_write(uAddr, pData, uSize);
	}

	static QA_Result eraseAndWriteSubsector(uint32_t uIdx, uint8_t* pData) {
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
		return get().imp_eraseAndWriteSubsector(uIdx, pData);
 8001058:	f7ff ffb4 	bl	8000fc4 <_ZN11QAD_QuadSPI3getEv>
 800105c:	4603      	mov	r3, r0
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4618      	mov	r0, r3
 8001064:	f007 ffef 	bl	8009046 <_ZN11QAD_QuadSPI26imp_eraseAndWriteSubsectorEmPh>
 8001068:	4603      	mov	r3, r0
	}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 ff4b 	bl	8001f20 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	887a      	ldrh	r2, [r7, #2]
 800108e:	809a      	strh	r2, [r3, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	80da      	strh	r2, [r3, #6]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	811a      	strh	r2, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	4608      	mov	r0, r1
 80010b2:	4611      	mov	r1, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	4603      	mov	r3, r0
 80010b8:	817b      	strh	r3, [r7, #10]
 80010ba:	460b      	mov	r3, r1
 80010bc:	813b      	strh	r3, [r7, #8]
 80010be:	4613      	mov	r3, r2
 80010c0:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3304      	adds	r3, #4
 80010cc:	f107 020a 	add.w	r2, r7, #10
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 ff40 	bl	8001f58 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3308      	adds	r3, #8
 80010dc:	f107 0208 	add.w	r2, r7, #8
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 ff38 	bl	8001f58 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2200      	movs	r2, #0
 80010ec:	731a      	strb	r2, [r3, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	735a      	strb	r2, [r3, #13]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2200      	movs	r2, #0
 80010f8:	739a      	strb	r2, [r3, #14]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	79fa      	ldrb	r2, [r7, #7]
 80010fe:	73da      	strb	r2, [r3, #15]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	0800cc78 	.word	0x0800cc78

08001110 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	769a      	strb	r2, [r3, #26]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2225      	movs	r2, #37	; 0x25
 800116c:	76da      	strb	r2, [r3, #27]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	331c      	adds	r3, #28
 8001172:	2284      	movs	r2, #132	; 0x84
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f00a ff52 	bl	800c020 <memset>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	8b99      	ldrh	r1, [r3, #28]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	8bda      	ldrh	r2, [r3, #30]
 80011ac:	2300      	movs	r3, #0
 80011ae:	f7ff ff7b 	bl	80010a8 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	741a      	strb	r2, [r3, #16]
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3314      	adds	r3, #20
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fee0 	bl	8001f8e <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	08010210 	.word	0x08010210

080011dc <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 fefc 	bl	8001fe2 <_ZNSaIP12QAS_LCD_FontED1Ev>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fedf 	bl	8001fc2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ffeb 	bl	80011f4 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZN15QAS_LCD_FontMgrC1Ev>:

	//--------------------------
	//Constructors / Destructors

	//Default constructor, which clears all data to default on class construction
	QAS_LCD_FontMgr() :
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
		m_iCurrentIdx(-1),
		m_pCurrent(NULL),
		m_pBuffer(NULL),
		m_uColor(0x0000) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffeb 	bl	800120e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	22ff      	movs	r2, #255	; 0xff
 800123c:	731a      	strb	r2, [r3, #12]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	831a      	strh	r2, [r3, #24]
		m_vFonts.clear();
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 ff05 	bl	8002062 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
	}
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZN15QAS_LCD_FontMgrD1Ev>:

	//Class destructor which iterates through all fonts stored in m_vFonts vector and
	//deletes/deallocates them to prevent memory leaks when class is destroyed
	~QAS_LCD_FontMgr() {
 8001262:	b590      	push	{r4, r7, lr}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 800126a:	2300      	movs	r3, #0
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	7bfc      	ldrb	r4, [r7, #15]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4618      	mov	r0, r3
 8001274:	f000 ff03 	bl	800207e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8001278:	4603      	mov	r3, r0
 800127a:	429c      	cmp	r4, r3
 800127c:	bf34      	ite	cc
 800127e:	2301      	movcc	r3, #1
 8001280:	2300      	movcs	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d011      	beq.n	80012ac <_ZN15QAS_LCD_FontMgrD1Ev+0x4a>
			delete m_vFonts[i];
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f000 ff05 	bl	800209e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8001294:	4603      	mov	r3, r0
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <_ZN15QAS_LCD_FontMgrD1Ev+0x42>
 800129c:	2140      	movs	r1, #64	; 0x40
 800129e:	4618      	mov	r0, r3
 80012a0:	f00a fe07 	bl	800beb2 <_ZdlPvj>
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	3301      	adds	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	e7e0      	b.n	800126e <_ZN15QAS_LCD_FontMgrD1Ev+0xc>
	~QAS_LCD_FontMgr() {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 febc 	bl	800202c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>
		}
	}
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}

080012be <_ZN7QAS_LCDC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAS_LCD() :
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_pDrawBuffer(NULL),
		m_uDrawColor(0x0000) {}
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	811a      	strh	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	330c      	adds	r3, #12
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ffa3 	bl	8001228 <_ZN15QAS_LCD_FontMgrC1Ev>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_ZN7QAS_LCDD1Ev>:
class QAS_LCD {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	330c      	adds	r3, #12
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ffb2 	bl	8001262 <_ZN15QAS_LCD_FontMgrD1Ev>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <__tcf_0>:
  //-----------------
  //Singleton Methods
  //
  //Used to retrieve a reference to the singleton class
  static QAS_LCD& get() {
  	static QAS_LCD instance;
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
 800130c:	4801      	ldr	r0, [pc, #4]	; (8001314 <__tcf_0+0xc>)
 800130e:	f7ff ffed 	bl	80012ec <_ZN7QAS_LCDD1Ev>
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2000020c 	.word	0x2000020c

08001318 <_ZN7QAS_LCD3getEv>:
  static QAS_LCD& get() {
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  	static QAS_LCD instance;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <_ZN7QAS_LCD3getEv+0x50>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	f3bf 8f5b 	dmb	ish
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf0c      	ite	eq
 800132e:	2301      	moveq	r3, #1
 8001330:	2300      	movne	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <_ZN7QAS_LCD3getEv+0x48>
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <_ZN7QAS_LCD3getEv+0x50>)
 800133a:	f00a fdbc 	bl	800beb6 <__cxa_guard_acquire>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf14      	ite	ne
 8001344:	2301      	movne	r3, #1
 8001346:	2300      	moveq	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d008      	beq.n	8001360 <_ZN7QAS_LCD3getEv+0x48>
 800134e:	4807      	ldr	r0, [pc, #28]	; (800136c <_ZN7QAS_LCD3getEv+0x54>)
 8001350:	f7ff ffb5 	bl	80012be <_ZN7QAS_LCDC1Ev>
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <_ZN7QAS_LCD3getEv+0x50>)
 8001356:	f00a fdba 	bl	800bece <__cxa_guard_release>
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <_ZN7QAS_LCD3getEv+0x58>)
 800135c:	f00a fdf7 	bl	800bf4e <atexit>
  	return instance;
 8001360:	4b02      	ldr	r3, [pc, #8]	; (800136c <_ZN7QAS_LCD3getEv+0x54>)
  }
 8001362:	4618      	mov	r0, r3
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000234 	.word	0x20000234
 800136c:	2000020c 	.word	0x2000020c
 8001370:	08001309 	.word	0x08001309

08001374 <_ZN7QAS_LCD4initEv>:
	//----------------------
	//Initialization Methods

  //Used to initialize the LTDC peripheral and setup Font Manager class
  //Returns QA_OK if initialization successful, or QA_Fail if initialization fails
  static QA_Result init(void) {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8001378:	f7ff ffce 	bl	8001318 <_ZN7QAS_LCD3getEv>
 800137c:	4603      	mov	r3, r0
 800137e:	4618      	mov	r0, r3
 8001380:	f009 fa32 	bl	800a7e8 <_ZN7QAS_LCD8imp_initEv>
 8001384:	4603      	mov	r3, r0
  }
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}

0800138a <_ZN7QAS_LCD10flipLayer0Ev>:
	//-----------------------
	//Rendering Setup Methods

  //Used to flip the front and back buffer for layer 0
  //See QAD_LTDC.hpp for more details
  static void flipLayer0(void) {
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  	get().imp_flipLayer0();
 800138e:	f7ff ffc3 	bl	8001318 <_ZN7QAS_LCD3getEv>
 8001392:	4603      	mov	r3, r0
 8001394:	4618      	mov	r0, r3
 8001396:	f009 fa8d 	bl	800a8b4 <_ZN7QAS_LCD14imp_flipLayer0Ev>
  }
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}

0800139e <_ZN7QAS_LCD10flipLayer1Ev>:

  //Used to flip the front and back buffer for layer 1
  //See QAD_LTDC.hpp for more details
  static void flipLayer1(void) {
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  	get().imp_flipLayer1();
 80013a2:	f7ff ffb9 	bl	8001318 <_ZN7QAS_LCD3getEv>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f009 fa8d 	bl	800a8c8 <_ZN7QAS_LCD14imp_flipLayer1Ev>
  }
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>:

  //Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
  //eLayer - Sets whether the current draw buffer is layer 0 or layer 1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
  static void setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
  	get().imp_setDrawBuffer(eLayer);
 80013bc:	f7ff ffac 	bl	8001318 <_ZN7QAS_LCD3getEv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4610      	mov	r0, r2
 80013c8:	f009 fa88 	bl	800a8dc <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>
  }
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_ZN7QAS_LCD12setDrawColorEt>:

  //Used to set the current draw color
  //uColor - A 16bit ARGB4444 color value
  static void setDrawColor(uint16_t uColor) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
  	get().imp_setDrawColor(uColor);
 80013de:	f7ff ff9b 	bl	8001318 <_ZN7QAS_LCD3getEv>
 80013e2:	4602      	mov	r2, r0
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	4619      	mov	r1, r3
 80013e8:	4610      	mov	r0, r2
 80013ea:	f009 fa9c 	bl	800a926 <_ZN7QAS_LCD16imp_setDrawColorEt>
  }
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_ZN7QAS_LCD11clearBufferEv>:

	//-----------------
	//Rendering Methods

  //Used to clear the currently selected draw buffer to the currently selected draw color
  static void clearBuffer(void) {
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
  	get().imp_clearBuffer();
 80013fa:	f7ff ff8d 	bl	8001318 <_ZN7QAS_LCD3getEv>
 80013fe:	4603      	mov	r3, r0
 8001400:	4618      	mov	r0, r3
 8001402:	f009 faa7 	bl	800a954 <_ZN7QAS_LCD15imp_clearBufferEv>
  }
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}

0800140a <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>:
  }

  //Used to draw a non-filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
  static void drawRect(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
  	get().imp_drawRect(cStart, cEnd);
 8001414:	f7ff ff80 	bl	8001318 <_ZN7QAS_LCD3getEv>
 8001418:	4603      	mov	r3, r0
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	f009 fab8 	bl	800a994 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>
  }
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>:

  //Used to draw a filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
  static void drawRectFill(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  	get().imp_drawRectFill(cStart, cEnd);
 8001436:	f7ff ff6f 	bl	8001318 <_ZN7QAS_LCD3getEv>
 800143a:	4603      	mov	r3, r0
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	f009 fb35 	bl	800aab0 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>
  }
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_ZN7QAS_LCD13setFontByNameEPKc>:
	//Font Rendering Methods

  //Used to set the selected font/typeface to be used for text rendering
  //strName - A C-style string containing the name of the font to be selected. This must match one of the
  //          fonts stored in the font manager, otherwise no font will be selected
  static void setFontByName(const char* strName) {
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  	get().m_cFontMgr.setFontByName(strName);
 8001456:	f7ff ff5f 	bl	8001318 <_ZN7QAS_LCD3getEv>
 800145a:	4603      	mov	r3, r0
 800145c:	330c      	adds	r3, #12
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4618      	mov	r0, r3
 8001462:	f009 fc47 	bl	800acf4 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>
  }
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <_ZN7QAS_LCD14setFontByIndexEh>:

  //Used to set the selected font/typeface to be used for text rendering
  //uIdx - The index of the fond to be selected, based on the array of fonts stored in the font manager
  static void setFontByIndex(uint8_t uIdx) {
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  	get().m_cFontMgr.setFontByIndex(uIdx);
 8001478:	f7ff ff4e 	bl	8001318 <_ZN7QAS_LCD3getEv>
 800147c:	4603      	mov	r3, r0
 800147e:	330c      	adds	r3, #12
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f009 fc5c 	bl	800ad42 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>
  }
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>:

  //Used to draw a center-aligned string of characters using the currently selected font/typeface
  //String will be drawn to currently selected draw buffer with currently selected draw color
  //cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
  //str  - The C-style string to be drawn
  static void drawStrC(QAT_Vector2_16 cPos, const char* str) {
 8001492:	b590      	push	{r4, r7, lr}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  	get().m_cFontMgr.drawStrC(cPos, str);
 800149c:	f7ff ff3c 	bl	8001318 <_ZN7QAS_LCD3getEv>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f103 040c 	add.w	r4, r3, #12
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fcd4 	bl	8000e5a <_ZN14QAT_Vector2_16C1ERKS_>
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	4620      	mov	r0, r4
 80014bc:	f009 fd3b 	bl	800af36 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>
  }
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}

080014c8 <main>:
//main
//Application Entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f769nihx.s
int main(void) {
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ca:	f5ad 5d06 	sub.w	sp, sp, #8576	; 0x2180
 80014ce:	b08d      	sub	sp, #52	; 0x34
 80014d0:	af06      	add	r7, sp, #24
  //System Initialization

	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method
	if (SystemInitialize()) {
 80014d2:	f7ff f929 	bl	8000728 <_Z16SystemInitializev>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	bf14      	ite	ne
 80014dc:	2301      	movne	r3, #1
 80014de:	2300      	moveq	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d000      	beq.n	80014e8 <main+0x20>
	  while (1) {}
 80014e6:	e7fe      	b.n	80014e6 <main+0x1e>


	//----------------------------------
	//Initialize the User LEDs using the QAD_GPIO_Output driver class.
	//QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PORT, QAD_USER_LED_RED_GPIO_PIN and QAD_USERLED_GREEN_GPIO_PIN are defined in setup.hpp
  GPIO_UserLED_Red   = new QAD_GPIO_Output(QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_RED_GPIO_PIN);
 80014e8:	2014      	movs	r0, #20
 80014ea:	f00a fcf3 	bl	800bed4 <_Znwj>
 80014ee:	4603      	mov	r3, r0
 80014f0:	461c      	mov	r4, r3
 80014f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f6:	49b7      	ldr	r1, [pc, #732]	; (80017d4 <main+0x30c>)
 80014f8:	4620      	mov	r0, r4
 80014fa:	f006 fba1 	bl	8007c40 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 80014fe:	4bb6      	ldr	r3, [pc, #728]	; (80017d8 <main+0x310>)
 8001500:	601c      	str	r4, [r3, #0]
  GPIO_UserLED_Green = new QAD_GPIO_Output(QAD_USERLED_GREEN_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PIN);
 8001502:	2014      	movs	r0, #20
 8001504:	f00a fce6 	bl	800bed4 <_Znwj>
 8001508:	4603      	mov	r3, r0
 800150a:	461c      	mov	r4, r3
 800150c:	2220      	movs	r2, #32
 800150e:	49b1      	ldr	r1, [pc, #708]	; (80017d4 <main+0x30c>)
 8001510:	4620      	mov	r0, r4
 8001512:	f006 fb95 	bl	8007c40 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8001516:	4bb1      	ldr	r3, [pc, #708]	; (80017dc <main+0x314>)
 8001518:	601c      	str	r4, [r3, #0]


	//----------------------------------
  //Initialize the User Button using the QAD_GPIO_Input driver class.
  //QAD_USERBUTTON_GPIO_PORT and QAD_USERBUTTON_GPIO_PIN are defined in setup.hpp
  GPIO_UserButton = new QAD_GPIO_Input(QAD_USERBUTTON_GPIO_PORT, QAD_USERBUTTON_GPIO_PIN);
 800151a:	2010      	movs	r0, #16
 800151c:	f00a fcda 	bl	800bed4 <_Znwj>
 8001520:	4603      	mov	r3, r0
 8001522:	461c      	mov	r4, r3
 8001524:	2201      	movs	r2, #1
 8001526:	49ae      	ldr	r1, [pc, #696]	; (80017e0 <main+0x318>)
 8001528:	4620      	mov	r0, r4
 800152a:	f006 fc0f 	bl	8007d4c <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>
 800152e:	4bad      	ldr	r3, [pc, #692]	; (80017e4 <main+0x31c>)
 8001530:	601c      	str	r4, [r3, #0]
  //Initialize UART1, which is used to communicate over serial via the STLINK connection
  //Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

  //Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART1;
 8001532:	2300      	movs	r3, #0
 8001534:	f242 1234 	movw	r2, #8500	; 0x2134
 8001538:	443a      	add	r2, r7
 800153a:	7013      	strb	r3, [r2, #0]
  sSerialInit.sUART_Init.baudrate    = QAD_UART1_BAUDRATE;
 800153c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001540:	f242 1238 	movw	r2, #8504	; 0x2138
 8001544:	443a      	add	r2, r7
 8001546:	6013      	str	r3, [r2, #0]
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART1;
 8001548:	2309      	movs	r3, #9
 800154a:	f242 123c 	movw	r2, #8508	; 0x213c
 800154e:	443a      	add	r2, r7
 8001550:	7013      	strb	r3, [r2, #0]
  sSerialInit.sUART_Init.txgpio      = QAD_UART1_TX_PORT;
 8001552:	4ba3      	ldr	r3, [pc, #652]	; (80017e0 <main+0x318>)
 8001554:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8001558:	6013      	str	r3, [r2, #0]
  sSerialInit.sUART_Init.txpin       = QAD_UART1_TX_PIN;
 800155a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155e:	f242 1244 	movw	r2, #8516	; 0x2144
 8001562:	443a      	add	r2, r7
 8001564:	8013      	strh	r3, [r2, #0]
  sSerialInit.sUART_Init.txaf        = QAD_UART1_TX_AF;
 8001566:	2307      	movs	r3, #7
 8001568:	f242 1246 	movw	r2, #8518	; 0x2146
 800156c:	443a      	add	r2, r7
 800156e:	7013      	strb	r3, [r2, #0]
  sSerialInit.sUART_Init.rxgpio      = QAD_UART1_RX_PORT;
 8001570:	4b9b      	ldr	r3, [pc, #620]	; (80017e0 <main+0x318>)
 8001572:	f242 1248 	movw	r2, #8520	; 0x2148
 8001576:	443a      	add	r2, r7
 8001578:	6013      	str	r3, [r2, #0]
  sSerialInit.sUART_Init.rxpin       = QAD_UART1_RX_PIN;
 800157a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157e:	f242 124c 	movw	r2, #8524	; 0x214c
 8001582:	443a      	add	r2, r7
 8001584:	8013      	strh	r3, [r2, #0]
  sSerialInit.sUART_Init.rxaf        = QAD_UART1_RX_AF;
 8001586:	2307      	movs	r3, #7
 8001588:	f242 124e 	movw	r2, #8526	; 0x214e
 800158c:	443a      	add	r2, r7
 800158e:	7013      	strb	r3, [r2, #0]
  sSerialInit.uTXFIFO_Size           = QAD_UART1_TX_FIFOSIZE;
 8001590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001594:	f242 1250 	movw	r2, #8528	; 0x2150
 8001598:	443a      	add	r2, r7
 800159a:	8013      	strh	r3, [r2, #0]
  sSerialInit.uRXFIFO_Size           = QAD_UART1_RX_FIFOSIZE;
 800159c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a0:	f242 1252 	movw	r2, #8530	; 0x2152
 80015a4:	443a      	add	r2, r7
 80015a6:	8013      	strh	r3, [r2, #0]

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 80015a8:	2018      	movs	r0, #24
 80015aa:	f00a fc93 	bl	800bed4 <_Znwj>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461c      	mov	r4, r3
 80015b2:	f242 1334 	movw	r3, #8500	; 0x2134
 80015b6:	443b      	add	r3, r7
 80015b8:	4619      	mov	r1, r3
 80015ba:	4620      	mov	r0, r4
 80015bc:	f7ff fdec 	bl	8001198 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 80015c0:	4b89      	ldr	r3, [pc, #548]	; (80017e8 <main+0x320>)
 80015c2:	601c      	str	r4, [r3, #0]

  //If initialization failed the turn on User LED and enter infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 80015c4:	4b88      	ldr	r3, [pc, #544]	; (80017e8 <main+0x320>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00a f995 	bl	800b8fa <_ZN19QAS_Serial_Dev_Base4initEPv>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	bf0c      	ite	eq
 80015d6:	2301      	moveq	r3, #1
 80015d8:	2300      	movne	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <main+0x124>
  	GPIO_UserLED_Red->on();
 80015e0:	4b7d      	ldr	r3, [pc, #500]	; (80017d8 <main+0x310>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f006 fb4c 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 80015ea:	e7fe      	b.n	80015ea <main+0x122>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 80015ec:	4b7e      	ldr	r3, [pc, #504]	; (80017e8 <main+0x320>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00a f9e6 	bl	800b9c2 <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F769I Discovery Booting...");
 80015f6:	4b7c      	ldr	r3, [pc, #496]	; (80017e8 <main+0x320>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	497c      	ldr	r1, [pc, #496]	; (80017ec <main+0x324>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00a f9ac 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>



	//----------------------------------
  //Initialize FMC / SDRAM driver using the QAD_FMC singleton driver class
  if (QAD_FMC::init() == QA_OK) {
 8001602:	f7ff fb03 	bl	8000c0c <_ZN7QAD_FMC4initEv>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d02c      	beq.n	8001670 <main+0x1a8>

  	//If initialization passed then output message via serial
    UART_STLink->txStringCR("SDRAM: Initialized");
 8001616:	4b74      	ldr	r3, [pc, #464]	; (80017e8 <main+0x320>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4975      	ldr	r1, [pc, #468]	; (80017f0 <main+0x328>)
 800161c:	4618      	mov	r0, r3
 800161e:	f00a f99c 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

    //Test SDRAM to confirm correct operation
  	if (QAD_FMC::test() == QA_OK) {
 8001622:	f7ff fafe 	bl	8000c22 <_ZN7QAD_FMC4testEv>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d010      	beq.n	8001658 <main+0x190>

  		//If SDRAM test passed then output message via serial
  		UART_STLink->txStringCR("SDRAM: Test Passed");
 8001636:	4b6c      	ldr	r3, [pc, #432]	; (80017e8 <main+0x320>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	496e      	ldr	r1, [pc, #440]	; (80017f4 <main+0x32c>)
 800163c:	4618      	mov	r0, r3
 800163e:	f00a f98c 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


	//----------------------------------
  //Initialize LCD using QAS_LCD singleton class.
  //This will also initialize LTDC and DSI peripherals, and also initialize otm8009a display controller
  if (QAS_LCD::init()) {
 8001642:	f7ff fe97 	bl	8001374 <_ZN7QAS_LCD4initEv>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	bf14      	ite	ne
 800164c:	2301      	movne	r3, #1
 800164e:	2300      	moveq	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d01e      	beq.n	8001694 <main+0x1cc>
 8001656:	e017      	b.n	8001688 <main+0x1c0>
  		UART_STLink->txStringCR("SDRAM: Test Failed");
 8001658:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <main+0x320>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4966      	ldr	r1, [pc, #408]	; (80017f8 <main+0x330>)
 800165e:	4618      	mov	r0, r3
 8001660:	f00a f97b 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  		GPIO_UserLED_Red->on();
 8001664:	4b5c      	ldr	r3, [pc, #368]	; (80017d8 <main+0x310>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f006 fb0a 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
  		while(1) {}
 800166e:	e7fe      	b.n	800166e <main+0x1a6>
    UART_STLink->txStringCR("SDRAM: Initialization failed");
 8001670:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <main+0x320>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4961      	ldr	r1, [pc, #388]	; (80017fc <main+0x334>)
 8001676:	4618      	mov	r0, r3
 8001678:	f00a f96f 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
    GPIO_UserLED_Red->on();
 800167c:	4b56      	ldr	r3, [pc, #344]	; (80017d8 <main+0x310>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f006 fafe 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8001686:	e7fe      	b.n	8001686 <main+0x1be>
  	UART_STLink->txStringCR("LCD: Initialization failed");
 8001688:	4b57      	ldr	r3, [pc, #348]	; (80017e8 <main+0x320>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	495c      	ldr	r1, [pc, #368]	; (8001800 <main+0x338>)
 800168e:	4618      	mov	r0, r3
 8001690:	f00a f963 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  }
  UART_STLink->txStringCR("LCD: Initialized");
 8001694:	4b54      	ldr	r3, [pc, #336]	; (80017e8 <main+0x320>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	495a      	ldr	r1, [pc, #360]	; (8001804 <main+0x33c>)
 800169a:	4618      	mov	r0, r3
 800169c:	f00a f95d 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //Test rendering methods to confirm LCD and rendering subsystem are working correctly

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer0);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff fe86 	bl	80013b2 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0xFFFF);
 80016a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016aa:	f7ff fe93 	bl	80013d4 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 80016ae:	f7ff fea2 	bl	80013f6 <_ZN7QAS_LCD11clearBufferEv>

  //Shapes
  QAS_LCD::setDrawColor(0xF003);
 80016b2:	f24f 0003 	movw	r0, #61443	; 0xf003
 80016b6:	f7ff fe8d 	bl	80013d4 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRectFill(QAT_Vector2_16(40, 40), QAT_Vector2_16(760, 440));
 80016ba:	f242 1354 	movw	r3, #8532	; 0x2154
 80016be:	443b      	add	r3, r7
 80016c0:	2228      	movs	r2, #40	; 0x28
 80016c2:	2128      	movs	r1, #40	; 0x28
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fbb3 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 80016ca:	f242 1358 	movw	r3, #8536	; 0x2158
 80016ce:	443b      	add	r3, r7
 80016d0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80016d4:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fba9 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 80016de:	f242 1258 	movw	r2, #8536	; 0x2158
 80016e2:	443a      	add	r2, r7
 80016e4:	f242 1354 	movw	r3, #8532	; 0x2154
 80016e8:	443b      	add	r3, r7
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fe9d 	bl	800142c <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawColor(0xFFFF);
 80016f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016f6:	f7ff fe6d 	bl	80013d4 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRect(QAT_Vector2_16(50, 50), QAT_Vector2_16(750, 430));
 80016fa:	f242 135c 	movw	r3, #8540	; 0x215c
 80016fe:	443b      	add	r3, r7
 8001700:	2232      	movs	r2, #50	; 0x32
 8001702:	2132      	movs	r1, #50	; 0x32
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fb93 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 800170a:	f242 1360 	movw	r3, #8544	; 0x2160
 800170e:	443b      	add	r3, r7
 8001710:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8001714:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fb89 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 800171e:	f242 1260 	movw	r2, #8544	; 0x2160
 8001722:	443a      	add	r2, r7
 8001724:	f242 135c 	movw	r3, #8540	; 0x215c
 8001728:	443b      	add	r3, r7
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fe6c 	bl	800140a <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer1);
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff fe3d 	bl	80013b2 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0x0000);
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff fe4b 	bl	80013d4 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 800173e:	f7ff fe5a 	bl	80013f6 <_ZN7QAS_LCD11clearBufferEv>

  QAS_LCD::setDrawColor(0xFBFB);
 8001742:	f64f 30fb 	movw	r0, #64507	; 0xfbfb
 8001746:	f7ff fe45 	bl	80013d4 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::setFontByName("SegoeUI12pt");
 800174a:	482f      	ldr	r0, [pc, #188]	; (8001808 <main+0x340>)
 800174c:	f7ff fe7f 	bl	800144e <_ZN7QAS_LCD13setFontByNameEPKc>
  //QAS_LCD::setFontByIndex(0);
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 150), "Hello World!");
 8001750:	f242 1364 	movw	r3, #8548	; 0x2164
 8001754:	443b      	add	r3, r7
 8001756:	2296      	movs	r2, #150	; 0x96
 8001758:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fb67 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001762:	f242 1364 	movw	r3, #8548	; 0x2164
 8001766:	443b      	add	r3, r7
 8001768:	4928      	ldr	r1, [pc, #160]	; (800180c <main+0x344>)
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fe91 	bl	8001492 <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::setDrawColor(0xFBBF);
 8001770:	f64f 30bf 	movw	r0, #64447	; 0xfbbf
 8001774:	f7ff fe2e 	bl	80013d4 <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("SegoeUI20ptSB");
  QAS_LCD::setFontByIndex(1);
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff fe78 	bl	800146e <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 250), "Welcome to 1s and 0s");
 800177e:	f242 1368 	movw	r3, #8552	; 0x2168
 8001782:	443b      	add	r3, r7
 8001784:	22fa      	movs	r2, #250	; 0xfa
 8001786:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fb50 	bl	8000e30 <_ZN14QAT_Vector2_16C1Ett>
 8001790:	f242 1368 	movw	r3, #8552	; 0x2168
 8001794:	443b      	add	r3, r7
 8001796:	491e      	ldr	r1, [pc, #120]	; (8001810 <main+0x348>)
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fe7a 	bl	8001492 <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>
  /*QAS_LCD::setDrawColor(0xFFBB);
  //QAS_LCD::setFontByName("ShowcardGothic18pt");
  QAS_LCD::setFontByIndex(2);
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 350), "Test Font");*/

  QAS_LCD::flipLayer0();
 800179e:	f7ff fdf4 	bl	800138a <_ZN7QAS_LCD10flipLayer0Ev>
  QAS_LCD::flipLayer1();
 80017a2:	f7ff fdfc 	bl	800139e <_ZN7QAS_LCD10flipLayer1Ev>

  //---------------
  //Init RNG Driver
  if (QAD_RNG::init()) {
 80017a6:	f7ff fa85 	bl	8000cb4 <_ZN7QAD_RNG4initEv>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf14      	ite	ne
 80017b0:	2301      	movne	r3, #1
 80017b2:	2300      	moveq	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d02e      	beq.n	8001818 <main+0x350>
  	UART_STLink->txStringCR("RNG: Initialization Failed");
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <main+0x320>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4915      	ldr	r1, [pc, #84]	; (8001814 <main+0x34c>)
 80017c0:	4618      	mov	r0, r3
 80017c2:	f00a f8ca 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <main+0x310>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f006 fa59 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 80017d0:	e7fe      	b.n	80017d0 <main+0x308>
 80017d2:	bf00      	nop
 80017d4:	40022400 	.word	0x40022400
 80017d8:	20000238 	.word	0x20000238
 80017dc:	2000023c 	.word	0x2000023c
 80017e0:	40020000 	.word	0x40020000
 80017e4:	20000240 	.word	0x20000240
 80017e8:	20000244 	.word	0x20000244
 80017ec:	0800c9b4 	.word	0x0800c9b4
 80017f0:	0800c9d4 	.word	0x0800c9d4
 80017f4:	0800c9e8 	.word	0x0800c9e8
 80017f8:	0800c9fc 	.word	0x0800c9fc
 80017fc:	0800ca10 	.word	0x0800ca10
 8001800:	0800ca30 	.word	0x0800ca30
 8001804:	0800ca4c 	.word	0x0800ca4c
 8001808:	0800ca60 	.word	0x0800ca60
 800180c:	0800ca6c 	.word	0x0800ca6c
 8001810:	0800ca7c 	.word	0x0800ca7c
 8001814:	0800ca94 	.word	0x0800ca94
  }
  UART_STLink->txStringCR("RNG: Initialized");
 8001818:	4b89      	ldr	r3, [pc, #548]	; (8001a40 <main+0x578>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4989      	ldr	r1, [pc, #548]	; (8001a44 <main+0x57c>)
 800181e:	4618      	mov	r0, r3
 8001820:	f00a f89b 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  //---------------
  //Init RTC Driver
  if (QAD_RTC::init()) {
 8001824:	f7ff fa8c 	bl	8000d40 <_ZN7QAD_RTC4initEv>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00b      	beq.n	8001850 <main+0x388>
  	UART_STLink->txStringCR("RTC: Initialization Failed");
 8001838:	4b81      	ldr	r3, [pc, #516]	; (8001a40 <main+0x578>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4982      	ldr	r1, [pc, #520]	; (8001a48 <main+0x580>)
 800183e:	4618      	mov	r0, r3
 8001840:	f00a f88b 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 8001844:	4b81      	ldr	r3, [pc, #516]	; (8001a4c <main+0x584>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f006 fa1a 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 800184e:	e7fe      	b.n	800184e <main+0x386>
  }
  UART_STLink->txStringCR("RTC: Initialized");
 8001850:	4b7b      	ldr	r3, [pc, #492]	; (8001a40 <main+0x578>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	497e      	ldr	r1, [pc, #504]	; (8001a50 <main+0x588>)
 8001856:	4618      	mov	r0, r3
 8001858:	f00a f87f 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  //---------------------
  //Initialize System I2C
  QAD_I2C_InitStruct I2C_Init;
  I2C_Init.eI2C                = QAD_I2C4;
 800185c:	2303      	movs	r3, #3
 800185e:	f242 1208 	movw	r2, #8456	; 0x2108
 8001862:	443a      	add	r2, r7
 8001864:	7013      	strb	r3, [r2, #0]
  I2C_Init.uIRQPriority_Event  = 0xE;
 8001866:	230e      	movs	r3, #14
 8001868:	f242 1209 	movw	r2, #8457	; 0x2109
 800186c:	443a      	add	r2, r7
 800186e:	7013      	strb	r3, [r2, #0]
  I2C_Init.uIRQPriority_Error  = 0xE;
 8001870:	230e      	movs	r3, #14
 8001872:	f242 120a 	movw	r2, #8458	; 0x210a
 8001876:	443a      	add	r2, r7
 8001878:	7013      	strb	r3, [r2, #0]
  I2C_Init.uTiming             = 40912732;
 800187a:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <main+0x58c>)
 800187c:	f242 120c 	movw	r2, #8460	; 0x210c
 8001880:	443a      	add	r2, r7
 8001882:	6013      	str	r3, [r2, #0]
  I2C_Init.eAddressingMode     = QAD_I2C_AddressingMode_7Bit;
 8001884:	2301      	movs	r3, #1
 8001886:	f242 1210 	movw	r2, #8464	; 0x2110
 800188a:	443a      	add	r2, r7
 800188c:	6013      	str	r3, [r2, #0]
  I2C_Init.eDualAddressingMode = QAD_I2C_DualAddressingMode_Disable;
 800188e:	2300      	movs	r3, #0
 8001890:	f242 1214 	movw	r2, #8468	; 0x2114
 8001894:	443a      	add	r2, r7
 8001896:	6013      	str	r3, [r2, #0]
  I2C_Init.eGeneralCallMode    = QAD_I2C_GeneralCallMode_Disable;
 8001898:	2300      	movs	r3, #0
 800189a:	f242 1218 	movw	r2, #8472	; 0x2118
 800189e:	443a      	add	r2, r7
 80018a0:	6013      	str	r3, [r2, #0]
  I2C_Init.eNoStretchMode      = QAD_I2C_NoStretchMode_Disable;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f242 121c 	movw	r2, #8476	; 0x211c
 80018a8:	443a      	add	r2, r7
 80018aa:	6013      	str	r3, [r2, #0]
  I2C_Init.uOwnAddress1        = 0x0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f242 1220 	movw	r2, #8480	; 0x2120
 80018b2:	443a      	add	r2, r7
 80018b4:	8013      	strh	r3, [r2, #0]
  I2C_Init.uOwnAddress2        = 0x0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f242 1222 	movw	r2, #8482	; 0x2122
 80018bc:	443a      	add	r2, r7
 80018be:	8013      	strh	r3, [r2, #0]
  I2C_Init.pSCL_GPIO           = GPIOD;
 80018c0:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <main+0x590>)
 80018c2:	f242 1224 	movw	r2, #8484	; 0x2124
 80018c6:	443a      	add	r2, r7
 80018c8:	6013      	str	r3, [r2, #0]
  I2C_Init.uSCL_Pin            = GPIO_PIN_12;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	f242 1228 	movw	r2, #8488	; 0x2128
 80018d2:	443a      	add	r2, r7
 80018d4:	8013      	strh	r3, [r2, #0]
  I2C_Init.uSCL_AF             = GPIO_AF4_I2C4;
 80018d6:	2304      	movs	r3, #4
 80018d8:	f242 122a 	movw	r2, #8490	; 0x212a
 80018dc:	443a      	add	r2, r7
 80018de:	7013      	strb	r3, [r2, #0]
  I2C_Init.pSDA_GPIO           = GPIOB;
 80018e0:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <main+0x594>)
 80018e2:	f242 122c 	movw	r2, #8492	; 0x212c
 80018e6:	443a      	add	r2, r7
 80018e8:	6013      	str	r3, [r2, #0]
  I2C_Init.uSDA_Pin            = GPIO_PIN_7;
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	f242 1230 	movw	r2, #8496	; 0x2130
 80018f0:	443a      	add	r2, r7
 80018f2:	8013      	strh	r3, [r2, #0]
  I2C_Init.uSDA_AF             = GPIO_AF11_I2C4;
 80018f4:	230b      	movs	r3, #11
 80018f6:	f242 1232 	movw	r2, #8498	; 0x2132
 80018fa:	443a      	add	r2, r7
 80018fc:	7013      	strb	r3, [r2, #0]
  I2C_System = new QAD_I2C(I2C_Init);
 80018fe:	2084      	movs	r0, #132	; 0x84
 8001900:	f00a fae8 	bl	800bed4 <_Znwj>
 8001904:	4603      	mov	r3, r0
 8001906:	461c      	mov	r4, r3
 8001908:	f242 1308 	movw	r3, #8456	; 0x2108
 800190c:	443b      	add	r3, r7
 800190e:	4619      	mov	r1, r3
 8001910:	4620      	mov	r0, r4
 8001912:	f7ff fa20 	bl	8000d56 <_ZN7QAD_I2CC1ER18QAD_I2C_InitStruct>
 8001916:	4b52      	ldr	r3, [pc, #328]	; (8001a60 <main+0x598>)
 8001918:	601c      	str	r4, [r3, #0]

  if (I2C_System->init()) {
 800191a:	4b51      	ldr	r3, [pc, #324]	; (8001a60 <main+0x598>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f006 fb3b 	bl	8007f9a <_ZN7QAD_I2C4initEv>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	bf14      	ite	ne
 800192a:	2301      	movne	r3, #1
 800192c:	2300      	moveq	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00b      	beq.n	800194c <main+0x484>
  	UART_STLink->txStringCR("System I2C: Initialization Failed");
 8001934:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <main+0x578>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	494a      	ldr	r1, [pc, #296]	; (8001a64 <main+0x59c>)
 800193a:	4618      	mov	r0, r3
 800193c:	f00a f80d 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 8001940:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <main+0x584>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f006 f99c 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 800194a:	e7fe      	b.n	800194a <main+0x482>
  }
  I2C_System->start();
 800194c:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <main+0x598>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f006 fb4d 	bl	8007ff0 <_ZN7QAD_I2C5startEv>
  UART_STLink->txStringCR("System I2C: Initialized and Started");
 8001956:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <main+0x578>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4943      	ldr	r1, [pc, #268]	; (8001a68 <main+0x5a0>)
 800195c:	4618      	mov	r0, r3
 800195e:	f009 fffc 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  //----------------------------------
  //Initialize FT6206 Touch Controller
  if (QAD_FT6206::init(I2C_System)) {
 8001962:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <main+0x598>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fae8 	bl	8000f3c <_ZN10QAD_FT62064initEP7QAD_I2C>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf14      	ite	ne
 8001972:	2301      	movne	r3, #1
 8001974:	2300      	moveq	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00b      	beq.n	8001994 <main+0x4cc>
  	UART_STLink->txStringCR("FT6206: Initialization Failed");
 800197c:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <main+0x578>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	493a      	ldr	r1, [pc, #232]	; (8001a6c <main+0x5a4>)
 8001982:	4618      	mov	r0, r3
 8001984:	f009 ffe9 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 8001988:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <main+0x584>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f006 f978 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8001992:	e7fe      	b.n	8001992 <main+0x4ca>
  }
  UART_STLink->txStringCR("FT6206: Initialized");
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <main+0x578>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4935      	ldr	r1, [pc, #212]	; (8001a70 <main+0x5a8>)
 800199a:	4618      	mov	r0, r3
 800199c:	f009 ffdd 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  //-----------------------------------
  //Initialize QuadSPI / MX25L512 Flash
  if (QAD_QuadSPI::init()) {
 80019a0:	f7ff fb38 	bl	8001014 <_ZN11QAD_QuadSPI4initEv>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf14      	ite	ne
 80019aa:	2301      	movne	r3, #1
 80019ac:	2300      	moveq	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00b      	beq.n	80019cc <main+0x504>
  	UART_STLink->txStringCR("QuadSPI: Initialization Failed");
 80019b4:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <main+0x578>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	492e      	ldr	r1, [pc, #184]	; (8001a74 <main+0x5ac>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f009 ffcd 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <main+0x584>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f006 f95c 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 80019ca:	e7fe      	b.n	80019ca <main+0x502>
  }
  UART_STLink->txStringCR("QuadSPI: Initialized");
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <main+0x578>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4929      	ldr	r1, [pc, #164]	; (8001a78 <main+0x5b0>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f009 ffc1 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

    //Test Flash Memory
  uint8_t uWriteData[4096];
  uint8_t uReadData[4096];

  for (uint32_t i=0; i<4096; i++) {
 80019d8:	2300      	movs	r3, #0
 80019da:	f242 1294 	movw	r2, #8596	; 0x2194
 80019de:	443a      	add	r2, r7
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	f242 1394 	movw	r3, #8596	; 0x2194
 80019e6:	443b      	add	r3, r7
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ee:	d249      	bcs.n	8001a84 <main+0x5bc>
  	uWriteData[i] = (uint8_t)(i & 0xFF);
 80019f0:	f242 1394 	movw	r3, #8596	; 0x2194
 80019f4:	443b      	add	r3, r7
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b2d9      	uxtb	r1, r3
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <main+0x5b4>)
 80019fc:	f242 1298 	movw	r2, #8600	; 0x2198
 8001a00:	443a      	add	r2, r7
 8001a02:	4413      	add	r3, r2
 8001a04:	f242 1294 	movw	r2, #8596	; 0x2194
 8001a08:	443a      	add	r2, r7
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	460a      	mov	r2, r1
 8001a10:	701a      	strb	r2, [r3, #0]
  	uReadData[i] = 0;
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <main+0x5b8>)
 8001a14:	f242 1298 	movw	r2, #8600	; 0x2198
 8001a18:	443a      	add	r2, r7
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f242 1294 	movw	r2, #8596	; 0x2194
 8001a20:	443a      	add	r2, r7
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	4413      	add	r3, r2
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
  for (uint32_t i=0; i<4096; i++) {
 8001a2a:	f242 1394 	movw	r3, #8596	; 0x2194
 8001a2e:	443b      	add	r3, r7
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	f242 1294 	movw	r2, #8596	; 0x2194
 8001a38:	443a      	add	r2, r7
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	e7d1      	b.n	80019e2 <main+0x51a>
 8001a3e:	bf00      	nop
 8001a40:	20000244 	.word	0x20000244
 8001a44:	0800cab0 	.word	0x0800cab0
 8001a48:	0800cac4 	.word	0x0800cac4
 8001a4c:	20000238 	.word	0x20000238
 8001a50:	0800cae0 	.word	0x0800cae0
 8001a54:	0270475c 	.word	0x0270475c
 8001a58:	40020c00 	.word	0x40020c00
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	20000248 	.word	0x20000248
 8001a64:	0800caf4 	.word	0x0800caf4
 8001a68:	0800cb18 	.word	0x0800cb18
 8001a6c:	0800cb3c 	.word	0x0800cb3c
 8001a70:	0800cb5c 	.word	0x0800cb5c
 8001a74:	0800cb70 	.word	0x0800cb70
 8001a78:	0800cb90 	.word	0x0800cb90
 8001a7c:	ffffef70 	.word	0xffffef70
 8001a80:	ffffdf70 	.word	0xffffdf70
  }

  QAD_QuadSPI::eraseAndWriteSubsector(0, uWriteData);
 8001a84:	4baf      	ldr	r3, [pc, #700]	; (8001d44 <main+0x87c>)
 8001a86:	f242 1298 	movw	r2, #8600	; 0x2198
 8001a8a:	443a      	add	r2, r7
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff fadc 	bl	800104e <_ZN11QAD_QuadSPI22eraseAndWriteSubsectorEmPh>
  QAD_QuadSPI::readSubsector(0, uReadData);
 8001a96:	4bac      	ldr	r3, [pc, #688]	; (8001d48 <main+0x880>)
 8001a98:	f242 1298 	movw	r2, #8600	; 0x2198
 8001a9c:	443a      	add	r2, r7
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff fac1 	bl	800102a <_ZN11QAD_QuadSPI13readSubsectorEmPh>

  char tempStr[256];
  uint32_t uIdx;

  UART_STLink->txStringCR("Write Data Buffer:");
 8001aa8:	4ba8      	ldr	r3, [pc, #672]	; (8001d4c <main+0x884>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	49a8      	ldr	r1, [pc, #672]	; (8001d50 <main+0x888>)
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f009 ff53 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  for (uint32_t i=0; i<8; i++) {
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f242 1290 	movw	r2, #8592	; 0x2190
 8001aba:	443a      	add	r2, r7
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	f242 1390 	movw	r3, #8592	; 0x2190
 8001ac2:	443b      	add	r3, r7
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b07      	cmp	r3, #7
 8001ac8:	f200 8092 	bhi.w	8001bf0 <main+0x728>
  	uIdx = i * 8;
 8001acc:	f242 1390 	movw	r3, #8592	; 0x2190
 8001ad0:	443b      	add	r3, r7
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	f242 1274 	movw	r2, #8564	; 0x2174
 8001ada:	443a      	add	r2, r7
 8001adc:	6013      	str	r3, [r2, #0]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
  			uWriteData[uIdx + 0], uWriteData[uIdx + 1], uWriteData[uIdx + 2], uWriteData[uIdx + 3],
 8001ade:	4b99      	ldr	r3, [pc, #612]	; (8001d44 <main+0x87c>)
 8001ae0:	f242 1298 	movw	r2, #8600	; 0x2198
 8001ae4:	443a      	add	r2, r7
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f242 1274 	movw	r2, #8564	; 0x2174
 8001aec:	443a      	add	r2, r7
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001af4:	469c      	mov	ip, r3
  			uWriteData[uIdx + 0], uWriteData[uIdx + 1], uWriteData[uIdx + 2], uWriteData[uIdx + 3],
 8001af6:	f242 1374 	movw	r3, #8564	; 0x2174
 8001afa:	443b      	add	r3, r7
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	4b90      	ldr	r3, [pc, #576]	; (8001d44 <main+0x87c>)
 8001b02:	f242 1198 	movw	r1, #8600	; 0x2198
 8001b06:	4439      	add	r1, r7
 8001b08:	440b      	add	r3, r1
 8001b0a:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001b0c:	469e      	mov	lr, r3
  			uWriteData[uIdx + 0], uWriteData[uIdx + 1], uWriteData[uIdx + 2], uWriteData[uIdx + 3],
 8001b0e:	f242 1374 	movw	r3, #8564	; 0x2174
 8001b12:	443b      	add	r3, r7
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	1c9a      	adds	r2, r3, #2
 8001b18:	4b8a      	ldr	r3, [pc, #552]	; (8001d44 <main+0x87c>)
 8001b1a:	f242 1198 	movw	r1, #8600	; 0x2198
 8001b1e:	4439      	add	r1, r7
 8001b20:	440b      	add	r3, r1
 8001b22:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001b24:	4619      	mov	r1, r3
  			uWriteData[uIdx + 0], uWriteData[uIdx + 1], uWriteData[uIdx + 2], uWriteData[uIdx + 3],
 8001b26:	f242 1374 	movw	r3, #8564	; 0x2174
 8001b2a:	443b      	add	r3, r7
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	1cda      	adds	r2, r3, #3
 8001b30:	4b84      	ldr	r3, [pc, #528]	; (8001d44 <main+0x87c>)
 8001b32:	f242 1098 	movw	r0, #8600	; 0x2198
 8001b36:	4438      	add	r0, r7
 8001b38:	4403      	add	r3, r0
 8001b3a:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001b3c:	461c      	mov	r4, r3
				uWriteData[uIdx + 4], uWriteData[uIdx + 5], uWriteData[uIdx + 6], uWriteData[uIdx + 7]);
 8001b3e:	f242 1374 	movw	r3, #8564	; 0x2174
 8001b42:	443b      	add	r3, r7
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	1d1a      	adds	r2, r3, #4
 8001b48:	4b7e      	ldr	r3, [pc, #504]	; (8001d44 <main+0x87c>)
 8001b4a:	f242 1098 	movw	r0, #8600	; 0x2198
 8001b4e:	4438      	add	r0, r7
 8001b50:	4403      	add	r3, r0
 8001b52:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001b54:	461d      	mov	r5, r3
				uWriteData[uIdx + 4], uWriteData[uIdx + 5], uWriteData[uIdx + 6], uWriteData[uIdx + 7]);
 8001b56:	f242 1374 	movw	r3, #8564	; 0x2174
 8001b5a:	443b      	add	r3, r7
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	1d5a      	adds	r2, r3, #5
 8001b60:	4b78      	ldr	r3, [pc, #480]	; (8001d44 <main+0x87c>)
 8001b62:	f242 1098 	movw	r0, #8600	; 0x2198
 8001b66:	4438      	add	r0, r7
 8001b68:	4403      	add	r3, r0
 8001b6a:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001b6c:	461e      	mov	r6, r3
				uWriteData[uIdx + 4], uWriteData[uIdx + 5], uWriteData[uIdx + 6], uWriteData[uIdx + 7]);
 8001b6e:	f242 1374 	movw	r3, #8564	; 0x2174
 8001b72:	443b      	add	r3, r7
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1d9a      	adds	r2, r3, #6
 8001b78:	4b72      	ldr	r3, [pc, #456]	; (8001d44 <main+0x87c>)
 8001b7a:	f242 1098 	movw	r0, #8600	; 0x2198
 8001b7e:	4438      	add	r0, r7
 8001b80:	4403      	add	r3, r0
 8001b82:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001b84:	607b      	str	r3, [r7, #4]
				uWriteData[uIdx + 4], uWriteData[uIdx + 5], uWriteData[uIdx + 6], uWriteData[uIdx + 7]);
 8001b86:	f242 1274 	movw	r2, #8564	; 0x2174
 8001b8a:	443a      	add	r2, r7
 8001b8c:	6813      	ldr	r3, [r2, #0]
 8001b8e:	1dda      	adds	r2, r3, #7
 8001b90:	4b6c      	ldr	r3, [pc, #432]	; (8001d44 <main+0x87c>)
 8001b92:	f242 1098 	movw	r0, #8600	; 0x2198
 8001b96:	4438      	add	r0, r7
 8001b98:	4403      	add	r3, r0
 8001b9a:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001b9c:	486d      	ldr	r0, [pc, #436]	; (8001d54 <main+0x88c>)
 8001b9e:	f242 1298 	movw	r2, #8600	; 0x2198
 8001ba2:	443a      	add	r2, r7
 8001ba4:	4410      	add	r0, r2
 8001ba6:	9305      	str	r3, [sp, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	9304      	str	r3, [sp, #16]
 8001bac:	9603      	str	r6, [sp, #12]
 8001bae:	9502      	str	r5, [sp, #8]
 8001bb0:	9401      	str	r4, [sp, #4]
 8001bb2:	9100      	str	r1, [sp, #0]
 8001bb4:	4673      	mov	r3, lr
 8001bb6:	4662      	mov	r2, ip
 8001bb8:	4967      	ldr	r1, [pc, #412]	; (8001d58 <main+0x890>)
 8001bba:	f00a fb37 	bl	800c22c <siprintf>
  	UART_STLink->txStringCR(tempStr);
 8001bbe:	4b63      	ldr	r3, [pc, #396]	; (8001d4c <main+0x884>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <main+0x88c>)
 8001bc6:	f242 1198 	movw	r1, #8600	; 0x2198
 8001bca:	4439      	add	r1, r7
 8001bcc:	440b      	add	r3, r1
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	f009 fec2 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	HAL_Delay(10);
 8001bd6:	200a      	movs	r0, #10
 8001bd8:	f001 f83a 	bl	8002c50 <HAL_Delay>
  for (uint32_t i=0; i<8; i++) {
 8001bdc:	f242 1390 	movw	r3, #8592	; 0x2190
 8001be0:	443b      	add	r3, r7
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	f242 1290 	movw	r2, #8592	; 0x2190
 8001bea:	443a      	add	r2, r7
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e766      	b.n	8001abe <main+0x5f6>
  }

  UART_STLink->txCR();
 8001bf0:	4b56      	ldr	r3, [pc, #344]	; (8001d4c <main+0x884>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f009 fee4 	bl	800b9c2 <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("Read Data Buffer:");
 8001bfa:	4b54      	ldr	r3, [pc, #336]	; (8001d4c <main+0x884>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4957      	ldr	r1, [pc, #348]	; (8001d5c <main+0x894>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f009 feaa 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  for (uint32_t i=0; i<8; i++) {
 8001c06:	2300      	movs	r3, #0
 8001c08:	f242 128c 	movw	r2, #8588	; 0x218c
 8001c0c:	443a      	add	r2, r7
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	f242 138c 	movw	r3, #8588	; 0x218c
 8001c14:	443b      	add	r3, r7
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b07      	cmp	r3, #7
 8001c1a:	f200 80a1 	bhi.w	8001d60 <main+0x898>
  	uIdx = i * 8;
 8001c1e:	f242 138c 	movw	r3, #8588	; 0x218c
 8001c22:	443b      	add	r3, r7
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	f242 1274 	movw	r2, #8564	; 0x2174
 8001c2c:	443a      	add	r2, r7
 8001c2e:	6013      	str	r3, [r2, #0]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
  			uReadData[uIdx + 0], uReadData[uIdx + 1], uReadData[uIdx + 2], uReadData[uIdx + 3],
 8001c30:	4b45      	ldr	r3, [pc, #276]	; (8001d48 <main+0x880>)
 8001c32:	f242 1298 	movw	r2, #8600	; 0x2198
 8001c36:	443a      	add	r2, r7
 8001c38:	4413      	add	r3, r2
 8001c3a:	f242 1274 	movw	r2, #8564	; 0x2174
 8001c3e:	443a      	add	r2, r7
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	781b      	ldrb	r3, [r3, #0]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001c46:	469c      	mov	ip, r3
  			uReadData[uIdx + 0], uReadData[uIdx + 1], uReadData[uIdx + 2], uReadData[uIdx + 3],
 8001c48:	f242 1374 	movw	r3, #8564	; 0x2174
 8001c4c:	443b      	add	r3, r7
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <main+0x880>)
 8001c54:	f242 1198 	movw	r1, #8600	; 0x2198
 8001c58:	4439      	add	r1, r7
 8001c5a:	440b      	add	r3, r1
 8001c5c:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001c5e:	469e      	mov	lr, r3
  			uReadData[uIdx + 0], uReadData[uIdx + 1], uReadData[uIdx + 2], uReadData[uIdx + 3],
 8001c60:	f242 1374 	movw	r3, #8564	; 0x2174
 8001c64:	443b      	add	r3, r7
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	1c9a      	adds	r2, r3, #2
 8001c6a:	4b37      	ldr	r3, [pc, #220]	; (8001d48 <main+0x880>)
 8001c6c:	f242 1198 	movw	r1, #8600	; 0x2198
 8001c70:	4439      	add	r1, r7
 8001c72:	440b      	add	r3, r1
 8001c74:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001c76:	4619      	mov	r1, r3
  			uReadData[uIdx + 0], uReadData[uIdx + 1], uReadData[uIdx + 2], uReadData[uIdx + 3],
 8001c78:	f242 1374 	movw	r3, #8564	; 0x2174
 8001c7c:	443b      	add	r3, r7
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	1cda      	adds	r2, r3, #3
 8001c82:	4b31      	ldr	r3, [pc, #196]	; (8001d48 <main+0x880>)
 8001c84:	f242 1098 	movw	r0, #8600	; 0x2198
 8001c88:	4438      	add	r0, r7
 8001c8a:	4403      	add	r3, r0
 8001c8c:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001c8e:	461c      	mov	r4, r3
				uReadData[uIdx + 4], uReadData[uIdx + 5], uReadData[uIdx + 6], uReadData[uIdx + 7]);
 8001c90:	f242 1374 	movw	r3, #8564	; 0x2174
 8001c94:	443b      	add	r3, r7
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	1d1a      	adds	r2, r3, #4
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <main+0x880>)
 8001c9c:	f242 1098 	movw	r0, #8600	; 0x2198
 8001ca0:	4438      	add	r0, r7
 8001ca2:	4403      	add	r3, r0
 8001ca4:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001ca6:	461d      	mov	r5, r3
				uReadData[uIdx + 4], uReadData[uIdx + 5], uReadData[uIdx + 6], uReadData[uIdx + 7]);
 8001ca8:	f242 1374 	movw	r3, #8564	; 0x2174
 8001cac:	443b      	add	r3, r7
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	1d5a      	adds	r2, r3, #5
 8001cb2:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <main+0x880>)
 8001cb4:	f242 1098 	movw	r0, #8600	; 0x2198
 8001cb8:	4438      	add	r0, r7
 8001cba:	4403      	add	r3, r0
 8001cbc:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001cbe:	461e      	mov	r6, r3
				uReadData[uIdx + 4], uReadData[uIdx + 5], uReadData[uIdx + 6], uReadData[uIdx + 7]);
 8001cc0:	f242 1374 	movw	r3, #8564	; 0x2174
 8001cc4:	443b      	add	r3, r7
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	1d9a      	adds	r2, r3, #6
 8001cca:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <main+0x880>)
 8001ccc:	f242 1098 	movw	r0, #8600	; 0x2198
 8001cd0:	4438      	add	r0, r7
 8001cd2:	4403      	add	r3, r0
 8001cd4:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001cd6:	607b      	str	r3, [r7, #4]
				uReadData[uIdx + 4], uReadData[uIdx + 5], uReadData[uIdx + 6], uReadData[uIdx + 7]);
 8001cd8:	f242 1274 	movw	r2, #8564	; 0x2174
 8001cdc:	443a      	add	r2, r7
 8001cde:	6813      	ldr	r3, [r2, #0]
 8001ce0:	1dda      	adds	r2, r3, #7
 8001ce2:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <main+0x880>)
 8001ce4:	f242 1098 	movw	r0, #8600	; 0x2198
 8001ce8:	4438      	add	r0, r7
 8001cea:	4403      	add	r3, r0
 8001cec:	5c9b      	ldrb	r3, [r3, r2]
  	sprintf(tempStr, "%02X %02X %02X %02X - %02X %02X %02X %02X",
 8001cee:	4819      	ldr	r0, [pc, #100]	; (8001d54 <main+0x88c>)
 8001cf0:	f242 1298 	movw	r2, #8600	; 0x2198
 8001cf4:	443a      	add	r2, r7
 8001cf6:	4410      	add	r0, r2
 8001cf8:	9305      	str	r3, [sp, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	9304      	str	r3, [sp, #16]
 8001cfe:	9603      	str	r6, [sp, #12]
 8001d00:	9502      	str	r5, [sp, #8]
 8001d02:	9401      	str	r4, [sp, #4]
 8001d04:	9100      	str	r1, [sp, #0]
 8001d06:	4673      	mov	r3, lr
 8001d08:	4662      	mov	r2, ip
 8001d0a:	4913      	ldr	r1, [pc, #76]	; (8001d58 <main+0x890>)
 8001d0c:	f00a fa8e 	bl	800c22c <siprintf>
  	UART_STLink->txStringCR(tempStr);
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <main+0x884>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <main+0x88c>)
 8001d18:	f242 1198 	movw	r1, #8600	; 0x2198
 8001d1c:	4439      	add	r1, r7
 8001d1e:	440b      	add	r3, r1
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f009 fe19 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	HAL_Delay(10);
 8001d28:	200a      	movs	r0, #10
 8001d2a:	f000 ff91 	bl	8002c50 <HAL_Delay>
  for (uint32_t i=0; i<8; i++) {
 8001d2e:	f242 138c 	movw	r3, #8588	; 0x218c
 8001d32:	443b      	add	r3, r7
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	f242 128c 	movw	r2, #8588	; 0x218c
 8001d3c:	443a      	add	r2, r7
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e766      	b.n	8001c10 <main+0x748>
 8001d42:	bf00      	nop
 8001d44:	ffffef70 	.word	0xffffef70
 8001d48:	ffffdf70 	.word	0xffffdf70
 8001d4c:	20000244 	.word	0x20000244
 8001d50:	0800cba8 	.word	0x0800cba8
 8001d54:	ffffde70 	.word	0xffffde70
 8001d58:	0800cbbc 	.word	0x0800cbbc
 8001d5c:	0800cbe8 	.word	0x0800cbe8
  }

  bool bPassed = true;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f242 128b 	movw	r2, #8587	; 0x218b
 8001d66:	443a      	add	r2, r7
 8001d68:	7013      	strb	r3, [r2, #0]
  for (uint32_t i=0; i<4096; i++) {
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f242 1284 	movw	r2, #8580	; 0x2184
 8001d70:	443a      	add	r2, r7
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	f242 1384 	movw	r3, #8580	; 0x2184
 8001d78:	443b      	add	r3, r7
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d80:	d226      	bcs.n	8001dd0 <main+0x908>
  	if (uWriteData[i] != uReadData[i])
 8001d82:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <main+0xa3c>)
 8001d84:	f242 1298 	movw	r2, #8600	; 0x2198
 8001d88:	443a      	add	r2, r7
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f242 1284 	movw	r2, #8580	; 0x2184
 8001d90:	443a      	add	r2, r7
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	4413      	add	r3, r2
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <main+0xa40>)
 8001d9a:	f242 1198 	movw	r1, #8600	; 0x2198
 8001d9e:	4439      	add	r1, r7
 8001da0:	440b      	add	r3, r1
 8001da2:	f242 1184 	movw	r1, #8580	; 0x2184
 8001da6:	4439      	add	r1, r7
 8001da8:	6809      	ldr	r1, [r1, #0]
 8001daa:	440b      	add	r3, r1
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d004      	beq.n	8001dbc <main+0x8f4>
  		bPassed = false;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f242 128b 	movw	r2, #8587	; 0x218b
 8001db8:	443a      	add	r2, r7
 8001dba:	7013      	strb	r3, [r2, #0]
  for (uint32_t i=0; i<4096; i++) {
 8001dbc:	f242 1384 	movw	r3, #8580	; 0x2184
 8001dc0:	443b      	add	r3, r7
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f242 1284 	movw	r2, #8580	; 0x2184
 8001dca:	443a      	add	r2, r7
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e7d1      	b.n	8001d74 <main+0x8ac>
  }

  if (!bPassed) {
 8001dd0:	f242 138b 	movw	r3, #8587	; 0x218b
 8001dd4:	443b      	add	r3, r7
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	f083 0301 	eor.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <main+0x932>
  	UART_STLink->txStringCR("Flash: Test Failed");
 8001de2:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <main+0xa44>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	494a      	ldr	r1, [pc, #296]	; (8001f10 <main+0xa48>)
 8001de8:	4618      	mov	r0, r3
 8001dea:	f009 fdb6 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED_Red->on();
 8001dee:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <main+0xa4c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f005 ff45 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8001df8:	e7fe      	b.n	8001df8 <main+0x930>
  }
  UART_STLink->txStringCR("Flash: Test Passed");
 8001dfa:	4b44      	ldr	r3, [pc, #272]	; (8001f0c <main+0xa44>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4946      	ldr	r1, [pc, #280]	; (8001f18 <main+0xa50>)
 8001e00:	4618      	mov	r0, r3
 8001e02:	f009 fdaa 	bl	800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  //Processing Loop

  //Create processing loop timing variables
  uint32_t uTicks;
  uint32_t uCurTick;
  uint32_t uNewTick = HAL_GetTick();
 8001e06:	f000 ff17 	bl	8002c38 <HAL_GetTick>
 8001e0a:	f242 137c 	movw	r3, #8572	; 0x217c
 8001e0e:	443b      	add	r3, r7
 8001e10:	6018      	str	r0, [r3, #0]
  uint32_t uOldTick = uNewTick;
 8001e12:	f242 137c 	movw	r3, #8572	; 0x217c
 8001e16:	443b      	add	r3, r7
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f242 1270 	movw	r2, #8560	; 0x2170
 8001e1e:	443a      	add	r2, r7
 8001e20:	6013      	str	r3, [r2, #0]

  //Create task timing variables
  uint32_t uHeartbeatTicks = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f242 1278 	movw	r2, #8568	; 0x2178
 8001e28:	443a      	add	r2, r7
 8001e2a:	6013      	str	r3, [r2, #0]

  	//----------------------------------
  	//Frame Timing
  	//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
  	//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 8001e2c:	f000 ff04 	bl	8002c38 <HAL_GetTick>
 8001e30:	f242 136c 	movw	r3, #8556	; 0x216c
 8001e34:	443b      	add	r3, r7
 8001e36:	6018      	str	r0, [r3, #0]
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8001e38:	f242 136c 	movw	r3, #8556	; 0x216c
 8001e3c:	443b      	add	r3, r7
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f242 137c 	movw	r3, #8572	; 0x217c
 8001e44:	443b      	add	r3, r7
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d034      	beq.n	8001eb6 <main+0x9ee>
    	uOldTick = uNewTick;
 8001e4c:	f242 137c 	movw	r3, #8572	; 0x217c
 8001e50:	443b      	add	r3, r7
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f242 1270 	movw	r2, #8560	; 0x2170
 8001e58:	443a      	add	r2, r7
 8001e5a:	6013      	str	r3, [r2, #0]
    	uNewTick = uCurTick;
 8001e5c:	f242 136c 	movw	r3, #8556	; 0x216c
 8001e60:	443b      	add	r3, r7
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f242 127c 	movw	r2, #8572	; 0x217c
 8001e68:	443a      	add	r2, r7
 8001e6a:	6013      	str	r3, [r2, #0]
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8001e6c:	f242 137c 	movw	r3, #8572	; 0x217c
 8001e70:	443b      	add	r3, r7
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	f242 1370 	movw	r3, #8560	; 0x2170
 8001e78:	443b      	add	r3, r7
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d20d      	bcs.n	8001e9c <main+0x9d4>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8001e80:	f242 137c 	movw	r3, #8572	; 0x217c
 8001e84:	443b      	add	r3, r7
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	f242 1370 	movw	r3, #8560	; 0x2170
 8001e8c:	443b      	add	r3, r7
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e010      	b.n	8001ebe <main+0x9f6>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8001e9c:	f242 137c 	movw	r3, #8572	; 0x217c
 8001ea0:	443b      	add	r3, r7
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	f242 1370 	movw	r3, #8560	; 0x2170
 8001ea8:	443b      	add	r3, r7
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	e003      	b.n	8001ebe <main+0x9f6>
    	}

    } else {
    	uTicks = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001ebc:	6013      	str	r3, [r2, #0]

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the green User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //has become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8001ebe:	f242 1378 	movw	r3, #8568	; 0x2178
 8001ec2:	443b      	add	r3, r7
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	f507 5306 	add.w	r3, r7, #8576	; 0x2180
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f242 1278 	movw	r2, #8568	; 0x2178
 8001ed2:	443a      	add	r2, r7
 8001ed4:	6013      	str	r3, [r2, #0]
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) {
 8001ed6:	f242 1378 	movw	r3, #8568	; 0x2178
 8001eda:	443b      	add	r3, r7
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ee2:	d3a3      	bcc.n	8001e2c <main+0x964>
    	GPIO_UserLED_Green->toggle();
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <main+0xa54>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f005 fef0 	bl	8007cce <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;
 8001eee:	f242 1378 	movw	r3, #8568	; 0x2178
 8001ef2:	443b      	add	r3, r7
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001efa:	f242 1278 	movw	r2, #8568	; 0x2178
 8001efe:	443a      	add	r2, r7
 8001f00:	6013      	str	r3, [r2, #0]
    uCurTick = HAL_GetTick();
 8001f02:	e793      	b.n	8001e2c <main+0x964>
 8001f04:	ffffef70 	.word	0xffffef70
 8001f08:	ffffdf70 	.word	0xffffdf70
 8001f0c:	20000244 	.word	0x20000244
 8001f10:	0800cbfc 	.word	0x0800cbfc
 8001f14:	20000238 	.word	0x20000238
 8001f18:	0800cc10 	.word	0x0800cc10
 8001f1c:	2000023c 	.word	0x2000023c

08001f20 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8001f2a:	683c      	ldr	r4, [r7, #0]
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f009 ffe2 	bl	800bef6 <_Znaj>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4618      	mov	r0, r3
 8001f36:	4602      	mov	r2, r0
 8001f38:	1e63      	subs	r3, r4, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db04      	blt.n	8001f48 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8001f3e:	2100      	movs	r1, #0
 8001f40:	7011      	strb	r1, [r2, #0]
 8001f42:	3201      	adds	r2, #1
 8001f44:	3b01      	subs	r3, #1
 8001f46:	e7f8      	b.n	8001f3a <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8001f48:	4601      	mov	r1, r0
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8b7 	bl	80020be <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd90      	pop	{r4, r7, pc}

08001f58 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8001f58:	b5b0      	push	{r4, r5, r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001f62:	6838      	ldr	r0, [r7, #0]
 8001f64:	f000 f8c7 	bl	80020f6 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	881c      	ldrh	r4, [r3, #0]
 8001f6c:	200c      	movs	r0, #12
 8001f6e:	f009 ffb1 	bl	800bed4 <_Znwj>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461d      	mov	r5, r3
 8001f76:	4621      	mov	r1, r4
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f7ff f87a 	bl	8001072 <_ZN14QAT_FIFOBufferC1Et>
 8001f7e:	4629      	mov	r1, r5
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8c3 	bl	800210c <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bdb0      	pop	{r4, r5, r7, pc}

08001f8e <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8001f8e:	b5b0      	push	{r4, r5, r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001f98:	6838      	ldr	r0, [r7, #0]
 8001f9a:	f000 f8d3 	bl	8002144 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 8001f9e:	4605      	mov	r5, r0
 8001fa0:	20a4      	movs	r0, #164	; 0xa4
 8001fa2:	f009 ff97 	bl	800bed4 <_Znwj>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461c      	mov	r4, r3
 8001faa:	4629      	mov	r1, r5
 8001fac:	4620      	mov	r0, r4
 8001fae:	f7ff f8af 	bl	8001110 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f8d0 	bl	800215a <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bdb0      	pop	{r4, r5, r7, pc}

08001fc2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f8e1 	bl	8002192 <_ZNSaIP12QAS_LCD_FontEC1Ev>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f8e9 	bl	80021aa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_ZNSaIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8f1 	bl	80021d2 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002012:	461a      	mov	r2, r3
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f8e7 	bl	80021e8 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      }
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff f8dd 	bl	80011dc <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681c      	ldr	r4, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f8e5 	bl	800220e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8002044:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002046:	461a      	mov	r2, r3
 8002048:	4629      	mov	r1, r5
 800204a:	4620      	mov	r0, r4
 800204c:	f000 f8ea 	bl	8002224 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ffd1 	bl	8001ffa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bdb0      	pop	{r4, r5, r7, pc}

08002062 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f8e5 	bl	8002240 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	109b      	asrs	r3, r3, #2
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
      }
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6839      	ldr	r1, [r7, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 f8d8 	bl	8002282 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f8df 	bl	80022aa <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6839      	ldr	r1, [r7, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f8d2 	bl	80022c4 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 f8d9 	bl	80022ec <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800213a:	4603      	mov	r3, r0
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6839      	ldr	r1, [r7, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f000 f8cc 	bl	8002306 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f8d3 	bl	800232e <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002188:	4603      	mov	r3, r0
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <_ZNSaIP12QAS_LCD_FontEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f8d4 	bl	8002348 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
	{ }
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
	if (__p)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68b9      	ldr	r1, [r7, #8]
 8002200:	4618      	mov	r0, r3
 8002202:	f000 f8ac 	bl	800235e <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>
      }
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f8a2 	bl	800237c <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>
    }
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	109b      	asrs	r3, r3, #2
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00e      	beq.n	800227a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ffd3 	bl	800220e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8002268:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800226a:	461a      	mov	r2, r3
 800226c:	4621      	mov	r1, r4
 800226e:	6838      	ldr	r0, [r7, #0]
 8002270:	f7ff ffd8 	bl	8002224 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bd90      	pop	{r4, r7, pc}

08002282 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f881 	bl	8002396 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff21 	bl	80020dc <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800229a:	4602      	mov	r2, r0
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f87b 	bl	80023b0 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 f879 	bl	80023c8 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ff27 	bl	800212a <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 80022dc:	4602      	mov	r2, r0
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f873 	bl	80023e2 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f871 	bl	80023fa <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff2d 	bl	8002178 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 800231e:	4602      	mov	r2, r0
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f86b 	bl	8002414 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800233e:	4603      	mov	r3, r0
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f85c 	bl	800242c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002386:	6839      	ldr	r1, [r7, #0]
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f85c 	bl	8002446 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>
    }
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f85b 	bl	800245c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f85f 	bl	800247c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 80023be:	4603      	mov	r3, r0
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f85f 	bl	8002496 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f863 	bl	80024b6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 80023f0:	4603      	mov	r3, r0
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4618      	mov	r0, r3
 8002406:	f000 f863 	bl	80024d0 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f867 	bl	80024f0 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 8002422:	4603      	mov	r3, r0
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8002438:	68b8      	ldr	r0, [r7, #8]
 800243a:	f009 fd38 	bl	800beae <_ZdlPv>
      }
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f850 	bl	800250a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f858 	bl	8002522 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f859 	bl	800253e <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 800248c:	4603      	mov	r3, r0
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f858 	bl	8002554 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f860 	bl	800256c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f861 	bl	8002588 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f860 	bl	800259e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f868 	bl	80025b6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f869 	bl	80025d2 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 8002500:	4603      	mov	r3, r0
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f868 	bl	80025e8 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f84e 	bl	80025fe <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f834 	bl	8002614 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
      : _Head() { }
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
	return 1;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <_kill>:

int _kill(int pid, int sig)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002644:	f009 fc8a 	bl	800bf5c <__errno>
 8002648:	4603      	mov	r3, r0
 800264a:	2216      	movs	r2, #22
 800264c:	601a      	str	r2, [r3, #0]
	return -1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <_exit>:

void _exit (int status)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002662:	f04f 31ff 	mov.w	r1, #4294967295
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ffe7 	bl	800263a <_kill>
	while (1) {}		/* Make sure we hang here */
 800266c:	e7fe      	b.n	800266c <_exit+0x12>
	...

08002670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <_sbrk+0x5c>)
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <_sbrk+0x60>)
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <_sbrk+0x64>)
 800268e:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <_sbrk+0x68>)
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d207      	bcs.n	80026b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a0:	f009 fc5c 	bl	800bf5c <__errno>
 80026a4:	4603      	mov	r3, r0
 80026a6:	220c      	movs	r2, #12
 80026a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	e009      	b.n	80026c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <_sbrk+0x64>)
 80026c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20080000 	.word	0x20080000
 80026d0:	00000400 	.word	0x00000400
 80026d4:	2000024c 	.word	0x2000024c
 80026d8:	200004e8 	.word	0x200004e8

080026dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <SystemInit+0x20>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <SystemInit+0x20>)
 80026e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800270a:	49c1      	ldr	r1, [pc, #772]	; (8002a10 <OTM8009A_Init+0x310>)
 800270c:	2000      	movs	r0, #0
 800270e:	f006 fa07 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8002712:	49c0      	ldr	r1, [pc, #768]	; (8002a14 <OTM8009A_Init+0x314>)
 8002714:	2003      	movs	r0, #3
 8002716:	f006 fa03 	bl	8008b20 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800271a:	49bf      	ldr	r1, [pc, #764]	; (8002a18 <OTM8009A_Init+0x318>)
 800271c:	2000      	movs	r0, #0
 800271e:	f006 f9ff 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8002722:	49be      	ldr	r1, [pc, #760]	; (8002a1c <OTM8009A_Init+0x31c>)
 8002724:	2002      	movs	r0, #2
 8002726:	f006 f9fb 	bl	8008b20 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800272a:	49bb      	ldr	r1, [pc, #748]	; (8002a18 <OTM8009A_Init+0x318>)
 800272c:	2000      	movs	r0, #0
 800272e:	f006 f9f7 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8002732:	49bb      	ldr	r1, [pc, #748]	; (8002a20 <OTM8009A_Init+0x320>)
 8002734:	2000      	movs	r0, #0
 8002736:	f006 f9f3 	bl	8008b20 <DSI_IO_WriteCmd>
  HAL_Delay(10);
 800273a:	200a      	movs	r0, #10
 800273c:	f000 fa88 	bl	8002c50 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8002740:	49b8      	ldr	r1, [pc, #736]	; (8002a24 <OTM8009A_Init+0x324>)
 8002742:	2000      	movs	r0, #0
 8002744:	f006 f9ec 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8002748:	49b7      	ldr	r1, [pc, #732]	; (8002a28 <OTM8009A_Init+0x328>)
 800274a:	2000      	movs	r0, #0
 800274c:	f006 f9e8 	bl	8008b20 <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8002750:	200a      	movs	r0, #10
 8002752:	f000 fa7d 	bl	8002c50 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8002756:	49b5      	ldr	r1, [pc, #724]	; (8002a2c <OTM8009A_Init+0x32c>)
 8002758:	2000      	movs	r0, #0
 800275a:	f006 f9e1 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800275e:	49b4      	ldr	r1, [pc, #720]	; (8002a30 <OTM8009A_Init+0x330>)
 8002760:	2000      	movs	r0, #0
 8002762:	f006 f9dd 	bl	8008b20 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8002766:	49b3      	ldr	r1, [pc, #716]	; (8002a34 <OTM8009A_Init+0x334>)
 8002768:	2000      	movs	r0, #0
 800276a:	f006 f9d9 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800276e:	49b2      	ldr	r1, [pc, #712]	; (8002a38 <OTM8009A_Init+0x338>)
 8002770:	2000      	movs	r0, #0
 8002772:	f006 f9d5 	bl	8008b20 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8002776:	49b1      	ldr	r1, [pc, #708]	; (8002a3c <OTM8009A_Init+0x33c>)
 8002778:	2000      	movs	r0, #0
 800277a:	f006 f9d1 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 800277e:	49b0      	ldr	r1, [pc, #704]	; (8002a40 <OTM8009A_Init+0x340>)
 8002780:	2000      	movs	r0, #0
 8002782:	f006 f9cd 	bl	8008b20 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002786:	49a2      	ldr	r1, [pc, #648]	; (8002a10 <OTM8009A_Init+0x310>)
 8002788:	2000      	movs	r0, #0
 800278a:	f006 f9c9 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 800278e:	49ad      	ldr	r1, [pc, #692]	; (8002a44 <OTM8009A_Init+0x344>)
 8002790:	2000      	movs	r0, #0
 8002792:	f006 f9c5 	bl	8008b20 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002796:	49ac      	ldr	r1, [pc, #688]	; (8002a48 <OTM8009A_Init+0x348>)
 8002798:	2000      	movs	r0, #0
 800279a:	f006 f9c1 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 800279e:	49ab      	ldr	r1, [pc, #684]	; (8002a4c <OTM8009A_Init+0x34c>)
 80027a0:	2000      	movs	r0, #0
 80027a2:	f006 f9bd 	bl	8008b20 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80027a6:	49aa      	ldr	r1, [pc, #680]	; (8002a50 <OTM8009A_Init+0x350>)
 80027a8:	2000      	movs	r0, #0
 80027aa:	f006 f9b9 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80027ae:	49a9      	ldr	r1, [pc, #676]	; (8002a54 <OTM8009A_Init+0x354>)
 80027b0:	2000      	movs	r0, #0
 80027b2:	f006 f9b5 	bl	8008b20 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80027b6:	49a8      	ldr	r1, [pc, #672]	; (8002a58 <OTM8009A_Init+0x358>)
 80027b8:	2000      	movs	r0, #0
 80027ba:	f006 f9b1 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80027be:	49a7      	ldr	r1, [pc, #668]	; (8002a5c <OTM8009A_Init+0x35c>)
 80027c0:	2000      	movs	r0, #0
 80027c2:	f006 f9ad 	bl	8008b20 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80027c6:	49a6      	ldr	r1, [pc, #664]	; (8002a60 <OTM8009A_Init+0x360>)
 80027c8:	2000      	movs	r0, #0
 80027ca:	f006 f9a9 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80027ce:	499a      	ldr	r1, [pc, #616]	; (8002a38 <OTM8009A_Init+0x338>)
 80027d0:	2000      	movs	r0, #0
 80027d2:	f006 f9a5 	bl	8008b20 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80027d6:	498e      	ldr	r1, [pc, #568]	; (8002a10 <OTM8009A_Init+0x310>)
 80027d8:	2000      	movs	r0, #0
 80027da:	f006 f9a1 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80027de:	49a1      	ldr	r1, [pc, #644]	; (8002a64 <OTM8009A_Init+0x364>)
 80027e0:	2002      	movs	r0, #2
 80027e2:	f006 f99d 	bl	8008b20 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80027e6:	49a0      	ldr	r1, [pc, #640]	; (8002a68 <OTM8009A_Init+0x368>)
 80027e8:	2000      	movs	r0, #0
 80027ea:	f006 f999 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80027ee:	499f      	ldr	r1, [pc, #636]	; (8002a6c <OTM8009A_Init+0x36c>)
 80027f0:	2000      	movs	r0, #0
 80027f2:	f006 f995 	bl	8008b20 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80027f6:	499e      	ldr	r1, [pc, #632]	; (8002a70 <OTM8009A_Init+0x370>)
 80027f8:	2000      	movs	r0, #0
 80027fa:	f006 f991 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80027fe:	499d      	ldr	r1, [pc, #628]	; (8002a74 <OTM8009A_Init+0x374>)
 8002800:	2000      	movs	r0, #0
 8002802:	f006 f98d 	bl	8008b20 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8002806:	499c      	ldr	r1, [pc, #624]	; (8002a78 <OTM8009A_Init+0x378>)
 8002808:	2000      	movs	r0, #0
 800280a:	f006 f989 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800280e:	499b      	ldr	r1, [pc, #620]	; (8002a7c <OTM8009A_Init+0x37c>)
 8002810:	2000      	movs	r0, #0
 8002812:	f006 f985 	bl	8008b20 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002816:	498c      	ldr	r1, [pc, #560]	; (8002a48 <OTM8009A_Init+0x348>)
 8002818:	2000      	movs	r0, #0
 800281a:	f006 f981 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800281e:	4998      	ldr	r1, [pc, #608]	; (8002a80 <OTM8009A_Init+0x380>)
 8002820:	2000      	movs	r0, #0
 8002822:	f006 f97d 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8002826:	498a      	ldr	r1, [pc, #552]	; (8002a50 <OTM8009A_Init+0x350>)
 8002828:	2000      	movs	r0, #0
 800282a:	f006 f979 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800282e:	4995      	ldr	r1, [pc, #596]	; (8002a84 <OTM8009A_Init+0x384>)
 8002830:	2000      	movs	r0, #0
 8002832:	f006 f975 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8002836:	4994      	ldr	r1, [pc, #592]	; (8002a88 <OTM8009A_Init+0x388>)
 8002838:	2000      	movs	r0, #0
 800283a:	f006 f971 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800283e:	4993      	ldr	r1, [pc, #588]	; (8002a8c <OTM8009A_Init+0x38c>)
 8002840:	2002      	movs	r0, #2
 8002842:	f006 f96d 	bl	8008b20 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002846:	4974      	ldr	r1, [pc, #464]	; (8002a18 <OTM8009A_Init+0x318>)
 8002848:	2000      	movs	r0, #0
 800284a:	f006 f969 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800284e:	4990      	ldr	r1, [pc, #576]	; (8002a90 <OTM8009A_Init+0x390>)
 8002850:	2006      	movs	r0, #6
 8002852:	f006 f965 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002856:	498f      	ldr	r1, [pc, #572]	; (8002a94 <OTM8009A_Init+0x394>)
 8002858:	2000      	movs	r0, #0
 800285a:	f006 f961 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800285e:	498e      	ldr	r1, [pc, #568]	; (8002a98 <OTM8009A_Init+0x398>)
 8002860:	200e      	movs	r0, #14
 8002862:	f006 f95d 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002866:	498d      	ldr	r1, [pc, #564]	; (8002a9c <OTM8009A_Init+0x39c>)
 8002868:	2000      	movs	r0, #0
 800286a:	f006 f959 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800286e:	498c      	ldr	r1, [pc, #560]	; (8002aa0 <OTM8009A_Init+0x3a0>)
 8002870:	200e      	movs	r0, #14
 8002872:	f006 f955 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002876:	498b      	ldr	r1, [pc, #556]	; (8002aa4 <OTM8009A_Init+0x3a4>)
 8002878:	2000      	movs	r0, #0
 800287a:	f006 f951 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 800287e:	498a      	ldr	r1, [pc, #552]	; (8002aa8 <OTM8009A_Init+0x3a8>)
 8002880:	200a      	movs	r0, #10
 8002882:	f006 f94d 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002886:	4989      	ldr	r1, [pc, #548]	; (8002aac <OTM8009A_Init+0x3ac>)
 8002888:	2000      	movs	r0, #0
 800288a:	f006 f949 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 800288e:	4988      	ldr	r1, [pc, #544]	; (8002ab0 <OTM8009A_Init+0x3b0>)
 8002890:	2000      	movs	r0, #0
 8002892:	f006 f945 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002896:	4960      	ldr	r1, [pc, #384]	; (8002a18 <OTM8009A_Init+0x318>)
 8002898:	2000      	movs	r0, #0
 800289a:	f006 f941 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800289e:	4985      	ldr	r1, [pc, #532]	; (8002ab4 <OTM8009A_Init+0x3b4>)
 80028a0:	200a      	movs	r0, #10
 80028a2:	f006 f93d 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80028a6:	4984      	ldr	r1, [pc, #528]	; (8002ab8 <OTM8009A_Init+0x3b8>)
 80028a8:	2000      	movs	r0, #0
 80028aa:	f006 f939 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80028ae:	4983      	ldr	r1, [pc, #524]	; (8002abc <OTM8009A_Init+0x3bc>)
 80028b0:	200f      	movs	r0, #15
 80028b2:	f006 f935 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80028b6:	4977      	ldr	r1, [pc, #476]	; (8002a94 <OTM8009A_Init+0x394>)
 80028b8:	2000      	movs	r0, #0
 80028ba:	f006 f931 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80028be:	4980      	ldr	r1, [pc, #512]	; (8002ac0 <OTM8009A_Init+0x3c0>)
 80028c0:	200f      	movs	r0, #15
 80028c2:	f006 f92d 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80028c6:	4975      	ldr	r1, [pc, #468]	; (8002a9c <OTM8009A_Init+0x39c>)
 80028c8:	2000      	movs	r0, #0
 80028ca:	f006 f929 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80028ce:	497d      	ldr	r1, [pc, #500]	; (8002ac4 <OTM8009A_Init+0x3c4>)
 80028d0:	200a      	movs	r0, #10
 80028d2:	f006 f925 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80028d6:	4973      	ldr	r1, [pc, #460]	; (8002aa4 <OTM8009A_Init+0x3a4>)
 80028d8:	2000      	movs	r0, #0
 80028da:	f006 f921 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80028de:	497a      	ldr	r1, [pc, #488]	; (8002ac8 <OTM8009A_Init+0x3c8>)
 80028e0:	200f      	movs	r0, #15
 80028e2:	f006 f91d 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80028e6:	4971      	ldr	r1, [pc, #452]	; (8002aac <OTM8009A_Init+0x3ac>)
 80028e8:	2000      	movs	r0, #0
 80028ea:	f006 f919 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80028ee:	4977      	ldr	r1, [pc, #476]	; (8002acc <OTM8009A_Init+0x3cc>)
 80028f0:	200f      	movs	r0, #15
 80028f2:	f006 f915 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80028f6:	4976      	ldr	r1, [pc, #472]	; (8002ad0 <OTM8009A_Init+0x3d0>)
 80028f8:	2000      	movs	r0, #0
 80028fa:	f006 f911 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80028fe:	4975      	ldr	r1, [pc, #468]	; (8002ad4 <OTM8009A_Init+0x3d4>)
 8002900:	200a      	movs	r0, #10
 8002902:	f006 f90d 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8002906:	4974      	ldr	r1, [pc, #464]	; (8002ad8 <OTM8009A_Init+0x3d8>)
 8002908:	2000      	movs	r0, #0
 800290a:	f006 f909 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800290e:	4973      	ldr	r1, [pc, #460]	; (8002adc <OTM8009A_Init+0x3dc>)
 8002910:	200a      	movs	r0, #10
 8002912:	f006 f905 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002916:	4940      	ldr	r1, [pc, #256]	; (8002a18 <OTM8009A_Init+0x318>)
 8002918:	2000      	movs	r0, #0
 800291a:	f006 f901 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800291e:	4970      	ldr	r1, [pc, #448]	; (8002ae0 <OTM8009A_Init+0x3e0>)
 8002920:	200a      	movs	r0, #10
 8002922:	f006 f8fd 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8002926:	4964      	ldr	r1, [pc, #400]	; (8002ab8 <OTM8009A_Init+0x3b8>)
 8002928:	2000      	movs	r0, #0
 800292a:	f006 f8f9 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800292e:	496d      	ldr	r1, [pc, #436]	; (8002ae4 <OTM8009A_Init+0x3e4>)
 8002930:	200f      	movs	r0, #15
 8002932:	f006 f8f5 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002936:	4957      	ldr	r1, [pc, #348]	; (8002a94 <OTM8009A_Init+0x394>)
 8002938:	2000      	movs	r0, #0
 800293a:	f006 f8f1 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800293e:	496a      	ldr	r1, [pc, #424]	; (8002ae8 <OTM8009A_Init+0x3e8>)
 8002940:	200f      	movs	r0, #15
 8002942:	f006 f8ed 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002946:	4955      	ldr	r1, [pc, #340]	; (8002a9c <OTM8009A_Init+0x39c>)
 8002948:	2000      	movs	r0, #0
 800294a:	f006 f8e9 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800294e:	4967      	ldr	r1, [pc, #412]	; (8002aec <OTM8009A_Init+0x3ec>)
 8002950:	200a      	movs	r0, #10
 8002952:	f006 f8e5 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002956:	4953      	ldr	r1, [pc, #332]	; (8002aa4 <OTM8009A_Init+0x3a4>)
 8002958:	2000      	movs	r0, #0
 800295a:	f006 f8e1 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800295e:	4964      	ldr	r1, [pc, #400]	; (8002af0 <OTM8009A_Init+0x3f0>)
 8002960:	200f      	movs	r0, #15
 8002962:	f006 f8dd 	bl	8008b20 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002966:	4951      	ldr	r1, [pc, #324]	; (8002aac <OTM8009A_Init+0x3ac>)
 8002968:	2000      	movs	r0, #0
 800296a:	f006 f8d9 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800296e:	4961      	ldr	r1, [pc, #388]	; (8002af4 <OTM8009A_Init+0x3f4>)
 8002970:	200f      	movs	r0, #15
 8002972:	f006 f8d5 	bl	8008b20 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002976:	4934      	ldr	r1, [pc, #208]	; (8002a48 <OTM8009A_Init+0x348>)
 8002978:	2000      	movs	r0, #0
 800297a:	f006 f8d1 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800297e:	495e      	ldr	r1, [pc, #376]	; (8002af8 <OTM8009A_Init+0x3f8>)
 8002980:	2000      	movs	r0, #0
 8002982:	f006 f8cd 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8002986:	495d      	ldr	r1, [pc, #372]	; (8002afc <OTM8009A_Init+0x3fc>)
 8002988:	2000      	movs	r0, #0
 800298a:	f006 f8c9 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 800298e:	495c      	ldr	r1, [pc, #368]	; (8002b00 <OTM8009A_Init+0x400>)
 8002990:	2000      	movs	r0, #0
 8002992:	f006 f8c5 	bl	8008b20 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8002996:	495b      	ldr	r1, [pc, #364]	; (8002b04 <OTM8009A_Init+0x404>)
 8002998:	2000      	movs	r0, #0
 800299a:	f006 f8c1 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 800299e:	495a      	ldr	r1, [pc, #360]	; (8002b08 <OTM8009A_Init+0x408>)
 80029a0:	2000      	movs	r0, #0
 80029a2:	f006 f8bd 	bl	8008b20 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80029a6:	491a      	ldr	r1, [pc, #104]	; (8002a10 <OTM8009A_Init+0x310>)
 80029a8:	2000      	movs	r0, #0
 80029aa:	f006 f8b9 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80029ae:	4957      	ldr	r1, [pc, #348]	; (8002b0c <OTM8009A_Init+0x40c>)
 80029b0:	2003      	movs	r0, #3
 80029b2:	f006 f8b5 	bl	8008b20 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80029b6:	4916      	ldr	r1, [pc, #88]	; (8002a10 <OTM8009A_Init+0x310>)
 80029b8:	2000      	movs	r0, #0
 80029ba:	f006 f8b1 	bl	8008b20 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80029be:	4914      	ldr	r1, [pc, #80]	; (8002a10 <OTM8009A_Init+0x310>)
 80029c0:	2000      	movs	r0, #0
 80029c2:	f006 f8ad 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80029c6:	4952      	ldr	r1, [pc, #328]	; (8002b10 <OTM8009A_Init+0x410>)
 80029c8:	2010      	movs	r0, #16
 80029ca:	f006 f8a9 	bl	8008b20 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80029ce:	4910      	ldr	r1, [pc, #64]	; (8002a10 <OTM8009A_Init+0x310>)
 80029d0:	2000      	movs	r0, #0
 80029d2:	f006 f8a5 	bl	8008b20 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80029d6:	494f      	ldr	r1, [pc, #316]	; (8002b14 <OTM8009A_Init+0x414>)
 80029d8:	2010      	movs	r0, #16
 80029da:	f006 f8a1 	bl	8008b20 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80029de:	494e      	ldr	r1, [pc, #312]	; (8002b18 <OTM8009A_Init+0x418>)
 80029e0:	2000      	movs	r0, #0
 80029e2:	f006 f89d 	bl	8008b20 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  HAL_Delay(120);
 80029e6:	2078      	movs	r0, #120	; 0x78
 80029e8:	f000 f932 	bl	8002c50 <HAL_Delay>

  switch(ColorCoding)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <OTM8009A_Init+0x304>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	f040 8095 	bne.w	8002b24 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 80029fa:	4948      	ldr	r1, [pc, #288]	; (8002b1c <OTM8009A_Init+0x41c>)
 80029fc:	2000      	movs	r0, #0
 80029fe:	f006 f88f 	bl	8008b20 <DSI_IO_WriteCmd>
    break;
 8002a02:	e090      	b.n	8002b26 <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8002a04:	4946      	ldr	r1, [pc, #280]	; (8002b20 <OTM8009A_Init+0x420>)
 8002a06:	2000      	movs	r0, #0
 8002a08:	f006 f88a 	bl	8008b20 <DSI_IO_WriteCmd>
    break;
 8002a0c:	e08b      	b.n	8002b26 <OTM8009A_Init+0x426>
 8002a0e:	bf00      	nop
 8002a10:	0800cdf4 	.word	0x0800cdf4
 8002a14:	0800ccac 	.word	0x0800ccac
 8002a18:	0800cdf8 	.word	0x0800cdf8
 8002a1c:	0800ccb0 	.word	0x0800ccb0
 8002a20:	0800cdfc 	.word	0x0800cdfc
 8002a24:	0800ce00 	.word	0x0800ce00
 8002a28:	0800ce04 	.word	0x0800ce04
 8002a2c:	0800ce08 	.word	0x0800ce08
 8002a30:	0800ce0c 	.word	0x0800ce0c
 8002a34:	0800ce10 	.word	0x0800ce10
 8002a38:	0800ce14 	.word	0x0800ce14
 8002a3c:	0800ce18 	.word	0x0800ce18
 8002a40:	0800ce1c 	.word	0x0800ce1c
 8002a44:	0800ce20 	.word	0x0800ce20
 8002a48:	0800ce24 	.word	0x0800ce24
 8002a4c:	0800ce28 	.word	0x0800ce28
 8002a50:	0800ce2c 	.word	0x0800ce2c
 8002a54:	0800ce30 	.word	0x0800ce30
 8002a58:	0800ce34 	.word	0x0800ce34
 8002a5c:	0800ce38 	.word	0x0800ce38
 8002a60:	0800ce3c 	.word	0x0800ce3c
 8002a64:	0800ccdc 	.word	0x0800ccdc
 8002a68:	0800ce40 	.word	0x0800ce40
 8002a6c:	0800ce44 	.word	0x0800ce44
 8002a70:	0800ce48 	.word	0x0800ce48
 8002a74:	0800ce4c 	.word	0x0800ce4c
 8002a78:	0800ce50 	.word	0x0800ce50
 8002a7c:	0800ce54 	.word	0x0800ce54
 8002a80:	0800ce58 	.word	0x0800ce58
 8002a84:	0800ce5c 	.word	0x0800ce5c
 8002a88:	0800ce60 	.word	0x0800ce60
 8002a8c:	0800cce0 	.word	0x0800cce0
 8002a90:	0800cce4 	.word	0x0800cce4
 8002a94:	0800ce64 	.word	0x0800ce64
 8002a98:	0800ccec 	.word	0x0800ccec
 8002a9c:	0800ce68 	.word	0x0800ce68
 8002aa0:	0800ccfc 	.word	0x0800ccfc
 8002aa4:	0800ce6c 	.word	0x0800ce6c
 8002aa8:	0800cd0c 	.word	0x0800cd0c
 8002aac:	0800ce70 	.word	0x0800ce70
 8002ab0:	0800cea8 	.word	0x0800cea8
 8002ab4:	0800cd18 	.word	0x0800cd18
 8002ab8:	0800ce74 	.word	0x0800ce74
 8002abc:	0800cd24 	.word	0x0800cd24
 8002ac0:	0800cd34 	.word	0x0800cd34
 8002ac4:	0800cd44 	.word	0x0800cd44
 8002ac8:	0800cd50 	.word	0x0800cd50
 8002acc:	0800cd60 	.word	0x0800cd60
 8002ad0:	0800ce78 	.word	0x0800ce78
 8002ad4:	0800cd70 	.word	0x0800cd70
 8002ad8:	0800ce7c 	.word	0x0800ce7c
 8002adc:	0800cd7c 	.word	0x0800cd7c
 8002ae0:	0800cd88 	.word	0x0800cd88
 8002ae4:	0800cd94 	.word	0x0800cd94
 8002ae8:	0800cda4 	.word	0x0800cda4
 8002aec:	0800cdb4 	.word	0x0800cdb4
 8002af0:	0800cdc0 	.word	0x0800cdc0
 8002af4:	0800cdd0 	.word	0x0800cdd0
 8002af8:	0800ceac 	.word	0x0800ceac
 8002afc:	0800ceb0 	.word	0x0800ceb0
 8002b00:	0800ceb4 	.word	0x0800ceb4
 8002b04:	0800ceb8 	.word	0x0800ceb8
 8002b08:	0800cebc 	.word	0x0800cebc
 8002b0c:	0800cde0 	.word	0x0800cde0
 8002b10:	0800ccb4 	.word	0x0800ccb4
 8002b14:	0800ccc8 	.word	0x0800ccc8
 8002b18:	0800ce80 	.word	0x0800ce80
 8002b1c:	0800ce84 	.word	0x0800ce84
 8002b20:	0800ce88 	.word	0x0800ce88
  default :
    break;
 8002b24:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d10b      	bne.n	8002b44 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8002b2c:	4916      	ldr	r1, [pc, #88]	; (8002b88 <OTM8009A_Init+0x488>)
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f005 fff6 	bl	8008b20 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8002b34:	4915      	ldr	r1, [pc, #84]	; (8002b8c <OTM8009A_Init+0x48c>)
 8002b36:	2004      	movs	r0, #4
 8002b38:	f005 fff2 	bl	8008b20 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8002b3c:	4914      	ldr	r1, [pc, #80]	; (8002b90 <OTM8009A_Init+0x490>)
 8002b3e:	2004      	movs	r0, #4
 8002b40:	f005 ffee 	bl	8008b20 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8002b44:	4913      	ldr	r1, [pc, #76]	; (8002b94 <OTM8009A_Init+0x494>)
 8002b46:	2000      	movs	r0, #0
 8002b48:	f005 ffea 	bl	8008b20 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8002b4c:	4912      	ldr	r1, [pc, #72]	; (8002b98 <OTM8009A_Init+0x498>)
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f005 ffe6 	bl	8008b20 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8002b54:	4911      	ldr	r1, [pc, #68]	; (8002b9c <OTM8009A_Init+0x49c>)
 8002b56:	2000      	movs	r0, #0
 8002b58:	f005 ffe2 	bl	8008b20 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8002b5c:	4910      	ldr	r1, [pc, #64]	; (8002ba0 <OTM8009A_Init+0x4a0>)
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f005 ffde 	bl	8008b20 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002b64:	490f      	ldr	r1, [pc, #60]	; (8002ba4 <OTM8009A_Init+0x4a4>)
 8002b66:	2000      	movs	r0, #0
 8002b68:	f005 ffda 	bl	8008b20 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002b6c:	490e      	ldr	r1, [pc, #56]	; (8002ba8 <OTM8009A_Init+0x4a8>)
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f005 ffd6 	bl	8008b20 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8002b74:	490d      	ldr	r1, [pc, #52]	; (8002bac <OTM8009A_Init+0x4ac>)
 8002b76:	2000      	movs	r0, #0
 8002b78:	f005 ffd2 	bl	8008b20 <DSI_IO_WriteCmd>

  return 0;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	0800ce8c 	.word	0x0800ce8c
 8002b8c:	0800cde4 	.word	0x0800cde4
 8002b90:	0800cdec 	.word	0x0800cdec
 8002b94:	0800ce90 	.word	0x0800ce90
 8002b98:	0800ce94 	.word	0x0800ce94
 8002b9c:	0800ce98 	.word	0x0800ce98
 8002ba0:	0800ce9c 	.word	0x0800ce9c
 8002ba4:	0800cea0 	.word	0x0800cea0
 8002ba8:	0800cdf4 	.word	0x0800cdf4
 8002bac:	0800cea4 	.word	0x0800cea4

08002bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bb8:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_InitTick+0x54>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_InitTick+0x58>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f999 	bl	8002f06 <HAL_SYSTICK_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e00e      	b.n	8002bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b0f      	cmp	r3, #15
 8002be2:	d80a      	bhi.n	8002bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002be4:	2200      	movs	r2, #0
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bec:	f000 f953 	bl	8002e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bf0:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <HAL_InitTick+0x5c>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e000      	b.n	8002bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000000 	.word	0x20000000
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	20000004 	.word	0x20000004

08002c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_IncTick+0x20>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_IncTick+0x24>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <HAL_IncTick+0x24>)
 8002c22:	6013      	str	r3, [r2, #0]
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000008 	.word	0x20000008
 8002c34:	200004d4 	.word	0x200004d4

08002c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <HAL_GetTick+0x14>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	200004d4 	.word	0x200004d4

08002c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c58:	f7ff ffee 	bl	8002c38 <HAL_GetTick>
 8002c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d005      	beq.n	8002c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <HAL_Delay+0x44>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c76:	bf00      	nop
 8002c78:	f7ff ffde 	bl	8002c38 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d8f7      	bhi.n	8002c78 <HAL_Delay+0x28>
  {
  }
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000008 	.word	0x20000008

08002c98 <__NVIC_SetPriorityGrouping>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc6:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	60d3      	str	r3, [r2, #12]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00
 8002cdc:	05fa0000 	.word	0x05fa0000

08002ce0 <__NVIC_GetPriorityGrouping>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	f003 0307 	and.w	r3, r3, #7
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_EnableIRQ>:
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	db0b      	blt.n	8002d26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4907      	ldr	r1, [pc, #28]	; (8002d34 <__NVIC_EnableIRQ+0x38>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000e100 	.word	0xe000e100

08002d38 <__NVIC_DisableIRQ>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db12      	blt.n	8002d70 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	490a      	ldr	r1, [pc, #40]	; (8002d7c <__NVIC_DisableIRQ+0x44>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2001      	movs	r0, #1
 8002d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5e:	3320      	adds	r3, #32
 8002d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d64:	f3bf 8f4f 	dsb	sy
}
 8002d68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d6a:	f3bf 8f6f 	isb	sy
}
 8002d6e:	bf00      	nop
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100

08002d80 <__NVIC_SetPriority>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	490c      	ldr	r1, [pc, #48]	; (8002dcc <__NVIC_SetPriority+0x4c>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	440b      	add	r3, r1
 8002da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002da8:	e00a      	b.n	8002dc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4908      	ldr	r1, [pc, #32]	; (8002dd0 <__NVIC_SetPriority+0x50>)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3b04      	subs	r3, #4
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000e100 	.word	0xe000e100
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <NVIC_EncodePriority>:
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	; 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f1c3 0307 	rsb	r3, r3, #7
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	bf28      	it	cs
 8002df2:	2304      	movcs	r3, #4
 8002df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d902      	bls.n	8002e04 <NVIC_EncodePriority+0x30>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3b03      	subs	r3, #3
 8002e02:	e000      	b.n	8002e06 <NVIC_EncodePriority+0x32>
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43d9      	mvns	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	4313      	orrs	r3, r2
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	; 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e4c:	d301      	bcc.n	8002e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e00f      	b.n	8002e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e52:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <SysTick_Config+0x40>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5a:	210f      	movs	r1, #15
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	f7ff ff8e 	bl	8002d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <SysTick_Config+0x40>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <SysTick_Config+0x40>)
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	e000e010 	.word	0xe000e010

08002e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff05 	bl	8002c98 <__NVIC_SetPriorityGrouping>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea8:	f7ff ff1a 	bl	8002ce0 <__NVIC_GetPriorityGrouping>
 8002eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	6978      	ldr	r0, [r7, #20]
 8002eb4:	f7ff ff8e 	bl	8002dd4 <NVIC_EncodePriority>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff5d 	bl	8002d80 <__NVIC_SetPriority>
}
 8002ec6:	bf00      	nop
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff0d 	bl	8002cfc <__NVIC_EnableIRQ>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff1d 	bl	8002d38 <__NVIC_DisableIRQ>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff ff94 	bl	8002e3c <SysTick_Config>
 8002f14:	4603      	mov	r3, r0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	019a      	lsls	r2, r3, #6
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f5e:	f7ff fe6b 	bl	8002c38 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002f64:	e009      	b.n	8002f7a <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8002f66:	f7ff fe67 	bl	8002c38 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f74:	d901      	bls.n	8002f7a <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e015      	b.n	8002fa6 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ee      	beq.n	8002f66 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	019a      	lsls	r2, r3, #6
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	ea42 0103 	orr.w	r1, r2, r3
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	041a      	lsls	r2, r3, #16
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e106      	b.n	80031d2 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7c5b      	ldrb	r3, [r3, #17]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f97c 	bl	80032cc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002fee:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002ffa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003002:	f7ff fe19 	bl	8002c38 <HAL_GetTick>
 8003006:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003008:	e009      	b.n	800301e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800300a:	f7ff fe15 	bl	8002c38 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003018:	d901      	bls.n	800301e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0d9      	b.n	80031d2 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ed      	beq.n	800300a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b68      	ldr	r3, [pc, #416]	; (80031dc <HAL_DSI_Init+0x22c>)
 800303c:	400b      	ands	r3, r1
 800303e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	009a      	lsls	r2, r3, #2
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	02db      	lsls	r3, r3, #11
 8003056:	431a      	orrs	r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	041b      	lsls	r3, r3, #16
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003092:	f7ff fdd1 	bl	8002c38 <HAL_GetTick>
 8003096:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003098:	e009      	b.n	80030ae <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800309a:	f7ff fdcd 	bl	8002c38 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030a8:	d901      	bls.n	80030ae <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e091      	b.n	80031d2 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0ed      	beq.n	800309a <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0206 	orr.w	r2, r2, #6
 80030ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0203 	bic.w	r2, r2, #3
 80030e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0203 	bic.w	r2, r2, #3
 8003110:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003138:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6899      	ldr	r1, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_DSI_Init+0x1aa>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	e000      	b.n	800315c <HAL_DSI_Init+0x1ac>
 800315a:	2301      	movs	r3, #1
 800315c:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <HAL_DSI_Init+0x230>)
 8003162:	fb02 f203 	mul.w	r2, r2, r3
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	409a      	lsls	r2, r3
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003192:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	fffc8603 	.word	0xfffc8603
 80031e0:	003d0900 	.word	0x003d0900

080031e4 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e066      	b.n	80032c4 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2203      	movs	r2, #3
 80031fa:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0208 	bic.w	r2, r2, #8
 8003210:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0206 	bic.w	r2, r2, #6
 8003256:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003296:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80032a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f818 	bl	80032e0 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7c1b      	ldrb	r3, [r3, #16]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_DSI_ConfigVideoMode+0x16>
 8003306:	2302      	movs	r3, #2
 8003308:	e1ee      	b.n	80036e8 <HAL_DSI_ConfigVideoMode+0x3f4>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0203 	bic.w	r2, r2, #3
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b8b      	ldr	r3, [pc, #556]	; (8003590 <HAL_DSI_ConfigVideoMode+0x29c>)
 8003362:	400b      	ands	r3, r1
 8003364:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b84      	ldr	r3, [pc, #528]	; (8003594 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003384:	400b      	ands	r3, r1
 8003386:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b7b      	ldr	r3, [pc, #492]	; (8003594 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80033a6:	400b      	ands	r3, r1
 80033a8:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0203 	bic.w	r2, r2, #3
 80033ca:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68d9      	ldr	r1, [r3, #12]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0207 	bic.w	r2, r2, #7
 80033ec:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6959      	ldr	r1, [r3, #20]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 020f 	bic.w	r2, r2, #15
 800341a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6919      	ldr	r1, [r3, #16]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 020e 	bic.w	r2, r2, #14
 800343e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	005a      	lsls	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b03      	cmp	r3, #3
 8003460:	d110      	bne.n	8003484 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003470:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6919      	ldr	r1, [r3, #16]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b42      	ldr	r3, [pc, #264]	; (8003598 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8003490:	400b      	ands	r3, r1
 8003492:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b39      	ldr	r3, [pc, #228]	; (8003598 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80034b2:	400b      	ands	r3, r1
 80034b4:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b32      	ldr	r3, [pc, #200]	; (800359c <HAL_DSI_ConfigVideoMode+0x2a8>)
 80034d4:	400b      	ands	r3, r1
 80034d6:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4b2a      	ldr	r3, [pc, #168]	; (80035a0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80034f6:	400b      	ands	r3, r1
 80034f8:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003518:	400b      	ands	r3, r1
 800351a:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800353a:	400b      	ands	r3, r1
 800353c:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <HAL_DSI_ConfigVideoMode+0x29c>)
 800355c:	400b      	ands	r3, r1
 800355e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800358c:	e00a      	b.n	80035a4 <HAL_DSI_ConfigVideoMode+0x2b0>
 800358e:	bf00      	nop
 8003590:	ffffc000 	.word	0xffffc000
 8003594:	ffffe000 	.word	0xffffe000
 8003598:	fffff000 	.word	0xfffff000
 800359c:	ffff8000 	.word	0xffff8000
 80035a0:	fffffc00 	.word	0xfffffc00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80035ba:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6999      	ldr	r1, [r3, #24]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c6:	041a      	lsls	r2, r3, #16
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035de:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6999      	ldr	r1, [r3, #24]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003622:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003644:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003666:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003688:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7c1b      	ldrb	r3, [r3, #16]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_DSI_Start+0x14>
 8003704:	2302      	movs	r3, #2
 8003706:	e02b      	b.n	8003760 <HAL_DSI_Start+0x6c>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0201 	orr.w	r2, r2, #1
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003730:	2300      	movs	r3, #0
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0208 	orr.w	r2, r2, #8
 8003744:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	7c1b      	ldrb	r3, [r3, #16]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_DSI_Stop+0x14>
 800377c:	2302      	movs	r3, #2
 800377e:	e02b      	b.n	80037d8 <HAL_DSI_Stop+0x6c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80037a8:	2300      	movs	r3, #0
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0208 	bic.w	r2, r2, #8
 80037bc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	7c1b      	ldrb	r3, [r3, #16]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_DSI_ShortWrite+0x1a>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e010      	b.n	8003820 <HAL_DSI_ShortWrite+0x3c>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f7ff fb9e 	bl	8002f50 <DSI_ShortWrite>
 8003814:	4603      	mov	r3, r0
 8003816:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	741a      	strb	r2, [r3, #16]

  return status;
 800381e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08c      	sub	sp, #48	; 0x30
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003838:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	7c1b      	ldrb	r3, [r3, #16]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_DSI_LongWrite+0x1e>
 8003842:	2302      	movs	r3, #2
 8003844:	e084      	b.n	8003950 <HAL_DSI_LongWrite+0x128>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800384c:	f7ff f9f4 	bl	8002c38 <HAL_GetTick>
 8003850:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003852:	e00c      	b.n	800386e <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003854:	f7ff f9f0 	bl	8002c38 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003862:	d904      	bls.n	800386e <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e070      	b.n	8003950 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0eb      	beq.n	8003854 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387e:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b03      	cmp	r3, #3
 8003884:	bf28      	it	cs
 8003886:	2303      	movcs	r3, #3
 8003888:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800388a:	2300      	movs	r3, #0
 800388c:	623b      	str	r3, [r7, #32]
 800388e:	e00f      	b.n	80038b0 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	4413      	add	r3, r2
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	3301      	adds	r3, #1
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	3301      	adds	r3, #1
 80038ae:	623b      	str	r3, [r7, #32]
 80038b0:	6a3a      	ldr	r2, [r7, #32]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d3eb      	bcc.n	8003890 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80038d0:	e028      	b.n	8003924 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	bf28      	it	cs
 80038d8:	2304      	movcs	r3, #4
 80038da:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	623b      	str	r3, [r7, #32]
 80038e4:	e00e      	b.n	8003904 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	4413      	add	r3, r2
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	3301      	adds	r3, #1
 8003902:	623b      	str	r3, [r7, #32]
 8003904:	6a3a      	ldr	r2, [r7, #32]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	429a      	cmp	r2, r3
 800390a:	d3ec      	bcc.n	80038e6 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4413      	add	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1d3      	bne.n	80038d2 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003932:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	3301      	adds	r3, #1
 8003938:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800393a:	b2db      	uxtb	r3, r3
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	4613      	mov	r3, r2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	f7ff faeb 	bl	8002f1e <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3728      	adds	r7, #40	; 0x28
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003958:	b480      	push	{r7}
 800395a:	b089      	sub	sp, #36	; 0x24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800396e:	2300      	movs	r3, #0
 8003970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	e175      	b.n	8003c64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003978:	2201      	movs	r2, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	f040 8164 	bne.w	8003c5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d00b      	beq.n	80039b6 <HAL_GPIO_Init+0x5e>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d007      	beq.n	80039b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039aa:	2b11      	cmp	r3, #17
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b12      	cmp	r3, #18
 80039b4:	d130      	bne.n	8003a18 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	2203      	movs	r2, #3
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039ec:	2201      	movs	r2, #1
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 0201 	and.w	r2, r3, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	2203      	movs	r2, #3
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x100>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b12      	cmp	r3, #18
 8003a56:	d123      	bne.n	8003aa0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	08da      	lsrs	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3208      	adds	r2, #8
 8003a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	220f      	movs	r2, #15
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	08da      	lsrs	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3208      	adds	r2, #8
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0203 	and.w	r2, r3, #3
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80be 	beq.w	8003c5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae2:	4b66      	ldr	r3, [pc, #408]	; (8003c7c <HAL_GPIO_Init+0x324>)
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	4a65      	ldr	r2, [pc, #404]	; (8003c7c <HAL_GPIO_Init+0x324>)
 8003ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aec:	6453      	str	r3, [r2, #68]	; 0x44
 8003aee:	4b63      	ldr	r3, [pc, #396]	; (8003c7c <HAL_GPIO_Init+0x324>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003afa:	4a61      	ldr	r2, [pc, #388]	; (8003c80 <HAL_GPIO_Init+0x328>)
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	3302      	adds	r3, #2
 8003b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	220f      	movs	r2, #15
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a58      	ldr	r2, [pc, #352]	; (8003c84 <HAL_GPIO_Init+0x32c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d037      	beq.n	8003b96 <HAL_GPIO_Init+0x23e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a57      	ldr	r2, [pc, #348]	; (8003c88 <HAL_GPIO_Init+0x330>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d031      	beq.n	8003b92 <HAL_GPIO_Init+0x23a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a56      	ldr	r2, [pc, #344]	; (8003c8c <HAL_GPIO_Init+0x334>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d02b      	beq.n	8003b8e <HAL_GPIO_Init+0x236>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a55      	ldr	r2, [pc, #340]	; (8003c90 <HAL_GPIO_Init+0x338>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d025      	beq.n	8003b8a <HAL_GPIO_Init+0x232>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a54      	ldr	r2, [pc, #336]	; (8003c94 <HAL_GPIO_Init+0x33c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01f      	beq.n	8003b86 <HAL_GPIO_Init+0x22e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a53      	ldr	r2, [pc, #332]	; (8003c98 <HAL_GPIO_Init+0x340>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d019      	beq.n	8003b82 <HAL_GPIO_Init+0x22a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a52      	ldr	r2, [pc, #328]	; (8003c9c <HAL_GPIO_Init+0x344>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_GPIO_Init+0x226>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a51      	ldr	r2, [pc, #324]	; (8003ca0 <HAL_GPIO_Init+0x348>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00d      	beq.n	8003b7a <HAL_GPIO_Init+0x222>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a50      	ldr	r2, [pc, #320]	; (8003ca4 <HAL_GPIO_Init+0x34c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <HAL_GPIO_Init+0x21e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4f      	ldr	r2, [pc, #316]	; (8003ca8 <HAL_GPIO_Init+0x350>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d101      	bne.n	8003b72 <HAL_GPIO_Init+0x21a>
 8003b6e:	2309      	movs	r3, #9
 8003b70:	e012      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b72:	230a      	movs	r3, #10
 8003b74:	e010      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b76:	2308      	movs	r3, #8
 8003b78:	e00e      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b7a:	2307      	movs	r3, #7
 8003b7c:	e00c      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b7e:	2306      	movs	r3, #6
 8003b80:	e00a      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b82:	2305      	movs	r3, #5
 8003b84:	e008      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b86:	2304      	movs	r3, #4
 8003b88:	e006      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e004      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e002      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b96:	2300      	movs	r3, #0
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	f002 0203 	and.w	r2, r2, #3
 8003b9e:	0092      	lsls	r2, r2, #2
 8003ba0:	4093      	lsls	r3, r2
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ba8:	4935      	ldr	r1, [pc, #212]	; (8003c80 <HAL_GPIO_Init+0x328>)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	089b      	lsrs	r3, r3, #2
 8003bae:	3302      	adds	r3, #2
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bb6:	4b3d      	ldr	r3, [pc, #244]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bda:	4a34      	ldr	r2, [pc, #208]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003be0:	4b32      	ldr	r3, [pc, #200]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c04:	4a29      	ldr	r2, [pc, #164]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c0a:	4b28      	ldr	r3, [pc, #160]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c2e:	4a1f      	ldr	r2, [pc, #124]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c34:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3301      	adds	r3, #1
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	f67f ae86 	bls.w	8003978 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3724      	adds	r7, #36	; 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40013800 	.word	0x40013800
 8003c84:	40020000 	.word	0x40020000
 8003c88:	40020400 	.word	0x40020400
 8003c8c:	40020800 	.word	0x40020800
 8003c90:	40020c00 	.word	0x40020c00
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40021400 	.word	0x40021400
 8003c9c:	40021800 	.word	0x40021800
 8003ca0:	40021c00 	.word	0x40021c00
 8003ca4:	40022000 	.word	0x40022000
 8003ca8:	40022400 	.word	0x40022400
 8003cac:	40013c00 	.word	0x40013c00

08003cb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	e0d9      	b.n	8003e80 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ccc:	2201      	movs	r2, #1
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	f040 80c9 	bne.w	8003e7a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003ce8:	4a6b      	ldr	r2, [pc, #428]	; (8003e98 <HAL_GPIO_DeInit+0x1e8>)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	089b      	lsrs	r3, r3, #2
 8003cee:	3302      	adds	r3, #2
 8003cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	220f      	movs	r2, #15
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a63      	ldr	r2, [pc, #396]	; (8003e9c <HAL_GPIO_DeInit+0x1ec>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d037      	beq.n	8003d82 <HAL_GPIO_DeInit+0xd2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a62      	ldr	r2, [pc, #392]	; (8003ea0 <HAL_GPIO_DeInit+0x1f0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d031      	beq.n	8003d7e <HAL_GPIO_DeInit+0xce>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a61      	ldr	r2, [pc, #388]	; (8003ea4 <HAL_GPIO_DeInit+0x1f4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d02b      	beq.n	8003d7a <HAL_GPIO_DeInit+0xca>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a60      	ldr	r2, [pc, #384]	; (8003ea8 <HAL_GPIO_DeInit+0x1f8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d025      	beq.n	8003d76 <HAL_GPIO_DeInit+0xc6>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a5f      	ldr	r2, [pc, #380]	; (8003eac <HAL_GPIO_DeInit+0x1fc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01f      	beq.n	8003d72 <HAL_GPIO_DeInit+0xc2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a5e      	ldr	r2, [pc, #376]	; (8003eb0 <HAL_GPIO_DeInit+0x200>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d019      	beq.n	8003d6e <HAL_GPIO_DeInit+0xbe>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a5d      	ldr	r2, [pc, #372]	; (8003eb4 <HAL_GPIO_DeInit+0x204>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <HAL_GPIO_DeInit+0xba>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a5c      	ldr	r2, [pc, #368]	; (8003eb8 <HAL_GPIO_DeInit+0x208>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00d      	beq.n	8003d66 <HAL_GPIO_DeInit+0xb6>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a5b      	ldr	r2, [pc, #364]	; (8003ebc <HAL_GPIO_DeInit+0x20c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d007      	beq.n	8003d62 <HAL_GPIO_DeInit+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a5a      	ldr	r2, [pc, #360]	; (8003ec0 <HAL_GPIO_DeInit+0x210>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d101      	bne.n	8003d5e <HAL_GPIO_DeInit+0xae>
 8003d5a:	2309      	movs	r3, #9
 8003d5c:	e012      	b.n	8003d84 <HAL_GPIO_DeInit+0xd4>
 8003d5e:	230a      	movs	r3, #10
 8003d60:	e010      	b.n	8003d84 <HAL_GPIO_DeInit+0xd4>
 8003d62:	2308      	movs	r3, #8
 8003d64:	e00e      	b.n	8003d84 <HAL_GPIO_DeInit+0xd4>
 8003d66:	2307      	movs	r3, #7
 8003d68:	e00c      	b.n	8003d84 <HAL_GPIO_DeInit+0xd4>
 8003d6a:	2306      	movs	r3, #6
 8003d6c:	e00a      	b.n	8003d84 <HAL_GPIO_DeInit+0xd4>
 8003d6e:	2305      	movs	r3, #5
 8003d70:	e008      	b.n	8003d84 <HAL_GPIO_DeInit+0xd4>
 8003d72:	2304      	movs	r3, #4
 8003d74:	e006      	b.n	8003d84 <HAL_GPIO_DeInit+0xd4>
 8003d76:	2303      	movs	r3, #3
 8003d78:	e004      	b.n	8003d84 <HAL_GPIO_DeInit+0xd4>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e002      	b.n	8003d84 <HAL_GPIO_DeInit+0xd4>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <HAL_GPIO_DeInit+0xd4>
 8003d82:	2300      	movs	r3, #0
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	f002 0203 	and.w	r2, r2, #3
 8003d8a:	0092      	lsls	r2, r2, #2
 8003d8c:	4093      	lsls	r3, r2
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d132      	bne.n	8003dfa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003d94:	4b4b      	ldr	r3, [pc, #300]	; (8003ec4 <HAL_GPIO_DeInit+0x214>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	4949      	ldr	r1, [pc, #292]	; (8003ec4 <HAL_GPIO_DeInit+0x214>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003da2:	4b48      	ldr	r3, [pc, #288]	; (8003ec4 <HAL_GPIO_DeInit+0x214>)
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	4946      	ldr	r1, [pc, #280]	; (8003ec4 <HAL_GPIO_DeInit+0x214>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003db0:	4b44      	ldr	r3, [pc, #272]	; (8003ec4 <HAL_GPIO_DeInit+0x214>)
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	4942      	ldr	r1, [pc, #264]	; (8003ec4 <HAL_GPIO_DeInit+0x214>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003dbe:	4b41      	ldr	r3, [pc, #260]	; (8003ec4 <HAL_GPIO_DeInit+0x214>)
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	493f      	ldr	r1, [pc, #252]	; (8003ec4 <HAL_GPIO_DeInit+0x214>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	220f      	movs	r2, #15
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003ddc:	4a2e      	ldr	r2, [pc, #184]	; (8003e98 <HAL_GPIO_DeInit+0x1e8>)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	089b      	lsrs	r3, r3, #2
 8003de2:	3302      	adds	r3, #2
 8003de4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	43da      	mvns	r2, r3
 8003dec:	482a      	ldr	r0, [pc, #168]	; (8003e98 <HAL_GPIO_DeInit+0x1e8>)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	089b      	lsrs	r3, r3, #2
 8003df2:	400a      	ands	r2, r1
 8003df4:	3302      	adds	r3, #2
 8003df6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	2103      	movs	r1, #3
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	08da      	lsrs	r2, r3, #3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3208      	adds	r2, #8
 8003e18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	220f      	movs	r2, #15
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	08d2      	lsrs	r2, r2, #3
 8003e30:	4019      	ands	r1, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3208      	adds	r2, #8
 8003e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	2103      	movs	r1, #3
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	2101      	movs	r1, #1
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	401a      	ands	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	2103      	movs	r1, #3
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	401a      	ands	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b0f      	cmp	r3, #15
 8003e84:	f67f af22 	bls.w	8003ccc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40013800 	.word	0x40013800
 8003e9c:	40020000 	.word	0x40020000
 8003ea0:	40020400 	.word	0x40020400
 8003ea4:	40020800 	.word	0x40020800
 8003ea8:	40020c00 	.word	0x40020c00
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40021400 	.word	0x40021400
 8003eb4:	40021800 	.word	0x40021800
 8003eb8:	40021c00 	.word	0x40021c00
 8003ebc:	40022000 	.word	0x40022000
 8003ec0:	40022400 	.word	0x40022400
 8003ec4:	40013c00 	.word	0x40013c00

08003ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	807b      	strh	r3, [r7, #2]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ed8:	787b      	ldrb	r3, [r7, #1]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ede:	887a      	ldrh	r2, [r7, #2]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ee4:	e003      	b.n	8003eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ee6:	887b      	ldrh	r3, [r7, #2]
 8003ee8:	041a      	lsls	r2, r3, #16
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	619a      	str	r2, [r3, #24]
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e07f      	b.n	800400e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f8a9 	bl	800407a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2224      	movs	r2, #36	; 0x24
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d107      	bne.n	8003f76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	e006      	b.n	8003f84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d104      	bne.n	8003f96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <HAL_I2C_Init+0x11c>)
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	ea42 0103 	orr.w	r1, r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	021a      	lsls	r2, r3, #8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69d9      	ldr	r1, [r3, #28]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1a      	ldr	r2, [r3, #32]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	02008000 	.word	0x02008000

0800401c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e021      	b.n	8004072 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2224      	movs	r2, #36	; 0x24
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0201 	bic.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f821 	bl	800408e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	4608      	mov	r0, r1
 80040ae:	4611      	mov	r1, r2
 80040b0:	461a      	mov	r2, r3
 80040b2:	4603      	mov	r3, r0
 80040b4:	817b      	strh	r3, [r7, #10]
 80040b6:	460b      	mov	r3, r1
 80040b8:	813b      	strh	r3, [r7, #8]
 80040ba:	4613      	mov	r3, r2
 80040bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	f040 80fd 	bne.w	80042c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_I2C_Mem_Read+0x34>
 80040d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d105      	bne.n	80040e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0f1      	b.n	80042c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_I2C_Mem_Read+0x4e>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e0ea      	b.n	80042c8 <HAL_I2C_Mem_Read+0x224>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040fa:	f7fe fd9d 	bl	8002c38 <HAL_GetTick>
 80040fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	2319      	movs	r3, #25
 8004106:	2201      	movs	r2, #1
 8004108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f95b 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0d5      	b.n	80042c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2222      	movs	r2, #34	; 0x22
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2240      	movs	r2, #64	; 0x40
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a3a      	ldr	r2, [r7, #32]
 8004136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800413c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004144:	88f8      	ldrh	r0, [r7, #6]
 8004146:	893a      	ldrh	r2, [r7, #8]
 8004148:	8979      	ldrh	r1, [r7, #10]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	4603      	mov	r3, r0
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f8bf 	bl	80042d8 <I2C_RequestMemoryRead>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0ad      	b.n	80042c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	2bff      	cmp	r3, #255	; 0xff
 8004174:	d90e      	bls.n	8004194 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	22ff      	movs	r2, #255	; 0xff
 800417a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	b2da      	uxtb	r2, r3
 8004182:	8979      	ldrh	r1, [r7, #10]
 8004184:	4b52      	ldr	r3, [pc, #328]	; (80042d0 <HAL_I2C_Mem_Read+0x22c>)
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fa3d 	bl	800460c <I2C_TransferConfig>
 8004192:	e00f      	b.n	80041b4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	8979      	ldrh	r1, [r7, #10]
 80041a6:	4b4a      	ldr	r3, [pc, #296]	; (80042d0 <HAL_I2C_Mem_Read+0x22c>)
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fa2c 	bl	800460c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	2200      	movs	r2, #0
 80041bc:	2104      	movs	r1, #4
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f902 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07c      	b.n	80042c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d034      	beq.n	8004274 <HAL_I2C_Mem_Read+0x1d0>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420e:	2b00      	cmp	r3, #0
 8004210:	d130      	bne.n	8004274 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	2200      	movs	r2, #0
 800421a:	2180      	movs	r1, #128	; 0x80
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f8d3 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e04d      	b.n	80042c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	2bff      	cmp	r3, #255	; 0xff
 8004234:	d90e      	bls.n	8004254 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	22ff      	movs	r2, #255	; 0xff
 800423a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	b2da      	uxtb	r2, r3
 8004242:	8979      	ldrh	r1, [r7, #10]
 8004244:	2300      	movs	r3, #0
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f9dd 	bl	800460c <I2C_TransferConfig>
 8004252:	e00f      	b.n	8004274 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004262:	b2da      	uxtb	r2, r3
 8004264:	8979      	ldrh	r1, [r7, #10]
 8004266:	2300      	movs	r3, #0
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f9cc 	bl	800460c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d19a      	bne.n	80041b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f920 	bl	80044c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e01a      	b.n	80042c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2220      	movs	r2, #32
 8004298:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6859      	ldr	r1, [r3, #4]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_I2C_Mem_Read+0x230>)
 80042a6:	400b      	ands	r3, r1
 80042a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
  }
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	80002400 	.word	0x80002400
 80042d4:	fe00e800 	.word	0xfe00e800

080042d8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af02      	add	r7, sp, #8
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	4608      	mov	r0, r1
 80042e2:	4611      	mov	r1, r2
 80042e4:	461a      	mov	r2, r3
 80042e6:	4603      	mov	r3, r0
 80042e8:	817b      	strh	r3, [r7, #10]
 80042ea:	460b      	mov	r3, r1
 80042ec:	813b      	strh	r3, [r7, #8]
 80042ee:	4613      	mov	r3, r2
 80042f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	8979      	ldrh	r1, [r7, #10]
 80042f8:	4b20      	ldr	r3, [pc, #128]	; (800437c <I2C_RequestMemoryRead+0xa4>)
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2300      	movs	r3, #0
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f984 	bl	800460c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	69b9      	ldr	r1, [r7, #24]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f89d 	bl	8004448 <I2C_WaitOnTXISFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e02c      	b.n	8004372 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d105      	bne.n	800432a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800431e:	893b      	ldrh	r3, [r7, #8]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
 8004328:	e015      	b.n	8004356 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800432a:	893b      	ldrh	r3, [r7, #8]
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	b29b      	uxth	r3, r3
 8004330:	b2da      	uxtb	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	69b9      	ldr	r1, [r7, #24]
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f883 	bl	8004448 <I2C_WaitOnTXISFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e012      	b.n	8004372 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800434c:	893b      	ldrh	r3, [r7, #8]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2200      	movs	r2, #0
 800435e:	2140      	movs	r1, #64	; 0x40
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f831 	bl	80043c8 <I2C_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	80002000 	.word	0x80002000

08004380 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b02      	cmp	r3, #2
 8004394:	d103      	bne.n	800439e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2200      	movs	r2, #0
 800439c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d007      	beq.n	80043bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	619a      	str	r2, [r3, #24]
  }
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d8:	e022      	b.n	8004420 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d01e      	beq.n	8004420 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e2:	f7fe fc29 	bl	8002c38 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d113      	bne.n	8004420 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fc:	f043 0220 	orr.w	r2, r3, #32
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e00f      	b.n	8004440 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4013      	ands	r3, r2
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	461a      	mov	r2, r3
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	429a      	cmp	r2, r3
 800443c:	d0cd      	beq.n	80043da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004454:	e02c      	b.n	80044b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f870 	bl	8004540 <I2C_IsAcknowledgeFailed>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e02a      	b.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d01e      	beq.n	80044b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004472:	f7fe fbe1 	bl	8002c38 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	429a      	cmp	r2, r3
 8004480:	d302      	bcc.n	8004488 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d113      	bne.n	80044b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e007      	b.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d1cb      	bne.n	8004456 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044d4:	e028      	b.n	8004528 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f830 	bl	8004540 <I2C_IsAcknowledgeFailed>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e026      	b.n	8004538 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fe fba5 	bl	8002c38 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d113      	bne.n	8004528 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e007      	b.n	8004538 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b20      	cmp	r3, #32
 8004534:	d1cf      	bne.n	80044d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b10      	cmp	r3, #16
 8004558:	d151      	bne.n	80045fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800455a:	e022      	b.n	80045a2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004562:	d01e      	beq.n	80045a2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004564:	f7fe fb68 	bl	8002c38 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	429a      	cmp	r2, r3
 8004572:	d302      	bcc.n	800457a <I2C_IsAcknowledgeFailed+0x3a>
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d113      	bne.n	80045a2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e02e      	b.n	8004600 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d1d5      	bne.n	800455c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2210      	movs	r2, #16
 80045b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2220      	movs	r2, #32
 80045be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f7ff fedd 	bl	8004380 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6859      	ldr	r1, [r3, #4]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <I2C_IsAcknowledgeFailed+0xc8>)
 80045d2:	400b      	ands	r3, r1
 80045d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	f043 0204 	orr.w	r2, r3, #4
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	fe00e800 	.word	0xfe00e800

0800460c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	817b      	strh	r3, [r7, #10]
 800461a:	4613      	mov	r3, r2
 800461c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	0d5b      	lsrs	r3, r3, #21
 8004628:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800462c:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <I2C_TransferConfig+0x58>)
 800462e:	430b      	orrs	r3, r1
 8004630:	43db      	mvns	r3, r3
 8004632:	ea02 0103 	and.w	r1, r2, r3
 8004636:	897b      	ldrh	r3, [r7, #10]
 8004638:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800463c:	7a7b      	ldrb	r3, [r7, #9]
 800463e:	041b      	lsls	r3, r3, #16
 8004640:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	431a      	orrs	r2, r3
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	431a      	orrs	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004656:	bf00      	nop
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	03ff63ff 	.word	0x03ff63ff

08004668 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e0bf      	b.n	80047fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8d2 	bl	8004838 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80046aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6999      	ldr	r1, [r3, #24]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6899      	ldr	r1, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4b4a      	ldr	r3, [pc, #296]	; (8004804 <HAL_LTDC_Init+0x19c>)
 80046dc:	400b      	ands	r3, r1
 80046de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	041b      	lsls	r3, r3, #16
 80046e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6899      	ldr	r1, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68d9      	ldr	r1, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b3e      	ldr	r3, [pc, #248]	; (8004804 <HAL_LTDC_Init+0x19c>)
 800470a:	400b      	ands	r3, r1
 800470c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68d9      	ldr	r1, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1a      	ldr	r2, [r3, #32]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6919      	ldr	r1, [r3, #16]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4b33      	ldr	r3, [pc, #204]	; (8004804 <HAL_LTDC_Init+0x19c>)
 8004738:	400b      	ands	r3, r1
 800473a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	041b      	lsls	r3, r3, #16
 8004742:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6919      	ldr	r1, [r3, #16]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6959      	ldr	r1, [r3, #20]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	4b27      	ldr	r3, [pc, #156]	; (8004804 <HAL_LTDC_Init+0x19c>)
 8004766:	400b      	ands	r3, r1
 8004768:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6959      	ldr	r1, [r3, #20]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0206 	orr.w	r2, r2, #6
 80047d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	f000f800 	.word	0xf000f800

08004808 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f81b 	bl	800484c <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004860:	b5b0      	push	{r4, r5, r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_LTDC_ConfigLayer+0x1a>
 8004876:	2302      	movs	r3, #2
 8004878:	e02c      	b.n	80048d4 <HAL_LTDC_ConfigLayer+0x74>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2202      	movs	r2, #2
 8004886:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2134      	movs	r1, #52	; 0x34
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4614      	mov	r4, r2
 800489e:	461d      	mov	r5, r3
 80048a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f847 	bl	8004948 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bdb0      	pop	{r4, r5, r7, pc}

080048dc <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_LTDC_SetAddress+0x1a>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e024      	b.n	8004940 <HAL_LTDC_SetAddress+0x64>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2202      	movs	r2, #2
 8004902:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2234      	movs	r2, #52	; 0x34
 800490a:	fb02 f303 	mul.w	r3, r2, r3
 800490e:	3338      	adds	r3, #56	; 0x38
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6979      	ldr	r1, [r7, #20]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f811 	bl	8004948 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2201      	movs	r2, #1
 800492c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004948:	b480      	push	{r7}
 800494a:	b089      	sub	sp, #36	; 0x24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	0c1b      	lsrs	r3, r3, #16
 8004960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004964:	4413      	add	r3, r2
 8004966:	041b      	lsls	r3, r3, #16
 8004968:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	01db      	lsls	r3, r3, #7
 8004974:	4413      	add	r3, r2
 8004976:	3384      	adds	r3, #132	; 0x84
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	4611      	mov	r1, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	01d2      	lsls	r2, r2, #7
 8004984:	440a      	add	r2, r1
 8004986:	3284      	adds	r2, #132	; 0x84
 8004988:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800498c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	0c1b      	lsrs	r3, r3, #16
 800499a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800499e:	4413      	add	r3, r2
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4619      	mov	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	01db      	lsls	r3, r3, #7
 80049ac:	440b      	add	r3, r1
 80049ae:	3384      	adds	r3, #132	; 0x84
 80049b0:	4619      	mov	r1, r3
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049c6:	4413      	add	r3, r2
 80049c8:	041b      	lsls	r3, r3, #16
 80049ca:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	01db      	lsls	r3, r3, #7
 80049d6:	4413      	add	r3, r2
 80049d8:	3384      	adds	r3, #132	; 0x84
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	4611      	mov	r1, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	01d2      	lsls	r2, r2, #7
 80049e6:	440a      	add	r2, r1
 80049e8:	3284      	adds	r2, #132	; 0x84
 80049ea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80049ee:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049fe:	4413      	add	r3, r2
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4619      	mov	r1, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	01db      	lsls	r3, r3, #7
 8004a0c:	440b      	add	r3, r1
 8004a0e:	3384      	adds	r3, #132	; 0x84
 8004a10:	4619      	mov	r1, r3
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	01db      	lsls	r3, r3, #7
 8004a22:	4413      	add	r3, r2
 8004a24:	3384      	adds	r3, #132	; 0x84
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	01d2      	lsls	r2, r2, #7
 8004a32:	440a      	add	r2, r1
 8004a34:	3284      	adds	r2, #132	; 0x84
 8004a36:	f023 0307 	bic.w	r3, r3, #7
 8004a3a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	01db      	lsls	r3, r3, #7
 8004a46:	4413      	add	r3, r2
 8004a48:	3384      	adds	r3, #132	; 0x84
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a62:	041b      	lsls	r3, r3, #16
 8004a64:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	061b      	lsls	r3, r3, #24
 8004a6c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	01db      	lsls	r3, r3, #7
 8004a78:	4413      	add	r3, r2
 8004a7a:	3384      	adds	r3, #132	; 0x84
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	01db      	lsls	r3, r3, #7
 8004a88:	4413      	add	r3, r2
 8004a8a:	3384      	adds	r3, #132	; 0x84
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a98:	461a      	mov	r2, r3
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	01db      	lsls	r3, r3, #7
 8004aac:	440b      	add	r3, r1
 8004aae:	3384      	adds	r3, #132	; 0x84
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	01db      	lsls	r3, r3, #7
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3384      	adds	r3, #132	; 0x84
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	4611      	mov	r1, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	01d2      	lsls	r2, r2, #7
 8004ad2:	440a      	add	r2, r1
 8004ad4:	3284      	adds	r2, #132	; 0x84
 8004ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ada:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	01db      	lsls	r3, r3, #7
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3384      	adds	r3, #132	; 0x84
 8004aea:	461a      	mov	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	01db      	lsls	r3, r3, #7
 8004afc:	4413      	add	r3, r2
 8004afe:	3384      	adds	r3, #132	; 0x84
 8004b00:	69da      	ldr	r2, [r3, #28]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4619      	mov	r1, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	01db      	lsls	r3, r3, #7
 8004b0c:	440b      	add	r3, r1
 8004b0e:	3384      	adds	r3, #132	; 0x84
 8004b10:	4619      	mov	r1, r3
 8004b12:	4b58      	ldr	r3, [pc, #352]	; (8004c74 <LTDC_SetConfig+0x32c>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	68f9      	ldr	r1, [r7, #12]
 8004b22:	6809      	ldr	r1, [r1, #0]
 8004b24:	4608      	mov	r0, r1
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	01c9      	lsls	r1, r1, #7
 8004b2a:	4401      	add	r1, r0
 8004b2c:	3184      	adds	r1, #132	; 0x84
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	01db      	lsls	r3, r3, #7
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3384      	adds	r3, #132	; 0x84
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	01db      	lsls	r3, r3, #7
 8004b4c:	4413      	add	r3, r2
 8004b4e:	3384      	adds	r3, #132	; 0x84
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	01db      	lsls	r3, r3, #7
 8004b60:	4413      	add	r3, r2
 8004b62:	3384      	adds	r3, #132	; 0x84
 8004b64:	461a      	mov	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004b74:	2304      	movs	r3, #4
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	e01b      	b.n	8004bb2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d102      	bne.n	8004b88 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004b82:	2303      	movs	r3, #3
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	e014      	b.n	8004bb2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d00b      	beq.n	8004ba8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d007      	beq.n	8004ba8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d003      	beq.n	8004ba8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ba4:	2b07      	cmp	r3, #7
 8004ba6:	d102      	bne.n	8004bae <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	61fb      	str	r3, [r7, #28]
 8004bac:	e001      	b.n	8004bb2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	01db      	lsls	r3, r3, #7
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3384      	adds	r3, #132	; 0x84
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	01d2      	lsls	r2, r2, #7
 8004bcc:	440a      	add	r2, r1
 8004bce:	3284      	adds	r2, #132	; 0x84
 8004bd0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	fb02 f303 	mul.w	r3, r2, r3
 8004be0:	041a      	lsls	r2, r3, #16
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	1acb      	subs	r3, r1, r3
 8004bec:	69f9      	ldr	r1, [r7, #28]
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	3303      	adds	r3, #3
 8004bf4:	68f9      	ldr	r1, [r7, #12]
 8004bf6:	6809      	ldr	r1, [r1, #0]
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	01c9      	lsls	r1, r1, #7
 8004bfe:	4401      	add	r1, r0
 8004c00:	3184      	adds	r1, #132	; 0x84
 8004c02:	4313      	orrs	r3, r2
 8004c04:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	01db      	lsls	r3, r3, #7
 8004c10:	4413      	add	r3, r2
 8004c12:	3384      	adds	r3, #132	; 0x84
 8004c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	01db      	lsls	r3, r3, #7
 8004c20:	440b      	add	r3, r1
 8004c22:	3384      	adds	r3, #132	; 0x84
 8004c24:	4619      	mov	r1, r3
 8004c26:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <LTDC_SetConfig+0x330>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	01db      	lsls	r3, r3, #7
 8004c36:	4413      	add	r3, r2
 8004c38:	3384      	adds	r3, #132	; 0x84
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	01db      	lsls	r3, r3, #7
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3384      	adds	r3, #132	; 0x84
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	4611      	mov	r1, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	01d2      	lsls	r2, r2, #7
 8004c5c:	440a      	add	r2, r1
 8004c5e:	3284      	adds	r2, #132	; 0x84
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	6013      	str	r3, [r2, #0]
}
 8004c66:	bf00      	nop
 8004c68:	3724      	adds	r7, #36	; 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	fffff8f8 	.word	0xfffff8f8
 8004c78:	fffff800 	.word	0xfffff800

08004c7c <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8004c8e:	2200      	movs	r2, #0
 8004c90:	e001      	b.n	8004c96 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8004c92:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8004ca2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ca6:	e000      	b.n	8004caa <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8004ca8:	2200      	movs	r2, #0
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d102      	bne.n	8004cbc <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8004cb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cba:	e000      	b.n	8004cbe <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc6:	1e5a      	subs	r2, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	4413      	add	r3, r2
 8004cd6:	1e5a      	subs	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	441a      	add	r2, r3
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	4413      	add	r3, r2
 8004cec:	1e5a      	subs	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	441a      	add	r2, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	441a      	add	r2, r3
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d06:	4413      	add	r3, r2
 8004d08:	1e5a      	subs	r2, r3, #1
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a04      	ldr	r2, [pc, #16]	; (8004d38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2a:	6013      	str	r3, [r2, #0]
}
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40007000 	.word	0x40007000

08004d3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a22      	ldr	r2, [pc, #136]	; (8004dd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	; 0x40
 8004d52:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d5e:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1d      	ldr	r2, [pc, #116]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d6a:	f7fd ff65 	bl	8002c38 <HAL_GetTick>
 8004d6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d70:	e009      	b.n	8004d86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d72:	f7fd ff61 	bl	8002c38 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d80:	d901      	bls.n	8004d86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e022      	b.n	8004dcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d92:	d1ee      	bne.n	8004d72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d94:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a0f      	ldr	r2, [pc, #60]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004da0:	f7fd ff4a 	bl	8002c38 <HAL_GetTick>
 8004da4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004da6:	e009      	b.n	8004dbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004da8:	f7fd ff46 	bl	8002c38 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004db6:	d901      	bls.n	8004dbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e007      	b.n	8004dcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dc8:	d1ee      	bne.n	8004da8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	40007000 	.word	0x40007000

08004ddc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004de4:	f7fd ff28 	bl	8002c38 <HAL_GetTick>
 8004de8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e067      	b.n	8004ec4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10b      	bne.n	8004e18 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f887 	bl	8004f1c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004e0e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fa9a 	bl	800534c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	021a      	lsls	r2, r3, #8
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2120      	movs	r1, #32
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fa92 	bl	8005368 <QSPI_WaitFlagStateUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004e48:	7afb      	ldrb	r3, [r7, #11]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d135      	bne.n	8004eba <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <HAL_QSPI_Init+0xf0>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6852      	ldr	r2, [r2, #4]
 8004e5c:	0611      	lsls	r1, r2, #24
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	68d2      	ldr	r2, [r2, #12]
 8004e62:	4311      	orrs	r1, r2
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	69d2      	ldr	r2, [r2, #28]
 8004e68:	4311      	orrs	r1, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6a12      	ldr	r2, [r2, #32]
 8004e6e:	4311      	orrs	r1, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	430b      	orrs	r3, r1
 8004e76:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <HAL_QSPI_Init+0xf4>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6912      	ldr	r2, [r2, #16]
 8004e86:	0411      	lsls	r1, r2, #16
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6952      	ldr	r2, [r2, #20]
 8004e8c:	4311      	orrs	r1, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6992      	ldr	r2, [r2, #24]
 8004e92:	4311      	orrs	r1, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004ec2:	7afb      	ldrb	r3, [r7, #11]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	00ffff2f 	.word	0x00ffff2f
 8004ed0:	ffe0f8fe 	.word	0xffe0f8fe

08004ed4 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e016      	b.n	8004f14 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0201 	bic.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f81a 	bl	8004f30 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_QSPI_MspInit>:
  * @brief Initialize the QSPI MSP.
  * @param hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_QSPI_MspDeInit>:
  * @brief DeInitialize the QSPI MSP.
  * @param hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f50:	f7fd fe72 	bl	8002c38 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_QSPI_Command+0x22>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e048      	b.n	8004ff8 <HAL_QSPI_Command+0xb4>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d137      	bne.n	8004fea <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2120      	movs	r1, #32
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f9e8 	bl	8005368 <QSPI_WaitFlagStateUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d125      	bne.n	8004fee <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 fa15 	bl	80053d6 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d115      	bne.n	8004fe0 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f9d2 	bl	8005368 <QSPI_WaitFlagStateUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10f      	bne.n	8004fee <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fde:	e006      	b.n	8004fee <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fe8:	e001      	b.n	8004fee <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
 8004fec:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	; 0x28
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005010:	f7fd fe12 	bl	8002c38 <HAL_GetTick>
 8005014:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3320      	adds	r3, #32
 800501c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_QSPI_Transmit+0x2e>
 800502a:	2302      	movs	r3, #2
 800502c:	e076      	b.n	800511c <HAL_QSPI_Transmit+0x11c>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b01      	cmp	r3, #1
 8005040:	d165      	bne.n	800510e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d056      	beq.n	80050fc <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2212      	movs	r2, #18
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695a      	ldr	r2, [r3, #20]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005082:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005084:	e01b      	b.n	80050be <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2201      	movs	r2, #1
 800508e:	2104      	movs	r1, #4
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f969 	bl	8005368 <QSPI_WaitFlagStateUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800509a:	7ffb      	ldrb	r3, [r7, #31]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d113      	bne.n	80050c8 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	781a      	ldrb	r2, [r3, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	1e5a      	subs	r2, r3, #1
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1df      	bne.n	8005086 <HAL_QSPI_Transmit+0x86>
 80050c6:	e000      	b.n	80050ca <HAL_QSPI_Transmit+0xca>
          break;
 80050c8:	bf00      	nop
      }

      if (status == HAL_OK)
 80050ca:	7ffb      	ldrb	r3, [r7, #31]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d110      	bne.n	80050f2 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	2201      	movs	r2, #1
 80050d8:	2102      	movs	r1, #2
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f944 	bl	8005368 <QSPI_WaitFlagStateUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80050e4:	7ffb      	ldrb	r3, [r7, #31]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d103      	bne.n	80050f2 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2202      	movs	r2, #2
 80050f0:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050fa:	e00a      	b.n	8005112 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005100:	f043 0208 	orr.w	r2, r3, #8
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e001      	b.n	8005112 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800510e:	2302      	movs	r3, #2
 8005110:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800511a:	7ffb      	ldrb	r3, [r7, #31]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3720      	adds	r7, #32
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	; 0x28
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005130:	2300      	movs	r3, #0
 8005132:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005134:	f7fd fd80 	bl	8002c38 <HAL_GetTick>
 8005138:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3320      	adds	r3, #32
 8005148:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_QSPI_Receive+0x36>
 8005156:	2302      	movs	r3, #2
 8005158:	e07d      	b.n	8005256 <HAL_QSPI_Receive+0x132>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b01      	cmp	r3, #1
 800516c:	d16c      	bne.n	8005248 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d05d      	beq.n	8005236 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2222      	movs	r2, #34	; 0x22
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80051b2:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80051bc:	e01c      	b.n	80051f8 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2201      	movs	r2, #1
 80051c6:	2106      	movs	r1, #6
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f8cd 	bl	8005368 <QSPI_WaitFlagStateUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80051d2:	7ffb      	ldrb	r3, [r7, #31]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d114      	bne.n	8005202 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	7812      	ldrb	r2, [r2, #0]
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	1e5a      	subs	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1de      	bne.n	80051be <HAL_QSPI_Receive+0x9a>
 8005200:	e000      	b.n	8005204 <HAL_QSPI_Receive+0xe0>
          break;
 8005202:	bf00      	nop
      }

      if (status == HAL_OK)
 8005204:	7ffb      	ldrb	r3, [r7, #31]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d110      	bne.n	800522c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2201      	movs	r2, #1
 8005212:	2102      	movs	r1, #2
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f8a7 	bl	8005368 <QSPI_WaitFlagStateUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800521e:	7ffb      	ldrb	r3, [r7, #31]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d103      	bne.n	800522c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2202      	movs	r2, #2
 800522a:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005234:	e00a      	b.n	800524c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	f043 0208 	orr.w	r2, r3, #8
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	77fb      	strb	r3, [r7, #31]
 8005246:	e001      	b.n	800524c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005248:	2302      	movs	r3, #2
 800524a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005254:	7ffb      	ldrb	r3, [r7, #31]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b088      	sub	sp, #32
 8005262:	af02      	add	r7, sp, #8
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800526c:	f7fd fce4 	bl	8002c38 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <HAL_QSPI_AutoPolling+0x24>
 800527e:	2302      	movs	r3, #2
 8005280:	e060      	b.n	8005344 <HAL_QSPI_AutoPolling+0xe6>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	d14f      	bne.n	8005336 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2242      	movs	r2, #66	; 0x42
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2200      	movs	r2, #0
 80052ac:	2120      	movs	r1, #32
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f85a 	bl	8005368 <QSPI_WaitFlagStateUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d13d      	bne.n	800533a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6852      	ldr	r2, [r2, #4]
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6892      	ldr	r2, [r2, #8]
 80052da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80052f4:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80052fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f866 	bl	80053d6 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2201      	movs	r2, #1
 8005312:	2108      	movs	r1, #8
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f827 	bl	8005368 <QSPI_WaitFlagStateUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2208      	movs	r2, #8
 800532a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005334:	e001      	b.n	800533a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005336:	2302      	movs	r3, #2
 8005338:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005342:	7dfb      	ldrb	r3, [r7, #23]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005378:	e01a      	b.n	80053b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d016      	beq.n	80053b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005382:	f7fd fc59 	bl	8002c38 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	429a      	cmp	r2, r3
 8005390:	d302      	bcc.n	8005398 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10b      	bne.n	80053b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2204      	movs	r2, #4
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a4:	f043 0201 	orr.w	r2, r3, #1
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e00e      	b.n	80053ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf14      	ite	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	2300      	moveq	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d1d6      	bne.n	800537a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <QSPI_Config+0x28>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80053f0:	d005      	beq.n	80053fe <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3a01      	subs	r2, #1
 80053fc:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 80b9 	beq.w	800557a <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d05f      	beq.n	80054d0 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	6892      	ldr	r2, [r2, #8]
 8005418:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d031      	beq.n	8005486 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	431a      	orrs	r2, r3
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005430:	431a      	orrs	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	431a      	orrs	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	049b      	lsls	r3, r3, #18
 800543e:	431a      	orrs	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	431a      	orrs	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	431a      	orrs	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	431a      	orrs	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	431a      	orrs	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	431a      	orrs	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	ea42 0103 	orr.w	r1, r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	430a      	orrs	r2, r1
 800546e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005476:	f000 812e 	beq.w	80056d6 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	6852      	ldr	r2, [r2, #4]
 8005482:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005484:	e127      	b.n	80056d6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548e:	431a      	orrs	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005494:	431a      	orrs	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	431a      	orrs	r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	049b      	lsls	r3, r3, #18
 80054a2:	431a      	orrs	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	431a      	orrs	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	ea42 0103 	orr.w	r1, r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	615a      	str	r2, [r3, #20]
}
 80054ce:	e102      	b.n	80056d6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d02e      	beq.n	8005536 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	431a      	orrs	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e6:	431a      	orrs	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	431a      	orrs	r2, r3
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	049b      	lsls	r3, r3, #18
 80054f4:	431a      	orrs	r2, r3
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	431a      	orrs	r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	431a      	orrs	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	431a      	orrs	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	ea42 0103 	orr.w	r1, r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	430a      	orrs	r2, r1
 800551e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005526:	f000 80d6 	beq.w	80056d6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	6852      	ldr	r2, [r2, #4]
 8005532:	619a      	str	r2, [r3, #24]
}
 8005534:	e0cf      	b.n	80056d6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	431a      	orrs	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005544:	431a      	orrs	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	431a      	orrs	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	049b      	lsls	r3, r3, #18
 8005552:	431a      	orrs	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	431a      	orrs	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	431a      	orrs	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	431a      	orrs	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	ea42 0103 	orr.w	r1, r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	430a      	orrs	r2, r1
 8005576:	615a      	str	r2, [r3, #20]
}
 8005578:	e0ad      	b.n	80056d6 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d058      	beq.n	8005634 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	6892      	ldr	r2, [r2, #8]
 800558a:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d02d      	beq.n	80055f0 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	431a      	orrs	r2, r3
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a2:	431a      	orrs	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	049b      	lsls	r3, r3, #18
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	431a      	orrs	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	ea42 0103 	orr.w	r1, r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	430a      	orrs	r2, r1
 80055da:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80055e2:	d078      	beq.n	80056d6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	6852      	ldr	r2, [r2, #4]
 80055ec:	619a      	str	r2, [r3, #24]
}
 80055ee:	e072      	b.n	80056d6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	431a      	orrs	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fe:	431a      	orrs	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	431a      	orrs	r2, r3
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	049b      	lsls	r3, r3, #18
 800560c:	431a      	orrs	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	431a      	orrs	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	431a      	orrs	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	431a      	orrs	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	ea42 0103 	orr.w	r1, r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	430a      	orrs	r2, r1
 8005630:	615a      	str	r2, [r3, #20]
}
 8005632:	e050      	b.n	80056d6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d02a      	beq.n	8005692 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	431a      	orrs	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	431a      	orrs	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	431a      	orrs	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	049b      	lsls	r3, r3, #18
 8005658:	431a      	orrs	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	431a      	orrs	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	431a      	orrs	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	431a      	orrs	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	ea42 0103 	orr.w	r1, r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	430a      	orrs	r2, r1
 800567c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005684:	d027      	beq.n	80056d6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	6852      	ldr	r2, [r2, #4]
 800568e:	619a      	str	r2, [r3, #24]
}
 8005690:	e021      	b.n	80056d6 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d01d      	beq.n	80056d6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	431a      	orrs	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a8:	431a      	orrs	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	431a      	orrs	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	049b      	lsls	r3, r3, #18
 80056b6:	431a      	orrs	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	431a      	orrs	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	ea42 0103 	orr.w	r1, r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	615a      	str	r2, [r3, #20]
}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
	...

080056e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80056ec:	2300      	movs	r3, #0
 80056ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e29b      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 8087 	beq.w	8005816 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005708:	4b96      	ldr	r3, [pc, #600]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 030c 	and.w	r3, r3, #12
 8005710:	2b04      	cmp	r3, #4
 8005712:	d00c      	beq.n	800572e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005714:	4b93      	ldr	r3, [pc, #588]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 030c 	and.w	r3, r3, #12
 800571c:	2b08      	cmp	r3, #8
 800571e:	d112      	bne.n	8005746 <HAL_RCC_OscConfig+0x62>
 8005720:	4b90      	ldr	r3, [pc, #576]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800572c:	d10b      	bne.n	8005746 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800572e:	4b8d      	ldr	r3, [pc, #564]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d06c      	beq.n	8005814 <HAL_RCC_OscConfig+0x130>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d168      	bne.n	8005814 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e275      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574e:	d106      	bne.n	800575e <HAL_RCC_OscConfig+0x7a>
 8005750:	4b84      	ldr	r3, [pc, #528]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a83      	ldr	r2, [pc, #524]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	e02e      	b.n	80057bc <HAL_RCC_OscConfig+0xd8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10c      	bne.n	8005780 <HAL_RCC_OscConfig+0x9c>
 8005766:	4b7f      	ldr	r3, [pc, #508]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a7e      	ldr	r2, [pc, #504]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 800576c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	4b7c      	ldr	r3, [pc, #496]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a7b      	ldr	r2, [pc, #492]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e01d      	b.n	80057bc <HAL_RCC_OscConfig+0xd8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005788:	d10c      	bne.n	80057a4 <HAL_RCC_OscConfig+0xc0>
 800578a:	4b76      	ldr	r3, [pc, #472]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a75      	ldr	r2, [pc, #468]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	4b73      	ldr	r3, [pc, #460]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a72      	ldr	r2, [pc, #456]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 800579c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	e00b      	b.n	80057bc <HAL_RCC_OscConfig+0xd8>
 80057a4:	4b6f      	ldr	r3, [pc, #444]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a6e      	ldr	r2, [pc, #440]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 80057aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	4b6c      	ldr	r3, [pc, #432]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a6b      	ldr	r2, [pc, #428]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 80057b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d013      	beq.n	80057ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fd fa38 	bl	8002c38 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057cc:	f7fd fa34 	bl	8002c38 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b64      	cmp	r3, #100	; 0x64
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e229      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057de:	4b61      	ldr	r3, [pc, #388]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0xe8>
 80057ea:	e014      	b.n	8005816 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7fd fa24 	bl	8002c38 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057f4:	f7fd fa20 	bl	8002c38 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b64      	cmp	r3, #100	; 0x64
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e215      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005806:	4b57      	ldr	r3, [pc, #348]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f0      	bne.n	80057f4 <HAL_RCC_OscConfig+0x110>
 8005812:	e000      	b.n	8005816 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d069      	beq.n	80058f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005822:	4b50      	ldr	r3, [pc, #320]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 030c 	and.w	r3, r3, #12
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800582e:	4b4d      	ldr	r3, [pc, #308]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
 8005836:	2b08      	cmp	r3, #8
 8005838:	d11c      	bne.n	8005874 <HAL_RCC_OscConfig+0x190>
 800583a:	4b4a      	ldr	r3, [pc, #296]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d116      	bne.n	8005874 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005846:	4b47      	ldr	r3, [pc, #284]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <HAL_RCC_OscConfig+0x17a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d001      	beq.n	800585e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e1e9      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585e:	4b41      	ldr	r3, [pc, #260]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	493d      	ldr	r1, [pc, #244]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 800586e:	4313      	orrs	r3, r2
 8005870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005872:	e040      	b.n	80058f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d023      	beq.n	80058c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800587c:	4b39      	ldr	r3, [pc, #228]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a38      	ldr	r2, [pc, #224]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fd f9d6 	bl	8002c38 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005890:	f7fd f9d2 	bl	8002c38 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e1c7      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a2:	4b30      	ldr	r3, [pc, #192]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f0      	beq.n	8005890 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ae:	4b2d      	ldr	r3, [pc, #180]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	4929      	ldr	r1, [pc, #164]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	600b      	str	r3, [r1, #0]
 80058c2:	e018      	b.n	80058f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058c4:	4b27      	ldr	r3, [pc, #156]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a26      	ldr	r2, [pc, #152]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d0:	f7fd f9b2 	bl	8002c38 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058d8:	f7fd f9ae 	bl	8002c38 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e1a3      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ea:	4b1e      	ldr	r3, [pc, #120]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f0      	bne.n	80058d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d038      	beq.n	8005974 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d019      	beq.n	800593e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800590a:	4b16      	ldr	r3, [pc, #88]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 800590c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800590e:	4a15      	ldr	r2, [pc, #84]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005916:	f7fd f98f 	bl	8002c38 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800591e:	f7fd f98b 	bl	8002c38 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e180      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005930:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0f0      	beq.n	800591e <HAL_RCC_OscConfig+0x23a>
 800593c:	e01a      	b.n	8005974 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800593e:	4b09      	ldr	r3, [pc, #36]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005942:	4a08      	ldr	r2, [pc, #32]	; (8005964 <HAL_RCC_OscConfig+0x280>)
 8005944:	f023 0301 	bic.w	r3, r3, #1
 8005948:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594a:	f7fd f975 	bl	8002c38 <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005950:	e00a      	b.n	8005968 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005952:	f7fd f971 	bl	8002c38 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d903      	bls.n	8005968 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e166      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
 8005964:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005968:	4b92      	ldr	r3, [pc, #584]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 800596a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1ee      	bne.n	8005952 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80a4 	beq.w	8005aca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005982:	4b8c      	ldr	r3, [pc, #560]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10d      	bne.n	80059aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800598e:	4b89      	ldr	r3, [pc, #548]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	4a88      	ldr	r2, [pc, #544]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005998:	6413      	str	r3, [r2, #64]	; 0x40
 800599a:	4b86      	ldr	r3, [pc, #536]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a2:	60bb      	str	r3, [r7, #8]
 80059a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a6:	2301      	movs	r3, #1
 80059a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059aa:	4b83      	ldr	r3, [pc, #524]	; (8005bb8 <HAL_RCC_OscConfig+0x4d4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d118      	bne.n	80059e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80059b6:	4b80      	ldr	r3, [pc, #512]	; (8005bb8 <HAL_RCC_OscConfig+0x4d4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a7f      	ldr	r2, [pc, #508]	; (8005bb8 <HAL_RCC_OscConfig+0x4d4>)
 80059bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059c2:	f7fd f939 	bl	8002c38 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ca:	f7fd f935 	bl	8002c38 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b64      	cmp	r3, #100	; 0x64
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e12a      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059dc:	4b76      	ldr	r3, [pc, #472]	; (8005bb8 <HAL_RCC_OscConfig+0x4d4>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d106      	bne.n	80059fe <HAL_RCC_OscConfig+0x31a>
 80059f0:	4b70      	ldr	r3, [pc, #448]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 80059f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f4:	4a6f      	ldr	r2, [pc, #444]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	6713      	str	r3, [r2, #112]	; 0x70
 80059fc:	e02d      	b.n	8005a5a <HAL_RCC_OscConfig+0x376>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10c      	bne.n	8005a20 <HAL_RCC_OscConfig+0x33c>
 8005a06:	4b6b      	ldr	r3, [pc, #428]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0a:	4a6a      	ldr	r2, [pc, #424]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	6713      	str	r3, [r2, #112]	; 0x70
 8005a12:	4b68      	ldr	r3, [pc, #416]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a16:	4a67      	ldr	r2, [pc, #412]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005a18:	f023 0304 	bic.w	r3, r3, #4
 8005a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a1e:	e01c      	b.n	8005a5a <HAL_RCC_OscConfig+0x376>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b05      	cmp	r3, #5
 8005a26:	d10c      	bne.n	8005a42 <HAL_RCC_OscConfig+0x35e>
 8005a28:	4b62      	ldr	r3, [pc, #392]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2c:	4a61      	ldr	r2, [pc, #388]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005a2e:	f043 0304 	orr.w	r3, r3, #4
 8005a32:	6713      	str	r3, [r2, #112]	; 0x70
 8005a34:	4b5f      	ldr	r3, [pc, #380]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a38:	4a5e      	ldr	r2, [pc, #376]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005a3a:	f043 0301 	orr.w	r3, r3, #1
 8005a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a40:	e00b      	b.n	8005a5a <HAL_RCC_OscConfig+0x376>
 8005a42:	4b5c      	ldr	r3, [pc, #368]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a46:	4a5b      	ldr	r2, [pc, #364]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005a48:	f023 0301 	bic.w	r3, r3, #1
 8005a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a4e:	4b59      	ldr	r3, [pc, #356]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a52:	4a58      	ldr	r2, [pc, #352]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005a54:	f023 0304 	bic.w	r3, r3, #4
 8005a58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d015      	beq.n	8005a8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a62:	f7fd f8e9 	bl	8002c38 <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a68:	e00a      	b.n	8005a80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a6a:	f7fd f8e5 	bl	8002c38 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e0d8      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a80:	4b4c      	ldr	r3, [pc, #304]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0ee      	beq.n	8005a6a <HAL_RCC_OscConfig+0x386>
 8005a8c:	e014      	b.n	8005ab8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a8e:	f7fd f8d3 	bl	8002c38 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a94:	e00a      	b.n	8005aac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a96:	f7fd f8cf 	bl	8002c38 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e0c2      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aac:	4b41      	ldr	r3, [pc, #260]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1ee      	bne.n	8005a96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d105      	bne.n	8005aca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005abe:	4b3d      	ldr	r3, [pc, #244]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	4a3c      	ldr	r2, [pc, #240]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80ae 	beq.w	8005c30 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ad4:	4b37      	ldr	r3, [pc, #220]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 030c 	and.w	r3, r3, #12
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d06d      	beq.n	8005bbc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d14b      	bne.n	8005b80 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae8:	4b32      	ldr	r3, [pc, #200]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a31      	ldr	r2, [pc, #196]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af4:	f7fd f8a0 	bl	8002c38 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005afc:	f7fd f89c 	bl	8002c38 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e091      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0e:	4b29      	ldr	r3, [pc, #164]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1f0      	bne.n	8005afc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69da      	ldr	r2, [r3, #28]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	019b      	lsls	r3, r3, #6
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b30:	085b      	lsrs	r3, r3, #1
 8005b32:	3b01      	subs	r3, #1
 8005b34:	041b      	lsls	r3, r3, #16
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	061b      	lsls	r3, r3, #24
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b44:	071b      	lsls	r3, r3, #28
 8005b46:	491b      	ldr	r1, [pc, #108]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b4c:	4b19      	ldr	r3, [pc, #100]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b58:	f7fd f86e 	bl	8002c38 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b60:	f7fd f86a 	bl	8002c38 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e05f      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b72:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0f0      	beq.n	8005b60 <HAL_RCC_OscConfig+0x47c>
 8005b7e:	e057      	b.n	8005c30 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b80:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a0b      	ldr	r2, [pc, #44]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8c:	f7fd f854 	bl	8002c38 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b94:	f7fd f850 	bl	8002c38 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e045      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba6:	4b03      	ldr	r3, [pc, #12]	; (8005bb4 <HAL_RCC_OscConfig+0x4d0>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1f0      	bne.n	8005b94 <HAL_RCC_OscConfig+0x4b0>
 8005bb2:	e03d      	b.n	8005c30 <HAL_RCC_OscConfig+0x54c>
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005bbc:	4b1f      	ldr	r3, [pc, #124]	; (8005c3c <HAL_RCC_OscConfig+0x558>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d030      	beq.n	8005c2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d129      	bne.n	8005c2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d122      	bne.n	8005c2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bec:	4013      	ands	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bf2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d119      	bne.n	8005c2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	3b01      	subs	r3, #1
 8005c06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d10f      	bne.n	8005c2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d107      	bne.n	8005c2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d001      	beq.n	8005c30 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40023800 	.word	0x40023800

08005c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0d0      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c58:	4b6a      	ldr	r3, [pc, #424]	; (8005e04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d910      	bls.n	8005c88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c66:	4b67      	ldr	r3, [pc, #412]	; (8005e04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f023 020f 	bic.w	r2, r3, #15
 8005c6e:	4965      	ldr	r1, [pc, #404]	; (8005e04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c76:	4b63      	ldr	r3, [pc, #396]	; (8005e04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d001      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0b8      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d020      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ca0:	4b59      	ldr	r3, [pc, #356]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4a58      	ldr	r2, [pc, #352]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005ca6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005caa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cb8:	4b53      	ldr	r3, [pc, #332]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	4a52      	ldr	r2, [pc, #328]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005cbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc4:	4b50      	ldr	r3, [pc, #320]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	494d      	ldr	r1, [pc, #308]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d040      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cea:	4b47      	ldr	r3, [pc, #284]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d115      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e07f      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d107      	bne.n	8005d12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d02:	4b41      	ldr	r3, [pc, #260]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d109      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e073      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d12:	4b3d      	ldr	r3, [pc, #244]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e06b      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d22:	4b39      	ldr	r3, [pc, #228]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f023 0203 	bic.w	r2, r3, #3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	4936      	ldr	r1, [pc, #216]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d34:	f7fc ff80 	bl	8002c38 <HAL_GetTick>
 8005d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3a:	e00a      	b.n	8005d52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d3c:	f7fc ff7c 	bl	8002c38 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e053      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d52:	4b2d      	ldr	r3, [pc, #180]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 020c 	and.w	r2, r3, #12
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d1eb      	bne.n	8005d3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d64:	4b27      	ldr	r3, [pc, #156]	; (8005e04 <HAL_RCC_ClockConfig+0x1c4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d210      	bcs.n	8005d94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d72:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <HAL_RCC_ClockConfig+0x1c4>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 020f 	bic.w	r2, r3, #15
 8005d7a:	4922      	ldr	r1, [pc, #136]	; (8005e04 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d82:	4b20      	ldr	r3, [pc, #128]	; (8005e04 <HAL_RCC_ClockConfig+0x1c4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d001      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e032      	b.n	8005dfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005da0:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	4916      	ldr	r1, [pc, #88]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dbe:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	490e      	ldr	r1, [pc, #56]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dd2:	f000 f821 	bl	8005e18 <HAL_RCC_GetSysClockFreq>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	091b      	lsrs	r3, r3, #4
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	490a      	ldr	r1, [pc, #40]	; (8005e0c <HAL_RCC_ClockConfig+0x1cc>)
 8005de4:	5ccb      	ldrb	r3, [r1, r3]
 8005de6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dea:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <HAL_RCC_ClockConfig+0x1d0>)
 8005dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dee:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <HAL_RCC_ClockConfig+0x1d4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fc fedc 	bl	8002bb0 <HAL_InitTick>

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40023c00 	.word	0x40023c00
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	0800cc94 	.word	0x0800cc94
 8005e10:	20000000 	.word	0x20000000
 8005e14:	20000004 	.word	0x20000004

08005e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e18:	b5b0      	push	{r4, r5, r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e1e:	2100      	movs	r1, #0
 8005e20:	6079      	str	r1, [r7, #4]
 8005e22:	2100      	movs	r1, #0
 8005e24:	60f9      	str	r1, [r7, #12]
 8005e26:	2100      	movs	r1, #0
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e2e:	4952      	ldr	r1, [pc, #328]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e30:	6889      	ldr	r1, [r1, #8]
 8005e32:	f001 010c 	and.w	r1, r1, #12
 8005e36:	2908      	cmp	r1, #8
 8005e38:	d00d      	beq.n	8005e56 <HAL_RCC_GetSysClockFreq+0x3e>
 8005e3a:	2908      	cmp	r1, #8
 8005e3c:	f200 8094 	bhi.w	8005f68 <HAL_RCC_GetSysClockFreq+0x150>
 8005e40:	2900      	cmp	r1, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_RCC_GetSysClockFreq+0x32>
 8005e44:	2904      	cmp	r1, #4
 8005e46:	d003      	beq.n	8005e50 <HAL_RCC_GetSysClockFreq+0x38>
 8005e48:	e08e      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e4a:	4b4c      	ldr	r3, [pc, #304]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x164>)
 8005e4c:	60bb      	str	r3, [r7, #8]
      break;
 8005e4e:	e08e      	b.n	8005f6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e50:	4b4b      	ldr	r3, [pc, #300]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x168>)
 8005e52:	60bb      	str	r3, [r7, #8]
      break;
 8005e54:	e08b      	b.n	8005f6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e56:	4948      	ldr	r1, [pc, #288]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e58:	6849      	ldr	r1, [r1, #4]
 8005e5a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005e5e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005e60:	4945      	ldr	r1, [pc, #276]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e62:	6849      	ldr	r1, [r1, #4]
 8005e64:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005e68:	2900      	cmp	r1, #0
 8005e6a:	d024      	beq.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e6c:	4942      	ldr	r1, [pc, #264]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e6e:	6849      	ldr	r1, [r1, #4]
 8005e70:	0989      	lsrs	r1, r1, #6
 8005e72:	4608      	mov	r0, r1
 8005e74:	f04f 0100 	mov.w	r1, #0
 8005e78:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005e7c:	f04f 0500 	mov.w	r5, #0
 8005e80:	ea00 0204 	and.w	r2, r0, r4
 8005e84:	ea01 0305 	and.w	r3, r1, r5
 8005e88:	493d      	ldr	r1, [pc, #244]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x168>)
 8005e8a:	fb01 f003 	mul.w	r0, r1, r3
 8005e8e:	2100      	movs	r1, #0
 8005e90:	fb01 f102 	mul.w	r1, r1, r2
 8005e94:	1844      	adds	r4, r0, r1
 8005e96:	493a      	ldr	r1, [pc, #232]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x168>)
 8005e98:	fba2 0101 	umull	r0, r1, r2, r1
 8005e9c:	1863      	adds	r3, r4, r1
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	f7fa fa22 	bl	80002f0 <__aeabi_uldivmod>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	e04a      	b.n	8005f4c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eb6:	4b30      	ldr	r3, [pc, #192]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x160>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	099b      	lsrs	r3, r3, #6
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ec6:	f04f 0100 	mov.w	r1, #0
 8005eca:	ea02 0400 	and.w	r4, r2, r0
 8005ece:	ea03 0501 	and.w	r5, r3, r1
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	014b      	lsls	r3, r1, #5
 8005ee0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ee4:	0142      	lsls	r2, r0, #5
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	1b00      	subs	r0, r0, r4
 8005eec:	eb61 0105 	sbc.w	r1, r1, r5
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	018b      	lsls	r3, r1, #6
 8005efa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005efe:	0182      	lsls	r2, r0, #6
 8005f00:	1a12      	subs	r2, r2, r0
 8005f02:	eb63 0301 	sbc.w	r3, r3, r1
 8005f06:	f04f 0000 	mov.w	r0, #0
 8005f0a:	f04f 0100 	mov.w	r1, #0
 8005f0e:	00d9      	lsls	r1, r3, #3
 8005f10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f14:	00d0      	lsls	r0, r2, #3
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	1912      	adds	r2, r2, r4
 8005f1c:	eb45 0303 	adc.w	r3, r5, r3
 8005f20:	f04f 0000 	mov.w	r0, #0
 8005f24:	f04f 0100 	mov.w	r1, #0
 8005f28:	0299      	lsls	r1, r3, #10
 8005f2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f2e:	0290      	lsls	r0, r2, #10
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4610      	mov	r0, r2
 8005f36:	4619      	mov	r1, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	f7fa f9d6 	bl	80002f0 <__aeabi_uldivmod>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4613      	mov	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	0c1b      	lsrs	r3, r3, #16
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	3301      	adds	r3, #1
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f64:	60bb      	str	r3, [r7, #8]
      break;
 8005f66:	e002      	b.n	8005f6e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f68:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x164>)
 8005f6a:	60bb      	str	r3, [r7, #8]
      break;
 8005f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bdb0      	pop	{r4, r5, r7, pc}
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	00f42400 	.word	0x00f42400
 8005f80:	017d7840 	.word	0x017d7840

08005f84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f88:	4b03      	ldr	r3, [pc, #12]	; (8005f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	20000000 	.word	0x20000000

08005f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fa0:	f7ff fff0 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	0a9b      	lsrs	r3, r3, #10
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	4903      	ldr	r1, [pc, #12]	; (8005fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fb2:	5ccb      	ldrb	r3, [r1, r3]
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40023800 	.word	0x40023800
 8005fc0:	0800cca4 	.word	0x0800cca4

08005fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fc8:	f7ff ffdc 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	0b5b      	lsrs	r3, r3, #13
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	4903      	ldr	r1, [pc, #12]	; (8005fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fda:	5ccb      	ldrb	r3, [r1, r3]
 8005fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	0800cca4 	.word	0x0800cca4

08005fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006000:	2300      	movs	r3, #0
 8006002:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d012      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006014:	4b69      	ldr	r3, [pc, #420]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	4a68      	ldr	r2, [pc, #416]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800601a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800601e:	6093      	str	r3, [r2, #8]
 8006020:	4b66      	ldr	r3, [pc, #408]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006028:	4964      	ldr	r1, [pc, #400]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602a:	4313      	orrs	r3, r2
 800602c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006036:	2301      	movs	r3, #1
 8006038:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d017      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006046:	4b5d      	ldr	r3, [pc, #372]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800604c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006054:	4959      	ldr	r1, [pc, #356]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006064:	d101      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006066:	2301      	movs	r3, #1
 8006068:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006072:	2301      	movs	r3, #1
 8006074:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d017      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006082:	4b4e      	ldr	r3, [pc, #312]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006088:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	494a      	ldr	r1, [pc, #296]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006092:	4313      	orrs	r3, r2
 8006094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060a0:	d101      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80060a2:	2301      	movs	r3, #1
 80060a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80060ae:	2301      	movs	r3, #1
 80060b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80060be:	2301      	movs	r3, #1
 80060c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0320 	and.w	r3, r3, #32
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 808b 	beq.w	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060d0:	4b3a      	ldr	r3, [pc, #232]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	4a39      	ldr	r2, [pc, #228]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060da:	6413      	str	r3, [r2, #64]	; 0x40
 80060dc:	4b37      	ldr	r3, [pc, #220]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e4:	60bb      	str	r3, [r7, #8]
 80060e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060e8:	4b35      	ldr	r3, [pc, #212]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a34      	ldr	r2, [pc, #208]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060f4:	f7fc fda0 	bl	8002c38 <HAL_GetTick>
 80060f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060fc:	f7fc fd9c 	bl	8002c38 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b64      	cmp	r3, #100	; 0x64
 8006108:	d901      	bls.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e38f      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800610e:	4b2c      	ldr	r3, [pc, #176]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f0      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800611a:	4b28      	ldr	r3, [pc, #160]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006122:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d035      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	429a      	cmp	r2, r3
 8006136:	d02e      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006138:	4b20      	ldr	r3, [pc, #128]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006140:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006142:	4b1e      	ldr	r3, [pc, #120]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	4a1d      	ldr	r2, [pc, #116]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800614c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800614e:	4b1b      	ldr	r3, [pc, #108]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006152:	4a1a      	ldr	r2, [pc, #104]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006158:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800615a:	4a18      	ldr	r2, [pc, #96]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006160:	4b16      	ldr	r3, [pc, #88]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b01      	cmp	r3, #1
 800616a:	d114      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616c:	f7fc fd64 	bl	8002c38 <HAL_GetTick>
 8006170:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006172:	e00a      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006174:	f7fc fd60 	bl	8002c38 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006182:	4293      	cmp	r3, r2
 8006184:	d901      	bls.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e351      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800618c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0ee      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800619e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a2:	d111      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80061a4:	4b05      	ldr	r3, [pc, #20]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061b0:	4b04      	ldr	r3, [pc, #16]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061b2:	400b      	ands	r3, r1
 80061b4:	4901      	ldr	r1, [pc, #4]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]
 80061ba:	e00b      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80061bc:	40023800 	.word	0x40023800
 80061c0:	40007000 	.word	0x40007000
 80061c4:	0ffffcff 	.word	0x0ffffcff
 80061c8:	4bb3      	ldr	r3, [pc, #716]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	4ab2      	ldr	r2, [pc, #712]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80061d2:	6093      	str	r3, [r2, #8]
 80061d4:	4bb0      	ldr	r3, [pc, #704]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e0:	49ad      	ldr	r1, [pc, #692]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d010      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061f2:	4ba9      	ldr	r3, [pc, #676]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061f8:	4aa7      	ldr	r2, [pc, #668]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006202:	4ba5      	ldr	r3, [pc, #660]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006204:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	49a2      	ldr	r1, [pc, #648]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006220:	4b9d      	ldr	r3, [pc, #628]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800622e:	499a      	ldr	r1, [pc, #616]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006230:	4313      	orrs	r3, r2
 8006232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006242:	4b95      	ldr	r3, [pc, #596]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006248:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006250:	4991      	ldr	r1, [pc, #580]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006264:	4b8c      	ldr	r3, [pc, #560]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006272:	4989      	ldr	r1, [pc, #548]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006286:	4b84      	ldr	r3, [pc, #528]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006294:	4980      	ldr	r1, [pc, #512]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006296:	4313      	orrs	r3, r2
 8006298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062a8:	4b7b      	ldr	r3, [pc, #492]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ae:	f023 0203 	bic.w	r2, r3, #3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b6:	4978      	ldr	r1, [pc, #480]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062ca:	4b73      	ldr	r3, [pc, #460]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d0:	f023 020c 	bic.w	r2, r3, #12
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d8:	496f      	ldr	r1, [pc, #444]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062ec:	4b6a      	ldr	r3, [pc, #424]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fa:	4967      	ldr	r1, [pc, #412]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800630e:	4b62      	ldr	r3, [pc, #392]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006314:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631c:	495e      	ldr	r1, [pc, #376]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800631e:	4313      	orrs	r3, r2
 8006320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006330:	4b59      	ldr	r3, [pc, #356]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633e:	4956      	ldr	r1, [pc, #344]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006340:	4313      	orrs	r3, r2
 8006342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006352:	4b51      	ldr	r3, [pc, #324]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006358:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006360:	494d      	ldr	r1, [pc, #308]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006374:	4b48      	ldr	r3, [pc, #288]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006382:	4945      	ldr	r1, [pc, #276]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006396:	4b40      	ldr	r3, [pc, #256]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a4:	493c      	ldr	r1, [pc, #240]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063b8:	4b37      	ldr	r3, [pc, #220]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063c6:	4934      	ldr	r1, [pc, #208]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d011      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80063da:	4b2f      	ldr	r3, [pc, #188]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063e8:	492b      	ldr	r1, [pc, #172]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063f8:	d101      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80063fa:	2301      	movs	r3, #1
 80063fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0308 	and.w	r3, r3, #8
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800640a:	2301      	movs	r3, #1
 800640c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800641a:	4b1f      	ldr	r3, [pc, #124]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006420:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006428:	491b      	ldr	r1, [pc, #108]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800643c:	4b16      	ldr	r3, [pc, #88]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006442:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800644c:	4912      	ldr	r1, [pc, #72]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800644e:	4313      	orrs	r3, r2
 8006450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006460:	4b0d      	ldr	r3, [pc, #52]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006466:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006470:	4909      	ldr	r1, [pc, #36]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00f      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006484:	4b04      	ldr	r3, [pc, #16]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800648a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006494:	e002      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006496:	bf00      	nop
 8006498:	40023800 	.word	0x40023800
 800649c:	4986      	ldr	r1, [pc, #536]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80064b0:	4b81      	ldr	r3, [pc, #516]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064c0:	497d      	ldr	r1, [pc, #500]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d006      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 80d6 	beq.w	8006688 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064dc:	4b76      	ldr	r3, [pc, #472]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a75      	ldr	r2, [pc, #468]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064e8:	f7fc fba6 	bl	8002c38 <HAL_GetTick>
 80064ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064f0:	f7fc fba2 	bl	8002c38 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b64      	cmp	r3, #100	; 0x64
 80064fc:	d901      	bls.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e195      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006502:	4b6d      	ldr	r3, [pc, #436]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f0      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d021      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651e:	2b00      	cmp	r3, #0
 8006520:	d11d      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006522:	4b65      	ldr	r3, [pc, #404]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006528:	0c1b      	lsrs	r3, r3, #16
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006530:	4b61      	ldr	r3, [pc, #388]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006536:	0e1b      	lsrs	r3, r3, #24
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	019a      	lsls	r2, r3, #6
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	041b      	lsls	r3, r3, #16
 8006548:	431a      	orrs	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	061b      	lsls	r3, r3, #24
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	071b      	lsls	r3, r3, #28
 8006556:	4958      	ldr	r1, [pc, #352]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006558:	4313      	orrs	r3, r2
 800655a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006572:	d00a      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800657c:	2b00      	cmp	r3, #0
 800657e:	d02e      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006588:	d129      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800658a:	4b4b      	ldr	r3, [pc, #300]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800658c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006590:	0c1b      	lsrs	r3, r3, #16
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006598:	4b47      	ldr	r3, [pc, #284]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800659a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800659e:	0f1b      	lsrs	r3, r3, #28
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	019a      	lsls	r2, r3, #6
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	041b      	lsls	r3, r3, #16
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	061b      	lsls	r3, r3, #24
 80065b8:	431a      	orrs	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	071b      	lsls	r3, r3, #28
 80065be:	493e      	ldr	r1, [pc, #248]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80065c6:	4b3c      	ldr	r3, [pc, #240]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065cc:	f023 021f 	bic.w	r2, r3, #31
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	3b01      	subs	r3, #1
 80065d6:	4938      	ldr	r1, [pc, #224]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d01d      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065ea:	4b33      	ldr	r3, [pc, #204]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f0:	0e1b      	lsrs	r3, r3, #24
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065f8:	4b2f      	ldr	r3, [pc, #188]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065fe:	0f1b      	lsrs	r3, r3, #28
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	019a      	lsls	r2, r3, #6
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	041b      	lsls	r3, r3, #16
 8006612:	431a      	orrs	r2, r3
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	061b      	lsls	r3, r3, #24
 8006618:	431a      	orrs	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	071b      	lsls	r3, r3, #28
 800661e:	4926      	ldr	r1, [pc, #152]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d011      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	019a      	lsls	r2, r3, #6
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	041b      	lsls	r3, r3, #16
 800663e:	431a      	orrs	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	061b      	lsls	r3, r3, #24
 8006646:	431a      	orrs	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	071b      	lsls	r3, r3, #28
 800664e:	491a      	ldr	r1, [pc, #104]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006656:	4b18      	ldr	r3, [pc, #96]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a17      	ldr	r2, [pc, #92]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800665c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006662:	f7fc fae9 	bl	8002c38 <HAL_GetTick>
 8006666:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006668:	e008      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800666a:	f7fc fae5 	bl	8002c38 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b64      	cmp	r3, #100	; 0x64
 8006676:	d901      	bls.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e0d8      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800667c:	4b0e      	ldr	r3, [pc, #56]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0f0      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	2b01      	cmp	r3, #1
 800668c:	f040 80ce 	bne.w	800682c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006690:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a08      	ldr	r2, [pc, #32]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800669a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800669c:	f7fc facc 	bl	8002c38 <HAL_GetTick>
 80066a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066a2:	e00b      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066a4:	f7fc fac8 	bl	8002c38 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b64      	cmp	r3, #100	; 0x64
 80066b0:	d904      	bls.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e0bb      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80066b6:	bf00      	nop
 80066b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066bc:	4b5e      	ldr	r3, [pc, #376]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066c8:	d0ec      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d02e      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d12a      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80066f2:	4b51      	ldr	r3, [pc, #324]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f8:	0c1b      	lsrs	r3, r3, #16
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006700:	4b4d      	ldr	r3, [pc, #308]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006706:	0f1b      	lsrs	r3, r3, #28
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	019a      	lsls	r2, r3, #6
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	041b      	lsls	r3, r3, #16
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	061b      	lsls	r3, r3, #24
 8006720:	431a      	orrs	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	071b      	lsls	r3, r3, #28
 8006726:	4944      	ldr	r1, [pc, #272]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006728:	4313      	orrs	r3, r2
 800672a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800672e:	4b42      	ldr	r3, [pc, #264]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006734:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	3b01      	subs	r3, #1
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	493d      	ldr	r1, [pc, #244]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d022      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800675c:	d11d      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800675e:	4b36      	ldr	r3, [pc, #216]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006764:	0e1b      	lsrs	r3, r3, #24
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800676c:	4b32      	ldr	r3, [pc, #200]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800676e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006772:	0f1b      	lsrs	r3, r3, #28
 8006774:	f003 0307 	and.w	r3, r3, #7
 8006778:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	019a      	lsls	r2, r3, #6
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	041b      	lsls	r3, r3, #16
 8006786:	431a      	orrs	r2, r3
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	061b      	lsls	r3, r3, #24
 800678c:	431a      	orrs	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	071b      	lsls	r3, r3, #28
 8006792:	4929      	ldr	r1, [pc, #164]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d028      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067a6:	4b24      	ldr	r3, [pc, #144]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	0e1b      	lsrs	r3, r3, #24
 80067ae:	f003 030f 	and.w	r3, r3, #15
 80067b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067b4:	4b20      	ldr	r3, [pc, #128]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ba:	0c1b      	lsrs	r3, r3, #16
 80067bc:	f003 0303 	and.w	r3, r3, #3
 80067c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	019a      	lsls	r2, r3, #6
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	041b      	lsls	r3, r3, #16
 80067cc:	431a      	orrs	r2, r3
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	061b      	lsls	r3, r3, #24
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	071b      	lsls	r3, r3, #28
 80067da:	4917      	ldr	r1, [pc, #92]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80067e2:	4b15      	ldr	r3, [pc, #84]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	4911      	ldr	r1, [pc, #68]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80067f8:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a0e      	ldr	r2, [pc, #56]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006804:	f7fc fa18 	bl	8002c38 <HAL_GetTick>
 8006808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800680a:	e008      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800680c:	f7fc fa14 	bl	8002c38 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b64      	cmp	r3, #100	; 0x64
 8006818:	d901      	bls.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e007      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800681e:	4b06      	ldr	r3, [pc, #24]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682a:	d1ef      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3720      	adds	r7, #32
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40023800 	.word	0x40023800

0800683c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e01c      	b.n	8006888 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	795b      	ldrb	r3, [r3, #5]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d105      	bne.n	8006864 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f816 	bl	8006890 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0204 	orr.w	r2, r2, #4
 8006878:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_RNG_MspInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e081      	b.n	80069ba <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	7f5b      	ldrb	r3, [r3, #29]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d105      	bne.n	80068cc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f87e 	bl	80069c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	22ca      	movs	r2, #202	; 0xca
 80068d8:	625a      	str	r2, [r3, #36]	; 0x24
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2253      	movs	r2, #83	; 0x53
 80068e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f950 	bl	8006b88 <RTC_EnterInitMode>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d008      	beq.n	8006900 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	22ff      	movs	r2, #255	; 0xff
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2204      	movs	r2, #4
 80068fa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e05c      	b.n	80069ba <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6899      	ldr	r1, [r3, #8]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	4b2e      	ldr	r3, [pc, #184]	; (80069c4 <HAL_RTC_Init+0x120>)
 800690c:	400b      	ands	r3, r1
 800690e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6899      	ldr	r1, [r3, #8]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	68d2      	ldr	r2, [r2, #12]
 8006936:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6919      	ldr	r1, [r3, #16]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	041a      	lsls	r2, r3, #16
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800695a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10e      	bne.n	8006988 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f8e4 	bl	8006b38 <HAL_RTC_WaitForSynchro>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	22ff      	movs	r2, #255	; 0xff
 800697c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2204      	movs	r2, #4
 8006982:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e018      	b.n	80069ba <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0208 	bic.w	r2, r2, #8
 8006996:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699a      	ldr	r2, [r3, #24]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	22ff      	movs	r2, #255	; 0xff
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80069b8:	2300      	movs	r3, #0
  }
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	ff8fffbf 	.word	0xff8fffbf

080069c8 <HAL_RTC_MspInit>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	4b22      	ldr	r3, [pc, #136]	; (8006a94 <HAL_RTC_GetTime+0xb8>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	0c1b      	lsrs	r3, r3, #16
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	0a1b      	lsrs	r3, r3, #8
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	0c1b      	lsrs	r3, r3, #16
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d11a      	bne.n	8006a8a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 f8c1 	bl	8006be0 <RTC_Bcd2ToByte>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	461a      	mov	r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	785b      	ldrb	r3, [r3, #1]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 f8b8 	bl	8006be0 <RTC_Bcd2ToByte>
 8006a70:	4603      	mov	r3, r0
 8006a72:	461a      	mov	r2, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	789b      	ldrb	r3, [r3, #2]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 f8af 	bl	8006be0 <RTC_Bcd2ToByte>
 8006a82:	4603      	mov	r3, r0
 8006a84:	461a      	mov	r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	007f7f7f 	.word	0x007f7f7f

08006a98 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	4b21      	ldr	r3, [pc, #132]	; (8006b34 <HAL_RTC_GetDate+0x9c>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	0c1b      	lsrs	r3, r3, #16
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	0a1b      	lsrs	r3, r3, #8
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	0b5b      	lsrs	r3, r3, #13
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d11a      	bne.n	8006b28 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	78db      	ldrb	r3, [r3, #3]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f872 	bl	8006be0 <RTC_Bcd2ToByte>
 8006afc:	4603      	mov	r3, r0
 8006afe:	461a      	mov	r2, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 f869 	bl	8006be0 <RTC_Bcd2ToByte>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	461a      	mov	r2, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	789b      	ldrb	r3, [r3, #2]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 f860 	bl	8006be0 <RTC_Bcd2ToByte>
 8006b20:	4603      	mov	r3, r0
 8006b22:	461a      	mov	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	00ffff3f 	.word	0x00ffff3f

08006b38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b52:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b54:	f7fc f870 	bl	8002c38 <HAL_GetTick>
 8006b58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006b5a:	e009      	b.n	8006b70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006b5c:	f7fc f86c 	bl	8002c38 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b6a:	d901      	bls.n	8006b70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e007      	b.n	8006b80 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0ee      	beq.n	8006b5c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d119      	bne.n	8006bd6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8006baa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bac:	f7fc f844 	bl	8002c38 <HAL_GetTick>
 8006bb0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006bb2:	e009      	b.n	8006bc8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006bb4:	f7fc f840 	bl	8002c38 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bc2:	d901      	bls.n	8006bc8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e007      	b.n	8006bd8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0ee      	beq.n	8006bb4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	091b      	lsrs	r3, r3, #4
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006c00:	79fb      	ldrb	r3, [r7, #7]
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	4413      	add	r3, r2
 8006c0e:	b2db      	uxtb	r3, r3
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e025      	b.n	8006c7c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d106      	bne.n	8006c4a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f81d 	bl	8006c84 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	f000 fccb 	bl	80075f8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	f000 fd35 	bl	80076dc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d101      	bne.n	8006cb4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e018      	b.n	8006ce6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	68b9      	ldr	r1, [r7, #8]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fd89 	bl	80077dc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d104      	bne.n	8006cdc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2205      	movs	r2, #5
 8006cd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006cda:	e003      	b.n	8006ce4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b082      	sub	sp, #8
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d101      	bne.n	8006d08 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006d04:	2302      	movs	r3, #2
 8006d06:	e00e      	b.n	8006d26 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fd84 	bl	8007824 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b082      	sub	sp, #8
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e040      	b.n	8006dc2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f873 	bl	8006e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2224      	movs	r2, #36	; 0x24
 8006d5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0201 	bic.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f879 	bl	8006e64 <UART_SetConfig>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e022      	b.n	8006dc2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 facf 	bl	8007328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006da8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f042 0201 	orr.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fb56 	bl	800746c <UART_CheckIdleState>
 8006dc0:	4603      	mov	r3, r0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e02b      	b.n	8006e34 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2224      	movs	r2, #36	; 0x24
 8006de0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2200      	movs	r2, #0
 8006e08:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f820 	bl	8006e50 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4ba7      	ldr	r3, [pc, #668]	; (800712c <UART_SetConfig+0x2c8>)
 8006e90:	4013      	ands	r3, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6812      	ldr	r2, [r2, #0]
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a95      	ldr	r2, [pc, #596]	; (8007130 <UART_SetConfig+0x2cc>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d120      	bne.n	8006f22 <UART_SetConfig+0xbe>
 8006ee0:	4b94      	ldr	r3, [pc, #592]	; (8007134 <UART_SetConfig+0x2d0>)
 8006ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d816      	bhi.n	8006f1c <UART_SetConfig+0xb8>
 8006eee:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <UART_SetConfig+0x90>)
 8006ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef4:	08006f05 	.word	0x08006f05
 8006ef8:	08006f11 	.word	0x08006f11
 8006efc:	08006f0b 	.word	0x08006f0b
 8006f00:	08006f17 	.word	0x08006f17
 8006f04:	2301      	movs	r3, #1
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e14f      	b.n	80071aa <UART_SetConfig+0x346>
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	77fb      	strb	r3, [r7, #31]
 8006f0e:	e14c      	b.n	80071aa <UART_SetConfig+0x346>
 8006f10:	2304      	movs	r3, #4
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e149      	b.n	80071aa <UART_SetConfig+0x346>
 8006f16:	2308      	movs	r3, #8
 8006f18:	77fb      	strb	r3, [r7, #31]
 8006f1a:	e146      	b.n	80071aa <UART_SetConfig+0x346>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	77fb      	strb	r3, [r7, #31]
 8006f20:	e143      	b.n	80071aa <UART_SetConfig+0x346>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a84      	ldr	r2, [pc, #528]	; (8007138 <UART_SetConfig+0x2d4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d132      	bne.n	8006f92 <UART_SetConfig+0x12e>
 8006f2c:	4b81      	ldr	r3, [pc, #516]	; (8007134 <UART_SetConfig+0x2d0>)
 8006f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f32:	f003 030c 	and.w	r3, r3, #12
 8006f36:	2b0c      	cmp	r3, #12
 8006f38:	d828      	bhi.n	8006f8c <UART_SetConfig+0x128>
 8006f3a:	a201      	add	r2, pc, #4	; (adr r2, 8006f40 <UART_SetConfig+0xdc>)
 8006f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f40:	08006f75 	.word	0x08006f75
 8006f44:	08006f8d 	.word	0x08006f8d
 8006f48:	08006f8d 	.word	0x08006f8d
 8006f4c:	08006f8d 	.word	0x08006f8d
 8006f50:	08006f81 	.word	0x08006f81
 8006f54:	08006f8d 	.word	0x08006f8d
 8006f58:	08006f8d 	.word	0x08006f8d
 8006f5c:	08006f8d 	.word	0x08006f8d
 8006f60:	08006f7b 	.word	0x08006f7b
 8006f64:	08006f8d 	.word	0x08006f8d
 8006f68:	08006f8d 	.word	0x08006f8d
 8006f6c:	08006f8d 	.word	0x08006f8d
 8006f70:	08006f87 	.word	0x08006f87
 8006f74:	2300      	movs	r3, #0
 8006f76:	77fb      	strb	r3, [r7, #31]
 8006f78:	e117      	b.n	80071aa <UART_SetConfig+0x346>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	77fb      	strb	r3, [r7, #31]
 8006f7e:	e114      	b.n	80071aa <UART_SetConfig+0x346>
 8006f80:	2304      	movs	r3, #4
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	e111      	b.n	80071aa <UART_SetConfig+0x346>
 8006f86:	2308      	movs	r3, #8
 8006f88:	77fb      	strb	r3, [r7, #31]
 8006f8a:	e10e      	b.n	80071aa <UART_SetConfig+0x346>
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e10b      	b.n	80071aa <UART_SetConfig+0x346>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a69      	ldr	r2, [pc, #420]	; (800713c <UART_SetConfig+0x2d8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d120      	bne.n	8006fde <UART_SetConfig+0x17a>
 8006f9c:	4b65      	ldr	r3, [pc, #404]	; (8007134 <UART_SetConfig+0x2d0>)
 8006f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fa6:	2b30      	cmp	r3, #48	; 0x30
 8006fa8:	d013      	beq.n	8006fd2 <UART_SetConfig+0x16e>
 8006faa:	2b30      	cmp	r3, #48	; 0x30
 8006fac:	d814      	bhi.n	8006fd8 <UART_SetConfig+0x174>
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	d009      	beq.n	8006fc6 <UART_SetConfig+0x162>
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d810      	bhi.n	8006fd8 <UART_SetConfig+0x174>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <UART_SetConfig+0x15c>
 8006fba:	2b10      	cmp	r3, #16
 8006fbc:	d006      	beq.n	8006fcc <UART_SetConfig+0x168>
 8006fbe:	e00b      	b.n	8006fd8 <UART_SetConfig+0x174>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	77fb      	strb	r3, [r7, #31]
 8006fc4:	e0f1      	b.n	80071aa <UART_SetConfig+0x346>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	77fb      	strb	r3, [r7, #31]
 8006fca:	e0ee      	b.n	80071aa <UART_SetConfig+0x346>
 8006fcc:	2304      	movs	r3, #4
 8006fce:	77fb      	strb	r3, [r7, #31]
 8006fd0:	e0eb      	b.n	80071aa <UART_SetConfig+0x346>
 8006fd2:	2308      	movs	r3, #8
 8006fd4:	77fb      	strb	r3, [r7, #31]
 8006fd6:	e0e8      	b.n	80071aa <UART_SetConfig+0x346>
 8006fd8:	2310      	movs	r3, #16
 8006fda:	77fb      	strb	r3, [r7, #31]
 8006fdc:	e0e5      	b.n	80071aa <UART_SetConfig+0x346>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a57      	ldr	r2, [pc, #348]	; (8007140 <UART_SetConfig+0x2dc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d120      	bne.n	800702a <UART_SetConfig+0x1c6>
 8006fe8:	4b52      	ldr	r3, [pc, #328]	; (8007134 <UART_SetConfig+0x2d0>)
 8006fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ff2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ff4:	d013      	beq.n	800701e <UART_SetConfig+0x1ba>
 8006ff6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ff8:	d814      	bhi.n	8007024 <UART_SetConfig+0x1c0>
 8006ffa:	2b80      	cmp	r3, #128	; 0x80
 8006ffc:	d009      	beq.n	8007012 <UART_SetConfig+0x1ae>
 8006ffe:	2b80      	cmp	r3, #128	; 0x80
 8007000:	d810      	bhi.n	8007024 <UART_SetConfig+0x1c0>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <UART_SetConfig+0x1a8>
 8007006:	2b40      	cmp	r3, #64	; 0x40
 8007008:	d006      	beq.n	8007018 <UART_SetConfig+0x1b4>
 800700a:	e00b      	b.n	8007024 <UART_SetConfig+0x1c0>
 800700c:	2300      	movs	r3, #0
 800700e:	77fb      	strb	r3, [r7, #31]
 8007010:	e0cb      	b.n	80071aa <UART_SetConfig+0x346>
 8007012:	2302      	movs	r3, #2
 8007014:	77fb      	strb	r3, [r7, #31]
 8007016:	e0c8      	b.n	80071aa <UART_SetConfig+0x346>
 8007018:	2304      	movs	r3, #4
 800701a:	77fb      	strb	r3, [r7, #31]
 800701c:	e0c5      	b.n	80071aa <UART_SetConfig+0x346>
 800701e:	2308      	movs	r3, #8
 8007020:	77fb      	strb	r3, [r7, #31]
 8007022:	e0c2      	b.n	80071aa <UART_SetConfig+0x346>
 8007024:	2310      	movs	r3, #16
 8007026:	77fb      	strb	r3, [r7, #31]
 8007028:	e0bf      	b.n	80071aa <UART_SetConfig+0x346>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a45      	ldr	r2, [pc, #276]	; (8007144 <UART_SetConfig+0x2e0>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d125      	bne.n	8007080 <UART_SetConfig+0x21c>
 8007034:	4b3f      	ldr	r3, [pc, #252]	; (8007134 <UART_SetConfig+0x2d0>)
 8007036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007042:	d017      	beq.n	8007074 <UART_SetConfig+0x210>
 8007044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007048:	d817      	bhi.n	800707a <UART_SetConfig+0x216>
 800704a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800704e:	d00b      	beq.n	8007068 <UART_SetConfig+0x204>
 8007050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007054:	d811      	bhi.n	800707a <UART_SetConfig+0x216>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <UART_SetConfig+0x1fe>
 800705a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705e:	d006      	beq.n	800706e <UART_SetConfig+0x20a>
 8007060:	e00b      	b.n	800707a <UART_SetConfig+0x216>
 8007062:	2300      	movs	r3, #0
 8007064:	77fb      	strb	r3, [r7, #31]
 8007066:	e0a0      	b.n	80071aa <UART_SetConfig+0x346>
 8007068:	2302      	movs	r3, #2
 800706a:	77fb      	strb	r3, [r7, #31]
 800706c:	e09d      	b.n	80071aa <UART_SetConfig+0x346>
 800706e:	2304      	movs	r3, #4
 8007070:	77fb      	strb	r3, [r7, #31]
 8007072:	e09a      	b.n	80071aa <UART_SetConfig+0x346>
 8007074:	2308      	movs	r3, #8
 8007076:	77fb      	strb	r3, [r7, #31]
 8007078:	e097      	b.n	80071aa <UART_SetConfig+0x346>
 800707a:	2310      	movs	r3, #16
 800707c:	77fb      	strb	r3, [r7, #31]
 800707e:	e094      	b.n	80071aa <UART_SetConfig+0x346>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a30      	ldr	r2, [pc, #192]	; (8007148 <UART_SetConfig+0x2e4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d125      	bne.n	80070d6 <UART_SetConfig+0x272>
 800708a:	4b2a      	ldr	r3, [pc, #168]	; (8007134 <UART_SetConfig+0x2d0>)
 800708c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007090:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007094:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007098:	d017      	beq.n	80070ca <UART_SetConfig+0x266>
 800709a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800709e:	d817      	bhi.n	80070d0 <UART_SetConfig+0x26c>
 80070a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070a4:	d00b      	beq.n	80070be <UART_SetConfig+0x25a>
 80070a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070aa:	d811      	bhi.n	80070d0 <UART_SetConfig+0x26c>
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <UART_SetConfig+0x254>
 80070b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b4:	d006      	beq.n	80070c4 <UART_SetConfig+0x260>
 80070b6:	e00b      	b.n	80070d0 <UART_SetConfig+0x26c>
 80070b8:	2301      	movs	r3, #1
 80070ba:	77fb      	strb	r3, [r7, #31]
 80070bc:	e075      	b.n	80071aa <UART_SetConfig+0x346>
 80070be:	2302      	movs	r3, #2
 80070c0:	77fb      	strb	r3, [r7, #31]
 80070c2:	e072      	b.n	80071aa <UART_SetConfig+0x346>
 80070c4:	2304      	movs	r3, #4
 80070c6:	77fb      	strb	r3, [r7, #31]
 80070c8:	e06f      	b.n	80071aa <UART_SetConfig+0x346>
 80070ca:	2308      	movs	r3, #8
 80070cc:	77fb      	strb	r3, [r7, #31]
 80070ce:	e06c      	b.n	80071aa <UART_SetConfig+0x346>
 80070d0:	2310      	movs	r3, #16
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e069      	b.n	80071aa <UART_SetConfig+0x346>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1c      	ldr	r2, [pc, #112]	; (800714c <UART_SetConfig+0x2e8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d137      	bne.n	8007150 <UART_SetConfig+0x2ec>
 80070e0:	4b14      	ldr	r3, [pc, #80]	; (8007134 <UART_SetConfig+0x2d0>)
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80070ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070ee:	d017      	beq.n	8007120 <UART_SetConfig+0x2bc>
 80070f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070f4:	d817      	bhi.n	8007126 <UART_SetConfig+0x2c2>
 80070f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070fa:	d00b      	beq.n	8007114 <UART_SetConfig+0x2b0>
 80070fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007100:	d811      	bhi.n	8007126 <UART_SetConfig+0x2c2>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <UART_SetConfig+0x2aa>
 8007106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710a:	d006      	beq.n	800711a <UART_SetConfig+0x2b6>
 800710c:	e00b      	b.n	8007126 <UART_SetConfig+0x2c2>
 800710e:	2300      	movs	r3, #0
 8007110:	77fb      	strb	r3, [r7, #31]
 8007112:	e04a      	b.n	80071aa <UART_SetConfig+0x346>
 8007114:	2302      	movs	r3, #2
 8007116:	77fb      	strb	r3, [r7, #31]
 8007118:	e047      	b.n	80071aa <UART_SetConfig+0x346>
 800711a:	2304      	movs	r3, #4
 800711c:	77fb      	strb	r3, [r7, #31]
 800711e:	e044      	b.n	80071aa <UART_SetConfig+0x346>
 8007120:	2308      	movs	r3, #8
 8007122:	77fb      	strb	r3, [r7, #31]
 8007124:	e041      	b.n	80071aa <UART_SetConfig+0x346>
 8007126:	2310      	movs	r3, #16
 8007128:	77fb      	strb	r3, [r7, #31]
 800712a:	e03e      	b.n	80071aa <UART_SetConfig+0x346>
 800712c:	efff69f3 	.word	0xefff69f3
 8007130:	40011000 	.word	0x40011000
 8007134:	40023800 	.word	0x40023800
 8007138:	40004400 	.word	0x40004400
 800713c:	40004800 	.word	0x40004800
 8007140:	40004c00 	.word	0x40004c00
 8007144:	40005000 	.word	0x40005000
 8007148:	40011400 	.word	0x40011400
 800714c:	40007800 	.word	0x40007800
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a71      	ldr	r2, [pc, #452]	; (800731c <UART_SetConfig+0x4b8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d125      	bne.n	80071a6 <UART_SetConfig+0x342>
 800715a:	4b71      	ldr	r3, [pc, #452]	; (8007320 <UART_SetConfig+0x4bc>)
 800715c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007160:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007164:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007168:	d017      	beq.n	800719a <UART_SetConfig+0x336>
 800716a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800716e:	d817      	bhi.n	80071a0 <UART_SetConfig+0x33c>
 8007170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007174:	d00b      	beq.n	800718e <UART_SetConfig+0x32a>
 8007176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800717a:	d811      	bhi.n	80071a0 <UART_SetConfig+0x33c>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <UART_SetConfig+0x324>
 8007180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007184:	d006      	beq.n	8007194 <UART_SetConfig+0x330>
 8007186:	e00b      	b.n	80071a0 <UART_SetConfig+0x33c>
 8007188:	2300      	movs	r3, #0
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e00d      	b.n	80071aa <UART_SetConfig+0x346>
 800718e:	2302      	movs	r3, #2
 8007190:	77fb      	strb	r3, [r7, #31]
 8007192:	e00a      	b.n	80071aa <UART_SetConfig+0x346>
 8007194:	2304      	movs	r3, #4
 8007196:	77fb      	strb	r3, [r7, #31]
 8007198:	e007      	b.n	80071aa <UART_SetConfig+0x346>
 800719a:	2308      	movs	r3, #8
 800719c:	77fb      	strb	r3, [r7, #31]
 800719e:	e004      	b.n	80071aa <UART_SetConfig+0x346>
 80071a0:	2310      	movs	r3, #16
 80071a2:	77fb      	strb	r3, [r7, #31]
 80071a4:	e001      	b.n	80071aa <UART_SetConfig+0x346>
 80071a6:	2310      	movs	r3, #16
 80071a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b2:	d15b      	bne.n	800726c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80071b4:	7ffb      	ldrb	r3, [r7, #31]
 80071b6:	2b08      	cmp	r3, #8
 80071b8:	d827      	bhi.n	800720a <UART_SetConfig+0x3a6>
 80071ba:	a201      	add	r2, pc, #4	; (adr r2, 80071c0 <UART_SetConfig+0x35c>)
 80071bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c0:	080071e5 	.word	0x080071e5
 80071c4:	080071ed 	.word	0x080071ed
 80071c8:	080071f5 	.word	0x080071f5
 80071cc:	0800720b 	.word	0x0800720b
 80071d0:	080071fb 	.word	0x080071fb
 80071d4:	0800720b 	.word	0x0800720b
 80071d8:	0800720b 	.word	0x0800720b
 80071dc:	0800720b 	.word	0x0800720b
 80071e0:	08007203 	.word	0x08007203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071e4:	f7fe feda 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 80071e8:	61b8      	str	r0, [r7, #24]
        break;
 80071ea:	e013      	b.n	8007214 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071ec:	f7fe feea 	bl	8005fc4 <HAL_RCC_GetPCLK2Freq>
 80071f0:	61b8      	str	r0, [r7, #24]
        break;
 80071f2:	e00f      	b.n	8007214 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071f4:	4b4b      	ldr	r3, [pc, #300]	; (8007324 <UART_SetConfig+0x4c0>)
 80071f6:	61bb      	str	r3, [r7, #24]
        break;
 80071f8:	e00c      	b.n	8007214 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071fa:	f7fe fe0d 	bl	8005e18 <HAL_RCC_GetSysClockFreq>
 80071fe:	61b8      	str	r0, [r7, #24]
        break;
 8007200:	e008      	b.n	8007214 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007206:	61bb      	str	r3, [r7, #24]
        break;
 8007208:	e004      	b.n	8007214 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	77bb      	strb	r3, [r7, #30]
        break;
 8007212:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d074      	beq.n	8007304 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	005a      	lsls	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	085b      	lsrs	r3, r3, #1
 8007224:	441a      	add	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	fbb2 f3f3 	udiv	r3, r2, r3
 800722e:	b29b      	uxth	r3, r3
 8007230:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	2b0f      	cmp	r3, #15
 8007236:	d916      	bls.n	8007266 <UART_SetConfig+0x402>
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723e:	d212      	bcs.n	8007266 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f023 030f 	bic.w	r3, r3, #15
 8007248:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	085b      	lsrs	r3, r3, #1
 800724e:	b29b      	uxth	r3, r3
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	b29a      	uxth	r2, r3
 8007256:	89fb      	ldrh	r3, [r7, #14]
 8007258:	4313      	orrs	r3, r2
 800725a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	89fa      	ldrh	r2, [r7, #14]
 8007262:	60da      	str	r2, [r3, #12]
 8007264:	e04e      	b.n	8007304 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	77bb      	strb	r3, [r7, #30]
 800726a:	e04b      	b.n	8007304 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800726c:	7ffb      	ldrb	r3, [r7, #31]
 800726e:	2b08      	cmp	r3, #8
 8007270:	d827      	bhi.n	80072c2 <UART_SetConfig+0x45e>
 8007272:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <UART_SetConfig+0x414>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	0800729d 	.word	0x0800729d
 800727c:	080072a5 	.word	0x080072a5
 8007280:	080072ad 	.word	0x080072ad
 8007284:	080072c3 	.word	0x080072c3
 8007288:	080072b3 	.word	0x080072b3
 800728c:	080072c3 	.word	0x080072c3
 8007290:	080072c3 	.word	0x080072c3
 8007294:	080072c3 	.word	0x080072c3
 8007298:	080072bb 	.word	0x080072bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800729c:	f7fe fe7e 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 80072a0:	61b8      	str	r0, [r7, #24]
        break;
 80072a2:	e013      	b.n	80072cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a4:	f7fe fe8e 	bl	8005fc4 <HAL_RCC_GetPCLK2Freq>
 80072a8:	61b8      	str	r0, [r7, #24]
        break;
 80072aa:	e00f      	b.n	80072cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072ac:	4b1d      	ldr	r3, [pc, #116]	; (8007324 <UART_SetConfig+0x4c0>)
 80072ae:	61bb      	str	r3, [r7, #24]
        break;
 80072b0:	e00c      	b.n	80072cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b2:	f7fe fdb1 	bl	8005e18 <HAL_RCC_GetSysClockFreq>
 80072b6:	61b8      	str	r0, [r7, #24]
        break;
 80072b8:	e008      	b.n	80072cc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072be:	61bb      	str	r3, [r7, #24]
        break;
 80072c0:	e004      	b.n	80072cc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	77bb      	strb	r3, [r7, #30]
        break;
 80072ca:	bf00      	nop
    }

    if (pclk != 0U)
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d018      	beq.n	8007304 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	085a      	lsrs	r2, r3, #1
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	441a      	add	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	2b0f      	cmp	r3, #15
 80072ec:	d908      	bls.n	8007300 <UART_SetConfig+0x49c>
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f4:	d204      	bcs.n	8007300 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	60da      	str	r2, [r3, #12]
 80072fe:	e001      	b.n	8007304 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007310:	7fbb      	ldrb	r3, [r7, #30]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	40007c00 	.word	0x40007c00
 8007320:	40023800 	.word	0x40023800
 8007324:	00f42400 	.word	0x00f42400

08007328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00a      	beq.n	8007352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00a      	beq.n	8007396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	f003 0308 	and.w	r3, r3, #8
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	f003 0310 	and.w	r3, r3, #16
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00a      	beq.n	80073da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	f003 0320 	and.w	r3, r3, #32
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00a      	beq.n	80073fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01a      	beq.n	800743e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007426:	d10a      	bne.n	800743e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	605a      	str	r2, [r3, #4]
  }
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af02      	add	r7, sp, #8
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800747c:	f7fb fbdc 	bl	8002c38 <HAL_GetTick>
 8007480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0308 	and.w	r3, r3, #8
 800748c:	2b08      	cmp	r3, #8
 800748e:	d10e      	bne.n	80074ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f82d 	bl	80074fe <UART_WaitOnFlagUntilTimeout>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e023      	b.n	80074f6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d10e      	bne.n	80074da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f817 	bl	80074fe <UART_WaitOnFlagUntilTimeout>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e00d      	b.n	80074f6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2220      	movs	r2, #32
 80074de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	603b      	str	r3, [r7, #0]
 800750a:	4613      	mov	r3, r2
 800750c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800750e:	e05e      	b.n	80075ce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007516:	d05a      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007518:	f7fb fb8e 	bl	8002c38 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	429a      	cmp	r2, r3
 8007526:	d302      	bcc.n	800752e <UART_WaitOnFlagUntilTimeout+0x30>
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d11b      	bne.n	8007566 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800753c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0201 	bic.w	r2, r2, #1
 800754c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2220      	movs	r2, #32
 8007552:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2220      	movs	r2, #32
 8007558:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e043      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d02c      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800757e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007582:	d124      	bne.n	80075ce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800758c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800759c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0201 	bic.w	r2, r2, #1
 80075ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2220      	movs	r2, #32
 80075b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2220      	movs	r2, #32
 80075b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2220      	movs	r2, #32
 80075be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e00f      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4013      	ands	r3, r2
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	429a      	cmp	r2, r3
 80075dc:	bf0c      	ite	eq
 80075de:	2301      	moveq	r3, #1
 80075e0:	2300      	movne	r3, #0
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d091      	beq.n	8007510 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d027      	beq.n	8007662 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4b2f      	ldr	r3, [pc, #188]	; (80076d8 <FMC_SDRAM_Init+0xe0>)
 800761c:	4013      	ands	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007628:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800762e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007634:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800763a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007640:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007646:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800764c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007652:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	e032      	b.n	80076c8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800766e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007678:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800767e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	4b12      	ldr	r3, [pc, #72]	; (80076d8 <FMC_SDRAM_Init+0xe0>)
 8007690:	4013      	ands	r3, r2
 8007692:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800769c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80076a2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80076a8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80076ae:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80076b4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	ffff8000 	.word	0xffff8000

080076dc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d02e      	beq.n	8007754 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007702:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	3b01      	subs	r3, #1
 8007710:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007712:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	3b01      	subs	r3, #1
 800771a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800771c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	3b01      	subs	r3, #1
 8007724:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007726:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	3b01      	subs	r3, #1
 800772e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007730:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	3b01      	subs	r3, #1
 8007738:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800773a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	3b01      	subs	r3, #1
 8007742:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007744:	4313      	orrs	r3, r2
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4313      	orrs	r3, r2
 800774a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	609a      	str	r2, [r3, #8]
 8007752:	e039      	b.n	80077c8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4b1e      	ldr	r3, [pc, #120]	; (80077d8 <FMC_SDRAM_Timing_Init+0xfc>)
 800775e:	4013      	ands	r3, r2
 8007760:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	3b01      	subs	r3, #1
 8007768:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	3b01      	subs	r3, #1
 8007770:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007772:	4313      	orrs	r3, r2
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007786:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	3b01      	subs	r3, #1
 8007794:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007796:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	3b01      	subs	r3, #1
 800779e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80077a0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	3b01      	subs	r3, #1
 80077a8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80077aa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80077b4:	4313      	orrs	r3, r2
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	ff0f0fff 	.word	0xff0f0fff

080077dc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	4b0c      	ldr	r3, [pc, #48]	; (8007820 <FMC_SDRAM_SendCommand+0x44>)
 80077ee:	4013      	ands	r3, r2
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	6811      	ldr	r1, [r2, #0]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	6852      	ldr	r2, [r2, #4]
 80077f8:	4311      	orrs	r1, r2
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	6892      	ldr	r2, [r2, #8]
 80077fe:	3a01      	subs	r2, #1
 8007800:	0152      	lsls	r2, r2, #5
 8007802:	4311      	orrs	r1, r2
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	68d2      	ldr	r2, [r2, #12]
 8007808:	0252      	lsls	r2, r2, #9
 800780a:	430a      	orrs	r2, r1
 800780c:	431a      	orrs	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	ffc00000 	.word	0xffc00000

08007824 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	695a      	ldr	r2, [r3, #20]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	431a      	orrs	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <_ZN10QAD_FT62068imp_initEP7QAD_I2C>:
	//---------------------------------
	//QAD_FT6206 Initialization Methods

//QAD_FT6206::imp_init
//QAD_FT6206 Initialization Method
QA_Result QAD_FT6206::imp_init(QAD_I2C* cI2C) {
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	6039      	str	r1, [r7, #0]

	//Store Handle to I2C Driver
	if (!cI2C)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <_ZN10QAD_FT62068imp_initEP7QAD_I2C+0x14>
		return QA_Fail;
 800785a:	2301      	movs	r3, #1
 800785c:	e016      	b.n	800788c <_ZN10QAD_FT62068imp_initEP7QAD_I2C+0x42>

	m_cI2C = cI2C;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	611a      	str	r2, [r3, #16]

	//Initialize FT6206 device
	if (imp_confirmAddress())
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f815 	bl	8007894 <_ZN10QAD_FT620618imp_confirmAddressEv>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	bf14      	ite	ne
 8007870:	2301      	movne	r3, #1
 8007872:	2300      	moveq	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <_ZN10QAD_FT62068imp_initEP7QAD_I2C+0x34>
		return QA_Fail;
 800787a:	2301      	movs	r3, #1
 800787c:	e006      	b.n	800788c <_ZN10QAD_FT62068imp_initEP7QAD_I2C+0x42>

	//Clear Data
	imp_clearData();
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f841 	bl	8007906 <_ZN10QAD_FT620613imp_clearDataEv>

	//Set Driver States
	m_eInitState = QA_Initialized;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	751a      	strb	r2, [r3, #20]

	//Return
	return QA_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <_ZN10QAD_FT620618imp_confirmAddressEv>:
	//-----------------------
	//QAD_FT6206 Tool Methods

//QAD_FT6206::imp_confirmAddress
//QAD_FT6206 Tool Method
QA_Result QAD_FT6206::imp_confirmAddress(void) {
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	uint8_t uResA = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
	uint8_t uResB = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73bb      	strb	r3, [r7, #14]
	m_cI2C->read8Bit(m_uAddrA, m_uReg_ID, &uResA);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6918      	ldr	r0, [r3, #16]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	b299      	uxth	r1, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	789a      	ldrb	r2, [r3, #2]
 80078b2:	f107 030f 	add.w	r3, r7, #15
 80078b6:	f000 fbc5 	bl	8008044 <_ZN7QAD_I2C8read8BitEthPh>
	m_cI2C->read8Bit(m_uAddrB, m_uReg_ID, &uResB);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6918      	ldr	r0, [r3, #16]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	785b      	ldrb	r3, [r3, #1]
 80078c2:	b299      	uxth	r1, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	789a      	ldrb	r2, [r3, #2]
 80078c8:	f107 030e 	add.w	r3, r7, #14
 80078cc:	f000 fbba 	bl	8008044 <_ZN7QAD_I2C8read8BitEthPh>

	if (uResA == m_uID) {
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	79da      	ldrb	r2, [r3, #7]
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d104      	bne.n	80078e4 <_ZN10QAD_FT620618imp_confirmAddressEv+0x50>
		m_uAddr = m_uAddrA;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	781a      	ldrb	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	755a      	strb	r2, [r3, #21]
 80078e2:	e00b      	b.n	80078fc <_ZN10QAD_FT620618imp_confirmAddressEv+0x68>
	} else if (uResB == m_uID) {
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	79da      	ldrb	r2, [r3, #7]
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d104      	bne.n	80078f8 <_ZN10QAD_FT620618imp_confirmAddressEv+0x64>
		m_uAddr = m_uAddrB;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	785a      	ldrb	r2, [r3, #1]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	755a      	strb	r2, [r3, #21]
 80078f6:	e001      	b.n	80078fc <_ZN10QAD_FT620618imp_confirmAddressEv+0x68>
	} else {
		return QA_Fail;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e000      	b.n	80078fe <_ZN10QAD_FT620618imp_confirmAddressEv+0x6a>
	}

	return QA_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <_ZN10QAD_FT620613imp_clearDataEv>:


//QAD_FT6206::imp_clearData
//QAD_FT6206 Tool Method
void QAD_FT6206::imp_clearData(void) {
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  m_uData_CurDown     = false;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	759a      	strb	r2, [r3, #22]
  m_uData_LastDown    = false;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	75da      	strb	r2, [r3, #23]
  m_uData_Event       = false;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	761a      	strb	r2, [r3, #24]
  m_uData_New         = false;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	765a      	strb	r2, [r3, #25]
  m_uData_End         = false;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	769a      	strb	r2, [r3, #26]
  m_uData_Long        = false;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	76da      	strb	r2, [r3, #27]
  m_uData_Long_Pulse  = 0;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	771a      	strb	r2, [r3, #28]
  m_uData_Long_Count  = 0;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	621a      	str	r2, [r3, #32]

  m_uData_CurX        = 0;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	849a      	strh	r2, [r3, #36]	; 0x24
  m_uData_CurY        = 0;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	84da      	strh	r2, [r3, #38]	; 0x26
  m_uData_LastX       = 0;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	851a      	strh	r2, [r3, #40]	; 0x28
  m_uData_LastY       = 0;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	855a      	strh	r2, [r3, #42]	; 0x2a
  m_iData_MoveX       = 0;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	859a      	strh	r2, [r3, #44]	; 0x2c
  m_iData_MoveY       = 0;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	85da      	strh	r2, [r3, #46]	; 0x2e
  m_uData_StartX      = 0;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	861a      	strh	r2, [r3, #48]	; 0x30
  m_uData_StartY      = 0;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	865a      	strh	r2, [r3, #50]	; 0x32
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <_ZN7QAD_FMC8imp_initEv>:
//QAD_FMC Initialization Method
//
//To be called from static method init()
//Used to initialize the required GPIOs, FMC driver and SDRAM module
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAD_FMC::imp_init() {
 800797c:	b580      	push	{r7, lr}
 800797e:	b094      	sub	sp, #80	; 0x50
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]

	//Return if FMC driver is already initialized
	if (m_eState)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <_ZN7QAD_FMC8imp_initEv+0x16>
		return QA_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	e0fc      	b.n	8007b8c <_ZN7QAD_FMC8imp_initEv+0x210>


	//----------------
	//Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 8007992:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	605a      	str	r2, [r3, #4]
 800799c:	609a      	str	r2, [r3, #8]
 800799e:	60da      	str	r2, [r3, #12]
 80079a0:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set pins as alternate function in push-pull mode
 80079a2:	2302      	movs	r3, #2
 80079a4:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistors on pins
 80079a6:	2301      	movs	r3, #1
 80079a8:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set pin speed to very high
 80079aa:	2303      	movs	r3, #3
 80079ac:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_Init.Alternate = GPIO_AF12_FMC;              //Set alternate function to suit use with FMC peripheral
 80079ae:	230c      	movs	r3, #12
 80079b0:	64fb      	str	r3, [r7, #76]	; 0x4c

	  //Initialize required pins from GPIO port D
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 80079b2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80079b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_Init);
 80079b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80079bc:	4619      	mov	r1, r3
 80079be:	4875      	ldr	r0, [pc, #468]	; (8007b94 <_ZN7QAD_FMC8imp_initEv+0x218>)
 80079c0:	f7fb ffca 	bl	8003958 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port E
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80079c4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80079c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 80079ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80079ce:	4619      	mov	r1, r3
 80079d0:	4871      	ldr	r0, [pc, #452]	; (8007b98 <_ZN7QAD_FMC8imp_initEv+0x21c>)
 80079d2:	f7fb ffc1 	bl	8003958 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port F
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80079d6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80079da:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_Init);
 80079dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80079e0:	4619      	mov	r1, r3
 80079e2:	486e      	ldr	r0, [pc, #440]	; (8007b9c <_ZN7QAD_FMC8imp_initEv+0x220>)
 80079e4:	f7fb ffb8 	bl	8003958 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port G
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 80079e8:	f248 1337 	movw	r3, #33079	; 0x8137
 80079ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_Init);
 80079ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80079f2:	4619      	mov	r1, r3
 80079f4:	486a      	ldr	r0, [pc, #424]	; (8007ba0 <_ZN7QAD_FMC8imp_initEv+0x224>)
 80079f6:	f7fb ffaf 	bl	8003958 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port H
	GPIO_Init.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80079fa:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80079fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_Init);
 8007a00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a04:	4619      	mov	r1, r3
 8007a06:	4867      	ldr	r0, [pc, #412]	; (8007ba4 <_ZN7QAD_FMC8imp_initEv+0x228>)
 8007a08:	f7fb ffa6 	bl	8003958 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port I
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
 8007a0c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8007a10:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8007a12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a16:	4619      	mov	r1, r3
 8007a18:	4863      	ldr	r0, [pc, #396]	; (8007ba8 <_ZN7QAD_FMC8imp_initEv+0x22c>)
 8007a1a:	f7fb ff9d 	bl	8003958 <HAL_GPIO_Init>

	//-------------------------
	//Initialize FMC Peripheral

	//Initialize FMC Clock
	__HAL_RCC_FMC_CLK_ENABLE();
 8007a1e:	4b63      	ldr	r3, [pc, #396]	; (8007bac <_ZN7QAD_FMC8imp_initEv+0x230>)
 8007a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a22:	4a62      	ldr	r2, [pc, #392]	; (8007bac <_ZN7QAD_FMC8imp_initEv+0x230>)
 8007a24:	f043 0301 	orr.w	r3, r3, #1
 8007a28:	6393      	str	r3, [r2, #56]	; 0x38
 8007a2a:	4b60      	ldr	r3, [pc, #384]	; (8007bac <_ZN7QAD_FMC8imp_initEv+0x230>)
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	68fb      	ldr	r3, [r7, #12]

	//Fill FMC initialization details into Handle structure
	//NOTE: The settings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	m_sHandle.Instance                = FMC_SDRAM_DEVICE;                     //Set FMC SDRAM Device as required instance
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a5d      	ldr	r2, [pc, #372]	; (8007bb0 <_ZN7QAD_FMC8imp_initEv+0x234>)
 8007a3a:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.SDBank             = FMC_SDRAM_BANK1;                      //Set SDRAM as being connected to FMCs SDRAM bank 1
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	639a      	str	r2, [r3, #56]	; 0x38
	m_sHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;          //Set size of column address to 8 bits
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	63da      	str	r2, [r3, #60]	; 0x3c
	m_sHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;            //Set size of row address to 12 bits
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	641a      	str	r2, [r3, #64]	; 0x40
	m_sHandle.Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;           //Set data bus width to 32 bits
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	645a      	str	r2, [r3, #68]	; 0x44
	m_sHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;         //Set number of SDRAM module internal banks to 4
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2240      	movs	r2, #64	; 0x40
 8007a58:	649a      	str	r2, [r3, #72]	; 0x48
	m_sHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;              //Set column address strobe (CAS) latency to 3 cycles
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8007a60:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;   //Disable write protection, as we want to be able to both read and write to SDRAM
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	651a      	str	r2, [r3, #80]	; 0x50
	m_sHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;             //Set SDRAM clock period to 2 clock cycles
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a6e:	655a      	str	r2, [r3, #84]	; 0x54
	m_sHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;              //Enable read burst
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a76:	659a      	str	r2, [r3, #88]	; 0x58
	m_sHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;              //Set read pipe delay to 0 clock cycles
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	65da      	str	r2, [r3, #92]	; 0x5c

	//Fill SDRAM timing details into timing structure
	//NOTE: The timings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	FMC_SDRAM_TimingTypeDef SDRAM_Timing = {0};
 8007a7e:	f107 0320 	add.w	r3, r7, #32
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	605a      	str	r2, [r3, #4]
 8007a88:	609a      	str	r2, [r3, #8]
 8007a8a:	60da      	str	r2, [r3, #12]
 8007a8c:	611a      	str	r2, [r3, #16]
 8007a8e:	615a      	str	r2, [r3, #20]
 8007a90:	619a      	str	r2, [r3, #24]
	SDRAM_Timing.LoadToActiveDelay    = 2;  //Set delay between a Load Mode Register command and an Active or Refresh command to 2 clock cycles
 8007a92:	2302      	movs	r3, #2
 8007a94:	623b      	str	r3, [r7, #32]
	SDRAM_Timing.ExitSelfRefreshDelay = 7;  //Set delay between releasing Self Refresh command and issuing of Active command to 7 clock cycles
 8007a96:	2307      	movs	r3, #7
 8007a98:	627b      	str	r3, [r7, #36]	; 0x24
	SDRAM_Timing.SelfRefreshTime      = 4;  //Set minimum Self Refresh period to 4 clock cycles
 8007a9a:	2304      	movs	r3, #4
 8007a9c:	62bb      	str	r3, [r7, #40]	; 0x28
	SDRAM_Timing.RowCycleDelay        = 7;  //Set delay between Refresh command and Activate command, or between consecutive Refresh commands to 7 clock cycles
 8007a9e:	2307      	movs	r3, #7
 8007aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SDRAM_Timing.WriteRecoveryTime    = 2;  //Set Write Recovery Time to 2 clock cycles
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	633b      	str	r3, [r7, #48]	; 0x30
	SDRAM_Timing.RPDelay              = 2;  //Set delay between a Precharge command and any other command to 2 clock cycles
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	637b      	str	r3, [r7, #52]	; 0x34
	SDRAM_Timing.RCDDelay             = 2;  //Set delay between an Activate command and a Read/Write command to 2 clock cycles
 8007aaa:	2302      	movs	r3, #2
 8007aac:	63bb      	str	r3, [r7, #56]	; 0x38

	//Initialize the FMC peripheral using the required settings and timings to suit the specific SDRAM module
	if (HAL_SDRAM_Init(&m_sHandle, &SDRAM_Timing) != HAL_OK) {
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3334      	adds	r3, #52	; 0x34
 8007ab2:	f107 0220 	add.w	r2, r7, #32
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff f8af 	bl	8006c1c <HAL_SDRAM_Init>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	bf14      	ite	ne
 8007ac4:	2301      	movne	r3, #1
 8007ac6:	2300      	moveq	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <_ZN7QAD_FMC8imp_initEv+0x156>
		return QA_Fail;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e05c      	b.n	8007b8c <_ZN7QAD_FMC8imp_initEv+0x210>
	}

  //-------------------
	//Initialize SDRAM IC

	FMC_SDRAM_CommandTypeDef  SDRAM_Cmd = {0};
 8007ad2:	f107 0310 	add.w	r3, r7, #16
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	605a      	str	r2, [r3, #4]
 8007adc:	609a      	str	r2, [r3, #8]
 8007ade:	60da      	str	r2, [r3, #12]

		//Send command to SDRAM module to enable its clock
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;   //Set to Clock Enable Command
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007ae4:	2310      	movs	r3, #16
 8007ae6:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8007af0:	f107 0310 	add.w	r3, r7, #16
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f890 	bl	8007c1c <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Delay for 1ms to allow time for SDRAM clock to enable
	HAL_Delay(1);
 8007afc:	2001      	movs	r0, #1
 8007afe:	f7fb f8a7 	bl	8002c50 <HAL_Delay>

		//Send command to SDRAM module to precharge all banks
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_PALL;  //Set to Precharge All command
 8007b02:	2302      	movs	r3, #2
 8007b04:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007b06:	2310      	movs	r3, #16
 8007b08:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8007b12:	f107 0310 	add.w	r3, r7, #16
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f87f 	bl	8007c1c <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Send command to SDRAM module to Configure Auto Refresh
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; //Set to Auto Refresh Mode command
 8007b1e:	2303      	movs	r3, #3
 8007b20:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007b22:	2310      	movs	r3, #16
 8007b24:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 8;                              //Set number of consecutive auto refresh commands to 8
 8007b26:	2308      	movs	r3, #8
 8007b28:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8007b2e:	f107 0310 	add.w	r3, r7, #16
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f871 	bl	8007c1c <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Program Mode Register
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;        //Set to Load Mode Register command
 8007b3a:	2304      	movs	r3, #4
 8007b3c:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007b3e:	2310      	movs	r3, #16
 8007b40:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 8007b42:	2301      	movs	r3, #1
 8007b44:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681a      	ldr	r2, [r3, #0]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8007b4e:	431a      	orrs	r2, r3
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	69db      	ldr	r3, [r3, #28]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 8007b54:	431a      	orrs	r2, r3
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 8007b5a:	431a      	orrs	r2, r3
																		 m_uModeReg_WriteBurst_Single;   //Set write burst length to 1 32bit word
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 8007b60:	4313      	orrs	r3, r2
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8007b62:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8007b64:	f107 0310 	add.w	r3, r7, #16
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f856 	bl	8007c1c <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>


	//---------------------------------
	//Program SDRAM module refresh rate
	HAL_SDRAM_ProgramRefreshRate(&m_sHandle, m_uRefresh);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	f7ff f8b6 	bl	8006cee <HAL_SDRAM_ProgramRefreshRate>

	//Set Driver State
	m_eState = QA_Initialized; //Set driver as being initializeed
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	//Return
	return QA_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3750      	adds	r7, #80	; 0x50
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40020c00 	.word	0x40020c00
 8007b98:	40021000 	.word	0x40021000
 8007b9c:	40021400 	.word	0x40021400
 8007ba0:	40021800 	.word	0x40021800
 8007ba4:	40021c00 	.word	0x40021c00
 8007ba8:	40022000 	.word	0x40022000
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	a0000140 	.word	0xa0000140

08007bb4 <_ZN7QAD_FMC8imp_testEv>:
//QAD_FMC::imp_test
//QAD_FMC Test Method
//
//Used to perform read and write test of full 16 megabytes of SDRAM
//Returns QA_OK if test passes, or QA_Fail if test is not successful
QA_Result QAD_FMC::imp_test(void) {
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]

	//Write values to whole 16 megabytes of SDRAM
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bc6:	d209      	bcs.n	8007bdc <_ZN7QAD_FMC8imp_testEv+0x28>
		QAD_FMC_Data->words[i] = i;
 8007bc8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	e7f1      	b.n	8007bc0 <_ZN7QAD_FMC8imp_testEv+0xc>
	}

	//Read values from while 16 megabytes of SDRAM, and confirm that they match the values that were written to it
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60bb      	str	r3, [r7, #8]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007be6:	d212      	bcs.n	8007c0e <_ZN7QAD_FMC8imp_testEv+0x5a>

		//If data read doesn't match data written then return QA_Fail
		if (QAD_FMC_Data->words[i] != i)
 8007be8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	bf14      	ite	ne
 8007bf8:	2301      	movne	r3, #1
 8007bfa:	2300      	moveq	r3, #0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <_ZN7QAD_FMC8imp_testEv+0x52>
			return QA_Fail;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e004      	b.n	8007c10 <_ZN7QAD_FMC8imp_testEv+0x5c>
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	60bb      	str	r3, [r7, #8]
 8007c0c:	e7e8      	b.n	8007be0 <_ZN7QAD_FMC8imp_testEv+0x2c>
	}

	//Return QA_OK as if we reach this point then the test has passed
	return QA_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>:
//QAD_FMC::cmd
//QAD_FMC Initialization Method
//
//Used to send commands to SDRAM module
//pCmd - FMC_SDRAM_CommandTypeDef containing details of command to be sent to SDRAM module
void QAD_FMC::cmd(FMC_SDRAM_CommandTypeDef& pCmd) {
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
	HAL_SDRAM_SendCommand(&m_sHandle, &pCmd, m_uTimeout);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	461a      	mov	r2, r3
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	f7ff f830 	bl	8006c98 <HAL_SDRAM_SendCommand>
}
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	88fa      	ldrh	r2, [r7, #6]
 8007c58:	809a      	strh	r2, [r3, #4]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	719a      	strb	r2, [r3, #6]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	609a      	str	r2, [r3, #8]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	60da      	str	r2, [r3, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 f841 	bl	8007cfa <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6818      	ldr	r0, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	889b      	ldrh	r3, [r3, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	4619      	mov	r1, r3
 8007c96:	f7fc f917 	bl	8003ec8 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	741a      	strb	r2, [r3, #16]
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6818      	ldr	r0, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	889b      	ldrh	r3, [r3, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4619      	mov	r1, r3
 8007cbc:	f7fc f904 	bl	8003ec8 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	741a      	strb	r2, [r3, #16]
}
 8007cc6:	bf00      	nop
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b082      	sub	sp, #8
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	7c1b      	ldrb	r3, [r3, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d107      	bne.n	8007cf2 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7ff ffe0 	bl	8007ca8 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8007ce8:	e003      	b.n	8007cf2 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff ffc9 	bl	8007c82 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8007cf0:	bf00      	nop
	}
}
 8007cf2:	bf00      	nop
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b088      	sub	sp, #32
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8007d02:	f107 030c 	add.w	r3, r7, #12
 8007d06:	2200      	movs	r2, #0
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	605a      	str	r2, [r3, #4]
 8007d0c:	609a      	str	r2, [r3, #8]
 8007d0e:	60da      	str	r2, [r3, #12]
 8007d10:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	889b      	ldrh	r3, [r3, #4]
 8007d16:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	799b      	ldrb	r3, [r3, #6]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8007d20:	2311      	movs	r3, #17
 8007d22:	e000      	b.n	8007d26 <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8007d24:	2301      	movs	r3, #1
 8007d26:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f107 020c 	add.w	r2, r7, #12
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fb fe0a 	bl	8003958 <HAL_GPIO_Init>
}
 8007d44:	bf00      	nop
 8007d46:	3720      	adds	r7, #32
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Input Constructor
//
//This method will initialize the required GPIO pin with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Input::QAD_GPIO_Input(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	4613      	mov	r3, r2
 8007d58:	80fb      	strh	r3, [r7, #6]
		m_pGPIO(pGPIO),
		m_uPin(uPin),
		m_ePullMode(QAD_GPIO_PullMode_NoPull) {
 8007d5a:	4a0a      	ldr	r2, [pc, #40]	; (8007d84 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft+0x38>)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	605a      	str	r2, [r3, #4]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	88fa      	ldrh	r2, [r7, #6]
 8007d6a:	811a      	strh	r2, [r3, #8]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	60da      	str	r2, [r3, #12]

	//Initialize the GPIO pin
	periphInit();
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f817 	bl	8007da6 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	0800cec8 	.word	0x0800cec8

08007d88 <_ZN14QAD_GPIO_Input11setPullModeE17QAD_GPIO_PullMode>:
//QAD_GPIO_Input::setPullMode
//QAD_GPIO_Input Control Method
//
//Sets new pull mode (Pull-up, Pull-down or No-pull)
//ePull - New pull mode. Member of QAD_GPIO_PullMode as defined in QAD_GPIO.hpp
void QAD_GPIO_Input::setPullMode(QAD_GPIO_PullMode ePull) {
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]

	//Store new Pull mode setting
	m_ePullMode = ePull;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	60da      	str	r2, [r3, #12]

	//Reinitialize peripheral with new Pull mode
	periphInit();
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f804 	bl	8007da6 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <_ZN14QAD_GPIO_Input10periphInitEv>:
//QAD_GPIO_Input::periphInit
//QAD_GPIO_Input Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Input::periphInit(void) {
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b088      	sub	sp, #32
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_Init = {0};
 8007dae:	f107 030c 	add.w	r3, r7, #12
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	605a      	str	r2, [r3, #4]
 8007db8:	609a      	str	r2, [r3, #8]
 8007dba:	60da      	str	r2, [r3, #12]
 8007dbc:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	891b      	ldrh	r3, [r3, #8]
 8007dc2:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = GPIO_MODE_INPUT;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f107 020c 	add.w	r2, r7, #12
 8007dda:	4611      	mov	r1, r2
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fb fdbb 	bl	8003958 <HAL_GPIO_Init>
}
 8007de2:	bf00      	nop
 8007de4:	3720      	adds	r7, #32
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <_ZN10QAD_I2CMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_I2CMgr& get(void) {
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
		static QAD_I2CMgr instance;
 8007df0:	4b10      	ldr	r3, [pc, #64]	; (8007e34 <_ZN10QAD_I2CMgr3getEv+0x48>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	f3bf 8f5b 	dmb	ish
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	bf0c      	ite	eq
 8007e02:	2301      	moveq	r3, #1
 8007e04:	2300      	movne	r3, #0
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d010      	beq.n	8007e2e <_ZN10QAD_I2CMgr3getEv+0x42>
 8007e0c:	4809      	ldr	r0, [pc, #36]	; (8007e34 <_ZN10QAD_I2CMgr3getEv+0x48>)
 8007e0e:	f004 f852 	bl	800beb6 <__cxa_guard_acquire>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bf14      	ite	ne
 8007e18:	2301      	movne	r3, #1
 8007e1a:	2300      	moveq	r3, #0
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d005      	beq.n	8007e2e <_ZN10QAD_I2CMgr3getEv+0x42>
 8007e22:	4805      	ldr	r0, [pc, #20]	; (8007e38 <_ZN10QAD_I2CMgr3getEv+0x4c>)
 8007e24:	f002 f912 	bl	800a04c <_ZN10QAD_I2CMgrC1Ev>
 8007e28:	4802      	ldr	r0, [pc, #8]	; (8007e34 <_ZN10QAD_I2CMgr3getEv+0x48>)
 8007e2a:	f004 f850 	bl	800bece <__cxa_guard_release>
		return instance;
 8007e2e:	4b02      	ldr	r3, [pc, #8]	; (8007e38 <_ZN10QAD_I2CMgr3getEv+0x4c>)
	}
 8007e30:	4618      	mov	r0, r3
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20000280 	.word	0x20000280
 8007e38:	20000250 	.word	0x20000250

08007e3c <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_I2C_PeriphState enum) of a I2C peripheral
	//eI2C - The I2C peripheral to retrieve the state for. Member of QAD_I2C_Periph
	//Returns a member of QAD_I2C_State enum (QAD_I2C_Unused, etc)
	static QAD_I2C_State getState(QAD_I2C_Periph eI2C) {
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d901      	bls.n	8007e50 <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph+0x14>
			return QAD_I2C_InvalidDevice;
 8007e4c:	2304      	movs	r3, #4
 8007e4e:	e00a      	b.n	8007e66 <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph+0x2a>

		return get().m_sI2Cs[eI2C].eState;
 8007e50:	f7ff ffcc 	bl	8007dec <_ZN10QAD_I2CMgr3getEv>
 8007e54:	4601      	mov	r1, r0
 8007e56:	79fa      	ldrb	r2, [r7, #7]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	4413      	add	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	440b      	add	r3, r1
 8007e62:	3301      	adds	r3, #1
 8007e64:	781b      	ldrb	r3, [r3, #0]
	}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph>:


	//Used to retrieve an instance for an I2C peripheral
	//eI2C - The I2C peripheral to retrieve the instance for. Member of QAD_I2C_Periph
	//Returns I2C_TypeDef, as defined in stm32f769xx.h
	static I2C_TypeDef* getInstance(QAD_I2C_Periph eI2C) {
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b082      	sub	sp, #8
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	4603      	mov	r3, r0
 8007e76:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d901      	bls.n	8007e82 <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph+0x14>
			return NULL;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e00a      	b.n	8007e98 <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph+0x2a>

		return get().m_sI2Cs[eI2C].pInstance;
 8007e82:	f7ff ffb3 	bl	8007dec <_ZN10QAD_I2CMgr3getEv>
 8007e86:	4601      	mov	r1, r0
 8007e88:	79fa      	ldrb	r2, [r7, #7]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	440b      	add	r3, r1
 8007e94:	3304      	adds	r3, #4
 8007e96:	681b      	ldr	r3, [r3, #0]
	}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>:


	//Used to retrieve an Event IRQ Enum for an I2C peripheral
	//eI2C - The I2C peripheral to retrieve the IRQ enum for. Member of QAD_I2C_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQEvent(QAD_I2C_Periph eI2C) {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d902      	bls.n	8007eb6 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph+0x16>
			return UsageFault_IRQn;
 8007eb0:	f06f 0309 	mvn.w	r3, #9
 8007eb4:	e00b      	b.n	8007ece <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph+0x2e>

		return get().m_sI2Cs[eI2C].eIRQ_Event;
 8007eb6:	f7ff ff99 	bl	8007dec <_ZN10QAD_I2CMgr3getEv>
 8007eba:	4601      	mov	r1, r0
 8007ebc:	79fa      	ldrb	r2, [r7, #7]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	440b      	add	r3, r1
 8007ec8:	3308      	adds	r3, #8
 8007eca:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>:


	//Used to retrieve an Error IRQ Enum for an I2C peripheral
	//eI2C - The I2C peripheral to retrieve the IRQ enum for. Member of QAD_I2C_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQError(QAD_I2C_Periph eI2C) {
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b082      	sub	sp, #8
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	4603      	mov	r3, r0
 8007ede:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 8007ee0:	79fb      	ldrb	r3, [r7, #7]
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d902      	bls.n	8007eec <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph+0x16>
			return UsageFault_IRQn;
 8007ee6:	f06f 0309 	mvn.w	r3, #9
 8007eea:	e00b      	b.n	8007f04 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph+0x2e>

		return get().m_sI2Cs[eI2C].eIRQ_Error;
 8007eec:	f7ff ff7e 	bl	8007dec <_ZN10QAD_I2CMgr3getEv>
 8007ef0:	4601      	mov	r1, r0
 8007ef2:	79fa      	ldrb	r2, [r7, #7]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	440b      	add	r3, r1
 8007efe:	3309      	adds	r3, #9
 8007f00:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <_ZN10QAD_I2CMgr11registerI2CE14QAD_I2C_Periph13QAD_I2C_State>:
	//Management Methods

	//Used to register an I2C peripheral as being used by a driver
	//eI2C - the I2C peripheral to be registered
	//Returns QA_OK if successful, or returns QA_Error_PeriphBusy if the selected I2C is already in use
	static QA_Result registerI2C(QAD_I2C_Periph eI2C, QAD_I2C_State eMode) {
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4603      	mov	r3, r0
 8007f14:	460a      	mov	r2, r1
 8007f16:	71fb      	strb	r3, [r7, #7]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	71bb      	strb	r3, [r7, #6]
		return get().imp_registerI2C(eI2C, eMode);
 8007f1c:	f7ff ff66 	bl	8007dec <_ZN10QAD_I2CMgr3getEv>
 8007f20:	79ba      	ldrb	r2, [r7, #6]
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	4619      	mov	r1, r3
 8007f26:	f002 f8ed 	bl	800a104 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State>
 8007f2a:	4603      	mov	r3, r0
	}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <_ZN10QAD_I2CMgr13deregisterI2CE14QAD_I2C_Periph>:


	//Used to deregister an I2C to mark it as no longer being used by a driver
	//eI2C - the I2C Peripheral to be deregistered
	static void deregisterI2C(QAD_I2C_Periph eI2C) {
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterI2C(eI2C);
 8007f3e:	f7ff ff55 	bl	8007dec <_ZN10QAD_I2CMgr3getEv>
 8007f42:	4602      	mov	r2, r0
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	4619      	mov	r1, r3
 8007f48:	4610      	mov	r0, r2
 8007f4a:	f002 f906 	bl	800a15a <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph>
	}
 8007f4e:	bf00      	nop
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <_ZN10QAD_I2CMgr11enableClockE14QAD_I2C_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific I2C peripheral
	//eI2C - the I2C peripheral to enable the clock for
	static void enableClock(QAD_I2C_Periph eI2C) {
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eI2C);
 8007f60:	f7ff ff44 	bl	8007dec <_ZN10QAD_I2CMgr3getEv>
 8007f64:	4602      	mov	r2, r0
 8007f66:	79fb      	ldrb	r3, [r7, #7]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	f002 f910 	bl	800a190 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph>
	}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <_ZN10QAD_I2CMgr12disableClockE14QAD_I2C_Periph>:

	//Used to disable the clock for a specific I2C peripheral
	//eI2C - the I2C peripheral to disable the clock for
	static void disableClock(QAD_I2C_Periph eI2C) {
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eI2C);
 8007f82:	f7ff ff33 	bl	8007dec <_ZN10QAD_I2CMgr3getEv>
 8007f86:	4602      	mov	r2, r0
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	f002 f983 	bl	800a298 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph>
	}
 8007f92:	bf00      	nop
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <_ZN7QAD_I2C4initEv>:
//QAD_I2C::init
//QAD_I2C Initialization Method
//
//Used to initialize the I2C driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result aas defined in setup.hpp)
QA_Result QAD_I2C::init(void) {
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]

	//Check if selected I2C peripheral is currently available
  if (QAD_I2CMgr::getState(m_eI2C))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	799b      	ldrb	r3, [r3, #6]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7ff ff48 	bl	8007e3c <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bf14      	ite	ne
 8007fb2:	2301      	movne	r3, #1
 8007fb4:	2300      	moveq	r3, #0
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <_ZN7QAD_I2C4initEv+0x26>
  	return QA_Error_PeriphBusy;
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	e013      	b.n	8007fe8 <_ZN7QAD_I2C4initEv+0x4e>

  //Register I2C peripheral as now being in use
  QAD_I2CMgr::registerI2C(m_eI2C, QAD_I2C_InUse_Master);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	799b      	ldrb	r3, [r3, #6]
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff ffa0 	bl	8007f0c <_ZN10QAD_I2CMgr11registerI2CE14QAD_I2C_Periph13QAD_I2C_State>

  //Initialize I2C peripheral
  QA_Result eRes = periphInit();
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f855 	bl	800807c <_ZN7QAD_I2C10periphInitEv>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister I2C peripheral
  if (eRes)
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d004      	beq.n	8007fe6 <_ZN7QAD_I2C4initEv+0x4c>
  	QAD_I2CMgr::deregisterI2C(m_eI2C);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	799b      	ldrb	r3, [r3, #6]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff ffa7 	bl	8007f34 <_ZN10QAD_I2CMgr13deregisterI2CE14QAD_I2C_Periph>

  //Return initialization result
  return eRes;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <_ZN7QAD_I2C5startEv>:

//QAD_I2C::start
//QAD_I2C Control Method
//
//Used to enable the I2C driver
void QAD_I2C::start(void) {
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  __HAL_I2C_ENABLE(&m_sHandle);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	f042 0201 	orr.w	r2, r2, #1
 8008006:	601a      	str	r2, [r3, #0]
  m_eState = QA_Active;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	715a      	strb	r2, [r3, #5]
}
 800800e:	bf00      	nop
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <_ZN7QAD_I2C4stopEv>:

//QAD_I2C::stop
//QAD_I2C Control Method
//
//Used to disable the I2C driver
void QAD_I2C::stop(void) {
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  __HAL_I2C_DISABLE(&m_sHandle);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802c:	f022 0201 	bic.w	r2, r2, #1
 8008030:	601a      	str	r2, [r3, #0]
  m_eState = QA_Inactive;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	715a      	strb	r2, [r3, #5]
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <_ZN7QAD_I2C8read8BitEthPh>:
//Used to read a value from an I2C device connected to the bus, using an 8bit register address and 8bit data
//uAddr  - The address of the I2C device to read from
//uReg   - The register address to access on the I2C device that is being read from
//pValue - A pointer to a uint8_t where the read data will be stored
//Returns QA_OK if successful, or QA_Fail if unable to perform read
QA_Result QAD_I2C::read8Bit(uint16_t uAddr, uint8_t uReg, uint8_t* pValue) {
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af02      	add	r7, sp, #8
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	607b      	str	r3, [r7, #4]
 800804e:	460b      	mov	r3, r1
 8008050:	817b      	strh	r3, [r7, #10]
 8008052:	4613      	mov	r3, r2
 8008054:	727b      	strb	r3, [r7, #9]
  return read(uAddr, (uint16_t)uReg, m_uMemAddrSize8Bit, pValue, 1);
 8008056:	7a7b      	ldrb	r3, [r7, #9]
 8008058:	b29a      	uxth	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	789b      	ldrb	r3, [r3, #2]
 800805e:	b298      	uxth	r0, r3
 8008060:	8979      	ldrh	r1, [r7, #10]
 8008062:	2301      	movs	r3, #1
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	4603      	mov	r3, r0
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 f8f2 	bl	8008256 <_ZN7QAD_I2C4readEtttPht>
 8008072:	4603      	mov	r3, r0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <_ZN7QAD_I2C10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the I2C peripheral itself as well as setting interrupt priorities and enabling the interrupts
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_I2C::periphInit(void) {
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init = {0};
 8008084:	f107 030c 	add.w	r3, r7, #12
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	605a      	str	r2, [r3, #4]
 800808e:	609a      	str	r2, [r3, #8]
 8008090:	60da      	str	r2, [r3, #12]
 8008092:	611a      	str	r2, [r3, #16]

  //Init SCK GPIO Pin
  GPIO_Init.Pin       = m_uSCL_Pin;                //Set pin number
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008098:	60fb      	str	r3, [r7, #12]
  GPIO_Init.Mode      = GPIO_MODE_AF_OD;           //Set clock pin as alternate function in open-drain mode
 800809a:	2312      	movs	r3, #18
 800809c:	613b      	str	r3, [r7, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;               //Enable pull-up resistor on pin
 800809e:	2301      	movs	r3, #1
 80080a0:	617b      	str	r3, [r7, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH; //Set GPIO pin speed
 80080a2:	2303      	movs	r3, #3
 80080a4:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Alternate = m_uSCL_AF;                 //Set alternate function to suit required I2C peripheral
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80080ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(m_pSCL_GPIO, &GPIO_Init);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	f107 020c 	add.w	r2, r7, #12
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fb fc4d 	bl	8003958 <HAL_GPIO_Init>

  //Init SDA GPIO Pin
  GPIO_Init.Pin       = m_uSDA_Pin;                //Set pin number
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80080c2:	60fb      	str	r3, [r7, #12]
  GPIO_Init.Mode      = GPIO_MODE_AF_OD;           //Set clock pin as alternate function in open-drain mode
 80080c4:	2312      	movs	r3, #18
 80080c6:	613b      	str	r3, [r7, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;               //Enable pull-up resistor on pin
 80080c8:	2301      	movs	r3, #1
 80080ca:	617b      	str	r3, [r7, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH; //Set GPIO pin speed
 80080cc:	2303      	movs	r3, #3
 80080ce:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Alternate = m_uSDA_AF;                 //Set alternate function to suit required I2C peripheral
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80080d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(m_pSDA_GPIO, &GPIO_Init);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080dc:	f107 020c 	add.w	r2, r7, #12
 80080e0:	4611      	mov	r1, r2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fb fc38 	bl	8003958 <HAL_GPIO_Init>


  //Enable I2C Clock
  QAD_I2CMgr::enableClock(m_eI2C);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	799b      	ldrb	r3, [r3, #6]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff ff32 	bl	8007f56 <_ZN10QAD_I2CMgr11enableClockE14QAD_I2C_Periph>


  //Initialize I2C Peripheral
  m_sHandle.Instance             = QAD_I2CMgr::getInstance(m_eI2C);  //Set instance for required I2C peripheral
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	799b      	ldrb	r3, [r3, #6]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff feb9 	bl	8007e6e <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph>
 80080fc:	4602      	mov	r2, r0
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	639a      	str	r2, [r3, #56]	; 0x38
  m_sHandle.Init.Timing          = m_uTiming;                        //Set selected clock speed
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	63da      	str	r2, [r3, #60]	; 0x3c
  m_sHandle.Init.AddressingMode  = m_eAddressingMode;                //Set selected addressing mode
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691a      	ldr	r2, [r3, #16]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	645a      	str	r2, [r3, #68]	; 0x44
  m_sHandle.Init.DualAddressMode = m_eDualAddressingMode;            //Set whether dual addressing mode is being used
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	695a      	ldr	r2, [r3, #20]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	649a      	str	r2, [r3, #72]	; 0x48
  m_sHandle.Init.GeneralCallMode = m_eGeneralCallMode;               //Set whether general call addressing mode is being used
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	699a      	ldr	r2, [r3, #24]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	655a      	str	r2, [r3, #84]	; 0x54
  m_sHandle.Init.NoStretchMode   = m_eNoStretchMode;                 //Set whether clock stretching is currently disabled
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	69da      	ldr	r2, [r3, #28]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	659a      	str	r2, [r3, #88]	; 0x58
  m_sHandle.Init.OwnAddress1     = m_uOwnAddress1;                   //Set primary peripheral I2C address
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	8c1b      	ldrh	r3, [r3, #32]
 800812e:	461a      	mov	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	641a      	str	r2, [r3, #64]	; 0x40
  m_sHandle.Init.OwnAddress2     = m_uOwnAddress2;                   //Set secondary peripheral I2C address
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008138:	461a      	mov	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_I2C_Init(&m_sHandle) != HAL_OK) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	3338      	adds	r3, #56	; 0x38
 8008142:	4618      	mov	r0, r3
 8008144:	f7fb feda 	bl	8003efc <HAL_I2C_Init>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	bf14      	ite	ne
 800814e:	2301      	movne	r3, #1
 8008150:	2300      	moveq	r3, #0
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	d005      	beq.n	8008164 <_ZN7QAD_I2C10periphInitEv+0xe8>
  	periphDeinit(DeinitPartial);
 8008158:	2100      	movs	r1, #0
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f839 	bl	80081d2 <_ZN7QAD_I2C12periphDeinitENS_10DeinitModeE>
  	return QA_Fail;
 8008160:	2301      	movs	r3, #1
 8008162:	e032      	b.n	80081ca <_ZN7QAD_I2C10periphInitEv+0x14e>
  }


  //Enable I2C Interrupt priorties and enable IRQs
  HAL_NVIC_SetPriority(QAD_I2CMgr::getIRQEvent(m_eI2C), m_uIRQPriority_Event, 0x0);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	799b      	ldrb	r3, [r3, #6]
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff fe99 	bl	8007ea0 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>
 800816e:	4603      	mov	r3, r0
 8008170:	4618      	mov	r0, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	79db      	ldrb	r3, [r3, #7]
 8008176:	2200      	movs	r2, #0
 8008178:	4619      	mov	r1, r3
 800817a:	f7fa fe8c 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QAD_I2CMgr::getIRQEvent(m_eI2C));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	799b      	ldrb	r3, [r3, #6]
 8008182:	4618      	mov	r0, r3
 8008184:	f7ff fe8c 	bl	8007ea0 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>
 8008188:	4603      	mov	r3, r0
 800818a:	4618      	mov	r0, r3
 800818c:	f7fa fe9f 	bl	8002ece <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(QAD_I2CMgr::getIRQError(m_eI2C), m_uIRQPriority_Error, 0x0);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	799b      	ldrb	r3, [r3, #6]
 8008194:	4618      	mov	r0, r3
 8008196:	f7ff fe9e 	bl	8007ed6 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>
 800819a:	4603      	mov	r3, r0
 800819c:	4618      	mov	r0, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	7a1b      	ldrb	r3, [r3, #8]
 80081a2:	2200      	movs	r2, #0
 80081a4:	4619      	mov	r1, r3
 80081a6:	f7fa fe76 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QAD_I2CMgr::getIRQError(m_eI2C));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	799b      	ldrb	r3, [r3, #6]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7ff fe91 	bl	8007ed6 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>
 80081b4:	4603      	mov	r3, r0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fa fe89 	bl	8002ece <HAL_NVIC_EnableIRQ>


  //Set Driver States
  m_eInitState = QA_Initialized; //Set driver state as initialized
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	711a      	strb	r2, [r3, #4]
  m_eState     = QA_Inactive;    //Set driver as currently inactive
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	715a      	strb	r2, [r3, #5]


  //Return
  return QA_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3720      	adds	r7, #32
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <_ZN7QAD_I2C12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling interrupts
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed).
//              Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_I2C::periphDeinit(DeinitMode eDeinitMode) {
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	460b      	mov	r3, r1
 80081dc:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 80081de:	78fb      	ldrb	r3, [r7, #3]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d019      	beq.n	8008218 <_ZN7QAD_I2C12periphDeinitENS_10DeinitModeE+0x46>

		//Deactivate the peripheral
		stop();
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff ff18 	bl	800801a <_ZN7QAD_I2C4stopEv>

		//Disable the interrupts
		HAL_NVIC_DisableIRQ(QAD_I2CMgr::getIRQError(m_eI2C));
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	799b      	ldrb	r3, [r3, #6]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff fe71 	bl	8007ed6 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>
 80081f4:	4603      	mov	r3, r0
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fa fe77 	bl	8002eea <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(QAD_I2CMgr::getIRQEvent(m_eI2C));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	799b      	ldrb	r3, [r3, #6]
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff fe4d 	bl	8007ea0 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>
 8008206:	4603      	mov	r3, r0
 8008208:	4618      	mov	r0, r3
 800820a:	f7fa fe6e 	bl	8002eea <HAL_NVIC_DisableIRQ>

		//Deinitialize the peripheral
		HAL_I2C_DeInit(&m_sHandle);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3338      	adds	r3, #56	; 0x38
 8008212:	4618      	mov	r0, r3
 8008214:	f7fb ff02 	bl	800401c <HAL_I2C_DeInit>
	}

	//Disable peripheral clock
	QAD_I2CMgr::disableClock(m_eI2C);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	799b      	ldrb	r3, [r3, #6]
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff feab 	bl	8007f78 <_ZN10QAD_I2CMgr12disableClockE14QAD_I2C_Periph>

	//Deinitialize GPIOs
	HAL_GPIO_DeInit(m_pSCL_GPIO, m_uSCL_Pin);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f7fb fd3f 	bl	8003cb0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pSDA_GPIO, m_uSDA_Pin);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800823a:	4619      	mov	r1, r3
 800823c:	4610      	mov	r0, r2
 800823e:	f7fb fd37 	bl	8003cb0 <HAL_GPIO_DeInit>

  //Set Driver States
	m_eState     = QA_Inactive;       //Set driver as being inactive
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	715a      	strb	r2, [r3, #5]
	m_eInitState = QA_NotInitialized; //Set driver as not being initialized
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	711a      	strb	r2, [r3, #4]

}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <_ZN7QAD_I2C4readEtttPht>:
//uReg        - The register address to access on the I2C device that is being read from
//uMemAddress - The number of bytes in size of the register/memory address
//pData       - A pointer to an array of bytes to contain the data to be read
//uLength     - The number of bytes to be read
//Returns QA_OK if successful, or QA_Fail if unable to perform read
QA_Result QAD_I2C::read(uint16_t uAddr, uint16_t uReg, uint16_t uMemAddress, uint8_t* pData, uint16_t uLength) {
 8008256:	b590      	push	{r4, r7, lr}
 8008258:	b089      	sub	sp, #36	; 0x24
 800825a:	af04      	add	r7, sp, #16
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	4608      	mov	r0, r1
 8008260:	4611      	mov	r1, r2
 8008262:	461a      	mov	r2, r3
 8008264:	4603      	mov	r3, r0
 8008266:	817b      	strh	r3, [r7, #10]
 8008268:	460b      	mov	r3, r1
 800826a:	813b      	strh	r3, [r7, #8]
 800826c:	4613      	mov	r3, r2
 800826e:	80fb      	strh	r3, [r7, #6]
  if (HAL_I2C_Mem_Read(&m_sHandle, uAddr, (uint16_t)uReg, uMemAddress, pData, uLength, m_uTimeout) != HAL_OK)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	88fc      	ldrh	r4, [r7, #6]
 800827c:	893a      	ldrh	r2, [r7, #8]
 800827e:	8979      	ldrh	r1, [r7, #10]
 8008280:	9302      	str	r3, [sp, #8]
 8008282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	4623      	mov	r3, r4
 800828c:	f7fb ff0a 	bl	80040a4 <HAL_I2C_Mem_Read>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	bf14      	ite	ne
 8008296:	2301      	movne	r3, #1
 8008298:	2300      	moveq	r3, #0
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <_ZN7QAD_I2C4readEtttPht+0x4e>
  	return QA_Fail;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e000      	b.n	80082a6 <_ZN7QAD_I2C4readEtttPht+0x50>

  return QA_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd90      	pop	{r4, r7, pc}

080082ae <_ZN8QAD_LTDCC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_LTDC() :
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized) {}
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	701a      	strb	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f646 3225 	movw	r2, #27429	; 0x6b25
 80082c2:	605a      	str	r2, [r3, #4]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f24f 4224 	movw	r2, #62500	; 0xf424
 80082ca:	609a      	str	r2, [r3, #8]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f643 5209 	movw	r2, #15625	; 0x3d09
 80082d2:	60da      	str	r2, [r3, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4618      	mov	r0, r3
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
	...

080082e4 <_ZN8QAD_LTDC3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_LTDC& get(void) {
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
		static QAD_LTDC instance;
 80082e8:	4b10      	ldr	r3, [pc, #64]	; (800832c <_ZN8QAD_LTDC3getEv+0x48>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	f3bf 8f5b 	dmb	ish
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	bf0c      	ite	eq
 80082fa:	2301      	moveq	r3, #1
 80082fc:	2300      	movne	r3, #0
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d010      	beq.n	8008326 <_ZN8QAD_LTDC3getEv+0x42>
 8008304:	4809      	ldr	r0, [pc, #36]	; (800832c <_ZN8QAD_LTDC3getEv+0x48>)
 8008306:	f003 fdd6 	bl	800beb6 <__cxa_guard_acquire>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	bf14      	ite	ne
 8008310:	2301      	movne	r3, #1
 8008312:	2300      	moveq	r3, #0
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d005      	beq.n	8008326 <_ZN8QAD_LTDC3getEv+0x42>
 800831a:	4805      	ldr	r0, [pc, #20]	; (8008330 <_ZN8QAD_LTDC3getEv+0x4c>)
 800831c:	f7ff ffc7 	bl	80082ae <_ZN8QAD_LTDCC1Ev>
 8008320:	4802      	ldr	r0, [pc, #8]	; (800832c <_ZN8QAD_LTDC3getEv+0x48>)
 8008322:	f003 fdd4 	bl	800bece <__cxa_guard_release>
		return instance;
 8008326:	4b02      	ldr	r3, [pc, #8]	; (8008330 <_ZN8QAD_LTDC3getEv+0x4c>)
	}
 8008328:	4618      	mov	r0, r3
 800832a:	bd80      	pop	{r7, pc}
 800832c:	200003d0 	.word	0x200003d0
 8008330:	20000284 	.word	0x20000284

08008334 <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>:
	//Communication Methods

	//Used to allow OTM8009A driver (in otm8009a.h file) to communicate with OTM8009A display controller via DSI
	//uNumParams - The number of parameters being supplied
	//pParams    - Pointer to the list of parameters to be supplied
	static void dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
		get().imp_dsi_IO_WriteCmd(uNumParams, pParams);
 800833e:	f7ff ffd1 	bl	80082e4 <_ZN8QAD_LTDC3getEv>
 8008342:	4603      	mov	r3, r0
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	4618      	mov	r0, r3
 800834a:	f000 faeb 	bl	8008924 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>
	}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <_ZN8QAD_LTDC8imp_initEv>:
//QAD_LTDC Initialization Method
//
//To be called from static method init()
//Used to initialize the DSI and LTDC peripherals, LTDC layers, the OTM8009A display controller and the required reset and backlight control GPIO pins
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails.
QA_Result QAD_LTDC::imp_init(void) {
 8008358:	b580      	push	{r7, lr}
 800835a:	b0a2      	sub	sp, #136	; 0x88
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]

  //Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 8008360:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	609a      	str	r2, [r3, #8]
 800836c:	60da      	str	r2, [r3, #12]
 800836e:	611a      	str	r2, [r3, #16]

	  //Initialize Backlight Control Pin
	GPIO_Init.Pin    = QAD_LTDC_BACKLIGHT_PIN;          //Set pin number. (QAD_LTDC_BACKLIGHT_PIN is defined in setup.hpp)
 8008370:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008374:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 8008376:	2301      	movs	r3, #1
 8008378:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLDOWN;                   //Enable pull-down resistor so backlight defaults to off
 800837a:	2302      	movs	r3, #2
 800837c:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 800837e:	2300      	movs	r3, #0
 8008380:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_BACKLIGHT_PORT, &GPIO_Init); //Initialize pin. (QAD_LTDC_BACKLIGHT_PORT is defined in setup.hpp)
 8008382:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008386:	4619      	mov	r1, r3
 8008388:	4897      	ldr	r0, [pc, #604]	; (80085e8 <_ZN8QAD_LTDC8imp_initEv+0x290>)
 800838a:	f7fb fae5 	bl	8003958 <HAL_GPIO_Init>

		//Initialize OTM8009A Controller Reset Pin
	GPIO_Init.Pin    = QAD_LTDC_RESET_PIN;              //Set pin number. (QAD_LTDC_RESET_PIN is defined in setup.hpp)
 800838e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008392:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 8008394:	2301      	movs	r3, #1
 8008396:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLUP;                     //Enable pull-up resistor as reset is active-low
 8008398:	2301      	movs	r3, #1
 800839a:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 800839c:	2300      	movs	r3, #0
 800839e:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_RESET_PORT, &GPIO_Init);     //Initialize pin. (QAD_LTDC_RESET_PORT is defined in setup.hpp)
 80083a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80083a4:	4619      	mov	r1, r3
 80083a6:	4891      	ldr	r0, [pc, #580]	; (80085ec <_ZN8QAD_LTDC8imp_initEv+0x294>)
 80083a8:	f7fb fad6 	bl	8003958 <HAL_GPIO_Init>


	//Reset OTM8009A Controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET); //Pull reset pin low
 80083ac:	2200      	movs	r2, #0
 80083ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083b2:	488e      	ldr	r0, [pc, #568]	; (80085ec <_ZN8QAD_LTDC8imp_initEv+0x294>)
 80083b4:	f7fb fd88 	bl	8003ec8 <HAL_GPIO_WritePin>
	HAL_Delay(20);                                                              //Delay for 20ms to allow for reset process
 80083b8:	2014      	movs	r0, #20
 80083ba:	f7fa fc49 	bl	8002c50 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);   //Pull reset pin high
 80083be:	2201      	movs	r2, #1
 80083c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083c4:	4889      	ldr	r0, [pc, #548]	; (80085ec <_ZN8QAD_LTDC8imp_initEv+0x294>)
 80083c6:	f7fb fd7f 	bl	8003ec8 <HAL_GPIO_WritePin>
	HAL_Delay(10);                                                              //Delay for 10ms to allow reset process time to complete
 80083ca:	200a      	movs	r0, #10
 80083cc:	f7fa fc40 	bl	8002c50 <HAL_Delay>


	//Initialize LTDC Peripheral Clock
	__HAL_RCC_LTDC_CLK_ENABLE();
 80083d0:	4b87      	ldr	r3, [pc, #540]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80083d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d4:	4a86      	ldr	r2, [pc, #536]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80083d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083da:	6453      	str	r3, [r2, #68]	; 0x44
 80083dc:	4b84      	ldr	r3, [pc, #528]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80083de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083e4:	613b      	str	r3, [r7, #16]
 80083e6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_LTDC_FORCE_RESET();
 80083e8:	4b81      	ldr	r3, [pc, #516]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	4a80      	ldr	r2, [pc, #512]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80083ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083f2:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_LTDC_RELEASE_RESET();
 80083f4:	4b7e      	ldr	r3, [pc, #504]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	4a7d      	ldr	r2, [pc, #500]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 80083fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083fe:	6253      	str	r3, [r2, #36]	; 0x24

	//Initialize DSI Peripheral Clock
	__HAL_RCC_DSI_CLK_ENABLE();
 8008400:	4b7b      	ldr	r3, [pc, #492]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8008402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008404:	4a7a      	ldr	r2, [pc, #488]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8008406:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800840a:	6453      	str	r3, [r2, #68]	; 0x44
 800840c:	4b78      	ldr	r3, [pc, #480]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 800840e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DSI_FORCE_RESET();
 8008418:	4b75      	ldr	r3, [pc, #468]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	4a74      	ldr	r2, [pc, #464]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 800841e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008422:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_DSI_RELEASE_RESET();
 8008424:	4b72      	ldr	r3, [pc, #456]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	4a71      	ldr	r2, [pc, #452]	; (80085f0 <_ZN8QAD_LTDC8imp_initEv+0x298>)
 800842a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800842e:	6253      	str	r3, [r2, #36]	; 0x24

	//Prepare Instances for DSI and LTDC handles (required if needing to call imp_deinit() due to failed initialization)
  m_sDSIHandle.Instance = DSI;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a70      	ldr	r2, [pc, #448]	; (80085f4 <_ZN8QAD_LTDC8imp_initEv+0x29c>)
 8008434:	611a      	str	r2, [r3, #16]
  m_sLTDCHandle.Instance = LTDC;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a6f      	ldr	r2, [pc, #444]	; (80085f8 <_ZN8QAD_LTDC8imp_initEv+0x2a0>)
 800843a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  //-------------------------
  //Initialize DSI peripheral

  //Confirm DSI is currently uninitialized
  HAL_DSI_DeInit(&m_sDSIHandle);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3310      	adds	r3, #16
 8008442:	4618      	mov	r0, r3
 8008444:	f7fa fece 	bl	80031e4 <HAL_DSI_DeInit>

  //Fill out DSI PLL Initialization structure as required for DSI to operate at required clock speed
  DSI_PLLInitTypeDef DSI_PLLInit = {0};
 8008448:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800844c:	2200      	movs	r2, #0
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	605a      	str	r2, [r3, #4]
 8008452:	609a      	str	r2, [r3, #8]
  DSI_PLLInit.PLLNDIV = 100;
 8008454:	2364      	movs	r3, #100	; 0x64
 8008456:	64bb      	str	r3, [r7, #72]	; 0x48
  DSI_PLLInit.PLLIDF  = DSI_PLL_IN_DIV5;
 8008458:	2305      	movs	r3, #5
 800845a:	64fb      	str	r3, [r7, #76]	; 0x4c
  DSI_PLLInit.PLLODF  = DSI_PLL_OUT_DIV1;
 800845c:	2300      	movs	r3, #0
 800845e:	653b      	str	r3, [r7, #80]	; 0x50

  //Fill out required DSI initialization details
  m_sDSIHandle.Init.NumberOfLanes = DSI_TWO_DATA_LANES;                   //Set DSI as using two data lanes
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	61da      	str	r2, [r3, #28]
  m_sDSIHandle.Init.TXEscapeCkdiv = m_uLCDLaneByteClk / m_uLCDClkDivisor; //Set TX Escape Clock Division
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689a      	ldr	r2, [r3, #8]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	619a      	str	r2, [r3, #24]

  //Initialize DSI, calling imp_deinit() if initialization fails
  if (HAL_DSI_Init(&m_sDSIHandle, &DSI_PLLInit) != HAL_OK) {
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3310      	adds	r3, #16
 800847a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800847e:	4611      	mov	r1, r2
 8008480:	4618      	mov	r0, r3
 8008482:	f7fa fd95 	bl	8002fb0 <HAL_DSI_Init>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	bf14      	ite	ne
 800848c:	2301      	movne	r3, #1
 800848e:	2300      	moveq	r3, #0
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <_ZN8QAD_LTDC8imp_initEv+0x148>
  	imp_deinit();
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f9e4 	bl	8008864 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 800849c:	2301      	movs	r3, #1
 800849e:	e1db      	b.n	8008858 <_ZN8QAD_LTDC8imp_initEv+0x500>

  //----------------------------------
  //Initialize DSI video configuration

  //Generate base DSI timing parameters
  uint32_t HACT = QAD_LTDC_WIDTH;    //Horizontal Active period in pixels
 80084a0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80084a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t VACT = QAD_LTDC_HEIGHT;   //Vertical Active period in pixels
 80084a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80084ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t VSA  = 12;                //Period that vertical sync is active in pixels
 80084b0:	230c      	movs	r3, #12
 80084b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t VBP  = 12;                //Vertical Back Porch in pixels
 80084b4:	230c      	movs	r3, #12
 80084b6:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t VFP  = 12;                //Vertical Front Porch in pixels
 80084b8:	230c      	movs	r3, #12
 80084ba:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t HSA  = 63;                //Period that horizontal sync is active in pixels
 80084bc:	233f      	movs	r3, #63	; 0x3f
 80084be:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t HBP  = 120;               //Horizontal Back Porch in pixels
 80084c0:	2378      	movs	r3, #120	; 0x78
 80084c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t HFP  = 120;               //Horizontal Front Porch in pixels
 80084c4:	2378      	movs	r3, #120	; 0x78
 80084c6:	66bb      	str	r3, [r7, #104]	; 0x68

  //Fill out details of DSI Configuration Handle
  m_sDSICfgHandle.VirtualChannelID             = 0;                                      //Set virtual channel ID
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	62da      	str	r2, [r3, #44]	; 0x2c
  m_sDSICfgHandle.ColorCoding                  = DSI_RGB888;                             //Set pixel format to 24bit RGB (8bits for each Red, Green and Blue)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2205      	movs	r2, #5
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30
  m_sDSICfgHandle.VSPolarity                   = DSI_VSYNC_ACTIVE_HIGH;                  //Set Vertical Sync signal to active high
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	64da      	str	r2, [r3, #76]	; 0x4c
  m_sDSICfgHandle.HSPolarity                   = DSI_HSYNC_ACTIVE_HIGH;                  //Set Horizontal Sync signal to active high
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	649a      	str	r2, [r3, #72]	; 0x48
  m_sDSICfgHandle.DEPolarity                   = DSI_DATA_ENABLE_ACTIVE_HIGH;            //Set Data Enable signal to active high
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	651a      	str	r2, [r3, #80]	; 0x50
  m_sDSICfgHandle.Mode                         = DSI_VID_MODE_BURST;                     //Set Video Mode to burst mode
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2202      	movs	r2, #2
 80084ea:	639a      	str	r2, [r3, #56]	; 0x38
  m_sDSICfgHandle.NullPacketSize               = 0xFFF;                                  //Set null packet size
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f640 72ff 	movw	r2, #4095	; 0xfff
 80084f2:	645a      	str	r2, [r3, #68]	; 0x44
  m_sDSICfgHandle.NumberOfChunks               = 0;                                      //Set number of chunks
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	641a      	str	r2, [r3, #64]	; 0x40
  m_sDSICfgHandle.PacketSize                   = HACT;                                   //Set packet size to horizontal active period
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008500:	63da      	str	r2, [r3, #60]	; 0x3c

  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008508:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 8008510:	fbb2 f2f3 	udiv	r2, r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	655a      	str	r2, [r3, #84]	; 0x54

  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800851e:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 8008526:	fbb2 f2f3 	udiv	r2, r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	659a      	str	r2, [r3, #88]	; 0x58

  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 800852e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008534:	441a      	add	r2, r3
 8008536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008538:	441a      	add	r2, r3
 800853a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800853c:	4413      	add	r3, r2
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	6892      	ldr	r2, [r2, #8]
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8008542:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	fbb2 f2f3 	udiv	r2, r2, r3
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	65da      	str	r2, [r3, #92]	; 0x5c

  m_sDSICfgHandle.VerticalSyncActive           = VSA;                                    //Set duration for vertical sync signal
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008556:	661a      	str	r2, [r3, #96]	; 0x60
  m_sDSICfgHandle.VerticalBackPorch            = VBP;                                    //Set duration for vertical back porch
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800855c:	665a      	str	r2, [r3, #100]	; 0x64
  m_sDSICfgHandle.VerticalFrontPorch           = VFP;                                    //Set duration for vertical front porch
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008562:	669a      	str	r2, [r3, #104]	; 0x68
  m_sDSICfgHandle.VerticalActive               = VACT;                                   //Set duration of vertical active period
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800856a:	66da      	str	r2, [r3, #108]	; 0x6c

  m_sDSICfgHandle.LPCommandEnable              = DSI_LP_COMMAND_ENABLE;  //Enable DSI low power command
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008572:	671a      	str	r2, [r3, #112]	; 0x70
  m_sDSICfgHandle.LPLargestPacketSize          = 16;                     //Set largest packet size for low power commands during VSA, VBP and VFP periods.
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2210      	movs	r2, #16
 8008578:	675a      	str	r2, [r3, #116]	; 0x74
  m_sDSICfgHandle.LPVACTLargestPacketSize      = 0;                      //Set largest packet size for low power commands during VACT period
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	679a      	str	r2, [r3, #120]	; 0x78
  m_sDSICfgHandle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;      //Enable low power horizontal front porch
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008586:	67da      	str	r2, [r3, #124]	; 0x7c
  m_sDSICfgHandle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;      //Enable low power horizontal back porch
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800858e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  m_sDSICfgHandle.LPVerticalActiveEnable       = DSI_LP_VACT_ENABLE;     //Enable low power vertical active
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  m_sDSICfgHandle.LPVerticalFrontPorchEnable   = DSI_LP_VFP_ENABLE;      //Enable low power vertical front porch
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  m_sDSICfgHandle.LPVerticalBackPorchEnable    = DSI_LP_VBP_ENABLE;      //Enable low power vertical back porch
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  m_sDSICfgHandle.LPVerticalSyncActiveEnable   = DSI_LP_VSYNC_ENABLE;    //Enable low power vertical sync
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  //Configure DSI Video Mode,
  if (HAL_DSI_ConfigVideoMode(&m_sDSIHandle, &m_sDSICfgHandle) != HAL_OK) {
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f103 0210 	add.w	r2, r3, #16
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	332c      	adds	r3, #44	; 0x2c
 80085c4:	4619      	mov	r1, r3
 80085c6:	4610      	mov	r0, r2
 80085c8:	f7fa fe94 	bl	80032f4 <HAL_DSI_ConfigVideoMode>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	bf14      	ite	ne
 80085d2:	2301      	movne	r3, #1
 80085d4:	2300      	moveq	r3, #0
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00f      	beq.n	80085fc <_ZN8QAD_LTDC8imp_initEv+0x2a4>
  	imp_deinit();
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f941 	bl	8008864 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e138      	b.n	8008858 <_ZN8QAD_LTDC8imp_initEv+0x500>
 80085e6:	bf00      	nop
 80085e8:	40022000 	.word	0x40022000
 80085ec:	40022400 	.word	0x40022400
 80085f0:	40023800 	.word	0x40023800
 80085f4:	40016c00 	.word	0x40016c00
 80085f8:	40016800 	.word	0x40016800

  //--------------------------
  //Initialize LTDC Peripheral

  //Fill out details for LTDC initialization
  m_sLTDCHandle.Init.HorizontalSync     = (HSA - 1);                              //Set horizontal syncronization width
 80085fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085fe:	1e5a      	subs	r2, r3, #1
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  m_sLTDCHandle.Init.AccumulatedHBP     = (HSA + HBP - 1);                        //Set accumulated horizontal back porch width
 8008606:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800860a:	4413      	add	r3, r2
 800860c:	1e5a      	subs	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  m_sLTDCHandle.Init.AccumulatedActiveW = (QAD_LTDC_WIDTH + HSA + HBP - 1);       //Set accumulated active width
 8008614:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008618:	4413      	add	r3, r2
 800861a:	f203 321f 	addw	r2, r3, #799	; 0x31f
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  m_sLTDCHandle.Init.TotalWidth         = (QAD_LTDC_WIDTH + HSA + HBP + HFP - 1); //Set total width
 8008624:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008628:	441a      	add	r2, r3
 800862a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800862c:	4413      	add	r3, r2
 800862e:	f203 321f 	addw	r2, r3, #799	; 0x31f
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  m_sLTDCHandle.LayerCfg->ImageWidth    = QAD_LTDC_WIDTH;                         //Sets the frame buffer line length (in pixels)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800863e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  m_sLTDCHandle.LayerCfg->ImageHeight   = QAD_LTDC_HEIGHT;                        //Sets the number of frame buffer lines (height in pixels)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008648:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  m_sLTDCHandle.Init.Backcolor.Red      = 0;                                      //Set background color red value
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
  m_sLTDCHandle.Init.Backcolor.Green    = 0;                                      //Set background color green value
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
  m_sLTDCHandle.Init.Backcolor.Blue     = 255;                                    //Set background color blue value
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	22ff      	movs	r2, #255	; 0xff
 8008660:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  m_sLTDCHandle.Init.PCPolarity         = LTDC_PCPOLARITY_IPC;                    //Set pixel clock polarity to non-inverted
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  //Complete initialization structre details based on DSI Configuration, calling imp_deinit() if failed
  if (HAL_LTDC_StructInitFromVideoConfig(&m_sLTDCHandle, &m_sDSICfgHandle) != HAL_OK) {
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	332c      	adds	r3, #44	; 0x2c
 8008676:	4619      	mov	r1, r3
 8008678:	4610      	mov	r0, r2
 800867a:	f7fc faff 	bl	8004c7c <HAL_LTDCEx_StructInitFromVideoConfig>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	bf14      	ite	ne
 8008684:	2301      	movne	r3, #1
 8008686:	2300      	moveq	r3, #0
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d004      	beq.n	8008698 <_ZN8QAD_LTDC8imp_initEv+0x340>
  	imp_deinit();
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f8e8 	bl	8008864 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8008694:	2301      	movs	r3, #1
 8008696:	e0df      	b.n	8008858 <_ZN8QAD_LTDC8imp_initEv+0x500>
  }

  //Initialize LTDC Peripheral
  if (HAL_LTDC_Init(&m_sLTDCHandle) != HAL_OK) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	3398      	adds	r3, #152	; 0x98
 800869c:	4618      	mov	r0, r3
 800869e:	f7fb ffe3 	bl	8004668 <HAL_LTDC_Init>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	bf14      	ite	ne
 80086a8:	2301      	movne	r3, #1
 80086aa:	2300      	moveq	r3, #0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d004      	beq.n	80086bc <_ZN8QAD_LTDC8imp_initEv+0x364>
  	imp_deinit();
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f8d6 	bl	8008864 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e0cd      	b.n	8008858 <_ZN8QAD_LTDC8imp_initEv+0x500>

    //-------
    //Layer 0

  //Set pointer address for layer 0 double buffer
  m_pLayer0Ptr = (void*)0xC0000000;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80086c2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

  //Clear Layer Config structure
  LTDC_Layer = {0};
 80086c6:	f107 0314 	add.w	r3, r7, #20
 80086ca:	2234      	movs	r2, #52	; 0x34
 80086cc:	2100      	movs	r1, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f003 fca6 	bl	800c020 <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 80086d8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80086dc:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 80086e2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80086e6:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 80086e8:	2304      	movs	r3, #4
 80086ea:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80086f2:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 80086f4:	23ff      	movs	r3, #255	; 0xff
 80086f6:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 80086f8:	2300      	movs	r3, #0
 80086fa:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 8008702:	2300      	movs	r3, #0
 8008704:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 800870e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008712:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 8008714:	2307      	movs	r3, #7
 8008716:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 8008718:	f44f 7348 	mov.w	r3, #800	; 0x320
 800871c:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 800871e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008722:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 0 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 0) != HAL_OK) {
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3398      	adds	r3, #152	; 0x98
 8008728:	f107 0114 	add.w	r1, r7, #20
 800872c:	2200      	movs	r2, #0
 800872e:	4618      	mov	r0, r3
 8008730:	f7fc f896 	bl	8004860 <HAL_LTDC_ConfigLayer>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	bf14      	ite	ne
 800873a:	2301      	movne	r3, #1
 800873c:	2300      	moveq	r3, #0
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b00      	cmp	r3, #0
 8008742:	d004      	beq.n	800874e <_ZN8QAD_LTDC8imp_initEv+0x3f6>
		imp_deinit();
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f88d 	bl	8008864 <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 800874a:	2301      	movs	r3, #1
 800874c:	e084      	b.n	8008858 <_ZN8QAD_LTDC8imp_initEv+0x500>

	  //-------
	  //Layer 1

  //Set pointer address for layer 1 doube buffer
	m_pLayer1Ptr = (void*)((uint32_t)m_pLayer0Ptr + (QAD_LTDC_BUFFERSIZE*2));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008754:	461a      	mov	r2, r3
 8008756:	4b42      	ldr	r3, [pc, #264]	; (8008860 <_ZN8QAD_LTDC8imp_initEv+0x508>)
 8008758:	4413      	add	r3, r2
 800875a:	461a      	mov	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  //Clear Layer Config structure
  LTDC_Layer = {0};
 8008762:	f107 0314 	add.w	r3, r7, #20
 8008766:	2234      	movs	r2, #52	; 0x34
 8008768:	2100      	movs	r1, #0
 800876a:	4618      	mov	r0, r3
 800876c:	f003 fc58 	bl	800c020 <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 8008770:	2300      	movs	r3, #0
 8008772:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 8008774:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008778:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 800877a:	2300      	movs	r3, #0
 800877c:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 800877e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008782:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 8008784:	2304      	movs	r3, #4
 8008786:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800878e:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 8008790:	23ff      	movs	r3, #255	; 0xff
 8008792:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 8008794:	2300      	movs	r3, #0
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 80087aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80087ae:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 80087b0:	2307      	movs	r3, #7
 80087b2:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 80087b4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 80087ba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80087be:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 1 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 1) != HAL_OK) {
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3398      	adds	r3, #152	; 0x98
 80087c4:	f107 0114 	add.w	r1, r7, #20
 80087c8:	2201      	movs	r2, #1
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fc f848 	bl	8004860 <HAL_LTDC_ConfigLayer>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	bf14      	ite	ne
 80087d6:	2301      	movne	r3, #1
 80087d8:	2300      	moveq	r3, #0
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d004      	beq.n	80087ea <_ZN8QAD_LTDC8imp_initEv+0x492>
		imp_deinit();
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f83f 	bl	8008864 <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e036      	b.n	8008858 <_ZN8QAD_LTDC8imp_initEv+0x500>
	}


	//-------------------------------
	//Enable LTDC Layer 0 and Layer 1
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 0);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087f0:	3384      	adds	r3, #132	; 0x84
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80087fa:	3284      	adds	r2, #132	; 0x84
 80087fc:	f043 0301 	orr.w	r3, r3, #1
 8008800:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 1);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008808:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8008814:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8008818:	f043 0301 	orr.w	r3, r3, #1
 800881c:	6013      	str	r3, [r2, #0]


	//---------------------
	//Enable DSI Peripheral
	HAL_DSI_Start(&m_sDSIHandle);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3310      	adds	r3, #16
 8008822:	4618      	mov	r0, r3
 8008824:	f7fa ff66 	bl	80036f4 <HAL_DSI_Start>


	//--------------------------------------
	//Initialize OTM8009A Display Controller
	OTM8009A_Init(OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8008828:	2101      	movs	r1, #1
 800882a:	2000      	movs	r0, #0
 800882c:	f7f9 ff68 	bl	8002700 <OTM8009A_Init>


	//-------------------------------
	//Set Initial Frame Buffer States
	m_eLayer0Back  = QAD_LTDC_Buffer1;   //Set initial layer 0 back buffer as being buffer 1 in double buffer pair
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	m_eLayer0Front = QAD_LTDC_Buffer0;   //Set initial layer 0 front buffer as being buffer 0 in double buffer pair
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	m_eLayer1Back  = QAD_LTDC_Buffer1;   //Set initial layer 1 back buffer as being buffer 1 in double buffer pair
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	m_eLayer1Front = QAD_LTDC_Buffer0;   //Set initial layer 1 front buffer as being buffer 0 in double buffer pair
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b


	//Set Driver State as being initialized
	m_eInitState = QA_Initialized;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	701a      	strb	r2, [r3, #0]

	//Return
	return QA_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3788      	adds	r7, #136	; 0x88
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	00177000 	.word	0x00177000

08008864 <_ZN8QAD_LTDC10imp_deinitEv>:
//QAD_LTDC::imp_deinit
//QAD_LTDC Initialization Method
//
//To be called from static method deinit(), or from imp_init() in the event of a failed initialization
//Used to deinitialize the DSI and LTDC peripherals, LTDC layers, reset display controller and deinitialize reset and backlight GPIO pins
void QAD_LTDC::imp_deinit(void) {
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]

	//----------------------
	//Disable DSI Peripheral
	HAL_DSI_Stop(&m_sDSIHandle);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3310      	adds	r3, #16
 8008870:	4618      	mov	r0, r3
 8008872:	f7fa ff7b 	bl	800376c <HAL_DSI_Stop>


	//-------------------
	//Disable LTDC Layers
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 1);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800887c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8008888:	f502 7282 	add.w	r2, r2, #260	; 0x104
 800888c:	f023 0301 	bic.w	r3, r3, #1
 8008890:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 0);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008898:	3384      	adds	r3, #132	; 0x84
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80088a2:	3284      	adds	r2, #132	; 0x84
 80088a4:	f023 0301 	bic.w	r3, r3, #1
 80088a8:	6013      	str	r3, [r2, #0]


	//----------------------------
	//Deinitialize LTDC Peripheral
	HAL_LTDC_DeInit(&m_sLTDCHandle);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	3398      	adds	r3, #152	; 0x98
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fb ffaa 	bl	8004808 <HAL_LTDC_DeInit>


	//---------------------------
	//Deinitialize DSI Peripheral
	HAL_DSI_DeInit(&m_sDSIHandle);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3310      	adds	r3, #16
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fa fc93 	bl	80031e4 <HAL_DSI_DeInit>


	//---------------------------
	//Disable DSI and LTDC Clocks
	__HAL_RCC_DSI_CLK_DISABLE();
 80088be:	4b16      	ldr	r3, [pc, #88]	; (8008918 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 80088c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c2:	4a15      	ldr	r2, [pc, #84]	; (8008918 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 80088c4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80088c8:	6453      	str	r3, [r2, #68]	; 0x44
	__HAL_RCC_LTDC_CLK_DISABLE();
 80088ca:	4b13      	ldr	r3, [pc, #76]	; (8008918 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 80088cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ce:	4a12      	ldr	r2, [pc, #72]	; (8008918 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 80088d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088d4:	6453      	str	r3, [r2, #68]	; 0x44


	//------------------------
	//Reset Display controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET);
 80088d6:	2200      	movs	r2, #0
 80088d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088dc:	480f      	ldr	r0, [pc, #60]	; (800891c <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 80088de:	f7fb faf3 	bl	8003ec8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80088e2:	2014      	movs	r0, #20
 80088e4:	f7fa f9b4 	bl	8002c50 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);
 80088e8:	2201      	movs	r2, #1
 80088ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088ee:	480b      	ldr	r0, [pc, #44]	; (800891c <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 80088f0:	f7fb faea 	bl	8003ec8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80088f4:	200a      	movs	r0, #10
 80088f6:	f7fa f9ab 	bl	8002c50 <HAL_Delay>


	//--------------------------------------------------
	//Deinitialize Reset and Backlight control GPIO Pins
	HAL_GPIO_DeInit(QAD_LTDC_BACKLIGHT_PORT, QAD_LTDC_BACKLIGHT_PIN);
 80088fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80088fe:	4808      	ldr	r0, [pc, #32]	; (8008920 <_ZN8QAD_LTDC10imp_deinitEv+0xbc>)
 8008900:	f7fb f9d6 	bl	8003cb0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN);
 8008904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008908:	4804      	ldr	r0, [pc, #16]	; (800891c <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 800890a:	f7fb f9d1 	bl	8003cb0 <HAL_GPIO_DeInit>

}
 800890e:	bf00      	nop
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	40023800 	.word	0x40023800
 800891c:	40022400 	.word	0x40022400
 8008920:	40022000 	.word	0x40022000

08008924 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>:
  //DSI Command Methods


//QAD_LTDC::imp_dsi_IO_WriteCmd
//DSI Command Methods
void QAD_LTDC::imp_dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af02      	add	r7, sp, #8
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
	if (uNumParams <= 1) {
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d80f      	bhi.n	8008956 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x32>
		HAL_DSI_ShortWrite(&m_sDSIHandle, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f103 0010 	add.w	r0, r3, #16
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	461a      	mov	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3301      	adds	r3, #1
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	4613      	mov	r3, r2
 800894c:	2215      	movs	r2, #21
 800894e:	2100      	movs	r1, #0
 8008950:	f7fa ff48 	bl	80037e4 <HAL_DSI_ShortWrite>
	} else {
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
	}
}
 8008954:	e00f      	b.n	8008976 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x52>
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f103 0010 	add.w	r0, r3, #16
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	4413      	add	r3, r2
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	9301      	str	r3, [sp, #4]
 800896a:	9200      	str	r2, [sp, #0]
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2239      	movs	r2, #57	; 0x39
 8008970:	2100      	movs	r1, #0
 8008972:	f7fa ff59 	bl	8003828 <HAL_DSI_LongWrite>
}
 8008976:	bf00      	nop
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>:
  //------------------------------
  //QAD_LTDC Layer Control Methods

//QAD_LTDC::imp_flipLayer0Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer0Buffers(void) {
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d032      	beq.n	80089f6 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x76>
  	return;

  switch (m_eLayer0Front) {
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x20>
 800899a:	2b01      	cmp	r3, #1
 800899c:	d017      	beq.n	80089ce <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x4e>
 800899e:	e02b      	b.n	80089f8 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer0Back  = QAD_LTDC_Buffer0;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer1;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80089b6:	461a      	mov	r2, r3
 80089b8:	4b11      	ldr	r3, [pc, #68]	; (8008a00 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x80>)
 80089ba:	4413      	add	r3, r2
 80089bc:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	3398      	adds	r3, #152	; 0x98
 80089c2:	2200      	movs	r2, #0
 80089c4:	68b9      	ldr	r1, [r7, #8]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fb ff88 	bl	80048dc <HAL_LTDC_SetAddress>
    	break;
 80089cc:	e014      	b.n	80089f8 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer0Back  = QAD_LTDC_Buffer1;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer0;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80089e4:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3398      	adds	r3, #152	; 0x98
 80089ea:	2200      	movs	r2, #0
 80089ec:	68f9      	ldr	r1, [r7, #12]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fb ff74 	bl	80048dc <HAL_LTDC_SetAddress>
    	break;
 80089f4:	e000      	b.n	80089f8 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
  	return;
 80089f6:	bf00      	nop
    }
  }
}
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	000bb800 	.word	0x000bb800

08008a04 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>:


//QAD_LTDC::imp_flipLayer1Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer1Buffers(void) {
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d032      	beq.n	8008a7a <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x76>
  	return;

  switch (m_eLayer1Front) {
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x20>
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d017      	beq.n	8008a52 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x4e>
 8008a22:	e02b      	b.n	8008a7c <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer1Back  = QAD_LTDC_Buffer0;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer1;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	4b11      	ldr	r3, [pc, #68]	; (8008a84 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x80>)
 8008a3e:	4413      	add	r3, r2
 8008a40:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3398      	adds	r3, #152	; 0x98
 8008a46:	2201      	movs	r2, #1
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fb ff46 	bl	80048dc <HAL_LTDC_SetAddress>
    	break;
 8008a50:	e014      	b.n	8008a7c <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer1Back  = QAD_LTDC_Buffer1;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer0;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8008a68:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	3398      	adds	r3, #152	; 0x98
 8008a6e:	2201      	movs	r2, #1
 8008a70:	68f9      	ldr	r1, [r7, #12]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fb ff32 	bl	80048dc <HAL_LTDC_SetAddress>
    	break;
 8008a78:	e000      	b.n	8008a7c <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
  	return;
 8008a7a:	bf00      	nop
    }
  }
}
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	000bb800 	.word	0x000bb800

08008a88 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>:
}


//QAD_LTDC::imp_getLayer0BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer0BackBuffer(void) {
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d101      	bne.n	8008a9c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x14>
		return NULL;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	e013      	b.n	8008ac4 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>

	switch (m_eLayer0Back) {
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x24>
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d004      	beq.n	8008ab4 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x2c>
 8008aaa:	e00a      	b.n	8008ac2 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer0Ptr;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008ab2:	e007      	b.n	8008ac4 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008aba:	461a      	mov	r2, r3
 8008abc:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x48>)
 8008abe:	4413      	add	r3, r2
 8008ac0:	e000      	b.n	8008ac4 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	000bb800 	.word	0x000bb800

08008ad4 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>:
}


//QAD_LTDC::imp_getLayer1BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer1BackBuffer(void) {
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x14>
		return NULL;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	e013      	b.n	8008b10 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>

	switch (m_eLayer1Back) {
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x24>
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d004      	beq.n	8008b00 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x2c>
 8008af6:	e00a      	b.n	8008b0e <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer1Ptr;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8008afe:	e007      	b.n	8008b10 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8008b06:	461a      	mov	r2, r3
 8008b08:	4b04      	ldr	r3, [pc, #16]	; (8008b1c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x48>)
 8008b0a:	4413      	add	r3, r2
 8008b0c:	e000      	b.n	8008b10 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	000bb800 	.word	0x000bb800

08008b20 <DSI_IO_WriteCmd>:

//DSI_IO_WriteCmd
//OTM8009A Display Controller Communication Methods
//Used by the OTM8009A initialization method in the otm8009a.h file
//Calls the static dsi_IO_WriteCmd method in the QAD_LTDC driver class
void DSI_IO_WriteCmd(uint32_t NbrParam, uint8_t* pParams) {
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  QAD_LTDC::dsi_IO_WriteCmd(NbrParam, pParams);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff fc01 	bl	8008334 <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>
}
 8008b32:	bf00      	nop
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <_ZN11QAD_QuadSPI8imp_initEv>:
	//----------------------------------
	//QAD_QuadSPI Initialization Methods

//QAD_QuadSPI::imp_init
//QAD_QuadSPI Initialization Method
QA_Result QAD_QuadSPI::imp_init(void) {
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  if (m_eInitState)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <_ZN11QAD_QuadSPI8imp_initEv+0x16>
  	return QA_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	e015      	b.n	8008b7c <_ZN11QAD_QuadSPI8imp_initEv+0x42>

  //Initialized Peripheral
  if (imp_periphInit())
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f817 	bl	8008b84 <_ZN11QAD_QuadSPI14imp_periphInitEv>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bf14      	ite	ne
 8008b5c:	2301      	movne	r3, #1
 8008b5e:	2300      	moveq	r3, #0
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <_ZN11QAD_QuadSPI8imp_initEv+0x30>
  	return QA_Fail;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e008      	b.n	8008b7c <_ZN11QAD_QuadSPI8imp_initEv+0x42>

  //Set Driver States
  m_eInitState         = QA_Initialized;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2020 	strb.w	r2, [r3, #32]
  m_eMemoryMappedState = QAD_QuadSPI_MemoryMapped_Disabled;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  //Return
  return QA_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <_ZN11QAD_QuadSPI14imp_periphInitEv>:
//---------------------------------------------
//QAD_QuadSPI Peripheral Initialization Methods

//QAD_QuadSPI::imp_periphInit
//QAD_QuadSPI Peripheral Initialization Method
QA_Result QAD_QuadSPI::imp_periphInit(void) {
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08a      	sub	sp, #40	; 0x28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8008b8c:	f107 030c 	add.w	r3, r7, #12
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	605a      	str	r2, [r3, #4]
 8008b96:	609a      	str	r2, [r3, #8]
 8008b98:	60da      	str	r2, [r3, #12]
 8008b9a:	611a      	str	r2, [r3, #16]

	//----------
	//Init GPIOs

	//CS Pin
	GPIO_Init.Pin       = QAD_QUADSPI_CS_PIN;
 8008b9c:	2340      	movs	r3, #64	; 0x40
 8008b9e:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8008ba8:	2302      	movs	r3, #2
 8008baa:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = QAD_QUADSPI_CS_AF;
 8008bac:	230a      	movs	r3, #10
 8008bae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_QUADSPI_CS_PORT, &GPIO_Init);
 8008bb0:	f107 030c 	add.w	r3, r7, #12
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4871      	ldr	r0, [pc, #452]	; (8008d7c <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f8>)
 8008bb8:	f7fa fece 	bl	8003958 <HAL_GPIO_Init>

	//Clk Pin
	GPIO_Init.Pin       = QAD_QUADSPI_CLK_PIN;
 8008bbc:	2304      	movs	r3, #4
 8008bbe:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Pull      = GPIO_NOPULL;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	617b      	str	r3, [r7, #20]
	GPIO_Init.Alternate = QAD_QUADSPI_CLK_AF;
 8008bc4:	2309      	movs	r3, #9
 8008bc6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_QUADSPI_CLK_PORT, &GPIO_Init);
 8008bc8:	f107 030c 	add.w	r3, r7, #12
 8008bcc:	4619      	mov	r1, r3
 8008bce:	486b      	ldr	r0, [pc, #428]	; (8008d7c <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f8>)
 8008bd0:	f7fa fec2 	bl	8003958 <HAL_GPIO_Init>

	//Data 0 Pin
	GPIO_Init.Pin       = QAD_QUADSPI_DATA0_PIN;
 8008bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bd8:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Alternate = QAD_QUADSPI_DATA0_AF;
 8008bda:	2309      	movs	r3, #9
 8008bdc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_QUADSPI_DATA0_PORT, &GPIO_Init);
 8008bde:	f107 030c 	add.w	r3, r7, #12
 8008be2:	4619      	mov	r1, r3
 8008be4:	4866      	ldr	r0, [pc, #408]	; (8008d80 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1fc>)
 8008be6:	f7fa feb7 	bl	8003958 <HAL_GPIO_Init>

	//Data 1 Pin
	GPIO_Init.Pin       = QAD_QUADSPI_DATA1_PIN;
 8008bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bee:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Alternate = QAD_QUADSPI_DATA1_AF;
 8008bf0:	2309      	movs	r3, #9
 8008bf2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_QUADSPI_DATA1_PORT, &GPIO_Init);
 8008bf4:	f107 030c 	add.w	r3, r7, #12
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4861      	ldr	r0, [pc, #388]	; (8008d80 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1fc>)
 8008bfc:	f7fa feac 	bl	8003958 <HAL_GPIO_Init>

	//Data 2 Pin
	GPIO_Init.Pin       = QAD_QUADSPI_DATA2_PIN;
 8008c00:	2304      	movs	r3, #4
 8008c02:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Alternate = QAD_QUADSPI_DATA2_AF;
 8008c04:	2309      	movs	r3, #9
 8008c06:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_QUADSPI_DATA2_PORT, &GPIO_Init);
 8008c08:	f107 030c 	add.w	r3, r7, #12
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	485d      	ldr	r0, [pc, #372]	; (8008d84 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x200>)
 8008c10:	f7fa fea2 	bl	8003958 <HAL_GPIO_Init>

	//Data 3 Pin
	GPIO_Init.Pin       = QAD_QUADSPI_DATA3_PIN;
 8008c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c18:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Alternate = QAD_QUADSPI_DATA3_AF;
 8008c1a:	2309      	movs	r3, #9
 8008c1c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(QAD_QUADSPI_DATA3_PORT, &GPIO_Init);
 8008c1e:	f107 030c 	add.w	r3, r7, #12
 8008c22:	4619      	mov	r1, r3
 8008c24:	4858      	ldr	r0, [pc, #352]	; (8008d88 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x204>)
 8008c26:	f7fa fe97 	bl	8003958 <HAL_GPIO_Init>

	//---------------
	//Init Peripheral

	//Enable QSPI Clock
	__HAL_RCC_QSPI_CLK_ENABLE();
 8008c2a:	4b58      	ldr	r3, [pc, #352]	; (8008d8c <_ZN11QAD_QuadSPI14imp_periphInitEv+0x208>)
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2e:	4a57      	ldr	r2, [pc, #348]	; (8008d8c <_ZN11QAD_QuadSPI14imp_periphInitEv+0x208>)
 8008c30:	f043 0302 	orr.w	r3, r3, #2
 8008c34:	6393      	str	r3, [r2, #56]	; 0x38
 8008c36:	4b55      	ldr	r3, [pc, #340]	; (8008d8c <_ZN11QAD_QuadSPI14imp_periphInitEv+0x208>)
 8008c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	60bb      	str	r3, [r7, #8]
 8008c40:	68bb      	ldr	r3, [r7, #8]

	//Init QSPI
	m_sHandle.Instance                = QUADSPI;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a52      	ldr	r2, [pc, #328]	; (8008d90 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x20c>)
 8008c46:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.ClockPrescaler     = 1;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.FifoThreshold      = 16;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2210      	movs	r2, #16
 8008c52:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2210      	movs	r2, #16
 8008c58:	631a      	str	r2, [r3, #48]	; 0x30
 8008c5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	fa93 f3a3 	rbit	r3, r3
 8008c66:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008c68:	6a3b      	ldr	r3, [r7, #32]
	m_sHandle.Init.FlashSize          = POSITION_VAL(0x4000000) - 1;
 8008c6a:	fab3 f383 	clz	r3, r3
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	3b01      	subs	r3, #1
 8008c72:	461a      	mov	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008c7e:	639a      	str	r2, [r3, #56]	; 0x38
	m_sHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	63da      	str	r2, [r3, #60]	; 0x3c
	m_sHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	641a      	str	r2, [r3, #64]	; 0x40
	m_sHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	645a      	str	r2, [r3, #68]	; 0x44
	if (HAL_QSPI_Init(&m_sHandle) != HAL_OK) {
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	3324      	adds	r3, #36	; 0x24
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fc f8a0 	bl	8004ddc <HAL_QSPI_Init>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	bf14      	ite	ne
 8008ca2:	2301      	movne	r3, #1
 8008ca4:	2300      	moveq	r3, #0
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d005      	beq.n	8008cb8 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x134>
		imp_periphDeinit(DeinitPartial);
 8008cac:	2100      	movs	r1, #0
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f870 	bl	8008d94 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e05d      	b.n	8008d74 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f0>
	}

	//Enable IRQ
	HAL_NVIC_SetPriority(QUADSPI_IRQn, QAD_IRQPRIORITY_FLASH, 0x00);
 8008cb8:	2200      	movs	r2, #0
 8008cba:	210e      	movs	r1, #14
 8008cbc:	205c      	movs	r0, #92	; 0x5c
 8008cbe:	f7fa f8ea 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8008cc2:	205c      	movs	r0, #92	; 0x5c
 8008cc4:	f7fa f903 	bl	8002ece <HAL_NVIC_EnableIRQ>

	//-------------
	//Init Flash IC

	//Reset Memory
	if (imp_resetMemory()) {
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fa3e 	bl	800914a <_ZN11QAD_QuadSPI15imp_resetMemoryEv>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bf14      	ite	ne
 8008cd4:	2301      	movne	r3, #1
 8008cd6:	2300      	moveq	r3, #0
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d005      	beq.n	8008cea <_ZN11QAD_QuadSPI14imp_periphInitEv+0x166>
		imp_periphDeinit(DeinitFull);
 8008cde:	2101      	movs	r1, #1
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f857 	bl	8008d94 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e044      	b.n	8008d74 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f0>
	}

	//Enter QPI Mode
	if (imp_enterMemoryQPI()) {
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fcb5 	bl	800965a <_ZN11QAD_QuadSPI18imp_enterMemoryQPIEv>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bf14      	ite	ne
 8008cf6:	2301      	movne	r3, #1
 8008cf8:	2300      	moveq	r3, #0
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d005      	beq.n	8008d0c <_ZN11QAD_QuadSPI14imp_periphInitEv+0x188>
		imp_periphDeinit(DeinitFull);
 8008d00:	2101      	movs	r1, #1
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f846 	bl	8008d94 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e033      	b.n	8008d74 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f0>
	}

	//Enter Four Byte Address Mode
	if (imp_enterFourByteAddress()) {
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fb73 	bl	80093f8 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	bf14      	ite	ne
 8008d18:	2301      	movne	r3, #1
 8008d1a:	2300      	moveq	r3, #0
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d005      	beq.n	8008d2e <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1aa>
		imp_periphDeinit(DeinitFull);
 8008d22:	2101      	movs	r1, #1
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f835 	bl	8008d94 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e022      	b.n	8008d74 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f0>
	}

	//Configure Memory Dummy Cycles
	if (imp_dummyCyclesCfg()) {
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fbad 	bl	800948e <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	bf14      	ite	ne
 8008d3a:	2301      	movne	r3, #1
 8008d3c:	2300      	moveq	r3, #0
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d005      	beq.n	8008d50 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1cc>
		imp_periphDeinit(DeinitFull);
 8008d44:	2101      	movs	r1, #1
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f824 	bl	8008d94 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e011      	b.n	8008d74 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f0>
	}

	//Configure Output Drive Strength
	if (imp_outputDriveStrengthCfg()) {
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fcdb 	bl	800970c <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	bf14      	ite	ne
 8008d5c:	2301      	movne	r3, #1
 8008d5e:	2300      	moveq	r3, #0
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d005      	beq.n	8008d72 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1ee>
		imp_periphDeinit(DeinitFull);
 8008d66:	2101      	movs	r1, #1
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f813 	bl	8008d94 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e000      	b.n	8008d74 <_ZN11QAD_QuadSPI14imp_periphInitEv+0x1f0>
	}

	//Return
	return QA_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3728      	adds	r7, #40	; 0x28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	40020400 	.word	0x40020400
 8008d80:	40020800 	.word	0x40020800
 8008d84:	40021000 	.word	0x40021000
 8008d88:	40020c00 	.word	0x40020c00
 8008d8c:	40023800 	.word	0x40023800
 8008d90:	a0001000 	.word	0xa0001000

08008d94 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE>:


//QAD_QuadSPI::imp_periphDeinit
//QAD_QuadSPI Peripheral Initialization Method
void QAD_QuadSPI::imp_periphDeinit(QAD_QuadSPI::DeinitMode eMode) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]

	if (eMode == DeinitFull) {
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d104      	bne.n	8008db0 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x1c>

		//Deinitialize QuadSPI Peripheral
		HAL_QSPI_DeInit(&m_sHandle);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3324      	adds	r3, #36	; 0x24
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fc f892 	bl	8004ed4 <HAL_QSPI_DeInit>

	}

	//Disable QSPI Clock
	__HAL_RCC_QSPI_CLK_DISABLE();
 8008db0:	4b12      	ldr	r3, [pc, #72]	; (8008dfc <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x68>)
 8008db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db4:	4a11      	ldr	r2, [pc, #68]	; (8008dfc <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x68>)
 8008db6:	f023 0302 	bic.w	r3, r3, #2
 8008dba:	6393      	str	r3, [r2, #56]	; 0x38

	//Deinit GPIOs
	HAL_GPIO_DeInit(QAD_QUADSPI_CS_PORT, QAD_QUADSPI_CS_PIN);
 8008dbc:	2140      	movs	r1, #64	; 0x40
 8008dbe:	4810      	ldr	r0, [pc, #64]	; (8008e00 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x6c>)
 8008dc0:	f7fa ff76 	bl	8003cb0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_QUADSPI_CLK_PORT, QAD_QUADSPI_CLK_PIN);
 8008dc4:	2104      	movs	r1, #4
 8008dc6:	480e      	ldr	r0, [pc, #56]	; (8008e00 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x6c>)
 8008dc8:	f7fa ff72 	bl	8003cb0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_QUADSPI_DATA0_PORT, QAD_QUADSPI_DATA0_PIN);
 8008dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008dd0:	480c      	ldr	r0, [pc, #48]	; (8008e04 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x70>)
 8008dd2:	f7fa ff6d 	bl	8003cb0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_QUADSPI_DATA1_PORT, QAD_QUADSPI_DATA1_PIN);
 8008dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008dda:	480a      	ldr	r0, [pc, #40]	; (8008e04 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x70>)
 8008ddc:	f7fa ff68 	bl	8003cb0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_QUADSPI_DATA2_PORT, QAD_QUADSPI_DATA2_PIN);
 8008de0:	2104      	movs	r1, #4
 8008de2:	4809      	ldr	r0, [pc, #36]	; (8008e08 <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x74>)
 8008de4:	f7fa ff64 	bl	8003cb0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_QUADSPI_DATA3_PORT, QAD_QUADSPI_DATA3_PIN);
 8008de8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008dec:	4807      	ldr	r0, [pc, #28]	; (8008e0c <_ZN11QAD_QuadSPI16imp_periphDeinitENS_10DeinitModeE+0x78>)
 8008dee:	f7fa ff5f 	bl	8003cb0 <HAL_GPIO_DeInit>

}
 8008df2:	bf00      	nop
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	40023800 	.word	0x40023800
 8008e00:	40020400 	.word	0x40020400
 8008e04:	40020800 	.word	0x40020800
 8008e08:	40021000 	.word	0x40021000
 8008e0c:	40020c00 	.word	0x40020c00

08008e10 <_ZN11QAD_QuadSPI8imp_readEmPhm>:
	//----
	//Read

//QAD_QuadSPI::imp_read
//QAD_QuadSPI Data Method
QA_Result QAD_QuadSPI::imp_read(uint32_t uAddr, uint8_t* pData, uint32_t uSize) {
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b092      	sub	sp, #72	; 0x48
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
 8008e1c:	603b      	str	r3, [r7, #0]
	QSPI_CommandTypeDef sCmd;

	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8008e1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e22:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.Instruction       = MX25L512_CMD_READ_4_BYTE_ADDR;
 8008e24:	23ec      	movs	r3, #236	; 0xec
 8008e26:	613b      	str	r3, [r7, #16]
	sCmd.AddressMode       = QSPI_ADDRESS_4_LINES;
 8008e28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.AddressSize		   = QSPI_ADDRESS_32_BITS;
 8008e2e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008e32:	61fb      	str	r3, [r7, #28]
	sCmd.Address           = uAddr;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	617b      	str	r3, [r7, #20]
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 8008e3c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8008e40:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8008e42:	230a      	movs	r3, #10
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.NbData            = uSize;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008e52:	2300      	movs	r3, #0
 8008e54:	647b      	str	r3, [r7, #68]	; 0x44

	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3324      	adds	r3, #36	; 0x24
 8008e5a:	f107 0110 	add.w	r1, r7, #16
 8008e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fc f86e 	bl	8004f44 <HAL_QSPI_Command>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	bf14      	ite	ne
 8008e6e:	2301      	movne	r3, #1
 8008e70:	2300      	moveq	r3, #0
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <_ZN11QAD_QuadSPI8imp_readEmPhm+0x6c>
		return QA_Fail;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e02e      	b.n	8008eda <_ZN11QAD_QuadSPI8imp_readEmPhm+0xca>
	MODIFY_REG(m_sHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_1_CYCLE);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e8a:	605a      	str	r2, [r3, #4]
	if (HAL_QSPI_Receive(&m_sHandle, pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3324      	adds	r3, #36	; 0x24
 8008e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e94:	6879      	ldr	r1, [r7, #4]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fc f944 	bl	8005124 <HAL_QSPI_Receive>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	bf14      	ite	ne
 8008ea2:	2301      	movne	r3, #1
 8008ea4:	2300      	moveq	r3, #0
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00b      	beq.n	8008ec4 <_ZN11QAD_QuadSPI8imp_readEmPhm+0xb4>
		MODIFY_REG(m_sHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_4_CYCLE);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008ebe:	605a      	str	r2, [r3, #4]
		return QA_Fail;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e00a      	b.n	8008eda <_ZN11QAD_QuadSPI8imp_readEmPhm+0xca>
	}
	MODIFY_REG(m_sHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_4_CYCLE);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008ed6:	605a      	str	r2, [r3, #4]

	//Return
	return QA_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3748      	adds	r7, #72	; 0x48
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <_ZN11QAD_QuadSPI17imp_readSubsectorEmPh>:


//QAD_QuadSPI::imp_readSubsector
//QAD_QuadSPI Data Method
QA_Result QAD_QuadSPI::imp_readSubsector(uint32_t uIdx, uint8_t* pData) {
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	60f8      	str	r0, [r7, #12]
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	607a      	str	r2, [r7, #4]
	return imp_read(uIdx * m_uSubsectorSize, pData, m_uSubsectorSize);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	fb02 f103 	mul.w	r1, r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f7ff ff86 	bl	8008e10 <_ZN11QAD_QuadSPI8imp_readEmPhm>
 8008f04:	4603      	mov	r3, r0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <_ZN11QAD_QuadSPI9imp_writeEmPhm>:
//-----
//Write

//QAD_QuadSPI::imp_write
//QAD_QuadSPI Data Method
QA_Result QAD_QuadSPI::imp_write(uint32_t uAddr, uint8_t* pData, uint32_t uSize) {
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b096      	sub	sp, #88	; 0x58
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	607a      	str	r2, [r7, #4]
 8008f1a:	603b      	str	r3, [r7, #0]
	QSPI_CommandTypeDef sCmd;
	uint32_t uEndAddr;
	uint32_t uCurSize;
	uint32_t uCurAddr;

	uCurSize = m_uPageSize - (uAddr % m_uPageSize);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	68d9      	ldr	r1, [r3, #12]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	68da      	ldr	r2, [r3, #12]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f2a:	fb02 f200 	mul.w	r2, r2, r0
 8008f2e:	1a9b      	subs	r3, r3, r2
 8008f30:	1acb      	subs	r3, r1, r3
 8008f32:	657b      	str	r3, [r7, #84]	; 0x54
	if (uCurSize > uSize)
 8008f34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d901      	bls.n	8008f40 <_ZN11QAD_QuadSPI9imp_writeEmPhm+0x32>
		uCurSize = uSize;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	657b      	str	r3, [r7, #84]	; 0x54

	uCurAddr = uAddr;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	653b      	str	r3, [r7, #80]	; 0x50
	uEndAddr = uAddr + uSize;
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	4413      	add	r3, r2
 8008f4a:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8008f4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f50:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.Instruction       = MX25L512_CMD_PAGE_PROG_4_BYTE_ADDR;
 8008f52:	2312      	movs	r3, #18
 8008f54:	617b      	str	r3, [r7, #20]
	sCmd.AddressMode       = QSPI_ADDRESS_4_LINES;
 8008f56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008f5a:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.AddressSize       = QSPI_ADDRESS_32_BITS;
 8008f5c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008f60:	623b      	str	r3, [r7, #32]
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008f62:	2300      	movs	r3, #0
 8008f64:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 8008f66:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8008f6a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DummyCycles       = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008f74:	2300      	movs	r3, #0
 8008f76:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	64bb      	str	r3, [r7, #72]	; 0x48

	do {
		sCmd.Address = uCurAddr;
 8008f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f7e:	61bb      	str	r3, [r7, #24]
		sCmd.NbData  = uCurSize;
 8008f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f82:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (imp_writeEnable())
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f000 fca4 	bl	80098d2 <_ZN11QAD_QuadSPI15imp_writeEnableEv>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	bf14      	ite	ne
 8008f90:	2301      	movne	r3, #1
 8008f92:	2300      	moveq	r3, #0
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <_ZN11QAD_QuadSPI9imp_writeEmPhm+0x90>
			return QA_Fail;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e04f      	b.n	800903e <_ZN11QAD_QuadSPI9imp_writeEmPhm+0x130>
		if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3324      	adds	r3, #36	; 0x24
 8008fa2:	f107 0114 	add.w	r1, r7, #20
 8008fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fb ffca 	bl	8004f44 <HAL_QSPI_Command>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	bf14      	ite	ne
 8008fb6:	2301      	movne	r3, #1
 8008fb8:	2300      	moveq	r3, #0
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <_ZN11QAD_QuadSPI9imp_writeEmPhm+0xb6>
			return QA_Fail;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e03c      	b.n	800903e <_ZN11QAD_QuadSPI9imp_writeEmPhm+0x130>
		if (HAL_QSPI_Transmit(&m_sHandle, pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	3324      	adds	r3, #36	; 0x24
 8008fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fc f816 	bl	8005000 <HAL_QSPI_Transmit>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	bf14      	ite	ne
 8008fda:	2301      	movne	r3, #1
 8008fdc:	2300      	moveq	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <_ZN11QAD_QuadSPI9imp_writeEmPhm+0xda>
			return QA_Fail;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e02a      	b.n	800903e <_ZN11QAD_QuadSPI9imp_writeEmPhm+0x130>
		if (imp_autoPollingMemReady(HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != 0)
 8008fe8:	f241 3188 	movw	r1, #5000	; 0x1388
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 fcc6 	bl	800997e <_ZN11QAD_QuadSPI23imp_autoPollingMemReadyEm>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	bf14      	ite	ne
 8008ff8:	2301      	movne	r3, #1
 8008ffa:	2300      	moveq	r3, #0
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <_ZN11QAD_QuadSPI9imp_writeEmPhm+0xf8>
			return QA_Fail;
 8009002:	2301      	movs	r3, #1
 8009004:	e01b      	b.n	800903e <_ZN11QAD_QuadSPI9imp_writeEmPhm+0x130>

		uCurAddr += uCurSize;
 8009006:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800900a:	4413      	add	r3, r2
 800900c:	653b      	str	r3, [r7, #80]	; 0x50
		pData += uCurSize;
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009012:	4413      	add	r3, r2
 8009014:	607b      	str	r3, [r7, #4]
		uCurSize = ((uCurAddr + m_uPageSize) > uEndAddr) ? (uEndAddr - uCurAddr) : m_uPageSize;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800901c:	4413      	add	r3, r2
 800901e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009020:	429a      	cmp	r2, r3
 8009022:	d203      	bcs.n	800902c <_ZN11QAD_QuadSPI9imp_writeEmPhm+0x11e>
 8009024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	e001      	b.n	8009030 <_ZN11QAD_QuadSPI9imp_writeEmPhm+0x122>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	657b      	str	r3, [r7, #84]	; 0x54
	} while (uCurAddr < uEndAddr);
 8009032:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009036:	429a      	cmp	r2, r3
 8009038:	d200      	bcs.n	800903c <_ZN11QAD_QuadSPI9imp_writeEmPhm+0x12e>
	do {
 800903a:	e79f      	b.n	8008f7c <_ZN11QAD_QuadSPI9imp_writeEmPhm+0x6e>

	//Return
	return QA_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3758      	adds	r7, #88	; 0x58
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <_ZN11QAD_QuadSPI26imp_eraseAndWriteSubsectorEmPh>:


//QAD_QuadSPI::imp_eraseAndWriteSubsector
//QAD_QuadSPI Data Method
QA_Result QAD_QuadSPI::imp_eraseAndWriteSubsector(uint32_t uIdx, uint8_t* pData) {
 8009046:	b580      	push	{r7, lr}
 8009048:	b086      	sub	sp, #24
 800904a:	af00      	add	r7, sp, #0
 800904c:	60f8      	str	r0, [r7, #12]
 800904e:	60b9      	str	r1, [r7, #8]
 8009050:	607a      	str	r2, [r7, #4]

	uint32_t uAddr = uIdx * m_uSubsectorSize;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	689a      	ldr	r2, [r3, #8]
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	fb02 f303 	mul.w	r3, r2, r3
 800905c:	617b      	str	r3, [r7, #20]

	if (imp_eraseSubsectorAddr(uAddr))
 800905e:	6979      	ldr	r1, [r7, #20]
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 f820 	bl	80090a6 <_ZN11QAD_QuadSPI22imp_eraseSubsectorAddrEm>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	bf14      	ite	ne
 800906c:	2301      	movne	r3, #1
 800906e:	2300      	moveq	r3, #0
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <_ZN11QAD_QuadSPI26imp_eraseAndWriteSubsectorEmPh+0x34>
		return QA_Fail;
 8009076:	2301      	movs	r3, #1
 8009078:	e011      	b.n	800909e <_ZN11QAD_QuadSPI26imp_eraseAndWriteSubsectorEmPh+0x58>

	if (imp_write(uAddr, pData, m_uSubsectorSize))
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6979      	ldr	r1, [r7, #20]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f7ff ff43 	bl	8008f0e <_ZN11QAD_QuadSPI9imp_writeEmPhm>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	bf14      	ite	ne
 800908e:	2301      	movne	r3, #1
 8009090:	2300      	moveq	r3, #0
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <_ZN11QAD_QuadSPI26imp_eraseAndWriteSubsectorEmPh+0x56>
		return QA_Fail;
 8009098:	2301      	movs	r3, #1
 800909a:	e000      	b.n	800909e <_ZN11QAD_QuadSPI26imp_eraseAndWriteSubsectorEmPh+0x58>

	//Return
	return QA_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <_ZN11QAD_QuadSPI22imp_eraseSubsectorAddrEm>:
//-----
//Erase

//QAD_QuadSPI::imp_eraseSubsectorAddr
//QAD_QuadSPI Data Method
QA_Result QAD_QuadSPI::imp_eraseSubsectorAddr(uint32_t uAddr) {
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b090      	sub	sp, #64	; 0x40
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCmd;

	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80090b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80090b4:	623b      	str	r3, [r7, #32]
	sCmd.Instruction       = MX25L512_CMD_SUBSECTOR_ERASE_4_BYTE_ADDR;
 80090b6:	2321      	movs	r3, #33	; 0x21
 80090b8:	60bb      	str	r3, [r7, #8]
	sCmd.AddressMode       = QSPI_ADDRESS_4_LINES;
 80090ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80090be:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.AddressSize       = QSPI_ADDRESS_32_BITS;
 80090c0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80090c4:	617b      	str	r3, [r7, #20]
	sCmd.Address           = uAddr;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	60fb      	str	r3, [r7, #12]
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80090ca:	2300      	movs	r3, #0
 80090cc:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.DataMode          = QSPI_DATA_NONE;
 80090ce:	2300      	movs	r3, #0
 80090d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.DummyCycles       = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	61fb      	str	r3, [r7, #28]
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80090da:	2300      	movs	r3, #0
 80090dc:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80090de:	2300      	movs	r3, #0
 80090e0:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (imp_writeEnable() != 0)
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fbf5 	bl	80098d2 <_ZN11QAD_QuadSPI15imp_writeEnableEv>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	bf14      	ite	ne
 80090ee:	2301      	movne	r3, #1
 80090f0:	2300      	moveq	r3, #0
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <_ZN11QAD_QuadSPI22imp_eraseSubsectorAddrEm+0x56>
		return QA_Fail;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e022      	b.n	8009142 <_ZN11QAD_QuadSPI22imp_eraseSubsectorAddrEm+0x9c>
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	3324      	adds	r3, #36	; 0x24
 8009100:	f107 0108 	add.w	r1, r7, #8
 8009104:	f241 3288 	movw	r2, #5000	; 0x1388
 8009108:	4618      	mov	r0, r3
 800910a:	f7fb ff1b 	bl	8004f44 <HAL_QSPI_Command>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	bf14      	ite	ne
 8009114:	2301      	movne	r3, #1
 8009116:	2300      	moveq	r3, #0
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <_ZN11QAD_QuadSPI22imp_eraseSubsectorAddrEm+0x7c>
		return QA_Fail;
 800911e:	2301      	movs	r3, #1
 8009120:	e00f      	b.n	8009142 <_ZN11QAD_QuadSPI22imp_eraseSubsectorAddrEm+0x9c>
	if (imp_autoPollingMemReady(MX25L512_ERASE_SUBSECTOR_MAXTIME))
 8009122:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fc29 	bl	800997e <_ZN11QAD_QuadSPI23imp_autoPollingMemReadyEm>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	bf14      	ite	ne
 8009132:	2301      	movne	r3, #1
 8009134:	2300      	moveq	r3, #0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <_ZN11QAD_QuadSPI22imp_eraseSubsectorAddrEm+0x9a>
		return QA_Fail;
 800913c:	2301      	movs	r3, #1
 800913e:	e000      	b.n	8009142 <_ZN11QAD_QuadSPI22imp_eraseSubsectorAddrEm+0x9c>

	//Return
	return QA_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3740      	adds	r7, #64	; 0x40
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <_ZN11QAD_QuadSPI15imp_resetMemoryEv>:
	//------------------------
	//QAD_QuadSPI Tool Methods

//QAD_QuadSPI::imp_resetMemory
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_resetMemory(void) {
 800914a:	b580      	push	{r7, lr}
 800914c:	b098      	sub	sp, #96	; 0x60
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
	QSPI_AutoPollingTypeDef sCfg;
	uint8_t                 uReg;

	//------------------------------
	//Send reset command in QPI mode
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009152:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009156:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.Instruction       = MX25L512_CMD_RESET_ENABLE;
 8009158:	2366      	movs	r3, #102	; 0x66
 800915a:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800915c:	2300      	movs	r3, #0
 800915e:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009160:	2300      	movs	r3, #0
 8009162:	64bb      	str	r3, [r7, #72]	; 0x48
	sCmd.DataMode          = QSPI_DATA_NONE;
 8009164:	2300      	movs	r3, #0
 8009166:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DummyCycles       = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800916c:	2300      	movs	r3, #0
 800916e:	657b      	str	r3, [r7, #84]	; 0x54
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009170:	2300      	movs	r3, #0
 8009172:	65bb      	str	r3, [r7, #88]	; 0x58
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009174:	2300      	movs	r3, #0
 8009176:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3324      	adds	r3, #36	; 0x24
 800917c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009180:	f241 3288 	movw	r2, #5000	; 0x1388
 8009184:	4618      	mov	r0, r3
 8009186:	f7fb fedd 	bl	8004f44 <HAL_QSPI_Command>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	bf14      	ite	ne
 8009190:	2301      	movne	r3, #1
 8009192:	2300      	moveq	r3, #0
 8009194:	b2db      	uxtb	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	d001      	beq.n	800919e <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x54>
		return QA_Fail;
 800919a:	2301      	movs	r3, #1
 800919c:	e128      	b.n	80093f0 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//-------------------------
	//Send reset memory command
	sCmd.Instruction = MX25L512_CMD_RESET_MEMORY;
 800919e:	2399      	movs	r3, #153	; 0x99
 80091a0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3324      	adds	r3, #36	; 0x24
 80091a6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80091aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fb fec8 	bl	8004f44 <HAL_QSPI_Command>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	bf14      	ite	ne
 80091ba:	2301      	movne	r3, #1
 80091bc:	2300      	moveq	r3, #0
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x7e>
		return QA_Fail;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e113      	b.n	80093f0 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//------------------------------
	//Send reset command in SPI mode
	sCmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80091c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091cc:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.Instruction     = MX25L512_CMD_RESET_ENABLE;
 80091ce:	2366      	movs	r3, #102	; 0x66
 80091d0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3324      	adds	r3, #36	; 0x24
 80091d6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80091da:	f241 3288 	movw	r2, #5000	; 0x1388
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fb feb0 	bl	8004f44 <HAL_QSPI_Command>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	bf14      	ite	ne
 80091ea:	2301      	movne	r3, #1
 80091ec:	2300      	moveq	r3, #0
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0xae>
		return QA_Fail;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e0fb      	b.n	80093f0 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//--------------------------------
	//Delay in case of full chip erase
	HAL_Delay(1000);
 80091f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80091fc:	f7f9 fd28 	bl	8002c50 <HAL_Delay>

	//------------------------------------------------------
	//Configure Automatic Polling Mode to wait for WIP bit=0
	sCfg.Match           = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	613b      	str	r3, [r7, #16]
	sCfg.Mask            = MX25L512_SR_WIP;
 8009204:	2301      	movs	r3, #1
 8009206:	617b      	str	r3, [r7, #20]
	sCfg.MatchMode       = QSPI_MATCH_MODE_AND;
 8009208:	2300      	movs	r3, #0
 800920a:	623b      	str	r3, [r7, #32]
	sCfg.StatusBytesSize = 1;
 800920c:	2301      	movs	r3, #1
 800920e:	61fb      	str	r3, [r7, #28]
	sCfg.Interval        = 0x10;
 8009210:	2310      	movs	r3, #16
 8009212:	61bb      	str	r3, [r7, #24]
	sCfg.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009214:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009218:	627b      	str	r3, [r7, #36]	; 0x24

	sCmd.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800921a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800921e:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.Instruction       = MX25L512_CMD_READ_STATUS_REG;
 8009220:	2305      	movs	r3, #5
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.DataMode          = QSPI_DATA_1_LINE;
 8009224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009228:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_QSPI_AutoPolling(&m_sHandle, &sCmd, &sCfg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009230:	f107 0210 	add.w	r2, r7, #16
 8009234:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009238:	f241 3388 	movw	r3, #5000	; 0x1388
 800923c:	f7fc f80f 	bl	800525e <HAL_QSPI_AutoPolling>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	bf14      	ite	ne
 8009246:	2301      	movne	r3, #1
 8009248:	2300      	moveq	r3, #0
 800924a:	b2db      	uxtb	r3, r3
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x10a>
		return QA_Fail;
 8009250:	2301      	movs	r3, #1
 8009252:	e0cd      	b.n	80093f0 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//-------------------------------------
	//Initialize reading of status register
	sCmd.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009258:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.Instruction       = MX25L512_CMD_READ_STATUS_REG;
 800925a:	2305      	movs	r3, #5
 800925c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800925e:	2300      	movs	r3, #0
 8009260:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009262:	2300      	movs	r3, #0
 8009264:	64bb      	str	r3, [r7, #72]	; 0x48
	sCmd.DataMode          = QSPI_DATA_1_LINE;
 8009266:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800926a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DummyCycles       = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.NbData            = 1;
 8009270:	2301      	movs	r3, #1
 8009272:	653b      	str	r3, [r7, #80]	; 0x50
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009274:	2300      	movs	r3, #0
 8009276:	657b      	str	r3, [r7, #84]	; 0x54
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009278:	2300      	movs	r3, #0
 800927a:	65bb      	str	r3, [r7, #88]	; 0x58
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800927c:	2300      	movs	r3, #0
 800927e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	3324      	adds	r3, #36	; 0x24
 8009284:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009288:	f241 3288 	movw	r2, #5000	; 0x1388
 800928c:	4618      	mov	r0, r3
 800928e:	f7fb fe59 	bl	8004f44 <HAL_QSPI_Command>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	bf14      	ite	ne
 8009298:	2301      	movne	r3, #1
 800929a:	2300      	moveq	r3, #0
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x15c>
			return QA_Fail;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e0a4      	b.n	80093f0 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>
	if (HAL_QSPI_Receive(&m_sHandle, &uReg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	3324      	adds	r3, #36	; 0x24
 80092aa:	f107 010f 	add.w	r1, r7, #15
 80092ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fb ff36 	bl	8005124 <HAL_QSPI_Receive>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	bf14      	ite	ne
 80092be:	2301      	movne	r3, #1
 80092c0:	2300      	moveq	r3, #0
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x182>
		return QA_Fail;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e091      	b.n	80093f0 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//-----------------------
	//Enable write operations
	sCmd.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80092cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092d0:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.Instruction       = MX25L512_CMD_WRITE_ENABLE;
 80092d2:	2306      	movs	r3, #6
 80092d4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 80092d6:	2300      	movs	r3, #0
 80092d8:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80092da:	2300      	movs	r3, #0
 80092dc:	64bb      	str	r3, [r7, #72]	; 0x48
	sCmd.DataMode          = QSPI_DATA_NONE;
 80092de:	2300      	movs	r3, #0
 80092e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DummyCycles       = 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80092e6:	2300      	movs	r3, #0
 80092e8:	657b      	str	r3, [r7, #84]	; 0x54
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80092ea:	2300      	movs	r3, #0
 80092ec:	65bb      	str	r3, [r7, #88]	; 0x58
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80092ee:	2300      	movs	r3, #0
 80092f0:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3324      	adds	r3, #36	; 0x24
 80092f6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80092fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fb fe20 	bl	8004f44 <HAL_QSPI_Command>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	bf14      	ite	ne
 800930a:	2301      	movne	r3, #1
 800930c:	2300      	moveq	r3, #0
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x1ce>
		return QA_Fail;
 8009314:	2301      	movs	r3, #1
 8009316:	e06b      	b.n	80093f0 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//-----------------------------------------------------------
	//Configure Automatic Polling mode to wait for write enabling
	sCfg.Match           = MX25L512_SR_WREN;
 8009318:	2302      	movs	r3, #2
 800931a:	613b      	str	r3, [r7, #16]
	sCfg.Mask            = MX25L512_SR_WREN;
 800931c:	2302      	movs	r3, #2
 800931e:	617b      	str	r3, [r7, #20]
	sCfg.MatchMode       = QSPI_MATCH_MODE_AND;
 8009320:	2300      	movs	r3, #0
 8009322:	623b      	str	r3, [r7, #32]
	sCfg.StatusBytesSize = 1;
 8009324:	2301      	movs	r3, #1
 8009326:	61fb      	str	r3, [r7, #28]
	sCfg.Interval        = 0x10;
 8009328:	2310      	movs	r3, #16
 800932a:	61bb      	str	r3, [r7, #24]
	sCfg.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800932c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009330:	627b      	str	r3, [r7, #36]	; 0x24

	sCmd.Instruction    = MX25L512_CMD_READ_STATUS_REG;
 8009332:	2305      	movs	r3, #5
 8009334:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.DataMode       = QSPI_DATA_1_LINE;
 8009336:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800933a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_QSPI_AutoPolling(&m_sHandle, &sCmd, &sCfg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009342:	f107 0210 	add.w	r2, r7, #16
 8009346:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800934a:	f241 3388 	movw	r3, #5000	; 0x1388
 800934e:	f7fb ff86 	bl	800525e <HAL_QSPI_AutoPolling>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	bf14      	ite	ne
 8009358:	2301      	movne	r3, #1
 800935a:	2300      	moveq	r3, #0
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x21c>
		return QA_Fail;
 8009362:	2301      	movs	r3, #1
 8009364:	e044      	b.n	80093f0 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//--------------------
	//Enable Quad SPI Mode
	sCmd.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800936a:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.Instruction       = MX25L512_CMD_WRITE_STATUS_CFG_REG;
 800936c:	2301      	movs	r3, #1
 800936e:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 8009370:	2300      	movs	r3, #0
 8009372:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009374:	2300      	movs	r3, #0
 8009376:	64bb      	str	r3, [r7, #72]	; 0x48
	sCmd.DataMode          = QSPI_DATA_1_LINE;
 8009378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800937c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DummyCycles       = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.NbData            = 1;
 8009382:	2301      	movs	r3, #1
 8009384:	653b      	str	r3, [r7, #80]	; 0x50
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009386:	2300      	movs	r3, #0
 8009388:	657b      	str	r3, [r7, #84]	; 0x54
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800938a:	2300      	movs	r3, #0
 800938c:	65bb      	str	r3, [r7, #88]	; 0x58
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800938e:	2300      	movs	r3, #0
 8009390:	65fb      	str	r3, [r7, #92]	; 0x5c

	uReg |= MX25L512_SR_QUADEN;
 8009392:	7bfb      	ldrb	r3, [r7, #15]
 8009394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009398:	b2db      	uxtb	r3, r3
 800939a:	73fb      	strb	r3, [r7, #15]
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	3324      	adds	r3, #36	; 0x24
 80093a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80093a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fb fdcb 	bl	8004f44 <HAL_QSPI_Command>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bf14      	ite	ne
 80093b4:	2301      	movne	r3, #1
 80093b6:	2300      	moveq	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x278>
		return QA_Fail;
 80093be:	2301      	movs	r3, #1
 80093c0:	e016      	b.n	80093f0 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>
	if (HAL_QSPI_Transmit(&m_sHandle, &uReg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3324      	adds	r3, #36	; 0x24
 80093c6:	f107 010f 	add.w	r1, r7, #15
 80093ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fb fe16 	bl	8005000 <HAL_QSPI_Transmit>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	bf14      	ite	ne
 80093da:	2301      	movne	r3, #1
 80093dc:	2300      	moveq	r3, #0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x29e>
		return QA_Fail;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e003      	b.n	80093f0 <_ZN11QAD_QuadSPI15imp_resetMemoryEv+0x2a6>

	//---------------------------------------------------
	//40ms write status/configuration register cycle time
	HAL_Delay(40);
 80093e8:	2028      	movs	r0, #40	; 0x28
 80093ea:	f7f9 fc31 	bl	8002c50 <HAL_Delay>

	//Return
	return QA_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3760      	adds	r7, #96	; 0x60
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv>:


//QAD_QuadSPI::imp_enterFourByteAddress
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_enterFourByteAddress(void) {
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b090      	sub	sp, #64	; 0x40
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef sCmd;

	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009400:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009404:	623b      	str	r3, [r7, #32]
	sCmd.Instruction       = MX25L512_CMD_ENTER_4_BYTE_ADDR_MODE;
 8009406:	23b7      	movs	r3, #183	; 0xb7
 8009408:	60bb      	str	r3, [r7, #8]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800940a:	2300      	movs	r3, #0
 800940c:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800940e:	2300      	movs	r3, #0
 8009410:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.DataMode          = QSPI_DATA_NONE;
 8009412:	2300      	movs	r3, #0
 8009414:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.DummyCycles       = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	61fb      	str	r3, [r7, #28]
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800941a:	2300      	movs	r3, #0
 800941c:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800941e:	2300      	movs	r3, #0
 8009420:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009422:	2300      	movs	r3, #0
 8009424:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (imp_writeEnable())
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fa53 	bl	80098d2 <_ZN11QAD_QuadSPI15imp_writeEnableEv>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	bf14      	ite	ne
 8009432:	2301      	movne	r3, #1
 8009434:	2300      	moveq	r3, #0
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv+0x48>
		return QA_Fail;
 800943c:	2301      	movs	r3, #1
 800943e:	e022      	b.n	8009486 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv+0x8e>
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3324      	adds	r3, #36	; 0x24
 8009444:	f107 0108 	add.w	r1, r7, #8
 8009448:	f241 3288 	movw	r2, #5000	; 0x1388
 800944c:	4618      	mov	r0, r3
 800944e:	f7fb fd79 	bl	8004f44 <HAL_QSPI_Command>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	bf14      	ite	ne
 8009458:	2301      	movne	r3, #1
 800945a:	2300      	moveq	r3, #0
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv+0x6e>
		return QA_Fail;
 8009462:	2301      	movs	r3, #1
 8009464:	e00f      	b.n	8009486 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv+0x8e>
	if (imp_autoPollingMemReady(HAL_QSPI_TIMEOUT_DEFAULT_VALUE))
 8009466:	f241 3188 	movw	r1, #5000	; 0x1388
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa87 	bl	800997e <_ZN11QAD_QuadSPI23imp_autoPollingMemReadyEm>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	bf14      	ite	ne
 8009476:	2301      	movne	r3, #1
 8009478:	2300      	moveq	r3, #0
 800947a:	b2db      	uxtb	r3, r3
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv+0x8c>
		return QA_Fail;
 8009480:	2301      	movs	r3, #1
 8009482:	e000      	b.n	8009486 <_ZN11QAD_QuadSPI24imp_enterFourByteAddressEv+0x8e>

	//Return
	return QA_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3740      	adds	r7, #64	; 0x40
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv>:


//QAD_QuadSPI::imp_dummyCyclesCfg
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_dummyCyclesCfg(void) {
 800948e:	b580      	push	{r7, lr}
 8009490:	b094      	sub	sp, #80	; 0x50
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef sCmd;
	uint8_t uReg[2];

	//--------------------
	//Read status register
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009496:	f44f 7340 	mov.w	r3, #768	; 0x300
 800949a:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.Instruction       = MX25L512_CMD_READ_STATUS_REG;
 800949c:	2305      	movs	r3, #5
 800949e:	613b      	str	r3, [r7, #16]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 80094a0:	2300      	movs	r3, #0
 80094a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80094a4:	2300      	movs	r3, #0
 80094a6:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 80094a8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DummyCycles       = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.NbData            = 1;
 80094b2:	2301      	movs	r3, #1
 80094b4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80094ba:	2300      	movs	r3, #0
 80094bc:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80094be:	2300      	movs	r3, #0
 80094c0:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	3324      	adds	r3, #36	; 0x24
 80094c6:	f107 0110 	add.w	r1, r7, #16
 80094ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fb fd38 	bl	8004f44 <HAL_QSPI_Command>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	bf14      	ite	ne
 80094da:	2301      	movne	r3, #1
 80094dc:	2300      	moveq	r3, #0
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x5a>
		return QA_Fail;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e0b4      	b.n	8009652 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>
	if (HAL_QSPI_Receive(&m_sHandle, &(uReg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	3324      	adds	r3, #36	; 0x24
 80094ec:	f107 010c 	add.w	r1, r7, #12
 80094f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fb fe15 	bl	8005124 <HAL_QSPI_Receive>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	bf14      	ite	ne
 8009500:	2301      	movne	r3, #1
 8009502:	2300      	moveq	r3, #0
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x80>
		return QA_Fail;
 800950a:	2301      	movs	r3, #1
 800950c:	e0a1      	b.n	8009652 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>

	//---------------------------
	//Read configuration register
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800950e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009512:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.Instruction       = MX25L512_CMD_READ_CFG_REG;
 8009514:	2315      	movs	r3, #21
 8009516:	613b      	str	r3, [r7, #16]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 8009518:	2300      	movs	r3, #0
 800951a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800951c:	2300      	movs	r3, #0
 800951e:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 8009520:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009524:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DummyCycles       = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.NbData            = 1;
 800952a:	2301      	movs	r3, #1
 800952c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800952e:	2300      	movs	r3, #0
 8009530:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009532:	2300      	movs	r3, #0
 8009534:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009536:	2300      	movs	r3, #0
 8009538:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3324      	adds	r3, #36	; 0x24
 800953e:	f107 0110 	add.w	r1, r7, #16
 8009542:	f241 3288 	movw	r2, #5000	; 0x1388
 8009546:	4618      	mov	r0, r3
 8009548:	f7fb fcfc 	bl	8004f44 <HAL_QSPI_Command>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	bf14      	ite	ne
 8009552:	2301      	movne	r3, #1
 8009554:	2300      	moveq	r3, #0
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0xd2>
		return QA_Fail;
 800955c:	2301      	movs	r3, #1
 800955e:	e078      	b.n	8009652 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>
	if (HAL_QSPI_Receive(&m_sHandle, &(uReg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009566:	f107 030c 	add.w	r3, r7, #12
 800956a:	3301      	adds	r3, #1
 800956c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009570:	4619      	mov	r1, r3
 8009572:	f7fb fdd7 	bl	8005124 <HAL_QSPI_Receive>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	bf14      	ite	ne
 800957c:	2301      	movne	r3, #1
 800957e:	2300      	moveq	r3, #0
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0xfc>
		return QA_Fail;
 8009586:	2301      	movs	r3, #1
 8009588:	e063      	b.n	8009652 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>

	//-----------------------
	//Enable Write Operations
	if (imp_writeEnable())
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f9a1 	bl	80098d2 <_ZN11QAD_QuadSPI15imp_writeEnableEv>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	bf14      	ite	ne
 8009596:	2301      	movne	r3, #1
 8009598:	2300      	moveq	r3, #0
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x116>
		return QA_Fail;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e056      	b.n	8009652 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>

	//---------------------------------------------------
	//Update Configuration Register with new dummy cycles
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80095a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80095a8:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.Instruction       = MX25L512_CMD_WRITE_STATUS_CFG_REG;
 80095aa:	2301      	movs	r3, #1
 80095ac:	613b      	str	r3, [r7, #16]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 80095ae:	2300      	movs	r3, #0
 80095b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80095b2:	2300      	movs	r3, #0
 80095b4:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 80095b6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80095ba:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DummyCycles       = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.NbData            = 2;
 80095c0:	2302      	movs	r3, #2
 80095c2:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80095c4:	2300      	movs	r3, #0
 80095c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80095c8:	2300      	movs	r3, #0
 80095ca:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80095cc:	2300      	movs	r3, #0
 80095ce:	647b      	str	r3, [r7, #68]	; 0x44

	//MX25L512_DUMMY_CYCLES_READ_QUAD = 3 (10 cycles in QPI mode)
	MODIFY_REG(uReg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80095d0:	7b7b      	ldrb	r3, [r7, #13]
 80095d2:	b25b      	sxtb	r3, r3
 80095d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095d8:	b25a      	sxtb	r2, r3
 80095da:	23c0      	movs	r3, #192	; 0xc0
 80095dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e0:	fa93 f3a3 	rbit	r3, r3
 80095e4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80095e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095e8:	fab3 f383 	clz	r3, r3
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	4619      	mov	r1, r3
 80095f0:	2303      	movs	r3, #3
 80095f2:	408b      	lsls	r3, r1
 80095f4:	b25b      	sxtb	r3, r3
 80095f6:	4313      	orrs	r3, r2
 80095f8:	b25b      	sxtb	r3, r3
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	737b      	strb	r3, [r7, #13]

	//Configure the write volatile configuration register command
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	3324      	adds	r3, #36	; 0x24
 8009602:	f107 0110 	add.w	r1, r7, #16
 8009606:	f241 3288 	movw	r2, #5000	; 0x1388
 800960a:	4618      	mov	r0, r3
 800960c:	f7fb fc9a 	bl	8004f44 <HAL_QSPI_Command>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	bf14      	ite	ne
 8009616:	2301      	movne	r3, #1
 8009618:	2300      	moveq	r3, #0
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b00      	cmp	r3, #0
 800961e:	d001      	beq.n	8009624 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x196>
		return QA_Fail;
 8009620:	2301      	movs	r3, #1
 8009622:	e016      	b.n	8009652 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>
	if (HAL_QSPI_Transmit(&m_sHandle, &(uReg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3324      	adds	r3, #36	; 0x24
 8009628:	f107 010c 	add.w	r1, r7, #12
 800962c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009630:	4618      	mov	r0, r3
 8009632:	f7fb fce5 	bl	8005000 <HAL_QSPI_Transmit>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	bf14      	ite	ne
 800963c:	2301      	movne	r3, #1
 800963e:	2300      	moveq	r3, #0
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1bc>
		return QA_Fail;
 8009646:	2301      	movs	r3, #1
 8009648:	e003      	b.n	8009652 <_ZN11QAD_QuadSPI18imp_dummyCyclesCfgEv+0x1c4>

	//40ms - Write Status/Configuration Register Cycle Time
	HAL_Delay(40);
 800964a:	2028      	movs	r0, #40	; 0x28
 800964c:	f7f9 fb00 	bl	8002c50 <HAL_Delay>

	//Return
	return QA_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3750      	adds	r7, #80	; 0x50
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <_ZN11QAD_QuadSPI18imp_enterMemoryQPIEv>:


//QAD_QuadSPI::imp_enterMemoryQPI
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_enterMemoryQPI(void) {
 800965a:	b580      	push	{r7, lr}
 800965c:	b096      	sub	sp, #88	; 0x58
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef     sCmd;
	QSPI_AutoPollingTypeDef sCfg;

	//Send QPI Enable Command
	sCmd.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009666:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.Instruction       = MX25L512_CMD_ENTER_QUAD_MODE;
 8009668:	2335      	movs	r3, #53	; 0x35
 800966a:	623b      	str	r3, [r7, #32]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800966c:	2300      	movs	r3, #0
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009670:	2300      	movs	r3, #0
 8009672:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.DataMode          = QSPI_DATA_NONE;
 8009674:	2300      	movs	r3, #0
 8009676:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.DummyCycles       = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800967c:	2300      	movs	r3, #0
 800967e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009680:	2300      	movs	r3, #0
 8009682:	653b      	str	r3, [r7, #80]	; 0x50
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009684:	2300      	movs	r3, #0
 8009686:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3324      	adds	r3, #36	; 0x24
 800968c:	f107 0120 	add.w	r1, r7, #32
 8009690:	f241 3288 	movw	r2, #5000	; 0x1388
 8009694:	4618      	mov	r0, r3
 8009696:	f7fb fc55 	bl	8004f44 <HAL_QSPI_Command>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	bf14      	ite	ne
 80096a0:	2301      	movne	r3, #1
 80096a2:	2300      	moveq	r3, #0
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <_ZN11QAD_QuadSPI18imp_enterMemoryQPIEv+0x54>
		return QA_Fail;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e02a      	b.n	8009704 <_ZN11QAD_QuadSPI18imp_enterMemoryQPIEv+0xaa>

	//Configure automatic polling mode to wait for QUADEN bit=1 and WIP bit=0
	sCfg.Match           = MX25L512_SR_QUADEN;
 80096ae:	2340      	movs	r3, #64	; 0x40
 80096b0:	60bb      	str	r3, [r7, #8]
	sCfg.Mask            = MX25L512_SR_QUADEN | MX25L512_SR_WIP;
 80096b2:	2341      	movs	r3, #65	; 0x41
 80096b4:	60fb      	str	r3, [r7, #12]
	sCfg.MatchMode       = QSPI_MATCH_MODE_AND;
 80096b6:	2300      	movs	r3, #0
 80096b8:	61bb      	str	r3, [r7, #24]
	sCfg.StatusBytesSize = 1;
 80096ba:	2301      	movs	r3, #1
 80096bc:	617b      	str	r3, [r7, #20]
	sCfg.Interval        = 0x10;
 80096be:	2310      	movs	r3, #16
 80096c0:	613b      	str	r3, [r7, #16]
	sCfg.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80096c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80096c6:	61fb      	str	r3, [r7, #28]

	sCmd.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80096c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80096cc:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.Instruction     = MX25L512_CMD_READ_STATUS_REG;
 80096ce:	2305      	movs	r3, #5
 80096d0:	623b      	str	r3, [r7, #32]
	sCmd.DataMode        = QSPI_DATA_4_LINES;
 80096d2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80096d6:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_QSPI_AutoPolling(&m_sHandle, &sCmd, &sCfg, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80096de:	f107 0208 	add.w	r2, r7, #8
 80096e2:	f107 0120 	add.w	r1, r7, #32
 80096e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80096ea:	f7fb fdb8 	bl	800525e <HAL_QSPI_AutoPolling>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	bf14      	ite	ne
 80096f4:	2301      	movne	r3, #1
 80096f6:	2300      	moveq	r3, #0
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <_ZN11QAD_QuadSPI18imp_enterMemoryQPIEv+0xa8>
		return QA_Fail;
 80096fe:	2301      	movs	r3, #1
 8009700:	e000      	b.n	8009704 <_ZN11QAD_QuadSPI18imp_enterMemoryQPIEv+0xaa>

	//Return
	return QA_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3758      	adds	r7, #88	; 0x58
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv>:
}


//QAD_QuadSPI::imp_outputDriveStrengthCfg
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_outputDriveStrengthCfg(void) {
 800970c:	b580      	push	{r7, lr}
 800970e:	b094      	sub	sp, #80	; 0x50
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef sCmd;
	uint8_t uReg[2];

	//--------------------
	//Read Status Register
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009714:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009718:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.Instruction       = MX25L512_CMD_READ_STATUS_REG;
 800971a:	2305      	movs	r3, #5
 800971c:	613b      	str	r3, [r7, #16]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800971e:	2300      	movs	r3, #0
 8009720:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009722:	2300      	movs	r3, #0
 8009724:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 8009726:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800972a:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DummyCycles       = 0;
 800972c:	2300      	movs	r3, #0
 800972e:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.NbData            = 1;
 8009730:	2301      	movs	r3, #1
 8009732:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009734:	2300      	movs	r3, #0
 8009736:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009738:	2300      	movs	r3, #0
 800973a:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800973c:	2300      	movs	r3, #0
 800973e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3324      	adds	r3, #36	; 0x24
 8009744:	f107 0110 	add.w	r1, r7, #16
 8009748:	f241 3288 	movw	r2, #5000	; 0x1388
 800974c:	4618      	mov	r0, r3
 800974e:	f7fb fbf9 	bl	8004f44 <HAL_QSPI_Command>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	bf14      	ite	ne
 8009758:	2301      	movne	r3, #1
 800975a:	2300      	moveq	r3, #0
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x5a>
		return QA_Fail;
 8009762:	2301      	movs	r3, #1
 8009764:	e0b1      	b.n	80098ca <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>
	if (HAL_QSPI_Receive(&m_sHandle, &(uReg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	3324      	adds	r3, #36	; 0x24
 800976a:	f107 010c 	add.w	r1, r7, #12
 800976e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009772:	4618      	mov	r0, r3
 8009774:	f7fb fcd6 	bl	8005124 <HAL_QSPI_Receive>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	bf14      	ite	ne
 800977e:	2301      	movne	r3, #1
 8009780:	2300      	moveq	r3, #0
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x80>
		return QA_Fail;
 8009788:	2301      	movs	r3, #1
 800978a:	e09e      	b.n	80098ca <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>

	//--------------------
	//Read Config Register
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800978c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.Instruction       = MX25L512_CMD_READ_CFG_REG;
 8009792:	2315      	movs	r3, #21
 8009794:	613b      	str	r3, [r7, #16]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 8009796:	2300      	movs	r3, #0
 8009798:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800979a:	2300      	movs	r3, #0
 800979c:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 800979e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80097a2:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DummyCycles       = 0;
 80097a4:	2300      	movs	r3, #0
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.NbData            = 1;
 80097a8:	2301      	movs	r3, #1
 80097aa:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80097ac:	2300      	movs	r3, #0
 80097ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80097b0:	2300      	movs	r3, #0
 80097b2:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80097b4:	2300      	movs	r3, #0
 80097b6:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3324      	adds	r3, #36	; 0x24
 80097bc:	f107 0110 	add.w	r1, r7, #16
 80097c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fb fbbd 	bl	8004f44 <HAL_QSPI_Command>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	bf14      	ite	ne
 80097d0:	2301      	movne	r3, #1
 80097d2:	2300      	moveq	r3, #0
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0xd2>
		return QA_Fail;
 80097da:	2301      	movs	r3, #1
 80097dc:	e075      	b.n	80098ca <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>
	if (HAL_QSPI_Receive(&m_sHandle, &(uReg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80097e4:	f107 030c 	add.w	r3, r7, #12
 80097e8:	3301      	adds	r3, #1
 80097ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80097ee:	4619      	mov	r1, r3
 80097f0:	f7fb fc98 	bl	8005124 <HAL_QSPI_Receive>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bf14      	ite	ne
 80097fa:	2301      	movne	r3, #1
 80097fc:	2300      	moveq	r3, #0
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0xfc>
		return QA_Fail;
 8009804:	2301      	movs	r3, #1
 8009806:	e060      	b.n	80098ca <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>

	//-----------------------
	//Enable write operations
	if (imp_writeEnable() != 0)
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f862 	bl	80098d2 <_ZN11QAD_QuadSPI15imp_writeEnableEv>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	bf14      	ite	ne
 8009814:	2301      	movne	r3, #1
 8009816:	2300      	moveq	r3, #0
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x116>
		return QA_Fail;
 800981e:	2301      	movs	r3, #1
 8009820:	e053      	b.n	80098ca <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>

	//----------------------------------------------------------------
	//Update the configuration register with new output drive strength
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009822:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009826:	62bb      	str	r3, [r7, #40]	; 0x28
	sCmd.Instruction       = MX25L512_CMD_WRITE_STATUS_CFG_REG;
 8009828:	2301      	movs	r3, #1
 800982a:	613b      	str	r3, [r7, #16]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 800982c:	2300      	movs	r3, #0
 800982e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009830:	2300      	movs	r3, #0
 8009832:	633b      	str	r3, [r7, #48]	; 0x30
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 8009834:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009838:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DummyCycles       = 0;
 800983a:	2300      	movs	r3, #0
 800983c:	627b      	str	r3, [r7, #36]	; 0x24
	sCmd.NbData            = 2;
 800983e:	2302      	movs	r3, #2
 8009840:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8009842:	2300      	movs	r3, #0
 8009844:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009846:	2300      	movs	r3, #0
 8009848:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800984a:	2300      	movs	r3, #0
 800984c:	647b      	str	r3, [r7, #68]	; 0x44
	MODIFY_REG( uReg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 800984e:	7b7b      	ldrb	r3, [r7, #13]
 8009850:	b25b      	sxtb	r3, r3
 8009852:	f023 0307 	bic.w	r3, r3, #7
 8009856:	b25a      	sxtb	r2, r3
 8009858:	2307      	movs	r3, #7
 800985a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800985c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800985e:	fa93 f3a3 	rbit	r3, r3
 8009862:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8009864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009866:	fab3 f383 	clz	r3, r3
 800986a:	b2db      	uxtb	r3, r3
 800986c:	4619      	mov	r1, r3
 800986e:	2306      	movs	r3, #6
 8009870:	408b      	lsls	r3, r1
 8009872:	b25b      	sxtb	r3, r3
 8009874:	4313      	orrs	r3, r2
 8009876:	b25b      	sxtb	r3, r3
 8009878:	b2db      	uxtb	r3, r3
 800987a:	737b      	strb	r3, [r7, #13]
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	3324      	adds	r3, #36	; 0x24
 8009880:	f107 0110 	add.w	r1, r7, #16
 8009884:	f241 3288 	movw	r2, #5000	; 0x1388
 8009888:	4618      	mov	r0, r3
 800988a:	f7fb fb5b 	bl	8004f44 <HAL_QSPI_Command>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	bf14      	ite	ne
 8009894:	2301      	movne	r3, #1
 8009896:	2300      	moveq	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x196>
		return QA_Fail;
 800989e:	2301      	movs	r3, #1
 80098a0:	e013      	b.n	80098ca <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>
	if (HAL_QSPI_Transmit(&m_sHandle, &(uReg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	3324      	adds	r3, #36	; 0x24
 80098a6:	f107 010c 	add.w	r1, r7, #12
 80098aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fb fba6 	bl	8005000 <HAL_QSPI_Transmit>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	bf14      	ite	ne
 80098ba:	2301      	movne	r3, #1
 80098bc:	2300      	moveq	r3, #0
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1bc>
		return QA_Fail;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e000      	b.n	80098ca <_ZN11QAD_QuadSPI26imp_outputDriveStrengthCfgEv+0x1be>

	//Return
	return QA_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3750      	adds	r7, #80	; 0x50
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <_ZN11QAD_QuadSPI15imp_writeEnableEv>:


//QAD_QuadSPI::imp_writeEnable
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_writeEnable(void) {
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b096      	sub	sp, #88	; 0x58
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef     sCmd;
	QSPI_AutoPollingTypeDef sCfg;

	//-----------------------
	//Enable write operations
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80098da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80098de:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.Instruction       = MX25L512_CMD_WRITE_ENABLE;
 80098e0:	2306      	movs	r3, #6
 80098e2:	623b      	str	r3, [r7, #32]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 80098e4:	2300      	movs	r3, #0
 80098e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80098e8:	2300      	movs	r3, #0
 80098ea:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.DataMode          = QSPI_DATA_NONE;
 80098ec:	2300      	movs	r3, #0
 80098ee:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.DummyCycles       = 0;
 80098f0:	2300      	movs	r3, #0
 80098f2:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80098f4:	2300      	movs	r3, #0
 80098f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80098f8:	2300      	movs	r3, #0
 80098fa:	653b      	str	r3, [r7, #80]	; 0x50
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80098fc:	2300      	movs	r3, #0
 80098fe:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_QSPI_Command(&m_sHandle, &sCmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3324      	adds	r3, #36	; 0x24
 8009904:	f107 0120 	add.w	r1, r7, #32
 8009908:	f241 3288 	movw	r2, #5000	; 0x1388
 800990c:	4618      	mov	r0, r3
 800990e:	f7fb fb19 	bl	8004f44 <HAL_QSPI_Command>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	bf14      	ite	ne
 8009918:	2301      	movne	r3, #1
 800991a:	2300      	moveq	r3, #0
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <_ZN11QAD_QuadSPI15imp_writeEnableEv+0x54>
		return QA_Fail;
 8009922:	2301      	movs	r3, #1
 8009924:	e027      	b.n	8009976 <_ZN11QAD_QuadSPI15imp_writeEnableEv+0xa4>

	//-----------------------------------------------------------
	//Configure automatic polling mode to wait for write enabling
	sCfg.Match           = MX25L512_SR_WREN;
 8009926:	2302      	movs	r3, #2
 8009928:	60bb      	str	r3, [r7, #8]
	sCfg.Mask            = MX25L512_SR_WREN;
 800992a:	2302      	movs	r3, #2
 800992c:	60fb      	str	r3, [r7, #12]
	sCfg.MatchMode       = QSPI_MATCH_MODE_AND;
 800992e:	2300      	movs	r3, #0
 8009930:	61bb      	str	r3, [r7, #24]
	sCfg.StatusBytesSize = 1;
 8009932:	2301      	movs	r3, #1
 8009934:	617b      	str	r3, [r7, #20]
	sCfg.Interval        = 0x10;
 8009936:	2310      	movs	r3, #16
 8009938:	613b      	str	r3, [r7, #16]
	sCfg.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800993a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800993e:	61fb      	str	r3, [r7, #28]

	sCmd.Instruction     = MX25L512_CMD_READ_STATUS_REG;
 8009940:	2305      	movs	r3, #5
 8009942:	623b      	str	r3, [r7, #32]
	sCmd.DataMode        = QSPI_DATA_4_LINES;
 8009944:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009948:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_QSPI_AutoPolling(&m_sHandle, &sCmd, &sCfg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009950:	f107 0208 	add.w	r2, r7, #8
 8009954:	f107 0120 	add.w	r1, r7, #32
 8009958:	f241 3388 	movw	r3, #5000	; 0x1388
 800995c:	f7fb fc7f 	bl	800525e <HAL_QSPI_AutoPolling>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	bf14      	ite	ne
 8009966:	2301      	movne	r3, #1
 8009968:	2300      	moveq	r3, #0
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <_ZN11QAD_QuadSPI15imp_writeEnableEv+0xa2>
		return QA_Fail;
 8009970:	2301      	movs	r3, #1
 8009972:	e000      	b.n	8009976 <_ZN11QAD_QuadSPI15imp_writeEnableEv+0xa4>

	//Return
	return QA_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3758      	adds	r7, #88	; 0x58
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <_ZN11QAD_QuadSPI23imp_autoPollingMemReadyEm>:


//QAD_QuadSPI::imp_autoPollingMemReady
//QAD_QuadSPI Tool Method
QA_Result QAD_QuadSPI::imp_autoPollingMemReady(uint32_t uTimeout) {
 800997e:	b580      	push	{r7, lr}
 8009980:	b096      	sub	sp, #88	; 0x58
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef     sCmd;
	QSPI_AutoPollingTypeDef sCfg;

	//Configure automatic polling mode to wait for memory ready
	sCmd.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009988:	f44f 7340 	mov.w	r3, #768	; 0x300
 800998c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCmd.Instruction       = MX25L512_CMD_READ_STATUS_REG;
 800998e:	2305      	movs	r3, #5
 8009990:	623b      	str	r3, [r7, #32]
	sCmd.AddressMode       = QSPI_ADDRESS_NONE;
 8009992:	2300      	movs	r3, #0
 8009994:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCmd.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009996:	2300      	movs	r3, #0
 8009998:	643b      	str	r3, [r7, #64]	; 0x40
	sCmd.DataMode          = QSPI_DATA_4_LINES;
 800999a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800999e:	647b      	str	r3, [r7, #68]	; 0x44
	sCmd.DummyCycles       = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	637b      	str	r3, [r7, #52]	; 0x34
	sCmd.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80099a4:	2300      	movs	r3, #0
 80099a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCmd.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80099a8:	2300      	movs	r3, #0
 80099aa:	653b      	str	r3, [r7, #80]	; 0x50
	sCmd.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80099ac:	2300      	movs	r3, #0
 80099ae:	657b      	str	r3, [r7, #84]	; 0x54

	sCfg.Match            = 0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	60bb      	str	r3, [r7, #8]
	sCfg.Mask             = MX25L512_SR_WIP;
 80099b4:	2301      	movs	r3, #1
 80099b6:	60fb      	str	r3, [r7, #12]
	sCfg.MatchMode        = QSPI_MATCH_MODE_AND;
 80099b8:	2300      	movs	r3, #0
 80099ba:	61bb      	str	r3, [r7, #24]
	sCfg.StatusBytesSize  = 1;
 80099bc:	2301      	movs	r3, #1
 80099be:	617b      	str	r3, [r7, #20]
	sCfg.Interval         = 0x10;
 80099c0:	2310      	movs	r3, #16
 80099c2:	613b      	str	r3, [r7, #16]
	sCfg.AutomaticStop    = QSPI_AUTOMATIC_STOP_ENABLE;
 80099c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80099c8:	61fb      	str	r3, [r7, #28]

	if (HAL_QSPI_AutoPolling(&m_sHandle, &sCmd, &sCfg, uTimeout) != HAL_OK)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80099d0:	f107 0208 	add.w	r2, r7, #8
 80099d4:	f107 0120 	add.w	r1, r7, #32
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	f7fb fc40 	bl	800525e <HAL_QSPI_AutoPolling>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	bf14      	ite	ne
 80099e4:	2301      	movne	r3, #1
 80099e6:	2300      	moveq	r3, #0
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <_ZN11QAD_QuadSPI23imp_autoPollingMemReadyEm+0x74>
		return QA_Fail;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e000      	b.n	80099f4 <_ZN11QAD_QuadSPI23imp_autoPollingMemReadyEm+0x76>

	//Return No Error
	return QA_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3758      	adds	r7, #88	; 0x58
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <_ZN7QAD_RNG8imp_initEv>:
//QAD_RNG Initialization Method
//
//To be called from static method init()
//Used to initialize the RNG peripheral
//Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
QA_Result QAD_RNG::imp_init(void) {
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]

	//Check peripheral is not already initialized, and return QA_OK if it is
  if (m_eInitState)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <_ZN7QAD_RNG8imp_initEv+0x14>
  	return QA_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	e033      	b.n	8009a78 <_ZN7QAD_RNG8imp_initEv+0x7c>

  //Enable RNG Peripheral Clock
  __HAL_RCC_RNG_CLK_ENABLE();
 8009a10:	4b1b      	ldr	r3, [pc, #108]	; (8009a80 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8009a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a14:	4a1a      	ldr	r2, [pc, #104]	; (8009a80 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8009a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a1a:	6353      	str	r3, [r2, #52]	; 0x34
 8009a1c:	4b18      	ldr	r3, [pc, #96]	; (8009a80 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8009a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_RNG_FORCE_RESET();
 8009a28:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	4a14      	ldr	r2, [pc, #80]	; (8009a80 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8009a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a32:	6153      	str	r3, [r2, #20]
  __HAL_RCC_RNG_RELEASE_RESET();
 8009a34:	4b12      	ldr	r3, [pc, #72]	; (8009a80 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	4a11      	ldr	r2, [pc, #68]	; (8009a80 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8009a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a3e:	6153      	str	r3, [r2, #20]

  //Initialize RNG Peripheral
  m_sHandle.Instance = RNG;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a10      	ldr	r2, [pc, #64]	; (8009a84 <_ZN7QAD_RNG8imp_initEv+0x88>)
 8009a44:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&m_sHandle) != HAL_OK) {
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	3304      	adds	r3, #4
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fc fef6 	bl	800683c <HAL_RNG_Init>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	bf14      	ite	ne
 8009a56:	2301      	movne	r3, #1
 8009a58:	2300      	moveq	r3, #0
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d007      	beq.n	8009a70 <_ZN7QAD_RNG8imp_initEv+0x74>
  	__HAL_RCC_RNG_CLK_DISABLE();
 8009a60:	4b07      	ldr	r3, [pc, #28]	; (8009a80 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8009a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a64:	4a06      	ldr	r2, [pc, #24]	; (8009a80 <_ZN7QAD_RNG8imp_initEv+0x84>)
 8009a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a6a:	6353      	str	r3, [r2, #52]	; 0x34
  	return QA_Fail;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e003      	b.n	8009a78 <_ZN7QAD_RNG8imp_initEv+0x7c>
  }

  //Set Driver State as being initialized
  m_eInitState = QA_Initialized;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	701a      	strb	r2, [r3, #0]

  //Return
  return QA_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	40023800 	.word	0x40023800
 8009a84:	50060800 	.word	0x50060800

08009a88 <_ZN7QAD_RTC8imp_initEv>:
//QAD_RTC Initialization Method
//
//To be called by static method init()
//Used to initialize the RTC peripheral
//Returns QA_OK if the initialization is successful, or QA_Fail if initialization fails
QA_Result QAD_RTC::imp_init(void) {
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	if (m_eInitState)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <_ZN7QAD_RTC8imp_initEv+0x14>
		return QA_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	e045      	b.n	8009b28 <_ZN7QAD_RTC8imp_initEv+0xa0>

	//Enable RTC Clock
	__HAL_RCC_RTC_CLK_ENABLE();
 8009a9c:	4b24      	ldr	r3, [pc, #144]	; (8009b30 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa0:	4a23      	ldr	r2, [pc, #140]	; (8009b30 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8009aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8009aa8:	4b21      	ldr	r3, [pc, #132]	; (8009b30 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ab0:	60fb      	str	r3, [r7, #12]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_RTC_ENABLE();
 8009ab4:	4b1e      	ldr	r3, [pc, #120]	; (8009b30 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8009ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab8:	4a1d      	ldr	r2, [pc, #116]	; (8009b30 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8009aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009abe:	6713      	str	r3, [r2, #112]	; 0x70

	//Init RTC Peripheral
	m_sHandle.Instance               = RTC;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a1c      	ldr	r2, [pc, #112]	; (8009b34 <_ZN7QAD_RTC8imp_initEv+0xac>)
 8009ac4:	605a      	str	r2, [r3, #4]
	m_sHandle.Init.HourFormat        = RTC_HOURFORMAT_24;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	609a      	str	r2, [r3, #8]
	m_sHandle.Init.AsynchPrediv      = 127;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	227f      	movs	r2, #127	; 0x7f
 8009ad0:	60da      	str	r2, [r3, #12]
	m_sHandle.Init.SynchPrediv       = 255;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	22ff      	movs	r2, #255	; 0xff
 8009ad6:	611a      	str	r2, [r3, #16]
	m_sHandle.Init.OutPut            = RTC_OUTPUT_DISABLE;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	615a      	str	r2, [r3, #20]
	m_sHandle.Init.OutPutPolarity    = RTC_OUTPUT_POLARITY_HIGH;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	619a      	str	r2, [r3, #24]
	m_sHandle.Init.OutPutType        = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&m_sHandle) != HAL_OK) {
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3304      	adds	r3, #4
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fc fed8 	bl	80068a4 <HAL_RTC_Init>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	bf14      	ite	ne
 8009afa:	2301      	movne	r3, #1
 8009afc:	2300      	moveq	r3, #0
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00d      	beq.n	8009b20 <_ZN7QAD_RTC8imp_initEv+0x98>
		__HAL_RCC_RTC_DISABLE();
 8009b04:	4b0a      	ldr	r3, [pc, #40]	; (8009b30 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8009b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b08:	4a09      	ldr	r2, [pc, #36]	; (8009b30 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8009b0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b0e:	6713      	str	r3, [r2, #112]	; 0x70
		__HAL_RCC_RTC_CLK_DISABLE();
 8009b10:	4b07      	ldr	r3, [pc, #28]	; (8009b30 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8009b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b14:	4a06      	ldr	r2, [pc, #24]	; (8009b30 <_ZN7QAD_RTC8imp_initEv+0xa8>)
 8009b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b1a:	6413      	str	r3, [r2, #64]	; 0x40
		return QA_Fail;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e003      	b.n	8009b28 <_ZN7QAD_RTC8imp_initEv+0xa0>
	}

	//Update m_sTime and m_sDate with values currently stored in RTC
	imp_update();
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f809 	bl	8009b38 <_ZN7QAD_RTC10imp_updateEv>

	//Return
	return QA_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	40023800 	.word	0x40023800
 8009b34:	40002800 	.word	0x40002800

08009b38 <_ZN7QAD_RTC10imp_updateEv>:
//
//To be called from static update() method
//Captures the current time and date and stores in m_sTime and m_sDate, so that values can
//be retrieved by the below data methods
//Returns QA_OK if successful, or QA_Fail if unable to get the current time/date
QA_Result QAD_RTC::imp_update(void) {
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]

	//Retrieve current time values from RTC and store in m_sTime structure in binary format
	//Return QA_Fail if not successful
	if (HAL_RTC_GetTime(&m_sHandle, &m_sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	1d18      	adds	r0, r3, #4
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3324      	adds	r3, #36	; 0x24
 8009b48:	2200      	movs	r2, #0
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	f7fc ff46 	bl	80069dc <HAL_RTC_GetTime>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	bf14      	ite	ne
 8009b56:	2301      	movne	r3, #1
 8009b58:	2300      	moveq	r3, #0
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <_ZN7QAD_RTC10imp_updateEv+0x2c>
		return QA_Fail;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e012      	b.n	8009b8a <_ZN7QAD_RTC10imp_updateEv+0x52>
	}

	//Retrieve current date values from RTC and store in m_sDate structure in binary format
	//Return QA_Fail if not successful
	if (HAL_RTC_GetDate(&m_sHandle, &m_sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	1d18      	adds	r0, r3, #4
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	333c      	adds	r3, #60	; 0x3c
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4619      	mov	r1, r3
 8009b70:	f7fc ff92 	bl	8006a98 <HAL_RTC_GetDate>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	bf14      	ite	ne
 8009b7a:	2301      	movne	r3, #1
 8009b7c:	2300      	moveq	r3, #0
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <_ZN7QAD_RTC10imp_updateEv+0x50>
		return QA_Fail;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e000      	b.n	8009b8a <_ZN7QAD_RTC10imp_updateEv+0x52>
	}

	//Return
	return QA_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 8009b98:	4b10      	ldr	r3, [pc, #64]	; (8009bdc <_ZN11QAD_UARTMgr3getEv+0x48>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	f3bf 8f5b 	dmb	ish
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	bf0c      	ite	eq
 8009baa:	2301      	moveq	r3, #1
 8009bac:	2300      	movne	r3, #0
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d010      	beq.n	8009bd6 <_ZN11QAD_UARTMgr3getEv+0x42>
 8009bb4:	4809      	ldr	r0, [pc, #36]	; (8009bdc <_ZN11QAD_UARTMgr3getEv+0x48>)
 8009bb6:	f002 f97e 	bl	800beb6 <__cxa_guard_acquire>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	bf14      	ite	ne
 8009bc0:	2301      	movne	r3, #1
 8009bc2:	2300      	moveq	r3, #0
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d005      	beq.n	8009bd6 <_ZN11QAD_UARTMgr3getEv+0x42>
 8009bca:	4805      	ldr	r0, [pc, #20]	; (8009be0 <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8009bcc:	f000 fba0 	bl	800a310 <_ZN11QAD_UARTMgrC1Ev>
 8009bd0:	4802      	ldr	r0, [pc, #8]	; (8009bdc <_ZN11QAD_UARTMgr3getEv+0x48>)
 8009bd2:	f002 f97c 	bl	800bece <__cxa_guard_release>
		return instance;
 8009bd6:	4b02      	ldr	r3, [pc, #8]	; (8009be0 <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	20000434 	.word	0x20000434
 8009be0:	200003d4 	.word	0x200003d4

08009be4 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	4603      	mov	r3, r0
 8009bec:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8009bee:	79fb      	ldrb	r3, [r7, #7]
 8009bf0:	2b07      	cmp	r3, #7
 8009bf2:	d901      	bls.n	8009bf8 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	e00a      	b.n	8009c0e <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 8009bf8:	f7ff ffcc 	bl	8009b94 <_ZN11QAD_UARTMgr3getEv>
 8009bfc:	4601      	mov	r1, r0
 8009bfe:	79fa      	ldrb	r2, [r7, #7]
 8009c00:	4613      	mov	r3, r2
 8009c02:	005b      	lsls	r3, r3, #1
 8009c04:	4413      	add	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	440b      	add	r3, r1
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	781b      	ldrb	r3, [r3, #0]
	}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f769xx.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b082      	sub	sp, #8
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8009c20:	79fb      	ldrb	r3, [r7, #7]
 8009c22:	2b07      	cmp	r3, #7
 8009c24:	d901      	bls.n	8009c2a <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 8009c26:	2300      	movs	r3, #0
 8009c28:	e00a      	b.n	8009c40 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 8009c2a:	f7ff ffb3 	bl	8009b94 <_ZN11QAD_UARTMgr3getEv>
 8009c2e:	4601      	mov	r1, r0
 8009c30:	79fa      	ldrb	r2, [r7, #7]
 8009c32:	4613      	mov	r3, r2
 8009c34:	005b      	lsls	r3, r3, #1
 8009c36:	4413      	add	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	440b      	add	r3, r1
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	681b      	ldr	r3, [r3, #0]
	}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	2b07      	cmp	r3, #7
 8009c56:	d902      	bls.n	8009c5e <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 8009c58:	f06f 0309 	mvn.w	r3, #9
 8009c5c:	e00b      	b.n	8009c76 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 8009c5e:	f7ff ff99 	bl	8009b94 <_ZN11QAD_UARTMgr3getEv>
 8009c62:	4601      	mov	r1, r0
 8009c64:	79fa      	ldrb	r2, [r7, #7]
 8009c66:	4613      	mov	r3, r2
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	4413      	add	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	440b      	add	r3, r1
 8009c70:	3308      	adds	r3, #8
 8009c72:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Management Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static void registerUART(QAD_UART_Periph eUART) {
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b082      	sub	sp, #8
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	4603      	mov	r3, r0
 8009c86:	71fb      	strb	r3, [r7, #7]
		get().imp_registerUART(eUART);
 8009c88:	f7ff ff84 	bl	8009b94 <_ZN11QAD_UARTMgr3getEv>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	79fb      	ldrb	r3, [r7, #7]
 8009c90:	4619      	mov	r1, r3
 8009c92:	4610      	mov	r0, r2
 8009c94:	f000 fbbe 	bl	800a414 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
	}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 8009caa:	f7ff ff73 	bl	8009b94 <_ZN11QAD_UARTMgr3getEv>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	79fb      	ldrb	r3, [r7, #7]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	f000 fbd6 	bl	800a466 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 8009cba:	bf00      	nop
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b082      	sub	sp, #8
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	4603      	mov	r3, r0
 8009cca:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8009ccc:	f7ff ff62 	bl	8009b94 <_ZN11QAD_UARTMgr3getEv>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	f000 fbe0 	bl	800a49c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	4603      	mov	r3, r0
 8009cec:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 8009cee:	f7ff ff51 	bl	8009b94 <_ZN11QAD_UARTMgr3getEv>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	79fb      	ldrb	r3, [r7, #7]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	f000 fcc1 	bl	800a680 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 8009cfe:	bf00      	nop
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or QA_Fail if initialization has failed
QA_Result QAD_UART::init(void) {
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
	if (QAD_UARTMgr::getState(m_eUART))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	785b      	ldrb	r3, [r3, #1]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7ff ff66 	bl	8009be4 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	bf14      	ite	ne
 8009d1e:	2301      	movne	r3, #1
 8009d20:	2300      	moveq	r3, #0
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 8009d28:	2302      	movs	r3, #2
 8009d2a:	e012      	b.n	8009d52 <_ZN8QAD_UART4initEv+0x4c>

  QAD_UARTMgr::registerUART(m_eUART);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	785b      	ldrb	r3, [r3, #1]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7ff ffa4 	bl	8009c7e <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>
  QA_Result eRes = periphInit();
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f8a7 	bl	8009e8a <_ZN8QAD_UART10periphInitEv>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73fb      	strb	r3, [r7, #15]

  if (eRes)
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d004      	beq.n	8009d50 <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	785b      	ldrb	r3, [r3, #1]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7ff ffa8 	bl	8009ca0 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
  return eRes;
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b082      	sub	sp, #8
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d009      	beq.n	8009d7e <_ZN8QAD_UART6deinitEv+0x24>
  	return;

  periphDeinit(DeinitFull);
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 f924 	bl	8009fba <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
  QAD_UARTMgr::deregisterUART(m_eUART);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	785b      	ldrb	r3, [r3, #1]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff ff92 	bl	8009ca0 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 8009d7c:	e000      	b.n	8009d80 <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 8009d7e:	bf00      	nop
}
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 8009d86:	b480      	push	{r7}
 8009d88:	b083      	sub	sp, #12
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	331c      	adds	r3, #28
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 8009d9e:	b480      	push	{r7}
 8009da0:	b083      	sub	sp, #12
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	69db      	ldr	r3, [r3, #28]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	69db      	ldr	r3, [r3, #28]
 8009db0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009db4:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Active;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8009dbe:	bf00      	nop
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 8009dca:	b480      	push	{r7}
 8009dcc:	b083      	sub	sp, #12
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	69db      	ldr	r3, [r3, #28]
 8009ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009de0:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Inactive;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8009dea:	bf00      	nop
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 8009df6:	b480      	push	{r7}
 8009df8:	b083      	sub	sp, #12
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	69db      	ldr	r3, [r3, #28]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	69db      	ldr	r3, [r3, #28]
 8009e08:	f042 0220 	orr.w	r2, r2, #32
 8009e0c:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Active;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	69db      	ldr	r3, [r3, #28]
 8009e34:	f022 0220 	bic.w	r2, r2, #32
 8009e38:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Inactive;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 8009e42:	bf00      	nop
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART transmit data register (TDR)
void QAD_UART::dataTX(uint8_t uData) {
 8009e4e:	b480      	push	{r7}
 8009e50:	b083      	sub	sp, #12
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	460b      	mov	r3, r1
 8009e58:	70fb      	strb	r3, [r7, #3]
  m_sHandle.Instance->TDR = uData;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	78fa      	ldrb	r2, [r7, #3]
 8009e60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009e62:	bf00      	nop
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART receive data register (RDR)
uint8_t QAD_UART::dataRX(void) {
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  return m_sHandle.Instance->RDR;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	69db      	ldr	r3, [r3, #28]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7c:	b2db      	uxtb	r3, r3
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b088      	sub	sp, #32
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8009e92:	f107 030c 	add.w	r3, r7, #12
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	605a      	str	r2, [r3, #4]
 8009e9c:	609a      	str	r2, [r3, #8]
 8009e9e:	60da      	str	r2, [r3, #12]
 8009ea0:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	8a1b      	ldrh	r3, [r3, #16]
 8009ea6:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8009eac:	2300      	movs	r3, #0
 8009eae:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	7c9b      	ldrb	r3, [r3, #18]
 8009eb8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	f107 020c 	add.w	r2, r7, #12
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7f9 fd47 	bl	8003958 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	8b1b      	ldrh	r3, [r3, #24]
 8009ece:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8009ed8:	2303      	movs	r3, #3
 8009eda:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	7e9b      	ldrb	r3, [r3, #26]
 8009ee0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	f107 020c 	add.w	r2, r7, #12
 8009eea:	4611      	mov	r1, r2
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7f9 fd33 	bl	8003958 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7ff fee3 	bl	8009cc2 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	785b      	ldrb	r3, [r3, #1]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7ff fe88 	bl	8009c16 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 8009f06:	4602      	mov	r2, r0
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	220c      	movs	r2, #12
 8009f2a:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	331c      	adds	r3, #28
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fc fef6 	bl	8006d2e <HAL_UART_Init>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	bf14      	ite	ne
 8009f48:	2301      	movne	r3, #1
 8009f4a:	2300      	moveq	r3, #0
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d005      	beq.n	8009f5e <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 8009f52:	2100      	movs	r1, #0
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f830 	bl	8009fba <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e029      	b.n	8009fb2 <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	69db      	ldr	r3, [r3, #28]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	f042 0201 	orr.w	r2, r2, #1
 8009f6c:	601a      	str	r2, [r3, #0]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	785b      	ldrb	r3, [r3, #1]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff fe68 	bl	8009c48 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	7a1b      	ldrb	r3, [r3, #8]
 8009f80:	2200      	movs	r2, #0
 8009f82:	4619      	mov	r1, r3
 8009f84:	f7f8 ff87 	bl	8002e96 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	785b      	ldrb	r3, [r3, #1]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7ff fe5b 	bl	8009c48 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8009f92:	4603      	mov	r3, r0
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7f8 ff9a 	bl	8002ece <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  //Return
  return QA_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3720      	adds	r7, #32
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//QAD_UART Private Initialization Method
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	70fb      	strb	r3, [r7, #3]

	//Disable IRQs
	//Check if full deinitialization is required
	if (eDeinitMode) {
 8009fc6:	78fb      	ldrb	r3, [r7, #3]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d01b      	beq.n	800a004 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7ff fefc 	bl	8009dca <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7ff ff25 	bl	8009e22 <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	785b      	ldrb	r3, [r3, #1]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7ff fe33 	bl	8009c48 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7f8 ff80 	bl	8002eea <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	69db      	ldr	r3, [r3, #28]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	69db      	ldr	r3, [r3, #28]
 8009ff4:	f022 0201 	bic.w	r2, r2, #1
 8009ff8:	601a      	str	r2, [r3, #0]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	331c      	adds	r3, #28
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fc fee3 	bl	8006dca <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	785b      	ldrb	r3, [r3, #1]
 800a008:	4618      	mov	r0, r3
 800a00a:	f7ff fe6b 	bl	8009ce4 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	695a      	ldr	r2, [r3, #20]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	8b1b      	ldrh	r3, [r3, #24]
 800a016:	4619      	mov	r1, r3
 800a018:	4610      	mov	r0, r2
 800a01a:	f7f9 fe49 	bl	8003cb0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68da      	ldr	r2, [r3, #12]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	8a1b      	ldrh	r3, [r3, #16]
 800a026:	4619      	mov	r1, r3
 800a028:	4610      	mov	r0, r2
 800a02a:	f7f9 fe41 	bl	8003cb0 <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	701a      	strb	r2, [r3, #0]
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <_ZN10QAD_I2CMgrC1Ev>:
//QAD_I2CMgr::QAD_I2CMgr
//QAD_I2CMgr Constructor
//
//Fills out details for the system's I2C peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's static get() method is called.
QAD_I2CMgr::QAD_I2CMgr() {
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_I2C_PeriphCount; i++) {
 800a054:	2300      	movs	r3, #0
 800a056:	73fb      	strb	r3, [r7, #15]
 800a058:	7bfb      	ldrb	r3, [r7, #15]
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	d80d      	bhi.n	800a07a <_ZN10QAD_I2CMgrC1Ev+0x2e>
		//Set current state of peripheral to unused
		m_sI2Cs[i].eState = QAD_I2C_Unused;
 800a05e:	7bfa      	ldrb	r2, [r7, #15]
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	4613      	mov	r3, r2
 800a064:	005b      	lsls	r3, r3, #1
 800a066:	4413      	add	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	3301      	adds	r3, #1
 800a06e:	2200      	movs	r2, #0
 800a070:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_I2C_PeriphCount; i++) {
 800a072:	7bfb      	ldrb	r3, [r7, #15]
 800a074:	3301      	adds	r3, #1
 800a076:	73fb      	strb	r3, [r7, #15]
 800a078:	e7ee      	b.n	800a058 <_ZN10QAD_I2CMgrC1Ev+0xc>
	}

	//Set Peripheral IDs
	m_sI2Cs[QAD_I2C1].eI2C = QAD_I2C1;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	701a      	strb	r2, [r3, #0]
	m_sI2Cs[QAD_I2C2].eI2C = QAD_I2C2;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	731a      	strb	r2, [r3, #12]
	m_sI2Cs[QAD_I2C3].eI2C = QAD_I2C3;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2202      	movs	r2, #2
 800a08a:	761a      	strb	r2, [r3, #24]
	m_sI2Cs[QAD_I2C4].eI2C = QAD_I2C4;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2203      	movs	r2, #3
 800a090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	//Set Instances
	m_sI2Cs[QAD_I2C1].pInstance = I2C1;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a17      	ldr	r2, [pc, #92]	; (800a0f4 <_ZN10QAD_I2CMgrC1Ev+0xa8>)
 800a098:	605a      	str	r2, [r3, #4]
	m_sI2Cs[QAD_I2C2].pInstance = I2C2;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a16      	ldr	r2, [pc, #88]	; (800a0f8 <_ZN10QAD_I2CMgrC1Ev+0xac>)
 800a09e:	611a      	str	r2, [r3, #16]
	m_sI2Cs[QAD_I2C3].pInstance = I2C3;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a16      	ldr	r2, [pc, #88]	; (800a0fc <_ZN10QAD_I2CMgrC1Ev+0xb0>)
 800a0a4:	61da      	str	r2, [r3, #28]
	m_sI2Cs[QAD_I2C4].pInstance = I2C4;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a15      	ldr	r2, [pc, #84]	; (800a100 <_ZN10QAD_I2CMgrC1Ev+0xb4>)
 800a0aa:	629a      	str	r2, [r3, #40]	; 0x28

  //Set Event IRQs
	m_sI2Cs[QAD_I2C1].eIRQ_Event = I2C1_EV_IRQn;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	221f      	movs	r2, #31
 800a0b0:	721a      	strb	r2, [r3, #8]
	m_sI2Cs[QAD_I2C2].eIRQ_Event = I2C2_EV_IRQn;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2221      	movs	r2, #33	; 0x21
 800a0b6:	751a      	strb	r2, [r3, #20]
	m_sI2Cs[QAD_I2C3].eIRQ_Event = I2C3_EV_IRQn;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2248      	movs	r2, #72	; 0x48
 800a0bc:	f883 2020 	strb.w	r2, [r3, #32]
	m_sI2Cs[QAD_I2C4].eIRQ_Event = I2C4_EV_IRQn;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	225f      	movs	r2, #95	; 0x5f
 800a0c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	//Set Error IRQs
	m_sI2Cs[QAD_I2C1].eIRQ_Error = I2C1_ER_IRQn;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2220      	movs	r2, #32
 800a0cc:	725a      	strb	r2, [r3, #9]
	m_sI2Cs[QAD_I2C2].eIRQ_Error = I2C2_ER_IRQn;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2222      	movs	r2, #34	; 0x22
 800a0d2:	755a      	strb	r2, [r3, #21]
	m_sI2Cs[QAD_I2C3].eIRQ_Error = I2C3_ER_IRQn;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2249      	movs	r2, #73	; 0x49
 800a0d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	m_sI2Cs[QAD_I2C4].eIRQ_Error = I2C4_ER_IRQn;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2260      	movs	r2, #96	; 0x60
 800a0e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

}
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	40005400 	.word	0x40005400
 800a0f8:	40005800 	.word	0x40005800
 800a0fc:	40005c00 	.word	0x40005c00
 800a100:	40006000 	.word	0x40006000

0800a104 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State>:
//
//To be called from static method registerI2C()
//Used to register an I2C peripheral as being used by a driver
//eI2C - the I2C peripheral to be registered
//Returns QA_OK if successful, or returns QA_Error_PeriphBusy if the selected I2C is already in use
QA_Result QAD_I2CMgr::imp_registerI2C(QAD_I2C_Periph eI2C, QAD_I2C_State eMode) {
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	70fb      	strb	r3, [r7, #3]
 800a110:	4613      	mov	r3, r2
 800a112:	70bb      	strb	r3, [r7, #2]
  if (eI2C >= QAD_I2CNone)
 800a114:	78fb      	ldrb	r3, [r7, #3]
 800a116:	2b03      	cmp	r3, #3
 800a118:	d901      	bls.n	800a11e <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x1a>
  	return QA_Fail;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e017      	b.n	800a14e <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x4a>

  if (m_sI2Cs[eI2C].eState)
 800a11e:	78fa      	ldrb	r2, [r7, #3]
 800a120:	6879      	ldr	r1, [r7, #4]
 800a122:	4613      	mov	r3, r2
 800a124:	005b      	lsls	r3, r3, #1
 800a126:	4413      	add	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	440b      	add	r3, r1
 800a12c:	3301      	adds	r3, #1
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x34>
  	return QA_Error_PeriphBusy;
 800a134:	2302      	movs	r3, #2
 800a136:	e00a      	b.n	800a14e <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x4a>

  m_sI2Cs[eI2C].eState = eMode;
 800a138:	78fa      	ldrb	r2, [r7, #3]
 800a13a:	6879      	ldr	r1, [r7, #4]
 800a13c:	4613      	mov	r3, r2
 800a13e:	005b      	lsls	r3, r3, #1
 800a140:	4413      	add	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	440b      	add	r3, r1
 800a146:	3301      	adds	r3, #1
 800a148:	78ba      	ldrb	r2, [r7, #2]
 800a14a:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph>:
//QAD_I2CMgr Management Method
//
//To be called from static method deregisterI2C()
//Used to deregister an I2C to mark it as no longer being used by a driver
//eI2C - the I2C Peripheral to be deregistered
void QAD_I2CMgr::imp_deregisterI2C(QAD_I2C_Periph eI2C) {
 800a15a:	b480      	push	{r7}
 800a15c:	b083      	sub	sp, #12
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	460b      	mov	r3, r1
 800a164:	70fb      	strb	r3, [r7, #3]
  if (eI2C >= QAD_I2CNone)
 800a166:	78fb      	ldrb	r3, [r7, #3]
 800a168:	2b03      	cmp	r3, #3
 800a16a:	d80a      	bhi.n	800a182 <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph+0x28>
  	return;

  m_sI2Cs[eI2C].eState = QAD_I2C_Unused;
 800a16c:	78fa      	ldrb	r2, [r7, #3]
 800a16e:	6879      	ldr	r1, [r7, #4]
 800a170:	4613      	mov	r3, r2
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	440b      	add	r3, r1
 800a17a:	3301      	adds	r3, #1
 800a17c:	2200      	movs	r2, #0
 800a17e:	701a      	strb	r2, [r3, #0]
 800a180:	e000      	b.n	800a184 <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph+0x2a>
  	return;
 800a182:	bf00      	nop
}
 800a184:	370c      	adds	r7, #12
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
	...

0800a190 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph>:
//QAD_I2CMgr Clock Method
//
//To be called by static method enableClock()
//Used to enable the clock for a specific I2C peripheral
//eI2C - the I2C peripheral to enable the clock for
void QAD_I2CMgr::imp_enableClock(QAD_I2C_Periph eI2C) {
 800a190:	b480      	push	{r7}
 800a192:	b087      	sub	sp, #28
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
  switch (eI2C) {
 800a19c:	78fb      	ldrb	r3, [r7, #3]
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d871      	bhi.n	800a286 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
 800a1a2:	a201      	add	r2, pc, #4	; (adr r2, 800a1a8 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x18>)
 800a1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a8:	0800a1bd 	.word	0x0800a1bd
 800a1ac:	0800a1ef 	.word	0x0800a1ef
 800a1b0:	0800a221 	.word	0x0800a221
 800a1b4:	0800a253 	.word	0x0800a253
 800a1b8:	0800a285 	.word	0x0800a285
    case (QAD_I2C1):
    	__HAL_RCC_I2C1_CLK_ENABLE();
 800a1bc:	4b35      	ldr	r3, [pc, #212]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c0:	4a34      	ldr	r2, [pc, #208]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a1c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1c6:	6413      	str	r3, [r2, #64]	; 0x40
 800a1c8:	4b32      	ldr	r3, [pc, #200]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1d0:	617b      	str	r3, [r7, #20]
 800a1d2:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_I2C1_FORCE_RESET();
 800a1d4:	4b2f      	ldr	r3, [pc, #188]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	4a2e      	ldr	r2, [pc, #184]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a1da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1de:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C1_RELEASE_RESET();
 800a1e0:	4b2c      	ldr	r3, [pc, #176]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	4a2b      	ldr	r2, [pc, #172]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a1e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a1ea:	6213      	str	r3, [r2, #32]
    	break;
 800a1ec:	e04b      	b.n	800a286 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
    case (QAD_I2C2):
    	__HAL_RCC_I2C2_CLK_ENABLE();
 800a1ee:	4b29      	ldr	r3, [pc, #164]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	4a28      	ldr	r2, [pc, #160]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a1f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a1f8:	6413      	str	r3, [r2, #64]	; 0x40
 800a1fa:	4b26      	ldr	r3, [pc, #152]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a202:	613b      	str	r3, [r7, #16]
 800a204:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_I2C2_FORCE_RESET();
 800a206:	4b23      	ldr	r3, [pc, #140]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	4a22      	ldr	r2, [pc, #136]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a20c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a210:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C2_RELEASE_RESET();
 800a212:	4b20      	ldr	r3, [pc, #128]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	4a1f      	ldr	r2, [pc, #124]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a218:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a21c:	6213      	str	r3, [r2, #32]
    	break;
 800a21e:	e032      	b.n	800a286 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
    case (QAD_I2C3):
    	__HAL_RCC_I2C3_CLK_ENABLE();
 800a220:	4b1c      	ldr	r3, [pc, #112]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a224:	4a1b      	ldr	r2, [pc, #108]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a226:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a22a:	6413      	str	r3, [r2, #64]	; 0x40
 800a22c:	4b19      	ldr	r3, [pc, #100]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a234:	60fb      	str	r3, [r7, #12]
 800a236:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_I2C3_FORCE_RESET();
 800a238:	4b16      	ldr	r3, [pc, #88]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	4a15      	ldr	r2, [pc, #84]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a23e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a242:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C3_RELEASE_RESET();
 800a244:	4b13      	ldr	r3, [pc, #76]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a246:	6a1b      	ldr	r3, [r3, #32]
 800a248:	4a12      	ldr	r2, [pc, #72]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a24a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a24e:	6213      	str	r3, [r2, #32]
    	break;
 800a250:	e019      	b.n	800a286 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
    case (QAD_I2C4):
    	__HAL_RCC_I2C4_CLK_ENABLE();
 800a252:	4b10      	ldr	r3, [pc, #64]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a256:	4a0f      	ldr	r2, [pc, #60]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a25c:	6413      	str	r3, [r2, #64]	; 0x40
 800a25e:	4b0d      	ldr	r3, [pc, #52]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a266:	60bb      	str	r3, [r7, #8]
 800a268:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_I2C4_FORCE_RESET();
 800a26a:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	4a09      	ldr	r2, [pc, #36]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a270:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a274:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C4_RELEASE_RESET();
 800a276:	4b07      	ldr	r3, [pc, #28]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	4a06      	ldr	r2, [pc, #24]	; (800a294 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x104>)
 800a27c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a280:	6213      	str	r3, [r2, #32]
    	break;
 800a282:	e000      	b.n	800a286 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xf6>
    case (QAD_I2CNone):
    	break;
 800a284:	bf00      	nop
  }
}
 800a286:	bf00      	nop
 800a288:	371c      	adds	r7, #28
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	40023800 	.word	0x40023800

0800a298 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph>:
//QAD_I2CMgr Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific I2C peripheral
//eI2C - the I2C peripheral to disable the clock for
void QAD_I2CMgr::imp_disableClock(QAD_I2C_Periph eI2C) {
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	70fb      	strb	r3, [r7, #3]
  switch (eI2C) {
 800a2a4:	78fb      	ldrb	r3, [r7, #3]
 800a2a6:	2b04      	cmp	r3, #4
 800a2a8:	d829      	bhi.n	800a2fe <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
 800a2aa:	a201      	add	r2, pc, #4	; (adr r2, 800a2b0 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x18>)
 800a2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b0:	0800a2c5 	.word	0x0800a2c5
 800a2b4:	0800a2d3 	.word	0x0800a2d3
 800a2b8:	0800a2e1 	.word	0x0800a2e1
 800a2bc:	0800a2ef 	.word	0x0800a2ef
 800a2c0:	0800a2fd 	.word	0x0800a2fd
    case (QAD_I2C1):
    	__HAL_RCC_I2C1_CLK_DISABLE();
 800a2c4:	4b11      	ldr	r3, [pc, #68]	; (800a30c <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800a2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c8:	4a10      	ldr	r2, [pc, #64]	; (800a30c <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800a2ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2ce:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 800a2d0:	e015      	b.n	800a2fe <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
    case (QAD_I2C2):
    	__HAL_RCC_I2C2_CLK_DISABLE();
 800a2d2:	4b0e      	ldr	r3, [pc, #56]	; (800a30c <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800a2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d6:	4a0d      	ldr	r2, [pc, #52]	; (800a30c <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800a2d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a2dc:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 800a2de:	e00e      	b.n	800a2fe <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
    case (QAD_I2C3):
    	__HAL_RCC_I2C3_CLK_DISABLE();
 800a2e0:	4b0a      	ldr	r3, [pc, #40]	; (800a30c <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800a2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e4:	4a09      	ldr	r2, [pc, #36]	; (800a30c <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800a2e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a2ea:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 800a2ec:	e007      	b.n	800a2fe <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
    case (QAD_I2C4):
    	__HAL_RCC_I2C4_CLK_DISABLE();
 800a2ee:	4b07      	ldr	r3, [pc, #28]	; (800a30c <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f2:	4a06      	ldr	r2, [pc, #24]	; (800a30c <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x74>)
 800a2f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2f8:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 800a2fa:	e000      	b.n	800a2fe <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x66>
    case (QAD_I2CNone):
    	break;
 800a2fc:	bf00      	nop
  }
}
 800a2fe:	bf00      	nop
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	40023800 	.word	0x40023800

0800a310 <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method is a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 800a318:	2300      	movs	r3, #0
 800a31a:	73fb      	strb	r3, [r7, #15]
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
 800a31e:	2b07      	cmp	r3, #7
 800a320:	d80d      	bhi.n	800a33e <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 800a322:	7bfa      	ldrb	r2, [r7, #15]
 800a324:	6879      	ldr	r1, [r7, #4]
 800a326:	4613      	mov	r3, r2
 800a328:	005b      	lsls	r3, r3, #1
 800a32a:	4413      	add	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	440b      	add	r3, r1
 800a330:	3301      	adds	r3, #1
 800a332:	2200      	movs	r2, #0
 800a334:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 800a336:	7bfb      	ldrb	r3, [r7, #15]
 800a338:	3301      	adds	r3, #1
 800a33a:	73fb      	strb	r3, [r7, #15]
 800a33c:	e7ee      	b.n	800a31c <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART3].eUART = QAD_UART3;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2202      	movs	r2, #2
 800a34e:	761a      	strb	r2, [r3, #24]
	m_sUARTs[QAD_UART4].eUART = QAD_UART4;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2203      	movs	r2, #3
 800a354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sUARTs[QAD_UART5].eUART = QAD_UART5;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2204      	movs	r2, #4
 800a35c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2205      	movs	r2, #5
 800a364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	m_sUARTs[QAD_UART7].eUART = QAD_UART7;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2206      	movs	r2, #6
 800a36c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	m_sUARTs[QAD_UART8].eUART = QAD_UART8;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2207      	movs	r2, #7
 800a374:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a1e      	ldr	r2, [pc, #120]	; (800a3f4 <_ZN11QAD_UARTMgrC1Ev+0xe4>)
 800a37c:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a1d      	ldr	r2, [pc, #116]	; (800a3f8 <_ZN11QAD_UARTMgrC1Ev+0xe8>)
 800a382:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART3].pInstance = USART3;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a1d      	ldr	r2, [pc, #116]	; (800a3fc <_ZN11QAD_UARTMgrC1Ev+0xec>)
 800a388:	61da      	str	r2, [r3, #28]
	m_sUARTs[QAD_UART4].pInstance = UART4;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a1c      	ldr	r2, [pc, #112]	; (800a400 <_ZN11QAD_UARTMgrC1Ev+0xf0>)
 800a38e:	629a      	str	r2, [r3, #40]	; 0x28
	m_sUARTs[QAD_UART5].pInstance = UART5;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a1c      	ldr	r2, [pc, #112]	; (800a404 <_ZN11QAD_UARTMgrC1Ev+0xf4>)
 800a394:	635a      	str	r2, [r3, #52]	; 0x34
	m_sUARTs[QAD_UART6].pInstance = USART6;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a1b      	ldr	r2, [pc, #108]	; (800a408 <_ZN11QAD_UARTMgrC1Ev+0xf8>)
 800a39a:	641a      	str	r2, [r3, #64]	; 0x40
	m_sUARTs[QAD_UART7].pInstance = UART7;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a1b      	ldr	r2, [pc, #108]	; (800a40c <_ZN11QAD_UARTMgrC1Ev+0xfc>)
 800a3a0:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sUARTs[QAD_UART8].pInstance = UART8;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a1a      	ldr	r2, [pc, #104]	; (800a410 <_ZN11QAD_UARTMgrC1Ev+0x100>)
 800a3a6:	659a      	str	r2, [r3, #88]	; 0x58

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2225      	movs	r2, #37	; 0x25
 800a3ac:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2226      	movs	r2, #38	; 0x26
 800a3b2:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART3].eIRQ = USART3_IRQn;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2227      	movs	r2, #39	; 0x27
 800a3b8:	f883 2020 	strb.w	r2, [r3, #32]
	m_sUARTs[QAD_UART4].eIRQ = UART4_IRQn;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2234      	movs	r2, #52	; 0x34
 800a3c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	m_sUARTs[QAD_UART5].eIRQ = UART5_IRQn;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2235      	movs	r2, #53	; 0x35
 800a3c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2247      	movs	r2, #71	; 0x47
 800a3d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sUARTs[QAD_UART7].eIRQ = UART7_IRQn;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2252      	movs	r2, #82	; 0x52
 800a3d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	m_sUARTs[QAD_UART8].eIRQ = UART8_IRQn;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2253      	movs	r2, #83	; 0x53
 800a3e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

}
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	40011000 	.word	0x40011000
 800a3f8:	40004400 	.word	0x40004400
 800a3fc:	40004800 	.word	0x40004800
 800a400:	40004c00 	.word	0x40004c00
 800a404:	40005000 	.word	0x40005000
 800a408:	40011400 	.word	0x40011400
 800a40c:	40007800 	.word	0x40007800
 800a410:	40007c00 	.word	0x40007c00

0800a414 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	460b      	mov	r3, r1
 800a41e:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 800a420:	78fb      	ldrb	r3, [r7, #3]
 800a422:	2b07      	cmp	r3, #7
 800a424:	d901      	bls.n	800a42a <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 800a426:	2301      	movs	r3, #1
 800a428:	e017      	b.n	800a45a <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 800a42a:	78fa      	ldrb	r2, [r7, #3]
 800a42c:	6879      	ldr	r1, [r7, #4]
 800a42e:	4613      	mov	r3, r2
 800a430:	005b      	lsls	r3, r3, #1
 800a432:	4413      	add	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	440b      	add	r3, r1
 800a438:	3301      	adds	r3, #1
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d001      	beq.n	800a444 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 800a440:	2302      	movs	r3, #2
 800a442:	e00a      	b.n	800a45a <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 800a444:	78fa      	ldrb	r2, [r7, #3]
 800a446:	6879      	ldr	r1, [r7, #4]
 800a448:	4613      	mov	r3, r2
 800a44a:	005b      	lsls	r3, r3, #1
 800a44c:	4413      	add	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	440b      	add	r3, r1
 800a452:	3301      	adds	r3, #1
 800a454:	2201      	movs	r2, #1
 800a456:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	460b      	mov	r3, r1
 800a470:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 800a472:	78fb      	ldrb	r3, [r7, #3]
 800a474:	2b07      	cmp	r3, #7
 800a476:	d80a      	bhi.n	800a48e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 800a478:	78fa      	ldrb	r2, [r7, #3]
 800a47a:	6879      	ldr	r1, [r7, #4]
 800a47c:	4613      	mov	r3, r2
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	440b      	add	r3, r1
 800a486:	3301      	adds	r3, #1
 800a488:	2200      	movs	r2, #0
 800a48a:	701a      	strb	r2, [r3, #0]
 800a48c:	e000      	b.n	800a490 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 800a48e:	bf00      	nop
}
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
	...

0800a49c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 800a49c:	b480      	push	{r7}
 800a49e:	b08b      	sub	sp, #44	; 0x2c
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	2b08      	cmp	r3, #8
 800a4ac:	f200 80df 	bhi.w	800a66e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
 800a4b0:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1c>)
 800a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b6:	bf00      	nop
 800a4b8:	0800a4dd 	.word	0x0800a4dd
 800a4bc:	0800a50f 	.word	0x0800a50f
 800a4c0:	0800a541 	.word	0x0800a541
 800a4c4:	0800a573 	.word	0x0800a573
 800a4c8:	0800a5a5 	.word	0x0800a5a5
 800a4cc:	0800a5d7 	.word	0x0800a5d7
 800a4d0:	0800a609 	.word	0x0800a609
 800a4d4:	0800a63b 	.word	0x0800a63b
 800a4d8:	0800a66d 	.word	0x0800a66d
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 800a4dc:	4b67      	ldr	r3, [pc, #412]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a4de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e0:	4a66      	ldr	r2, [pc, #408]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a4e2:	f043 0310 	orr.w	r3, r3, #16
 800a4e6:	6453      	str	r3, [r2, #68]	; 0x44
 800a4e8:	4b64      	ldr	r3, [pc, #400]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a4ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ec:	f003 0310 	and.w	r3, r3, #16
 800a4f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_USART1_FORCE_RESET();
 800a4f4:	4b61      	ldr	r3, [pc, #388]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f8:	4a60      	ldr	r2, [pc, #384]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a4fa:	f043 0310 	orr.w	r3, r3, #16
 800a4fe:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 800a500:	4b5e      	ldr	r3, [pc, #376]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a504:	4a5d      	ldr	r2, [pc, #372]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a506:	f023 0310 	bic.w	r3, r3, #16
 800a50a:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 800a50c:	e0af      	b.n	800a66e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 800a50e:	4b5b      	ldr	r3, [pc, #364]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a512:	4a5a      	ldr	r2, [pc, #360]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a518:	6413      	str	r3, [r2, #64]	; 0x40
 800a51a:	4b58      	ldr	r3, [pc, #352]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a522:	623b      	str	r3, [r7, #32]
 800a524:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_USART2_FORCE_RESET();
 800a526:	4b55      	ldr	r3, [pc, #340]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	4a54      	ldr	r2, [pc, #336]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a52c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a530:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 800a532:	4b52      	ldr	r3, [pc, #328]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	4a51      	ldr	r2, [pc, #324]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a538:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a53c:	6213      	str	r3, [r2, #32]
      break;
 800a53e:	e096      	b.n	800a66e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_ENABLE();
 800a540:	4b4e      	ldr	r3, [pc, #312]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a544:	4a4d      	ldr	r2, [pc, #308]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a54a:	6413      	str	r3, [r2, #64]	; 0x40
 800a54c:	4b4b      	ldr	r3, [pc, #300]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a554:	61fb      	str	r3, [r7, #28]
 800a556:	69fb      	ldr	r3, [r7, #28]
      __HAL_RCC_USART3_FORCE_RESET();
 800a558:	4b48      	ldr	r3, [pc, #288]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	4a47      	ldr	r2, [pc, #284]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a55e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a562:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART3_RELEASE_RESET();
 800a564:	4b45      	ldr	r3, [pc, #276]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	4a44      	ldr	r2, [pc, #272]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a56a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a56e:	6213      	str	r3, [r2, #32]
      break;
 800a570:	e07d      	b.n	800a66e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_ENABLE();
 800a572:	4b42      	ldr	r3, [pc, #264]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a576:	4a41      	ldr	r2, [pc, #260]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a57c:	6413      	str	r3, [r2, #64]	; 0x40
 800a57e:	4b3f      	ldr	r3, [pc, #252]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a586:	61bb      	str	r3, [r7, #24]
 800a588:	69bb      	ldr	r3, [r7, #24]
      __HAL_RCC_UART4_FORCE_RESET();
 800a58a:	4b3c      	ldr	r3, [pc, #240]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a58c:	6a1b      	ldr	r3, [r3, #32]
 800a58e:	4a3b      	ldr	r2, [pc, #236]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a594:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART4_RELEASE_RESET();
 800a596:	4b39      	ldr	r3, [pc, #228]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a598:	6a1b      	ldr	r3, [r3, #32]
 800a59a:	4a38      	ldr	r2, [pc, #224]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a59c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a5a0:	6213      	str	r3, [r2, #32]
      break;
 800a5a2:	e064      	b.n	800a66e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_ENABLE();
 800a5a4:	4b35      	ldr	r3, [pc, #212]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a8:	4a34      	ldr	r2, [pc, #208]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a5aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5ae:	6413      	str	r3, [r2, #64]	; 0x40
 800a5b0:	4b32      	ldr	r3, [pc, #200]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5b8:	617b      	str	r3, [r7, #20]
 800a5ba:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_UART5_FORCE_RESET();
 800a5bc:	4b2f      	ldr	r3, [pc, #188]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a5be:	6a1b      	ldr	r3, [r3, #32]
 800a5c0:	4a2e      	ldr	r2, [pc, #184]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a5c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5c6:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART5_RELEASE_RESET();
 800a5c8:	4b2c      	ldr	r3, [pc, #176]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a5ca:	6a1b      	ldr	r3, [r3, #32]
 800a5cc:	4a2b      	ldr	r2, [pc, #172]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a5ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5d2:	6213      	str	r3, [r2, #32]
      break;
 800a5d4:	e04b      	b.n	800a66e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 800a5d6:	4b29      	ldr	r3, [pc, #164]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a5d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5da:	4a28      	ldr	r2, [pc, #160]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a5dc:	f043 0320 	orr.w	r3, r3, #32
 800a5e0:	6453      	str	r3, [r2, #68]	; 0x44
 800a5e2:	4b26      	ldr	r3, [pc, #152]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a5e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e6:	f003 0320 	and.w	r3, r3, #32
 800a5ea:	613b      	str	r3, [r7, #16]
 800a5ec:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART6_FORCE_RESET();
 800a5ee:	4b23      	ldr	r3, [pc, #140]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	4a22      	ldr	r2, [pc, #136]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a5f4:	f043 0320 	orr.w	r3, r3, #32
 800a5f8:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 800a5fa:	4b20      	ldr	r3, [pc, #128]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fe:	4a1f      	ldr	r2, [pc, #124]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a600:	f023 0320 	bic.w	r3, r3, #32
 800a604:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 800a606:	e032      	b.n	800a66e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_ENABLE();
 800a608:	4b1c      	ldr	r3, [pc, #112]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60c:	4a1b      	ldr	r2, [pc, #108]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a60e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a612:	6413      	str	r3, [r2, #64]	; 0x40
 800a614:	4b19      	ldr	r3, [pc, #100]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a618:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a61c:	60fb      	str	r3, [r7, #12]
 800a61e:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_UART7_FORCE_RESET();
 800a620:	4b16      	ldr	r3, [pc, #88]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	4a15      	ldr	r2, [pc, #84]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a626:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a62a:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART7_RELEASE_RESET();
 800a62c:	4b13      	ldr	r3, [pc, #76]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a62e:	6a1b      	ldr	r3, [r3, #32]
 800a630:	4a12      	ldr	r2, [pc, #72]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a632:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a636:	6213      	str	r3, [r2, #32]
      break;
 800a638:	e019      	b.n	800a66e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_ENABLE();
 800a63a:	4b10      	ldr	r3, [pc, #64]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63e:	4a0f      	ldr	r2, [pc, #60]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a644:	6413      	str	r3, [r2, #64]	; 0x40
 800a646:	4b0d      	ldr	r3, [pc, #52]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a64e:	60bb      	str	r3, [r7, #8]
 800a650:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_UART8_FORCE_RESET();
 800a652:	4b0a      	ldr	r3, [pc, #40]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	4a09      	ldr	r2, [pc, #36]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a658:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a65c:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART8_RELEASE_RESET();
 800a65e:	4b07      	ldr	r3, [pc, #28]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	4a06      	ldr	r2, [pc, #24]	; (800a67c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 800a664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a668:	6213      	str	r3, [r2, #32]
      break;
 800a66a:	e000      	b.n	800a66e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UARTNone):
    	break;
 800a66c:	bf00      	nop
  }
}
 800a66e:	bf00      	nop
 800a670:	372c      	adds	r7, #44	; 0x2c
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	40023800 	.word	0x40023800

0800a680 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	460b      	mov	r3, r1
 800a68a:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 800a68c:	78fb      	ldrb	r3, [r7, #3]
 800a68e:	2b08      	cmp	r3, #8
 800a690:	d84d      	bhi.n	800a72e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
 800a692:	a201      	add	r2, pc, #4	; (adr r2, 800a698 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 800a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a698:	0800a6bd 	.word	0x0800a6bd
 800a69c:	0800a6cb 	.word	0x0800a6cb
 800a6a0:	0800a6d9 	.word	0x0800a6d9
 800a6a4:	0800a6e7 	.word	0x0800a6e7
 800a6a8:	0800a6f5 	.word	0x0800a6f5
 800a6ac:	0800a703 	.word	0x0800a703
 800a6b0:	0800a711 	.word	0x0800a711
 800a6b4:	0800a71f 	.word	0x0800a71f
 800a6b8:	0800a72d 	.word	0x0800a72d
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 800a6bc:	4b1f      	ldr	r3, [pc, #124]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c0:	4a1e      	ldr	r2, [pc, #120]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a6c2:	f023 0310 	bic.w	r3, r3, #16
 800a6c6:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800a6c8:	e031      	b.n	800a72e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 800a6ca:	4b1c      	ldr	r3, [pc, #112]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ce:	4a1b      	ldr	r2, [pc, #108]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a6d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a6d4:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800a6d6:	e02a      	b.n	800a72e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_DISABLE();
 800a6d8:	4b18      	ldr	r3, [pc, #96]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6dc:	4a17      	ldr	r2, [pc, #92]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a6de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6e2:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800a6e4:	e023      	b.n	800a72e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_DISABLE();
 800a6e6:	4b15      	ldr	r3, [pc, #84]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ea:	4a14      	ldr	r2, [pc, #80]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a6ec:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a6f0:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800a6f2:	e01c      	b.n	800a72e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_DISABLE();
 800a6f4:	4b11      	ldr	r3, [pc, #68]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f8:	4a10      	ldr	r2, [pc, #64]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a6fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a6fe:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800a700:	e015      	b.n	800a72e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 800a702:	4b0e      	ldr	r3, [pc, #56]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a706:	4a0d      	ldr	r2, [pc, #52]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a708:	f023 0320 	bic.w	r3, r3, #32
 800a70c:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800a70e:	e00e      	b.n	800a72e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_DISABLE();
 800a710:	4b0a      	ldr	r3, [pc, #40]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a714:	4a09      	ldr	r2, [pc, #36]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a716:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a71a:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800a71c:	e007      	b.n	800a72e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_DISABLE();
 800a71e:	4b07      	ldr	r3, [pc, #28]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a722:	4a06      	ldr	r2, [pc, #24]	; (800a73c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 800a724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a728:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800a72a:	e000      	b.n	800a72e <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UARTNone):
    	break;
 800a72c:	bf00      	nop
  }
}
 800a72e:	bf00      	nop
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	40023800 	.word	0x40023800

0800a740 <_ZN18QAT_Pixel_ARGB4444aSERKt>:
		m_uPxl = other.pxl();
		return *this;
	}

	//Assignment operator to accept a 16bit pixel value
	QAT_Pixel_ARGB4444& operator=(const uint16_t& other) {
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
		m_uPxl = other;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	881a      	ldrh	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	801a      	strh	r2, [r3, #0]
		return *this;
 800a752:	687b      	ldr	r3, [r7, #4]
	}
 800a754:	4618      	mov	r0, r3
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <_ZN18QAT_Pixel_ARGB44443pxlEt>:
	uint16_t pxl(void) const {
		return m_uPxl;
	}

	//Sets the current 16bit pixel value
	void pxl(uint16_t pxl) {
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	460b      	mov	r3, r1
 800a76a:	807b      	strh	r3, [r7, #2]
		m_uPxl = pxl;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	887a      	ldrh	r2, [r7, #2]
 800a770:	801a      	strh	r2, [r3, #0]
	}
 800a772:	bf00      	nop
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <_ZN8QAD_LTDC4initEv>:
	static QA_Result init(void) {
 800a77e:	b580      	push	{r7, lr}
 800a780:	af00      	add	r7, sp, #0
		return get().imp_init();
 800a782:	f7fd fdaf 	bl	80082e4 <_ZN8QAD_LTDC3getEv>
 800a786:	4603      	mov	r3, r0
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fd fde5 	bl	8008358 <_ZN8QAD_LTDC8imp_initEv>
 800a78e:	4603      	mov	r3, r0
	}
 800a790:	4618      	mov	r0, r3
 800a792:	bd80      	pop	{r7, pc}

0800a794 <_ZN8QAD_LTDC17flipLayer0BuffersEv>:
	//---------------------
	//Layer Control Methods

	//Used to flip the front and back buffer for layer 0
	//To be used at the end of rendering visual elements to layer 0 in order for them to become visible on the LCD display
	static void flipLayer0Buffers(void) {
 800a794:	b580      	push	{r7, lr}
 800a796:	af00      	add	r7, sp, #0
		get().imp_flipLayer0Buffers();
 800a798:	f7fd fda4 	bl	80082e4 <_ZN8QAD_LTDC3getEv>
 800a79c:	4603      	mov	r3, r0
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe f8ee 	bl	8008980 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>
	}
 800a7a4:	bf00      	nop
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <_ZN8QAD_LTDC17flipLayer1BuffersEv>:

	//Used to flip the front and back buffer for layer 1
	//To be used at the end of rendering visual elements to layer 1 in order for them to become visible on the LCD display
	static void flipLayer1Buffers(void) {
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0
		get().imp_flipLayer1Buffers();
 800a7ac:	f7fd fd9a 	bl	80082e4 <_ZN8QAD_LTDC3getEv>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fe f926 	bl	8008a04 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>
	}
 800a7b8:	bf00      	nop
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <_ZN8QAD_LTDC19getLayer0BackBufferEv>:
	static void* getLayer0BackBufferPtr(void) {
		return get().imp_getLayer0BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 0
	static QAD_LTDC_Buffer* getLayer0BackBuffer(void) {
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0
		return get().imp_getLayer0BackBuffer();
 800a7c0:	f7fd fd90 	bl	80082e4 <_ZN8QAD_LTDC3getEv>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fe f95e 	bl	8008a88 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>
 800a7cc:	4603      	mov	r3, r0
	}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <_ZN8QAD_LTDC19getLayer1BackBufferEv>:
	static void* getLayer1BackBufferPtr(void) {
		return get().imp_getLayer1BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 1
	static QAD_LTDC_Buffer* getLayer1BackBuffer(void) {
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	af00      	add	r7, sp, #0
		return get().imp_getLayer1BackBuffer();
 800a7d6:	f7fd fd85 	bl	80082e4 <_ZN8QAD_LTDC3getEv>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7fe f979 	bl	8008ad4 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>
 800a7e2:	4603      	mov	r3, r0
	}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <_ZN7QAS_LCD8imp_initEv>:
//QAS_LCD Initialization Method
//
//To be called from static method init()
//To be used to initialize the LTDC peripheral and setup the Font Manager class
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAS_LCD::imp_init(void) {
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af04      	add	r7, sp, #16
 800a7ee:	6078      	str	r0, [r7, #4]

	//Return if system is already initialized
	if (m_eInitState) {
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <_ZN7QAS_LCD8imp_initEv+0x14>
  	return QA_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	e044      	b.n	800a886 <_ZN7QAS_LCD8imp_initEv+0x9e>
  }

	//Initialize LTDC driver class, returning QA_Fail if LTDC doesn't initialize successfully
	if (QAD_LTDC::init())
 800a7fc:	f7ff ffbf 	bl	800a77e <_ZN8QAD_LTDC4initEv>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	bf14      	ite	ne
 800a806:	2301      	movne	r3, #1
 800a808:	2300      	moveq	r3, #0
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d001      	beq.n	800a814 <_ZN7QAS_LCD8imp_initEv+0x2c>
		return QA_Fail;
 800a810:	2301      	movs	r3, #1
 800a812:	e038      	b.n	800a886 <_ZN7QAS_LCD8imp_initEv+0x9e>


	//Setup font manager
	m_cFontMgr.clear();  //Clear font manager
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	330c      	adds	r3, #12
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fa2e 	bl	800ac7a <_ZN15QAS_LCD_FontMgr5clearEv>

	  //Add SegoeUI 12pt font (defined in QAS_LCD_Fonts_SegoeUI12pt.hpp)
	m_cFontMgr.add("SegoeUI12pt",
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f103 000c 	add.w	r0, r3, #12
 800a824:	2302      	movs	r3, #2
 800a826:	9302      	str	r3, [sp, #8]
 800a828:	2303      	movs	r3, #3
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	2311      	movs	r3, #17
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	4b17      	ldr	r3, [pc, #92]	; (800a890 <_ZN7QAS_LCD8imp_initEv+0xa8>)
 800a832:	4a18      	ldr	r2, [pc, #96]	; (800a894 <_ZN7QAS_LCD8imp_initEv+0xac>)
 800a834:	4918      	ldr	r1, [pc, #96]	; (800a898 <_ZN7QAS_LCD8imp_initEv+0xb0>)
 800a836:	f000 f9f9 	bl	800ac2c <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI12pt_Height,
								 QAS_LCD_Fonts_SegoeUI12pt_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI12pt_CharGap);

	  //Add SegoeUI 20pt Semi-bold font (defined in QAS_LCD_Fonts_SegoeUI20ptSB.hpp)
	m_cFontMgr.add("SegoeUI20ptSB",
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f103 000c 	add.w	r0, r3, #12
 800a840:	2303      	movs	r3, #3
 800a842:	9302      	str	r3, [sp, #8]
 800a844:	2305      	movs	r3, #5
 800a846:	9301      	str	r3, [sp, #4]
 800a848:	231b      	movs	r3, #27
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	4b13      	ldr	r3, [pc, #76]	; (800a89c <_ZN7QAS_LCD8imp_initEv+0xb4>)
 800a84e:	4a14      	ldr	r2, [pc, #80]	; (800a8a0 <_ZN7QAS_LCD8imp_initEv+0xb8>)
 800a850:	4914      	ldr	r1, [pc, #80]	; (800a8a4 <_ZN7QAS_LCD8imp_initEv+0xbc>)
 800a852:	f000 f9eb 	bl	800ac2c <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI20ptSB_Height,
								 QAS_LCD_Fonts_SegoeUI20ptSB_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI20ptSB_CharGap);

	  //Add Showcard Gothic 18pt font (defined in QAS_LCD_Fonts_ShowcardGothic18pt.hpp)
	m_cFontMgr.add("ShowcardGothic18pt",
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f103 000c 	add.w	r0, r3, #12
 800a85c:	2302      	movs	r3, #2
 800a85e:	9302      	str	r3, [sp, #8]
 800a860:	2302      	movs	r3, #2
 800a862:	9301      	str	r3, [sp, #4]
 800a864:	231a      	movs	r3, #26
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	4b0f      	ldr	r3, [pc, #60]	; (800a8a8 <_ZN7QAS_LCD8imp_initEv+0xc0>)
 800a86a:	4a10      	ldr	r2, [pc, #64]	; (800a8ac <_ZN7QAS_LCD8imp_initEv+0xc4>)
 800a86c:	4910      	ldr	r1, [pc, #64]	; (800a8b0 <_ZN7QAS_LCD8imp_initEv+0xc8>)
 800a86e:	f000 f9dd 	bl	800ac2c <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_ShowcardGothic18pt_SpaceWidth,
								 QAS_LCD_Fonts_ShowcardGothic18pt_CharGap);


	//Set System State
	m_eInitState = QA_Initialized; //Set system as now being initialized
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	701a      	strb	r2, [r3, #0]

	//Set initial data
	m_pDrawBuffer = NULL;   //Set current draw buffer to NULL
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	605a      	str	r2, [r3, #4]
	m_uDrawColor  = 0x0000; //Set current draw color to transparent black
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	811a      	strh	r2, [r3, #8]

	//Return
	return QA_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	0800d044 	.word	0x0800d044
 800a894:	0800cecc 	.word	0x0800cecc
 800a898:	0800cc24 	.word	0x0800cc24
 800a89c:	0800d940 	.word	0x0800d940
 800a8a0:	0800d7c8 	.word	0x0800d7c8
 800a8a4:	0800cc30 	.word	0x0800cc30
 800a8a8:	0800ee3c 	.word	0x0800ee3c
 800a8ac:	0800ecc4 	.word	0x0800ecc4
 800a8b0:	0800cc40 	.word	0x0800cc40

0800a8b4 <_ZN7QAS_LCD14imp_flipLayer0Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer0()
//Used to flip the front and back buffer for layer 0
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer0(void) {
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer0Buffers();
 800a8bc:	f7ff ff6a 	bl	800a794 <_ZN8QAD_LTDC17flipLayer0BuffersEv>
}
 800a8c0:	bf00      	nop
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <_ZN7QAS_LCD14imp_flipLayer1Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer1()
//Used to flip the front and back buffer for layer 1
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer1(void) {
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer1Buffers();
 800a8d0:	f7ff ff6a 	bl	800a7a8 <_ZN8QAD_LTDC17flipLayer1BuffersEv>
}
 800a8d4:	bf00      	nop
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method setDrawBuffer()
//Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
//eLayer - Sets whether the current draw buffer is layer 0 or layer1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
void QAS_LCD::imp_setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]

	//Retrieve required Back Buffer pointer based on selected layer and store to m_pDrawBuffer
	switch (eLayer) {
 800a8e8:	78fb      	ldrb	r3, [r7, #3]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d002      	beq.n	800a8f4 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x18>
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d006      	beq.n	800a900 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x24>
 800a8f2:	e00b      	b.n	800a90c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer0):
	  	m_pDrawBuffer = QAD_LTDC::getLayer0BackBuffer();
 800a8f4:	f7ff ff62 	bl	800a7bc <_ZN8QAD_LTDC19getLayer0BackBufferEv>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	605a      	str	r2, [r3, #4]
	  	break;
 800a8fe:	e005      	b.n	800a90c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer1):
	  	m_pDrawBuffer = QAD_LTDC::getLayer1BackBuffer();
 800a900:	f7ff ff67 	bl	800a7d2 <_ZN8QAD_LTDC19getLayer1BackBufferEv>
 800a904:	4602      	mov	r2, r0
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	605a      	str	r2, [r3, #4]
	  	break;
 800a90a:	bf00      	nop
	}

	//Set currently selected draw buffer to Font Manager as well, to be used for text rendering methods
	m_cFontMgr.setDrawBuffer(m_pDrawBuffer);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f103 020c 	add.w	r2, r3, #12
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	4619      	mov	r1, r3
 800a918:	4610      	mov	r0, r2
 800a91a:	f000 faef 	bl	800aefc <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>
}
 800a91e:	bf00      	nop
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <_ZN7QAS_LCD16imp_setDrawColorEt>:
//QAS_LCD::imp_setDrawColor
//QAS_LCD Rendering Setup Method
//
//To be called from either of the two static setDrawColor() methods
//Sets the current color to be used for rendering methods
void QAS_LCD::imp_setDrawColor(uint16_t uColor) {
 800a926:	b580      	push	{r7, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	460b      	mov	r3, r1
 800a930:	807b      	strh	r3, [r7, #2]

	//Store new draw color
	m_uDrawColor = uColor;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	887a      	ldrh	r2, [r7, #2]
 800a936:	811a      	strh	r2, [r3, #8]

	//Set currently selected draw color to Font Manager as well, to be used for text rendering methods
  m_cFontMgr.setDrawColor(m_uDrawColor);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f103 020c 	add.w	r2, r3, #12
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	891b      	ldrh	r3, [r3, #8]
 800a942:	4619      	mov	r1, r3
 800a944:	4610      	mov	r0, r2
 800a946:	f000 fae7 	bl	800af18 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>
}
 800a94a:	bf00      	nop
 800a94c:	3708      	adds	r7, #8
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
	...

0800a954 <_ZN7QAS_LCD15imp_clearBufferEv>:
//QAS_LCD::imp_clearBuffer
//QAS_LCD Rendering Method
//
//To be called from static clearBuffer() method
//Used to clear the currently selected buffer to the currently selected draw color
void QAS_LCD::imp_clearBuffer(void) {
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 800a95c:	2300      	movs	r3, #0
 800a95e:	60fb      	str	r3, [r7, #12]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4a0b      	ldr	r2, [pc, #44]	; (800a990 <_ZN7QAS_LCD15imp_clearBufferEv+0x3c>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d80e      	bhi.n	800a986 <_ZN7QAS_LCD15imp_clearBufferEv+0x32>
  	m_pDrawBuffer->pixel[i] = m_uDrawColor;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	005b      	lsls	r3, r3, #1
 800a970:	441a      	add	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	3308      	adds	r3, #8
 800a976:	4619      	mov	r1, r3
 800a978:	4610      	mov	r0, r2
 800a97a:	f7ff fee1 	bl	800a740 <_ZN18QAT_Pixel_ARGB4444aSERKt>
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	3301      	adds	r3, #1
 800a982:	60fb      	str	r3, [r7, #12]
 800a984:	e7ec      	b.n	800a960 <_ZN7QAS_LCD15imp_clearBufferEv+0xc>
}
 800a986:	bf00      	nop
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	0005dbff 	.word	0x0005dbff

0800a994 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>:
//
//To be called by static drawRect() method
//Used to draw a non-filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
void QAS_LCD::imp_drawRect(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 800a994:	b580      	push	{r7, lr}
 800a996:	b08c      	sub	sp, #48	; 0x30
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	881a      	ldrh	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	881b      	ldrh	r3, [r3, #0]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d206      	bcs.n	800a9ba <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	881b      	ldrh	r3, [r3, #0]
 800a9b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9b8:	e005      	b.n	800a9c6 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.x;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	881b      	ldrh	r3, [r3, #0]
 800a9be:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.x;
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	881b      	ldrh	r3, [r3, #0]
 800a9c4:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	885a      	ldrh	r2, [r3, #2]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	885b      	ldrh	r3, [r3, #2]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d206      	bcs.n	800a9e0 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	885b      	ldrh	r3, [r3, #2]
 800a9d6:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	885b      	ldrh	r3, [r3, #2]
 800a9dc:	623b      	str	r3, [r7, #32]
 800a9de:	e005      	b.n	800a9ec <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	885b      	ldrh	r3, [r3, #2]
 800a9e4:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	885b      	ldrh	r3, [r3, #2]
 800a9ea:	623b      	str	r3, [r7, #32]
  }

  //Top & Bottom
  uint32_t yt = ys*QAD_LTDC_WIDTH;
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ee:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a9f2:	fb02 f303 	mul.w	r3, r2, r3
 800a9f6:	617b      	str	r3, [r7, #20]
  uint32_t yb = ye*QAD_LTDC_WIDTH;
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a9fe:	fb02 f303 	mul.w	r3, r2, r3
 800aa02:	613b      	str	r3, [r7, #16]
  for (uint32_t x=xs; x<(xe+1); x++) {
 800aa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa06:	61fb      	str	r3, [r7, #28]
 800aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	69fa      	ldr	r2, [r7, #28]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d21d      	bcs.n	800aa4e <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xba>
    m_pDrawBuffer->pixel[x+yt].pxl(m_uDrawColor);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	685a      	ldr	r2, [r3, #4]
 800aa16:	69f9      	ldr	r1, [r7, #28]
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	440b      	add	r3, r1
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	441a      	add	r2, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	891b      	ldrh	r3, [r3, #8]
 800aa24:	4619      	mov	r1, r3
 800aa26:	4610      	mov	r0, r2
 800aa28:	f7ff fe9a 	bl	800a760 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[x+yb].pxl(m_uDrawColor);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	685a      	ldr	r2, [r3, #4]
 800aa30:	69f9      	ldr	r1, [r7, #28]
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	440b      	add	r3, r1
 800aa36:	005b      	lsls	r3, r3, #1
 800aa38:	441a      	add	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	891b      	ldrh	r3, [r3, #8]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	4610      	mov	r0, r2
 800aa42:	f7ff fe8d 	bl	800a760 <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t x=xs; x<(xe+1); x++) {
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	61fb      	str	r3, [r7, #28]
 800aa4c:	e7dc      	b.n	800aa08 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x74>
  }

  //Left & Right
  for (uint32_t y=(ys+1); y<ye; y++) {
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	3301      	adds	r3, #1
 800aa52:	61bb      	str	r3, [r7, #24]
 800aa54:	69ba      	ldr	r2, [r7, #24]
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d225      	bcs.n	800aaa8 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x114>
    m_pDrawBuffer->pixel[xs+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	f44f 7148 	mov.w	r1, #800	; 0x320
 800aa66:	fb01 f103 	mul.w	r1, r1, r3
 800aa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6c:	440b      	add	r3, r1
 800aa6e:	005b      	lsls	r3, r3, #1
 800aa70:	441a      	add	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	891b      	ldrh	r3, [r3, #8]
 800aa76:	4619      	mov	r1, r3
 800aa78:	4610      	mov	r0, r2
 800aa7a:	f7ff fe71 	bl	800a760 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[xe+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	685a      	ldr	r2, [r3, #4]
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	f44f 7148 	mov.w	r1, #800	; 0x320
 800aa88:	fb01 f103 	mul.w	r1, r1, r3
 800aa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8e:	440b      	add	r3, r1
 800aa90:	005b      	lsls	r3, r3, #1
 800aa92:	441a      	add	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	891b      	ldrh	r3, [r3, #8]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	f7ff fe60 	bl	800a760 <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t y=(ys+1); y<ye; y++) {
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	61bb      	str	r3, [r7, #24]
 800aaa6:	e7d5      	b.n	800aa54 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xc0>
  }
}
 800aaa8:	bf00      	nop
 800aaaa:	3730      	adds	r7, #48	; 0x30
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>:
//
//To be called by static drawRectFill() method
//Used to draw a filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
void QAS_LCD::imp_drawRectFill(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08c      	sub	sp, #48	; 0x30
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	881a      	ldrh	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	881b      	ldrh	r3, [r3, #0]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d206      	bcs.n	800aad6 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	881b      	ldrh	r3, [r3, #0]
 800aacc:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	62bb      	str	r3, [r7, #40]	; 0x28
 800aad4:	e005      	b.n	800aae2 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.x;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.x;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	885a      	ldrh	r2, [r3, #2]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	885b      	ldrh	r3, [r3, #2]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d206      	bcs.n	800aafc <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	885b      	ldrh	r3, [r3, #2]
 800aaf2:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	885b      	ldrh	r3, [r3, #2]
 800aaf8:	623b      	str	r3, [r7, #32]
 800aafa:	e005      	b.n	800ab08 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	885b      	ldrh	r3, [r3, #2]
 800ab00:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	885b      	ldrh	r3, [r3, #2]
 800ab06:	623b      	str	r3, [r7, #32]
  }

  uint32_t yofs;
  for (uint32_t y=ys; y<(ye+1); y++) {
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	61fb      	str	r3, [r7, #28]
 800ab0c:	6a3b      	ldr	r3, [r7, #32]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	69fa      	ldr	r2, [r7, #28]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d221      	bcs.n	800ab5a <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xaa>
    yofs = y*QAD_LTDC_WIDTH;
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ab1c:	fb02 f303 	mul.w	r3, r2, r3
 800ab20:	617b      	str	r3, [r7, #20]
    for (uint32_t x=xs; x<(xe+1); x++) {
 800ab22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab24:	61bb      	str	r3, [r7, #24]
 800ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab28:	3301      	adds	r3, #1
 800ab2a:	69ba      	ldr	r2, [r7, #24]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d210      	bcs.n	800ab52 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xa2>
      m_pDrawBuffer->pixel[x+yofs].pxl(m_uDrawColor);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	685a      	ldr	r2, [r3, #4]
 800ab34:	69b9      	ldr	r1, [r7, #24]
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	440b      	add	r3, r1
 800ab3a:	005b      	lsls	r3, r3, #1
 800ab3c:	441a      	add	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	891b      	ldrh	r3, [r3, #8]
 800ab42:	4619      	mov	r1, r3
 800ab44:	4610      	mov	r0, r2
 800ab46:	f7ff fe0b 	bl	800a760 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    for (uint32_t x=xs; x<(xe+1); x++) {
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	61bb      	str	r3, [r7, #24]
 800ab50:	e7e9      	b.n	800ab26 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x76>
  for (uint32_t y=ys; y<(ye+1); y++) {
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	3301      	adds	r3, #1
 800ab56:	61fb      	str	r3, [r7, #28]
 800ab58:	e7d8      	b.n	800ab0c <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x5c>
    }
  }
}
 800ab5a:	bf00      	nop
 800ab5c:	3730      	adds	r7, #48	; 0x30
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800ab62:	b480      	push	{r7}
 800ab64:	b083      	sub	sp, #12
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>:
	QAS_LCD_Font(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t& uHeight, uint16_t& uSpaceWidth, uint16_t& uCharGap) :
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b086      	sub	sp, #24
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	60f8      	str	r0, [r7, #12]
 800ab82:	60b9      	str	r1, [r7, #8]
 800ab84:	607a      	str	r2, [r7, #4]
 800ab86:	603b      	str	r3, [r7, #0]
		m_uCharGap(uCharGap) {
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	881a      	ldrh	r2, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	871a      	strh	r2, [r3, #56]	; 0x38
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	881a      	ldrh	r2, [r3, #0]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	875a      	strh	r2, [r3, #58]	; 0x3a
 800ab98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9a:	881a      	ldrh	r2, [r3, #0]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	879a      	strh	r2, [r3, #60]	; 0x3c
		m_pDesc = (QAS_LCD_FontDesc*)pDesc;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	631a      	str	r2, [r3, #48]	; 0x30
		m_pData = (uint8_t*)pData;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	635a      	str	r2, [r3, #52]	; 0x34
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 800abac:	2300      	movs	r3, #0
 800abae:	75fb      	strb	r3, [r7, #23]
 800abb0:	7dfb      	ldrb	r3, [r7, #23]
 800abb2:	2b2f      	cmp	r3, #47	; 0x2f
 800abb4:	d807      	bhi.n	800abc6 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x4c>
			m_cName[i] = 0;
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	2100      	movs	r1, #0
 800abbc:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 800abbe:	7dfb      	ldrb	r3, [r7, #23]
 800abc0:	3301      	adds	r3, #1
 800abc2:	75fb      	strb	r3, [r7, #23]
 800abc4:	e7f4      	b.n	800abb0 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x36>
		strcpy(m_cName, strName);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	68b9      	ldr	r1, [r7, #8]
 800abca:	4618      	mov	r0, r3
 800abcc:	f001 fb4e 	bl	800c26c <strcpy>
	}
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4618      	mov	r0, r3
 800abd4:	3718      	adds	r7, #24
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <_ZN12QAS_LCD_FonteqEPKc>:
	bool operator==(const char* strName) {
 800abda:	b580      	push	{r7, lr}
 800abdc:	b084      	sub	sp, #16
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	6039      	str	r1, [r7, #0]
		uint8_t uLen = strlen(strName);
 800abe4:	6838      	ldr	r0, [r7, #0]
 800abe6:	f7f5 fb2b 	bl	8000240 <strlen>
 800abea:	4603      	mov	r3, r0
 800abec:	73bb      	strb	r3, [r7, #14]
		uint8_t uIdxLen = (uLen < QAS_LCD_FONTNAME_LENGTH) ? uLen : QAS_LCD_FONTNAME_LENGTH;
 800abee:	7bbb      	ldrb	r3, [r7, #14]
 800abf0:	2b30      	cmp	r3, #48	; 0x30
 800abf2:	bf28      	it	cs
 800abf4:	2330      	movcs	r3, #48	; 0x30
 800abf6:	737b      	strb	r3, [r7, #13]
		for (uint8_t i=0; i<uIdxLen; i++) {
 800abf8:	2300      	movs	r3, #0
 800abfa:	73fb      	strb	r3, [r7, #15]
 800abfc:	7bfa      	ldrb	r2, [r7, #15]
 800abfe:	7b7b      	ldrb	r3, [r7, #13]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d20e      	bcs.n	800ac22 <_ZN12QAS_LCD_FonteqEPKc+0x48>
			if (m_cName[i] != strName[i])
 800ac04:	7bfb      	ldrb	r3, [r7, #15]
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	5cd2      	ldrb	r2, [r2, r3]
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	6839      	ldr	r1, [r7, #0]
 800ac0e:	440b      	add	r3, r1
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d001      	beq.n	800ac1a <_ZN12QAS_LCD_FonteqEPKc+0x40>
				return false;
 800ac16:	2300      	movs	r3, #0
 800ac18:	e004      	b.n	800ac24 <_ZN12QAS_LCD_FonteqEPKc+0x4a>
		for (uint8_t i=0; i<uIdxLen; i++) {
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	73fb      	strb	r3, [r7, #15]
 800ac20:	e7ec      	b.n	800abfc <_ZN12QAS_LCD_FonteqEPKc+0x22>
		return true;
 800ac22:	2301      	movs	r3, #1
	}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>:
//pDesc       - a pointer to an array of QAS_LCD_FontDesc structures for the font
//pData       - a pointer to an array of uint8_t values storing the bitmap data for the font
//uHeight     - the height in pixels of the font
//uSpaceWidth - the width in pixels of the space character of the font
//uCharGap    - the width in pixels of the gap between each character when rendering strings of characters
void QAS_LCD_FontMgr::add(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t uHeight, uint16_t uSpaceWidth, uint16_t uCharGap) {
 800ac2c:	b590      	push	{r4, r7, lr}
 800ac2e:	b08b      	sub	sp, #44	; 0x2c
 800ac30:	af04      	add	r7, sp, #16
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
 800ac38:	603b      	str	r3, [r7, #0]

	//Create the QAS_LCD_Font class for the new font, providing the required details
	QAS_LCD_Font* cFont = new QAS_LCD_Font(strName, pDesc, pData, uHeight, uSpaceWidth, uCharGap);
 800ac3a:	2040      	movs	r0, #64	; 0x40
 800ac3c:	f001 f94a 	bl	800bed4 <_Znwj>
 800ac40:	4603      	mov	r3, r0
 800ac42:	461c      	mov	r4, r3
 800ac44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ac48:	9302      	str	r3, [sp, #8]
 800ac4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac4e:	9301      	str	r3, [sp, #4]
 800ac50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	68b9      	ldr	r1, [r7, #8]
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f7ff ff8c 	bl	800ab7a <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>
 800ac62:	617c      	str	r4, [r7, #20]

	//Add the pointer to the font class to the m_vFonts vector
  m_vFonts.push_back(cFont);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f107 0214 	add.w	r2, r7, #20
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 fa56 	bl	800b11e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>
}
 800ac72:	bf00      	nop
 800ac74:	371c      	adds	r7, #28
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd90      	pop	{r4, r7, pc}

0800ac7a <_ZN15QAS_LCD_FontMgr5clearEv>:

//QAS_LCD_FontMgr::clear
//QAS_LCD_FontMgr Management Method
//
//Used to clear all fonts from the font manager
void QAS_LCD_FontMgr::clear(void) {
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b082      	sub	sp, #8
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  m_vFonts.clear();
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7f7 f9ec 	bl	8002062 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
}
 800ac8a:	bf00      	nop
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <_ZN15QAS_LCD_FontMgr4findEPKc>:
//QAS_LCD_FontMgr Management Method
//
//Used to find if a font exists in the Font Manager
//strName - The name of the font to search for
//Returns -1 if a matching font is not found, or the index of the font if it is gound
int8_t QAS_LCD_FontMgr::find(const char* strName) {
 800ac92:	b590      	push	{r4, r7, lr}
 800ac94:	b085      	sub	sp, #20
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	6039      	str	r1, [r7, #0]
  int8_t iIdx = -1;
 800ac9c:	23ff      	movs	r3, #255	; 0xff
 800ac9e:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 800aca0:	2300      	movs	r3, #0
 800aca2:	73bb      	strb	r3, [r7, #14]
 800aca4:	7bbc      	ldrb	r4, [r7, #14]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7f7 f9e8 	bl	800207e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800acae:	4603      	mov	r3, r0
 800acb0:	429c      	cmp	r4, r3
 800acb2:	bf34      	ite	cc
 800acb4:	2301      	movcc	r3, #1
 800acb6:	2300      	movcs	r3, #0
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d014      	beq.n	800ace8 <_ZN15QAS_LCD_FontMgr4findEPKc+0x56>
  	if (*m_vFonts[i] == strName) {
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	7bba      	ldrb	r2, [r7, #14]
 800acc2:	4611      	mov	r1, r2
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7f7 f9ea 	bl	800209e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 800acca:	4603      	mov	r3, r0
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7ff ff82 	bl	800abda <_ZN12QAS_LCD_FonteqEPKc>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <_ZN15QAS_LCD_FontMgr4findEPKc+0x4e>
  		iIdx = i;
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
 800acde:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 800ace0:	7bbb      	ldrb	r3, [r7, #14]
 800ace2:	3301      	adds	r3, #1
 800ace4:	73bb      	strb	r3, [r7, #14]
 800ace6:	e7dd      	b.n	800aca4 <_ZN15QAS_LCD_FontMgr4findEPKc+0x12>
  	}
  return iIdx;
 800ace8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3714      	adds	r7, #20
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd90      	pop	{r4, r7, pc}

0800acf4 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>:
//QAS_LCD_FontMgr::setFontByName
//QAS_LCD_FontMgr Management Method
//
//Used to set the current selected font
//strName - The name of the font to select
void QAS_LCD_FontMgr::setFontByName(const char* strName) {
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]

	//Search for matching font
	int8_t iIdx = find(strName);
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7ff ffc6 	bl	800ac92 <_ZN15QAS_LCD_FontMgr4findEPKc>
 800ad06:	4603      	mov	r3, r0
 800ad08:	73fb      	strb	r3, [r7, #15]

	//If no matching font is found then set current font to none
  if (iIdx < 0) {
 800ad0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	da06      	bge.n	800ad20 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x2c>
  	m_iCurrentIdx = -1;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	22ff      	movs	r2, #255	; 0xff
 800ad16:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	611a      	str	r2, [r3, #16]
  	return;
 800ad1e:	e00d      	b.n	800ad3c <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x48>
  }

  //If a matching font is found then set details as required
  m_iCurrentIdx = iIdx;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	7bfa      	ldrb	r2, [r7, #15]
 800ad24:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[iIdx];
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7f7 f9b5 	bl	800209e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 800ad34:	4603      	mov	r3, r0
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	611a      	str	r2, [r3, #16]
}
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>:
//QAS_LCD_FontMgr::setFontByIndex
//QAS_LCD_FontMgr Management Method
//
//Used to set the currently selected font
//uIdx - The index of the font to select
void QAS_LCD_FontMgr::setFontByIndex(uint8_t uIdx) {
 800ad42:	b590      	push	{r4, r7, lr}
 800ad44:	b083      	sub	sp, #12
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	70fb      	strb	r3, [r7, #3]

	//If uIdx is outside of the range of fonts currently stored in m_vFonts index then set current font to none
  if (uIdx >= m_vFonts.size()) {
 800ad4e:	78fc      	ldrb	r4, [r7, #3]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7f7 f993 	bl	800207e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	429c      	cmp	r4, r3
 800ad5c:	bf2c      	ite	cs
 800ad5e:	2301      	movcs	r3, #1
 800ad60:	2300      	movcc	r3, #0
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d006      	beq.n	800ad76 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x34>
  	m_iCurrentIdx = -1;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	22ff      	movs	r2, #255	; 0xff
 800ad6c:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	611a      	str	r2, [r3, #16]
  	return;
 800ad74:	e00d      	b.n	800ad92 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x50>
  }

  //Set current font details as required
  m_iCurrentIdx = uIdx;
 800ad76:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[uIdx];
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	78fa      	ldrb	r2, [r7, #3]
 800ad82:	4611      	mov	r1, r2
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7f7 f98a 	bl	800209e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	611a      	str	r2, [r3, #16]
}
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd90      	pop	{r4, r7, pc}

0800ad98 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>:

//QAS_LCD_FontMgr::getSpaceWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of the space character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getSpaceWidth(void) const {
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	da01      	bge.n	800adae <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x16>
		return 0;
 800adaa:	2300      	movs	r3, #0
 800adac:	e003      	b.n	800adb6 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x1e>
	return m_pCurrent->m_uSpaceWidth;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800adb4:	b2db      	uxtb	r3, r3
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>:

//QAS_LCD_FontMgr::getCharGap
//QAS_LCD_FontMgr Data Methods
//
//Returns the width is pixels of the gap between each character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getCharGap(void) const {
 800adc2:	b480      	push	{r7}
 800adc4:	b083      	sub	sp, #12
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	da01      	bge.n	800add8 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x16>
		return 0;
 800add4:	2300      	movs	r3, #0
 800add6:	e003      	b.n	800ade0 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x1e>
	return m_pCurrent->m_uCharGap;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	691b      	ldr	r3, [r3, #16]
 800addc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800adde:	b2db      	uxtb	r3, r3
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <_ZN15QAS_LCD_FontMgr12getCharWidthEc>:
//QAS_LCD_FontMgr::getCharWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of a specific character for the currently selected font.
//If no font is currently selected, or an invalid character is selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getCharWidth(char ch) {
 800adec:	b480      	push	{r7}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	70fb      	strb	r3, [r7, #3]
  if (m_iCurrentIdx < 0)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	da01      	bge.n	800ae06 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x1a>
    return 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	e01a      	b.n	800ae3c <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x50>
  uint16_t uWidth = 0;
 800ae06:	2300      	movs	r3, #0
 800ae08:	81fb      	strh	r3, [r7, #14]
  if (ch == 32) {
 800ae0a:	78fb      	ldrb	r3, [r7, #3]
 800ae0c:	2b20      	cmp	r3, #32
 800ae0e:	d104      	bne.n	800ae1a <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x2e>
    uWidth = m_pCurrent->m_uSpaceWidth;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ae16:	81fb      	strh	r3, [r7, #14]
 800ae18:	e00f      	b.n	800ae3a <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
  } else if ((ch >= 33) && (ch <= 126)) {
 800ae1a:	78fb      	ldrb	r3, [r7, #3]
 800ae1c:	2b20      	cmp	r3, #32
 800ae1e:	d90c      	bls.n	800ae3a <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
 800ae20:	78fb      	ldrb	r3, [r7, #3]
 800ae22:	2b7e      	cmp	r3, #126	; 0x7e
 800ae24:	d809      	bhi.n	800ae3a <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
    uWidth = m_pCurrent->m_pDesc[ch-33].uWidth;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae2c:	78f9      	ldrb	r1, [r7, #3]
 800ae2e:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x5c>)
 800ae30:	440b      	add	r3, r1
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	81fb      	strh	r3, [r7, #14]
  }
  return uWidth;
 800ae3a:	89fb      	ldrh	r3, [r7, #14]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr
 800ae48:	3fffffdf 	.word	0x3fffffdf

0800ae4c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>:
//QAS_LCD_FontMgr::getStringWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns is width in pixels for a specific C-style string based on the currently selected font.
//If no font is currently selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getStringWidth(const char* str) {
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  uint16_t uWidth = 0;
 800ae56:	2300      	movs	r3, #0
 800ae58:	81fb      	strh	r3, [r7, #14]
  uint16_t uLength = strlen(str);
 800ae5a:	6838      	ldr	r0, [r7, #0]
 800ae5c:	f7f5 f9f0 	bl	8000240 <strlen>
 800ae60:	4603      	mov	r3, r0
 800ae62:	817b      	strh	r3, [r7, #10]
  uint8_t  uChar;

  if ((uLength == 0) || (m_iCurrentIdx < 0))
 800ae64:	897b      	ldrh	r3, [r7, #10]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d004      	beq.n	800ae74 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x28>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	da01      	bge.n	800ae78 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x2c>
    return uWidth;
 800ae74:	89fb      	ldrh	r3, [r7, #14]
 800ae76:	e03b      	b.n	800aef0 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xa4>

  for (uint8_t i=0; i<uLength; i++) {
 800ae78:	2300      	movs	r3, #0
 800ae7a:	737b      	strb	r3, [r7, #13]
 800ae7c:	7b7a      	ldrb	r2, [r7, #13]
 800ae7e:	897b      	ldrh	r3, [r7, #10]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	da2e      	bge.n	800aee2 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x96>
    uChar = (uint8_t)str[i];
 800ae84:	7b7b      	ldrb	r3, [r7, #13]
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	4413      	add	r3, r2
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	727b      	strb	r3, [r7, #9]
    if (uChar == 32) {
 800ae8e:	7a7b      	ldrb	r3, [r7, #9]
 800ae90:	2b20      	cmp	r3, #32
 800ae92:	d10b      	bne.n	800aeac <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x60>
      uWidth += (m_pCurrent->m_uSpaceWidth + m_pCurrent->m_uCharGap);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800aea0:	4413      	add	r3, r2
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	89fb      	ldrh	r3, [r7, #14]
 800aea6:	4413      	add	r3, r2
 800aea8:	81fb      	strh	r3, [r7, #14]
 800aeaa:	e016      	b.n	800aeda <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
    } else if ((uChar >= 33) && (uChar <= 126)) {
 800aeac:	7a7b      	ldrb	r3, [r7, #9]
 800aeae:	2b20      	cmp	r3, #32
 800aeb0:	d913      	bls.n	800aeda <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
 800aeb2:	7a7b      	ldrb	r3, [r7, #9]
 800aeb4:	2b7e      	cmp	r3, #126	; 0x7e
 800aeb6:	d810      	bhi.n	800aeda <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
      uWidth += (m_pCurrent->m_pDesc[uChar-33].uWidth + m_pCurrent->m_uCharGap);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aebe:	7a79      	ldrb	r1, [r7, #9]
 800aec0:	4b0d      	ldr	r3, [pc, #52]	; (800aef8 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xac>)
 800aec2:	440b      	add	r3, r1
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	4413      	add	r3, r2
 800aec8:	881a      	ldrh	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800aed0:	4413      	add	r3, r2
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	89fb      	ldrh	r3, [r7, #14]
 800aed6:	4413      	add	r3, r2
 800aed8:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i=0; i<uLength; i++) {
 800aeda:	7b7b      	ldrb	r3, [r7, #13]
 800aedc:	3301      	adds	r3, #1
 800aede:	737b      	strb	r3, [r7, #13]
 800aee0:	e7cc      	b.n	800ae7c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x30>
    }
  }
  uWidth -= m_pCurrent->m_uCharGap;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800aee8:	89fa      	ldrh	r2, [r7, #14]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	81fb      	strh	r3, [r7, #14]
  return uWidth;
 800aeee:	89fb      	ldrh	r3, [r7, #14]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	3fffffdf 	.word	0x3fffffdf

0800aefc <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>:
//QAS_LCD_FontMgr::setDrawBuffer
//QAS_LCD_FontMgr Data Methods
//
//Sets the current frame buffer for text to be rendered to
//This method is to be called by QAS_LCD::imp_SetDrawBuffer() method
void QAS_LCD_FontMgr::setDrawBuffer(QAD_LTDC_Buffer* pBuffer) {
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  m_pBuffer = pBuffer;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	615a      	str	r2, [r3, #20]
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>:
//QAS_LCD_FontMgr::setDrawColor
//QAS_LCD_FontMgr Data Methods
//
//Sets the current color for text rendering
//This method is to be called by QAS_LCD::imp_setDrawColor() method
void QAS_LCD_FontMgr::setDrawColor(uint16_t uColor) {
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	807b      	strh	r3, [r7, #2]
  m_uColor = uColor;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	887a      	ldrh	r2, [r7, #2]
 800af28:	831a      	strh	r2, [r3, #24]
}
 800af2a:	bf00      	nop
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>:
//
//Used to draw a center-aligned string of characters using the currently selected font/typeface
//String will be drawn to currently selected draw buffer with currently selected draw color
//cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
//str  - The C-style string to be drawn
void QAS_LCD_FontMgr::drawStrC(QAT_Vector2_16 cPos, const char* str) {
 800af36:	b590      	push	{r4, r7, lr}
 800af38:	b089      	sub	sp, #36	; 0x24
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	607a      	str	r2, [r7, #4]
  if ((m_pBuffer == NULL) || (m_iCurrentIdx < 0))
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d067      	beq.n	800b01a <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	db62      	blt.n	800b01a <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
    return;

  uint8_t uLen = strlen(str);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7f5 f973 	bl	8000240 <strlen>
 800af5a:	4603      	mov	r3, r0
 800af5c:	77bb      	strb	r3, [r7, #30]
  if (uLen < 0) return;

  QAT_Vector2_16 cDrawPos = cPos;
 800af5e:	f107 0314 	add.w	r3, r7, #20
 800af62:	68b9      	ldr	r1, [r7, #8]
 800af64:	4618      	mov	r0, r3
 800af66:	f7f5 ff78 	bl	8000e5a <_ZN14QAT_Vector2_16C1ERKS_>
  cDrawPos.x -= (getStringWidth(str) / 2);
 800af6a:	6879      	ldr	r1, [r7, #4]
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f7ff ff6d 	bl	800ae4c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>
 800af72:	4603      	mov	r3, r0
 800af74:	085b      	lsrs	r3, r3, #1
 800af76:	b29b      	uxth	r3, r3
 800af78:	8aba      	ldrh	r2, [r7, #20]
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	b29b      	uxth	r3, r3
 800af80:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 800af82:	2300      	movs	r3, #0
 800af84:	77fb      	strb	r3, [r7, #31]
 800af86:	7ffa      	ldrb	r2, [r7, #31]
 800af88:	7fbb      	ldrb	r3, [r7, #30]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d246      	bcs.n	800b01c <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe6>
  	if ((str[i] >= 33) && (str[i] <= 126)) {
 800af8e:	7ffb      	ldrb	r3, [r7, #31]
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	4413      	add	r3, r2
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	2b20      	cmp	r3, #32
 800af98:	d92c      	bls.n	800aff4 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
 800af9a:	7ffb      	ldrb	r3, [r7, #31]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	4413      	add	r3, r2
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	2b7e      	cmp	r3, #126	; 0x7e
 800afa4:	d826      	bhi.n	800aff4 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
      drawCharP(cDrawPos, str[i]);
 800afa6:	f107 0214 	add.w	r2, r7, #20
 800afaa:	f107 0318 	add.w	r3, r7, #24
 800afae:	4611      	mov	r1, r2
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7f5 ff52 	bl	8000e5a <_ZN14QAT_Vector2_16C1ERKS_>
 800afb6:	7ffb      	ldrb	r3, [r7, #31]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	4413      	add	r3, r2
 800afbc:	781a      	ldrb	r2, [r3, #0]
 800afbe:	f107 0318 	add.w	r3, r7, #24
 800afc2:	4619      	mov	r1, r3
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 f82c 	bl	800b022 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>
      cDrawPos.x += getCharWidth(str[i]) + getCharGap();
 800afca:	7ffb      	ldrb	r3, [r7, #31]
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	4413      	add	r3, r2
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	4619      	mov	r1, r3
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7ff ff09 	bl	800adec <_ZN15QAS_LCD_FontMgr12getCharWidthEc>
 800afda:	4603      	mov	r3, r0
 800afdc:	461c      	mov	r4, r3
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f7ff feef 	bl	800adc2 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 800afe4:	4603      	mov	r3, r0
 800afe6:	4423      	add	r3, r4
 800afe8:	8aba      	ldrh	r2, [r7, #20]
 800afea:	b29b      	uxth	r3, r3
 800afec:	4413      	add	r3, r2
 800afee:	b29b      	uxth	r3, r3
 800aff0:	82bb      	strh	r3, [r7, #20]
 800aff2:	e00e      	b.n	800b012 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xdc>
  	} else {
  		cDrawPos.x += getSpaceWidth() + getCharGap();
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f7ff fecf 	bl	800ad98 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>
 800affa:	4603      	mov	r3, r0
 800affc:	461c      	mov	r4, r3
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f7ff fedf 	bl	800adc2 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 800b004:	4603      	mov	r3, r0
 800b006:	4423      	add	r3, r4
 800b008:	8aba      	ldrh	r2, [r7, #20]
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	4413      	add	r3, r2
 800b00e:	b29b      	uxth	r3, r3
 800b010:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 800b012:	7ffb      	ldrb	r3, [r7, #31]
 800b014:	3301      	adds	r3, #1
 800b016:	77fb      	strb	r3, [r7, #31]
 800b018:	e7b5      	b.n	800af86 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0x50>
    return;
 800b01a:	bf00      	nop
  	}
  }
}
 800b01c:	3724      	adds	r7, #36	; 0x24
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd90      	pop	{r4, r7, pc}

0800b022 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>:
//QAS_LCD_FontMgr::drawCharP
//QAS_LCD_FontMgr Private Rendering Method
//
//Used to draw an individual character based on selected font's bitmap data
//This method is to be used by drawChar(), drawStrL(), drawStrC() and drawStrR() methods
void QAS_LCD_FontMgr::drawCharP(QAT_Vector2_16 cPos, char ch) {
 800b022:	b580      	push	{r7, lr}
 800b024:	b08a      	sub	sp, #40	; 0x28
 800b026:	af00      	add	r7, sp, #0
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	4613      	mov	r3, r2
 800b02e:	71fb      	strb	r3, [r7, #7]
  uint16_t uLetter = (uint8_t)ch - 33;
 800b030:	79fb      	ldrb	r3, [r7, #7]
 800b032:	b29b      	uxth	r3, r3
 800b034:	3b21      	subs	r3, #33	; 0x21
 800b036:	83bb      	strh	r3, [r7, #28]
  uint16_t uWidth  = m_pCurrent->m_pDesc[uLetter].uWidth;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	691b      	ldr	r3, [r3, #16]
 800b03c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b03e:	8bbb      	ldrh	r3, [r7, #28]
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	837b      	strh	r3, [r7, #26]
  uint32_t uOffset = m_pCurrent->m_pDesc[uLetter].uOffset;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b04e:	8bbb      	ldrh	r3, [r7, #28]
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	885b      	ldrh	r3, [r3, #2]
 800b056:	627b      	str	r3, [r7, #36]	; 0x24

  uint8_t uLine;
  uint8_t uLineInc;
  uint32_t uCur;

  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 800b058:	2300      	movs	r3, #0
 800b05a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800b05e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	6912      	ldr	r2, [r2, #16]
 800b066:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800b068:	4293      	cmp	r3, r2
 800b06a:	da54      	bge.n	800b116 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xf4>
    uLineInc = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uCur = cPos.x+((cPos.y+uHeight)*QAD_LTDC_WIDTH);
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	881b      	ldrh	r3, [r3, #0]
 800b076:	4619      	mov	r1, r3
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	885b      	ldrh	r3, [r3, #2]
 800b07c:	461a      	mov	r2, r3
 800b07e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b082:	4413      	add	r3, r2
 800b084:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b088:	fb02 f303 	mul.w	r3, r2, r3
 800b08c:	440b      	add	r3, r1
 800b08e:	617b      	str	r3, [r7, #20]
    for (uint16_t i=0; i<uWidth; i++) {
 800b090:	2300      	movs	r3, #0
 800b092:	83fb      	strh	r3, [r7, #30]
 800b094:	8bfa      	ldrh	r2, [r7, #30]
 800b096:	8b7b      	ldrh	r3, [r7, #26]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d236      	bcs.n	800b10a <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe8>
      if (uLineInc == 0) {
 800b09c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10a      	bne.n	800b0ba <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x98>
        uLine = m_pCurrent->m_pData[uOffset];
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	4413      	add	r3, r2
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uOffset++;
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (uLine & 0x01)
 800b0ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b0be:	f003 0301 	and.w	r3, r3, #1
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00c      	beq.n	800b0e0 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xbe>
        m_pBuffer->pixel[uCur+i] = m_uColor;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	695a      	ldr	r2, [r3, #20]
 800b0ca:	8bf9      	ldrh	r1, [r7, #30]
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	440b      	add	r3, r1
 800b0d0:	005b      	lsls	r3, r3, #1
 800b0d2:	441a      	add	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3318      	adds	r3, #24
 800b0d8:	4619      	mov	r1, r3
 800b0da:	4610      	mov	r0, r2
 800b0dc:	f7ff fb30 	bl	800a740 <_ZN18QAT_Pixel_ARGB4444aSERKt>
      uLine = uLine >> 1;
 800b0e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b0e4:	105b      	asrs	r3, r3, #1
 800b0e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      uLineInc++;
 800b0ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (uLineInc > 7)
 800b0f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b0f8:	2b07      	cmp	r3, #7
 800b0fa:	d902      	bls.n	800b102 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe0>
        uLineInc = 0;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    for (uint16_t i=0; i<uWidth; i++) {
 800b102:	8bfb      	ldrh	r3, [r7, #30]
 800b104:	3301      	adds	r3, #1
 800b106:	83fb      	strh	r3, [r7, #30]
 800b108:	e7c4      	b.n	800b094 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x72>
  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 800b10a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b10e:	3301      	adds	r3, #1
 800b110:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800b114:	e7a3      	b.n	800b05e <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x3c>
    }
  }
}
 800b116:	bf00      	nop
 800b118:	3728      	adds	r7, #40	; 0x28
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 800b11e:	b580      	push	{r7, lr}
 800b120:	b082      	sub	sp, #8
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	429a      	cmp	r2, r3
 800b132:	d00c      	beq.n	800b14e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	4619      	mov	r1, r3
 800b13e:	f000 f823 	bl	800b188 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	1d1a      	adds	r2, r3, #4
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	605a      	str	r2, [r3, #4]
      }
 800b14c:	e008      	b.n	800b160 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 f82d 	bl	800b1ae <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>
 800b154:	4603      	mov	r3, r0
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	4619      	mov	r1, r3
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f84e 	bl	800b1fc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800b160:	bf00      	nop
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	f107 030c 	add.w	r3, r7, #12
 800b176:	4611      	mov	r1, r2
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 f8fb 	bl	800b374 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f908 	bl	800b3aa <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 800b19a:	4603      	mov	r3, r0
 800b19c:	461a      	mov	r2, r3
 800b19e:	68b9      	ldr	r1, [r7, #8]
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f000 f90d 	bl	800b3c0 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 800b1a6:	bf00      	nop
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b084      	sub	sp, #16
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	1d1a      	adds	r2, r3, #4
 800b1ba:	f107 030c 	add.w	r3, r7, #12
 800b1be:	4611      	mov	r1, r2
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f000 f8d7 	bl	800b374 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 f805 	bl	800b1e6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800b1dc:	4603      	mov	r3, r0
      }
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800b1ee:	2301      	movs	r3, #1
      }
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800b1fc:	b5b0      	push	{r4, r5, r7, lr}
 800b1fe:	b08c      	sub	sp, #48	; 0x30
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800b208:	4a59      	ldr	r2, [pc, #356]	; (800b370 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800b20a:	2101      	movs	r1, #1
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f000 f8ed 	bl	800b3ec <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>
 800b212:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f7ff ffa1 	bl	800b168 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>
 800b226:	4603      	mov	r3, r0
 800b228:	617b      	str	r3, [r7, #20]
 800b22a:	f107 0214 	add.w	r2, r7, #20
 800b22e:	f107 0308 	add.w	r3, r7, #8
 800b232:	4611      	mov	r1, r2
 800b234:	4618      	mov	r0, r3
 800b236:	f000 f920 	bl	800b47a <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b23a:	4603      	mov	r3, r0
 800b23c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b242:	4618      	mov	r0, r3
 800b244:	f000 f92e 	bl	800b4a4 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>
 800b248:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800b24e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800b254:	69ba      	ldr	r2, [r7, #24]
 800b256:	18d5      	adds	r5, r2, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f8a6 	bl	800b3aa <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 800b25e:	4603      	mov	r3, r0
 800b260:	461a      	mov	r2, r3
 800b262:	4629      	mov	r1, r5
 800b264:	4620      	mov	r0, r4
 800b266:	f7ff ff8f 	bl	800b188 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800b26a:	2300      	movs	r3, #0
 800b26c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800b26e:	f7ff ffaf 	bl	800b1d0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d027      	beq.n	800b2c8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800b278:	f107 0308 	add.w	r3, r7, #8
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 f889 	bl	800b394 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800b282:	4603      	mov	r3, r0
 800b284:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	4618      	mov	r0, r3
 800b28a:	f7f6 ffc0 	bl	800220e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800b28e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800b290:	69ba      	ldr	r2, [r7, #24]
 800b292:	4621      	mov	r1, r4
 800b294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b296:	f000 f919 	bl	800b4cc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800b29a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800b29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29e:	3304      	adds	r3, #4
 800b2a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800b2a2:	f107 0308 	add.w	r3, r7, #8
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 f874 	bl	800b394 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7f6 ffab 	bl	800220e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800b2b8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800b2ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2bc:	6a39      	ldr	r1, [r7, #32]
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f000 f904 	bl	800b4cc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800b2c4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b2c6:	e026      	b.n	800b316 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800b2c8:	f107 0308 	add.w	r3, r7, #8
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f000 f861 	bl	800b394 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7f6 ff98 	bl	800220e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800b2de:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800b2e0:	69ba      	ldr	r2, [r7, #24]
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2e6:	f000 f905 	bl	800b4f4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 800b2ea:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800b2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ee:	3304      	adds	r3, #4
 800b2f0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800b2f2:	f107 0308 	add.w	r3, r7, #8
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 f84c 	bl	800b394 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4618      	mov	r0, r3
 800b304:	f7f6 ff83 	bl	800220e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800b308:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800b30a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b30c:	6a39      	ldr	r1, [r7, #32]
 800b30e:	4620      	mov	r0, r4
 800b310:	f000 f8f0 	bl	800b4f4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 800b314:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800b316:	f7ff ff5b 	bl	800b1d0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 800b31a:	4603      	mov	r3, r0
 800b31c:	f083 0301 	eor.w	r3, r3, #1
 800b320:	b2db      	uxtb	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d009      	beq.n	800b33a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7f6 ff70 	bl	800220e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800b32e:	4603      	mov	r3, r0
 800b330:	461a      	mov	r2, r3
 800b332:	6a39      	ldr	r1, [r7, #32]
 800b334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b336:	f7f6 ff75 	bl	8002224 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800b33a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	689a      	ldr	r2, [r3, #8]
 800b340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800b346:	461a      	mov	r2, r3
 800b348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b34a:	f7f6 ff4d 	bl	80021e8 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	69ba      	ldr	r2, [r7, #24]
 800b352:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b358:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800b35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	69ba      	ldr	r2, [r7, #24]
 800b360:	441a      	add	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	609a      	str	r2, [r3, #8]
    }
 800b366:	bf00      	nop
 800b368:	3730      	adds	r7, #48	; 0x30
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bdb0      	pop	{r4, r5, r7, pc}
 800b36e:	bf00      	nop
 800b370:	0800cc54 	.word	0x0800cc54

0800b374 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4618      	mov	r0, r3
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	370c      	adds	r7, #12
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b3aa:	b480      	push	{r7}
 800b3ac:	b083      	sub	sp, #12
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800b3c0:	b590      	push	{r4, r7, lr}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f7ff ffec 	bl	800b3aa <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	681c      	ldr	r4, [r3, #0]
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	2004      	movs	r0, #4
 800b3dc:	f7ff fbc1 	bl	800ab62 <_ZnwjPv>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	601c      	str	r4, [r3, #0]
 800b3e4:	bf00      	nop
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd90      	pop	{r4, r7, pc}

0800b3ec <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800b3ec:	b590      	push	{r4, r7, lr}
 800b3ee:	b087      	sub	sp, #28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 f894 	bl	800b526 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 800b3fe:	4604      	mov	r4, r0
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f7f6 fe3c 	bl	800207e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800b406:	4603      	mov	r3, r0
 800b408:	1ae2      	subs	r2, r4, r3
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	bf34      	ite	cc
 800b410:	2301      	movcc	r3, #1
 800b412:	2300      	movcs	r3, #0
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d002      	beq.n	800b420 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fd73 	bl	800bf06 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f7f6 fe2c 	bl	800207e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800b426:	4604      	mov	r4, r0
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f7f6 fe28 	bl	800207e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800b42e:	4603      	mov	r3, r0
 800b430:	613b      	str	r3, [r7, #16]
 800b432:	f107 0208 	add.w	r2, r7, #8
 800b436:	f107 0310 	add.w	r3, r7, #16
 800b43a:	4611      	mov	r1, r2
 800b43c:	4618      	mov	r0, r3
 800b43e:	f000 f883 	bl	800b548 <_ZSt3maxIjERKT_S2_S2_>
 800b442:	4603      	mov	r3, r0
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4423      	add	r3, r4
 800b448:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f7f6 fe17 	bl	800207e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800b450:	4602      	mov	r2, r0
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	4293      	cmp	r3, r2
 800b456:	d306      	bcc.n	800b466 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f000 f864 	bl	800b526 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 800b45e:	4602      	mov	r2, r0
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	4293      	cmp	r3, r2
 800b464:	d904      	bls.n	800b470 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x84>
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 f85d 	bl	800b526 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 800b46c:	4603      	mov	r3, r0
 800b46e:	e000      	b.n	800b472 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x86>
 800b470:	697b      	ldr	r3, [r7, #20]
      }
 800b472:	4618      	mov	r0, r3
 800b474:	371c      	adds	r7, #28
 800b476:	46bd      	mov	sp, r7
 800b478:	bd90      	pop	{r4, r7, pc}

0800b47a <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b47a:	b590      	push	{r4, r7, lr}
 800b47c:	b083      	sub	sp, #12
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f7ff ff85 	bl	800b394 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800b48a:	4603      	mov	r3, r0
 800b48c:	681c      	ldr	r4, [r3, #0]
 800b48e:	6838      	ldr	r0, [r7, #0]
 800b490:	f7ff ff80 	bl	800b394 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800b494:	4603      	mov	r3, r0
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	1ae3      	subs	r3, r4, r3
 800b49a:	109b      	asrs	r3, r3, #2
 800b49c:	4618      	mov	r0, r3
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd90      	pop	{r4, r7, pc}

0800b4a4 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d006      	beq.n	800b4c2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x1e>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f000 f859 	bl	800b570 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	e000      	b.n	800b4c4 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x20>
 800b4c2:	2300      	movs	r3, #0
      }
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800b4cc:	b590      	push	{r4, r7, lr}
 800b4ce:	b089      	sub	sp, #36	; 0x24
 800b4d0:	af02      	add	r7, sp, #8
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800b4da:	f88d 4000 	strb.w	r4, [sp]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	68b9      	ldr	r1, [r7, #8]
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 f852 	bl	800b58e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800b4ea:	4603      	mov	r3, r0
      }
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	371c      	adds	r7, #28
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd90      	pop	{r4, r7, pc}

0800b4f4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800b4f4:	b590      	push	{r4, r7, lr}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f000 f855 	bl	800b5b2 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 800b508:	4604      	mov	r4, r0
 800b50a:	68b8      	ldr	r0, [r7, #8]
 800b50c:	f000 f851 	bl	800b5b2 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 800b510:	4601      	mov	r1, r0
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	4620      	mov	r0, r4
 800b518:	f000 f85a 	bl	800b5d0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800b51c:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800b51e:	4618      	mov	r0, r3
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	bd90      	pop	{r4, r7, pc}

0800b526 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800b526:	b580      	push	{r7, lr}
 800b528:	b082      	sub	sp, #8
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4618      	mov	r0, r3
 800b532:	f000 f878 	bl	800b626 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800b536:	4603      	mov	r3, r0
 800b538:	4618      	mov	r0, r3
 800b53a:	f000 f85a 	bl	800b5f2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>
 800b53e:	4603      	mov	r3, r0
 800b540:	4618      	mov	r0, r3
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d201      	bcs.n	800b562 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	e000      	b.n	800b564 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800b562:	687b      	ldr	r3, [r7, #4]
    }
 800b564:	4618      	mov	r0, r3
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800b57a:	2200      	movs	r2, #0
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f85c 	bl	800b63c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>
 800b584:	4603      	mov	r3, r0
 800b586:	4618      	mov	r0, r3
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800b58e:	b580      	push	{r7, lr}
 800b590:	b084      	sub	sp, #16
 800b592:	af00      	add	r7, sp, #0
 800b594:	60f8      	str	r0, [r7, #12]
 800b596:	60b9      	str	r1, [r7, #8]
 800b598:	607a      	str	r2, [r7, #4]
 800b59a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	68b9      	ldr	r1, [r7, #8]
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f000 f868 	bl	800b678 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 800b5a8:	4603      	mov	r3, r0
      }
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b084      	sub	sp, #16
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800b5ba:	f107 030c 	add.w	r3, r7, #12
 800b5be:	6879      	ldr	r1, [r7, #4]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f000 f876 	bl	800b6b2 <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
 800b5dc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	68b9      	ldr	r1, [r7, #8]
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f000 f874 	bl	800b6d0 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b084      	sub	sp, #16
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800b5fa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b5fe:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 f889 	bl	800b718 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>
 800b606:	4603      	mov	r3, r0
 800b608:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800b60a:	f107 0208 	add.w	r2, r7, #8
 800b60e:	f107 030c 	add.w	r3, r7, #12
 800b612:	4611      	mov	r1, r2
 800b614:	4618      	mov	r0, r3
 800b616:	f000 f88b 	bl	800b730 <_ZSt3minIjERKT_S2_S2_>
 800b61a:	4603      	mov	r3, r0
 800b61c:	681b      	ldr	r3, [r3, #0]
      }
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b626:	b480      	push	{r7}
 800b628:	b083      	sub	sp, #12
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4618      	mov	r0, r3
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f000 f885 	bl	800b758 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 800b64e:	4602      	mov	r2, r0
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	4293      	cmp	r3, r2
 800b654:	bf8c      	ite	hi
 800b656:	2301      	movhi	r3, #1
 800b658:	2300      	movls	r3, #0
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d001      	beq.n	800b664 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800b660:	f000 fc4e 	bl	800bf00 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 fc33 	bl	800bed4 <_Znwj>
 800b66e:	4603      	mov	r3, r0
      }
 800b670:	4618      	mov	r0, r3
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800b678:	b5b0      	push	{r4, r5, r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	607a      	str	r2, [r7, #4]
 800b684:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f000 f872 	bl	800b770 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800b68c:	4604      	mov	r4, r0
 800b68e:	68b8      	ldr	r0, [r7, #8]
 800b690:	f000 f86e 	bl	800b770 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800b694:	4605      	mov	r5, r0
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f86a 	bl	800b770 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800b69c:	4602      	mov	r2, r0
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f000 f86f 	bl	800b786 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800b6a8:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bdb0      	pop	{r4, r5, r7, pc}

0800b6b2 <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>:
      move_iterator(iterator_type __i)
 800b6b2:	b480      	push	{r7}
 800b6b4:	b083      	sub	sp, #12
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
 800b6ba:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	601a      	str	r2, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f000 f86c 	bl	800b7c2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>
 800b6ea:	4603      	mov	r3, r0
    }
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800b700:	2301      	movs	r3, #1
 800b702:	75fb      	strb	r3, [r7, #23]
			     && __is_pointer<_II>::__value
			     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
			      _Category>::__copy_m(__first, __last, __result);
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	68b9      	ldr	r1, [r7, #8]
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f000 f86a 	bl	800b7e2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>
 800b70e:	4603      	mov	r3, r0
    }
 800b710:	4618      	mov	r0, r3
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f819 	bl	800b758 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 800b726:	4603      	mov	r3, r0
 800b728:	4618      	mov	r0, r3
 800b72a:	3708      	adds	r7, #8
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	429a      	cmp	r2, r3
 800b744:	d201      	bcs.n	800b74a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	e000      	b.n	800b74c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800b74a:	687b      	ldr	r3, [r7, #4]
    }
 800b74c:	4618      	mov	r0, r3
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b760:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800b764:	4618      	mov	r0, r3
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>:
    __niter_base(_Iterator __it)
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4618      	mov	r0, r3
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800b786:	b580      	push	{r7, lr}
 800b788:	b086      	sub	sp, #24
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	60f8      	str	r0, [r7, #12]
 800b78e:	60b9      	str	r1, [r7, #8]
 800b790:	607a      	str	r2, [r7, #4]
 800b792:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	1ad3      	subs	r3, r2, r3
 800b79a:	109b      	asrs	r3, r3, #2
 800b79c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	dd06      	ble.n	800b7b2 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	68f9      	ldr	r1, [r7, #12]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fc1d 	bl	800bfec <memmove>
      return __result + __count;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	4413      	add	r3, r2
    }
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	60f8      	str	r0, [r7, #12]
 800b7ca:	60b9      	str	r1, [r7, #8]
 800b7cc:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	68b9      	ldr	r1, [r7, #8]
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f000 f822 	bl	800b81c <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b086      	sub	sp, #24
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	60f8      	str	r0, [r7, #12]
 800b7ea:	60b9      	str	r1, [r7, #8]
 800b7ec:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	109b      	asrs	r3, r3, #2
 800b7f6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d006      	beq.n	800b80c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	461a      	mov	r2, r3
 800b804:	68f9      	ldr	r1, [r7, #12]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 fbf0 	bl	800bfec <memmove>
	  return __result + _Num;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	4413      	add	r3, r2
	}
 800b814:	4618      	mov	r0, r3
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800b81c:	b590      	push	{r4, r7, lr}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f000 f80f 	bl	800b84c <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800b82e:	4604      	mov	r4, r0
 800b830:	68b8      	ldr	r0, [r7, #8]
 800b832:	f000 f80b 	bl	800b84c <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800b836:	4603      	mov	r3, r0
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	4619      	mov	r1, r3
 800b83c:	4620      	mov	r0, r4
 800b83e:	f000 f816 	bl	800b86e <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 800b842:	4603      	mov	r3, r0
    }
 800b844:	4618      	mov	r0, r3
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd90      	pop	{r4, r7, pc}

0800b84c <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 800b854:	1d3b      	adds	r3, r7, #4
 800b856:	4618      	mov	r0, r3
 800b858:	f000 f82c 	bl	800b8b4 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>
 800b85c:	4603      	mov	r3, r0
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 f834 	bl	800b8cc <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>
 800b864:	4603      	mov	r3, r0
 800b866:	4618      	mov	r0, r3
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800b86e:	b5b0      	push	{r4, r5, r7, lr}
 800b870:	b084      	sub	sp, #16
 800b872:	af00      	add	r7, sp, #0
 800b874:	60f8      	str	r0, [r7, #12]
 800b876:	60b9      	str	r1, [r7, #8]
 800b878:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f7ff ff78 	bl	800b770 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800b880:	4604      	mov	r4, r0
 800b882:	68b8      	ldr	r0, [r7, #8]
 800b884:	f7ff ff74 	bl	800b770 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800b888:	4605      	mov	r5, r0
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff ff6f 	bl	800b770 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 800b892:	4603      	mov	r3, r0
 800b894:	461a      	mov	r2, r3
 800b896:	4629      	mov	r1, r5
 800b898:	4620      	mov	r0, r4
 800b89a:	f7ff ff2b 	bl	800b6f4 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	1d3b      	adds	r3, r7, #4
 800b8a2:	4611      	mov	r1, r2
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f000 f81c 	bl	800b8e2 <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>
 800b8aa:	4603      	mov	r3, r0
    }
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bdb0      	pop	{r4, r5, r7, pc}

0800b8b4 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>:
      base() const
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800b8e2:	b480      	push	{r7}
 800b8e4:	b083      	sub	sp, #12
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	6039      	str	r1, [r7, #0]
    { return __res; }
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	7b1b      	ldrb	r3, [r3, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 800b90c:	2300      	movs	r3, #0
 800b90e:	e010      	b.n	800b932 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	4798      	blx	r3
 800b91c:	4603      	mov	r3, r0
 800b91e:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 800b920:	7bfb      	ldrb	r3, [r7, #15]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d001      	beq.n	800b92a <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 800b926:	7bfb      	ldrb	r3, [r7, #15]
 800b928:	e003      	b.n	800b932 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b082      	sub	sp, #8
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
 800b942:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	3308      	adds	r3, #8
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	6839      	ldr	r1, [r7, #0]
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	4798      	blx	r3
}
 800b952:	bf00      	nop
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b084      	sub	sp, #16
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 800b964:	6838      	ldr	r0, [r7, #0]
 800b966:	f7f4 fc6b 	bl	8000240 <strlen>
 800b96a:	4603      	mov	r3, r0
 800b96c:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 800b96e:	2300      	movs	r3, #0
 800b970:	81fb      	strh	r3, [r7, #14]
 800b972:	89fa      	ldrh	r2, [r7, #14]
 800b974:	89bb      	ldrh	r3, [r7, #12]
 800b976:	429a      	cmp	r2, r3
 800b978:	d20f      	bcs.n	800b99a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	3304      	adds	r3, #4
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 f837 	bl	800b9f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800b984:	89fb      	ldrh	r3, [r7, #14]
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	4413      	add	r3, r2
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	4619      	mov	r1, r3
 800b98e:	f000 f9df 	bl	800bd50 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 800b992:	89fb      	ldrh	r3, [r7, #14]
 800b994:	3301      	adds	r3, #1
 800b996:	81fb      	strh	r3, [r7, #14]
 800b998:	e7eb      	b.n	800b972 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	3304      	adds	r3, #4
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 f827 	bl	800b9f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	210d      	movs	r1, #13
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f000 f9d1 	bl	800bd50 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	330c      	adds	r3, #12
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	4798      	blx	r3
}
 800b9ba:	bf00      	nop
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b082      	sub	sp, #8
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f000 f80f 	bl	800b9f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	210d      	movs	r1, #13
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 f9b9 	bl	800bd50 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	330c      	adds	r3, #12
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	4798      	blx	r3
}
 800b9ea:	bf00      	nop
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
	return get();
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f805 	bl	800ba0a <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 800ba00:	4603      	mov	r3, r0
      }
 800ba02:	4618      	mov	r0, r3
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b082      	sub	sp, #8
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	4618      	mov	r0, r3
 800ba16:	f000 f805 	bl	800ba24 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f000 f806 	bl	800ba40 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800ba34:	4603      	mov	r3, r0
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 f805 	bl	800ba5a <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ba50:	4603      	mov	r3, r0
 800ba52:	4618      	mov	r0, r3
 800ba54:	3708      	adds	r7, #8
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f805 	bl	800ba72 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b082      	sub	sp, #8
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 f805 	bl	800ba8c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 800ba82:	4603      	mov	r3, r0
 800ba84:	4618      	mov	r0, r3
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4618      	mov	r0, r3
 800ba98:	370c      	adds	r7, #12
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b082      	sub	sp, #8
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3314      	adds	r3, #20
 800bab0:	4618      	mov	r0, r3
 800bab2:	f000 f8e2 	bl	800bc7a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800bab6:	4603      	mov	r3, r0
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fe f924 	bl	8009d06 <_ZN8QAD_UART4initEv>
 800babe:	4603      	mov	r3, r0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3708      	adds	r7, #8
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	3314      	adds	r3, #20
 800bad4:	4618      	mov	r0, r3
 800bad6:	f000 f8d0 	bl	800bc7a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800bada:	4603      	mov	r3, r0
 800badc:	4618      	mov	r0, r3
 800bade:	f7fe f93c 	bl	8009d5a <_ZN8QAD_UART6deinitEv>
}
 800bae2:	bf00      	nop
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 800baea:	b590      	push	{r4, r7, lr}
 800baec:	b0a5      	sub	sp, #148	; 0x94
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	3314      	adds	r3, #20
 800baf8:	4618      	mov	r0, r3
 800bafa:	f000 f8be 	bl	800bc7a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800bafe:	4603      	mov	r3, r0
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fe f940 	bl	8009d86 <_ZN8QAD_UART9getHandleEv>
 800bb06:	4602      	mov	r2, r0
 800bb08:	f107 0308 	add.w	r3, r7, #8
 800bb0c:	4611      	mov	r1, r2
 800bb0e:	2284      	movs	r2, #132	; 0x84
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 fa5d 	bl	800bfd0 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	69db      	ldr	r3, [r3, #28]
 800bb1a:	f003 0320 	and.w	r3, r3, #32
 800bb1e:	2b20      	cmp	r3, #32
 800bb20:	bf0c      	ite	eq
 800bb22:	2301      	moveq	r3, #1
 800bb24:	2300      	movne	r3, #0
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d01e      	beq.n	800bb6a <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x80>
  	uint8_t uData = m_pUART->dataRX();
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	3314      	adds	r3, #20
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 f8a2 	bl	800bc7a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800bb36:	4603      	mov	r3, r0
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe f998 	bl	8009e6e <_ZN8QAD_UART6dataRXEv>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  	if (m_eRXState)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	7b9b      	ldrb	r3, [r3, #14]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00b      	beq.n	800bb64 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	3308      	adds	r3, #8
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7ff ff4e 	bl	800b9f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800bb56:	4602      	mov	r2, r0
 800bb58:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4610      	mov	r0, r2
 800bb60:	f000 f8f6 	bl	800bd50 <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	2220      	movs	r2, #32
 800bb68:	621a      	str	r2, [r3, #32]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	69db      	ldr	r3, [r3, #28]
 800bb6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb72:	2b80      	cmp	r3, #128	; 0x80
 800bb74:	bf0c      	ite	eq
 800bb76:	2301      	moveq	r3, #1
 800bb78:	2300      	movne	r3, #0
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d034      	beq.n	800bbea <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x100>
  	if (!m_pTXFIFO->empty()) {
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3304      	adds	r3, #4
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7ff ff34 	bl	800b9f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f000 f8cc 	bl	800bd2a <_ZN14QAT_FIFOBuffer5emptyEv>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	bf0c      	ite	eq
 800bb98:	2301      	moveq	r3, #1
 800bb9a:	2300      	movne	r3, #0
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d014      	beq.n	800bbcc <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe2>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	3314      	adds	r3, #20
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 f867 	bl	800bc7a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800bbac:	4604      	mov	r4, r0
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	3304      	adds	r3, #4
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7ff ff1d 	bl	800b9f2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f000 f8ec 	bl	800bd98 <_ZN14QAT_FIFOBuffer3popEv>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f7fe f942 	bl	8009e4e <_ZN8QAD_UART6dataTXEh>
 800bbca:	e00b      	b.n	800bbe4 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfa>
  	} else {
      m_pUART->stopTX();
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	3314      	adds	r3, #20
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f000 f852 	bl	800bc7a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7fe f8f6 	bl	8009dca <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2280      	movs	r2, #128	; 0x80
 800bbe8:	621a      	str	r2, [r3, #32]
  }
}
 800bbea:	bf00      	nop
 800bbec:	3794      	adds	r7, #148	; 0x94
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd90      	pop	{r4, r7, pc}

0800bbf2 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b082      	sub	sp, #8
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	3314      	adds	r3, #20
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f000 f83b 	bl	800bc7a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800bc04:	4603      	mov	r3, r0
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fe f8c9 	bl	8009d9e <_ZN8QAD_UART7startTXEv>
}
 800bc0c:	bf00      	nop
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	3314      	adds	r3, #20
 800bc20:	4618      	mov	r0, r3
 800bc22:	f000 f82a 	bl	800bc7a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800bc26:	4603      	mov	r3, r0
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fe f8ce 	bl	8009dca <_ZN8QAD_UART6stopTXEv>
}
 800bc2e:	bf00      	nop
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b082      	sub	sp, #8
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	3314      	adds	r3, #20
 800bc42:	4618      	mov	r0, r3
 800bc44:	f000 f819 	bl	800bc7a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7fe f8d3 	bl	8009df6 <_ZN8QAD_UART7startRXEv>
}
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	3314      	adds	r3, #20
 800bc64:	4618      	mov	r0, r3
 800bc66:	f000 f808 	bl	800bc7a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7fe f8d8 	bl	8009e22 <_ZN8QAD_UART6stopRXEv>
}
 800bc72:	bf00      	nop
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b082      	sub	sp, #8
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
	return get();
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 f805 	bl	800bc92 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 800bc88:	4603      	mov	r3, r0
      }
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b082      	sub	sp, #8
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f000 f805 	bl	800bcac <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 800bca2:	4603      	mov	r3, r0
 800bca4:	4618      	mov	r0, r3
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f000 f806 	bl	800bcc8 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f000 f805 	bl	800bce2 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b082      	sub	sp, #8
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f805 	bl	800bcfa <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b082      	sub	sp, #8
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f000 f805 	bl	800bd14 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 800bd2a:	b480      	push	{r7}
 800bd2c:	b083      	sub	sp, #12
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	88da      	ldrh	r2, [r3, #6]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	891b      	ldrh	r3, [r3, #8]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d101      	bne.n	800bd42 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e000      	b.n	800bd44 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	891b      	ldrh	r3, [r3, #8]
 800bd62:	4619      	mov	r1, r3
 800bd64:	4610      	mov	r0, r2
 800bd66:	f000 f847 	bl	800bdf8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	78fb      	ldrb	r3, [r7, #3]
 800bd6e:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	889a      	ldrh	r2, [r3, #4]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	891b      	ldrh	r3, [r3, #8]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d906      	bls.n	800bd8a <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	891b      	ldrh	r3, [r3, #8]
 800bd80:	3301      	adds	r3, #1
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 800bd88:	e002      	b.n	800bd90 <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	811a      	strh	r2, [r3, #8]
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f7ff ffc2 	bl	800bd2a <_ZN14QAT_FIFOBuffer5emptyEv>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	bf0c      	ite	eq
 800bdac:	2301      	moveq	r3, #1
 800bdae:	2300      	movne	r3, #0
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d01b      	beq.n	800bdee <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	88db      	ldrh	r3, [r3, #6]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	4610      	mov	r0, r2
 800bdc0:	f000 f81a 	bl	800bdf8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	889a      	ldrh	r2, [r3, #4]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	88db      	ldrh	r3, [r3, #6]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d906      	bls.n	800bde4 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	88db      	ldrh	r3, [r3, #6]
 800bdda:	3301      	adds	r3, #1
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	80da      	strh	r2, [r3, #6]
 800bde2:	e002      	b.n	800bdea <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	80da      	strh	r2, [r3, #6]
		return uData;
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	e000      	b.n	800bdf0 <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
	return get()[__i];
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 f807 	bl	800be16 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 800be08:	4602      	mov	r2, r0
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	4413      	add	r3, r2
      }
 800be0e:	4618      	mov	r0, r3
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800be16:	b580      	push	{r7, lr}
 800be18:	b082      	sub	sp, #8
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4618      	mov	r0, r3
 800be22:	f000 f805 	bl	800be30 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800be26:	4603      	mov	r3, r0
 800be28:	4618      	mov	r0, r3
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f000 f806 	bl	800be4c <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800be40:	4603      	mov	r3, r0
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4618      	mov	r0, r3
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4618      	mov	r0, r3
 800be58:	f000 f805 	bl	800be66 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800be5c:	4603      	mov	r3, r0
 800be5e:	4618      	mov	r0, r3
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800be66:	b580      	push	{r7, lr}
 800be68:	b082      	sub	sp, #8
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f805 	bl	800be7e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 800be74:	4603      	mov	r3, r0
 800be76:	4618      	mov	r0, r3
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800be7e:	b580      	push	{r7, lr}
 800be80:	b082      	sub	sp, #8
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4618      	mov	r0, r3
 800be8a:	f000 f805 	bl	800be98 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 800be8e:	4603      	mov	r3, r0
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4618      	mov	r0, r3
 800bea4:	370c      	adds	r7, #12
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr

0800beae <_ZdlPv>:
 800beae:	f000 b887 	b.w	800bfc0 <free>

0800beb2 <_ZdlPvj>:
 800beb2:	f7ff bffc 	b.w	800beae <_ZdlPv>

0800beb6 <__cxa_guard_acquire>:
 800beb6:	6803      	ldr	r3, [r0, #0]
 800beb8:	07db      	lsls	r3, r3, #31
 800beba:	d406      	bmi.n	800beca <__cxa_guard_acquire+0x14>
 800bebc:	7843      	ldrb	r3, [r0, #1]
 800bebe:	b103      	cbz	r3, 800bec2 <__cxa_guard_acquire+0xc>
 800bec0:	deff      	udf	#255	; 0xff
 800bec2:	2301      	movs	r3, #1
 800bec4:	7043      	strb	r3, [r0, #1]
 800bec6:	4618      	mov	r0, r3
 800bec8:	4770      	bx	lr
 800beca:	2000      	movs	r0, #0
 800becc:	4770      	bx	lr

0800bece <__cxa_guard_release>:
 800bece:	2301      	movs	r3, #1
 800bed0:	6003      	str	r3, [r0, #0]
 800bed2:	4770      	bx	lr

0800bed4 <_Znwj>:
 800bed4:	2801      	cmp	r0, #1
 800bed6:	bf38      	it	cc
 800bed8:	2001      	movcc	r0, #1
 800beda:	b510      	push	{r4, lr}
 800bedc:	4604      	mov	r4, r0
 800bede:	4620      	mov	r0, r4
 800bee0:	f000 f866 	bl	800bfb0 <malloc>
 800bee4:	b930      	cbnz	r0, 800bef4 <_Znwj+0x20>
 800bee6:	f000 f823 	bl	800bf30 <_ZSt15get_new_handlerv>
 800beea:	b908      	cbnz	r0, 800bef0 <_Znwj+0x1c>
 800beec:	f000 f828 	bl	800bf40 <abort>
 800bef0:	4780      	blx	r0
 800bef2:	e7f4      	b.n	800bede <_Znwj+0xa>
 800bef4:	bd10      	pop	{r4, pc}

0800bef6 <_Znaj>:
 800bef6:	f7ff bfed 	b.w	800bed4 <_Znwj>

0800befa <__cxa_pure_virtual>:
 800befa:	b508      	push	{r3, lr}
 800befc:	f000 f812 	bl	800bf24 <_ZSt9terminatev>

0800bf00 <_ZSt17__throw_bad_allocv>:
 800bf00:	b508      	push	{r3, lr}
 800bf02:	f000 f81d 	bl	800bf40 <abort>

0800bf06 <_ZSt20__throw_length_errorPKc>:
 800bf06:	b508      	push	{r3, lr}
 800bf08:	f000 f81a 	bl	800bf40 <abort>

0800bf0c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800bf0c:	b508      	push	{r3, lr}
 800bf0e:	4780      	blx	r0
 800bf10:	f000 f816 	bl	800bf40 <abort>

0800bf14 <_ZSt13get_terminatev>:
 800bf14:	4b02      	ldr	r3, [pc, #8]	; (800bf20 <_ZSt13get_terminatev+0xc>)
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	f3bf 8f5b 	dmb	ish
 800bf1c:	4770      	bx	lr
 800bf1e:	bf00      	nop
 800bf20:	2000000c 	.word	0x2000000c

0800bf24 <_ZSt9terminatev>:
 800bf24:	b508      	push	{r3, lr}
 800bf26:	f7ff fff5 	bl	800bf14 <_ZSt13get_terminatev>
 800bf2a:	f7ff ffef 	bl	800bf0c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800bf30 <_ZSt15get_new_handlerv>:
 800bf30:	4b02      	ldr	r3, [pc, #8]	; (800bf3c <_ZSt15get_new_handlerv+0xc>)
 800bf32:	6818      	ldr	r0, [r3, #0]
 800bf34:	f3bf 8f5b 	dmb	ish
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	20000438 	.word	0x20000438

0800bf40 <abort>:
 800bf40:	b508      	push	{r3, lr}
 800bf42:	2006      	movs	r0, #6
 800bf44:	f000 f956 	bl	800c1f4 <raise>
 800bf48:	2001      	movs	r0, #1
 800bf4a:	f7f6 fb86 	bl	800265a <_exit>

0800bf4e <atexit>:
 800bf4e:	2300      	movs	r3, #0
 800bf50:	4601      	mov	r1, r0
 800bf52:	461a      	mov	r2, r3
 800bf54:	4618      	mov	r0, r3
 800bf56:	f000 b991 	b.w	800c27c <__register_exitproc>
	...

0800bf5c <__errno>:
 800bf5c:	4b01      	ldr	r3, [pc, #4]	; (800bf64 <__errno+0x8>)
 800bf5e:	6818      	ldr	r0, [r3, #0]
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	20000010 	.word	0x20000010

0800bf68 <__libc_init_array>:
 800bf68:	b570      	push	{r4, r5, r6, lr}
 800bf6a:	4d0d      	ldr	r5, [pc, #52]	; (800bfa0 <__libc_init_array+0x38>)
 800bf6c:	4c0d      	ldr	r4, [pc, #52]	; (800bfa4 <__libc_init_array+0x3c>)
 800bf6e:	1b64      	subs	r4, r4, r5
 800bf70:	10a4      	asrs	r4, r4, #2
 800bf72:	2600      	movs	r6, #0
 800bf74:	42a6      	cmp	r6, r4
 800bf76:	d109      	bne.n	800bf8c <__libc_init_array+0x24>
 800bf78:	4d0b      	ldr	r5, [pc, #44]	; (800bfa8 <__libc_init_array+0x40>)
 800bf7a:	4c0c      	ldr	r4, [pc, #48]	; (800bfac <__libc_init_array+0x44>)
 800bf7c:	f000 fd0e 	bl	800c99c <_init>
 800bf80:	1b64      	subs	r4, r4, r5
 800bf82:	10a4      	asrs	r4, r4, #2
 800bf84:	2600      	movs	r6, #0
 800bf86:	42a6      	cmp	r6, r4
 800bf88:	d105      	bne.n	800bf96 <__libc_init_array+0x2e>
 800bf8a:	bd70      	pop	{r4, r5, r6, pc}
 800bf8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf90:	4798      	blx	r3
 800bf92:	3601      	adds	r6, #1
 800bf94:	e7ee      	b.n	800bf74 <__libc_init_array+0xc>
 800bf96:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf9a:	4798      	blx	r3
 800bf9c:	3601      	adds	r6, #1
 800bf9e:	e7f2      	b.n	800bf86 <__libc_init_array+0x1e>
 800bfa0:	08010268 	.word	0x08010268
 800bfa4:	08010268 	.word	0x08010268
 800bfa8:	08010268 	.word	0x08010268
 800bfac:	0801026c 	.word	0x0801026c

0800bfb0 <malloc>:
 800bfb0:	4b02      	ldr	r3, [pc, #8]	; (800bfbc <malloc+0xc>)
 800bfb2:	4601      	mov	r1, r0
 800bfb4:	6818      	ldr	r0, [r3, #0]
 800bfb6:	f000 b88b 	b.w	800c0d0 <_malloc_r>
 800bfba:	bf00      	nop
 800bfbc:	20000010 	.word	0x20000010

0800bfc0 <free>:
 800bfc0:	4b02      	ldr	r3, [pc, #8]	; (800bfcc <free+0xc>)
 800bfc2:	4601      	mov	r1, r0
 800bfc4:	6818      	ldr	r0, [r3, #0]
 800bfc6:	f000 b833 	b.w	800c030 <_free_r>
 800bfca:	bf00      	nop
 800bfcc:	20000010 	.word	0x20000010

0800bfd0 <memcpy>:
 800bfd0:	440a      	add	r2, r1
 800bfd2:	4291      	cmp	r1, r2
 800bfd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfd8:	d100      	bne.n	800bfdc <memcpy+0xc>
 800bfda:	4770      	bx	lr
 800bfdc:	b510      	push	{r4, lr}
 800bfde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfe6:	4291      	cmp	r1, r2
 800bfe8:	d1f9      	bne.n	800bfde <memcpy+0xe>
 800bfea:	bd10      	pop	{r4, pc}

0800bfec <memmove>:
 800bfec:	4288      	cmp	r0, r1
 800bfee:	b510      	push	{r4, lr}
 800bff0:	eb01 0402 	add.w	r4, r1, r2
 800bff4:	d902      	bls.n	800bffc <memmove+0x10>
 800bff6:	4284      	cmp	r4, r0
 800bff8:	4623      	mov	r3, r4
 800bffa:	d807      	bhi.n	800c00c <memmove+0x20>
 800bffc:	1e43      	subs	r3, r0, #1
 800bffe:	42a1      	cmp	r1, r4
 800c000:	d008      	beq.n	800c014 <memmove+0x28>
 800c002:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c00a:	e7f8      	b.n	800bffe <memmove+0x12>
 800c00c:	4402      	add	r2, r0
 800c00e:	4601      	mov	r1, r0
 800c010:	428a      	cmp	r2, r1
 800c012:	d100      	bne.n	800c016 <memmove+0x2a>
 800c014:	bd10      	pop	{r4, pc}
 800c016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c01a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c01e:	e7f7      	b.n	800c010 <memmove+0x24>

0800c020 <memset>:
 800c020:	4402      	add	r2, r0
 800c022:	4603      	mov	r3, r0
 800c024:	4293      	cmp	r3, r2
 800c026:	d100      	bne.n	800c02a <memset+0xa>
 800c028:	4770      	bx	lr
 800c02a:	f803 1b01 	strb.w	r1, [r3], #1
 800c02e:	e7f9      	b.n	800c024 <memset+0x4>

0800c030 <_free_r>:
 800c030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c032:	2900      	cmp	r1, #0
 800c034:	d048      	beq.n	800c0c8 <_free_r+0x98>
 800c036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c03a:	9001      	str	r0, [sp, #4]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f1a1 0404 	sub.w	r4, r1, #4
 800c042:	bfb8      	it	lt
 800c044:	18e4      	addlt	r4, r4, r3
 800c046:	f000 f97f 	bl	800c348 <__malloc_lock>
 800c04a:	4a20      	ldr	r2, [pc, #128]	; (800c0cc <_free_r+0x9c>)
 800c04c:	9801      	ldr	r0, [sp, #4]
 800c04e:	6813      	ldr	r3, [r2, #0]
 800c050:	4615      	mov	r5, r2
 800c052:	b933      	cbnz	r3, 800c062 <_free_r+0x32>
 800c054:	6063      	str	r3, [r4, #4]
 800c056:	6014      	str	r4, [r2, #0]
 800c058:	b003      	add	sp, #12
 800c05a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c05e:	f000 b979 	b.w	800c354 <__malloc_unlock>
 800c062:	42a3      	cmp	r3, r4
 800c064:	d90b      	bls.n	800c07e <_free_r+0x4e>
 800c066:	6821      	ldr	r1, [r4, #0]
 800c068:	1862      	adds	r2, r4, r1
 800c06a:	4293      	cmp	r3, r2
 800c06c:	bf04      	itt	eq
 800c06e:	681a      	ldreq	r2, [r3, #0]
 800c070:	685b      	ldreq	r3, [r3, #4]
 800c072:	6063      	str	r3, [r4, #4]
 800c074:	bf04      	itt	eq
 800c076:	1852      	addeq	r2, r2, r1
 800c078:	6022      	streq	r2, [r4, #0]
 800c07a:	602c      	str	r4, [r5, #0]
 800c07c:	e7ec      	b.n	800c058 <_free_r+0x28>
 800c07e:	461a      	mov	r2, r3
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	b10b      	cbz	r3, 800c088 <_free_r+0x58>
 800c084:	42a3      	cmp	r3, r4
 800c086:	d9fa      	bls.n	800c07e <_free_r+0x4e>
 800c088:	6811      	ldr	r1, [r2, #0]
 800c08a:	1855      	adds	r5, r2, r1
 800c08c:	42a5      	cmp	r5, r4
 800c08e:	d10b      	bne.n	800c0a8 <_free_r+0x78>
 800c090:	6824      	ldr	r4, [r4, #0]
 800c092:	4421      	add	r1, r4
 800c094:	1854      	adds	r4, r2, r1
 800c096:	42a3      	cmp	r3, r4
 800c098:	6011      	str	r1, [r2, #0]
 800c09a:	d1dd      	bne.n	800c058 <_free_r+0x28>
 800c09c:	681c      	ldr	r4, [r3, #0]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	6053      	str	r3, [r2, #4]
 800c0a2:	4421      	add	r1, r4
 800c0a4:	6011      	str	r1, [r2, #0]
 800c0a6:	e7d7      	b.n	800c058 <_free_r+0x28>
 800c0a8:	d902      	bls.n	800c0b0 <_free_r+0x80>
 800c0aa:	230c      	movs	r3, #12
 800c0ac:	6003      	str	r3, [r0, #0]
 800c0ae:	e7d3      	b.n	800c058 <_free_r+0x28>
 800c0b0:	6825      	ldr	r5, [r4, #0]
 800c0b2:	1961      	adds	r1, r4, r5
 800c0b4:	428b      	cmp	r3, r1
 800c0b6:	bf04      	itt	eq
 800c0b8:	6819      	ldreq	r1, [r3, #0]
 800c0ba:	685b      	ldreq	r3, [r3, #4]
 800c0bc:	6063      	str	r3, [r4, #4]
 800c0be:	bf04      	itt	eq
 800c0c0:	1949      	addeq	r1, r1, r5
 800c0c2:	6021      	streq	r1, [r4, #0]
 800c0c4:	6054      	str	r4, [r2, #4]
 800c0c6:	e7c7      	b.n	800c058 <_free_r+0x28>
 800c0c8:	b003      	add	sp, #12
 800c0ca:	bd30      	pop	{r4, r5, pc}
 800c0cc:	2000043c 	.word	0x2000043c

0800c0d0 <_malloc_r>:
 800c0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d2:	1ccd      	adds	r5, r1, #3
 800c0d4:	f025 0503 	bic.w	r5, r5, #3
 800c0d8:	3508      	adds	r5, #8
 800c0da:	2d0c      	cmp	r5, #12
 800c0dc:	bf38      	it	cc
 800c0de:	250c      	movcc	r5, #12
 800c0e0:	2d00      	cmp	r5, #0
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	db01      	blt.n	800c0ea <_malloc_r+0x1a>
 800c0e6:	42a9      	cmp	r1, r5
 800c0e8:	d903      	bls.n	800c0f2 <_malloc_r+0x22>
 800c0ea:	230c      	movs	r3, #12
 800c0ec:	6033      	str	r3, [r6, #0]
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0f2:	f000 f929 	bl	800c348 <__malloc_lock>
 800c0f6:	4921      	ldr	r1, [pc, #132]	; (800c17c <_malloc_r+0xac>)
 800c0f8:	680a      	ldr	r2, [r1, #0]
 800c0fa:	4614      	mov	r4, r2
 800c0fc:	b99c      	cbnz	r4, 800c126 <_malloc_r+0x56>
 800c0fe:	4f20      	ldr	r7, [pc, #128]	; (800c180 <_malloc_r+0xb0>)
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	b923      	cbnz	r3, 800c10e <_malloc_r+0x3e>
 800c104:	4621      	mov	r1, r4
 800c106:	4630      	mov	r0, r6
 800c108:	f000 f83c 	bl	800c184 <_sbrk_r>
 800c10c:	6038      	str	r0, [r7, #0]
 800c10e:	4629      	mov	r1, r5
 800c110:	4630      	mov	r0, r6
 800c112:	f000 f837 	bl	800c184 <_sbrk_r>
 800c116:	1c43      	adds	r3, r0, #1
 800c118:	d123      	bne.n	800c162 <_malloc_r+0x92>
 800c11a:	230c      	movs	r3, #12
 800c11c:	6033      	str	r3, [r6, #0]
 800c11e:	4630      	mov	r0, r6
 800c120:	f000 f918 	bl	800c354 <__malloc_unlock>
 800c124:	e7e3      	b.n	800c0ee <_malloc_r+0x1e>
 800c126:	6823      	ldr	r3, [r4, #0]
 800c128:	1b5b      	subs	r3, r3, r5
 800c12a:	d417      	bmi.n	800c15c <_malloc_r+0x8c>
 800c12c:	2b0b      	cmp	r3, #11
 800c12e:	d903      	bls.n	800c138 <_malloc_r+0x68>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	441c      	add	r4, r3
 800c134:	6025      	str	r5, [r4, #0]
 800c136:	e004      	b.n	800c142 <_malloc_r+0x72>
 800c138:	6863      	ldr	r3, [r4, #4]
 800c13a:	42a2      	cmp	r2, r4
 800c13c:	bf0c      	ite	eq
 800c13e:	600b      	streq	r3, [r1, #0]
 800c140:	6053      	strne	r3, [r2, #4]
 800c142:	4630      	mov	r0, r6
 800c144:	f000 f906 	bl	800c354 <__malloc_unlock>
 800c148:	f104 000b 	add.w	r0, r4, #11
 800c14c:	1d23      	adds	r3, r4, #4
 800c14e:	f020 0007 	bic.w	r0, r0, #7
 800c152:	1ac2      	subs	r2, r0, r3
 800c154:	d0cc      	beq.n	800c0f0 <_malloc_r+0x20>
 800c156:	1a1b      	subs	r3, r3, r0
 800c158:	50a3      	str	r3, [r4, r2]
 800c15a:	e7c9      	b.n	800c0f0 <_malloc_r+0x20>
 800c15c:	4622      	mov	r2, r4
 800c15e:	6864      	ldr	r4, [r4, #4]
 800c160:	e7cc      	b.n	800c0fc <_malloc_r+0x2c>
 800c162:	1cc4      	adds	r4, r0, #3
 800c164:	f024 0403 	bic.w	r4, r4, #3
 800c168:	42a0      	cmp	r0, r4
 800c16a:	d0e3      	beq.n	800c134 <_malloc_r+0x64>
 800c16c:	1a21      	subs	r1, r4, r0
 800c16e:	4630      	mov	r0, r6
 800c170:	f000 f808 	bl	800c184 <_sbrk_r>
 800c174:	3001      	adds	r0, #1
 800c176:	d1dd      	bne.n	800c134 <_malloc_r+0x64>
 800c178:	e7cf      	b.n	800c11a <_malloc_r+0x4a>
 800c17a:	bf00      	nop
 800c17c:	2000043c 	.word	0x2000043c
 800c180:	20000440 	.word	0x20000440

0800c184 <_sbrk_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4d06      	ldr	r5, [pc, #24]	; (800c1a0 <_sbrk_r+0x1c>)
 800c188:	2300      	movs	r3, #0
 800c18a:	4604      	mov	r4, r0
 800c18c:	4608      	mov	r0, r1
 800c18e:	602b      	str	r3, [r5, #0]
 800c190:	f7f6 fa6e 	bl	8002670 <_sbrk>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	d102      	bne.n	800c19e <_sbrk_r+0x1a>
 800c198:	682b      	ldr	r3, [r5, #0]
 800c19a:	b103      	cbz	r3, 800c19e <_sbrk_r+0x1a>
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	200004e4 	.word	0x200004e4

0800c1a4 <_raise_r>:
 800c1a4:	291f      	cmp	r1, #31
 800c1a6:	b538      	push	{r3, r4, r5, lr}
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	460d      	mov	r5, r1
 800c1ac:	d904      	bls.n	800c1b8 <_raise_r+0x14>
 800c1ae:	2316      	movs	r3, #22
 800c1b0:	6003      	str	r3, [r0, #0]
 800c1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b6:	bd38      	pop	{r3, r4, r5, pc}
 800c1b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c1ba:	b112      	cbz	r2, 800c1c2 <_raise_r+0x1e>
 800c1bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1c0:	b94b      	cbnz	r3, 800c1d6 <_raise_r+0x32>
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f000 f830 	bl	800c228 <_getpid_r>
 800c1c8:	462a      	mov	r2, r5
 800c1ca:	4601      	mov	r1, r0
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1d2:	f000 b817 	b.w	800c204 <_kill_r>
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d00a      	beq.n	800c1f0 <_raise_r+0x4c>
 800c1da:	1c59      	adds	r1, r3, #1
 800c1dc:	d103      	bne.n	800c1e6 <_raise_r+0x42>
 800c1de:	2316      	movs	r3, #22
 800c1e0:	6003      	str	r3, [r0, #0]
 800c1e2:	2001      	movs	r0, #1
 800c1e4:	e7e7      	b.n	800c1b6 <_raise_r+0x12>
 800c1e6:	2400      	movs	r4, #0
 800c1e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	4798      	blx	r3
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	e7e0      	b.n	800c1b6 <_raise_r+0x12>

0800c1f4 <raise>:
 800c1f4:	4b02      	ldr	r3, [pc, #8]	; (800c200 <raise+0xc>)
 800c1f6:	4601      	mov	r1, r0
 800c1f8:	6818      	ldr	r0, [r3, #0]
 800c1fa:	f7ff bfd3 	b.w	800c1a4 <_raise_r>
 800c1fe:	bf00      	nop
 800c200:	20000010 	.word	0x20000010

0800c204 <_kill_r>:
 800c204:	b538      	push	{r3, r4, r5, lr}
 800c206:	4d07      	ldr	r5, [pc, #28]	; (800c224 <_kill_r+0x20>)
 800c208:	2300      	movs	r3, #0
 800c20a:	4604      	mov	r4, r0
 800c20c:	4608      	mov	r0, r1
 800c20e:	4611      	mov	r1, r2
 800c210:	602b      	str	r3, [r5, #0]
 800c212:	f7f6 fa12 	bl	800263a <_kill>
 800c216:	1c43      	adds	r3, r0, #1
 800c218:	d102      	bne.n	800c220 <_kill_r+0x1c>
 800c21a:	682b      	ldr	r3, [r5, #0]
 800c21c:	b103      	cbz	r3, 800c220 <_kill_r+0x1c>
 800c21e:	6023      	str	r3, [r4, #0]
 800c220:	bd38      	pop	{r3, r4, r5, pc}
 800c222:	bf00      	nop
 800c224:	200004e4 	.word	0x200004e4

0800c228 <_getpid_r>:
 800c228:	f7f6 b9ff 	b.w	800262a <_getpid>

0800c22c <siprintf>:
 800c22c:	b40e      	push	{r1, r2, r3}
 800c22e:	b500      	push	{lr}
 800c230:	b09c      	sub	sp, #112	; 0x70
 800c232:	ab1d      	add	r3, sp, #116	; 0x74
 800c234:	9002      	str	r0, [sp, #8]
 800c236:	9006      	str	r0, [sp, #24]
 800c238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c23c:	4809      	ldr	r0, [pc, #36]	; (800c264 <siprintf+0x38>)
 800c23e:	9107      	str	r1, [sp, #28]
 800c240:	9104      	str	r1, [sp, #16]
 800c242:	4909      	ldr	r1, [pc, #36]	; (800c268 <siprintf+0x3c>)
 800c244:	f853 2b04 	ldr.w	r2, [r3], #4
 800c248:	9105      	str	r1, [sp, #20]
 800c24a:	6800      	ldr	r0, [r0, #0]
 800c24c:	9301      	str	r3, [sp, #4]
 800c24e:	a902      	add	r1, sp, #8
 800c250:	f000 f8e2 	bl	800c418 <_svfiprintf_r>
 800c254:	9b02      	ldr	r3, [sp, #8]
 800c256:	2200      	movs	r2, #0
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	b01c      	add	sp, #112	; 0x70
 800c25c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c260:	b003      	add	sp, #12
 800c262:	4770      	bx	lr
 800c264:	20000010 	.word	0x20000010
 800c268:	ffff0208 	.word	0xffff0208

0800c26c <strcpy>:
 800c26c:	4603      	mov	r3, r0
 800c26e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c272:	f803 2b01 	strb.w	r2, [r3], #1
 800c276:	2a00      	cmp	r2, #0
 800c278:	d1f9      	bne.n	800c26e <strcpy+0x2>
 800c27a:	4770      	bx	lr

0800c27c <__register_exitproc>:
 800c27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c280:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800c33c <__register_exitproc+0xc0>
 800c284:	4606      	mov	r6, r0
 800c286:	f8d8 0000 	ldr.w	r0, [r8]
 800c28a:	461f      	mov	r7, r3
 800c28c:	460d      	mov	r5, r1
 800c28e:	4691      	mov	r9, r2
 800c290:	f000 f856 	bl	800c340 <__retarget_lock_acquire_recursive>
 800c294:	4b25      	ldr	r3, [pc, #148]	; (800c32c <__register_exitproc+0xb0>)
 800c296:	681c      	ldr	r4, [r3, #0]
 800c298:	b934      	cbnz	r4, 800c2a8 <__register_exitproc+0x2c>
 800c29a:	4c25      	ldr	r4, [pc, #148]	; (800c330 <__register_exitproc+0xb4>)
 800c29c:	601c      	str	r4, [r3, #0]
 800c29e:	4b25      	ldr	r3, [pc, #148]	; (800c334 <__register_exitproc+0xb8>)
 800c2a0:	b113      	cbz	r3, 800c2a8 <__register_exitproc+0x2c>
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800c2a8:	6863      	ldr	r3, [r4, #4]
 800c2aa:	2b1f      	cmp	r3, #31
 800c2ac:	dd07      	ble.n	800c2be <__register_exitproc+0x42>
 800c2ae:	f8d8 0000 	ldr.w	r0, [r8]
 800c2b2:	f000 f847 	bl	800c344 <__retarget_lock_release_recursive>
 800c2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2be:	b34e      	cbz	r6, 800c314 <__register_exitproc+0x98>
 800c2c0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800c2c4:	b988      	cbnz	r0, 800c2ea <__register_exitproc+0x6e>
 800c2c6:	4b1c      	ldr	r3, [pc, #112]	; (800c338 <__register_exitproc+0xbc>)
 800c2c8:	b923      	cbnz	r3, 800c2d4 <__register_exitproc+0x58>
 800c2ca:	f8d8 0000 	ldr.w	r0, [r8]
 800c2ce:	f000 f838 	bl	800c342 <__retarget_lock_release>
 800c2d2:	e7f0      	b.n	800c2b6 <__register_exitproc+0x3a>
 800c2d4:	f44f 7084 	mov.w	r0, #264	; 0x108
 800c2d8:	f7ff fe6a 	bl	800bfb0 <malloc>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	d0f4      	beq.n	800c2ca <__register_exitproc+0x4e>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800c2e6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800c2ea:	6863      	ldr	r3, [r4, #4]
 800c2ec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	409a      	lsls	r2, r3
 800c2f4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800c2f8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	2e02      	cmp	r6, #2
 800c300:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800c304:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800c308:	bf02      	ittt	eq
 800c30a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800c30e:	431a      	orreq	r2, r3
 800c310:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 800c314:	6863      	ldr	r3, [r4, #4]
 800c316:	f8d8 0000 	ldr.w	r0, [r8]
 800c31a:	1c5a      	adds	r2, r3, #1
 800c31c:	3302      	adds	r3, #2
 800c31e:	6062      	str	r2, [r4, #4]
 800c320:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800c324:	f000 f80e 	bl	800c344 <__retarget_lock_release_recursive>
 800c328:	2000      	movs	r0, #0
 800c32a:	e7c6      	b.n	800c2ba <__register_exitproc+0x3e>
 800c32c:	200004d0 	.word	0x200004d0
 800c330:	20000444 	.word	0x20000444
 800c334:	00000000 	.word	0x00000000
 800c338:	0800bfb1 	.word	0x0800bfb1
 800c33c:	20000074 	.word	0x20000074

0800c340 <__retarget_lock_acquire_recursive>:
 800c340:	4770      	bx	lr

0800c342 <__retarget_lock_release>:
 800c342:	4770      	bx	lr

0800c344 <__retarget_lock_release_recursive>:
 800c344:	4770      	bx	lr
	...

0800c348 <__malloc_lock>:
 800c348:	4801      	ldr	r0, [pc, #4]	; (800c350 <__malloc_lock+0x8>)
 800c34a:	f7ff bff9 	b.w	800c340 <__retarget_lock_acquire_recursive>
 800c34e:	bf00      	nop
 800c350:	200004dc 	.word	0x200004dc

0800c354 <__malloc_unlock>:
 800c354:	4801      	ldr	r0, [pc, #4]	; (800c35c <__malloc_unlock+0x8>)
 800c356:	f7ff bff5 	b.w	800c344 <__retarget_lock_release_recursive>
 800c35a:	bf00      	nop
 800c35c:	200004dc 	.word	0x200004dc

0800c360 <__ssputs_r>:
 800c360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c364:	688e      	ldr	r6, [r1, #8]
 800c366:	429e      	cmp	r6, r3
 800c368:	4682      	mov	sl, r0
 800c36a:	460c      	mov	r4, r1
 800c36c:	4690      	mov	r8, r2
 800c36e:	461f      	mov	r7, r3
 800c370:	d838      	bhi.n	800c3e4 <__ssputs_r+0x84>
 800c372:	898a      	ldrh	r2, [r1, #12]
 800c374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c378:	d032      	beq.n	800c3e0 <__ssputs_r+0x80>
 800c37a:	6825      	ldr	r5, [r4, #0]
 800c37c:	6909      	ldr	r1, [r1, #16]
 800c37e:	eba5 0901 	sub.w	r9, r5, r1
 800c382:	6965      	ldr	r5, [r4, #20]
 800c384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c38c:	3301      	adds	r3, #1
 800c38e:	444b      	add	r3, r9
 800c390:	106d      	asrs	r5, r5, #1
 800c392:	429d      	cmp	r5, r3
 800c394:	bf38      	it	cc
 800c396:	461d      	movcc	r5, r3
 800c398:	0553      	lsls	r3, r2, #21
 800c39a:	d531      	bpl.n	800c400 <__ssputs_r+0xa0>
 800c39c:	4629      	mov	r1, r5
 800c39e:	f7ff fe97 	bl	800c0d0 <_malloc_r>
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	b950      	cbnz	r0, 800c3bc <__ssputs_r+0x5c>
 800c3a6:	230c      	movs	r3, #12
 800c3a8:	f8ca 3000 	str.w	r3, [sl]
 800c3ac:	89a3      	ldrh	r3, [r4, #12]
 800c3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3b2:	81a3      	strh	r3, [r4, #12]
 800c3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3bc:	6921      	ldr	r1, [r4, #16]
 800c3be:	464a      	mov	r2, r9
 800c3c0:	f7ff fe06 	bl	800bfd0 <memcpy>
 800c3c4:	89a3      	ldrh	r3, [r4, #12]
 800c3c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ce:	81a3      	strh	r3, [r4, #12]
 800c3d0:	6126      	str	r6, [r4, #16]
 800c3d2:	6165      	str	r5, [r4, #20]
 800c3d4:	444e      	add	r6, r9
 800c3d6:	eba5 0509 	sub.w	r5, r5, r9
 800c3da:	6026      	str	r6, [r4, #0]
 800c3dc:	60a5      	str	r5, [r4, #8]
 800c3de:	463e      	mov	r6, r7
 800c3e0:	42be      	cmp	r6, r7
 800c3e2:	d900      	bls.n	800c3e6 <__ssputs_r+0x86>
 800c3e4:	463e      	mov	r6, r7
 800c3e6:	4632      	mov	r2, r6
 800c3e8:	6820      	ldr	r0, [r4, #0]
 800c3ea:	4641      	mov	r1, r8
 800c3ec:	f7ff fdfe 	bl	800bfec <memmove>
 800c3f0:	68a3      	ldr	r3, [r4, #8]
 800c3f2:	6822      	ldr	r2, [r4, #0]
 800c3f4:	1b9b      	subs	r3, r3, r6
 800c3f6:	4432      	add	r2, r6
 800c3f8:	60a3      	str	r3, [r4, #8]
 800c3fa:	6022      	str	r2, [r4, #0]
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	e7db      	b.n	800c3b8 <__ssputs_r+0x58>
 800c400:	462a      	mov	r2, r5
 800c402:	f000 fa9d 	bl	800c940 <_realloc_r>
 800c406:	4606      	mov	r6, r0
 800c408:	2800      	cmp	r0, #0
 800c40a:	d1e1      	bne.n	800c3d0 <__ssputs_r+0x70>
 800c40c:	6921      	ldr	r1, [r4, #16]
 800c40e:	4650      	mov	r0, sl
 800c410:	f7ff fe0e 	bl	800c030 <_free_r>
 800c414:	e7c7      	b.n	800c3a6 <__ssputs_r+0x46>
	...

0800c418 <_svfiprintf_r>:
 800c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41c:	4698      	mov	r8, r3
 800c41e:	898b      	ldrh	r3, [r1, #12]
 800c420:	061b      	lsls	r3, r3, #24
 800c422:	b09d      	sub	sp, #116	; 0x74
 800c424:	4607      	mov	r7, r0
 800c426:	460d      	mov	r5, r1
 800c428:	4614      	mov	r4, r2
 800c42a:	d50e      	bpl.n	800c44a <_svfiprintf_r+0x32>
 800c42c:	690b      	ldr	r3, [r1, #16]
 800c42e:	b963      	cbnz	r3, 800c44a <_svfiprintf_r+0x32>
 800c430:	2140      	movs	r1, #64	; 0x40
 800c432:	f7ff fe4d 	bl	800c0d0 <_malloc_r>
 800c436:	6028      	str	r0, [r5, #0]
 800c438:	6128      	str	r0, [r5, #16]
 800c43a:	b920      	cbnz	r0, 800c446 <_svfiprintf_r+0x2e>
 800c43c:	230c      	movs	r3, #12
 800c43e:	603b      	str	r3, [r7, #0]
 800c440:	f04f 30ff 	mov.w	r0, #4294967295
 800c444:	e0d1      	b.n	800c5ea <_svfiprintf_r+0x1d2>
 800c446:	2340      	movs	r3, #64	; 0x40
 800c448:	616b      	str	r3, [r5, #20]
 800c44a:	2300      	movs	r3, #0
 800c44c:	9309      	str	r3, [sp, #36]	; 0x24
 800c44e:	2320      	movs	r3, #32
 800c450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c454:	f8cd 800c 	str.w	r8, [sp, #12]
 800c458:	2330      	movs	r3, #48	; 0x30
 800c45a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c604 <_svfiprintf_r+0x1ec>
 800c45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c462:	f04f 0901 	mov.w	r9, #1
 800c466:	4623      	mov	r3, r4
 800c468:	469a      	mov	sl, r3
 800c46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c46e:	b10a      	cbz	r2, 800c474 <_svfiprintf_r+0x5c>
 800c470:	2a25      	cmp	r2, #37	; 0x25
 800c472:	d1f9      	bne.n	800c468 <_svfiprintf_r+0x50>
 800c474:	ebba 0b04 	subs.w	fp, sl, r4
 800c478:	d00b      	beq.n	800c492 <_svfiprintf_r+0x7a>
 800c47a:	465b      	mov	r3, fp
 800c47c:	4622      	mov	r2, r4
 800c47e:	4629      	mov	r1, r5
 800c480:	4638      	mov	r0, r7
 800c482:	f7ff ff6d 	bl	800c360 <__ssputs_r>
 800c486:	3001      	adds	r0, #1
 800c488:	f000 80aa 	beq.w	800c5e0 <_svfiprintf_r+0x1c8>
 800c48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c48e:	445a      	add	r2, fp
 800c490:	9209      	str	r2, [sp, #36]	; 0x24
 800c492:	f89a 3000 	ldrb.w	r3, [sl]
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 80a2 	beq.w	800c5e0 <_svfiprintf_r+0x1c8>
 800c49c:	2300      	movs	r3, #0
 800c49e:	f04f 32ff 	mov.w	r2, #4294967295
 800c4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4a6:	f10a 0a01 	add.w	sl, sl, #1
 800c4aa:	9304      	str	r3, [sp, #16]
 800c4ac:	9307      	str	r3, [sp, #28]
 800c4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4b2:	931a      	str	r3, [sp, #104]	; 0x68
 800c4b4:	4654      	mov	r4, sl
 800c4b6:	2205      	movs	r2, #5
 800c4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4bc:	4851      	ldr	r0, [pc, #324]	; (800c604 <_svfiprintf_r+0x1ec>)
 800c4be:	f7f3 fec7 	bl	8000250 <memchr>
 800c4c2:	9a04      	ldr	r2, [sp, #16]
 800c4c4:	b9d8      	cbnz	r0, 800c4fe <_svfiprintf_r+0xe6>
 800c4c6:	06d0      	lsls	r0, r2, #27
 800c4c8:	bf44      	itt	mi
 800c4ca:	2320      	movmi	r3, #32
 800c4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4d0:	0711      	lsls	r1, r2, #28
 800c4d2:	bf44      	itt	mi
 800c4d4:	232b      	movmi	r3, #43	; 0x2b
 800c4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4da:	f89a 3000 	ldrb.w	r3, [sl]
 800c4de:	2b2a      	cmp	r3, #42	; 0x2a
 800c4e0:	d015      	beq.n	800c50e <_svfiprintf_r+0xf6>
 800c4e2:	9a07      	ldr	r2, [sp, #28]
 800c4e4:	4654      	mov	r4, sl
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	f04f 0c0a 	mov.w	ip, #10
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4f2:	3b30      	subs	r3, #48	; 0x30
 800c4f4:	2b09      	cmp	r3, #9
 800c4f6:	d94e      	bls.n	800c596 <_svfiprintf_r+0x17e>
 800c4f8:	b1b0      	cbz	r0, 800c528 <_svfiprintf_r+0x110>
 800c4fa:	9207      	str	r2, [sp, #28]
 800c4fc:	e014      	b.n	800c528 <_svfiprintf_r+0x110>
 800c4fe:	eba0 0308 	sub.w	r3, r0, r8
 800c502:	fa09 f303 	lsl.w	r3, r9, r3
 800c506:	4313      	orrs	r3, r2
 800c508:	9304      	str	r3, [sp, #16]
 800c50a:	46a2      	mov	sl, r4
 800c50c:	e7d2      	b.n	800c4b4 <_svfiprintf_r+0x9c>
 800c50e:	9b03      	ldr	r3, [sp, #12]
 800c510:	1d19      	adds	r1, r3, #4
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	9103      	str	r1, [sp, #12]
 800c516:	2b00      	cmp	r3, #0
 800c518:	bfbb      	ittet	lt
 800c51a:	425b      	neglt	r3, r3
 800c51c:	f042 0202 	orrlt.w	r2, r2, #2
 800c520:	9307      	strge	r3, [sp, #28]
 800c522:	9307      	strlt	r3, [sp, #28]
 800c524:	bfb8      	it	lt
 800c526:	9204      	strlt	r2, [sp, #16]
 800c528:	7823      	ldrb	r3, [r4, #0]
 800c52a:	2b2e      	cmp	r3, #46	; 0x2e
 800c52c:	d10c      	bne.n	800c548 <_svfiprintf_r+0x130>
 800c52e:	7863      	ldrb	r3, [r4, #1]
 800c530:	2b2a      	cmp	r3, #42	; 0x2a
 800c532:	d135      	bne.n	800c5a0 <_svfiprintf_r+0x188>
 800c534:	9b03      	ldr	r3, [sp, #12]
 800c536:	1d1a      	adds	r2, r3, #4
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	9203      	str	r2, [sp, #12]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	bfb8      	it	lt
 800c540:	f04f 33ff 	movlt.w	r3, #4294967295
 800c544:	3402      	adds	r4, #2
 800c546:	9305      	str	r3, [sp, #20]
 800c548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c614 <_svfiprintf_r+0x1fc>
 800c54c:	7821      	ldrb	r1, [r4, #0]
 800c54e:	2203      	movs	r2, #3
 800c550:	4650      	mov	r0, sl
 800c552:	f7f3 fe7d 	bl	8000250 <memchr>
 800c556:	b140      	cbz	r0, 800c56a <_svfiprintf_r+0x152>
 800c558:	2340      	movs	r3, #64	; 0x40
 800c55a:	eba0 000a 	sub.w	r0, r0, sl
 800c55e:	fa03 f000 	lsl.w	r0, r3, r0
 800c562:	9b04      	ldr	r3, [sp, #16]
 800c564:	4303      	orrs	r3, r0
 800c566:	3401      	adds	r4, #1
 800c568:	9304      	str	r3, [sp, #16]
 800c56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c56e:	4826      	ldr	r0, [pc, #152]	; (800c608 <_svfiprintf_r+0x1f0>)
 800c570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c574:	2206      	movs	r2, #6
 800c576:	f7f3 fe6b 	bl	8000250 <memchr>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	d038      	beq.n	800c5f0 <_svfiprintf_r+0x1d8>
 800c57e:	4b23      	ldr	r3, [pc, #140]	; (800c60c <_svfiprintf_r+0x1f4>)
 800c580:	bb1b      	cbnz	r3, 800c5ca <_svfiprintf_r+0x1b2>
 800c582:	9b03      	ldr	r3, [sp, #12]
 800c584:	3307      	adds	r3, #7
 800c586:	f023 0307 	bic.w	r3, r3, #7
 800c58a:	3308      	adds	r3, #8
 800c58c:	9303      	str	r3, [sp, #12]
 800c58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c590:	4433      	add	r3, r6
 800c592:	9309      	str	r3, [sp, #36]	; 0x24
 800c594:	e767      	b.n	800c466 <_svfiprintf_r+0x4e>
 800c596:	fb0c 3202 	mla	r2, ip, r2, r3
 800c59a:	460c      	mov	r4, r1
 800c59c:	2001      	movs	r0, #1
 800c59e:	e7a5      	b.n	800c4ec <_svfiprintf_r+0xd4>
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	3401      	adds	r4, #1
 800c5a4:	9305      	str	r3, [sp, #20]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	f04f 0c0a 	mov.w	ip, #10
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5b2:	3a30      	subs	r2, #48	; 0x30
 800c5b4:	2a09      	cmp	r2, #9
 800c5b6:	d903      	bls.n	800c5c0 <_svfiprintf_r+0x1a8>
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d0c5      	beq.n	800c548 <_svfiprintf_r+0x130>
 800c5bc:	9105      	str	r1, [sp, #20]
 800c5be:	e7c3      	b.n	800c548 <_svfiprintf_r+0x130>
 800c5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e7f0      	b.n	800c5ac <_svfiprintf_r+0x194>
 800c5ca:	ab03      	add	r3, sp, #12
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	462a      	mov	r2, r5
 800c5d0:	4b0f      	ldr	r3, [pc, #60]	; (800c610 <_svfiprintf_r+0x1f8>)
 800c5d2:	a904      	add	r1, sp, #16
 800c5d4:	4638      	mov	r0, r7
 800c5d6:	f3af 8000 	nop.w
 800c5da:	1c42      	adds	r2, r0, #1
 800c5dc:	4606      	mov	r6, r0
 800c5de:	d1d6      	bne.n	800c58e <_svfiprintf_r+0x176>
 800c5e0:	89ab      	ldrh	r3, [r5, #12]
 800c5e2:	065b      	lsls	r3, r3, #25
 800c5e4:	f53f af2c 	bmi.w	800c440 <_svfiprintf_r+0x28>
 800c5e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5ea:	b01d      	add	sp, #116	; 0x74
 800c5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f0:	ab03      	add	r3, sp, #12
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	462a      	mov	r2, r5
 800c5f6:	4b06      	ldr	r3, [pc, #24]	; (800c610 <_svfiprintf_r+0x1f8>)
 800c5f8:	a904      	add	r1, sp, #16
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	f000 f87a 	bl	800c6f4 <_printf_i>
 800c600:	e7eb      	b.n	800c5da <_svfiprintf_r+0x1c2>
 800c602:	bf00      	nop
 800c604:	0801022c 	.word	0x0801022c
 800c608:	08010236 	.word	0x08010236
 800c60c:	00000000 	.word	0x00000000
 800c610:	0800c361 	.word	0x0800c361
 800c614:	08010232 	.word	0x08010232

0800c618 <_printf_common>:
 800c618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c61c:	4616      	mov	r6, r2
 800c61e:	4699      	mov	r9, r3
 800c620:	688a      	ldr	r2, [r1, #8]
 800c622:	690b      	ldr	r3, [r1, #16]
 800c624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c628:	4293      	cmp	r3, r2
 800c62a:	bfb8      	it	lt
 800c62c:	4613      	movlt	r3, r2
 800c62e:	6033      	str	r3, [r6, #0]
 800c630:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c634:	4607      	mov	r7, r0
 800c636:	460c      	mov	r4, r1
 800c638:	b10a      	cbz	r2, 800c63e <_printf_common+0x26>
 800c63a:	3301      	adds	r3, #1
 800c63c:	6033      	str	r3, [r6, #0]
 800c63e:	6823      	ldr	r3, [r4, #0]
 800c640:	0699      	lsls	r1, r3, #26
 800c642:	bf42      	ittt	mi
 800c644:	6833      	ldrmi	r3, [r6, #0]
 800c646:	3302      	addmi	r3, #2
 800c648:	6033      	strmi	r3, [r6, #0]
 800c64a:	6825      	ldr	r5, [r4, #0]
 800c64c:	f015 0506 	ands.w	r5, r5, #6
 800c650:	d106      	bne.n	800c660 <_printf_common+0x48>
 800c652:	f104 0a19 	add.w	sl, r4, #25
 800c656:	68e3      	ldr	r3, [r4, #12]
 800c658:	6832      	ldr	r2, [r6, #0]
 800c65a:	1a9b      	subs	r3, r3, r2
 800c65c:	42ab      	cmp	r3, r5
 800c65e:	dc26      	bgt.n	800c6ae <_printf_common+0x96>
 800c660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c664:	1e13      	subs	r3, r2, #0
 800c666:	6822      	ldr	r2, [r4, #0]
 800c668:	bf18      	it	ne
 800c66a:	2301      	movne	r3, #1
 800c66c:	0692      	lsls	r2, r2, #26
 800c66e:	d42b      	bmi.n	800c6c8 <_printf_common+0xb0>
 800c670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c674:	4649      	mov	r1, r9
 800c676:	4638      	mov	r0, r7
 800c678:	47c0      	blx	r8
 800c67a:	3001      	adds	r0, #1
 800c67c:	d01e      	beq.n	800c6bc <_printf_common+0xa4>
 800c67e:	6823      	ldr	r3, [r4, #0]
 800c680:	68e5      	ldr	r5, [r4, #12]
 800c682:	6832      	ldr	r2, [r6, #0]
 800c684:	f003 0306 	and.w	r3, r3, #6
 800c688:	2b04      	cmp	r3, #4
 800c68a:	bf08      	it	eq
 800c68c:	1aad      	subeq	r5, r5, r2
 800c68e:	68a3      	ldr	r3, [r4, #8]
 800c690:	6922      	ldr	r2, [r4, #16]
 800c692:	bf0c      	ite	eq
 800c694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c698:	2500      	movne	r5, #0
 800c69a:	4293      	cmp	r3, r2
 800c69c:	bfc4      	itt	gt
 800c69e:	1a9b      	subgt	r3, r3, r2
 800c6a0:	18ed      	addgt	r5, r5, r3
 800c6a2:	2600      	movs	r6, #0
 800c6a4:	341a      	adds	r4, #26
 800c6a6:	42b5      	cmp	r5, r6
 800c6a8:	d11a      	bne.n	800c6e0 <_printf_common+0xc8>
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	e008      	b.n	800c6c0 <_printf_common+0xa8>
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	4652      	mov	r2, sl
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	4638      	mov	r0, r7
 800c6b6:	47c0      	blx	r8
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	d103      	bne.n	800c6c4 <_printf_common+0xac>
 800c6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6c4:	3501      	adds	r5, #1
 800c6c6:	e7c6      	b.n	800c656 <_printf_common+0x3e>
 800c6c8:	18e1      	adds	r1, r4, r3
 800c6ca:	1c5a      	adds	r2, r3, #1
 800c6cc:	2030      	movs	r0, #48	; 0x30
 800c6ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6d2:	4422      	add	r2, r4
 800c6d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6dc:	3302      	adds	r3, #2
 800c6de:	e7c7      	b.n	800c670 <_printf_common+0x58>
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	4622      	mov	r2, r4
 800c6e4:	4649      	mov	r1, r9
 800c6e6:	4638      	mov	r0, r7
 800c6e8:	47c0      	blx	r8
 800c6ea:	3001      	adds	r0, #1
 800c6ec:	d0e6      	beq.n	800c6bc <_printf_common+0xa4>
 800c6ee:	3601      	adds	r6, #1
 800c6f0:	e7d9      	b.n	800c6a6 <_printf_common+0x8e>
	...

0800c6f4 <_printf_i>:
 800c6f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	4691      	mov	r9, r2
 800c6fc:	7e27      	ldrb	r7, [r4, #24]
 800c6fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c700:	2f78      	cmp	r7, #120	; 0x78
 800c702:	4680      	mov	r8, r0
 800c704:	469a      	mov	sl, r3
 800c706:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c70a:	d807      	bhi.n	800c71c <_printf_i+0x28>
 800c70c:	2f62      	cmp	r7, #98	; 0x62
 800c70e:	d80a      	bhi.n	800c726 <_printf_i+0x32>
 800c710:	2f00      	cmp	r7, #0
 800c712:	f000 80d8 	beq.w	800c8c6 <_printf_i+0x1d2>
 800c716:	2f58      	cmp	r7, #88	; 0x58
 800c718:	f000 80a3 	beq.w	800c862 <_printf_i+0x16e>
 800c71c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c724:	e03a      	b.n	800c79c <_printf_i+0xa8>
 800c726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c72a:	2b15      	cmp	r3, #21
 800c72c:	d8f6      	bhi.n	800c71c <_printf_i+0x28>
 800c72e:	a001      	add	r0, pc, #4	; (adr r0, 800c734 <_printf_i+0x40>)
 800c730:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c734:	0800c78d 	.word	0x0800c78d
 800c738:	0800c7a1 	.word	0x0800c7a1
 800c73c:	0800c71d 	.word	0x0800c71d
 800c740:	0800c71d 	.word	0x0800c71d
 800c744:	0800c71d 	.word	0x0800c71d
 800c748:	0800c71d 	.word	0x0800c71d
 800c74c:	0800c7a1 	.word	0x0800c7a1
 800c750:	0800c71d 	.word	0x0800c71d
 800c754:	0800c71d 	.word	0x0800c71d
 800c758:	0800c71d 	.word	0x0800c71d
 800c75c:	0800c71d 	.word	0x0800c71d
 800c760:	0800c8ad 	.word	0x0800c8ad
 800c764:	0800c7d1 	.word	0x0800c7d1
 800c768:	0800c88f 	.word	0x0800c88f
 800c76c:	0800c71d 	.word	0x0800c71d
 800c770:	0800c71d 	.word	0x0800c71d
 800c774:	0800c8cf 	.word	0x0800c8cf
 800c778:	0800c71d 	.word	0x0800c71d
 800c77c:	0800c7d1 	.word	0x0800c7d1
 800c780:	0800c71d 	.word	0x0800c71d
 800c784:	0800c71d 	.word	0x0800c71d
 800c788:	0800c897 	.word	0x0800c897
 800c78c:	680b      	ldr	r3, [r1, #0]
 800c78e:	1d1a      	adds	r2, r3, #4
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	600a      	str	r2, [r1, #0]
 800c794:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c79c:	2301      	movs	r3, #1
 800c79e:	e0a3      	b.n	800c8e8 <_printf_i+0x1f4>
 800c7a0:	6825      	ldr	r5, [r4, #0]
 800c7a2:	6808      	ldr	r0, [r1, #0]
 800c7a4:	062e      	lsls	r6, r5, #24
 800c7a6:	f100 0304 	add.w	r3, r0, #4
 800c7aa:	d50a      	bpl.n	800c7c2 <_printf_i+0xce>
 800c7ac:	6805      	ldr	r5, [r0, #0]
 800c7ae:	600b      	str	r3, [r1, #0]
 800c7b0:	2d00      	cmp	r5, #0
 800c7b2:	da03      	bge.n	800c7bc <_printf_i+0xc8>
 800c7b4:	232d      	movs	r3, #45	; 0x2d
 800c7b6:	426d      	negs	r5, r5
 800c7b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7bc:	485e      	ldr	r0, [pc, #376]	; (800c938 <_printf_i+0x244>)
 800c7be:	230a      	movs	r3, #10
 800c7c0:	e019      	b.n	800c7f6 <_printf_i+0x102>
 800c7c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c7c6:	6805      	ldr	r5, [r0, #0]
 800c7c8:	600b      	str	r3, [r1, #0]
 800c7ca:	bf18      	it	ne
 800c7cc:	b22d      	sxthne	r5, r5
 800c7ce:	e7ef      	b.n	800c7b0 <_printf_i+0xbc>
 800c7d0:	680b      	ldr	r3, [r1, #0]
 800c7d2:	6825      	ldr	r5, [r4, #0]
 800c7d4:	1d18      	adds	r0, r3, #4
 800c7d6:	6008      	str	r0, [r1, #0]
 800c7d8:	0628      	lsls	r0, r5, #24
 800c7da:	d501      	bpl.n	800c7e0 <_printf_i+0xec>
 800c7dc:	681d      	ldr	r5, [r3, #0]
 800c7de:	e002      	b.n	800c7e6 <_printf_i+0xf2>
 800c7e0:	0669      	lsls	r1, r5, #25
 800c7e2:	d5fb      	bpl.n	800c7dc <_printf_i+0xe8>
 800c7e4:	881d      	ldrh	r5, [r3, #0]
 800c7e6:	4854      	ldr	r0, [pc, #336]	; (800c938 <_printf_i+0x244>)
 800c7e8:	2f6f      	cmp	r7, #111	; 0x6f
 800c7ea:	bf0c      	ite	eq
 800c7ec:	2308      	moveq	r3, #8
 800c7ee:	230a      	movne	r3, #10
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7f6:	6866      	ldr	r6, [r4, #4]
 800c7f8:	60a6      	str	r6, [r4, #8]
 800c7fa:	2e00      	cmp	r6, #0
 800c7fc:	bfa2      	ittt	ge
 800c7fe:	6821      	ldrge	r1, [r4, #0]
 800c800:	f021 0104 	bicge.w	r1, r1, #4
 800c804:	6021      	strge	r1, [r4, #0]
 800c806:	b90d      	cbnz	r5, 800c80c <_printf_i+0x118>
 800c808:	2e00      	cmp	r6, #0
 800c80a:	d04d      	beq.n	800c8a8 <_printf_i+0x1b4>
 800c80c:	4616      	mov	r6, r2
 800c80e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c812:	fb03 5711 	mls	r7, r3, r1, r5
 800c816:	5dc7      	ldrb	r7, [r0, r7]
 800c818:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c81c:	462f      	mov	r7, r5
 800c81e:	42bb      	cmp	r3, r7
 800c820:	460d      	mov	r5, r1
 800c822:	d9f4      	bls.n	800c80e <_printf_i+0x11a>
 800c824:	2b08      	cmp	r3, #8
 800c826:	d10b      	bne.n	800c840 <_printf_i+0x14c>
 800c828:	6823      	ldr	r3, [r4, #0]
 800c82a:	07df      	lsls	r7, r3, #31
 800c82c:	d508      	bpl.n	800c840 <_printf_i+0x14c>
 800c82e:	6923      	ldr	r3, [r4, #16]
 800c830:	6861      	ldr	r1, [r4, #4]
 800c832:	4299      	cmp	r1, r3
 800c834:	bfde      	ittt	le
 800c836:	2330      	movle	r3, #48	; 0x30
 800c838:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c83c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c840:	1b92      	subs	r2, r2, r6
 800c842:	6122      	str	r2, [r4, #16]
 800c844:	f8cd a000 	str.w	sl, [sp]
 800c848:	464b      	mov	r3, r9
 800c84a:	aa03      	add	r2, sp, #12
 800c84c:	4621      	mov	r1, r4
 800c84e:	4640      	mov	r0, r8
 800c850:	f7ff fee2 	bl	800c618 <_printf_common>
 800c854:	3001      	adds	r0, #1
 800c856:	d14c      	bne.n	800c8f2 <_printf_i+0x1fe>
 800c858:	f04f 30ff 	mov.w	r0, #4294967295
 800c85c:	b004      	add	sp, #16
 800c85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c862:	4835      	ldr	r0, [pc, #212]	; (800c938 <_printf_i+0x244>)
 800c864:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	680e      	ldr	r6, [r1, #0]
 800c86c:	061f      	lsls	r7, r3, #24
 800c86e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c872:	600e      	str	r6, [r1, #0]
 800c874:	d514      	bpl.n	800c8a0 <_printf_i+0x1ac>
 800c876:	07d9      	lsls	r1, r3, #31
 800c878:	bf44      	itt	mi
 800c87a:	f043 0320 	orrmi.w	r3, r3, #32
 800c87e:	6023      	strmi	r3, [r4, #0]
 800c880:	b91d      	cbnz	r5, 800c88a <_printf_i+0x196>
 800c882:	6823      	ldr	r3, [r4, #0]
 800c884:	f023 0320 	bic.w	r3, r3, #32
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	2310      	movs	r3, #16
 800c88c:	e7b0      	b.n	800c7f0 <_printf_i+0xfc>
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	f043 0320 	orr.w	r3, r3, #32
 800c894:	6023      	str	r3, [r4, #0]
 800c896:	2378      	movs	r3, #120	; 0x78
 800c898:	4828      	ldr	r0, [pc, #160]	; (800c93c <_printf_i+0x248>)
 800c89a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c89e:	e7e3      	b.n	800c868 <_printf_i+0x174>
 800c8a0:	065e      	lsls	r6, r3, #25
 800c8a2:	bf48      	it	mi
 800c8a4:	b2ad      	uxthmi	r5, r5
 800c8a6:	e7e6      	b.n	800c876 <_printf_i+0x182>
 800c8a8:	4616      	mov	r6, r2
 800c8aa:	e7bb      	b.n	800c824 <_printf_i+0x130>
 800c8ac:	680b      	ldr	r3, [r1, #0]
 800c8ae:	6826      	ldr	r6, [r4, #0]
 800c8b0:	6960      	ldr	r0, [r4, #20]
 800c8b2:	1d1d      	adds	r5, r3, #4
 800c8b4:	600d      	str	r5, [r1, #0]
 800c8b6:	0635      	lsls	r5, r6, #24
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	d501      	bpl.n	800c8c0 <_printf_i+0x1cc>
 800c8bc:	6018      	str	r0, [r3, #0]
 800c8be:	e002      	b.n	800c8c6 <_printf_i+0x1d2>
 800c8c0:	0671      	lsls	r1, r6, #25
 800c8c2:	d5fb      	bpl.n	800c8bc <_printf_i+0x1c8>
 800c8c4:	8018      	strh	r0, [r3, #0]
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	6123      	str	r3, [r4, #16]
 800c8ca:	4616      	mov	r6, r2
 800c8cc:	e7ba      	b.n	800c844 <_printf_i+0x150>
 800c8ce:	680b      	ldr	r3, [r1, #0]
 800c8d0:	1d1a      	adds	r2, r3, #4
 800c8d2:	600a      	str	r2, [r1, #0]
 800c8d4:	681e      	ldr	r6, [r3, #0]
 800c8d6:	6862      	ldr	r2, [r4, #4]
 800c8d8:	2100      	movs	r1, #0
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f7f3 fcb8 	bl	8000250 <memchr>
 800c8e0:	b108      	cbz	r0, 800c8e6 <_printf_i+0x1f2>
 800c8e2:	1b80      	subs	r0, r0, r6
 800c8e4:	6060      	str	r0, [r4, #4]
 800c8e6:	6863      	ldr	r3, [r4, #4]
 800c8e8:	6123      	str	r3, [r4, #16]
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8f0:	e7a8      	b.n	800c844 <_printf_i+0x150>
 800c8f2:	6923      	ldr	r3, [r4, #16]
 800c8f4:	4632      	mov	r2, r6
 800c8f6:	4649      	mov	r1, r9
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	47d0      	blx	sl
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	d0ab      	beq.n	800c858 <_printf_i+0x164>
 800c900:	6823      	ldr	r3, [r4, #0]
 800c902:	079b      	lsls	r3, r3, #30
 800c904:	d413      	bmi.n	800c92e <_printf_i+0x23a>
 800c906:	68e0      	ldr	r0, [r4, #12]
 800c908:	9b03      	ldr	r3, [sp, #12]
 800c90a:	4298      	cmp	r0, r3
 800c90c:	bfb8      	it	lt
 800c90e:	4618      	movlt	r0, r3
 800c910:	e7a4      	b.n	800c85c <_printf_i+0x168>
 800c912:	2301      	movs	r3, #1
 800c914:	4632      	mov	r2, r6
 800c916:	4649      	mov	r1, r9
 800c918:	4640      	mov	r0, r8
 800c91a:	47d0      	blx	sl
 800c91c:	3001      	adds	r0, #1
 800c91e:	d09b      	beq.n	800c858 <_printf_i+0x164>
 800c920:	3501      	adds	r5, #1
 800c922:	68e3      	ldr	r3, [r4, #12]
 800c924:	9903      	ldr	r1, [sp, #12]
 800c926:	1a5b      	subs	r3, r3, r1
 800c928:	42ab      	cmp	r3, r5
 800c92a:	dcf2      	bgt.n	800c912 <_printf_i+0x21e>
 800c92c:	e7eb      	b.n	800c906 <_printf_i+0x212>
 800c92e:	2500      	movs	r5, #0
 800c930:	f104 0619 	add.w	r6, r4, #25
 800c934:	e7f5      	b.n	800c922 <_printf_i+0x22e>
 800c936:	bf00      	nop
 800c938:	0801023d 	.word	0x0801023d
 800c93c:	0801024e 	.word	0x0801024e

0800c940 <_realloc_r>:
 800c940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c942:	4607      	mov	r7, r0
 800c944:	4614      	mov	r4, r2
 800c946:	460e      	mov	r6, r1
 800c948:	b921      	cbnz	r1, 800c954 <_realloc_r+0x14>
 800c94a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c94e:	4611      	mov	r1, r2
 800c950:	f7ff bbbe 	b.w	800c0d0 <_malloc_r>
 800c954:	b922      	cbnz	r2, 800c960 <_realloc_r+0x20>
 800c956:	f7ff fb6b 	bl	800c030 <_free_r>
 800c95a:	4625      	mov	r5, r4
 800c95c:	4628      	mov	r0, r5
 800c95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c960:	f000 f814 	bl	800c98c <_malloc_usable_size_r>
 800c964:	42a0      	cmp	r0, r4
 800c966:	d20f      	bcs.n	800c988 <_realloc_r+0x48>
 800c968:	4621      	mov	r1, r4
 800c96a:	4638      	mov	r0, r7
 800c96c:	f7ff fbb0 	bl	800c0d0 <_malloc_r>
 800c970:	4605      	mov	r5, r0
 800c972:	2800      	cmp	r0, #0
 800c974:	d0f2      	beq.n	800c95c <_realloc_r+0x1c>
 800c976:	4631      	mov	r1, r6
 800c978:	4622      	mov	r2, r4
 800c97a:	f7ff fb29 	bl	800bfd0 <memcpy>
 800c97e:	4631      	mov	r1, r6
 800c980:	4638      	mov	r0, r7
 800c982:	f7ff fb55 	bl	800c030 <_free_r>
 800c986:	e7e9      	b.n	800c95c <_realloc_r+0x1c>
 800c988:	4635      	mov	r5, r6
 800c98a:	e7e7      	b.n	800c95c <_realloc_r+0x1c>

0800c98c <_malloc_usable_size_r>:
 800c98c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c990:	1f18      	subs	r0, r3, #4
 800c992:	2b00      	cmp	r3, #0
 800c994:	bfbc      	itt	lt
 800c996:	580b      	ldrlt	r3, [r1, r0]
 800c998:	18c0      	addlt	r0, r0, r3
 800c99a:	4770      	bx	lr

0800c99c <_init>:
 800c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99e:	bf00      	nop
 800c9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9a2:	bc08      	pop	{r3}
 800c9a4:	469e      	mov	lr, r3
 800c9a6:	4770      	bx	lr

0800c9a8 <_fini>:
 800c9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9aa:	bf00      	nop
 800c9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ae:	bc08      	pop	{r3}
 800c9b0:	469e      	mov	lr, r3
 800c9b2:	4770      	bx	lr
