
STM32 F7D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008810  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000217c  08008a08  08008a08  00018a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab84  0800ab84  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab84  0800ab84  0001ab84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab8c  0800ab8c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab8c  0800ab8c  0001ab8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab90  0800ab90  0001ab90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800ab94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000078  0800ac0c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0800ac0c  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002049b  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0003bd8a  00000000  00000000  00040541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000782c  00000000  00000000  0007c2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  00083af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00147e5f  00000000  00000000  000853a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000016f0  00000000  00000000  001cd200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a131  00000000  00000000  001ce8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00208a21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ea8  00000000  00000000  00208a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000078 	.word	0x20000078
 8000214:	00000000 	.word	0x00000000
 8000218:	080089f0 	.word	0x080089f0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000007c 	.word	0x2000007c
 8000234:	080089f0 	.word	0x080089f0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000546:	490e      	ldr	r1, [pc, #56]	; (8000580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000548:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800055c:	4c0b      	ldr	r4, [pc, #44]	; (800058c <LoopFillZerobss+0x26>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800056a:	f001 fb43 	bl	8001bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056e:	f008 f863 	bl	8008638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000572:	f000 fd5f 	bl	8001034 <main>
  bx  lr    
 8000576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000578:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000580:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000584:	0800ab94 	.word	0x0800ab94
  ldr r2, =_sbss
 8000588:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800058c:	200003a4 	.word	0x200003a4

08000590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC_IRQHandler>
	...

08000594 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000598:	f3bf 8f4f 	dsb	sy
}
 800059c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800059e:	f3bf 8f6f 	isb	sy
}
 80005a2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <SCB_EnableICache+0x48>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b2:	f3bf 8f6f 	isb	sy
}
 80005b6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <SCB_EnableICache+0x48>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <SCB_EnableICache+0x48>)
 80005be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c4:	f3bf 8f4f 	dsb	sy
}
 80005c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ca:	f3bf 8f6f 	isb	sy
}
 80005ce:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <SCB_EnableDCache+0x9c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <SCB_EnableDCache+0x9c>)
 80005f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005fa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	0b5b      	lsrs	r3, r3, #13
 8000600:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000604:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	08db      	lsrs	r3, r3, #3
 800060a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800060e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	015a      	lsls	r2, r3, #5
 8000614:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000618:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061e:	4917      	ldr	r1, [pc, #92]	; (800067c <SCB_EnableDCache+0x9c>)
 8000620:	4313      	orrs	r3, r2
 8000622:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1e5a      	subs	r2, r3, #1
 800062a:	60ba      	str	r2, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf14      	ite	ne
 8000630:	2301      	movne	r3, #1
 8000632:	2300      	moveq	r3, #0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d000      	beq.n	800063c <SCB_EnableDCache+0x5c>
      do {
 800063a:	e7e9      	b.n	8000610 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	1e5a      	subs	r2, r3, #1
 8000640:	60fa      	str	r2, [r7, #12]
 8000642:	2b00      	cmp	r3, #0
 8000644:	bf14      	ite	ne
 8000646:	2301      	movne	r3, #1
 8000648:	2300      	moveq	r3, #0
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d000      	beq.n	8000652 <SCB_EnableDCache+0x72>
    do {
 8000650:	e7d9      	b.n	8000606 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000652:	f3bf 8f4f 	dsb	sy
}
 8000656:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <SCB_EnableDCache+0x9c>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <SCB_EnableDCache+0x9c>)
 800065e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000662:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000664:	f3bf 8f4f 	dsb	sy
}
 8000668:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800066a:	f3bf 8f6f 	isb	sy
}
 800066e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks
//Also enables all GPIO ports, and both DMA1 and DMA2 peripherals
//
//Returns QA_OK if successful, or QA_Fail if initialization failed
QA_Result SystemInitialize(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b0c6      	sub	sp, #280	; 0x118
 8000684:	af00      	add	r7, sp, #0

  //------------------------------------
  //Enable CPU Instruction & Data Caches
  SCB_EnableICache();
 8000686:	f7ff ff85 	bl	8000594 <SCB_EnableICache>
  SCB_EnableDCache();
 800068a:	f7ff ffa9 	bl	80005e0 <SCB_EnableDCache>

	//----------------------
	//Enable ART Accelerator
  __HAL_FLASH_ART_ENABLE();
 800068e:	4b67      	ldr	r3, [pc, #412]	; (800082c <_Z16SystemInitializev+0x1ac>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a66      	ldr	r2, [pc, #408]	; (800082c <_Z16SystemInitializev+0x1ac>)
 8000694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000698:	6013      	str	r3, [r2, #0]

  //---------------------
  //Enable Flash Prefetch
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800069a:	4b64      	ldr	r3, [pc, #400]	; (800082c <_Z16SystemInitializev+0x1ac>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a63      	ldr	r2, [pc, #396]	; (800082c <_Z16SystemInitializev+0x1ac>)
 80006a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a4:	6013      	str	r3, [r2, #0]

  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a6:	2003      	movs	r0, #3
 80006a8:	f001 fe76 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  //------------
  //Init SysTick
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f001 fd0b 	bl	80020c8 <HAL_InitTick>

  //------------------------------
  //Configure LSE Drive Capability
  HAL_PWR_EnableBkUpAccess();
 80006b2:	f003 f9ab 	bl	8003a0c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b6:	4b5e      	ldr	r3, [pc, #376]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006ba:	4a5d      	ldr	r2, [pc, #372]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006bc:	f023 0318 	bic.w	r3, r3, #24
 80006c0:	6713      	str	r3, [r2, #112]	; 0x70

  //------------------------------------------------
  //Configure Main Internal Regulator Output Voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b5b      	ldr	r3, [pc, #364]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	4a5a      	ldr	r2, [pc, #360]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	6413      	str	r3, [r2, #64]	; 0x40
 80006ce:	4b58      	ldr	r3, [pc, #352]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006da:	4b56      	ldr	r3, [pc, #344]	; (8000834 <_Z16SystemInitializev+0x1b4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a55      	ldr	r2, [pc, #340]	; (8000834 <_Z16SystemInitializev+0x1b4>)
 80006e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	4b53      	ldr	r3, [pc, #332]	; (8000834 <_Z16SystemInitializev+0x1b4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80006f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    //------------
    //Setup Clocks

  //------------------------------
  //Enable Clock Sources and Setup
  RCC_OscInitTypeDef RCC_OscInit = {0};
 80006f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006f6:	2234      	movs	r2, #52	; 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f007 fff8 	bl	80086f0 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | //Define HSE (High Speed External) oscillator to be configured (used for main system clock)
 8000700:	2305      	movs	r3, #5
 8000702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  		                         RCC_OSCILLATORTYPE_LSE;  //Define LSE (Low Speed External) oscillator to be configured (used for RTC - Real Time Clock)
  RCC_OscInit.HSEState       = RCC_HSE_ON;              //Enable HSE
 8000706:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800070a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInit.LSEState       = RCC_LSE_ON;              //Enable LSE
 800070e:	2301      	movs	r3, #1
 8000710:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;              //Enable primary PLL
 8000714:	2302      	movs	r3, #2
 8000716:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;       //Set primary PLL source to HSE
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    //Set primary PLL values required for 216Mhz system clock
  RCC_OscInit.PLL.PLLM       = 25;
 8000722:	2319      	movs	r3, #25
 8000724:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInit.PLL.PLLN       = 432;
 8000728:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800072c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInit.PLL.PLLQ       = 4;
 8000736:	2304      	movs	r3, #4
 8000738:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {  //Initialize Oscillators using values in init structure
 800073c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000740:	4618      	mov	r0, r3
 8000742:	f003 f9c3 	bl	8003acc <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <_Z16SystemInitializev+0xda>
  	return QA_Fail;
 8000756:	2301      	movs	r3, #1
 8000758:	e123      	b.n	80009a2 <_Z16SystemInitializev+0x322>
  }

  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b35      	ldr	r3, [pc, #212]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	4a34      	ldr	r2, [pc, #208]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6453      	str	r3, [r2, #68]	; 0x44
 8000766:	4b32      	ldr	r3, [pc, #200]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
 8000770:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  //---------------------
  //Enable Overdrive Mode
  //
  //This is required to provide best system stability given that we are running at the maximum clock rate of 216MHz for the STM32F769I device
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000772:	f003 f95b 	bl	8003a2c <HAL_PWREx_EnableOverDrive>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf14      	ite	ne
 800077c:	2301      	movne	r3, #1
 800077e:	2300      	moveq	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <_Z16SystemInitializev+0x10a>
  	return QA_Fail;
 8000786:	2301      	movs	r3, #1
 8000788:	e10b      	b.n	80009a2 <_Z16SystemInitializev+0x322>
  }

  //---------------------------
  //Initialize CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 800078a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |      //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 800079a:	230f      	movs	r3, #15
 800079c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  		                         RCC_CLOCKTYPE_SYSCLK |
                               RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;  //Define primary PLL clock as system clock source
 80007a0:	2302      	movs	r3, #2
 80007a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;          //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 216MHz
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV4;            //Set clock divider for peripheral bus 1 (APB1), DIV4 provides an APB1 frequency of 54MHz
 80007ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;            //Set clock divider for peripheral bus 2 (APB2), DIV2 provides an APB2 frequency of 108MHz
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_7) != HAL_OK) { //Initialize system clocks using required values, and setting Flash latency to 7 cycles
 80007bc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007c0:	2107      	movs	r1, #7
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fc30 	bl	8004028 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf14      	ite	ne
 80007ce:	2301      	movne	r3, #1
 80007d0:	2300      	moveq	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <_Z16SystemInitializev+0x15c>
  	return QA_Fail;
 80007d8:	2301      	movs	r3, #1
 80007da:	e0e2      	b.n	80009a2 <_Z16SystemInitializev+0x322>
  }

  //----------------------------
  //Initialize Peripheral Clocks
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 80007dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007e0:	2290      	movs	r2, #144	; 0x90
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f007 ff83 	bl	80086f0 <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC |
 80007ea:	2328      	movs	r3, #40	; 0x28
 80007ec:	643b      	str	r3, [r7, #64]	; 0x40
  		                                     RCC_PERIPHCLK_LTDC;

    //Define settings for PLLSAI, as this PLL is also used as the clock source for the LTDC peripheral which we require to run the LCD screen
	RCC_PeriphClkInit.PLLSAI.PLLSAIN       = 384;
 80007ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007f2:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_PeriphClkInit.PLLSAI.PLLSAIP       = RCC_PLLSAIP_DIV8;
 80007f4:	2303      	movs	r3, #3
 80007f6:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_PeriphClkInit.PLLSAI.PLLSAIR       = 7;
 80007f8:	2307      	movs	r3, #7
 80007fa:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_PeriphClkInit.PLLSAI.PLLSAIQ       = 8;
 80007fc:	2308      	movs	r3, #8
 80007fe:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_PeriphClkInit.PLLSAIDivQ           = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_PeriphClkInit.PLLSAIDivR           = RCC_PLLSAIDIVR_2;
 8000804:	2300      	movs	r3, #0
 8000806:	66fb      	str	r3, [r7, #108]	; 0x6c

  RCC_PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE; //Set the LSE oscillator as the clock source for the Real Time Clock
 8000808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK) { //Initialize the peripheral clocks used the required values
 800080e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fdde 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d007      	beq.n	8000838 <_Z16SystemInitializev+0x1b8>
  	return QA_Fail;
 8000828:	2301      	movs	r3, #1
 800082a:	e0ba      	b.n	80009a2 <_Z16SystemInitializev+0x322>
 800082c:	40023c00 	.word	0x40023c00
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000
  }

  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b5c      	ldr	r3, [pc, #368]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	4a5b      	ldr	r2, [pc, #364]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	6313      	str	r3, [r2, #48]	; 0x30
 8000844:	4b59      	ldr	r3, [pc, #356]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
 800084e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000850:	4b56      	ldr	r3, [pc, #344]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a55      	ldr	r2, [pc, #340]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
 800085c:	4b53      	ldr	r3, [pc, #332]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	f003 0302 	and.w	r3, r3, #2
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000868:	4b50      	ldr	r3, [pc, #320]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	4a4f      	ldr	r2, [pc, #316]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6313      	str	r3, [r2, #48]	; 0x30
 8000874:	4b4d      	ldr	r3, [pc, #308]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
 800087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000880:	4b4a      	ldr	r3, [pc, #296]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	4a49      	ldr	r2, [pc, #292]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	6313      	str	r3, [r2, #48]	; 0x30
 800088c:	4b47      	ldr	r3, [pc, #284]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	f003 0308 	and.w	r3, r3, #8
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000898:	4b44      	ldr	r3, [pc, #272]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a43      	ldr	r2, [pc, #268]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b41      	ldr	r3, [pc, #260]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b0:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a3d      	ldr	r2, [pc, #244]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 0320 	and.w	r3, r3, #32
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c8:	4b38      	ldr	r3, [pc, #224]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a37      	ldr	r2, [pc, #220]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80008dc:	f107 0318 	add.w	r3, r7, #24
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	f107 0318 	add.w	r3, r7, #24
 80008e6:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a27      	ldr	r2, [pc, #156]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800090e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a1f      	ldr	r2, [pc, #124]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4a17      	ldr	r2, [pc, #92]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800094e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000952:	6313      	str	r3, [r2, #48]	; 0x30
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	681b      	ldr	r3, [r3, #0]

  //-----------------
  //Enable DMA Clocks
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800096e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000972:	6313      	str	r3, [r2, #48]	; 0x30
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000978:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800098a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800098e:	6313      	str	r3, [r2, #48]	; 0x30
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000998:	463b      	mov	r3, r7
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	463b      	mov	r3, r7
 800099e:	681b      	ldr	r3, [r3, #0]

  //Return
  return QA_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800

080009b0 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HardFault_Handler+0x1c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f005 f8c4 	bl	8005b56 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <HardFault_Handler+0x20>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f005 f8bf 	bl	8005b56 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 80009d8:	e7fe      	b.n	80009d8 <HardFault_Handler+0x18>
 80009da:	bf00      	nop
 80009dc:	2000012c 	.word	0x2000012c
 80009e0:	20000130 	.word	0x20000130

080009e4 <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <MemManage_Handler+0x1c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f005 f8b2 	bl	8005b56 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <MemManage_Handler+0x20>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 f8ad 	bl	8005b56 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x18>
 80009fe:	bf00      	nop
 8000a00:	2000012c 	.word	0x2000012c
 8000a04:	20000130 	.word	0x20000130

08000a08 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <BusFault_Handler+0x1c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f005 f8a0 	bl	8005b56 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <BusFault_Handler+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f005 f89b 	bl	8005b56 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000a20:	e7fe      	b.n	8000a20 <BusFault_Handler+0x18>
 8000a22:	bf00      	nop
 8000a24:	2000012c 	.word	0x2000012c
 8000a28:	20000130 	.word	0x20000130

08000a2c <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <UsageFault_Handler+0x1c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f005 f88e 	bl	8005b56 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <UsageFault_Handler+0x20>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f005 f889 	bl	8005b56 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x18>
 8000a46:	bf00      	nop
 8000a48:	2000012c 	.word	0x2000012c
 8000a4c:	20000130 	.word	0x20000130

08000a50 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000a7e:	f001 fb53 	bl	8002128 <HAL_IncTick>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <USART1_IRQHandler>:
  //Interrupt Handler Methods


//USART1_IRQHandler
//Interrupt Handler Method
void USART1_IRQHandler(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL);
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <USART1_IRQHandler+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 fad1 	bl	800803a <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000138 	.word	0x20000138

08000aa0 <_ZN7QAD_FMCC1Ev>:

	//------------
	//Constructors

	//As this is a private method in a singleton class, this method will be called the first time the get() method is called
	QAD_FMC() :
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	  m_eState(QA_NotInitialized) {}
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2204      	movs	r2, #4
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2208      	movs	r2, #8
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2220      	movs	r2, #32
 8000ad0:	619a      	str	r2, [r3, #24]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2230      	movs	r2, #48	; 0x30
 8000ad6:	61da      	str	r2, [r3, #28]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f240 6203 	movw	r2, #1539	; 0x603
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <_ZN7QAD_FMC3getEv>:

	//-----------------
	//Singleton Methods
  //
	//Used to retrieve a reference to the singleton class
  static QAD_FMC& get(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  	static QAD_FMC instance;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <_ZN7QAD_FMC3getEv+0x48>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	f3bf 8f5b 	dmb	ish
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf0c      	ite	eq
 8000b22:	2301      	moveq	r3, #1
 8000b24:	2300      	movne	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d010      	beq.n	8000b4e <_ZN7QAD_FMC3getEv+0x42>
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <_ZN7QAD_FMC3getEv+0x48>)
 8000b2e:	f007 fd2a 	bl	8008586 <__cxa_guard_acquire>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bf14      	ite	ne
 8000b38:	2301      	movne	r3, #1
 8000b3a:	2300      	moveq	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d005      	beq.n	8000b4e <_ZN7QAD_FMC3getEv+0x42>
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <_ZN7QAD_FMC3getEv+0x4c>)
 8000b44:	f7ff ffac 	bl	8000aa0 <_ZN7QAD_FMCC1Ev>
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <_ZN7QAD_FMC3getEv+0x48>)
 8000b4a:	f007 fd28 	bl	800859e <__cxa_guard_release>
  	return instance;
 8000b4e:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <_ZN7QAD_FMC3getEv+0x4c>)
  }
 8000b50:	4618      	mov	r0, r3
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000fc 	.word	0x200000fc
 8000b58:	20000094 	.word	0x20000094

08000b5c <_ZN7QAD_FMC4initEv>:

  //NOTE: No deinitialization method is supplied due to SDRAM being seen as a primary system component
  //in this codebase and is required for operation of systems such as LCD among others

  //Used to initialize the FMC peripheral and SDRAM module
  static QA_Result init(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000b60:	f7ff ffd4 	bl	8000b0c <_ZN7QAD_FMC3getEv>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 fe74 	bl	8005854 <_ZN7QAD_FMC8imp_initEv>
 8000b6c:	4603      	mov	r3, r0
  }
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_ZN7QAD_FMC4testEv>:
  //Memory Testing Methods

  //Used to perform a memory test of the SDRAM module
  //Performs a full read and write test of all 16 megabytes of the SDRAM
  //Returns QA_OK if memory test is successful, or QA_Fail if not successful
  static QA_Result test(void) {
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
  	return get().imp_test();
 8000b76:	f7ff ffc9 	bl	8000b0c <_ZN7QAD_FMC3getEv>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f004 ff85 	bl	8005a8c <_ZN7QAD_FMC8imp_testEv>
 8000b82:	4603      	mov	r3, r0
  }
 8000b84:	4618      	mov	r0, r3
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 8000b94:	887a      	ldrh	r2, [r7, #2]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fc4c 	bl	8001438 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	809a      	strh	r2, [r3, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	80da      	strh	r2, [r3, #6]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	811a      	strh	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4603      	mov	r3, r0
 8000bcc:	817b      	strh	r3, [r7, #10]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	813b      	strh	r3, [r7, #8]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3304      	adds	r3, #4
 8000be0:	f107 020a 	add.w	r2, r7, #10
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fc42 	bl	8001470 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3308      	adds	r3, #8
 8000bf0:	f107 0208 	add.w	r2, r7, #8
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fc3a 	bl	8001470 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	731a      	strb	r2, [r3, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2200      	movs	r2, #0
 8000c06:	735a      	strb	r2, [r3, #13]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	739a      	strb	r2, [r3, #14]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	79fa      	ldrb	r2, [r7, #7]
 8000c12:	73da      	strb	r2, [r3, #15]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	08008b14 	.word	0x08008b14

08000c24 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	769a      	strb	r2, [r3, #26]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2225      	movs	r2, #37	; 0x25
 8000c80:	76da      	strb	r2, [r3, #27]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	331c      	adds	r3, #28
 8000c86:	2284      	movs	r2, #132	; 0x84
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f007 fd30 	bl	80086f0 <memset>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	8b99      	ldrh	r1, [r3, #28]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	8bda      	ldrh	r2, [r3, #30]
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f7ff ff7b 	bl	8000bbc <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	741a      	strb	r2, [r3, #16]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3314      	adds	r3, #20
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fbe2 	bl	80014a6 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	0800ab68 	.word	0x0800ab68

08000cf0 <_ZN11QAT_Vector2C1Ett>:

  //Constructors
  QAT_Vector2() :
    x(0), y(0) {}

  QAT_Vector2(uint16_t x, uint16_t y) :
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	803b      	strh	r3, [r7, #0]
    x(x), y(y) {}
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	887a      	ldrh	r2, [r7, #2]
 8000d04:	801a      	strh	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	883a      	ldrh	r2, [r7, #0]
 8000d0a:	805a      	strh	r2, [r3, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_ZN11QAT_Vector2C1ERKS_>:

  QAT_Vector2(const QAT_Vector2& other) :
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
    x(other.x),
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	881a      	ldrh	r2, [r3, #0]
		y(other.y) {}
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	801a      	strh	r2, [r3, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	885a      	ldrh	r2, [r3, #2]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	805a      	strh	r2, [r3, #2]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 fbd5 	bl	80014fa <_ZNSaIP12QAS_LCD_FontED1Ev>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 fbb8 	bl	80014da <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffeb 	bl	8000d5a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <_ZN15QAS_LCD_FontMgrC1Ev>:
public:

	//--------------------------
	//Constructors / Destructors

	QAS_LCD_FontMgr() :
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
		m_iCurrentIdx(-1),
		m_pCurrent(NULL),
		m_pBuffer(NULL),
		m_uColor(0x0000) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ffeb 	bl	8000d74 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	22ff      	movs	r2, #255	; 0xff
 8000da2:	731a      	strb	r2, [r3, #12]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	831a      	strh	r2, [r3, #24]
		m_vFonts.clear();
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fbde 	bl	800157a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
	}
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <_ZN15QAS_LCD_FontMgrD1Ev>:

	~QAS_LCD_FontMgr() {
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	7bfc      	ldrb	r4, [r7, #15]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fbdc 	bl	8001596 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8000dde:	4603      	mov	r3, r0
 8000de0:	429c      	cmp	r4, r3
 8000de2:	bf34      	ite	cc
 8000de4:	2301      	movcc	r3, #1
 8000de6:	2300      	movcs	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d011      	beq.n	8000e12 <_ZN15QAS_LCD_FontMgrD1Ev+0x4a>
			delete m_vFonts[i];
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7bfa      	ldrb	r2, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fbde 	bl	80015b6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <_ZN15QAS_LCD_FontMgrD1Ev+0x42>
 8000e02:	2130      	movs	r1, #48	; 0x30
 8000e04:	4618      	mov	r0, r3
 8000e06:	f007 fbbc 	bl	8008582 <_ZdlPvj>
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e7e0      	b.n	8000dd4 <_ZN15QAS_LCD_FontMgrD1Ev+0xc>
	~QAS_LCD_FontMgr() {
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fb95 	bl	8001544 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>
		}
	}
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd90      	pop	{r4, r7, pc}

08000e24 <_ZN7QAS_LCDC1Ev>:
	QAD_LTDC_Buffer*  m_pDrawBuffer;
	uint16_t          m_uDrawColor;

  QAS_LCD_FontMgr   m_cFontMgr;

	QAS_LCD() :
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_pDrawBuffer(NULL),
		m_uDrawColor(0x0000) {
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	811a      	strh	r2, [r3, #8]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	330c      	adds	r3, #12
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ffa3 	bl	8000d8e <_ZN15QAS_LCD_FontMgrC1Ev>

	}
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_ZN7QAS_LCDD1Ev>:
class QAS_LCD {
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	330c      	adds	r3, #12
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ffb2 	bl	8000dc8 <_ZN15QAS_LCD_FontMgrD1Ev>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <__tcf_0>:

  QAS_LCD(const QAS_LCD&) = delete;
  QAS_LCD& operator=(const QAS_LCD&) = delete;

  static QAS_LCD& get() {
  	static QAS_LCD instance;
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4801      	ldr	r0, [pc, #4]	; (8000e7c <__tcf_0+0xc>)
 8000e76:	f7ff ffec 	bl	8000e52 <_ZN7QAS_LCDD1Ev>
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000100 	.word	0x20000100

08000e80 <_ZN7QAS_LCD3getEv>:
  static QAS_LCD& get() {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  	static QAS_LCD instance;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <_ZN7QAS_LCD3getEv+0x50>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	f3bf 8f5b 	dmb	ish
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bf0c      	ite	eq
 8000e96:	2301      	moveq	r3, #1
 8000e98:	2300      	movne	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d013      	beq.n	8000ec8 <_ZN7QAS_LCD3getEv+0x48>
 8000ea0:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <_ZN7QAS_LCD3getEv+0x50>)
 8000ea2:	f007 fb70 	bl	8008586 <__cxa_guard_acquire>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf14      	ite	ne
 8000eac:	2301      	movne	r3, #1
 8000eae:	2300      	moveq	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d008      	beq.n	8000ec8 <_ZN7QAS_LCD3getEv+0x48>
 8000eb6:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <_ZN7QAS_LCD3getEv+0x54>)
 8000eb8:	f7ff ffb4 	bl	8000e24 <_ZN7QAS_LCDC1Ev>
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <_ZN7QAS_LCD3getEv+0x50>)
 8000ebe:	f007 fb6e 	bl	800859e <__cxa_guard_release>
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <_ZN7QAS_LCD3getEv+0x58>)
 8000ec4:	f007 fbab 	bl	800861e <atexit>
  	return instance;
 8000ec8:	4b02      	ldr	r3, [pc, #8]	; (8000ed4 <_ZN7QAS_LCD3getEv+0x54>)
  }
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000128 	.word	0x20000128
 8000ed4:	20000100 	.word	0x20000100
 8000ed8:	08000e71 	.word	0x08000e71

08000edc <_ZN7QAS_LCD4initEv>:

    //----------------------
    //Initialization Methods

  static QA_Result init(void) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000ee0:	f7ff ffce 	bl	8000e80 <_ZN7QAS_LCD3getEv>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f005 ff42 	bl	8006d70 <_ZN7QAS_LCD8imp_initEv>
 8000eec:	4603      	mov	r3, r0
  }
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_ZN7QAS_LCD10flipLayer0Ev>:
  }

    //-----------------------
    //Rendering Setup Methods

  static void flipLayer0(void) {
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  	get().imp_flipLayer0();
 8000ef6:	f7ff ffc3 	bl	8000e80 <_ZN7QAS_LCD3getEv>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 ff89 	bl	8006e14 <_ZN7QAS_LCD14imp_flipLayer0Ev>
  }
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_ZN7QAS_LCD10flipLayer1Ev>:

  static void flipLayer1(void) {
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  	get().imp_flipLayer1();
 8000f0a:	f7ff ffb9 	bl	8000e80 <_ZN7QAS_LCD3getEv>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f005 ff89 	bl	8006e28 <_ZN7QAS_LCD14imp_flipLayer1Ev>
  }
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>:

  static void setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
  	get().imp_setDrawBuffer(eLayer);
 8000f24:	f7ff ffac 	bl	8000e80 <_ZN7QAS_LCD3getEv>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4610      	mov	r0, r2
 8000f30:	f005 ff84 	bl	8006e3c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>
  }
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_ZN7QAS_LCD12setDrawColorEt>:

  static void setDrawColor(uint16_t uColor) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	80fb      	strh	r3, [r7, #6]
  	get().imp_setDrawColor(uColor);
 8000f46:	f7ff ff9b 	bl	8000e80 <_ZN7QAS_LCD3getEv>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4610      	mov	r0, r2
 8000f52:	f005 ff98 	bl	8006e86 <_ZN7QAS_LCD16imp_setDrawColorEt>
  }
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_ZN7QAS_LCD11clearBufferEv>:

    //-----------------
    //Rendering Methods

  static void clearBuffer(void) {
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  	get().imp_clearBuffer();
 8000f62:	f7ff ff8d 	bl	8000e80 <_ZN7QAS_LCD3getEv>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f005 ffa3 	bl	8006eb4 <_ZN7QAS_LCD15imp_clearBufferEv>
  }
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_ZN7QAS_LCD8drawLineE11QAT_Vector2S0_>:

  static void drawPixel(QAT_Vector2 cPos) {
  	get().imp_drawPixel(cPos);
  }

  static void drawLine(QAT_Vector2 cStart, QAT_Vector2 cEnd) {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
  	get().imp_drawLine(cStart, cEnd);
 8000f7c:	f7ff ff80 	bl	8000e80 <_ZN7QAS_LCD3getEv>
 8000f80:	4603      	mov	r3, r0
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f005 ffb4 	bl	8006ef4 <_ZN7QAS_LCD12imp_drawLineER11QAT_Vector2S1_>
  }
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZN7QAS_LCD8drawRectE11QAT_Vector2S0_>:

  static void drawRect(QAT_Vector2 cStart, QAT_Vector2 cEnd) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  	get().imp_drawRect(cStart, cEnd);
 8000f9e:	f7ff ff6f 	bl	8000e80 <_ZN7QAS_LCD3getEv>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f006 f8f4 	bl	8007196 <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_>
  }
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_ZN7QAS_LCD12drawRectFillE11QAT_Vector2S0_>:

  static void drawRectFill(QAT_Vector2 cStart, QAT_Vector2 cEnd) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
  	get().imp_drawRectFill(cStart, cEnd);
 8000fc0:	f7ff ff5e 	bl	8000e80 <_ZN7QAS_LCD3getEv>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f006 f971 	bl	80072b2 <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_>
  }
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_ZN7QAS_LCD14setFontByIndexEh>:

  static void setFontByName(const char* strName) {
  	get().m_cFontMgr.setFontByName(strName);
  }

  static void setFontByIndex(uint8_t uIdx) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  	get().m_cFontMgr.setFontByIndex(uIdx);
 8000fe2:	f7ff ff4d 	bl	8000e80 <_ZN7QAS_LCD3getEv>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	330c      	adds	r3, #12
 8000fea:	79fa      	ldrb	r2, [r7, #7]
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f006 fa27 	bl	8007442 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>
  }
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_ZN7QAS_LCD8drawStrCE11QAT_Vector2PKc>:

  static void drawStrL(QAT_Vector2 cPos, const char* str) {
  	get().m_cFontMgr.drawStrL(cPos, str);
  }

  static void drawStrC(QAT_Vector2 cPos, const char* str) {
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  	get().m_cFontMgr.drawStrC(cPos, str);
 8001006:	f7ff ff3b 	bl	8000e80 <_ZN7QAS_LCD3getEv>
 800100a:	4603      	mov	r3, r0
 800100c:	f103 040c 	add.w	r4, r3, #12
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fe7f 	bl	8000d1a <_ZN11QAT_Vector2C1ERKS_>
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	4619      	mov	r1, r3
 8001024:	4620      	mov	r0, r4
 8001026:	f006 fb06 	bl	8007636 <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc>
  }
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}
	...

08001034 <main>:
//main
//Application Entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f769nihx.s
int main(void) {
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b09d      	sub	sp, #116	; 0x74
 8001038:	af00      	add	r7, sp, #0
  //System Initialization

	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method
	if (SystemInitialize()) {
 800103a:	f7ff fb21 	bl	8000680 <_Z16SystemInitializev>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d000      	beq.n	8001050 <main+0x1c>
	  while (1) {}
 800104e:	e7fe      	b.n	800104e <main+0x1a>


	//----------------------------------
	//Initialize the Used LEDs using the QAD_GPIO_Output driver class.
	//QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PORT, QAD_USER_LED_RED_GPIO_PIN and QAD_USERLED_GREEN_GPIO_PIN are defined in setup.hpp
  GPIO_UserLED_Red   = new QAD_GPIO_Output(QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_RED_GPIO_PIN);
 8001050:	2014      	movs	r0, #20
 8001052:	f007 faa7 	bl	80085a4 <_Znwj>
 8001056:	4603      	mov	r3, r0
 8001058:	461c      	mov	r4, r3
 800105a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800105e:	494e      	ldr	r1, [pc, #312]	; (8001198 <main+0x164>)
 8001060:	4620      	mov	r0, r4
 8001062:	f004 fd57 	bl	8005b14 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8001066:	4b4d      	ldr	r3, [pc, #308]	; (800119c <main+0x168>)
 8001068:	601c      	str	r4, [r3, #0]
  GPIO_UserLED_Green = new QAD_GPIO_Output(QAD_USERLED_GREEN_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PIN);
 800106a:	2014      	movs	r0, #20
 800106c:	f007 fa9a 	bl	80085a4 <_Znwj>
 8001070:	4603      	mov	r3, r0
 8001072:	461c      	mov	r4, r3
 8001074:	2220      	movs	r2, #32
 8001076:	4948      	ldr	r1, [pc, #288]	; (8001198 <main+0x164>)
 8001078:	4620      	mov	r0, r4
 800107a:	f004 fd4b 	bl	8005b14 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 800107e:	4b48      	ldr	r3, [pc, #288]	; (80011a0 <main+0x16c>)
 8001080:	601c      	str	r4, [r3, #0]


	//----------------------------------
  //Initialize the User Button using the QAD_GPIO_Input driver class.
  //QAD_USERBUTTON_GPIO_PORT and QAD_USERBUTTON_GPIO_PIN are defined in setup.hpp
  GPIO_UserButton = new QAD_GPIO_Input(QAD_USERBUTTON_GPIO_PORT, QAD_USERBUTTON_GPIO_PIN);
 8001082:	2010      	movs	r0, #16
 8001084:	f007 fa8e 	bl	80085a4 <_Znwj>
 8001088:	4603      	mov	r3, r0
 800108a:	461c      	mov	r4, r3
 800108c:	2201      	movs	r2, #1
 800108e:	4945      	ldr	r1, [pc, #276]	; (80011a4 <main+0x170>)
 8001090:	4620      	mov	r0, r4
 8001092:	f004 fdc5 	bl	8005c20 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>
 8001096:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <main+0x174>)
 8001098:	601c      	str	r4, [r3, #0]
  //Initialize UART1, which is used to communicate over serial via the STLINK connection
  //Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

  //Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART1;
 800109a:	2300      	movs	r3, #0
 800109c:	703b      	strb	r3, [r7, #0]
  sSerialInit.sUART_Init.baudrate    = QAD_UART1_BAUDRATE;
 800109e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80010a2:	607b      	str	r3, [r7, #4]
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART1;
 80010a4:	2309      	movs	r3, #9
 80010a6:	723b      	strb	r3, [r7, #8]
  sSerialInit.sUART_Init.txgpio      = QAD_UART1_TX_PORT;
 80010a8:	4b3e      	ldr	r3, [pc, #248]	; (80011a4 <main+0x170>)
 80010aa:	60fb      	str	r3, [r7, #12]
  sSerialInit.sUART_Init.txpin       = QAD_UART1_TX_PIN;
 80010ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b0:	823b      	strh	r3, [r7, #16]
  sSerialInit.sUART_Init.txaf        = QAD_UART1_TX_AF;
 80010b2:	2307      	movs	r3, #7
 80010b4:	74bb      	strb	r3, [r7, #18]
  sSerialInit.sUART_Init.rxgpio      = QAD_UART1_RX_PORT;
 80010b6:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <main+0x170>)
 80010b8:	617b      	str	r3, [r7, #20]
  sSerialInit.sUART_Init.rxpin       = QAD_UART1_RX_PIN;
 80010ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010be:	833b      	strh	r3, [r7, #24]
  sSerialInit.sUART_Init.rxaf        = QAD_UART1_RX_AF;
 80010c0:	2307      	movs	r3, #7
 80010c2:	76bb      	strb	r3, [r7, #26]
  sSerialInit.uTXFIFO_Size           = QAD_UART1_TX_FIFOSIZE;
 80010c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c8:	83bb      	strh	r3, [r7, #28]
  sSerialInit.uRXFIFO_Size           = QAD_UART1_RX_FIFOSIZE;
 80010ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ce:	83fb      	strh	r3, [r7, #30]

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 80010d0:	2018      	movs	r0, #24
 80010d2:	f007 fa67 	bl	80085a4 <_Znwj>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461c      	mov	r4, r3
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4620      	mov	r0, r4
 80010e0:	f7ff fde4 	bl	8000cac <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 80010e4:	4b31      	ldr	r3, [pc, #196]	; (80011ac <main+0x178>)
 80010e6:	601c      	str	r4, [r3, #0]

  //If initialization failed the turn on User LED and enter infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 80010e8:	4b30      	ldr	r3, [pc, #192]	; (80011ac <main+0x178>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f006 ff83 	bl	8007ffa <_ZN19QAS_Serial_Dev_Base4initEPv>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	bf0c      	ite	eq
 80010fa:	2301      	moveq	r3, #1
 80010fc:	2300      	movne	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <main+0xdc>
  	GPIO_UserLED_Red->on();
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <main+0x168>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f004 fd24 	bl	8005b56 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 800110e:	e7fe      	b.n	800110e <main+0xda>
  }


	//----------------------------------
  //Initialize FMC / SDRAM driver using the QAD_FMC singleton driver class
  if (QAD_FMC::init() == QA_OK) {
 8001110:	f7ff fd24 	bl	8000b5c <_ZN7QAD_FMC4initEv>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf0c      	ite	eq
 800111a:	2301      	moveq	r3, #1
 800111c:	2300      	movne	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d02c      	beq.n	800117e <main+0x14a>

  	//If initialization passed then output message via serial
    UART_STLink->txStringCR("SDRAM: Initialized");
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <main+0x178>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4921      	ldr	r1, [pc, #132]	; (80011b0 <main+0x17c>)
 800112a:	4618      	mov	r0, r3
 800112c:	f006 ff95 	bl	800805a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

    //Test SDRAM to confirm correct operation
  	if (QAD_FMC::test() == QA_OK) {
 8001130:	f7ff fd1f 	bl	8000b72 <_ZN7QAD_FMC4testEv>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	bf0c      	ite	eq
 800113a:	2301      	moveq	r3, #1
 800113c:	2300      	movne	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d010      	beq.n	8001166 <main+0x132>

  		//If SDRAM test passed then output message via serial
  		UART_STLink->txStringCR("SDRAM: Test Passed");
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <main+0x178>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	491a      	ldr	r1, [pc, #104]	; (80011b4 <main+0x180>)
 800114a:	4618      	mov	r0, r3
 800114c:	f006 ff85 	bl	800805a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


	//----------------------------------
  //Initialize LCD using QAS_LCD singleton class.
  //This will also initialize LTDC and DSI peripherals, and also initialize otm8009a display controller
  if (QAS_LCD::init()) {
 8001150:	f7ff fec4 	bl	8000edc <_ZN7QAS_LCD4initEv>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	bf14      	ite	ne
 800115a:	2301      	movne	r3, #1
 800115c:	2300      	moveq	r3, #0
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d033      	beq.n	80011cc <main+0x198>
 8001164:	e02c      	b.n	80011c0 <main+0x18c>
  		UART_STLink->txStringCR("SDRAM: Test Failed");
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <main+0x178>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4913      	ldr	r1, [pc, #76]	; (80011b8 <main+0x184>)
 800116c:	4618      	mov	r0, r3
 800116e:	f006 ff74 	bl	800805a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  		GPIO_UserLED_Red->on();
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <main+0x168>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f004 fced 	bl	8005b56 <_ZN15QAD_GPIO_Output2onEv>
  		while(1) {}
 800117c:	e7fe      	b.n	800117c <main+0x148>
    UART_STLink->txStringCR("SDRAM: Initialization failed");
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <main+0x178>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	490e      	ldr	r1, [pc, #56]	; (80011bc <main+0x188>)
 8001184:	4618      	mov	r0, r3
 8001186:	f006 ff68 	bl	800805a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
    GPIO_UserLED_Red->on();
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <main+0x168>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f004 fce1 	bl	8005b56 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8001194:	e7fe      	b.n	8001194 <main+0x160>
 8001196:	bf00      	nop
 8001198:	40022400 	.word	0x40022400
 800119c:	2000012c 	.word	0x2000012c
 80011a0:	20000130 	.word	0x20000130
 80011a4:	40020000 	.word	0x40020000
 80011a8:	20000134 	.word	0x20000134
 80011ac:	20000138 	.word	0x20000138
 80011b0:	08008a08 	.word	0x08008a08
 80011b4:	08008a1c 	.word	0x08008a1c
 80011b8:	08008a30 	.word	0x08008a30
 80011bc:	08008a44 	.word	0x08008a44
  	UART_STLink->txStringCR("LCD: Initialization failed");
 80011c0:	4b96      	ldr	r3, [pc, #600]	; (800141c <main+0x3e8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4996      	ldr	r1, [pc, #600]	; (8001420 <main+0x3ec>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	f006 ff47 	bl	800805a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  }
  UART_STLink->txStringCR("LCD: Initialized");
 80011cc:	4b93      	ldr	r3, [pc, #588]	; (800141c <main+0x3e8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4994      	ldr	r1, [pc, #592]	; (8001424 <main+0x3f0>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f006 ff41 	bl	800805a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //Test rendering methods to confirm LCD and rendering subsystem are working correctly
  //QAS_LCD::flipLayer0();
  //QAS_LCD::flipLayer1();

  QAS_LCD::setDrawBuffer(Layer0);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fe9e 	bl	8000f1a <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0xFFFF);
 80011de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011e2:	f7ff feab 	bl	8000f3c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 80011e6:	f7ff feba 	bl	8000f5e <_ZN7QAS_LCD11clearBufferEv>

  //Shapes
  QAS_LCD::setDrawColor(0xF000);
 80011ea:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80011ee:	f7ff fea5 	bl	8000f3c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawLine(QAT_Vector2(0, 240), QAT_Vector2(799, 240));  //Causes error
 80011f2:	f107 0320 	add.w	r3, r7, #32
 80011f6:	22f0      	movs	r2, #240	; 0xf0
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fd78 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	22f0      	movs	r2, #240	; 0xf0
 8001206:	f240 311f 	movw	r1, #799	; 0x31f
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fd70 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 8001210:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fea9 	bl	8000f72 <_ZN7QAS_LCD8drawLineE11QAT_Vector2S0_>
  QAS_LCD::drawLine(QAT_Vector2(10, 240), QAT_Vector2(789, 240));  //Causes error
 8001220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001224:	22f0      	movs	r2, #240	; 0xf0
 8001226:	210a      	movs	r1, #10
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fd61 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 800122e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001232:	22f0      	movs	r2, #240	; 0xf0
 8001234:	f240 3115 	movw	r1, #789	; 0x315
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fd59 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 800123e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fe92 	bl	8000f72 <_ZN7QAS_LCD8drawLineE11QAT_Vector2S0_>
  QAS_LCD::drawLine(QAT_Vector2(400, 0), QAT_Vector2(400, 479));    //Causes error
 800124e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd49 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 800125e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001262:	f240 12df 	movw	r2, #479	; 0x1df
 8001266:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fd40 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 8001270:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001274:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe79 	bl	8000f72 <_ZN7QAS_LCD8drawLineE11QAT_Vector2S0_>
  QAS_LCD::drawLine(QAT_Vector2(0, 0), QAT_Vector2(799, 479));        //Causes error
 8001280:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fd31 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 800128e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001292:	f240 12df 	movw	r2, #479	; 0x1df
 8001296:	f240 311f 	movw	r1, #799	; 0x31f
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fd28 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 80012a0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80012a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fe61 	bl	8000f72 <_ZN7QAS_LCD8drawLineE11QAT_Vector2S0_>

  QAS_LCD::drawRect(QAT_Vector2(200, 120), QAT_Vector2(600, 360));      //Doesn't cause errors
 80012b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012b4:	2278      	movs	r2, #120	; 0x78
 80012b6:	21c8      	movs	r1, #200	; 0xc8
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fd19 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 80012be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012c2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80012c6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fd10 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 80012d0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80012d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe5a 	bl	8000f94 <_ZN7QAS_LCD8drawRectE11QAT_Vector2S0_>

  QAS_LCD::setDrawColor(0xF00F);
 80012e0:	f24f 000f 	movw	r0, #61455	; 0xf00f
 80012e4:	f7ff fe2a 	bl	8000f3c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRectFill(QAT_Vector2(300, 180), QAT_Vector2(500, 300));  //Causes error
 80012e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ec:	22b4      	movs	r2, #180	; 0xb4
 80012ee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fcfc 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 80012f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012fc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001300:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fcf3 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 800130a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800130e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fe4e 	bl	8000fb6 <_ZN7QAS_LCD12drawRectFillE11QAT_Vector2S0_>

  //Fonts
  QAS_LCD::setDrawColor(0xF000);
 800131a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800131e:	f7ff fe0d 	bl	8000f3c <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("SegoeUI20ptSB");
  //QAS_LCD::setFontByIndex(0);
  QAS_LCD::setFontByIndex(0);
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fe58 	bl	8000fd8 <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2(400, 100), "Hello World!");
 8001328:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800132c:	2264      	movs	r2, #100	; 0x64
 800132e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fcdc 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 8001338:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800133c:	493a      	ldr	r1, [pc, #232]	; (8001428 <main+0x3f4>)
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fe5c 	bl	8000ffc <_ZN7QAS_LCD8drawStrCE11QAT_Vector2PKc>

  QAS_LCD::setDrawColor(0xF077);
 8001344:	f24f 0077 	movw	r0, #61559	; 0xf077
 8001348:	f7ff fdf8 	bl	8000f3c <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("SegoeUI20pt");
  QAS_LCD::setFontByIndex(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f7ff fe43 	bl	8000fd8 <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2(400, 150), "Welcome to");
 8001352:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001356:	2296      	movs	r2, #150	; 0x96
 8001358:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fcc7 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 8001362:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001366:	4931      	ldr	r1, [pc, #196]	; (800142c <main+0x3f8>)
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fe47 	bl	8000ffc <_ZN7QAS_LCD8drawStrCE11QAT_Vector2PKc>

  QAS_LCD::setDrawColor(0xF337);
 800136e:	f24f 3037 	movw	r0, #62263	; 0xf337
 8001372:	f7ff fde3 	bl	8000f3c <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("SegoeUI20pt");
  QAS_LCD::setFontByIndex(0);
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff fe2e 	bl	8000fd8 <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2(400, 200), "ABCDefghIJKLmnopQRSTuvwxYZ!@#$%^");
 800137c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001380:	22c8      	movs	r2, #200	; 0xc8
 8001382:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fcb2 	bl	8000cf0 <_ZN11QAT_Vector2C1Ett>
 800138c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001390:	4927      	ldr	r1, [pc, #156]	; (8001430 <main+0x3fc>)
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fe32 	bl	8000ffc <_ZN7QAS_LCD8drawStrCE11QAT_Vector2PKc>

  QAS_LCD::setDrawBuffer(Layer1);
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff fdbe 	bl	8000f1a <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0x0000);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fdcc 	bl	8000f3c <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 80013a4:	f7ff fddb 	bl	8000f5e <_ZN7QAS_LCD11clearBufferEv>


  QAS_LCD::flipLayer0();
 80013a8:	f7ff fda3 	bl	8000ef2 <_ZN7QAS_LCD10flipLayer0Ev>
  QAS_LCD::flipLayer1();
 80013ac:	f7ff fdab 	bl	8000f06 <_ZN7QAS_LCD10flipLayer1Ev>
  //Processing Loop

  //Create processing loop timing variables
  uint32_t uTicks;
  uint32_t uCurTick;
  uint32_t uNewTick = HAL_GetTick();
 80013b0:	f000 fece 	bl	8002150 <HAL_GetTick>
 80013b4:	66b8      	str	r0, [r7, #104]	; 0x68
  uint32_t uOldTick = uNewTick;
 80013b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013b8:	663b      	str	r3, [r7, #96]	; 0x60

  //Create task timing variables
  uint32_t uHeartbeatTicks = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	667b      	str	r3, [r7, #100]	; 0x64

  	//----------------------------------
  	//Frame Timing
  	//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
  	//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 80013be:	f000 fec7 	bl	8002150 <HAL_GetTick>
 80013c2:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 80013c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80013c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d012      	beq.n	80013f2 <main+0x3be>
    	uOldTick = uNewTick;
 80013cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013ce:	663b      	str	r3, [r7, #96]	; 0x60
    	uNewTick = uCurTick;
 80013d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d2:	66bb      	str	r3, [r7, #104]	; 0x68
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 80013d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80013d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013d8:	429a      	cmp	r2, r3
 80013da:	d205      	bcs.n	80013e8 <main+0x3b4>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 80013dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80013de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	3b01      	subs	r3, #1
 80013e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80013e6:	e006      	b.n	80013f6 <main+0x3c2>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 80013e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80013ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80013f0:	e001      	b.n	80013f6 <main+0x3c2>
    	}

    } else {
    	uTicks = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	66fb      	str	r3, [r7, #108]	; 0x6c

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the green User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //has become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 80013f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80013f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013fa:	4413      	add	r3, r2
 80013fc:	667b      	str	r3, [r7, #100]	; 0x64
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) {
 80013fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001400:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001404:	d3db      	bcc.n	80013be <main+0x38a>
    	GPIO_UserLED_Green->toggle();
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <main+0x400>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f004 fbc9 	bl	8005ba2 <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;
 8001410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001412:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001416:	667b      	str	r3, [r7, #100]	; 0x64
    uCurTick = HAL_GetTick();
 8001418:	e7d1      	b.n	80013be <main+0x38a>
 800141a:	bf00      	nop
 800141c:	20000138 	.word	0x20000138
 8001420:	08008a64 	.word	0x08008a64
 8001424:	08008a80 	.word	0x08008a80
 8001428:	08008a94 	.word	0x08008a94
 800142c:	08008aa4 	.word	0x08008aa4
 8001430:	08008ab0 	.word	0x08008ab0
 8001434:	20000130 	.word	0x20000130

08001438 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8001442:	683c      	ldr	r4, [r7, #0]
 8001444:	4620      	mov	r0, r4
 8001446:	f007 f8be 	bl	80085c6 <_Znaj>
 800144a:	4603      	mov	r3, r0
 800144c:	4618      	mov	r0, r3
 800144e:	4602      	mov	r2, r0
 8001450:	1e63      	subs	r3, r4, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	db04      	blt.n	8001460 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8001456:	2100      	movs	r1, #0
 8001458:	7011      	strb	r1, [r2, #0]
 800145a:	3201      	adds	r2, #1
 800145c:	3b01      	subs	r3, #1
 800145e:	e7f8      	b.n	8001452 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8001460:	4601      	mov	r1, r0
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f8b7 	bl	80015d6 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}

08001470 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8001470:	b5b0      	push	{r4, r5, r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800147a:	6838      	ldr	r0, [r7, #0]
 800147c:	f000 f8c7 	bl	800160e <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8001480:	4603      	mov	r3, r0
 8001482:	881c      	ldrh	r4, [r3, #0]
 8001484:	200c      	movs	r0, #12
 8001486:	f007 f88d 	bl	80085a4 <_Znwj>
 800148a:	4603      	mov	r3, r0
 800148c:	461d      	mov	r5, r3
 800148e:	4621      	mov	r1, r4
 8001490:	4628      	mov	r0, r5
 8001492:	f7ff fb79 	bl	8000b88 <_ZN14QAT_FIFOBufferC1Et>
 8001496:	4629      	mov	r1, r5
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f8c3 	bl	8001624 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bdb0      	pop	{r4, r5, r7, pc}

080014a6 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80014a6:	b5b0      	push	{r4, r5, r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80014b0:	6838      	ldr	r0, [r7, #0]
 80014b2:	f000 f8d3 	bl	800165c <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 80014b6:	4605      	mov	r5, r0
 80014b8:	20a4      	movs	r0, #164	; 0xa4
 80014ba:	f007 f873 	bl	80085a4 <_Znwj>
 80014be:	4603      	mov	r3, r0
 80014c0:	461c      	mov	r4, r3
 80014c2:	4629      	mov	r1, r5
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff fbad 	bl	8000c24 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 80014ca:	4621      	mov	r1, r4
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f8d0 	bl	8001672 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bdb0      	pop	{r4, r5, r7, pc}

080014da <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f8e1 	bl	80016aa <_ZNSaIP12QAS_LCD_FontEC1Ev>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f8e9 	bl	80016c2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_ZNSaIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f8f1 	bl	80016ea <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800152a:	461a      	mov	r2, r3
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f8e7 	bl	8001700 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      }
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fc04 	bl	8000d42 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001544:	b5b0      	push	{r4, r5, r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681c      	ldr	r4, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f8e5 	bl	8001726 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800155c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800155e:	461a      	mov	r2, r3
 8001560:	4629      	mov	r1, r5
 8001562:	4620      	mov	r0, r4
 8001564:	f000 f8ea 	bl	800173c <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ffd1 	bl	8001512 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bdb0      	pop	{r4, r5, r7, pc}

0800157a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4619      	mov	r1, r3
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f8e5 	bl	8001758 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	109b      	asrs	r3, r3, #2
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
      }
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 f8d8 	bl	800179a <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f8df 	bl	80017c2 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001604:	4603      	mov	r3, r0
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f8d2 	bl	80017dc <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f8d9 	bl	8001804 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6839      	ldr	r1, [r7, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f8cc 	bl	800181e <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f8d3 	bl	8001846 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_ZNSaIP12QAS_LCD_FontEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f8d4 	bl	8001860 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
	{ }
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
	if (__p)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 f8ac 	bl	8001876 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>
      }
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 f8a2 	bl	8001894 <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>
    }
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	109b      	asrs	r3, r3, #2
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00e      	beq.n	8001792 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ffd3 	bl	8001726 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8001780:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001782:	461a      	mov	r2, r3
 8001784:	4621      	mov	r1, r4
 8001786:	6838      	ldr	r0, [r7, #0]
 8001788:	f7ff ffd8 	bl	800173c <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}

0800179a <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f881 	bl	80018ae <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff21 	bl	80015f4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80017b2:	4602      	mov	r2, r0
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 f87b 	bl	80018c8 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 f879 	bl	80018e0 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ff27 	bl	8001642 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 80017f4:	4602      	mov	r2, r0
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f873 	bl	80018fa <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001814:	4603      	mov	r3, r0
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f871 	bl	8001912 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff2d 	bl	8001690 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8001836:	4602      	mov	r2, r0
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f86b 	bl	800192c <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001856:	4603      	mov	r3, r0
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 f85c 	bl	8001944 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800189e:	6839      	ldr	r1, [r7, #0]
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f85c 	bl	800195e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>
    }
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f85b 	bl	8001974 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f85f 	bl	8001994 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f85f 	bl	80019ae <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f863 	bl	80019ce <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 8001908:	4603      	mov	r3, r0
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f863 	bl	80019e8 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f867 	bl	8001a08 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 800193a:	4603      	mov	r3, r0
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8001950:	68b8      	ldr	r0, [r7, #8]
 8001952:	f006 fe14 	bl	800857e <_ZdlPv>
      }
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f850 	bl	8001a22 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f858 	bl	8001a3a <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f859 	bl	8001a56 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f858 	bl	8001a6c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f860 	bl	8001a84 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 f861 	bl	8001aa0 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 80019de:	4603      	mov	r3, r0
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f860 	bl	8001ab6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f868 	bl	8001ace <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f869 	bl	8001aea <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f868 	bl	8001b00 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f84e 	bl	8001b16 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f834 	bl	8001b2c <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
	return 1;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_kill>:

int _kill(int pid, int sig)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b5c:	f006 fd66 	bl	800862c <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2216      	movs	r2, #22
 8001b64:	601a      	str	r2, [r3, #0]
	return -1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_exit>:

void _exit (int status)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffe7 	bl	8001b52 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b84:	e7fe      	b.n	8001b84 <_exit+0x12>
	...

08001b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b90:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <_sbrk+0x5c>)
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <_sbrk+0x60>)
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <_sbrk+0x64>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <_sbrk+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d207      	bcs.n	8001bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb8:	f006 fd38 	bl	800862c <__errno>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	e009      	b.n	8001bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <_sbrk+0x64>)
 8001bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20080000 	.word	0x20080000
 8001be8:	00000400 	.word	0x00000400
 8001bec:	2000013c 	.word	0x2000013c
 8001bf0:	200003a8 	.word	0x200003a8

08001bf4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <SystemInit+0x20>)
 8001bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <SystemInit+0x20>)
 8001c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001c22:	49c1      	ldr	r1, [pc, #772]	; (8001f28 <OTM8009A_Init+0x310>)
 8001c24:	2000      	movs	r0, #0
 8001c26:	f004 fafe 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001c2a:	49c0      	ldr	r1, [pc, #768]	; (8001f2c <OTM8009A_Init+0x314>)
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f004 fafa 	bl	8006226 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001c32:	49bf      	ldr	r1, [pc, #764]	; (8001f30 <OTM8009A_Init+0x318>)
 8001c34:	2000      	movs	r0, #0
 8001c36:	f004 faf6 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001c3a:	49be      	ldr	r1, [pc, #760]	; (8001f34 <OTM8009A_Init+0x31c>)
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f004 faf2 	bl	8006226 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001c42:	49bb      	ldr	r1, [pc, #748]	; (8001f30 <OTM8009A_Init+0x318>)
 8001c44:	2000      	movs	r0, #0
 8001c46:	f004 faee 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001c4a:	49bb      	ldr	r1, [pc, #748]	; (8001f38 <OTM8009A_Init+0x320>)
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f004 faea 	bl	8006226 <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8001c52:	200a      	movs	r0, #10
 8001c54:	f000 fa88 	bl	8002168 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001c58:	49b8      	ldr	r1, [pc, #736]	; (8001f3c <OTM8009A_Init+0x324>)
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f004 fae3 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001c60:	49b7      	ldr	r1, [pc, #732]	; (8001f40 <OTM8009A_Init+0x328>)
 8001c62:	2000      	movs	r0, #0
 8001c64:	f004 fadf 	bl	8006226 <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8001c68:	200a      	movs	r0, #10
 8001c6a:	f000 fa7d 	bl	8002168 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8001c6e:	49b5      	ldr	r1, [pc, #724]	; (8001f44 <OTM8009A_Init+0x32c>)
 8001c70:	2000      	movs	r0, #0
 8001c72:	f004 fad8 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001c76:	49b4      	ldr	r1, [pc, #720]	; (8001f48 <OTM8009A_Init+0x330>)
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f004 fad4 	bl	8006226 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8001c7e:	49b3      	ldr	r1, [pc, #716]	; (8001f4c <OTM8009A_Init+0x334>)
 8001c80:	2000      	movs	r0, #0
 8001c82:	f004 fad0 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001c86:	49b2      	ldr	r1, [pc, #712]	; (8001f50 <OTM8009A_Init+0x338>)
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f004 facc 	bl	8006226 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8001c8e:	49b1      	ldr	r1, [pc, #708]	; (8001f54 <OTM8009A_Init+0x33c>)
 8001c90:	2000      	movs	r0, #0
 8001c92:	f004 fac8 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001c96:	49b0      	ldr	r1, [pc, #704]	; (8001f58 <OTM8009A_Init+0x340>)
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f004 fac4 	bl	8006226 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001c9e:	49a2      	ldr	r1, [pc, #648]	; (8001f28 <OTM8009A_Init+0x310>)
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f004 fac0 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8001ca6:	49ad      	ldr	r1, [pc, #692]	; (8001f5c <OTM8009A_Init+0x344>)
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f004 fabc 	bl	8006226 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001cae:	49ac      	ldr	r1, [pc, #688]	; (8001f60 <OTM8009A_Init+0x348>)
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f004 fab8 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8001cb6:	49ab      	ldr	r1, [pc, #684]	; (8001f64 <OTM8009A_Init+0x34c>)
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f004 fab4 	bl	8006226 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001cbe:	49aa      	ldr	r1, [pc, #680]	; (8001f68 <OTM8009A_Init+0x350>)
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f004 fab0 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8001cc6:	49a9      	ldr	r1, [pc, #676]	; (8001f6c <OTM8009A_Init+0x354>)
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f004 faac 	bl	8006226 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001cce:	49a8      	ldr	r1, [pc, #672]	; (8001f70 <OTM8009A_Init+0x358>)
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f004 faa8 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8001cd6:	49a7      	ldr	r1, [pc, #668]	; (8001f74 <OTM8009A_Init+0x35c>)
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f004 faa4 	bl	8006226 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001cde:	49a6      	ldr	r1, [pc, #664]	; (8001f78 <OTM8009A_Init+0x360>)
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f004 faa0 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001ce6:	499a      	ldr	r1, [pc, #616]	; (8001f50 <OTM8009A_Init+0x338>)
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f004 fa9c 	bl	8006226 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001cee:	498e      	ldr	r1, [pc, #568]	; (8001f28 <OTM8009A_Init+0x310>)
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f004 fa98 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8001cf6:	49a1      	ldr	r1, [pc, #644]	; (8001f7c <OTM8009A_Init+0x364>)
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f004 fa94 	bl	8006226 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001cfe:	49a0      	ldr	r1, [pc, #640]	; (8001f80 <OTM8009A_Init+0x368>)
 8001d00:	2000      	movs	r0, #0
 8001d02:	f004 fa90 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8001d06:	499f      	ldr	r1, [pc, #636]	; (8001f84 <OTM8009A_Init+0x36c>)
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f004 fa8c 	bl	8006226 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001d0e:	499e      	ldr	r1, [pc, #632]	; (8001f88 <OTM8009A_Init+0x370>)
 8001d10:	2000      	movs	r0, #0
 8001d12:	f004 fa88 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001d16:	499d      	ldr	r1, [pc, #628]	; (8001f8c <OTM8009A_Init+0x374>)
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f004 fa84 	bl	8006226 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001d1e:	499c      	ldr	r1, [pc, #624]	; (8001f90 <OTM8009A_Init+0x378>)
 8001d20:	2000      	movs	r0, #0
 8001d22:	f004 fa80 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001d26:	499b      	ldr	r1, [pc, #620]	; (8001f94 <OTM8009A_Init+0x37c>)
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f004 fa7c 	bl	8006226 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001d2e:	498c      	ldr	r1, [pc, #560]	; (8001f60 <OTM8009A_Init+0x348>)
 8001d30:	2000      	movs	r0, #0
 8001d32:	f004 fa78 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001d36:	4998      	ldr	r1, [pc, #608]	; (8001f98 <OTM8009A_Init+0x380>)
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f004 fa74 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001d3e:	498a      	ldr	r1, [pc, #552]	; (8001f68 <OTM8009A_Init+0x350>)
 8001d40:	2000      	movs	r0, #0
 8001d42:	f004 fa70 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001d46:	4995      	ldr	r1, [pc, #596]	; (8001f9c <OTM8009A_Init+0x384>)
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f004 fa6c 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8001d4e:	4994      	ldr	r1, [pc, #592]	; (8001fa0 <OTM8009A_Init+0x388>)
 8001d50:	2000      	movs	r0, #0
 8001d52:	f004 fa68 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001d56:	4993      	ldr	r1, [pc, #588]	; (8001fa4 <OTM8009A_Init+0x38c>)
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f004 fa64 	bl	8006226 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001d5e:	4974      	ldr	r1, [pc, #464]	; (8001f30 <OTM8009A_Init+0x318>)
 8001d60:	2000      	movs	r0, #0
 8001d62:	f004 fa60 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001d66:	4990      	ldr	r1, [pc, #576]	; (8001fa8 <OTM8009A_Init+0x390>)
 8001d68:	2006      	movs	r0, #6
 8001d6a:	f004 fa5c 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001d6e:	498f      	ldr	r1, [pc, #572]	; (8001fac <OTM8009A_Init+0x394>)
 8001d70:	2000      	movs	r0, #0
 8001d72:	f004 fa58 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001d76:	498e      	ldr	r1, [pc, #568]	; (8001fb0 <OTM8009A_Init+0x398>)
 8001d78:	200e      	movs	r0, #14
 8001d7a:	f004 fa54 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001d7e:	498d      	ldr	r1, [pc, #564]	; (8001fb4 <OTM8009A_Init+0x39c>)
 8001d80:	2000      	movs	r0, #0
 8001d82:	f004 fa50 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001d86:	498c      	ldr	r1, [pc, #560]	; (8001fb8 <OTM8009A_Init+0x3a0>)
 8001d88:	200e      	movs	r0, #14
 8001d8a:	f004 fa4c 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001d8e:	498b      	ldr	r1, [pc, #556]	; (8001fbc <OTM8009A_Init+0x3a4>)
 8001d90:	2000      	movs	r0, #0
 8001d92:	f004 fa48 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001d96:	498a      	ldr	r1, [pc, #552]	; (8001fc0 <OTM8009A_Init+0x3a8>)
 8001d98:	200a      	movs	r0, #10
 8001d9a:	f004 fa44 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001d9e:	4989      	ldr	r1, [pc, #548]	; (8001fc4 <OTM8009A_Init+0x3ac>)
 8001da0:	2000      	movs	r0, #0
 8001da2:	f004 fa40 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001da6:	4988      	ldr	r1, [pc, #544]	; (8001fc8 <OTM8009A_Init+0x3b0>)
 8001da8:	2000      	movs	r0, #0
 8001daa:	f004 fa3c 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001dae:	4960      	ldr	r1, [pc, #384]	; (8001f30 <OTM8009A_Init+0x318>)
 8001db0:	2000      	movs	r0, #0
 8001db2:	f004 fa38 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8001db6:	4985      	ldr	r1, [pc, #532]	; (8001fcc <OTM8009A_Init+0x3b4>)
 8001db8:	200a      	movs	r0, #10
 8001dba:	f004 fa34 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001dbe:	4984      	ldr	r1, [pc, #528]	; (8001fd0 <OTM8009A_Init+0x3b8>)
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f004 fa30 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8001dc6:	4983      	ldr	r1, [pc, #524]	; (8001fd4 <OTM8009A_Init+0x3bc>)
 8001dc8:	200f      	movs	r0, #15
 8001dca:	f004 fa2c 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001dce:	4977      	ldr	r1, [pc, #476]	; (8001fac <OTM8009A_Init+0x394>)
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f004 fa28 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8001dd6:	4980      	ldr	r1, [pc, #512]	; (8001fd8 <OTM8009A_Init+0x3c0>)
 8001dd8:	200f      	movs	r0, #15
 8001dda:	f004 fa24 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001dde:	4975      	ldr	r1, [pc, #468]	; (8001fb4 <OTM8009A_Init+0x39c>)
 8001de0:	2000      	movs	r0, #0
 8001de2:	f004 fa20 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8001de6:	497d      	ldr	r1, [pc, #500]	; (8001fdc <OTM8009A_Init+0x3c4>)
 8001de8:	200a      	movs	r0, #10
 8001dea:	f004 fa1c 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001dee:	4973      	ldr	r1, [pc, #460]	; (8001fbc <OTM8009A_Init+0x3a4>)
 8001df0:	2000      	movs	r0, #0
 8001df2:	f004 fa18 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8001df6:	497a      	ldr	r1, [pc, #488]	; (8001fe0 <OTM8009A_Init+0x3c8>)
 8001df8:	200f      	movs	r0, #15
 8001dfa:	f004 fa14 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001dfe:	4971      	ldr	r1, [pc, #452]	; (8001fc4 <OTM8009A_Init+0x3ac>)
 8001e00:	2000      	movs	r0, #0
 8001e02:	f004 fa10 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8001e06:	4977      	ldr	r1, [pc, #476]	; (8001fe4 <OTM8009A_Init+0x3cc>)
 8001e08:	200f      	movs	r0, #15
 8001e0a:	f004 fa0c 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8001e0e:	4976      	ldr	r1, [pc, #472]	; (8001fe8 <OTM8009A_Init+0x3d0>)
 8001e10:	2000      	movs	r0, #0
 8001e12:	f004 fa08 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001e16:	4975      	ldr	r1, [pc, #468]	; (8001fec <OTM8009A_Init+0x3d4>)
 8001e18:	200a      	movs	r0, #10
 8001e1a:	f004 fa04 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8001e1e:	4974      	ldr	r1, [pc, #464]	; (8001ff0 <OTM8009A_Init+0x3d8>)
 8001e20:	2000      	movs	r0, #0
 8001e22:	f004 fa00 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001e26:	4973      	ldr	r1, [pc, #460]	; (8001ff4 <OTM8009A_Init+0x3dc>)
 8001e28:	200a      	movs	r0, #10
 8001e2a:	f004 f9fc 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001e2e:	4940      	ldr	r1, [pc, #256]	; (8001f30 <OTM8009A_Init+0x318>)
 8001e30:	2000      	movs	r0, #0
 8001e32:	f004 f9f8 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001e36:	4970      	ldr	r1, [pc, #448]	; (8001ff8 <OTM8009A_Init+0x3e0>)
 8001e38:	200a      	movs	r0, #10
 8001e3a:	f004 f9f4 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001e3e:	4964      	ldr	r1, [pc, #400]	; (8001fd0 <OTM8009A_Init+0x3b8>)
 8001e40:	2000      	movs	r0, #0
 8001e42:	f004 f9f0 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001e46:	496d      	ldr	r1, [pc, #436]	; (8001ffc <OTM8009A_Init+0x3e4>)
 8001e48:	200f      	movs	r0, #15
 8001e4a:	f004 f9ec 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001e4e:	4957      	ldr	r1, [pc, #348]	; (8001fac <OTM8009A_Init+0x394>)
 8001e50:	2000      	movs	r0, #0
 8001e52:	f004 f9e8 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001e56:	496a      	ldr	r1, [pc, #424]	; (8002000 <OTM8009A_Init+0x3e8>)
 8001e58:	200f      	movs	r0, #15
 8001e5a:	f004 f9e4 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001e5e:	4955      	ldr	r1, [pc, #340]	; (8001fb4 <OTM8009A_Init+0x39c>)
 8001e60:	2000      	movs	r0, #0
 8001e62:	f004 f9e0 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001e66:	4967      	ldr	r1, [pc, #412]	; (8002004 <OTM8009A_Init+0x3ec>)
 8001e68:	200a      	movs	r0, #10
 8001e6a:	f004 f9dc 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001e6e:	4953      	ldr	r1, [pc, #332]	; (8001fbc <OTM8009A_Init+0x3a4>)
 8001e70:	2000      	movs	r0, #0
 8001e72:	f004 f9d8 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001e76:	4964      	ldr	r1, [pc, #400]	; (8002008 <OTM8009A_Init+0x3f0>)
 8001e78:	200f      	movs	r0, #15
 8001e7a:	f004 f9d4 	bl	8006226 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001e7e:	4951      	ldr	r1, [pc, #324]	; (8001fc4 <OTM8009A_Init+0x3ac>)
 8001e80:	2000      	movs	r0, #0
 8001e82:	f004 f9d0 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8001e86:	4961      	ldr	r1, [pc, #388]	; (800200c <OTM8009A_Init+0x3f4>)
 8001e88:	200f      	movs	r0, #15
 8001e8a:	f004 f9cc 	bl	8006226 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001e8e:	4934      	ldr	r1, [pc, #208]	; (8001f60 <OTM8009A_Init+0x348>)
 8001e90:	2000      	movs	r0, #0
 8001e92:	f004 f9c8 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8001e96:	495e      	ldr	r1, [pc, #376]	; (8002010 <OTM8009A_Init+0x3f8>)
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f004 f9c4 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8001e9e:	495d      	ldr	r1, [pc, #372]	; (8002014 <OTM8009A_Init+0x3fc>)
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f004 f9c0 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8001ea6:	495c      	ldr	r1, [pc, #368]	; (8002018 <OTM8009A_Init+0x400>)
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f004 f9bc 	bl	8006226 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8001eae:	495b      	ldr	r1, [pc, #364]	; (800201c <OTM8009A_Init+0x404>)
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f004 f9b8 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8001eb6:	495a      	ldr	r1, [pc, #360]	; (8002020 <OTM8009A_Init+0x408>)
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f004 f9b4 	bl	8006226 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001ebe:	491a      	ldr	r1, [pc, #104]	; (8001f28 <OTM8009A_Init+0x310>)
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f004 f9b0 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8001ec6:	4957      	ldr	r1, [pc, #348]	; (8002024 <OTM8009A_Init+0x40c>)
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f004 f9ac 	bl	8006226 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001ece:	4916      	ldr	r1, [pc, #88]	; (8001f28 <OTM8009A_Init+0x310>)
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f004 f9a8 	bl	8006226 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001ed6:	4914      	ldr	r1, [pc, #80]	; (8001f28 <OTM8009A_Init+0x310>)
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f004 f9a4 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001ede:	4952      	ldr	r1, [pc, #328]	; (8002028 <OTM8009A_Init+0x410>)
 8001ee0:	2010      	movs	r0, #16
 8001ee2:	f004 f9a0 	bl	8006226 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001ee6:	4910      	ldr	r1, [pc, #64]	; (8001f28 <OTM8009A_Init+0x310>)
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f004 f99c 	bl	8006226 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001eee:	494f      	ldr	r1, [pc, #316]	; (800202c <OTM8009A_Init+0x414>)
 8001ef0:	2010      	movs	r0, #16
 8001ef2:	f004 f998 	bl	8006226 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8001ef6:	494e      	ldr	r1, [pc, #312]	; (8002030 <OTM8009A_Init+0x418>)
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f004 f994 	bl	8006226 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  HAL_Delay(120);
 8001efe:	2078      	movs	r0, #120	; 0x78
 8001f00:	f000 f932 	bl	8002168 <HAL_Delay>

  switch(ColorCoding)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <OTM8009A_Init+0x304>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	f040 8095 	bne.w	800203c <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001f12:	4948      	ldr	r1, [pc, #288]	; (8002034 <OTM8009A_Init+0x41c>)
 8001f14:	2000      	movs	r0, #0
 8001f16:	f004 f986 	bl	8006226 <DSI_IO_WriteCmd>
    break;
 8001f1a:	e090      	b.n	800203e <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8001f1c:	4946      	ldr	r1, [pc, #280]	; (8002038 <OTM8009A_Init+0x420>)
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f004 f981 	bl	8006226 <DSI_IO_WriteCmd>
    break;
 8001f24:	e08b      	b.n	800203e <OTM8009A_Init+0x426>
 8001f26:	bf00      	nop
 8001f28:	08008c90 	.word	0x08008c90
 8001f2c:	08008b48 	.word	0x08008b48
 8001f30:	08008c94 	.word	0x08008c94
 8001f34:	08008b4c 	.word	0x08008b4c
 8001f38:	08008c98 	.word	0x08008c98
 8001f3c:	08008c9c 	.word	0x08008c9c
 8001f40:	08008ca0 	.word	0x08008ca0
 8001f44:	08008ca4 	.word	0x08008ca4
 8001f48:	08008ca8 	.word	0x08008ca8
 8001f4c:	08008cac 	.word	0x08008cac
 8001f50:	08008cb0 	.word	0x08008cb0
 8001f54:	08008cb4 	.word	0x08008cb4
 8001f58:	08008cb8 	.word	0x08008cb8
 8001f5c:	08008cbc 	.word	0x08008cbc
 8001f60:	08008cc0 	.word	0x08008cc0
 8001f64:	08008cc4 	.word	0x08008cc4
 8001f68:	08008cc8 	.word	0x08008cc8
 8001f6c:	08008ccc 	.word	0x08008ccc
 8001f70:	08008cd0 	.word	0x08008cd0
 8001f74:	08008cd4 	.word	0x08008cd4
 8001f78:	08008cd8 	.word	0x08008cd8
 8001f7c:	08008b78 	.word	0x08008b78
 8001f80:	08008cdc 	.word	0x08008cdc
 8001f84:	08008ce0 	.word	0x08008ce0
 8001f88:	08008ce4 	.word	0x08008ce4
 8001f8c:	08008ce8 	.word	0x08008ce8
 8001f90:	08008cec 	.word	0x08008cec
 8001f94:	08008cf0 	.word	0x08008cf0
 8001f98:	08008cf4 	.word	0x08008cf4
 8001f9c:	08008cf8 	.word	0x08008cf8
 8001fa0:	08008cfc 	.word	0x08008cfc
 8001fa4:	08008b7c 	.word	0x08008b7c
 8001fa8:	08008b80 	.word	0x08008b80
 8001fac:	08008d00 	.word	0x08008d00
 8001fb0:	08008b88 	.word	0x08008b88
 8001fb4:	08008d04 	.word	0x08008d04
 8001fb8:	08008b98 	.word	0x08008b98
 8001fbc:	08008d08 	.word	0x08008d08
 8001fc0:	08008ba8 	.word	0x08008ba8
 8001fc4:	08008d0c 	.word	0x08008d0c
 8001fc8:	08008d44 	.word	0x08008d44
 8001fcc:	08008bb4 	.word	0x08008bb4
 8001fd0:	08008d10 	.word	0x08008d10
 8001fd4:	08008bc0 	.word	0x08008bc0
 8001fd8:	08008bd0 	.word	0x08008bd0
 8001fdc:	08008be0 	.word	0x08008be0
 8001fe0:	08008bec 	.word	0x08008bec
 8001fe4:	08008bfc 	.word	0x08008bfc
 8001fe8:	08008d14 	.word	0x08008d14
 8001fec:	08008c0c 	.word	0x08008c0c
 8001ff0:	08008d18 	.word	0x08008d18
 8001ff4:	08008c18 	.word	0x08008c18
 8001ff8:	08008c24 	.word	0x08008c24
 8001ffc:	08008c30 	.word	0x08008c30
 8002000:	08008c40 	.word	0x08008c40
 8002004:	08008c50 	.word	0x08008c50
 8002008:	08008c5c 	.word	0x08008c5c
 800200c:	08008c6c 	.word	0x08008c6c
 8002010:	08008d48 	.word	0x08008d48
 8002014:	08008d4c 	.word	0x08008d4c
 8002018:	08008d50 	.word	0x08008d50
 800201c:	08008d54 	.word	0x08008d54
 8002020:	08008d58 	.word	0x08008d58
 8002024:	08008c7c 	.word	0x08008c7c
 8002028:	08008b50 	.word	0x08008b50
 800202c:	08008b64 	.word	0x08008b64
 8002030:	08008d1c 	.word	0x08008d1c
 8002034:	08008d20 	.word	0x08008d20
 8002038:	08008d24 	.word	0x08008d24
  default :
    break;
 800203c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d10b      	bne.n	800205c <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8002044:	4916      	ldr	r1, [pc, #88]	; (80020a0 <OTM8009A_Init+0x488>)
 8002046:	2000      	movs	r0, #0
 8002048:	f004 f8ed 	bl	8006226 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800204c:	4915      	ldr	r1, [pc, #84]	; (80020a4 <OTM8009A_Init+0x48c>)
 800204e:	2004      	movs	r0, #4
 8002050:	f004 f8e9 	bl	8006226 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8002054:	4914      	ldr	r1, [pc, #80]	; (80020a8 <OTM8009A_Init+0x490>)
 8002056:	2004      	movs	r0, #4
 8002058:	f004 f8e5 	bl	8006226 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800205c:	4913      	ldr	r1, [pc, #76]	; (80020ac <OTM8009A_Init+0x494>)
 800205e:	2000      	movs	r0, #0
 8002060:	f004 f8e1 	bl	8006226 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8002064:	4912      	ldr	r1, [pc, #72]	; (80020b0 <OTM8009A_Init+0x498>)
 8002066:	2000      	movs	r0, #0
 8002068:	f004 f8dd 	bl	8006226 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800206c:	4911      	ldr	r1, [pc, #68]	; (80020b4 <OTM8009A_Init+0x49c>)
 800206e:	2000      	movs	r0, #0
 8002070:	f004 f8d9 	bl	8006226 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8002074:	4910      	ldr	r1, [pc, #64]	; (80020b8 <OTM8009A_Init+0x4a0>)
 8002076:	2000      	movs	r0, #0
 8002078:	f004 f8d5 	bl	8006226 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 800207c:	490f      	ldr	r1, [pc, #60]	; (80020bc <OTM8009A_Init+0x4a4>)
 800207e:	2000      	movs	r0, #0
 8002080:	f004 f8d1 	bl	8006226 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002084:	490e      	ldr	r1, [pc, #56]	; (80020c0 <OTM8009A_Init+0x4a8>)
 8002086:	2000      	movs	r0, #0
 8002088:	f004 f8cd 	bl	8006226 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 800208c:	490d      	ldr	r1, [pc, #52]	; (80020c4 <OTM8009A_Init+0x4ac>)
 800208e:	2000      	movs	r0, #0
 8002090:	f004 f8c9 	bl	8006226 <DSI_IO_WriteCmd>

  return 0;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	08008d28 	.word	0x08008d28
 80020a4:	08008c80 	.word	0x08008c80
 80020a8:	08008c88 	.word	0x08008c88
 80020ac:	08008d2c 	.word	0x08008d2c
 80020b0:	08008d30 	.word	0x08008d30
 80020b4:	08008d34 	.word	0x08008d34
 80020b8:	08008d38 	.word	0x08008d38
 80020bc:	08008d3c 	.word	0x08008d3c
 80020c0:	08008c90 	.word	0x08008c90
 80020c4:	08008d40 	.word	0x08008d40

080020c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_InitTick+0x54>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_InitTick+0x58>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020de:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f999 	bl	800241e <HAL_SYSTICK_Config>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00e      	b.n	8002114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	d80a      	bhi.n	8002112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020fc:	2200      	movs	r2, #0
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	f000 f953 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002108:	4a06      	ldr	r2, [pc, #24]	; (8002124 <HAL_InitTick+0x5c>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	e000      	b.n	8002114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000000 	.word	0x20000000
 8002120:	20000008 	.word	0x20000008
 8002124:	20000004 	.word	0x20000004

08002128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_IncTick+0x20>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_IncTick+0x24>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4413      	add	r3, r2
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <HAL_IncTick+0x24>)
 800213a:	6013      	str	r3, [r2, #0]
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000008 	.word	0x20000008
 800214c:	20000390 	.word	0x20000390

08002150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return uwTick;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_GetTick+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000390 	.word	0x20000390

08002168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff ffee 	bl	8002150 <HAL_GetTick>
 8002174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d005      	beq.n	800218e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_Delay+0x44>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800218e:	bf00      	nop
 8002190:	f7ff ffde 	bl	8002150 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d8f7      	bhi.n	8002190 <HAL_Delay+0x28>
  {
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000008 	.word	0x20000008

080021b0 <__NVIC_SetPriorityGrouping>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <__NVIC_SetPriorityGrouping+0x40>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <__NVIC_SetPriorityGrouping+0x40>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60d3      	str	r3, [r2, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00
 80021f4:	05fa0000 	.word	0x05fa0000

080021f8 <__NVIC_GetPriorityGrouping>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <__NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_EnableIRQ>:
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	2b00      	cmp	r3, #0
 8002224:	db0b      	blt.n	800223e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	4907      	ldr	r1, [pc, #28]	; (800224c <__NVIC_EnableIRQ+0x38>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	2001      	movs	r0, #1
 8002236:	fa00 f202 	lsl.w	r2, r0, r2
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000e100 	.word	0xe000e100

08002250 <__NVIC_DisableIRQ>:
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	db12      	blt.n	8002288 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	490a      	ldr	r1, [pc, #40]	; (8002294 <__NVIC_DisableIRQ+0x44>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2001      	movs	r0, #1
 8002272:	fa00 f202 	lsl.w	r2, r0, r2
 8002276:	3320      	adds	r3, #32
 8002278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800227c:	f3bf 8f4f 	dsb	sy
}
 8002280:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002282:	f3bf 8f6f 	isb	sy
}
 8002286:	bf00      	nop
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	; (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	; 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff05 	bl	80021b0 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff1a 	bl	80021f8 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff8e 	bl	80022ec <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff0d 	bl	8002214 <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff1d 	bl	8002250 <__NVIC_DisableIRQ>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ff94 	bl	8002354 <SysTick_Config>
 800242c:	4603      	mov	r3, r0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	019a      	lsls	r2, r3, #6
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	431a      	orrs	r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	431a      	orrs	r2, r3
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	041b      	lsls	r3, r3, #16
 8002456:	431a      	orrs	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002476:	f7ff fe6b 	bl	8002150 <HAL_GetTick>
 800247a:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800247c:	e009      	b.n	8002492 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800247e:	f7ff fe67 	bl	8002150 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800248c:	d901      	bls.n	8002492 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e015      	b.n	80024be <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ee      	beq.n	800247e <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	019a      	lsls	r2, r3, #6
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	ea42 0103 	orr.w	r1, r2, r3
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	041a      	lsls	r2, r3, #16
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e106      	b.n	80026ea <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	7c5b      	ldrb	r3, [r3, #17]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d102      	bne.n	80024ec <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f97c 	bl	80027e4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2203      	movs	r2, #3
 80024f0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002506:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800251a:	f7ff fe19 	bl	8002150 <HAL_GetTick>
 800251e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002520:	e009      	b.n	8002536 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002522:	f7ff fe15 	bl	8002150 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002530:	d901      	bls.n	8002536 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e0d9      	b.n	80026ea <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800253e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0ed      	beq.n	8002522 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b68      	ldr	r3, [pc, #416]	; (80026f4 <HAL_DSI_Init+0x22c>)
 8002554:	400b      	ands	r3, r1
 8002556:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	009a      	lsls	r2, r3, #2
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	02db      	lsls	r3, r3, #11
 800256e:	431a      	orrs	r2, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025aa:	f7ff fdd1 	bl	8002150 <HAL_GetTick>
 80025ae:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80025b0:	e009      	b.n	80025c6 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80025b2:	f7ff fdcd 	bl	8002150 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025c0:	d901      	bls.n	80025c6 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e091      	b.n	80026ea <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0ed      	beq.n	80025b2 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0206 	orr.w	r2, r2, #6
 80025e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0203 	bic.w	r2, r2, #3
 80025fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0203 	bic.w	r2, r2, #3
 8002628:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002650:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_DSI_Init+0x1aa>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	e000      	b.n	8002674 <HAL_DSI_Init+0x1ac>
 8002672:	2301      	movs	r3, #1
 8002674:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_DSI_Init+0x230>)
 800267a:	fb02 f203 	mul.w	r2, r2, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	409a      	lsls	r2, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	fbb2 f3f3 	udiv	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80026aa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	430a      	orrs	r2, r1
 80026be:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3720      	adds	r7, #32
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	fffc8603 	.word	0xfffc8603
 80026f8:	003d0900 	.word	0x003d0900

080026fc <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e066      	b.n	80027dc <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2203      	movs	r2, #3
 8002712:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0208 	bic.w	r2, r2, #8
 8002728:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0206 	bic.w	r2, r2, #6
 800276e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80027ae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80027ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f818 	bl	80027f8 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7c1b      	ldrb	r3, [r3, #16]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_DSI_ConfigVideoMode+0x16>
 800281e:	2302      	movs	r3, #2
 8002820:	e1ee      	b.n	8002c00 <HAL_DSI_ConfigVideoMode+0x3f4>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0203 	bic.w	r2, r2, #3
 800285a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b8b      	ldr	r3, [pc, #556]	; (8002aa8 <HAL_DSI_ConfigVideoMode+0x29c>)
 800287a:	400b      	ands	r3, r1
 800287c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b84      	ldr	r3, [pc, #528]	; (8002aac <HAL_DSI_ConfigVideoMode+0x2a0>)
 800289c:	400b      	ands	r3, r1
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b7b      	ldr	r3, [pc, #492]	; (8002aac <HAL_DSI_ConfigVideoMode+0x2a0>)
 80028be:	400b      	ands	r3, r1
 80028c0:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	699a      	ldr	r2, [r3, #24]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0203 	bic.w	r2, r2, #3
 80028e2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68d9      	ldr	r1, [r3, #12]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0207 	bic.w	r2, r2, #7
 8002904:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6959      	ldr	r1, [r3, #20]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	431a      	orrs	r2, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 020f 	bic.w	r2, r2, #15
 8002932:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6919      	ldr	r1, [r3, #16]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 020e 	bic.w	r2, r2, #14
 8002956:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	005a      	lsls	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b03      	cmp	r3, #3
 8002978:	d110      	bne.n	800299c <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002988:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6919      	ldr	r1, [r3, #16]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80029a8:	400b      	ands	r3, r1
 80029aa:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80029ca:	400b      	ands	r3, r1
 80029cc:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <HAL_DSI_ConfigVideoMode+0x2a8>)
 80029ec:	400b      	ands	r3, r1
 80029ee:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002a0e:	400b      	ands	r3, r1
 8002a10:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002a30:	400b      	ands	r3, r1
 8002a32:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002a52:	400b      	ands	r3, r1
 8002a54:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <HAL_DSI_ConfigVideoMode+0x29c>)
 8002a74:	400b      	ands	r3, r1
 8002a76:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aa4:	e00a      	b.n	8002abc <HAL_DSI_ConfigVideoMode+0x2b0>
 8002aa6:	bf00      	nop
 8002aa8:	ffffc000 	.word	0xffffc000
 8002aac:	ffffe000 	.word	0xffffe000
 8002ab0:	fffff000 	.word	0xfffff000
 8002ab4:	ffff8000 	.word	0xffff8000
 8002ab8:	fffffc00 	.word	0xfffffc00
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002ad2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6999      	ldr	r1, [r3, #24]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ade:	041a      	lsls	r2, r3, #16
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002af6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6999      	ldr	r1, [r3, #24]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b18:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b5c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bc2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7c1b      	ldrb	r3, [r3, #16]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_DSI_Start+0x14>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e02b      	b.n	8002c78 <HAL_DSI_Start+0x6c>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0208 	orr.w	r2, r2, #8
 8002c5c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	7c1b      	ldrb	r3, [r3, #16]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_DSI_ShortWrite+0x1a>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e010      	b.n	8002cc0 <HAL_DSI_ShortWrite+0x3c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff fbda 	bl	8002468 <DSI_ShortWrite>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	741a      	strb	r2, [r3, #16]

  return status;
 8002cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08c      	sub	sp, #48	; 0x30
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	7c1b      	ldrb	r3, [r3, #16]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_DSI_LongWrite+0x1e>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e084      	b.n	8002df0 <HAL_DSI_LongWrite+0x128>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cec:	f7ff fa30 	bl	8002150 <HAL_GetTick>
 8002cf0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002cf2:	e00c      	b.n	8002d0e <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002cf4:	f7ff fa2c 	bl	8002150 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d02:	d904      	bls.n	8002d0e <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e070      	b.n	8002df0 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0eb      	beq.n	8002cf4 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	bf28      	it	cs
 8002d26:	2303      	movcs	r3, #3
 8002d28:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
 8002d2e:	e00f      	b.n	8002d50 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	4413      	add	r3, r2
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	6a3a      	ldr	r2, [r7, #32]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d3eb      	bcc.n	8002d30 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8002d70:	e028      	b.n	8002dc4 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	bf28      	it	cs
 8002d78:	2304      	movcs	r3, #4
 8002d7a:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
 8002d84:	e00e      	b.n	8002da4 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	3301      	adds	r3, #1
 8002da2:	623b      	str	r3, [r7, #32]
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d3ec      	bcc.n	8002d86 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8002db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1d3      	bne.n	8002d72 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002dd2:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	4613      	mov	r3, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	f7ff fb27 	bl	8002436 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3728      	adds	r7, #40	; 0x28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	e175      	b.n	8003104 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e18:	2201      	movs	r2, #1
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	f040 8164 	bne.w	80030fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d00b      	beq.n	8002e56 <HAL_GPIO_Init+0x5e>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d007      	beq.n	8002e56 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e4a:	2b11      	cmp	r3, #17
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b12      	cmp	r3, #18
 8002e54:	d130      	bne.n	8002eb8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	2203      	movs	r2, #3
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 0201 	and.w	r2, r3, #1
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x100>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b12      	cmp	r3, #18
 8002ef6:	d123      	bne.n	8002f40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	08da      	lsrs	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3208      	adds	r2, #8
 8002f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	220f      	movs	r2, #15
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	08da      	lsrs	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3208      	adds	r2, #8
 8002f3a:	69b9      	ldr	r1, [r7, #24]
 8002f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0203 	and.w	r2, r3, #3
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80be 	beq.w	80030fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f82:	4b66      	ldr	r3, [pc, #408]	; (800311c <HAL_GPIO_Init+0x324>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	4a65      	ldr	r2, [pc, #404]	; (800311c <HAL_GPIO_Init+0x324>)
 8002f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8e:	4b63      	ldr	r3, [pc, #396]	; (800311c <HAL_GPIO_Init+0x324>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f9a:	4a61      	ldr	r2, [pc, #388]	; (8003120 <HAL_GPIO_Init+0x328>)
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	089b      	lsrs	r3, r3, #2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a58      	ldr	r2, [pc, #352]	; (8003124 <HAL_GPIO_Init+0x32c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d037      	beq.n	8003036 <HAL_GPIO_Init+0x23e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a57      	ldr	r2, [pc, #348]	; (8003128 <HAL_GPIO_Init+0x330>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d031      	beq.n	8003032 <HAL_GPIO_Init+0x23a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a56      	ldr	r2, [pc, #344]	; (800312c <HAL_GPIO_Init+0x334>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d02b      	beq.n	800302e <HAL_GPIO_Init+0x236>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a55      	ldr	r2, [pc, #340]	; (8003130 <HAL_GPIO_Init+0x338>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d025      	beq.n	800302a <HAL_GPIO_Init+0x232>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a54      	ldr	r2, [pc, #336]	; (8003134 <HAL_GPIO_Init+0x33c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01f      	beq.n	8003026 <HAL_GPIO_Init+0x22e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a53      	ldr	r2, [pc, #332]	; (8003138 <HAL_GPIO_Init+0x340>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d019      	beq.n	8003022 <HAL_GPIO_Init+0x22a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_GPIO_Init+0x344>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <HAL_GPIO_Init+0x226>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a51      	ldr	r2, [pc, #324]	; (8003140 <HAL_GPIO_Init+0x348>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00d      	beq.n	800301a <HAL_GPIO_Init+0x222>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a50      	ldr	r2, [pc, #320]	; (8003144 <HAL_GPIO_Init+0x34c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <HAL_GPIO_Init+0x21e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4f      	ldr	r2, [pc, #316]	; (8003148 <HAL_GPIO_Init+0x350>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_GPIO_Init+0x21a>
 800300e:	2309      	movs	r3, #9
 8003010:	e012      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003012:	230a      	movs	r3, #10
 8003014:	e010      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003016:	2308      	movs	r3, #8
 8003018:	e00e      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800301a:	2307      	movs	r3, #7
 800301c:	e00c      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800301e:	2306      	movs	r3, #6
 8003020:	e00a      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003022:	2305      	movs	r3, #5
 8003024:	e008      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003026:	2304      	movs	r3, #4
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800302a:	2303      	movs	r3, #3
 800302c:	e004      	b.n	8003038 <HAL_GPIO_Init+0x240>
 800302e:	2302      	movs	r3, #2
 8003030:	e002      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_GPIO_Init+0x240>
 8003036:	2300      	movs	r3, #0
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f002 0203 	and.w	r2, r2, #3
 800303e:	0092      	lsls	r2, r2, #2
 8003040:	4093      	lsls	r3, r2
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003048:	4935      	ldr	r1, [pc, #212]	; (8003120 <HAL_GPIO_Init+0x328>)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003056:	4b3d      	ldr	r3, [pc, #244]	; (800314c <HAL_GPIO_Init+0x354>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800307a:	4a34      	ldr	r2, [pc, #208]	; (800314c <HAL_GPIO_Init+0x354>)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003080:	4b32      	ldr	r3, [pc, #200]	; (800314c <HAL_GPIO_Init+0x354>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030a4:	4a29      	ldr	r2, [pc, #164]	; (800314c <HAL_GPIO_Init+0x354>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030aa:	4b28      	ldr	r3, [pc, #160]	; (800314c <HAL_GPIO_Init+0x354>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ce:	4a1f      	ldr	r2, [pc, #124]	; (800314c <HAL_GPIO_Init+0x354>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <HAL_GPIO_Init+0x354>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030f8:	4a14      	ldr	r2, [pc, #80]	; (800314c <HAL_GPIO_Init+0x354>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3301      	adds	r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b0f      	cmp	r3, #15
 8003108:	f67f ae86 	bls.w	8002e18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3724      	adds	r7, #36	; 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	40013800 	.word	0x40013800
 8003124:	40020000 	.word	0x40020000
 8003128:	40020400 	.word	0x40020400
 800312c:	40020800 	.word	0x40020800
 8003130:	40020c00 	.word	0x40020c00
 8003134:	40021000 	.word	0x40021000
 8003138:	40021400 	.word	0x40021400
 800313c:	40021800 	.word	0x40021800
 8003140:	40021c00 	.word	0x40021c00
 8003144:	40022000 	.word	0x40022000
 8003148:	40022400 	.word	0x40022400
 800314c:	40013c00 	.word	0x40013c00

08003150 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	e0d9      	b.n	8003320 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800316c:	2201      	movs	r2, #1
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	429a      	cmp	r2, r3
 8003184:	f040 80c9 	bne.w	800331a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003188:	4a6b      	ldr	r2, [pc, #428]	; (8003338 <HAL_GPIO_DeInit+0x1e8>)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	3302      	adds	r3, #2
 8003190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003194:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	220f      	movs	r2, #15
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	4013      	ands	r3, r2
 80031a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a63      	ldr	r2, [pc, #396]	; (800333c <HAL_GPIO_DeInit+0x1ec>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d037      	beq.n	8003222 <HAL_GPIO_DeInit+0xd2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a62      	ldr	r2, [pc, #392]	; (8003340 <HAL_GPIO_DeInit+0x1f0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d031      	beq.n	800321e <HAL_GPIO_DeInit+0xce>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a61      	ldr	r2, [pc, #388]	; (8003344 <HAL_GPIO_DeInit+0x1f4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d02b      	beq.n	800321a <HAL_GPIO_DeInit+0xca>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a60      	ldr	r2, [pc, #384]	; (8003348 <HAL_GPIO_DeInit+0x1f8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d025      	beq.n	8003216 <HAL_GPIO_DeInit+0xc6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a5f      	ldr	r2, [pc, #380]	; (800334c <HAL_GPIO_DeInit+0x1fc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01f      	beq.n	8003212 <HAL_GPIO_DeInit+0xc2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a5e      	ldr	r2, [pc, #376]	; (8003350 <HAL_GPIO_DeInit+0x200>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d019      	beq.n	800320e <HAL_GPIO_DeInit+0xbe>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a5d      	ldr	r2, [pc, #372]	; (8003354 <HAL_GPIO_DeInit+0x204>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_GPIO_DeInit+0xba>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a5c      	ldr	r2, [pc, #368]	; (8003358 <HAL_GPIO_DeInit+0x208>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00d      	beq.n	8003206 <HAL_GPIO_DeInit+0xb6>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a5b      	ldr	r2, [pc, #364]	; (800335c <HAL_GPIO_DeInit+0x20c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_DeInit+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a5a      	ldr	r2, [pc, #360]	; (8003360 <HAL_GPIO_DeInit+0x210>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_GPIO_DeInit+0xae>
 80031fa:	2309      	movs	r3, #9
 80031fc:	e012      	b.n	8003224 <HAL_GPIO_DeInit+0xd4>
 80031fe:	230a      	movs	r3, #10
 8003200:	e010      	b.n	8003224 <HAL_GPIO_DeInit+0xd4>
 8003202:	2308      	movs	r3, #8
 8003204:	e00e      	b.n	8003224 <HAL_GPIO_DeInit+0xd4>
 8003206:	2307      	movs	r3, #7
 8003208:	e00c      	b.n	8003224 <HAL_GPIO_DeInit+0xd4>
 800320a:	2306      	movs	r3, #6
 800320c:	e00a      	b.n	8003224 <HAL_GPIO_DeInit+0xd4>
 800320e:	2305      	movs	r3, #5
 8003210:	e008      	b.n	8003224 <HAL_GPIO_DeInit+0xd4>
 8003212:	2304      	movs	r3, #4
 8003214:	e006      	b.n	8003224 <HAL_GPIO_DeInit+0xd4>
 8003216:	2303      	movs	r3, #3
 8003218:	e004      	b.n	8003224 <HAL_GPIO_DeInit+0xd4>
 800321a:	2302      	movs	r3, #2
 800321c:	e002      	b.n	8003224 <HAL_GPIO_DeInit+0xd4>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_GPIO_DeInit+0xd4>
 8003222:	2300      	movs	r3, #0
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	f002 0203 	and.w	r2, r2, #3
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	4093      	lsls	r3, r2
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	429a      	cmp	r2, r3
 8003232:	d132      	bne.n	800329a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003234:	4b4b      	ldr	r3, [pc, #300]	; (8003364 <HAL_GPIO_DeInit+0x214>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	43db      	mvns	r3, r3
 800323c:	4949      	ldr	r1, [pc, #292]	; (8003364 <HAL_GPIO_DeInit+0x214>)
 800323e:	4013      	ands	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003242:	4b48      	ldr	r3, [pc, #288]	; (8003364 <HAL_GPIO_DeInit+0x214>)
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	43db      	mvns	r3, r3
 800324a:	4946      	ldr	r1, [pc, #280]	; (8003364 <HAL_GPIO_DeInit+0x214>)
 800324c:	4013      	ands	r3, r2
 800324e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003250:	4b44      	ldr	r3, [pc, #272]	; (8003364 <HAL_GPIO_DeInit+0x214>)
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43db      	mvns	r3, r3
 8003258:	4942      	ldr	r1, [pc, #264]	; (8003364 <HAL_GPIO_DeInit+0x214>)
 800325a:	4013      	ands	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800325e:	4b41      	ldr	r3, [pc, #260]	; (8003364 <HAL_GPIO_DeInit+0x214>)
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	43db      	mvns	r3, r3
 8003266:	493f      	ldr	r1, [pc, #252]	; (8003364 <HAL_GPIO_DeInit+0x214>)
 8003268:	4013      	ands	r3, r2
 800326a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	220f      	movs	r2, #15
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800327c:	4a2e      	ldr	r2, [pc, #184]	; (8003338 <HAL_GPIO_DeInit+0x1e8>)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	3302      	adds	r3, #2
 8003284:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	43da      	mvns	r2, r3
 800328c:	482a      	ldr	r0, [pc, #168]	; (8003338 <HAL_GPIO_DeInit+0x1e8>)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	089b      	lsrs	r3, r3, #2
 8003292:	400a      	ands	r2, r1
 8003294:	3302      	adds	r3, #2
 8003296:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2103      	movs	r1, #3
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	401a      	ands	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	08da      	lsrs	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3208      	adds	r2, #8
 80032b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	220f      	movs	r2, #15
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	08d2      	lsrs	r2, r2, #3
 80032d0:	4019      	ands	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3208      	adds	r2, #8
 80032d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2103      	movs	r1, #3
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	401a      	ands	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	2101      	movs	r1, #1
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	401a      	ands	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	2103      	movs	r1, #3
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	401a      	ands	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3301      	adds	r3, #1
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b0f      	cmp	r3, #15
 8003324:	f67f af22 	bls.w	800316c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40013800 	.word	0x40013800
 800333c:	40020000 	.word	0x40020000
 8003340:	40020400 	.word	0x40020400
 8003344:	40020800 	.word	0x40020800
 8003348:	40020c00 	.word	0x40020c00
 800334c:	40021000 	.word	0x40021000
 8003350:	40021400 	.word	0x40021400
 8003354:	40021800 	.word	0x40021800
 8003358:	40021c00 	.word	0x40021c00
 800335c:	40022000 	.word	0x40022000
 8003360:	40022400 	.word	0x40022400
 8003364:	40013c00 	.word	0x40013c00

08003368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]
 8003374:	4613      	mov	r3, r2
 8003376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003378:	787b      	ldrb	r3, [r7, #1]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003384:	e003      	b.n	800338e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003386:	887b      	ldrh	r3, [r7, #2]
 8003388:	041a      	lsls	r2, r3, #16
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	619a      	str	r2, [r3, #24]
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0bf      	b.n	800352e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8ba 	bl	800353c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80033de:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6999      	ldr	r1, [r3, #24]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033f4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6899      	ldr	r1, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <HAL_LTDC_Init+0x19c>)
 8003410:	400b      	ands	r3, r1
 8003412:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6899      	ldr	r1, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68d9      	ldr	r1, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b3e      	ldr	r3, [pc, #248]	; (8003538 <HAL_LTDC_Init+0x19c>)
 800343e:	400b      	ands	r3, r1
 8003440:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68d9      	ldr	r1, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1a      	ldr	r2, [r3, #32]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6919      	ldr	r1, [r3, #16]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b33      	ldr	r3, [pc, #204]	; (8003538 <HAL_LTDC_Init+0x19c>)
 800346c:	400b      	ands	r3, r1
 800346e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6919      	ldr	r1, [r3, #16]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6959      	ldr	r1, [r3, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	4b27      	ldr	r3, [pc, #156]	; (8003538 <HAL_LTDC_Init+0x19c>)
 800349a:	400b      	ands	r3, r1
 800349c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	041b      	lsls	r3, r3, #16
 80034a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6959      	ldr	r1, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0206 	orr.w	r2, r2, #6
 800350a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	f000f800 	.word	0xf000f800

0800353c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003550:	b5b0      	push	{r4, r5, r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_LTDC_ConfigLayer+0x1a>
 8003566:	2302      	movs	r3, #2
 8003568:	e02c      	b.n	80035c4 <HAL_LTDC_ConfigLayer+0x74>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2202      	movs	r2, #2
 8003576:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2134      	movs	r1, #52	; 0x34
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4614      	mov	r4, r2
 800358e:	461d      	mov	r5, r3
 8003590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800359a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f847 	bl	8003638 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2201      	movs	r2, #1
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bdb0      	pop	{r4, r5, r7, pc}

080035cc <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_LTDC_SetAddress+0x1a>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e024      	b.n	8003630 <HAL_LTDC_SetAddress+0x64>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2234      	movs	r2, #52	; 0x34
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	3338      	adds	r3, #56	; 0x38
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6979      	ldr	r1, [r7, #20]
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f811 	bl	8003638 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2201      	movs	r2, #1
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003638:	b480      	push	{r7}
 800363a:	b089      	sub	sp, #36	; 0x24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	0c1b      	lsrs	r3, r3, #16
 8003650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003654:	4413      	add	r3, r2
 8003656:	041b      	lsls	r3, r3, #16
 8003658:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	01db      	lsls	r3, r3, #7
 8003664:	4413      	add	r3, r2
 8003666:	3384      	adds	r3, #132	; 0x84
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	4611      	mov	r1, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	01d2      	lsls	r2, r2, #7
 8003674:	440a      	add	r2, r1
 8003676:	3284      	adds	r2, #132	; 0x84
 8003678:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800367c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	0c1b      	lsrs	r3, r3, #16
 800368a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368e:	4413      	add	r3, r2
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4619      	mov	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	01db      	lsls	r3, r3, #7
 800369c:	440b      	add	r3, r1
 800369e:	3384      	adds	r3, #132	; 0x84
 80036a0:	4619      	mov	r1, r3
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b6:	4413      	add	r3, r2
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	01db      	lsls	r3, r3, #7
 80036c6:	4413      	add	r3, r2
 80036c8:	3384      	adds	r3, #132	; 0x84
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	4611      	mov	r1, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	01d2      	lsls	r2, r2, #7
 80036d6:	440a      	add	r2, r1
 80036d8:	3284      	adds	r2, #132	; 0x84
 80036da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80036de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ee:	4413      	add	r3, r2
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4619      	mov	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	01db      	lsls	r3, r3, #7
 80036fc:	440b      	add	r3, r1
 80036fe:	3384      	adds	r3, #132	; 0x84
 8003700:	4619      	mov	r1, r3
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4313      	orrs	r3, r2
 8003706:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	01db      	lsls	r3, r3, #7
 8003712:	4413      	add	r3, r2
 8003714:	3384      	adds	r3, #132	; 0x84
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	4611      	mov	r1, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	01d2      	lsls	r2, r2, #7
 8003722:	440a      	add	r2, r1
 8003724:	3284      	adds	r2, #132	; 0x84
 8003726:	f023 0307 	bic.w	r3, r3, #7
 800372a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	01db      	lsls	r3, r3, #7
 8003736:	4413      	add	r3, r2
 8003738:	3384      	adds	r3, #132	; 0x84
 800373a:	461a      	mov	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003748:	021b      	lsls	r3, r3, #8
 800374a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003752:	041b      	lsls	r3, r3, #16
 8003754:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	061b      	lsls	r3, r3, #24
 800375c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	01db      	lsls	r3, r3, #7
 8003768:	4413      	add	r3, r2
 800376a:	3384      	adds	r3, #132	; 0x84
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	01db      	lsls	r3, r3, #7
 8003778:	4413      	add	r3, r2
 800377a:	3384      	adds	r3, #132	; 0x84
 800377c:	461a      	mov	r2, r3
 800377e:	2300      	movs	r3, #0
 8003780:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003788:	461a      	mov	r2, r3
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	431a      	orrs	r2, r3
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	431a      	orrs	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4619      	mov	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	01db      	lsls	r3, r3, #7
 800379c:	440b      	add	r3, r1
 800379e:	3384      	adds	r3, #132	; 0x84
 80037a0:	4619      	mov	r1, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	01db      	lsls	r3, r3, #7
 80037b2:	4413      	add	r3, r2
 80037b4:	3384      	adds	r3, #132	; 0x84
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	4611      	mov	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	01d2      	lsls	r2, r2, #7
 80037c2:	440a      	add	r2, r1
 80037c4:	3284      	adds	r2, #132	; 0x84
 80037c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	01db      	lsls	r3, r3, #7
 80037d6:	4413      	add	r3, r2
 80037d8:	3384      	adds	r3, #132	; 0x84
 80037da:	461a      	mov	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	01db      	lsls	r3, r3, #7
 80037ec:	4413      	add	r3, r2
 80037ee:	3384      	adds	r3, #132	; 0x84
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4619      	mov	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	01db      	lsls	r3, r3, #7
 80037fc:	440b      	add	r3, r1
 80037fe:	3384      	adds	r3, #132	; 0x84
 8003800:	4619      	mov	r1, r3
 8003802:	4b58      	ldr	r3, [pc, #352]	; (8003964 <LTDC_SetConfig+0x32c>)
 8003804:	4013      	ands	r3, r2
 8003806:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	68f9      	ldr	r1, [r7, #12]
 8003812:	6809      	ldr	r1, [r1, #0]
 8003814:	4608      	mov	r0, r1
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	01c9      	lsls	r1, r1, #7
 800381a:	4401      	add	r1, r0
 800381c:	3184      	adds	r1, #132	; 0x84
 800381e:	4313      	orrs	r3, r2
 8003820:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	01db      	lsls	r3, r3, #7
 800382c:	4413      	add	r3, r2
 800382e:	3384      	adds	r3, #132	; 0x84
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	01db      	lsls	r3, r3, #7
 800383c:	4413      	add	r3, r2
 800383e:	3384      	adds	r3, #132	; 0x84
 8003840:	461a      	mov	r2, r3
 8003842:	2300      	movs	r3, #0
 8003844:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	01db      	lsls	r3, r3, #7
 8003850:	4413      	add	r3, r2
 8003852:	3384      	adds	r3, #132	; 0x84
 8003854:	461a      	mov	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003864:	2304      	movs	r3, #4
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	e01b      	b.n	80038a2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d102      	bne.n	8003878 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003872:	2303      	movs	r3, #3
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	e014      	b.n	80038a2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b04      	cmp	r3, #4
 800387e:	d00b      	beq.n	8003898 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003884:	2b02      	cmp	r3, #2
 8003886:	d007      	beq.n	8003898 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800388c:	2b03      	cmp	r3, #3
 800388e:	d003      	beq.n	8003898 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003894:	2b07      	cmp	r3, #7
 8003896:	d102      	bne.n	800389e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003898:	2302      	movs	r3, #2
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	e001      	b.n	80038a2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800389e:	2301      	movs	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	01db      	lsls	r3, r3, #7
 80038ac:	4413      	add	r3, r2
 80038ae:	3384      	adds	r3, #132	; 0x84
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	4611      	mov	r1, r2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	01d2      	lsls	r2, r2, #7
 80038bc:	440a      	add	r2, r1
 80038be:	3284      	adds	r2, #132	; 0x84
 80038c0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80038c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	fb02 f303 	mul.w	r3, r2, r3
 80038d0:	041a      	lsls	r2, r3, #16
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	6859      	ldr	r1, [r3, #4]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	1acb      	subs	r3, r1, r3
 80038dc:	69f9      	ldr	r1, [r7, #28]
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	3303      	adds	r3, #3
 80038e4:	68f9      	ldr	r1, [r7, #12]
 80038e6:	6809      	ldr	r1, [r1, #0]
 80038e8:	4608      	mov	r0, r1
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	01c9      	lsls	r1, r1, #7
 80038ee:	4401      	add	r1, r0
 80038f0:	3184      	adds	r1, #132	; 0x84
 80038f2:	4313      	orrs	r3, r2
 80038f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	01db      	lsls	r3, r3, #7
 8003900:	4413      	add	r3, r2
 8003902:	3384      	adds	r3, #132	; 0x84
 8003904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4619      	mov	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	01db      	lsls	r3, r3, #7
 8003910:	440b      	add	r3, r1
 8003912:	3384      	adds	r3, #132	; 0x84
 8003914:	4619      	mov	r1, r3
 8003916:	4b14      	ldr	r3, [pc, #80]	; (8003968 <LTDC_SetConfig+0x330>)
 8003918:	4013      	ands	r3, r2
 800391a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	01db      	lsls	r3, r3, #7
 8003926:	4413      	add	r3, r2
 8003928:	3384      	adds	r3, #132	; 0x84
 800392a:	461a      	mov	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	01db      	lsls	r3, r3, #7
 800393c:	4413      	add	r3, r2
 800393e:	3384      	adds	r3, #132	; 0x84
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	4611      	mov	r1, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	01d2      	lsls	r2, r2, #7
 800394c:	440a      	add	r2, r1
 800394e:	3284      	adds	r2, #132	; 0x84
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6013      	str	r3, [r2, #0]
}
 8003956:	bf00      	nop
 8003958:	3724      	adds	r7, #36	; 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	fffff8f8 	.word	0xfffff8f8
 8003968:	fffff800 	.word	0xfffff800

0800396c <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800397e:	2200      	movs	r2, #0
 8003980:	e001      	b.n	8003986 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8003982:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d102      	bne.n	8003998 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8003992:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003996:	e000      	b.n	800399a <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8003998:	2200      	movs	r2, #0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80039a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039aa:	e000      	b.n	80039ae <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80039ac:	2200      	movs	r2, #0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	1e5a      	subs	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	4413      	add	r3, r2
 80039c6:	1e5a      	subs	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	441a      	add	r2, r3
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	4413      	add	r3, r2
 80039dc:	1e5a      	subs	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	441a      	add	r2, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	441a      	add	r2, r3
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	4413      	add	r3, r2
 80039f8:	1e5a      	subs	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1a:	6013      	str	r3, [r2, #0]
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40007000 	.word	0x40007000

08003a2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6413      	str	r3, [r2, #64]	; 0x40
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a5a:	f7fe fb79 	bl	8002150 <HAL_GetTick>
 8003a5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a60:	e009      	b.n	8003a76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a62:	f7fe fb75 	bl	8002150 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a70:	d901      	bls.n	8003a76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e022      	b.n	8003abc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a82:	d1ee      	bne.n	8003a62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0f      	ldr	r2, [pc, #60]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a90:	f7fe fb5e 	bl	8002150 <HAL_GetTick>
 8003a94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a96:	e009      	b.n	8003aac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a98:	f7fe fb5a 	bl	8002150 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aa6:	d901      	bls.n	8003aac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e007      	b.n	8003abc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ab8:	d1ee      	bne.n	8003a98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40007000 	.word	0x40007000

08003acc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e29b      	b.n	800401a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8087 	beq.w	8003bfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af0:	4b96      	ldr	r3, [pc, #600]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d00c      	beq.n	8003b16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afc:	4b93      	ldr	r3, [pc, #588]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 030c 	and.w	r3, r3, #12
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d112      	bne.n	8003b2e <HAL_RCC_OscConfig+0x62>
 8003b08:	4b90      	ldr	r3, [pc, #576]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b14:	d10b      	bne.n	8003b2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b16:	4b8d      	ldr	r3, [pc, #564]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d06c      	beq.n	8003bfc <HAL_RCC_OscConfig+0x130>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d168      	bne.n	8003bfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e275      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b36:	d106      	bne.n	8003b46 <HAL_RCC_OscConfig+0x7a>
 8003b38:	4b84      	ldr	r3, [pc, #528]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a83      	ldr	r2, [pc, #524]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e02e      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x9c>
 8003b4e:	4b7f      	ldr	r3, [pc, #508]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a7e      	ldr	r2, [pc, #504]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b7c      	ldr	r3, [pc, #496]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a7b      	ldr	r2, [pc, #492]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e01d      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0xc0>
 8003b72:	4b76      	ldr	r3, [pc, #472]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a75      	ldr	r2, [pc, #468]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b73      	ldr	r3, [pc, #460]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a72      	ldr	r2, [pc, #456]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCC_OscConfig+0xd8>
 8003b8c:	4b6f      	ldr	r3, [pc, #444]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6e      	ldr	r2, [pc, #440]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b6c      	ldr	r3, [pc, #432]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a6b      	ldr	r2, [pc, #428]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fe fad0 	bl	8002150 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fe facc 	bl	8002150 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e229      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b61      	ldr	r3, [pc, #388]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xe8>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fabc 	bl	8002150 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fe fab8 	bl	8002150 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e215      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bee:	4b57      	ldr	r3, [pc, #348]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x110>
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d069      	beq.n	8003cde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c0a:	4b50      	ldr	r3, [pc, #320]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c16:	4b4d      	ldr	r3, [pc, #308]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d11c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x190>
 8003c22:	4b4a      	ldr	r3, [pc, #296]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d116      	bne.n	8003c5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2e:	4b47      	ldr	r3, [pc, #284]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_RCC_OscConfig+0x17a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e1e9      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c46:	4b41      	ldr	r3, [pc, #260]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	493d      	ldr	r1, [pc, #244]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5a:	e040      	b.n	8003cde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d023      	beq.n	8003cac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c64:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a38      	ldr	r2, [pc, #224]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe fa6e 	bl	8002150 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c78:	f7fe fa6a 	bl	8002150 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e1c7      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8a:	4b30      	ldr	r3, [pc, #192]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c96:	4b2d      	ldr	r3, [pc, #180]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4929      	ldr	r1, [pc, #164]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]
 8003caa:	e018      	b.n	8003cde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fe fa4a 	bl	8002150 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc0:	f7fe fa46 	bl	8002150 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e1a3      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd2:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d038      	beq.n	8003d5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d019      	beq.n	8003d26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf2:	4b16      	ldr	r3, [pc, #88]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfe:	f7fe fa27 	bl	8002150 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d06:	f7fe fa23 	bl	8002150 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e180      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x23a>
 8003d24:	e01a      	b.n	8003d5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2a:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <HAL_RCC_OscConfig+0x280>)
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d32:	f7fe fa0d 	bl	8002150 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3a:	f7fe fa09 	bl	8002150 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d903      	bls.n	8003d50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e166      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
 8003d4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d50:	4b92      	ldr	r3, [pc, #584]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1ee      	bne.n	8003d3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a4 	beq.w	8003eb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6a:	4b8c      	ldr	r3, [pc, #560]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10d      	bne.n	8003d92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	4b89      	ldr	r3, [pc, #548]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	4a88      	ldr	r2, [pc, #544]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d80:	6413      	str	r3, [r2, #64]	; 0x40
 8003d82:	4b86      	ldr	r3, [pc, #536]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d92:	4b83      	ldr	r3, [pc, #524]	; (8003fa0 <HAL_RCC_OscConfig+0x4d4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d118      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d9e:	4b80      	ldr	r3, [pc, #512]	; (8003fa0 <HAL_RCC_OscConfig+0x4d4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a7f      	ldr	r2, [pc, #508]	; (8003fa0 <HAL_RCC_OscConfig+0x4d4>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003daa:	f7fe f9d1 	bl	8002150 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db2:	f7fe f9cd 	bl	8002150 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b64      	cmp	r3, #100	; 0x64
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e12a      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc4:	4b76      	ldr	r3, [pc, #472]	; (8003fa0 <HAL_RCC_OscConfig+0x4d4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d106      	bne.n	8003de6 <HAL_RCC_OscConfig+0x31a>
 8003dd8:	4b70      	ldr	r3, [pc, #448]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4a6f      	ldr	r2, [pc, #444]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	; 0x70
 8003de4:	e02d      	b.n	8003e42 <HAL_RCC_OscConfig+0x376>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x33c>
 8003dee:	4b6b      	ldr	r3, [pc, #428]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	4a6a      	ldr	r2, [pc, #424]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfa:	4b68      	ldr	r3, [pc, #416]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a67      	ldr	r2, [pc, #412]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
 8003e06:	e01c      	b.n	8003e42 <HAL_RCC_OscConfig+0x376>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d10c      	bne.n	8003e2a <HAL_RCC_OscConfig+0x35e>
 8003e10:	4b62      	ldr	r3, [pc, #392]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	4a61      	ldr	r2, [pc, #388]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1c:	4b5f      	ldr	r3, [pc, #380]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	4a5e      	ldr	r2, [pc, #376]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	6713      	str	r3, [r2, #112]	; 0x70
 8003e28:	e00b      	b.n	8003e42 <HAL_RCC_OscConfig+0x376>
 8003e2a:	4b5c      	ldr	r3, [pc, #368]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a5b      	ldr	r2, [pc, #364]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
 8003e36:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	4a58      	ldr	r2, [pc, #352]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d015      	beq.n	8003e76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fe f981 	bl	8002150 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fe f97d 	bl	8002150 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e0d8      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	4b4c      	ldr	r3, [pc, #304]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ee      	beq.n	8003e52 <HAL_RCC_OscConfig+0x386>
 8003e74:	e014      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e76:	f7fe f96b 	bl	8002150 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7c:	e00a      	b.n	8003e94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fe f967 	bl	8002150 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e0c2      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e94:	4b41      	ldr	r3, [pc, #260]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1ee      	bne.n	8003e7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea6:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a3c      	ldr	r2, [pc, #240]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80ae 	beq.w	8004018 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ebc:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d06d      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d14b      	bne.n	8003f68 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed0:	4b32      	ldr	r3, [pc, #200]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a31      	ldr	r2, [pc, #196]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fe f938 	bl	8002150 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fe f934 	bl	8002150 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e091      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	019b      	lsls	r3, r3, #6
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	071b      	lsls	r3, r3, #28
 8003f2e:	491b      	ldr	r1, [pc, #108]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f34:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fe f906 	bl	8002150 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fe f902 	bl	8002150 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e05f      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x47c>
 8003f66:	e057      	b.n	8004018 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0b      	ldr	r2, [pc, #44]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fe f8ec 	bl	8002150 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fe f8e8 	bl	8002150 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e045      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <HAL_RCC_OscConfig+0x4d0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x4b0>
 8003f9a:	e03d      	b.n	8004018 <HAL_RCC_OscConfig+0x54c>
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fa4:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <HAL_RCC_OscConfig+0x558>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d030      	beq.n	8004014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d129      	bne.n	8004014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d122      	bne.n	8004014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d119      	bne.n	8004014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	3b01      	subs	r3, #1
 8003fee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d10f      	bne.n	8004014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d107      	bne.n	8004014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800

08004028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0d0      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004040:	4b6a      	ldr	r3, [pc, #424]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d910      	bls.n	8004070 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b67      	ldr	r3, [pc, #412]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 020f 	bic.w	r2, r3, #15
 8004056:	4965      	ldr	r1, [pc, #404]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800405e:	4b63      	ldr	r3, [pc, #396]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0b8      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004088:	4b59      	ldr	r3, [pc, #356]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	4a58      	ldr	r2, [pc, #352]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 800408e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004092:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040a0:	4b53      	ldr	r3, [pc, #332]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a52      	ldr	r2, [pc, #328]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ac:	4b50      	ldr	r3, [pc, #320]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	494d      	ldr	r1, [pc, #308]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d040      	beq.n	800414c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	4b47      	ldr	r3, [pc, #284]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d115      	bne.n	800410a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e07f      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ea:	4b41      	ldr	r3, [pc, #260]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e073      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fa:	4b3d      	ldr	r3, [pc, #244]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e06b      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410a:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 0203 	bic.w	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4936      	ldr	r1, [pc, #216]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800411c:	f7fe f818 	bl	8002150 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	e00a      	b.n	800413a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7fe f814 	bl	8002150 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e053      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	4b2d      	ldr	r3, [pc, #180]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 020c 	and.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	429a      	cmp	r2, r3
 800414a:	d1eb      	bne.n	8004124 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800414c:	4b27      	ldr	r3, [pc, #156]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d210      	bcs.n	800417c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 020f 	bic.w	r2, r3, #15
 8004162:	4922      	ldr	r1, [pc, #136]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b20      	ldr	r3, [pc, #128]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e032      	b.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004188:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	4916      	ldr	r1, [pc, #88]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041a6:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	490e      	ldr	r1, [pc, #56]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ba:	f000 f821 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 80041be:	4602      	mov	r2, r0
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	091b      	lsrs	r3, r3, #4
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	490a      	ldr	r1, [pc, #40]	; (80041f4 <HAL_RCC_ClockConfig+0x1cc>)
 80041cc:	5ccb      	ldrb	r3, [r1, r3]
 80041ce:	fa22 f303 	lsr.w	r3, r2, r3
 80041d2:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <HAL_RCC_ClockConfig+0x1d0>)
 80041d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041d6:	4b09      	ldr	r3, [pc, #36]	; (80041fc <HAL_RCC_ClockConfig+0x1d4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fd ff74 	bl	80020c8 <HAL_InitTick>

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40023c00 	.word	0x40023c00
 80041f0:	40023800 	.word	0x40023800
 80041f4:	08008b30 	.word	0x08008b30
 80041f8:	20000000 	.word	0x20000000
 80041fc:	20000004 	.word	0x20000004

08004200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004200:	b5b0      	push	{r4, r5, r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004206:	2100      	movs	r1, #0
 8004208:	6079      	str	r1, [r7, #4]
 800420a:	2100      	movs	r1, #0
 800420c:	60f9      	str	r1, [r7, #12]
 800420e:	2100      	movs	r1, #0
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004212:	2100      	movs	r1, #0
 8004214:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004216:	4952      	ldr	r1, [pc, #328]	; (8004360 <HAL_RCC_GetSysClockFreq+0x160>)
 8004218:	6889      	ldr	r1, [r1, #8]
 800421a:	f001 010c 	and.w	r1, r1, #12
 800421e:	2908      	cmp	r1, #8
 8004220:	d00d      	beq.n	800423e <HAL_RCC_GetSysClockFreq+0x3e>
 8004222:	2908      	cmp	r1, #8
 8004224:	f200 8094 	bhi.w	8004350 <HAL_RCC_GetSysClockFreq+0x150>
 8004228:	2900      	cmp	r1, #0
 800422a:	d002      	beq.n	8004232 <HAL_RCC_GetSysClockFreq+0x32>
 800422c:	2904      	cmp	r1, #4
 800422e:	d003      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x38>
 8004230:	e08e      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004232:	4b4c      	ldr	r3, [pc, #304]	; (8004364 <HAL_RCC_GetSysClockFreq+0x164>)
 8004234:	60bb      	str	r3, [r7, #8]
      break;
 8004236:	e08e      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004238:	4b4b      	ldr	r3, [pc, #300]	; (8004368 <HAL_RCC_GetSysClockFreq+0x168>)
 800423a:	60bb      	str	r3, [r7, #8]
      break;
 800423c:	e08b      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800423e:	4948      	ldr	r1, [pc, #288]	; (8004360 <HAL_RCC_GetSysClockFreq+0x160>)
 8004240:	6849      	ldr	r1, [r1, #4]
 8004242:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004246:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004248:	4945      	ldr	r1, [pc, #276]	; (8004360 <HAL_RCC_GetSysClockFreq+0x160>)
 800424a:	6849      	ldr	r1, [r1, #4]
 800424c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004250:	2900      	cmp	r1, #0
 8004252:	d024      	beq.n	800429e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004254:	4942      	ldr	r1, [pc, #264]	; (8004360 <HAL_RCC_GetSysClockFreq+0x160>)
 8004256:	6849      	ldr	r1, [r1, #4]
 8004258:	0989      	lsrs	r1, r1, #6
 800425a:	4608      	mov	r0, r1
 800425c:	f04f 0100 	mov.w	r1, #0
 8004260:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004264:	f04f 0500 	mov.w	r5, #0
 8004268:	ea00 0204 	and.w	r2, r0, r4
 800426c:	ea01 0305 	and.w	r3, r1, r5
 8004270:	493d      	ldr	r1, [pc, #244]	; (8004368 <HAL_RCC_GetSysClockFreq+0x168>)
 8004272:	fb01 f003 	mul.w	r0, r1, r3
 8004276:	2100      	movs	r1, #0
 8004278:	fb01 f102 	mul.w	r1, r1, r2
 800427c:	1844      	adds	r4, r0, r1
 800427e:	493a      	ldr	r1, [pc, #232]	; (8004368 <HAL_RCC_GetSysClockFreq+0x168>)
 8004280:	fba2 0101 	umull	r0, r1, r2, r1
 8004284:	1863      	adds	r3, r4, r1
 8004286:	4619      	mov	r1, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	461a      	mov	r2, r3
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	f7fb ffda 	bl	8000248 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4613      	mov	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	e04a      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800429e:	4b30      	ldr	r3, [pc, #192]	; (8004360 <HAL_RCC_GetSysClockFreq+0x160>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	099b      	lsrs	r3, r3, #6
 80042a4:	461a      	mov	r2, r3
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042ae:	f04f 0100 	mov.w	r1, #0
 80042b2:	ea02 0400 	and.w	r4, r2, r0
 80042b6:	ea03 0501 	and.w	r5, r3, r1
 80042ba:	4620      	mov	r0, r4
 80042bc:	4629      	mov	r1, r5
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	014b      	lsls	r3, r1, #5
 80042c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042cc:	0142      	lsls	r2, r0, #5
 80042ce:	4610      	mov	r0, r2
 80042d0:	4619      	mov	r1, r3
 80042d2:	1b00      	subs	r0, r0, r4
 80042d4:	eb61 0105 	sbc.w	r1, r1, r5
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	018b      	lsls	r3, r1, #6
 80042e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042e6:	0182      	lsls	r2, r0, #6
 80042e8:	1a12      	subs	r2, r2, r0
 80042ea:	eb63 0301 	sbc.w	r3, r3, r1
 80042ee:	f04f 0000 	mov.w	r0, #0
 80042f2:	f04f 0100 	mov.w	r1, #0
 80042f6:	00d9      	lsls	r1, r3, #3
 80042f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042fc:	00d0      	lsls	r0, r2, #3
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	1912      	adds	r2, r2, r4
 8004304:	eb45 0303 	adc.w	r3, r5, r3
 8004308:	f04f 0000 	mov.w	r0, #0
 800430c:	f04f 0100 	mov.w	r1, #0
 8004310:	0299      	lsls	r1, r3, #10
 8004312:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004316:	0290      	lsls	r0, r2, #10
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	461a      	mov	r2, r3
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	f7fb ff8e 	bl	8000248 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4613      	mov	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <HAL_RCC_GetSysClockFreq+0x160>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	3301      	adds	r3, #1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	60bb      	str	r3, [r7, #8]
      break;
 800434e:	e002      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004350:	4b04      	ldr	r3, [pc, #16]	; (8004364 <HAL_RCC_GetSysClockFreq+0x164>)
 8004352:	60bb      	str	r3, [r7, #8]
      break;
 8004354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004356:	68bb      	ldr	r3, [r7, #8]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bdb0      	pop	{r4, r5, r7, pc}
 8004360:	40023800 	.word	0x40023800
 8004364:	00f42400 	.word	0x00f42400
 8004368:	017d7840 	.word	0x017d7840

0800436c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_RCC_GetHCLKFreq+0x14>)
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000000 	.word	0x20000000

08004384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004388:	f7ff fff0 	bl	800436c <HAL_RCC_GetHCLKFreq>
 800438c:	4602      	mov	r2, r0
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	0a9b      	lsrs	r3, r3, #10
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	4903      	ldr	r1, [pc, #12]	; (80043a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40023800 	.word	0x40023800
 80043a8:	08008b40 	.word	0x08008b40

080043ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043b0:	f7ff ffdc 	bl	800436c <HAL_RCC_GetHCLKFreq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	0b5b      	lsrs	r3, r3, #13
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	4903      	ldr	r1, [pc, #12]	; (80043d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043c2:	5ccb      	ldrb	r3, [r1, r3]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40023800 	.word	0x40023800
 80043d0:	08008b40 	.word	0x08008b40

080043d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d012      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043fc:	4b69      	ldr	r3, [pc, #420]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	4a68      	ldr	r2, [pc, #416]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004406:	6093      	str	r3, [r2, #8]
 8004408:	4b66      	ldr	r3, [pc, #408]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004410:	4964      	ldr	r1, [pc, #400]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d017      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800442e:	4b5d      	ldr	r3, [pc, #372]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	4959      	ldr	r1, [pc, #356]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800444c:	d101      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800445a:	2301      	movs	r3, #1
 800445c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d017      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800446a:	4b4e      	ldr	r3, [pc, #312]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004470:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	494a      	ldr	r1, [pc, #296]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004488:	d101      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800448a:	2301      	movs	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004496:	2301      	movs	r3, #1
 8004498:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 808b 	beq.w	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044b8:	4b3a      	ldr	r3, [pc, #232]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	4a39      	ldr	r2, [pc, #228]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c2:	6413      	str	r3, [r2, #64]	; 0x40
 80044c4:	4b37      	ldr	r3, [pc, #220]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044d0:	4b35      	ldr	r3, [pc, #212]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a34      	ldr	r2, [pc, #208]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044dc:	f7fd fe38 	bl	8002150 <HAL_GetTick>
 80044e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e4:	f7fd fe34 	bl	8002150 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e38f      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044f6:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004502:	4b28      	ldr	r3, [pc, #160]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d035      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	429a      	cmp	r2, r3
 800451e:	d02e      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004520:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004528:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800452a:	4b1e      	ldr	r3, [pc, #120]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	4a1d      	ldr	r2, [pc, #116]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004534:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004536:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	4a1a      	ldr	r2, [pc, #104]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004540:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004542:	4a18      	ldr	r2, [pc, #96]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004548:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d114      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fd fdfc 	bl	8002150 <HAL_GetTick>
 8004558:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455a:	e00a      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800455c:	f7fd fdf8 	bl	8002150 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e351      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0ee      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458a:	d111      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004598:	4b04      	ldr	r3, [pc, #16]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800459a:	400b      	ands	r3, r1
 800459c:	4901      	ldr	r1, [pc, #4]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]
 80045a2:	e00b      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40007000 	.word	0x40007000
 80045ac:	0ffffcff 	.word	0x0ffffcff
 80045b0:	4bb3      	ldr	r3, [pc, #716]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4ab2      	ldr	r2, [pc, #712]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045ba:	6093      	str	r3, [r2, #8]
 80045bc:	4bb0      	ldr	r3, [pc, #704]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c8:	49ad      	ldr	r1, [pc, #692]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d010      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045da:	4ba9      	ldr	r3, [pc, #676]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e0:	4aa7      	ldr	r2, [pc, #668]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045ea:	4ba5      	ldr	r3, [pc, #660]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	49a2      	ldr	r1, [pc, #648]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004608:	4b9d      	ldr	r3, [pc, #628]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004616:	499a      	ldr	r1, [pc, #616]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800462a:	4b95      	ldr	r3, [pc, #596]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004630:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004638:	4991      	ldr	r1, [pc, #580]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800464c:	4b8c      	ldr	r3, [pc, #560]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800465a:	4989      	ldr	r1, [pc, #548]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800466e:	4b84      	ldr	r3, [pc, #528]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	4980      	ldr	r1, [pc, #512]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004690:	4b7b      	ldr	r3, [pc, #492]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	f023 0203 	bic.w	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	4978      	ldr	r1, [pc, #480]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046b2:	4b73      	ldr	r3, [pc, #460]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	f023 020c 	bic.w	r2, r3, #12
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c0:	496f      	ldr	r1, [pc, #444]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046d4:	4b6a      	ldr	r3, [pc, #424]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e2:	4967      	ldr	r1, [pc, #412]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046f6:	4b62      	ldr	r3, [pc, #392]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004704:	495e      	ldr	r1, [pc, #376]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004718:	4b59      	ldr	r3, [pc, #356]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	4956      	ldr	r1, [pc, #344]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800473a:	4b51      	ldr	r3, [pc, #324]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004740:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	494d      	ldr	r1, [pc, #308]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800475c:	4b48      	ldr	r3, [pc, #288]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004762:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476a:	4945      	ldr	r1, [pc, #276]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800477e:	4b40      	ldr	r3, [pc, #256]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004784:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478c:	493c      	ldr	r1, [pc, #240]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047a0:	4b37      	ldr	r3, [pc, #220]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ae:	4934      	ldr	r1, [pc, #208]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d011      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047c2:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047d0:	492b      	ldr	r1, [pc, #172]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e0:	d101      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047e2:	2301      	movs	r3, #1
 80047e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047f2:	2301      	movs	r3, #1
 80047f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004802:	4b1f      	ldr	r3, [pc, #124]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004810:	491b      	ldr	r1, [pc, #108]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004824:	4b16      	ldr	r3, [pc, #88]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004834:	4912      	ldr	r1, [pc, #72]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00b      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004848:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004858:	4909      	ldr	r1, [pc, #36]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00f      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800486c:	4b04      	ldr	r3, [pc, #16]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800486e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004872:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487c:	e002      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800487e:	bf00      	nop
 8004880:	40023800 	.word	0x40023800
 8004884:	4986      	ldr	r1, [pc, #536]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00b      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004898:	4b81      	ldr	r3, [pc, #516]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800489e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a8:	497d      	ldr	r1, [pc, #500]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d006      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80d6 	beq.w	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048c4:	4b76      	ldr	r3, [pc, #472]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a75      	ldr	r2, [pc, #468]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d0:	f7fd fc3e 	bl	8002150 <HAL_GetTick>
 80048d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048d8:	f7fd fc3a 	bl	8002150 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b64      	cmp	r3, #100	; 0x64
 80048e4:	d901      	bls.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e195      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048ea:	4b6d      	ldr	r3, [pc, #436]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d021      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	2b00      	cmp	r3, #0
 8004908:	d11d      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800490a:	4b65      	ldr	r3, [pc, #404]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004918:	4b61      	ldr	r3, [pc, #388]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491e:	0e1b      	lsrs	r3, r3, #24
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	019a      	lsls	r2, r3, #6
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	041b      	lsls	r3, r3, #16
 8004930:	431a      	orrs	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	061b      	lsls	r3, r3, #24
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	071b      	lsls	r3, r3, #28
 800493e:	4958      	ldr	r1, [pc, #352]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d004      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004964:	2b00      	cmp	r3, #0
 8004966:	d02e      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004970:	d129      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004972:	4b4b      	ldr	r3, [pc, #300]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004980:	4b47      	ldr	r3, [pc, #284]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004986:	0f1b      	lsrs	r3, r3, #28
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	019a      	lsls	r2, r3, #6
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	061b      	lsls	r3, r3, #24
 80049a0:	431a      	orrs	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	071b      	lsls	r3, r3, #28
 80049a6:	493e      	ldr	r1, [pc, #248]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049ae:	4b3c      	ldr	r3, [pc, #240]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b4:	f023 021f 	bic.w	r2, r3, #31
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	3b01      	subs	r3, #1
 80049be:	4938      	ldr	r1, [pc, #224]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01d      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049d2:	4b33      	ldr	r3, [pc, #204]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d8:	0e1b      	lsrs	r3, r3, #24
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049e0:	4b2f      	ldr	r3, [pc, #188]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e6:	0f1b      	lsrs	r3, r3, #28
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	019a      	lsls	r2, r3, #6
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	431a      	orrs	r2, r3
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	061b      	lsls	r3, r3, #24
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	071b      	lsls	r3, r3, #28
 8004a06:	4926      	ldr	r1, [pc, #152]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d011      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	019a      	lsls	r2, r3, #6
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	041b      	lsls	r3, r3, #16
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	071b      	lsls	r3, r3, #28
 8004a36:	491a      	ldr	r1, [pc, #104]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a17      	ldr	r2, [pc, #92]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4a:	f7fd fb81 	bl	8002150 <HAL_GetTick>
 8004a4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a50:	e008      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a52:	f7fd fb7d 	bl	8002150 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b64      	cmp	r3, #100	; 0x64
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e0d8      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a64:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	f040 80ce 	bne.w	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a78:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a84:	f7fd fb64 	bl	8002150 <HAL_GetTick>
 8004a88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a8a:	e00b      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a8c:	f7fd fb60 	bl	8002150 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b64      	cmp	r3, #100	; 0x64
 8004a98:	d904      	bls.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e0bb      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aa4:	4b5e      	ldr	r3, [pc, #376]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab0:	d0ec      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d02e      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d12a      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ada:	4b51      	ldr	r3, [pc, #324]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	0c1b      	lsrs	r3, r3, #16
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ae8:	4b4d      	ldr	r3, [pc, #308]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	0f1b      	lsrs	r3, r3, #28
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	019a      	lsls	r2, r3, #6
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	041b      	lsls	r3, r3, #16
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	061b      	lsls	r3, r3, #24
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	071b      	lsls	r3, r3, #28
 8004b0e:	4944      	ldr	r1, [pc, #272]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b16:	4b42      	ldr	r3, [pc, #264]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	3b01      	subs	r3, #1
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	493d      	ldr	r1, [pc, #244]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d022      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b44:	d11d      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b46:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	0e1b      	lsrs	r3, r3, #24
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b54:	4b32      	ldr	r3, [pc, #200]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	0f1b      	lsrs	r3, r3, #28
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	019a      	lsls	r2, r3, #6
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	041b      	lsls	r3, r3, #16
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	061b      	lsls	r3, r3, #24
 8004b74:	431a      	orrs	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	071b      	lsls	r3, r3, #28
 8004b7a:	4929      	ldr	r1, [pc, #164]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d028      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b8e:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	0e1b      	lsrs	r3, r3, #24
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b9c:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	0c1b      	lsrs	r3, r3, #16
 8004ba4:	f003 0303 	and.w	r3, r3, #3
 8004ba8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	019a      	lsls	r2, r3, #6
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	041b      	lsls	r3, r3, #16
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	061b      	lsls	r3, r3, #24
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	071b      	lsls	r3, r3, #28
 8004bc2:	4917      	ldr	r1, [pc, #92]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bca:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	4911      	ldr	r1, [pc, #68]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bec:	f7fd fab0 	bl	8002150 <HAL_GetTick>
 8004bf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bf4:	f7fd faac 	bl	8002150 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	; 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e007      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c12:	d1ef      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800

08004c24 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e025      	b.n	8004c84 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f81d 	bl	8004c8c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f000 fccb 	bl	8005600 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	461a      	mov	r2, r3
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	f000 fd35 	bl	80056e4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d101      	bne.n	8004cbc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e018      	b.n	8004cee <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fd89 	bl	80057e4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d104      	bne.n	8004ce4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2205      	movs	r2, #5
 8004cde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004ce2:	e003      	b.n	8004cec <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d101      	bne.n	8004d10 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e00e      	b.n	8004d2e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6839      	ldr	r1, [r7, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fd84 	bl	800582c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e040      	b.n	8004dca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f873 	bl	8004e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2224      	movs	r2, #36	; 0x24
 8004d62:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f879 	bl	8004e6c <UART_SetConfig>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e022      	b.n	8004dca <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 facf 	bl	8005330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004da0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004db0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0201 	orr.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fb56 	bl	8005474 <UART_CheckIdleState>
 8004dc8:	4603      	mov	r3, r0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e02b      	b.n	8004e3c <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2224      	movs	r2, #36	; 0x24
 8004de8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2200      	movs	r2, #0
 8004e08:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f820 	bl	8004e58 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4ba7      	ldr	r3, [pc, #668]	; (8005134 <UART_SetConfig+0x2c8>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6812      	ldr	r2, [r2, #0]
 8004e9e:	6979      	ldr	r1, [r7, #20]
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a95      	ldr	r2, [pc, #596]	; (8005138 <UART_SetConfig+0x2cc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d120      	bne.n	8004f2a <UART_SetConfig+0xbe>
 8004ee8:	4b94      	ldr	r3, [pc, #592]	; (800513c <UART_SetConfig+0x2d0>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d816      	bhi.n	8004f24 <UART_SetConfig+0xb8>
 8004ef6:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <UART_SetConfig+0x90>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f19 	.word	0x08004f19
 8004f04:	08004f13 	.word	0x08004f13
 8004f08:	08004f1f 	.word	0x08004f1f
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e14f      	b.n	80051b2 <UART_SetConfig+0x346>
 8004f12:	2302      	movs	r3, #2
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e14c      	b.n	80051b2 <UART_SetConfig+0x346>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e149      	b.n	80051b2 <UART_SetConfig+0x346>
 8004f1e:	2308      	movs	r3, #8
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e146      	b.n	80051b2 <UART_SetConfig+0x346>
 8004f24:	2310      	movs	r3, #16
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e143      	b.n	80051b2 <UART_SetConfig+0x346>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a84      	ldr	r2, [pc, #528]	; (8005140 <UART_SetConfig+0x2d4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d132      	bne.n	8004f9a <UART_SetConfig+0x12e>
 8004f34:	4b81      	ldr	r3, [pc, #516]	; (800513c <UART_SetConfig+0x2d0>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d828      	bhi.n	8004f94 <UART_SetConfig+0x128>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <UART_SetConfig+0xdc>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f7d 	.word	0x08004f7d
 8004f4c:	08004f95 	.word	0x08004f95
 8004f50:	08004f95 	.word	0x08004f95
 8004f54:	08004f95 	.word	0x08004f95
 8004f58:	08004f89 	.word	0x08004f89
 8004f5c:	08004f95 	.word	0x08004f95
 8004f60:	08004f95 	.word	0x08004f95
 8004f64:	08004f95 	.word	0x08004f95
 8004f68:	08004f83 	.word	0x08004f83
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004f95 	.word	0x08004f95
 8004f78:	08004f8f 	.word	0x08004f8f
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	77fb      	strb	r3, [r7, #31]
 8004f80:	e117      	b.n	80051b2 <UART_SetConfig+0x346>
 8004f82:	2302      	movs	r3, #2
 8004f84:	77fb      	strb	r3, [r7, #31]
 8004f86:	e114      	b.n	80051b2 <UART_SetConfig+0x346>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e111      	b.n	80051b2 <UART_SetConfig+0x346>
 8004f8e:	2308      	movs	r3, #8
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e10e      	b.n	80051b2 <UART_SetConfig+0x346>
 8004f94:	2310      	movs	r3, #16
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e10b      	b.n	80051b2 <UART_SetConfig+0x346>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a69      	ldr	r2, [pc, #420]	; (8005144 <UART_SetConfig+0x2d8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d120      	bne.n	8004fe6 <UART_SetConfig+0x17a>
 8004fa4:	4b65      	ldr	r3, [pc, #404]	; (800513c <UART_SetConfig+0x2d0>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fae:	2b30      	cmp	r3, #48	; 0x30
 8004fb0:	d013      	beq.n	8004fda <UART_SetConfig+0x16e>
 8004fb2:	2b30      	cmp	r3, #48	; 0x30
 8004fb4:	d814      	bhi.n	8004fe0 <UART_SetConfig+0x174>
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d009      	beq.n	8004fce <UART_SetConfig+0x162>
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d810      	bhi.n	8004fe0 <UART_SetConfig+0x174>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <UART_SetConfig+0x15c>
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d006      	beq.n	8004fd4 <UART_SetConfig+0x168>
 8004fc6:	e00b      	b.n	8004fe0 <UART_SetConfig+0x174>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e0f1      	b.n	80051b2 <UART_SetConfig+0x346>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e0ee      	b.n	80051b2 <UART_SetConfig+0x346>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e0eb      	b.n	80051b2 <UART_SetConfig+0x346>
 8004fda:	2308      	movs	r3, #8
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e0e8      	b.n	80051b2 <UART_SetConfig+0x346>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e0e5      	b.n	80051b2 <UART_SetConfig+0x346>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a57      	ldr	r2, [pc, #348]	; (8005148 <UART_SetConfig+0x2dc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d120      	bne.n	8005032 <UART_SetConfig+0x1c6>
 8004ff0:	4b52      	ldr	r3, [pc, #328]	; (800513c <UART_SetConfig+0x2d0>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8004ffc:	d013      	beq.n	8005026 <UART_SetConfig+0x1ba>
 8004ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8005000:	d814      	bhi.n	800502c <UART_SetConfig+0x1c0>
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d009      	beq.n	800501a <UART_SetConfig+0x1ae>
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d810      	bhi.n	800502c <UART_SetConfig+0x1c0>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <UART_SetConfig+0x1a8>
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d006      	beq.n	8005020 <UART_SetConfig+0x1b4>
 8005012:	e00b      	b.n	800502c <UART_SetConfig+0x1c0>
 8005014:	2300      	movs	r3, #0
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e0cb      	b.n	80051b2 <UART_SetConfig+0x346>
 800501a:	2302      	movs	r3, #2
 800501c:	77fb      	strb	r3, [r7, #31]
 800501e:	e0c8      	b.n	80051b2 <UART_SetConfig+0x346>
 8005020:	2304      	movs	r3, #4
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e0c5      	b.n	80051b2 <UART_SetConfig+0x346>
 8005026:	2308      	movs	r3, #8
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e0c2      	b.n	80051b2 <UART_SetConfig+0x346>
 800502c:	2310      	movs	r3, #16
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e0bf      	b.n	80051b2 <UART_SetConfig+0x346>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a45      	ldr	r2, [pc, #276]	; (800514c <UART_SetConfig+0x2e0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d125      	bne.n	8005088 <UART_SetConfig+0x21c>
 800503c:	4b3f      	ldr	r3, [pc, #252]	; (800513c <UART_SetConfig+0x2d0>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800504a:	d017      	beq.n	800507c <UART_SetConfig+0x210>
 800504c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005050:	d817      	bhi.n	8005082 <UART_SetConfig+0x216>
 8005052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005056:	d00b      	beq.n	8005070 <UART_SetConfig+0x204>
 8005058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505c:	d811      	bhi.n	8005082 <UART_SetConfig+0x216>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <UART_SetConfig+0x1fe>
 8005062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005066:	d006      	beq.n	8005076 <UART_SetConfig+0x20a>
 8005068:	e00b      	b.n	8005082 <UART_SetConfig+0x216>
 800506a:	2300      	movs	r3, #0
 800506c:	77fb      	strb	r3, [r7, #31]
 800506e:	e0a0      	b.n	80051b2 <UART_SetConfig+0x346>
 8005070:	2302      	movs	r3, #2
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e09d      	b.n	80051b2 <UART_SetConfig+0x346>
 8005076:	2304      	movs	r3, #4
 8005078:	77fb      	strb	r3, [r7, #31]
 800507a:	e09a      	b.n	80051b2 <UART_SetConfig+0x346>
 800507c:	2308      	movs	r3, #8
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e097      	b.n	80051b2 <UART_SetConfig+0x346>
 8005082:	2310      	movs	r3, #16
 8005084:	77fb      	strb	r3, [r7, #31]
 8005086:	e094      	b.n	80051b2 <UART_SetConfig+0x346>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a30      	ldr	r2, [pc, #192]	; (8005150 <UART_SetConfig+0x2e4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d125      	bne.n	80050de <UART_SetConfig+0x272>
 8005092:	4b2a      	ldr	r3, [pc, #168]	; (800513c <UART_SetConfig+0x2d0>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005098:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800509c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a0:	d017      	beq.n	80050d2 <UART_SetConfig+0x266>
 80050a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a6:	d817      	bhi.n	80050d8 <UART_SetConfig+0x26c>
 80050a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ac:	d00b      	beq.n	80050c6 <UART_SetConfig+0x25a>
 80050ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b2:	d811      	bhi.n	80050d8 <UART_SetConfig+0x26c>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <UART_SetConfig+0x254>
 80050b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050bc:	d006      	beq.n	80050cc <UART_SetConfig+0x260>
 80050be:	e00b      	b.n	80050d8 <UART_SetConfig+0x26c>
 80050c0:	2301      	movs	r3, #1
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	e075      	b.n	80051b2 <UART_SetConfig+0x346>
 80050c6:	2302      	movs	r3, #2
 80050c8:	77fb      	strb	r3, [r7, #31]
 80050ca:	e072      	b.n	80051b2 <UART_SetConfig+0x346>
 80050cc:	2304      	movs	r3, #4
 80050ce:	77fb      	strb	r3, [r7, #31]
 80050d0:	e06f      	b.n	80051b2 <UART_SetConfig+0x346>
 80050d2:	2308      	movs	r3, #8
 80050d4:	77fb      	strb	r3, [r7, #31]
 80050d6:	e06c      	b.n	80051b2 <UART_SetConfig+0x346>
 80050d8:	2310      	movs	r3, #16
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e069      	b.n	80051b2 <UART_SetConfig+0x346>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <UART_SetConfig+0x2e8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d137      	bne.n	8005158 <UART_SetConfig+0x2ec>
 80050e8:	4b14      	ldr	r3, [pc, #80]	; (800513c <UART_SetConfig+0x2d0>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050f6:	d017      	beq.n	8005128 <UART_SetConfig+0x2bc>
 80050f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050fc:	d817      	bhi.n	800512e <UART_SetConfig+0x2c2>
 80050fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005102:	d00b      	beq.n	800511c <UART_SetConfig+0x2b0>
 8005104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005108:	d811      	bhi.n	800512e <UART_SetConfig+0x2c2>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <UART_SetConfig+0x2aa>
 800510e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005112:	d006      	beq.n	8005122 <UART_SetConfig+0x2b6>
 8005114:	e00b      	b.n	800512e <UART_SetConfig+0x2c2>
 8005116:	2300      	movs	r3, #0
 8005118:	77fb      	strb	r3, [r7, #31]
 800511a:	e04a      	b.n	80051b2 <UART_SetConfig+0x346>
 800511c:	2302      	movs	r3, #2
 800511e:	77fb      	strb	r3, [r7, #31]
 8005120:	e047      	b.n	80051b2 <UART_SetConfig+0x346>
 8005122:	2304      	movs	r3, #4
 8005124:	77fb      	strb	r3, [r7, #31]
 8005126:	e044      	b.n	80051b2 <UART_SetConfig+0x346>
 8005128:	2308      	movs	r3, #8
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e041      	b.n	80051b2 <UART_SetConfig+0x346>
 800512e:	2310      	movs	r3, #16
 8005130:	77fb      	strb	r3, [r7, #31]
 8005132:	e03e      	b.n	80051b2 <UART_SetConfig+0x346>
 8005134:	efff69f3 	.word	0xefff69f3
 8005138:	40011000 	.word	0x40011000
 800513c:	40023800 	.word	0x40023800
 8005140:	40004400 	.word	0x40004400
 8005144:	40004800 	.word	0x40004800
 8005148:	40004c00 	.word	0x40004c00
 800514c:	40005000 	.word	0x40005000
 8005150:	40011400 	.word	0x40011400
 8005154:	40007800 	.word	0x40007800
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a71      	ldr	r2, [pc, #452]	; (8005324 <UART_SetConfig+0x4b8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d125      	bne.n	80051ae <UART_SetConfig+0x342>
 8005162:	4b71      	ldr	r3, [pc, #452]	; (8005328 <UART_SetConfig+0x4bc>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800516c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005170:	d017      	beq.n	80051a2 <UART_SetConfig+0x336>
 8005172:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005176:	d817      	bhi.n	80051a8 <UART_SetConfig+0x33c>
 8005178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800517c:	d00b      	beq.n	8005196 <UART_SetConfig+0x32a>
 800517e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005182:	d811      	bhi.n	80051a8 <UART_SetConfig+0x33c>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <UART_SetConfig+0x324>
 8005188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518c:	d006      	beq.n	800519c <UART_SetConfig+0x330>
 800518e:	e00b      	b.n	80051a8 <UART_SetConfig+0x33c>
 8005190:	2300      	movs	r3, #0
 8005192:	77fb      	strb	r3, [r7, #31]
 8005194:	e00d      	b.n	80051b2 <UART_SetConfig+0x346>
 8005196:	2302      	movs	r3, #2
 8005198:	77fb      	strb	r3, [r7, #31]
 800519a:	e00a      	b.n	80051b2 <UART_SetConfig+0x346>
 800519c:	2304      	movs	r3, #4
 800519e:	77fb      	strb	r3, [r7, #31]
 80051a0:	e007      	b.n	80051b2 <UART_SetConfig+0x346>
 80051a2:	2308      	movs	r3, #8
 80051a4:	77fb      	strb	r3, [r7, #31]
 80051a6:	e004      	b.n	80051b2 <UART_SetConfig+0x346>
 80051a8:	2310      	movs	r3, #16
 80051aa:	77fb      	strb	r3, [r7, #31]
 80051ac:	e001      	b.n	80051b2 <UART_SetConfig+0x346>
 80051ae:	2310      	movs	r3, #16
 80051b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ba:	d15b      	bne.n	8005274 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80051bc:	7ffb      	ldrb	r3, [r7, #31]
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d827      	bhi.n	8005212 <UART_SetConfig+0x3a6>
 80051c2:	a201      	add	r2, pc, #4	; (adr r2, 80051c8 <UART_SetConfig+0x35c>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	080051ed 	.word	0x080051ed
 80051cc:	080051f5 	.word	0x080051f5
 80051d0:	080051fd 	.word	0x080051fd
 80051d4:	08005213 	.word	0x08005213
 80051d8:	08005203 	.word	0x08005203
 80051dc:	08005213 	.word	0x08005213
 80051e0:	08005213 	.word	0x08005213
 80051e4:	08005213 	.word	0x08005213
 80051e8:	0800520b 	.word	0x0800520b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ec:	f7ff f8ca 	bl	8004384 <HAL_RCC_GetPCLK1Freq>
 80051f0:	61b8      	str	r0, [r7, #24]
        break;
 80051f2:	e013      	b.n	800521c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f4:	f7ff f8da 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 80051f8:	61b8      	str	r0, [r7, #24]
        break;
 80051fa:	e00f      	b.n	800521c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051fc:	4b4b      	ldr	r3, [pc, #300]	; (800532c <UART_SetConfig+0x4c0>)
 80051fe:	61bb      	str	r3, [r7, #24]
        break;
 8005200:	e00c      	b.n	800521c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005202:	f7fe fffd 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 8005206:	61b8      	str	r0, [r7, #24]
        break;
 8005208:	e008      	b.n	800521c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520e:	61bb      	str	r3, [r7, #24]
        break;
 8005210:	e004      	b.n	800521c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	77bb      	strb	r3, [r7, #30]
        break;
 800521a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d074      	beq.n	800530c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	005a      	lsls	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	085b      	lsrs	r3, r3, #1
 800522c:	441a      	add	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	b29b      	uxth	r3, r3
 8005238:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b0f      	cmp	r3, #15
 800523e:	d916      	bls.n	800526e <UART_SetConfig+0x402>
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005246:	d212      	bcs.n	800526e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	b29b      	uxth	r3, r3
 800524c:	f023 030f 	bic.w	r3, r3, #15
 8005250:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	b29b      	uxth	r3, r3
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	b29a      	uxth	r2, r3
 800525e:	89fb      	ldrh	r3, [r7, #14]
 8005260:	4313      	orrs	r3, r2
 8005262:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	89fa      	ldrh	r2, [r7, #14]
 800526a:	60da      	str	r2, [r3, #12]
 800526c:	e04e      	b.n	800530c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	77bb      	strb	r3, [r7, #30]
 8005272:	e04b      	b.n	800530c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005274:	7ffb      	ldrb	r3, [r7, #31]
 8005276:	2b08      	cmp	r3, #8
 8005278:	d827      	bhi.n	80052ca <UART_SetConfig+0x45e>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0x414>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052ad 	.word	0x080052ad
 8005288:	080052b5 	.word	0x080052b5
 800528c:	080052cb 	.word	0x080052cb
 8005290:	080052bb 	.word	0x080052bb
 8005294:	080052cb 	.word	0x080052cb
 8005298:	080052cb 	.word	0x080052cb
 800529c:	080052cb 	.word	0x080052cb
 80052a0:	080052c3 	.word	0x080052c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a4:	f7ff f86e 	bl	8004384 <HAL_RCC_GetPCLK1Freq>
 80052a8:	61b8      	str	r0, [r7, #24]
        break;
 80052aa:	e013      	b.n	80052d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ac:	f7ff f87e 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 80052b0:	61b8      	str	r0, [r7, #24]
        break;
 80052b2:	e00f      	b.n	80052d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b4:	4b1d      	ldr	r3, [pc, #116]	; (800532c <UART_SetConfig+0x4c0>)
 80052b6:	61bb      	str	r3, [r7, #24]
        break;
 80052b8:	e00c      	b.n	80052d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ba:	f7fe ffa1 	bl	8004200 <HAL_RCC_GetSysClockFreq>
 80052be:	61b8      	str	r0, [r7, #24]
        break;
 80052c0:	e008      	b.n	80052d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052c6:	61bb      	str	r3, [r7, #24]
        break;
 80052c8:	e004      	b.n	80052d4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	77bb      	strb	r3, [r7, #30]
        break;
 80052d2:	bf00      	nop
    }

    if (pclk != 0U)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d018      	beq.n	800530c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	085a      	lsrs	r2, r3, #1
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	441a      	add	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b0f      	cmp	r3, #15
 80052f4:	d908      	bls.n	8005308 <UART_SetConfig+0x49c>
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fc:	d204      	bcs.n	8005308 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	e001      	b.n	800530c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005318:	7fbb      	ldrb	r3, [r7, #30]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3720      	adds	r7, #32
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40007c00 	.word	0x40007c00
 8005328:	40023800 	.word	0x40023800
 800532c:	00f42400 	.word	0x00f42400

08005330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01a      	beq.n	8005446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800542e:	d10a      	bne.n	8005446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	605a      	str	r2, [r3, #4]
  }
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af02      	add	r7, sp, #8
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005484:	f7fc fe64 	bl	8002150 <HAL_GetTick>
 8005488:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b08      	cmp	r3, #8
 8005496:	d10e      	bne.n	80054b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f82d 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e023      	b.n	80054fe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d10e      	bne.n	80054e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f817 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e00d      	b.n	80054fe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	4613      	mov	r3, r2
 8005514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005516:	e05e      	b.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d05a      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005520:	f7fc fe16 	bl	8002150 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	429a      	cmp	r2, r3
 800552e:	d302      	bcc.n	8005536 <UART_WaitOnFlagUntilTimeout+0x30>
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d11b      	bne.n	800556e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005544:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0201 	bic.w	r2, r2, #1
 8005554:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e043      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d02c      	beq.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558a:	d124      	bne.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0201 	bic.w	r2, r2, #1
 80055b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e00f      	b.n	80055f6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4013      	ands	r3, r2
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d091      	beq.n	8005518 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d027      	beq.n	800566a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4b2f      	ldr	r3, [pc, #188]	; (80056e0 <FMC_SDRAM_Init+0xe0>)
 8005624:	4013      	ands	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005630:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005636:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800563c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005642:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005648:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800564e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005654:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800565a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	e032      	b.n	80056d0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005676:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005680:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005686:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	4b12      	ldr	r3, [pc, #72]	; (80056e0 <FMC_SDRAM_Init+0xe0>)
 8005698:	4013      	ands	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80056a4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80056aa:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80056b0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80056b6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80056bc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	ffff8000 	.word	0xffff8000

080056e4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d02e      	beq.n	800575c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800570a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	3b01      	subs	r3, #1
 8005718:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800571a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	3b01      	subs	r3, #1
 8005722:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005724:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	3b01      	subs	r3, #1
 800572c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800572e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	3b01      	subs	r3, #1
 8005736:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005738:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	3b01      	subs	r3, #1
 8005740:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005742:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	3b01      	subs	r3, #1
 800574a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800574c:	4313      	orrs	r3, r2
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	609a      	str	r2, [r3, #8]
 800575a:	e039      	b.n	80057d0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <FMC_SDRAM_Timing_Init+0xfc>)
 8005766:	4013      	ands	r3, r2
 8005768:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	3b01      	subs	r3, #1
 8005770:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	3b01      	subs	r3, #1
 8005778:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800577a:	4313      	orrs	r3, r2
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800578e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	3b01      	subs	r3, #1
 800579c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800579e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	3b01      	subs	r3, #1
 80057a6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80057a8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80057b2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80057bc:	4313      	orrs	r3, r2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	ff0f0fff 	.word	0xff0f0fff

080057e4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <FMC_SDRAM_SendCommand+0x44>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	6811      	ldr	r1, [r2, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	6852      	ldr	r2, [r2, #4]
 8005800:	4311      	orrs	r1, r2
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	6892      	ldr	r2, [r2, #8]
 8005806:	3a01      	subs	r2, #1
 8005808:	0152      	lsls	r2, r2, #5
 800580a:	4311      	orrs	r1, r2
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	68d2      	ldr	r2, [r2, #12]
 8005810:	0252      	lsls	r2, r2, #9
 8005812:	430a      	orrs	r2, r1
 8005814:	431a      	orrs	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	ffc00000 	.word	0xffc00000

0800582c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <_ZN7QAD_FMC8imp_initEv>:
//QAD_FMC Initialization Method
//
//To be called from static method init()
//Used to initialize the required GPIOs, FMC driver and SDRAM module
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAD_FMC::imp_init() {
 8005854:	b580      	push	{r7, lr}
 8005856:	b094      	sub	sp, #80	; 0x50
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]

	//Return if FMC driver is already initialized
	if (m_eState)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <_ZN7QAD_FMC8imp_initEv+0x16>
		return QA_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	e0fc      	b.n	8005a64 <_ZN7QAD_FMC8imp_initEv+0x210>


	//----------------
	//Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 800586a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	605a      	str	r2, [r3, #4]
 8005874:	609a      	str	r2, [r3, #8]
 8005876:	60da      	str	r2, [r3, #12]
 8005878:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set pins as alternate function in push-pull mode
 800587a:	2302      	movs	r3, #2
 800587c:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistors on pins
 800587e:	2301      	movs	r3, #1
 8005880:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set pin speed to very high
 8005882:	2303      	movs	r3, #3
 8005884:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_Init.Alternate = GPIO_AF12_FMC;              //Set alternate function to suit use with FMC peripheral
 8005886:	230c      	movs	r3, #12
 8005888:	64fb      	str	r3, [r7, #76]	; 0x4c

	  //Initialize required pins from GPIO port D
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 800588a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800588e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_Init);
 8005890:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005894:	4619      	mov	r1, r3
 8005896:	4875      	ldr	r0, [pc, #468]	; (8005a6c <_ZN7QAD_FMC8imp_initEv+0x218>)
 8005898:	f7fd faae 	bl	8002df8 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port E
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800589c:	f64f 7383 	movw	r3, #65411	; 0xff83
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 80058a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058a6:	4619      	mov	r1, r3
 80058a8:	4871      	ldr	r0, [pc, #452]	; (8005a70 <_ZN7QAD_FMC8imp_initEv+0x21c>)
 80058aa:	f7fd faa5 	bl	8002df8 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port F
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80058ae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80058b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_Init);
 80058b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058b8:	4619      	mov	r1, r3
 80058ba:	486e      	ldr	r0, [pc, #440]	; (8005a74 <_ZN7QAD_FMC8imp_initEv+0x220>)
 80058bc:	f7fd fa9c 	bl	8002df8 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port G
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 80058c0:	f248 1337 	movw	r3, #33079	; 0x8137
 80058c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_Init);
 80058c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058ca:	4619      	mov	r1, r3
 80058cc:	486a      	ldr	r0, [pc, #424]	; (8005a78 <_ZN7QAD_FMC8imp_initEv+0x224>)
 80058ce:	f7fd fa93 	bl	8002df8 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port H
	GPIO_Init.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80058d2:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_Init);
 80058d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058dc:	4619      	mov	r1, r3
 80058de:	4867      	ldr	r0, [pc, #412]	; (8005a7c <_ZN7QAD_FMC8imp_initEv+0x228>)
 80058e0:	f7fd fa8a 	bl	8002df8 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port I
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
 80058e4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_Init);
 80058ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058ee:	4619      	mov	r1, r3
 80058f0:	4863      	ldr	r0, [pc, #396]	; (8005a80 <_ZN7QAD_FMC8imp_initEv+0x22c>)
 80058f2:	f7fd fa81 	bl	8002df8 <HAL_GPIO_Init>

	//-------------------------
	//Initialize FMC Peripheral

	//Initialize FMC Clock
	__HAL_RCC_FMC_CLK_ENABLE();
 80058f6:	4b63      	ldr	r3, [pc, #396]	; (8005a84 <_ZN7QAD_FMC8imp_initEv+0x230>)
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	4a62      	ldr	r2, [pc, #392]	; (8005a84 <_ZN7QAD_FMC8imp_initEv+0x230>)
 80058fc:	f043 0301 	orr.w	r3, r3, #1
 8005900:	6393      	str	r3, [r2, #56]	; 0x38
 8005902:	4b60      	ldr	r3, [pc, #384]	; (8005a84 <_ZN7QAD_FMC8imp_initEv+0x230>)
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]

	//Fill FMC initialization details into Handle structure
	//NOTE: The settings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	m_sHandle.Instance                = FMC_SDRAM_DEVICE;                     //Set FMC SDRAM Device as required instance
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a5d      	ldr	r2, [pc, #372]	; (8005a88 <_ZN7QAD_FMC8imp_initEv+0x234>)
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.SDBank             = FMC_SDRAM_BANK1;                      //Set SDRAM as being connected to FMCs SDRAM bank 1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;          //Set size of column address to 8 bits
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	639a      	str	r2, [r3, #56]	; 0x38
	m_sHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;            //Set size of row address to 12 bits
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2204      	movs	r2, #4
 8005924:	63da      	str	r2, [r3, #60]	; 0x3c
	m_sHandle.Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;           //Set data bus width to 32 bits
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	641a      	str	r2, [r3, #64]	; 0x40
	m_sHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;         //Set number of SDRAM module internal banks to 4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2240      	movs	r2, #64	; 0x40
 8005930:	645a      	str	r2, [r3, #68]	; 0x44
	m_sHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;              //Set column address strobe (CAS) latency to 3 cycles
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005938:	649a      	str	r2, [r3, #72]	; 0x48
	m_sHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;   //Disable write protection, as we want to be able to both read and write to SDRAM
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;             //Set SDRAM clock period to 2 clock cycles
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005946:	651a      	str	r2, [r3, #80]	; 0x50
	m_sHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;              //Enable read burst
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800594e:	655a      	str	r2, [r3, #84]	; 0x54
	m_sHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;              //Set read pipe delay to 0 clock cycles
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	659a      	str	r2, [r3, #88]	; 0x58

	//Fill SDRAM timing details into timing structure
	//NOTE: The timings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	FMC_SDRAM_TimingTypeDef SDRAM_Timing = {0};
 8005956:	f107 0320 	add.w	r3, r7, #32
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	609a      	str	r2, [r3, #8]
 8005962:	60da      	str	r2, [r3, #12]
 8005964:	611a      	str	r2, [r3, #16]
 8005966:	615a      	str	r2, [r3, #20]
 8005968:	619a      	str	r2, [r3, #24]
	SDRAM_Timing.LoadToActiveDelay    = 2;  //Set delay between a Load Mode Register command and an Active or Refresh command to 2 clock cycles
 800596a:	2302      	movs	r3, #2
 800596c:	623b      	str	r3, [r7, #32]
	SDRAM_Timing.ExitSelfRefreshDelay = 7;  //Set delay between releasing Self Refresh command and issuing of Active command to 7 clock cycles
 800596e:	2307      	movs	r3, #7
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
	SDRAM_Timing.SelfRefreshTime      = 4;  //Set minimum Self Refresh period to 4 clock cycles
 8005972:	2304      	movs	r3, #4
 8005974:	62bb      	str	r3, [r7, #40]	; 0x28
	SDRAM_Timing.RowCycleDelay        = 7;  //Set delay between Refresh command and Activate command, or between consecutive Refresh commands to 7 clock cycles
 8005976:	2307      	movs	r3, #7
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
	SDRAM_Timing.WriteRecoveryTime    = 2;  //Set Write Recovery Time to 2 clock cycles
 800597a:	2302      	movs	r3, #2
 800597c:	633b      	str	r3, [r7, #48]	; 0x30
	SDRAM_Timing.RPDelay              = 2;  //Set delay between a Precharge command and any other command to 2 clock cycles
 800597e:	2302      	movs	r3, #2
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
	SDRAM_Timing.RCDDelay             = 2;  //Set delay between an Activate command and a Read/Write command to 2 clock cycles
 8005982:	2302      	movs	r3, #2
 8005984:	63bb      	str	r3, [r7, #56]	; 0x38

	//Initialize the FMC peripheral using the required settings and timings to suit the specific SDRAM module
	if (HAL_SDRAM_Init(&m_sHandle, &SDRAM_Timing) != HAL_OK) {
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3330      	adds	r3, #48	; 0x30
 800598a:	f107 0220 	add.w	r2, r7, #32
 800598e:	4611      	mov	r1, r2
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff f947 	bl	8004c24 <HAL_SDRAM_Init>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <_ZN7QAD_FMC8imp_initEv+0x156>
		return QA_Fail;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e05c      	b.n	8005a64 <_ZN7QAD_FMC8imp_initEv+0x210>
	}

  //-------------------
	//Initialize SDRAM IC

	FMC_SDRAM_CommandTypeDef  SDRAM_Cmd = {0};
 80059aa:	f107 0310 	add.w	r3, r7, #16
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	605a      	str	r2, [r3, #4]
 80059b4:	609a      	str	r2, [r3, #8]
 80059b6:	60da      	str	r2, [r3, #12]

		//Send command to SDRAM module to enable its clock
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;   //Set to Clock Enable Command
 80059b8:	2301      	movs	r3, #1
 80059ba:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80059bc:	2310      	movs	r3, #16
 80059be:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 80059c0:	2301      	movs	r3, #1
 80059c2:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 80059c8:	f107 0310 	add.w	r3, r7, #16
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f890 	bl	8005af4 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Delay for 1ms to allow time for SDRAM clock to enable
	HAL_Delay(1);
 80059d4:	2001      	movs	r0, #1
 80059d6:	f7fc fbc7 	bl	8002168 <HAL_Delay>

		//Send command to SDRAM module to precharge all banks
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_PALL;  //Set to Precharge All command
 80059da:	2302      	movs	r3, #2
 80059dc:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80059de:	2310      	movs	r3, #16
 80059e0:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 80059e2:	2301      	movs	r3, #1
 80059e4:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 80059ea:	f107 0310 	add.w	r3, r7, #16
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f87f 	bl	8005af4 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Send command to SDRAM module to Configure Auto Refresh
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; //Set to Auto Refresh Mode command
 80059f6:	2303      	movs	r3, #3
 80059f8:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80059fa:	2310      	movs	r3, #16
 80059fc:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 8;                              //Set number of consecutive auto refresh commands to 8
 80059fe:	2308      	movs	r3, #8
 8005a00:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8005a06:	f107 0310 	add.w	r3, r7, #16
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f871 	bl	8005af4 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Program Mode Register
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;        //Set to Load Mode Register command
 8005a12:	2304      	movs	r3, #4
 8005a14:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005a16:	2310      	movs	r3, #16
 8005a18:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681a      	ldr	r2, [r3, #0]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8005a26:	431a      	orrs	r2, r3
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69db      	ldr	r3, [r3, #28]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 8005a2c:	431a      	orrs	r2, r3
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 8005a32:	431a      	orrs	r2, r3
																		 m_uModeReg_WriteBurst_Single;   //Set write burst length to 1 32bit word
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 8005a38:	4313      	orrs	r3, r2
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 8005a3a:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8005a3c:	f107 0310 	add.w	r3, r7, #16
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f856 	bl	8005af4 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>


	//---------------------------------
	//Program SDRAM module refresh rate
	HAL_SDRAM_ProgramRefreshRate(&m_sHandle, m_uRefresh);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f7ff f94e 	bl	8004cf6 <HAL_SDRAM_ProgramRefreshRate>

	//Set Driver State
	m_eState = QA_Initialized; //Set driver as being initializeed
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	//Return
	return QA_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3750      	adds	r7, #80	; 0x50
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40020c00 	.word	0x40020c00
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40021400 	.word	0x40021400
 8005a78:	40021800 	.word	0x40021800
 8005a7c:	40021c00 	.word	0x40021c00
 8005a80:	40022000 	.word	0x40022000
 8005a84:	40023800 	.word	0x40023800
 8005a88:	a0000140 	.word	0xa0000140

08005a8c <_ZN7QAD_FMC8imp_testEv>:
//QAD_FMC::imp_test
//QAD_FMC Test Method
//
//Used to perform read and write test of full 16 megabytes of SDRAM
//Returns QA_OK if test passes, or QA_Fail if test is not successful
QA_Result QAD_FMC::imp_test(void) {
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

	//Write values to whole 16 megabytes of SDRAM
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a9e:	d209      	bcs.n	8005ab4 <_ZN7QAD_FMC8imp_testEv+0x28>
		QAD_FMC_Data->words[i] = i;
 8005aa0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	e7f1      	b.n	8005a98 <_ZN7QAD_FMC8imp_testEv+0xc>
	}

	//Read values from while 16 megabytes of SDRAM, and confirm that they match the values that were written to it
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60bb      	str	r3, [r7, #8]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005abe:	d212      	bcs.n	8005ae6 <_ZN7QAD_FMC8imp_testEv+0x5a>

		//If data read doesn't match data written then return QA_Fail
		if (QAD_FMC_Data->words[i] != i)
 8005ac0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <_ZN7QAD_FMC8imp_testEv+0x52>
			return QA_Fail;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e004      	b.n	8005ae8 <_ZN7QAD_FMC8imp_testEv+0x5c>
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60bb      	str	r3, [r7, #8]
 8005ae4:	e7e8      	b.n	8005ab8 <_ZN7QAD_FMC8imp_testEv+0x2c>
	}

	//Return QA_OK as if we reach this point then the test has passed
	return QA_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>:
//QAD_FMC::cmd
//QAD_FMC Initialization Method
//
//Used to send commands to SDRAM module
//pCmd - FMC_SDRAM_CommandTypeDef containing details of command to be sent to SDRAM module
void QAD_FMC::cmd(FMC_SDRAM_CommandTypeDef& pCmd) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
	HAL_SDRAM_SendCommand(&m_sHandle, &pCmd, 0);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3330      	adds	r3, #48	; 0x30
 8005b02:	2200      	movs	r2, #0
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff f8ca 	bl	8004ca0 <HAL_SDRAM_SendCommand>
}
 8005b0c:	bf00      	nop
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	88fa      	ldrh	r2, [r7, #6]
 8005b2c:	809a      	strh	r2, [r3, #4]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	719a      	strb	r2, [r3, #6]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	609a      	str	r2, [r3, #8]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	60da      	str	r2, [r3, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f841 	bl	8005bce <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b082      	sub	sp, #8
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	889b      	ldrh	r3, [r3, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	4619      	mov	r1, r3
 8005b6a:	f7fd fbfd 	bl	8003368 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	741a      	strb	r2, [r3, #16]
}
 8005b74:	bf00      	nop
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	889b      	ldrh	r3, [r3, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	4619      	mov	r1, r3
 8005b90:	f7fd fbea 	bl	8003368 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	741a      	strb	r2, [r3, #16]
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	7c1b      	ldrb	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d005      	beq.n	8005bbe <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d107      	bne.n	8005bc6 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff ffe0 	bl	8005b7c <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8005bbc:	e003      	b.n	8005bc6 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7ff ffc9 	bl	8005b56 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8005bc4:	bf00      	nop
	}
}
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b088      	sub	sp, #32
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8005bd6:	f107 030c 	add.w	r3, r7, #12
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	605a      	str	r2, [r3, #4]
 8005be0:	609a      	str	r2, [r3, #8]
 8005be2:	60da      	str	r2, [r3, #12]
 8005be4:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	889b      	ldrh	r3, [r3, #4]
 8005bea:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	799b      	ldrb	r3, [r3, #6]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8005bf4:	2311      	movs	r3, #17
 8005bf6:	e000      	b.n	8005bfa <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f107 020c 	add.w	r2, r7, #12
 8005c10:	4611      	mov	r1, r2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fd f8f0 	bl	8002df8 <HAL_GPIO_Init>
}
 8005c18:	bf00      	nop
 8005c1a:	3720      	adds	r7, #32
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Input Constructor
//
//This method will initialize the required GPIO pin with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Input::QAD_GPIO_Input(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	80fb      	strh	r3, [r7, #6]
		m_pGPIO(pGPIO),
		m_uPin(uPin),
		m_ePullMode(QAD_GPIO_PullMode_NoPull) {
 8005c2e:	4a0a      	ldr	r2, [pc, #40]	; (8005c58 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft+0x38>)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	605a      	str	r2, [r3, #4]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	811a      	strh	r2, [r3, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	60da      	str	r2, [r3, #12]

	//Initialize the GPIO pin
	periphInit();
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 f817 	bl	8005c7a <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	08008d64 	.word	0x08008d64

08005c5c <_ZN14QAD_GPIO_Input11setPullModeE17QAD_GPIO_PullMode>:
//QAD_GPIO_Input::setPullMode
//QAD_GPIO_Input Control Method
//
//Sets new pull mode (Pull-up, Pull-down or No-pull)
//ePull - New pull mode. Member of QAD_GPIO_PullMode as defined in QAD_GPIO.hpp
void QAD_GPIO_Input::setPullMode(QAD_GPIO_PullMode ePull) {
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]

	//Store new Pull mode setting
	m_ePullMode = ePull;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	60da      	str	r2, [r3, #12]

	//Reinitialize peripheral with new Pull mode
	periphInit();
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f804 	bl	8005c7a <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8005c72:	bf00      	nop
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <_ZN14QAD_GPIO_Input10periphInitEv>:
//QAD_GPIO_Input::periphInit
//QAD_GPIO_Input Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Input::periphInit(void) {
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b088      	sub	sp, #32
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_Init = {0};
 8005c82:	f107 030c 	add.w	r3, r7, #12
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	605a      	str	r2, [r3, #4]
 8005c8c:	609a      	str	r2, [r3, #8]
 8005c8e:	60da      	str	r2, [r3, #12]
 8005c90:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	891b      	ldrh	r3, [r3, #8]
 8005c96:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = GPIO_MODE_INPUT;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f107 020c 	add.w	r2, r7, #12
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fd f8a1 	bl	8002df8 <HAL_GPIO_Init>
}
 8005cb6:	bf00      	nop
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <_ZN8QAD_LTDCC1Ev>:
  QAD_LTDC_BufferIdx m_eLayer0Back;
  QAD_LTDC_BufferIdx m_eLayer0Front;
  QAD_LTDC_BufferIdx m_eLayer1Back;
  QAD_LTDC_BufferIdx m_eLayer1Front;

	QAD_LTDC() :
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized) {}
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f646 3225 	movw	r2, #27429	; 0x6b25
 8005cd2:	605a      	str	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f24f 4224 	movw	r2, #62500	; 0xf424
 8005cda:	609a      	str	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f643 5209 	movw	r2, #15625	; 0x3d09
 8005ce2:	60da      	str	r2, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <_ZN8QAD_LTDC3getEv>:
public:

	QAD_LTDC(const QAD_LTDC& other) = delete;
	QAD_LTDC& operator=(const QAD_LTDC& other) = delete;

	static QAD_LTDC& get(void) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
		static QAD_LTDC instance;
 8005cf8:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <_ZN8QAD_LTDC3getEv+0x48>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	f3bf 8f5b 	dmb	ish
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	bf0c      	ite	eq
 8005d0a:	2301      	moveq	r3, #1
 8005d0c:	2300      	movne	r3, #0
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d010      	beq.n	8005d36 <_ZN8QAD_LTDC3getEv+0x42>
 8005d14:	4809      	ldr	r0, [pc, #36]	; (8005d3c <_ZN8QAD_LTDC3getEv+0x48>)
 8005d16:	f002 fc36 	bl	8008586 <__cxa_guard_acquire>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	bf14      	ite	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	2300      	moveq	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <_ZN8QAD_LTDC3getEv+0x42>
 8005d2a:	4805      	ldr	r0, [pc, #20]	; (8005d40 <_ZN8QAD_LTDC3getEv+0x4c>)
 8005d2c:	f7ff ffc7 	bl	8005cbe <_ZN8QAD_LTDCC1Ev>
 8005d30:	4802      	ldr	r0, [pc, #8]	; (8005d3c <_ZN8QAD_LTDC3getEv+0x48>)
 8005d32:	f002 fc34 	bl	800859e <__cxa_guard_release>
		return instance;
 8005d36:	4b02      	ldr	r3, [pc, #8]	; (8005d40 <_ZN8QAD_LTDC3getEv+0x4c>)
	}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	2000028c 	.word	0x2000028c
 8005d40:	20000140 	.word	0x20000140

08005d44 <_ZN8QAD_LTDC15dsi_io_writecmdEmPh>:

	static void deinit(void) {
		get().imp_deinit();
	}

	static void dsi_io_writecmd(uint32_t uNumParams, uint8_t* pParams) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
		get().imp_dsi_io_writecmd(uNumParams, pParams);
 8005d4e:	f7ff ffd1 	bl	8005cf4 <_ZN8QAD_LTDC3getEv>
 8005d52:	4603      	mov	r3, r0
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fa37 	bl	80061cc <_ZN8QAD_LTDC19imp_dsi_io_writecmdEmPh>
	}
 8005d5e:	bf00      	nop
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <_ZN8QAD_LTDC8imp_initEv>:
  //QAD_LTDC Initialization Methods


//QAD_LTDC::imp_init
//QAD_LTDC Initialization Method
QA_Result QAD_LTDC::imp_init(void) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b0a2      	sub	sp, #136	; 0x88
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]

  //Init GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 8005d70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	605a      	str	r2, [r3, #4]
 8005d7a:	609a      	str	r2, [r3, #8]
 8005d7c:	60da      	str	r2, [r3, #12]
 8005d7e:	611a      	str	r2, [r3, #16]

	  //Backlight Control Pin
	GPIO_Init.Pin    = QAD_LTDC_BACKLIGHT_PIN;
 8005d80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d84:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;
 8005d86:	2301      	movs	r3, #1
 8005d88:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLDOWN;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_BACKLIGHT_PORT, &GPIO_Init);
 8005d92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d96:	4619      	mov	r1, r3
 8005d98:	48b0      	ldr	r0, [pc, #704]	; (800605c <_ZN8QAD_LTDC8imp_initEv+0x2f4>)
 8005d9a:	f7fd f82d 	bl	8002df8 <HAL_GPIO_Init>

		//Reset Pin
	GPIO_Init.Pin    = QAD_LTDC_RESET_PIN;
 8005d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da2:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;
 8005da4:	2301      	movs	r3, #1
 8005da6:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLUP;
 8005da8:	2301      	movs	r3, #1
 8005daa:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 8005dac:	2300      	movs	r3, #0
 8005dae:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_RESET_PORT, &GPIO_Init);
 8005db0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005db4:	4619      	mov	r1, r3
 8005db6:	48aa      	ldr	r0, [pc, #680]	; (8006060 <_ZN8QAD_LTDC8imp_initEv+0x2f8>)
 8005db8:	f7fd f81e 	bl	8002df8 <HAL_GPIO_Init>


	//Reset LCD
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET);
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dc2:	48a7      	ldr	r0, [pc, #668]	; (8006060 <_ZN8QAD_LTDC8imp_initEv+0x2f8>)
 8005dc4:	f7fd fad0 	bl	8003368 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005dc8:	2014      	movs	r0, #20
 8005dca:	f7fc f9cd 	bl	8002168 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dd4:	48a2      	ldr	r0, [pc, #648]	; (8006060 <_ZN8QAD_LTDC8imp_initEv+0x2f8>)
 8005dd6:	f7fd fac7 	bl	8003368 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8005dda:	200a      	movs	r0, #10
 8005ddc:	f7fc f9c4 	bl	8002168 <HAL_Delay>


	//Initialize Peripheral Clocks
	__HAL_RCC_LTDC_CLK_ENABLE();
 8005de0:	4ba0      	ldr	r3, [pc, #640]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de4:	4a9f      	ldr	r2, [pc, #636]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005de6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dea:	6453      	str	r3, [r2, #68]	; 0x44
 8005dec:	4b9d      	ldr	r3, [pc, #628]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_LTDC_FORCE_RESET();
 8005df8:	4b9a      	ldr	r3, [pc, #616]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	4a99      	ldr	r2, [pc, #612]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005dfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e02:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_LTDC_RELEASE_RESET();
 8005e04:	4b97      	ldr	r3, [pc, #604]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	4a96      	ldr	r2, [pc, #600]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e0e:	6253      	str	r3, [r2, #36]	; 0x24

	__HAL_RCC_DSI_CLK_ENABLE();
 8005e10:	4b94      	ldr	r3, [pc, #592]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e14:	4a93      	ldr	r2, [pc, #588]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e1a:	6453      	str	r3, [r2, #68]	; 0x44
 8005e1c:	4b91      	ldr	r3, [pc, #580]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DSI_FORCE_RESET();
 8005e28:	4b8e      	ldr	r3, [pc, #568]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	4a8d      	ldr	r2, [pc, #564]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e32:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_DSI_RELEASE_RESET();
 8005e34:	4b8b      	ldr	r3, [pc, #556]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	4a8a      	ldr	r2, [pc, #552]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e3a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005e3e:	6253      	str	r3, [r2, #36]	; 0x24


  //--------
  //Init DSI

  m_sDSIHandle.Instance = DSI;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a89      	ldr	r2, [pc, #548]	; (8006068 <_ZN8QAD_LTDC8imp_initEv+0x300>)
 8005e44:	611a      	str	r2, [r3, #16]
  HAL_DSI_DeInit(&m_sDSIHandle);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3310      	adds	r3, #16
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fc fc56 	bl	80026fc <HAL_DSI_DeInit>

    //DSI PLL
  DSI_PLLInitTypeDef DSI_PLLInit = {0};
 8005e50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	609a      	str	r2, [r3, #8]
  DSI_PLLInit.PLLNDIV = 100;
 8005e5c:	2364      	movs	r3, #100	; 0x64
 8005e5e:	64bb      	str	r3, [r7, #72]	; 0x48
  DSI_PLLInit.PLLIDF  = DSI_PLL_IN_DIV5;
 8005e60:	2305      	movs	r3, #5
 8005e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  DSI_PLLInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8005e64:	2300      	movs	r3, #0
 8005e66:	653b      	str	r3, [r7, #80]	; 0x50

  m_sDSIHandle.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	61da      	str	r2, [r3, #28]
  m_sDSIHandle.Init.TXEscapeCkdiv = m_uLCDLaneByteClk / m_uLCDClkDivisor;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	619a      	str	r2, [r3, #24]
  HAL_DSI_Init(&m_sDSIHandle, &DSI_PLLInit);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3310      	adds	r3, #16
 8005e82:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fc fb1d 	bl	80024c8 <HAL_DSI_Init>

    //DSI Vid Config
  uint32_t HACT = QAD_LTDC_WIDTH;    //Horizontal Active
 8005e8e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005e92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t VACT = QAD_LTDC_HEIGHT;   //Vertical Active
 8005e96:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005e9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t VSA  = 12;                //Vertical Sync Active
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t VBP  = 12;                //Vertical Back Porch
 8005ea2:	230c      	movs	r3, #12
 8005ea4:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t VFP  = 12;                //Vertical Front Porch
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t HSA  = 63;                //Horizontal Sync Active
 8005eaa:	233f      	movs	r3, #63	; 0x3f
 8005eac:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t HBP  = 120;               //Horizontal Back Porch
 8005eae:	2378      	movs	r3, #120	; 0x78
 8005eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t HFP  = 120;               //Horizontal Front Porch
 8005eb2:	2378      	movs	r3, #120	; 0x78
 8005eb4:	66bb      	str	r3, [r7, #104]	; 0x68

  m_sDSICfgHandle.VirtualChannelID             = 0;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c
  m_sDSICfgHandle.ColorCoding                  = DSI_RGB888;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2205      	movs	r2, #5
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30
  m_sDSICfgHandle.VSPolarity                   = DSI_VSYNC_ACTIVE_HIGH;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	64da      	str	r2, [r3, #76]	; 0x4c
  m_sDSICfgHandle.HSPolarity                   = DSI_HSYNC_ACTIVE_HIGH;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	649a      	str	r2, [r3, #72]	; 0x48
  m_sDSICfgHandle.DEPolarity                   = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	651a      	str	r2, [r3, #80]	; 0x50
  m_sDSICfgHandle.Mode                         = DSI_VID_MODE_BURST;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
  m_sDSICfgHandle.NullPacketSize               = 0xFFF;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005ee0:	645a      	str	r2, [r3, #68]	; 0x44
  m_sDSICfgHandle.NumberOfChunks               = 0;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	641a      	str	r2, [r3, #64]	; 0x40
  m_sDSICfgHandle.PacketSize                   = HACT;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005eee:	63da      	str	r2, [r3, #60]	; 0x3c
  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) / m_uLCDClockRate;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005ef6:	fb02 f203 	mul.w	r2, r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	655a      	str	r2, [r3, #84]	; 0x54
  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) / m_uLCDClockRate;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005f0c:	fb02 f203 	mul.w	r2, r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	659a      	str	r2, [r3, #88]	; 0x58
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) * m_uLCDLaneByteClk) / m_uLCDClockRate;
 8005f1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005f20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f22:	441a      	add	r2, r3
 8005f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f26:	441a      	add	r2, r3
 8005f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f2a:	4413      	add	r3, r2
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6892      	ldr	r2, [r2, #8]
 8005f30:	fb02 f203 	mul.w	r2, r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	65da      	str	r2, [r3, #92]	; 0x5c
  m_sDSICfgHandle.VerticalSyncActive           = VSA;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f44:	661a      	str	r2, [r3, #96]	; 0x60
  m_sDSICfgHandle.VerticalBackPorch            = VBP;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f4a:	665a      	str	r2, [r3, #100]	; 0x64
  m_sDSICfgHandle.VerticalFrontPorch           = VFP;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005f50:	669a      	str	r2, [r3, #104]	; 0x68
  m_sDSICfgHandle.VerticalActive               = VACT;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f58:	66da      	str	r2, [r3, #108]	; 0x6c

  m_sDSICfgHandle.LPCommandEnable              = DSI_LP_COMMAND_ENABLE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005f60:	671a      	str	r2, [r3, #112]	; 0x70
  m_sDSICfgHandle.LPLargestPacketSize          = 16;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2210      	movs	r2, #16
 8005f66:	675a      	str	r2, [r3, #116]	; 0x74
  m_sDSICfgHandle.LPVACTLargestPacketSize      = 0;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	679a      	str	r2, [r3, #120]	; 0x78
  m_sDSICfgHandle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f74:	67da      	str	r2, [r3, #124]	; 0x7c
  m_sDSICfgHandle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  m_sDSICfgHandle.LPVerticalActiveEnable       = DSI_LP_VACT_ENABLE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  m_sDSICfgHandle.LPVerticalFrontPorchEnable   = DSI_LP_VFP_ENABLE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  m_sDSICfgHandle.LPVerticalBackPorchEnable    = DSI_LP_VBP_ENABLE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  m_sDSICfgHandle.LPVerticalSyncActiveEnable   = DSI_LP_VSYNC_ENABLE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  HAL_DSI_ConfigVideoMode(&m_sDSIHandle, &m_sDSICfgHandle);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f103 0210 	add.w	r2, r3, #16
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	332c      	adds	r3, #44	; 0x2c
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f7fc fc29 	bl	800280c <HAL_DSI_ConfigVideoMode>

  //---------
  //Init LTDC
  LTDC_LayerCfgTypeDef LTDC_Layer = {0};
 8005fba:	f107 0314 	add.w	r3, r7, #20
 8005fbe:	2234      	movs	r2, #52	; 0x34
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f002 fb94 	bl	80086f0 <memset>

    //Peripheral
  m_sLTDCHandle.Instance                = LTDC;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a28      	ldr	r2, [pc, #160]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x304>)
 8005fcc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  m_sLTDCHandle.Init.HorizontalSync     = (HSA - 1);
 8005fd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fd2:	1e5a      	subs	r2, r3, #1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  m_sLTDCHandle.Init.AccumulatedHBP     = (HSA + HBP - 1);
 8005fda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fde:	4413      	add	r3, r2
 8005fe0:	1e5a      	subs	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  m_sLTDCHandle.Init.AccumulatedActiveW = (QAD_LTDC_WIDTH + HSA + HBP - 1);
 8005fe8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fec:	4413      	add	r3, r2
 8005fee:	f203 321f 	addw	r2, r3, #799	; 0x31f
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  m_sLTDCHandle.Init.TotalWidth         = (QAD_LTDC_WIDTH + HSA + HBP + HFP - 1);
 8005ff8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffc:	441a      	add	r2, r3
 8005ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006000:	4413      	add	r3, r2
 8006002:	f203 321f 	addw	r2, r3, #799	; 0x31f
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  m_sLTDCHandle.LayerCfg->ImageWidth    = QAD_LTDC_WIDTH;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006012:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  m_sLTDCHandle.LayerCfg->ImageHeight   = QAD_LTDC_HEIGHT;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800601c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  m_sLTDCHandle.Init.Backcolor.Red      = 0;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
  m_sLTDCHandle.Init.Backcolor.Green    = 0;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
  m_sLTDCHandle.Init.Backcolor.Blue     = 255;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	22ff      	movs	r2, #255	; 0xff
 8006034:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  m_sLTDCHandle.Init.PCPolarity         = LTDC_PCPOLARITY_IPC;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  HAL_LTDC_StructInitFromVideoConfig(&m_sLTDCHandle, &m_sDSICfgHandle);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	332c      	adds	r3, #44	; 0x2c
 800604a:	4619      	mov	r1, r3
 800604c:	4610      	mov	r0, r2
 800604e:	f7fd fc8d 	bl	800396c <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&m_sLTDCHandle);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3398      	adds	r3, #152	; 0x98
 8006056:	4618      	mov	r0, r3
 8006058:	e00a      	b.n	8006070 <_ZN8QAD_LTDC8imp_initEv+0x308>
 800605a:	bf00      	nop
 800605c:	40022000 	.word	0x40022000
 8006060:	40022400 	.word	0x40022400
 8006064:	40023800 	.word	0x40023800
 8006068:	40016c00 	.word	0x40016c00
 800606c:	40016800 	.word	0x40016800
 8006070:	f7fd f994 	bl	800339c <HAL_LTDC_Init>

    //Init Layer 0
  m_pLayer0Ptr = (void*)0xC0000000;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800607a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

	LTDC_Layer.WindowX0        = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 8006082:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006086:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 800608c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006090:	623b      	str	r3, [r7, #32]
	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;
 8006092:	2304      	movs	r3, #4
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800609c:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;
 800609e:	23ff      	movs	r3, #255	; 0xff
 80060a0:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;
 80060a2:	2300      	movs	r3, #0
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	LTDC_Layer.Backcolor.Red   = 0;
 80060a6:	2300      	movs	r3, #0
 80060a8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 80060ac:	2300      	movs	r3, #0
 80060ae:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80060b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80060bc:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80060be:	2307      	movs	r3, #7
 80060c0:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;
 80060c2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;
 80060c8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80060cc:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 0);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3398      	adds	r3, #152	; 0x98
 80060d2:	f107 0114 	add.w	r1, r7, #20
 80060d6:	2200      	movs	r2, #0
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fd fa39 	bl	8003550 <HAL_LTDC_ConfigLayer>
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 0);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060e4:	3384      	adds	r3, #132	; 0x84
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80060ee:	3284      	adds	r2, #132	; 0x84
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	6013      	str	r3, [r2, #0]

  //Init Layer 1
	m_pLayer1Ptr = (void*)((uint32_t)m_pLayer0Ptr + (QAD_LTDC_BUFFERSIZE*2));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80060fc:	461a      	mov	r2, r3
 80060fe:	4b32      	ldr	r3, [pc, #200]	; (80061c8 <_ZN8QAD_LTDC8imp_initEv+0x460>)
 8006100:	4413      	add	r3, r2
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	LTDC_Layer.WindowX0        = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 800610e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006112:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 8006118:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800611c:	623b      	str	r3, [r7, #32]
	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;
 800611e:	2304      	movs	r3, #4
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer1Ptr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006128:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;
 800612a:	23ff      	movs	r3, #255	; 0xff
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
	LTDC_Layer.Backcolor.Red   = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 800613e:	2300      	movs	r3, #0
 8006140:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006144:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006148:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800614a:	2307      	movs	r3, #7
 800614c:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;
 800614e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006152:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;
 8006154:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006158:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 1);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3398      	adds	r3, #152	; 0x98
 800615e:	f107 0114 	add.w	r1, r7, #20
 8006162:	2201      	movs	r2, #1
 8006164:	4618      	mov	r0, r3
 8006166:	f7fd f9f3 	bl	8003550 <HAL_LTDC_ConfigLayer>
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006170:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 800617c:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8006180:	f043 0301 	orr.w	r3, r3, #1
 8006184:	6013      	str	r3, [r2, #0]


	//----------
	//Enable DSI
	HAL_DSI_Start(&m_sDSIHandle);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3310      	adds	r3, #16
 800618a:	4618      	mov	r0, r3
 800618c:	f7fc fd3e 	bl	8002c0c <HAL_DSI_Start>


	//------------------------------
	//Initialize OTM8009A Controller
	OTM8009A_Init(OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8006190:	2101      	movs	r1, #1
 8006192:	2000      	movs	r0, #0
 8006194:	f7fb fd40 	bl	8001c18 <OTM8009A_Init>


	//Set Buffer States
	m_eLayer0Back  = Buffer1;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	m_eLayer0Front = Buffer0;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	m_eLayer1Back  = Buffer1;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	m_eLayer1Front = Buffer0;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

	//Set State
	m_eInitState = QA_Initialized;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]

	//Return
	return QA_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3788      	adds	r7, #136	; 0x88
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	00177000 	.word	0x00177000

080061cc <_ZN8QAD_LTDC19imp_dsi_io_writecmdEmPh>:
  //DSI Command Methods


//QAD_LTDC::imp_dsi_io_writecmd
//DSI Command Methods
void QAD_LTDC::imp_dsi_io_writecmd(uint32_t uNumParams, uint8_t* pParams) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
	if (uNumParams <= 1) {
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d80f      	bhi.n	80061fe <_ZN8QAD_LTDC19imp_dsi_io_writecmdEmPh+0x32>
		HAL_DSI_ShortWrite(&m_sDSIHandle, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f103 0010 	add.w	r0, r3, #16
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	461a      	mov	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	3301      	adds	r3, #1
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	4613      	mov	r3, r2
 80061f4:	2215      	movs	r2, #21
 80061f6:	2100      	movs	r1, #0
 80061f8:	f7fc fd44 	bl	8002c84 <HAL_DSI_ShortWrite>
	} else {
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
	}
}
 80061fc:	e00f      	b.n	800621e <_ZN8QAD_LTDC19imp_dsi_io_writecmdEmPh+0x52>
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f103 0010 	add.w	r0, r3, #16
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4413      	add	r3, r2
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	9200      	str	r2, [sp, #0]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2239      	movs	r2, #57	; 0x39
 8006218:	2100      	movs	r1, #0
 800621a:	f7fc fd55 	bl	8002cc8 <HAL_DSI_LongWrite>
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <DSI_IO_WriteCmd>:


//DSI_IO_WriteCmd
//DSI Command Method
void DSI_IO_WriteCmd(uint32_t NbrParam, uint8_t* pParams) {
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  QAD_LTDC::dsi_io_writecmd(NbrParam, pParams);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff fd86 	bl	8005d44 <_ZN8QAD_LTDC15dsi_io_writecmdEmPh>
}
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>:
  //------------------------------
  //QAD_LTDC Layer Control Methods

//QAD_LTDC::imp_flipLayer0Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer0Buffers(void) {
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d032      	beq.n	80062b6 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x76>
  	return;

  switch (m_eLayer0Front) {
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x20>
 800625a:	2b01      	cmp	r3, #1
 800625c:	d017      	beq.n	800628e <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x4e>
 800625e:	e02b      	b.n	80062b8 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    case (Buffer0): {
    	m_eLayer0Back  = Buffer0;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = Buffer1;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006276:	461a      	mov	r2, r3
 8006278:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x80>)
 800627a:	4413      	add	r3, r2
 800627c:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3398      	adds	r3, #152	; 0x98
 8006282:	2200      	movs	r2, #0
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	4618      	mov	r0, r3
 8006288:	f7fd f9a0 	bl	80035cc <HAL_LTDC_SetAddress>
    	break;
 800628c:	e014      	b.n	80062b8 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    }
    case (Buffer1): {
    	m_eLayer0Back  = Buffer1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = Buffer0;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80062a4:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3398      	adds	r3, #152	; 0x98
 80062aa:	2200      	movs	r2, #0
 80062ac:	68f9      	ldr	r1, [r7, #12]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fd f98c 	bl	80035cc <HAL_LTDC_SetAddress>
    	break;
 80062b4:	e000      	b.n	80062b8 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
  	return;
 80062b6:	bf00      	nop
    }
  }
}
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	000bb800 	.word	0x000bb800

080062c4 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>:


//QAD_LTDC::imp_flipLayer1Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer1Buffers(void) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d032      	beq.n	800633a <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x76>
  	return;

  switch (m_eLayer1Front) {
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x20>
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d017      	beq.n	8006312 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x4e>
 80062e2:	e02b      	b.n	800633c <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    case (Buffer0): {
    	m_eLayer1Back  = Buffer0;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = Buffer1;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80062fa:	461a      	mov	r2, r3
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x80>)
 80062fe:	4413      	add	r3, r2
 8006300:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3398      	adds	r3, #152	; 0x98
 8006306:	2201      	movs	r2, #1
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	4618      	mov	r0, r3
 800630c:	f7fd f95e 	bl	80035cc <HAL_LTDC_SetAddress>
    	break;
 8006310:	e014      	b.n	800633c <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    }
    case (Buffer1): {
    	m_eLayer1Back  = Buffer1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = Buffer0;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006328:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3398      	adds	r3, #152	; 0x98
 800632e:	2201      	movs	r2, #1
 8006330:	68f9      	ldr	r1, [r7, #12]
 8006332:	4618      	mov	r0, r3
 8006334:	f7fd f94a 	bl	80035cc <HAL_LTDC_SetAddress>
    	break;
 8006338:	e000      	b.n	800633c <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
  	return;
 800633a:	bf00      	nop
    }
  }
}
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	000bb800 	.word	0x000bb800

08006348 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>:
}


//QAD_LTDC::imp_getLayer0BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer0BackBuffer(void) {
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x14>
		return NULL;
 8006358:	2300      	movs	r3, #0
 800635a:	e013      	b.n	8006384 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>

	switch (m_eLayer0Back) {
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x24>
 8006366:	2b01      	cmp	r3, #1
 8006368:	d004      	beq.n	8006374 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x2c>
 800636a:	e00a      	b.n	8006382 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3a>
	  case (Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer0Ptr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006372:	e007      	b.n	8006384 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	  case (Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800637a:	461a      	mov	r2, r3
 800637c:	4b04      	ldr	r3, [pc, #16]	; (8006390 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x48>)
 800637e:	4413      	add	r3, r2
 8006380:	e000      	b.n	8006384 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	000bb800 	.word	0x000bb800

08006394 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>:
}


//QAD_LTDC::imp_getLayer1BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer1BackBuffer(void) {
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x14>
		return NULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	e013      	b.n	80063d0 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>

	switch (m_eLayer1Back) {
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x24>
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d004      	beq.n	80063c0 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x2c>
 80063b6:	e00a      	b.n	80063ce <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3a>
	  case (Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer1Ptr;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80063be:	e007      	b.n	80063d0 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	  case (Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80063c6:	461a      	mov	r2, r3
 80063c8:	4b04      	ldr	r3, [pc, #16]	; (80063dc <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x48>)
 80063ca:	4413      	add	r3, r2
 80063cc:	e000      	b.n	80063d0 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	000bb800 	.word	0x000bb800

080063e0 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 80063e4:	4b10      	ldr	r3, [pc, #64]	; (8006428 <_ZN11QAD_UARTMgr3getEv+0x48>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	f3bf 8f5b 	dmb	ish
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf0c      	ite	eq
 80063f6:	2301      	moveq	r3, #1
 80063f8:	2300      	movne	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d010      	beq.n	8006422 <_ZN11QAD_UARTMgr3getEv+0x42>
 8006400:	4809      	ldr	r0, [pc, #36]	; (8006428 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8006402:	f002 f8c0 	bl	8008586 <__cxa_guard_acquire>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d005      	beq.n	8006422 <_ZN11QAD_UARTMgr3getEv+0x42>
 8006416:	4805      	ldr	r0, [pc, #20]	; (800642c <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8006418:	f000 fa3e 	bl	8006898 <_ZN11QAD_UARTMgrC1Ev>
 800641c:	4802      	ldr	r0, [pc, #8]	; (8006428 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800641e:	f002 f8be 	bl	800859e <__cxa_guard_release>
		return instance;
 8006422:	4b02      	ldr	r3, [pc, #8]	; (800642c <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 8006424:	4618      	mov	r0, r3
 8006426:	bd80      	pop	{r7, pc}
 8006428:	200002f0 	.word	0x200002f0
 800642c:	20000290 	.word	0x20000290

08006430 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	2b07      	cmp	r3, #7
 800643e:	d901      	bls.n	8006444 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 8006440:	2302      	movs	r3, #2
 8006442:	e00a      	b.n	800645a <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 8006444:	f7ff ffcc 	bl	80063e0 <_ZN11QAD_UARTMgr3getEv>
 8006448:	4601      	mov	r1, r0
 800644a:	79fa      	ldrb	r2, [r7, #7]
 800644c:	4613      	mov	r3, r2
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	3301      	adds	r3, #1
 8006458:	781b      	ldrb	r3, [r3, #0]
	}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f769xx.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	4603      	mov	r3, r0
 800646a:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 800646c:	79fb      	ldrb	r3, [r7, #7]
 800646e:	2b07      	cmp	r3, #7
 8006470:	d901      	bls.n	8006476 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	e00a      	b.n	800648c <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 8006476:	f7ff ffb3 	bl	80063e0 <_ZN11QAD_UARTMgr3getEv>
 800647a:	4601      	mov	r1, r0
 800647c:	79fa      	ldrb	r2, [r7, #7]
 800647e:	4613      	mov	r3, r2
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	440b      	add	r3, r1
 8006488:	3304      	adds	r3, #4
 800648a:	681b      	ldr	r3, [r3, #0]
	}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	2b07      	cmp	r3, #7
 80064a2:	d902      	bls.n	80064aa <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 80064a4:	f06f 0309 	mvn.w	r3, #9
 80064a8:	e00b      	b.n	80064c2 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 80064aa:	f7ff ff99 	bl	80063e0 <_ZN11QAD_UARTMgr3getEv>
 80064ae:	4601      	mov	r1, r0
 80064b0:	79fa      	ldrb	r2, [r7, #7]
 80064b2:	4613      	mov	r3, r2
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	4413      	add	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	440b      	add	r3, r1
 80064bc:	3308      	adds	r3, #8
 80064be:	f993 3000 	ldrsb.w	r3, [r3]
	}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Management Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static void registerUART(QAD_UART_Periph eUART) {
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	4603      	mov	r3, r0
 80064d2:	71fb      	strb	r3, [r7, #7]
		get().imp_registerUART(eUART);
 80064d4:	f7ff ff84 	bl	80063e0 <_ZN11QAD_UARTMgr3getEv>
 80064d8:	4602      	mov	r2, r0
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f000 fa5c 	bl	800699c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
	}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 80064f6:	f7ff ff73 	bl	80063e0 <_ZN11QAD_UARTMgr3getEv>
 80064fa:	4602      	mov	r2, r0
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	4619      	mov	r1, r3
 8006500:	4610      	mov	r0, r2
 8006502:	f000 fa74 	bl	80069ee <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	4603      	mov	r3, r0
 8006516:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8006518:	f7ff ff62 	bl	80063e0 <_ZN11QAD_UARTMgr3getEv>
 800651c:	4602      	mov	r2, r0
 800651e:	79fb      	ldrb	r3, [r7, #7]
 8006520:	4619      	mov	r1, r3
 8006522:	4610      	mov	r0, r2
 8006524:	f000 fa7e 	bl	8006a24 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8006528:	bf00      	nop
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	4603      	mov	r3, r0
 8006538:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 800653a:	f7ff ff51 	bl	80063e0 <_ZN11QAD_UARTMgr3getEv>
 800653e:	4602      	mov	r2, r0
 8006540:	79fb      	ldrb	r3, [r7, #7]
 8006542:	4619      	mov	r1, r3
 8006544:	4610      	mov	r0, r2
 8006546:	f000 fb5f 	bl	8006c08 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or QA_Fail if initialization has failed
QA_Result QAD_UART::init(void) {
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
	if (QAD_UARTMgr::getState(m_eUART))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	785b      	ldrb	r3, [r3, #1]
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff ff66 	bl	8006430 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	bf14      	ite	ne
 800656a:	2301      	movne	r3, #1
 800656c:	2300      	moveq	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 8006574:	2302      	movs	r3, #2
 8006576:	e012      	b.n	800659e <_ZN8QAD_UART4initEv+0x4c>

  QAD_UARTMgr::registerUART(m_eUART);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	785b      	ldrb	r3, [r3, #1]
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff ffa4 	bl	80064ca <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>
  QA_Result eRes = periphInit();
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f8a7 	bl	80066d6 <_ZN8QAD_UART10periphInitEv>
 8006588:	4603      	mov	r3, r0
 800658a:	73fb      	strb	r3, [r7, #15]

  if (eRes)
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d004      	beq.n	800659c <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	4618      	mov	r0, r3
 8006598:	f7ff ffa8 	bl	80064ec <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
  return eRes;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <_ZN8QAD_UART6deinitEv+0x24>
  	return;

  periphDeinit(DeinitFull);
 80065b6:	2101      	movs	r1, #1
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f924 	bl	8006806 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
  QAD_UARTMgr::deregisterUART(m_eUART);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	785b      	ldrb	r3, [r3, #1]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff ff92 	bl	80064ec <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 80065c8:	e000      	b.n	80065cc <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 80065ca:	bf00      	nop
}
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	331c      	adds	r3, #28
}
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006600:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Active;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 800660a:	bf00      	nop
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800662c:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Inactive;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	f042 0220 	orr.w	r2, r2, #32
 8006658:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Active;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	f022 0220 	bic.w	r2, r2, #32
 8006684:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Inactive;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART transmit data register (TDR)
void QAD_UART::dataTX(uint8_t uData) {
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  m_sHandle.Instance->TDR = uData;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	78fa      	ldrb	r2, [r7, #3]
 80066ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART receive data register (RDR)
uint8_t QAD_UART::dataRX(void) {
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  return m_sHandle.Instance->RDR;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	b2db      	uxtb	r3, r3
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b088      	sub	sp, #32
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 80066de:	f107 030c 	add.w	r3, r7, #12
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	605a      	str	r2, [r3, #4]
 80066e8:	609a      	str	r2, [r3, #8]
 80066ea:	60da      	str	r2, [r3, #12]
 80066ec:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	8a1b      	ldrh	r3, [r3, #16]
 80066f2:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 80066f4:	2302      	movs	r3, #2
 80066f6:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 80066fc:	2303      	movs	r3, #3
 80066fe:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	7c9b      	ldrb	r3, [r3, #18]
 8006704:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f107 020c 	add.w	r2, r7, #12
 800670e:	4611      	mov	r1, r2
 8006710:	4618      	mov	r0, r3
 8006712:	f7fc fb71 	bl	8002df8 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8b1b      	ldrh	r3, [r3, #24]
 800671a:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 800671c:	2302      	movs	r3, #2
 800671e:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8006720:	2301      	movs	r3, #1
 8006722:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8006724:	2303      	movs	r3, #3
 8006726:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	7e9b      	ldrb	r3, [r3, #26]
 800672c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f107 020c 	add.w	r2, r7, #12
 8006736:	4611      	mov	r1, r2
 8006738:	4618      	mov	r0, r3
 800673a:	f7fc fb5d 	bl	8002df8 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	785b      	ldrb	r3, [r3, #1]
 8006742:	4618      	mov	r0, r3
 8006744:	f7ff fee3 	bl	800650e <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff fe88 	bl	8006462 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 8006752:	4602      	mov	r2, r0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	220c      	movs	r2, #12
 8006776:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	331c      	adds	r3, #28
 8006788:	4618      	mov	r0, r3
 800678a:	f7fe fad4 	bl	8004d36 <HAL_UART_Init>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	bf14      	ite	ne
 8006794:	2301      	movne	r3, #1
 8006796:	2300      	moveq	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 800679e:	2100      	movs	r1, #0
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f830 	bl	8006806 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e029      	b.n	80067fe <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f042 0201 	orr.w	r2, r2, #1
 80067b8:	601a      	str	r2, [r3, #0]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	785b      	ldrb	r3, [r3, #1]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7ff fe68 	bl	8006494 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 80067c4:	4603      	mov	r3, r0
 80067c6:	4618      	mov	r0, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	7a1b      	ldrb	r3, [r3, #8]
 80067cc:	2200      	movs	r2, #0
 80067ce:	4619      	mov	r1, r3
 80067d0:	f7fb fded 	bl	80023ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff fe5b 	bl	8006494 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 80067de:	4603      	mov	r3, r0
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fb fe00 	bl	80023e6 <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  //Return
  return QA_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//QAD_UART Private Initialization Method
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	70fb      	strb	r3, [r7, #3]

	//Disable IRQs
	//Check if full deinitialization is required
	if (eDeinitMode) {
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01b      	beq.n	8006850 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff fefc 	bl	8006616 <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff ff25 	bl	800666e <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff fe33 	bl	8006494 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 800682e:	4603      	mov	r3, r0
 8006830:	4618      	mov	r0, r3
 8006832:	f7fb fde6 	bl	8002402 <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	f022 0201 	bic.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	331c      	adds	r3, #28
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fac1 	bl	8004dd2 <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff fe6b 	bl	8006530 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695a      	ldr	r2, [r3, #20]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	8b1b      	ldrh	r3, [r3, #24]
 8006862:	4619      	mov	r1, r3
 8006864:	4610      	mov	r0, r2
 8006866:	f7fc fc73 	bl	8003150 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	8a1b      	ldrh	r3, [r3, #16]
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f7fc fc6b 	bl	8003150 <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]
}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method is a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 80068a0:	2300      	movs	r3, #0
 80068a2:	73fb      	strb	r3, [r7, #15]
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	2b07      	cmp	r3, #7
 80068a8:	d80d      	bhi.n	80068c6 <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 80068aa:	7bfa      	ldrb	r2, [r7, #15]
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	3301      	adds	r3, #1
 80068ba:	2200      	movs	r2, #0
 80068bc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	3301      	adds	r3, #1
 80068c2:	73fb      	strb	r3, [r7, #15]
 80068c4:	e7ee      	b.n	80068a4 <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART3].eUART = QAD_UART3;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	761a      	strb	r2, [r3, #24]
	m_sUARTs[QAD_UART4].eUART = QAD_UART4;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2203      	movs	r2, #3
 80068dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sUARTs[QAD_UART5].eUART = QAD_UART5;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2204      	movs	r2, #4
 80068e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2205      	movs	r2, #5
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	m_sUARTs[QAD_UART7].eUART = QAD_UART7;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2206      	movs	r2, #6
 80068f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	m_sUARTs[QAD_UART8].eUART = QAD_UART8;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2207      	movs	r2, #7
 80068fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a1e      	ldr	r2, [pc, #120]	; (800697c <_ZN11QAD_UARTMgrC1Ev+0xe4>)
 8006904:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a1d      	ldr	r2, [pc, #116]	; (8006980 <_ZN11QAD_UARTMgrC1Ev+0xe8>)
 800690a:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART3].pInstance = USART3;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <_ZN11QAD_UARTMgrC1Ev+0xec>)
 8006910:	61da      	str	r2, [r3, #28]
	m_sUARTs[QAD_UART4].pInstance = UART4;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a1c      	ldr	r2, [pc, #112]	; (8006988 <_ZN11QAD_UARTMgrC1Ev+0xf0>)
 8006916:	629a      	str	r2, [r3, #40]	; 0x28
	m_sUARTs[QAD_UART5].pInstance = UART5;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a1c      	ldr	r2, [pc, #112]	; (800698c <_ZN11QAD_UARTMgrC1Ev+0xf4>)
 800691c:	635a      	str	r2, [r3, #52]	; 0x34
	m_sUARTs[QAD_UART6].pInstance = USART6;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <_ZN11QAD_UARTMgrC1Ev+0xf8>)
 8006922:	641a      	str	r2, [r3, #64]	; 0x40
	m_sUARTs[QAD_UART7].pInstance = UART7;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a1b      	ldr	r2, [pc, #108]	; (8006994 <_ZN11QAD_UARTMgrC1Ev+0xfc>)
 8006928:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sUARTs[QAD_UART8].pInstance = UART8;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a1a      	ldr	r2, [pc, #104]	; (8006998 <_ZN11QAD_UARTMgrC1Ev+0x100>)
 800692e:	659a      	str	r2, [r3, #88]	; 0x58

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2225      	movs	r2, #37	; 0x25
 8006934:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2226      	movs	r2, #38	; 0x26
 800693a:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART3].eIRQ = USART3_IRQn;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2227      	movs	r2, #39	; 0x27
 8006940:	f883 2020 	strb.w	r2, [r3, #32]
	m_sUARTs[QAD_UART4].eIRQ = UART4_IRQn;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2234      	movs	r2, #52	; 0x34
 8006948:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	m_sUARTs[QAD_UART5].eIRQ = UART5_IRQn;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2235      	movs	r2, #53	; 0x35
 8006950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2247      	movs	r2, #71	; 0x47
 8006958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sUARTs[QAD_UART7].eIRQ = UART7_IRQn;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2252      	movs	r2, #82	; 0x52
 8006960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	m_sUARTs[QAD_UART8].eIRQ = UART8_IRQn;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2253      	movs	r2, #83	; 0x53
 8006968:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

}
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40011000 	.word	0x40011000
 8006980:	40004400 	.word	0x40004400
 8006984:	40004800 	.word	0x40004800
 8006988:	40004c00 	.word	0x40004c00
 800698c:	40005000 	.word	0x40005000
 8006990:	40011400 	.word	0x40011400
 8006994:	40007800 	.word	0x40007800
 8006998:	40007c00 	.word	0x40007c00

0800699c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	2b07      	cmp	r3, #7
 80069ac:	d901      	bls.n	80069b2 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e017      	b.n	80069e2 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 80069b2:	78fa      	ldrb	r2, [r7, #3]
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	3301      	adds	r3, #1
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 80069c8:	2302      	movs	r3, #2
 80069ca:	e00a      	b.n	80069e2 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 80069cc:	78fa      	ldrb	r2, [r7, #3]
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	4613      	mov	r3, r2
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	4413      	add	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	440b      	add	r3, r1
 80069da:	3301      	adds	r3, #1
 80069dc:	2201      	movs	r2, #1
 80069de:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	460b      	mov	r3, r1
 80069f8:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	2b07      	cmp	r3, #7
 80069fe:	d80a      	bhi.n	8006a16 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8006a00:	78fa      	ldrb	r2, [r7, #3]
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	4613      	mov	r3, r2
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	3301      	adds	r3, #1
 8006a10:	2200      	movs	r2, #0
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	e000      	b.n	8006a18 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 8006a16:	bf00      	nop
}
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
	...

08006a24 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 8006a24:	b480      	push	{r7}
 8006a26:	b08b      	sub	sp, #44	; 0x2c
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	2b08      	cmp	r3, #8
 8006a34:	f200 80df 	bhi.w	8006bf6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1c>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006a65 	.word	0x08006a65
 8006a44:	08006a97 	.word	0x08006a97
 8006a48:	08006ac9 	.word	0x08006ac9
 8006a4c:	08006afb 	.word	0x08006afb
 8006a50:	08006b2d 	.word	0x08006b2d
 8006a54:	08006b5f 	.word	0x08006b5f
 8006a58:	08006b91 	.word	0x08006b91
 8006a5c:	08006bc3 	.word	0x08006bc3
 8006a60:	08006bf5 	.word	0x08006bf5
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 8006a64:	4b67      	ldr	r3, [pc, #412]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a68:	4a66      	ldr	r2, [pc, #408]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a6a:	f043 0310 	orr.w	r3, r3, #16
 8006a6e:	6453      	str	r3, [r2, #68]	; 0x44
 8006a70:	4b64      	ldr	r3, [pc, #400]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_USART1_FORCE_RESET();
 8006a7c:	4b61      	ldr	r3, [pc, #388]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	4a60      	ldr	r2, [pc, #384]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a82:	f043 0310 	orr.w	r3, r3, #16
 8006a86:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 8006a88:	4b5e      	ldr	r3, [pc, #376]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	4a5d      	ldr	r2, [pc, #372]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a8e:	f023 0310 	bic.w	r3, r3, #16
 8006a92:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8006a94:	e0af      	b.n	8006bf6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 8006a96:	4b5b      	ldr	r3, [pc, #364]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	4a5a      	ldr	r2, [pc, #360]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8006aa2:	4b58      	ldr	r3, [pc, #352]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aaa:	623b      	str	r3, [r7, #32]
 8006aac:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_USART2_FORCE_RESET();
 8006aae:	4b55      	ldr	r3, [pc, #340]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	4a54      	ldr	r2, [pc, #336]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ab8:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 8006aba:	4b52      	ldr	r3, [pc, #328]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	4a51      	ldr	r2, [pc, #324]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ac0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ac4:	6213      	str	r3, [r2, #32]
      break;
 8006ac6:	e096      	b.n	8006bf6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_ENABLE();
 8006ac8:	4b4e      	ldr	r3, [pc, #312]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006acc:	4a4d      	ldr	r2, [pc, #308]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ace:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8006ad4:	4b4b      	ldr	r3, [pc, #300]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006adc:	61fb      	str	r3, [r7, #28]
 8006ade:	69fb      	ldr	r3, [r7, #28]
      __HAL_RCC_USART3_FORCE_RESET();
 8006ae0:	4b48      	ldr	r3, [pc, #288]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	4a47      	ldr	r2, [pc, #284]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ae6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aea:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART3_RELEASE_RESET();
 8006aec:	4b45      	ldr	r3, [pc, #276]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	4a44      	ldr	r2, [pc, #272]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006af6:	6213      	str	r3, [r2, #32]
      break;
 8006af8:	e07d      	b.n	8006bf6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_ENABLE();
 8006afa:	4b42      	ldr	r3, [pc, #264]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	4a41      	ldr	r2, [pc, #260]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b04:	6413      	str	r3, [r2, #64]	; 0x40
 8006b06:	4b3f      	ldr	r3, [pc, #252]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	69bb      	ldr	r3, [r7, #24]
      __HAL_RCC_UART4_FORCE_RESET();
 8006b12:	4b3c      	ldr	r3, [pc, #240]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	4a3b      	ldr	r2, [pc, #236]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b1c:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART4_RELEASE_RESET();
 8006b1e:	4b39      	ldr	r3, [pc, #228]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	4a38      	ldr	r2, [pc, #224]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b24:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006b28:	6213      	str	r3, [r2, #32]
      break;
 8006b2a:	e064      	b.n	8006bf6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_ENABLE();
 8006b2c:	4b35      	ldr	r3, [pc, #212]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	4a34      	ldr	r2, [pc, #208]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b36:	6413      	str	r3, [r2, #64]	; 0x40
 8006b38:	4b32      	ldr	r3, [pc, #200]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_UART5_FORCE_RESET();
 8006b44:	4b2f      	ldr	r3, [pc, #188]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	4a2e      	ldr	r2, [pc, #184]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b4e:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART5_RELEASE_RESET();
 8006b50:	4b2c      	ldr	r3, [pc, #176]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	4a2b      	ldr	r2, [pc, #172]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b5a:	6213      	str	r3, [r2, #32]
      break;
 8006b5c:	e04b      	b.n	8006bf6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 8006b5e:	4b29      	ldr	r3, [pc, #164]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b62:	4a28      	ldr	r2, [pc, #160]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b64:	f043 0320 	orr.w	r3, r3, #32
 8006b68:	6453      	str	r3, [r2, #68]	; 0x44
 8006b6a:	4b26      	ldr	r3, [pc, #152]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	613b      	str	r3, [r7, #16]
 8006b74:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART6_FORCE_RESET();
 8006b76:	4b23      	ldr	r3, [pc, #140]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	4a22      	ldr	r2, [pc, #136]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b7c:	f043 0320 	orr.w	r3, r3, #32
 8006b80:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 8006b82:	4b20      	ldr	r3, [pc, #128]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	4a1f      	ldr	r2, [pc, #124]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b88:	f023 0320 	bic.w	r3, r3, #32
 8006b8c:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8006b8e:	e032      	b.n	8006bf6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_ENABLE();
 8006b90:	4b1c      	ldr	r3, [pc, #112]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	4a1b      	ldr	r2, [pc, #108]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8006b9c:	4b19      	ldr	r3, [pc, #100]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_UART7_FORCE_RESET();
 8006ba8:	4b16      	ldr	r3, [pc, #88]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	4a15      	ldr	r2, [pc, #84]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bb2:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART7_RELEASE_RESET();
 8006bb4:	4b13      	ldr	r3, [pc, #76]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	4a12      	ldr	r2, [pc, #72]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bbe:	6213      	str	r3, [r2, #32]
      break;
 8006bc0:	e019      	b.n	8006bf6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_ENABLE();
 8006bc2:	4b10      	ldr	r3, [pc, #64]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	4a0f      	ldr	r2, [pc, #60]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8006bce:	4b0d      	ldr	r3, [pc, #52]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bd6:	60bb      	str	r3, [r7, #8]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_UART8_FORCE_RESET();
 8006bda:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	4a09      	ldr	r2, [pc, #36]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006be0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006be4:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART8_RELEASE_RESET();
 8006be6:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	4a06      	ldr	r2, [pc, #24]	; (8006c04 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bf0:	6213      	str	r3, [r2, #32]
      break;
 8006bf2:	e000      	b.n	8006bf6 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UARTNone):
    	break;
 8006bf4:	bf00      	nop
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	372c      	adds	r7, #44	; 0x2c
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40023800 	.word	0x40023800

08006c08 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	2b08      	cmp	r3, #8
 8006c18:	d84d      	bhi.n	8006cb6 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
 8006c1a:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c45 	.word	0x08006c45
 8006c24:	08006c53 	.word	0x08006c53
 8006c28:	08006c61 	.word	0x08006c61
 8006c2c:	08006c6f 	.word	0x08006c6f
 8006c30:	08006c7d 	.word	0x08006c7d
 8006c34:	08006c8b 	.word	0x08006c8b
 8006c38:	08006c99 	.word	0x08006c99
 8006c3c:	08006ca7 	.word	0x08006ca7
 8006c40:	08006cb5 	.word	0x08006cb5
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 8006c44:	4b1f      	ldr	r3, [pc, #124]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c48:	4a1e      	ldr	r2, [pc, #120]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c4a:	f023 0310 	bic.w	r3, r3, #16
 8006c4e:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8006c50:	e031      	b.n	8006cb6 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 8006c52:	4b1c      	ldr	r3, [pc, #112]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c5c:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006c5e:	e02a      	b.n	8006cb6 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_DISABLE();
 8006c60:	4b18      	ldr	r3, [pc, #96]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	4a17      	ldr	r2, [pc, #92]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c6a:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006c6c:	e023      	b.n	8006cb6 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_DISABLE();
 8006c6e:	4b15      	ldr	r3, [pc, #84]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	4a14      	ldr	r2, [pc, #80]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c74:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006c78:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006c7a:	e01c      	b.n	8006cb6 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_DISABLE();
 8006c7c:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c80:	4a10      	ldr	r2, [pc, #64]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c86:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006c88:	e015      	b.n	8006cb6 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 8006c8a:	4b0e      	ldr	r3, [pc, #56]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8e:	4a0d      	ldr	r2, [pc, #52]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c90:	f023 0320 	bic.w	r3, r3, #32
 8006c94:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8006c96:	e00e      	b.n	8006cb6 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_DISABLE();
 8006c98:	4b0a      	ldr	r3, [pc, #40]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	4a09      	ldr	r2, [pc, #36]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ca2:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006ca4:	e007      	b.n	8006cb6 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_DISABLE();
 8006ca6:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	4a06      	ldr	r2, [pc, #24]	; (8006cc4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006cac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cb0:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006cb2:	e000      	b.n	8006cb6 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UARTNone):
    	break;
 8006cb4:	bf00      	nop
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	40023800 	.word	0x40023800

08006cc8 <_ZN17QAT_PixelARGB4444aSERKt>:

		m_uPxl = other.pxl();
		return *this;
	}

	QAT_PixelARGB4444& operator=(const uint16_t& other) {
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
		m_uPxl = other;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	881a      	ldrh	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	801a      	strh	r2, [r3, #0]
		return *this;
 8006cda:	687b      	ldr	r3, [r7, #4]
	}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <_ZN17QAT_PixelARGB44443pxlERt>:
	//Pxl
	uint16_t pxl(void) const {
		return m_uPxl;
	}

	void pxl(uint16_t& pxl) {
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
		m_uPxl = pxl;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	881a      	ldrh	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	801a      	strh	r2, [r3, #0]
	}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <_ZN8QAD_LTDC4initEv>:
	static QA_Result init(void) {
 8006d06:	b580      	push	{r7, lr}
 8006d08:	af00      	add	r7, sp, #0
		return get().imp_init();
 8006d0a:	f7fe fff3 	bl	8005cf4 <_ZN8QAD_LTDC3getEv>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff f829 	bl	8005d68 <_ZN8QAD_LTDC8imp_initEv>
 8006d16:	4603      	mov	r3, r0
	}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <_ZN8QAD_LTDC17flipLayer0BuffersEv>:
	}

    //---------------------
	  //Layer Control Methods

	static void flipLayer0Buffers(void) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	af00      	add	r7, sp, #0
		get().imp_flipLayer0Buffers();
 8006d20:	f7fe ffe8 	bl	8005cf4 <_ZN8QAD_LTDC3getEv>
 8006d24:	4603      	mov	r3, r0
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff fa8a 	bl	8006240 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>
	}
 8006d2c:	bf00      	nop
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <_ZN8QAD_LTDC17flipLayer1BuffersEv>:

	static void flipLayer1Buffers(void) {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
		get().imp_flipLayer1Buffers();
 8006d34:	f7fe ffde 	bl	8005cf4 <_ZN8QAD_LTDC3getEv>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff fac2 	bl	80062c4 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>
	}
 8006d40:	bf00      	nop
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <_ZN8QAD_LTDC19getLayer0BackBufferEv>:

	static void* getLayer0BackBufferPtr(void) {
		return get().imp_getLayer0BackBufferPtr();
	}

	static QAD_LTDC_Buffer* getLayer0BackBuffer(void) {
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
		return get().imp_getLayer0BackBuffer();
 8006d48:	f7fe ffd4 	bl	8005cf4 <_ZN8QAD_LTDC3getEv>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff fafa 	bl	8006348 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>
 8006d54:	4603      	mov	r3, r0
	}
 8006d56:	4618      	mov	r0, r3
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <_ZN8QAD_LTDC19getLayer1BackBufferEv>:

	static void* getLayer1BackBufferPtr(void) {
		return get().imp_getLayer1BackBufferPtr();
	}

	static QAD_LTDC_Buffer* getLayer1BackBuffer(void) {
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	af00      	add	r7, sp, #0
		return get().imp_getLayer1BackBuffer();
 8006d5e:	f7fe ffc9 	bl	8005cf4 <_ZN8QAD_LTDC3getEv>
 8006d62:	4603      	mov	r3, r0
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff fb15 	bl	8006394 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>
 8006d6a:	4603      	mov	r3, r0
	}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <_ZN7QAS_LCD8imp_initEv>:
	//------------------------------------------


//QAS_LCD::imp_init
//QAS_LCD Initialization Method
QA_Result QAS_LCD::imp_init(void) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af04      	add	r7, sp, #16
 8006d76:	6078      	str	r0, [r7, #4]
  if (m_eInitState) {
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <_ZN7QAS_LCD8imp_initEv+0x14>
  	return QA_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	e036      	b.n	8006df2 <_ZN7QAS_LCD8imp_initEv+0x82>
  }

	//Init LTDC
	if (QAD_LTDC::init())
 8006d84:	f7ff ffbf 	bl	8006d06 <_ZN8QAD_LTDC4initEv>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	bf14      	ite	ne
 8006d8e:	2301      	movne	r3, #1
 8006d90:	2300      	moveq	r3, #0
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <_ZN7QAS_LCD8imp_initEv+0x2c>
		return QA_Fail;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e02a      	b.n	8006df2 <_ZN7QAS_LCD8imp_initEv+0x82>

	m_eInitState = QA_Initialized;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	701a      	strb	r2, [r3, #0]

	m_pDrawBuffer = NULL;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	605a      	str	r2, [r3, #4]
	m_uDrawColor  = 0x0000;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	811a      	strh	r2, [r3, #8]

	//Add Fonts to Font Manager List
	m_cFontMgr.clear();
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	330c      	adds	r3, #12
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fb39 	bl	800742a <_ZN15QAS_LCD_FontMgr5clearEv>

	m_cFontMgr.add("SegoeUI20ptSB",
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f103 000c 	add.w	r0, r3, #12
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	9302      	str	r3, [sp, #8]
 8006dc2:	2305      	movs	r3, #5
 8006dc4:	9301      	str	r3, [sp, #4]
 8006dc6:	231b      	movs	r3, #27
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	4b0c      	ldr	r3, [pc, #48]	; (8006dfc <_ZN7QAS_LCD8imp_initEv+0x8c>)
 8006dcc:	4a0c      	ldr	r2, [pc, #48]	; (8006e00 <_ZN7QAS_LCD8imp_initEv+0x90>)
 8006dce:	490d      	ldr	r1, [pc, #52]	; (8006e04 <_ZN7QAS_LCD8imp_initEv+0x94>)
 8006dd0:	f000 fb04 	bl	80073dc <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI20ptSB_Data,
								 QAS_LCD_Fonts_SegoeUI20ptSB_Height,
								 QAS_LCD_Fonts_SegoeUI20ptSB_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI20ptSB_CharGap);

	m_cFontMgr.add("SegoeUI12pt",
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f103 000c 	add.w	r0, r3, #12
 8006dda:	2302      	movs	r3, #2
 8006ddc:	9302      	str	r3, [sp, #8]
 8006dde:	2303      	movs	r3, #3
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	2311      	movs	r3, #17
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	4b08      	ldr	r3, [pc, #32]	; (8006e08 <_ZN7QAS_LCD8imp_initEv+0x98>)
 8006de8:	4a08      	ldr	r2, [pc, #32]	; (8006e0c <_ZN7QAS_LCD8imp_initEv+0x9c>)
 8006dea:	4909      	ldr	r1, [pc, #36]	; (8006e10 <_ZN7QAS_LCD8imp_initEv+0xa0>)
 8006dec:	f000 faf6 	bl	80073dc <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI12pt_Height,
								 QAS_LCD_Fonts_SegoeUI12pt_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI12pt_CharGap);

	//Return
	return QA_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	080097dc 	.word	0x080097dc
 8006e00:	08009664 	.word	0x08009664
 8006e04:	08008ad4 	.word	0x08008ad4
 8006e08:	08008ee0 	.word	0x08008ee0
 8006e0c:	08008d68 	.word	0x08008d68
 8006e10:	08008ae4 	.word	0x08008ae4

08006e14 <_ZN7QAS_LCD14imp_flipLayer0Ev>:
  //-------------------------------
  //QAS_LCD Rendering Setup Methods

//QAS_LCD::imp_flipLayer0
//QAS_LCD Rendering Setup Method
void QAS_LCD::imp_flipLayer0(void) {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer0Buffers();
 8006e1c:	f7ff ff7e 	bl	8006d1c <_ZN8QAD_LTDC17flipLayer0BuffersEv>
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <_ZN7QAS_LCD14imp_flipLayer1Ev>:


//QAS_LCD::imp_flipLayer1
//QAS_LCD Rendering Setup Method
void QAS_LCD::imp_flipLayer1(void) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer1Buffers();
 8006e30:	f7ff ff7e 	bl	8006d30 <_ZN8QAD_LTDC17flipLayer1BuffersEv>
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>:


//QAS_LCD::imp_setDrawBuffer
//QAS_LCD Rendering Setup Method
void QAS_LCD::imp_setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]

	switch (eLayer) {
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x18>
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d006      	beq.n	8006e60 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x24>
 8006e52:	e00b      	b.n	8006e6c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (Layer0):
	  	m_pDrawBuffer = QAD_LTDC::getLayer0BackBuffer();
 8006e54:	f7ff ff76 	bl	8006d44 <_ZN8QAD_LTDC19getLayer0BackBufferEv>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	605a      	str	r2, [r3, #4]
	  	break;
 8006e5e:	e005      	b.n	8006e6c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (Layer1):
	  	m_pDrawBuffer = QAD_LTDC::getLayer1BackBuffer();
 8006e60:	f7ff ff7b 	bl	8006d5a <_ZN8QAD_LTDC19getLayer1BackBufferEv>
 8006e64:	4602      	mov	r2, r0
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	605a      	str	r2, [r3, #4]
	  	break;
 8006e6a:	bf00      	nop
	}
	m_cFontMgr.setDrawBuffer(m_pDrawBuffer);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f103 020c 	add.w	r2, r3, #12
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	4619      	mov	r1, r3
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f000 fbbf 	bl	80075fc <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>
}
 8006e7e:	bf00      	nop
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <_ZN7QAS_LCD16imp_setDrawColorEt>:


//QAS_LCD::imp_setDrawColor
//QAS_LCD Rendering Setup Method
void QAS_LCD::imp_setDrawColor(uint16_t uColor) {
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	807b      	strh	r3, [r7, #2]
  m_uDrawColor = uColor;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	887a      	ldrh	r2, [r7, #2]
 8006e96:	811a      	strh	r2, [r3, #8]
  m_cFontMgr.setDrawColor(m_uDrawColor);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f103 020c 	add.w	r2, r3, #12
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	891b      	ldrh	r3, [r3, #8]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	f000 fbb7 	bl	8007618 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>
}
 8006eaa:	bf00      	nop
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
	...

08006eb4 <_ZN7QAS_LCD15imp_clearBufferEv>:
  //-------------------------
  //QAS_LCD Rendering Methods

//QAS_LCD::imp_clearBuffer
//QAS_LCD Rendering Method
void QAS_LCD::imp_clearBuffer(void) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4a0b      	ldr	r2, [pc, #44]	; (8006ef0 <_ZN7QAS_LCD15imp_clearBufferEv+0x3c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d80e      	bhi.n	8006ee6 <_ZN7QAS_LCD15imp_clearBufferEv+0x32>
  	m_pDrawBuffer->pixel[i] = m_uDrawColor;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	441a      	add	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4610      	mov	r0, r2
 8006eda:	f7ff fef5 	bl	8006cc8 <_ZN17QAT_PixelARGB4444aSERKt>
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e7ec      	b.n	8006ec0 <_ZN7QAS_LCD15imp_clearBufferEv+0xc>
}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	0005dbff 	.word	0x0005dbff

08006ef4 <_ZN7QAS_LCD12imp_drawLineER11QAT_Vector2S1_>:
}


//QAS_LCD::imp_drawLine
//QAS_LCD Rendering Method
void QAS_LCD::imp_drawLine(QAT_Vector2& cStart, QAT_Vector2& cEnd) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  if (cStart.x == cEnd.x)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	881a      	ldrh	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d105      	bne.n	8006f18 <_ZN7QAS_LCD12imp_drawLineER11QAT_Vector2S1_+0x24>
  	imp_drawVLine(cStart, cEnd); else
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	68b9      	ldr	r1, [r7, #8]
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 f853 	bl	8006fbc <_ZN7QAS_LCD13imp_drawVLineER11QAT_Vector2S1_>
  if (cStart.y == cEnd.y)
  	imp_drawHLine(cStart, cEnd); else
    imp_drawALine(cStart, cEnd);
}
 8006f16:	e010      	b.n	8006f3a <_ZN7QAS_LCD12imp_drawLineER11QAT_Vector2S1_+0x46>
  if (cStart.y == cEnd.y)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	885a      	ldrh	r2, [r3, #2]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	885b      	ldrh	r3, [r3, #2]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d105      	bne.n	8006f30 <_ZN7QAS_LCD12imp_drawLineER11QAT_Vector2S1_+0x3c>
  	imp_drawHLine(cStart, cEnd); else
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 f80a 	bl	8006f42 <_ZN7QAS_LCD13imp_drawHLineER11QAT_Vector2S1_>
}
 8006f2e:	e004      	b.n	8006f3a <_ZN7QAS_LCD12imp_drawLineER11QAT_Vector2S1_+0x46>
    imp_drawALine(cStart, cEnd);
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f87d 	bl	8007034 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_>
}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <_ZN7QAS_LCD13imp_drawHLineER11QAT_Vector2S1_>:


//QAS_LCD::imp_drawHLine
//QAS_LCD Rendering Method
void QAS_LCD::imp_drawHLine(QAT_Vector2& cStart, QAT_Vector2& cEnd) {
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b088      	sub	sp, #32
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	881a      	ldrh	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d206      	bcs.n	8006f68 <_ZN7QAS_LCD13imp_drawHLineER11QAT_Vector2S1_+0x26>
  	xs = cStart.x;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	61fb      	str	r3, [r7, #28]
    xe = cEnd.x;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	e005      	b.n	8006f74 <_ZN7QAS_LCD13imp_drawHLineER11QAT_Vector2S1_+0x32>
  } else {
  	xs = cEnd.x;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	61fb      	str	r3, [r7, #28]
  	xe = cStart.x;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	61bb      	str	r3, [r7, #24]
  }

  uint32_t yofs = cStart.y * QAD_LTDC_WIDTH;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	885b      	ldrh	r3, [r3, #2]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006f7e:	fb03 f302 	mul.w	r3, r3, r2
 8006f82:	613b      	str	r3, [r7, #16]
  for (uint32_t i=xs; i<(xe+1); i++) {
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d210      	bcs.n	8006fb4 <_ZN7QAS_LCD13imp_drawHLineER11QAT_Vector2S1_+0x72>
  	m_pDrawBuffer->pixel[i + yofs].pxl(m_uDrawColor);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	6979      	ldr	r1, [r7, #20]
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	440b      	add	r3, r1
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	441a      	add	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	f7ff fe9e 	bl	8006ce8 <_ZN17QAT_PixelARGB44443pxlERt>
  for (uint32_t i=xs; i<(xe+1); i++) {
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	e7e9      	b.n	8006f88 <_ZN7QAS_LCD13imp_drawHLineER11QAT_Vector2S1_+0x46>
  }
}
 8006fb4:	bf00      	nop
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <_ZN7QAS_LCD13imp_drawVLineER11QAT_Vector2S1_>:


//QAS_LCD::imp_drawVLine
//QAS_LCD Rendering Method
void QAS_LCD::imp_drawVLine(QAT_Vector2& cStart, QAT_Vector2& cEnd) {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	885a      	ldrh	r2, [r3, #2]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	885b      	ldrh	r3, [r3, #2]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d206      	bcs.n	8006fe2 <_ZN7QAS_LCD13imp_drawVLineER11QAT_Vector2S1_+0x26>
  	ys = cStart.y;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	885b      	ldrh	r3, [r3, #2]
 8006fd8:	61fb      	str	r3, [r7, #28]
  	ye = cEnd.y;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	885b      	ldrh	r3, [r3, #2]
 8006fde:	61bb      	str	r3, [r7, #24]
 8006fe0:	e005      	b.n	8006fee <_ZN7QAS_LCD13imp_drawVLineER11QAT_Vector2S1_+0x32>
  } else {
  	ys = cEnd.y;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	885b      	ldrh	r3, [r3, #2]
 8006fe6:	61fb      	str	r3, [r7, #28]
  	ye = cStart.y;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	885b      	ldrh	r3, [r3, #2]
 8006fec:	61bb      	str	r3, [r7, #24]
  }

  uint32_t xofs = cStart.x;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	613b      	str	r3, [r7, #16]
  for (uint32_t i=ys; i<(ye+1); i++) {
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d214      	bcs.n	800702c <_ZN7QAS_LCD13imp_drawVLineER11QAT_Vector2S1_+0x70>
  	m_pDrawBuffer->pixel[(i * QAD_LTDC_WIDTH) + xofs].pxl(m_uDrawColor);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f44f 7148 	mov.w	r1, #800	; 0x320
 800700c:	fb01 f103 	mul.w	r1, r1, r3
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	440b      	add	r3, r1
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	441a      	add	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3308      	adds	r3, #8
 800701c:	4619      	mov	r1, r3
 800701e:	4610      	mov	r0, r2
 8007020:	f7ff fe62 	bl	8006ce8 <_ZN17QAT_PixelARGB44443pxlERt>
  for (uint32_t i=ys; i<(ye+1); i++) {
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	3301      	adds	r3, #1
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	e7e5      	b.n	8006ff8 <_ZN7QAS_LCD13imp_drawVLineER11QAT_Vector2S1_+0x3c>
  }
}
 800702c:	bf00      	nop
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_>:


//QAS_LCD::imp_drawALine
//QAS_LCD Rendering Method
void QAS_LCD::imp_drawALine(QAT_Vector2& cStart, QAT_Vector2& cEnd) {
 8007034:	b580      	push	{r7, lr}
 8007036:	b08c      	sub	sp, #48	; 0x30
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  int16_t uDeltaX = QAS_LCD_ABS(cEnd.x-cStart.x);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	bfb8      	it	lt
 8007050:	425b      	neglt	r3, r3
 8007052:	833b      	strh	r3, [r7, #24]
  int16_t uDeltaY = QAS_LCD_ABS(cEnd.y-cStart.y);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	885b      	ldrh	r3, [r3, #2]
 8007058:	461a      	mov	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	885b      	ldrh	r3, [r3, #2]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	bfb8      	it	lt
 8007064:	425b      	neglt	r3, r3
 8007066:	82fb      	strh	r3, [r7, #22]
  int16_t uX = cStart.x;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int16_t uY = cStart.y;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	885b      	ldrh	r3, [r3, #2]
 8007072:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t uXInc1;
  int16_t uXInc2;
  int16_t uYInc1;
  int16_t uYInc2;

  if (cEnd.x >= cStart.x) {
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	881a      	ldrh	r2, [r3, #0]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	429a      	cmp	r2, r3
 800707e:	d304      	bcc.n	800708a <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0x56>
    uXInc1 = 1;
 8007080:	2301      	movs	r3, #1
 8007082:	857b      	strh	r3, [r7, #42]	; 0x2a
    uXInc2 = 1;
 8007084:	2301      	movs	r3, #1
 8007086:	853b      	strh	r3, [r7, #40]	; 0x28
 8007088:	e005      	b.n	8007096 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0x62>
  } else {
    uXInc1 = -1;
 800708a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800708e:	857b      	strh	r3, [r7, #42]	; 0x2a
    uXInc2 = -1;
 8007090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007094:	853b      	strh	r3, [r7, #40]	; 0x28
  }

  if (cEnd.y >= cStart.y) {
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	885a      	ldrh	r2, [r3, #2]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	885b      	ldrh	r3, [r3, #2]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d304      	bcc.n	80070ac <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0x78>
    uYInc1 = 1;
 80070a2:	2301      	movs	r3, #1
 80070a4:	84fb      	strh	r3, [r7, #38]	; 0x26
    uYInc2 = 1;
 80070a6:	2301      	movs	r3, #1
 80070a8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80070aa:	e005      	b.n	80070b8 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0x84>
  } else {
    uYInc1 = -1;
 80070ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070b0:	84fb      	strh	r3, [r7, #38]	; 0x26
    uYInc2 = -1;
 80070b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070b6:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t uDenominator;
  int16_t uNumerator;
  int16_t uNumAdd;
  int16_t uNumPixels;

  if (uDeltaX >= uDeltaY) {
 80070b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80070bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	db11      	blt.n	80070e8 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0xb4>
    uXInc1       = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	857b      	strh	r3, [r7, #42]	; 0x2a
    uYInc2       = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	84bb      	strh	r3, [r7, #36]	; 0x24
    uDenominator = uDeltaX;
 80070cc:	8b3b      	ldrh	r3, [r7, #24]
 80070ce:	847b      	strh	r3, [r7, #34]	; 0x22
    uNumerator   = uDeltaX / 2;
 80070d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	da00      	bge.n	80070da <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0xa6>
 80070d8:	3301      	adds	r3, #1
 80070da:	105b      	asrs	r3, r3, #1
 80070dc:	843b      	strh	r3, [r7, #32]
    uNumAdd      = uDeltaY;
 80070de:	8afb      	ldrh	r3, [r7, #22]
 80070e0:	83fb      	strh	r3, [r7, #30]
    uNumPixels   = uDeltaX;
 80070e2:	8b3b      	ldrh	r3, [r7, #24]
 80070e4:	83bb      	strh	r3, [r7, #28]
 80070e6:	e010      	b.n	800710a <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0xd6>
  } else {
    uXInc2       = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	853b      	strh	r3, [r7, #40]	; 0x28
    uYInc1       = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	84fb      	strh	r3, [r7, #38]	; 0x26
    uDenominator = uDeltaY;
 80070f0:	8afb      	ldrh	r3, [r7, #22]
 80070f2:	847b      	strh	r3, [r7, #34]	; 0x22
    uNumerator   = uDeltaY / 2;
 80070f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	da00      	bge.n	80070fe <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0xca>
 80070fc:	3301      	adds	r3, #1
 80070fe:	105b      	asrs	r3, r3, #1
 8007100:	843b      	strh	r3, [r7, #32]
    uNumAdd      = uDeltaX;
 8007102:	8b3b      	ldrh	r3, [r7, #24]
 8007104:	83fb      	strh	r3, [r7, #30]
    uNumPixels   = uDeltaY;
 8007106:	8afb      	ldrh	r3, [r7, #22]
 8007108:	83bb      	strh	r3, [r7, #28]
  }

  for (uint16_t i=0; i<uNumPixels; i++) {
 800710a:	2300      	movs	r3, #0
 800710c:	837b      	strh	r3, [r7, #26]
 800710e:	8b7a      	ldrh	r2, [r7, #26]
 8007110:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007114:	429a      	cmp	r2, r3
 8007116:	da3a      	bge.n	800718e <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0x15a>
    m_pDrawBuffer->pixel[uX+(uY*QAD_LTDC_WIDTH)].pxl(m_uDrawColor);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8007120:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8007124:	f44f 7048 	mov.w	r0, #800	; 0x320
 8007128:	fb00 f303 	mul.w	r3, r0, r3
 800712c:	440b      	add	r3, r1
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	441a      	add	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3308      	adds	r3, #8
 8007136:	4619      	mov	r1, r3
 8007138:	4610      	mov	r0, r2
 800713a:	f7ff fdd5 	bl	8006ce8 <_ZN17QAT_PixelARGB44443pxlERt>

    uNumerator += uNumAdd;
 800713e:	8c3a      	ldrh	r2, [r7, #32]
 8007140:	8bfb      	ldrh	r3, [r7, #30]
 8007142:	4413      	add	r3, r2
 8007144:	b29b      	uxth	r3, r3
 8007146:	843b      	strh	r3, [r7, #32]
    if (uNumerator >= uDenominator) {
 8007148:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800714c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007150:	429a      	cmp	r2, r3
 8007152:	db0e      	blt.n	8007172 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0x13e>
      uNumerator -= uDenominator;
 8007154:	8c3a      	ldrh	r2, [r7, #32]
 8007156:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	b29b      	uxth	r3, r3
 800715c:	843b      	strh	r3, [r7, #32]
      uX += uXInc1;
 800715e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007160:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007162:	4413      	add	r3, r2
 8007164:	b29b      	uxth	r3, r3
 8007166:	85fb      	strh	r3, [r7, #46]	; 0x2e
      uY += uYInc1;
 8007168:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800716a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800716c:	4413      	add	r3, r2
 800716e:	b29b      	uxth	r3, r3
 8007170:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    uX += uXInc2;
 8007172:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007174:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007176:	4413      	add	r3, r2
 8007178:	b29b      	uxth	r3, r3
 800717a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uY += uYInc2;
 800717c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800717e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007180:	4413      	add	r3, r2
 8007182:	b29b      	uxth	r3, r3
 8007184:	85bb      	strh	r3, [r7, #44]	; 0x2c
  for (uint16_t i=0; i<uNumPixels; i++) {
 8007186:	8b7b      	ldrh	r3, [r7, #26]
 8007188:	3301      	adds	r3, #1
 800718a:	837b      	strh	r3, [r7, #26]
 800718c:	e7bf      	b.n	800710e <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0xda>
  }
}
 800718e:	bf00      	nop
 8007190:	3730      	adds	r7, #48	; 0x30
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_>:

//QAS_LCD::imp_drawRect
//QAS_LCD Rendering Method
void QAS_LCD::imp_drawRect(QAT_Vector2& cStart, QAT_Vector2& cEnd) {
 8007196:	b580      	push	{r7, lr}
 8007198:	b08c      	sub	sp, #48	; 0x30
 800719a:	af00      	add	r7, sp, #0
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.y) {
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	881a      	ldrh	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	885b      	ldrh	r3, [r3, #2]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d206      	bcs.n	80071bc <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0x26>
    xs = cStart.x;
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ba:	e005      	b.n	80071c8 <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0x32>
  } else {
    xs = cEnd.y;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	885b      	ldrh	r3, [r3, #2]
 80071c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.y;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	885b      	ldrh	r3, [r3, #2]
 80071c6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	885a      	ldrh	r2, [r3, #2]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	885b      	ldrh	r3, [r3, #2]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d206      	bcs.n	80071e2 <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0x4c>
    ys = cStart.y;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	885b      	ldrh	r3, [r3, #2]
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	885b      	ldrh	r3, [r3, #2]
 80071de:	623b      	str	r3, [r7, #32]
 80071e0:	e005      	b.n	80071ee <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0x58>
  } else {
    ys = cEnd.y;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	885b      	ldrh	r3, [r3, #2]
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	885b      	ldrh	r3, [r3, #2]
 80071ec:	623b      	str	r3, [r7, #32]
  }

  //Top & Bottom
  uint32_t yt = ys*QAD_LTDC_WIDTH;
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80071f4:	fb02 f303 	mul.w	r3, r2, r3
 80071f8:	617b      	str	r3, [r7, #20]
  uint32_t yb = ye*QAD_LTDC_WIDTH;
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007200:	fb02 f303 	mul.w	r3, r2, r3
 8007204:	613b      	str	r3, [r7, #16]
  for (uint32_t x=xs; x<(xe+1); x++) {
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	61fb      	str	r3, [r7, #28]
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	3301      	adds	r3, #1
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	429a      	cmp	r2, r3
 8007212:	d21d      	bcs.n	8007250 <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0xba>
    m_pDrawBuffer->pixel[x+yt].pxl(m_uDrawColor);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	69f9      	ldr	r1, [r7, #28]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	440b      	add	r3, r1
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	441a      	add	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3308      	adds	r3, #8
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f7ff fd5d 	bl	8006ce8 <_ZN17QAT_PixelARGB44443pxlERt>
    m_pDrawBuffer->pixel[x+yb].pxl(m_uDrawColor);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	69f9      	ldr	r1, [r7, #28]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	440b      	add	r3, r1
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	441a      	add	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3308      	adds	r3, #8
 8007240:	4619      	mov	r1, r3
 8007242:	4610      	mov	r0, r2
 8007244:	f7ff fd50 	bl	8006ce8 <_ZN17QAT_PixelARGB44443pxlERt>
  for (uint32_t x=xs; x<(xe+1); x++) {
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	3301      	adds	r3, #1
 800724c:	61fb      	str	r3, [r7, #28]
 800724e:	e7dc      	b.n	800720a <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0x74>
  }

  //Left & Right
  for (uint32_t y=(ys+1); y<ye; y++) {
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	3301      	adds	r3, #1
 8007254:	61bb      	str	r3, [r7, #24]
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	429a      	cmp	r2, r3
 800725c:	d225      	bcs.n	80072aa <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0x114>
    m_pDrawBuffer->pixel[xs+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007268:	fb01 f103 	mul.w	r1, r1, r3
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	440b      	add	r3, r1
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	441a      	add	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3308      	adds	r3, #8
 8007278:	4619      	mov	r1, r3
 800727a:	4610      	mov	r0, r2
 800727c:	f7ff fd34 	bl	8006ce8 <_ZN17QAT_PixelARGB44443pxlERt>
    m_pDrawBuffer->pixel[xe+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	f44f 7148 	mov.w	r1, #800	; 0x320
 800728a:	fb01 f103 	mul.w	r1, r1, r3
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	440b      	add	r3, r1
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	441a      	add	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3308      	adds	r3, #8
 800729a:	4619      	mov	r1, r3
 800729c:	4610      	mov	r0, r2
 800729e:	f7ff fd23 	bl	8006ce8 <_ZN17QAT_PixelARGB44443pxlERt>
  for (uint32_t y=(ys+1); y<ye; y++) {
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	3301      	adds	r3, #1
 80072a6:	61bb      	str	r3, [r7, #24]
 80072a8:	e7d5      	b.n	8007256 <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0xc0>
  }
}
 80072aa:	bf00      	nop
 80072ac:	3730      	adds	r7, #48	; 0x30
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_>:


//QAS_LCD::imp_drawRectFill
//QAS_LCD Rendering Method
void QAS_LCD::imp_drawRectFill(QAT_Vector2& cStart, QAT_Vector2& cEnd) {
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b08c      	sub	sp, #48	; 0x30
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	881a      	ldrh	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d206      	bcs.n	80072d8 <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0x26>
    xs = cStart.x;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d6:	e005      	b.n	80072e4 <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0x32>
  } else {
    xs = cEnd.x;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.x;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	885a      	ldrh	r2, [r3, #2]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	885b      	ldrh	r3, [r3, #2]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d206      	bcs.n	80072fe <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0x4c>
    ys = cStart.y;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	885b      	ldrh	r3, [r3, #2]
 80072f4:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	885b      	ldrh	r3, [r3, #2]
 80072fa:	623b      	str	r3, [r7, #32]
 80072fc:	e005      	b.n	800730a <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0x58>
  } else {
    ys = cEnd.y;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	885b      	ldrh	r3, [r3, #2]
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	885b      	ldrh	r3, [r3, #2]
 8007308:	623b      	str	r3, [r7, #32]
  }

  uint32_t yofs;
  for (uint32_t y=ys; y<(ye+1); y++) {
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	61fb      	str	r3, [r7, #28]
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	3301      	adds	r3, #1
 8007312:	69fa      	ldr	r2, [r7, #28]
 8007314:	429a      	cmp	r2, r3
 8007316:	d221      	bcs.n	800735c <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0xaa>
    yofs = y*QAD_LTDC_WIDTH;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800731e:	fb02 f303 	mul.w	r3, r2, r3
 8007322:	617b      	str	r3, [r7, #20]
    for (uint32_t x=xs; x<(xe+1); x++) {
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	61bb      	str	r3, [r7, #24]
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	3301      	adds	r3, #1
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	429a      	cmp	r2, r3
 8007330:	d210      	bcs.n	8007354 <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0xa2>
      m_pDrawBuffer->pixel[x+yofs].pxl(m_uDrawColor);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	69b9      	ldr	r1, [r7, #24]
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	440b      	add	r3, r1
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	441a      	add	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3308      	adds	r3, #8
 8007344:	4619      	mov	r1, r3
 8007346:	4610      	mov	r0, r2
 8007348:	f7ff fcce 	bl	8006ce8 <_ZN17QAT_PixelARGB44443pxlERt>
    for (uint32_t x=xs; x<(xe+1); x++) {
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	3301      	adds	r3, #1
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	e7e9      	b.n	8007328 <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0x76>
  for (uint32_t y=ys; y<(ye+1); y++) {
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	3301      	adds	r3, #1
 8007358:	61fb      	str	r3, [r7, #28]
 800735a:	e7d8      	b.n	800730e <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0x5c>
    }
  }
}
 800735c:	bf00      	nop
 800735e:	3730      	adds	r7, #48	; 0x30
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	4618      	mov	r0, r3
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>:
	QAS_LCD_Font(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t& uHeight, uint16_t& uSpaceWidth, uint16_t& uCharGap) :
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
		m_uCharGap(uCharGap) {
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	881a      	ldrh	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	851a      	strh	r2, [r3, #40]	; 0x28
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	881a      	ldrh	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	855a      	strh	r2, [r3, #42]	; 0x2a
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	881a      	ldrh	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	859a      	strh	r2, [r3, #44]	; 0x2c
		m_pDesc = (QAS_LCD_FontDesc*)pDesc;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	621a      	str	r2, [r3, #32]
		m_pData = (uint8_t*)pData;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	625a      	str	r2, [r3, #36]	; 0x24
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 80073ae:	2300      	movs	r3, #0
 80073b0:	75fb      	strb	r3, [r7, #23]
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	2b1f      	cmp	r3, #31
 80073b6:	d807      	bhi.n	80073c8 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x4c>
			m_cName[i] = 0;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	2100      	movs	r1, #0
 80073be:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	3301      	adds	r3, #1
 80073c4:	75fb      	strb	r3, [r7, #23]
 80073c6:	e7f4      	b.n	80073b2 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x36>
		strcpy(m_cName, strName);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	68b9      	ldr	r1, [r7, #8]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 fa95 	bl	80088fc <strcpy>
	}
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>:
	//----------------------------------
	//QAS_LCD_FontMgr Management Methods

//QAS_LCD_FontMgr::add
//QAS_LCD_FontMgr Management Method
void QAS_LCD_FontMgr::add(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t uHeight, uint16_t uSpaceWidth, uint16_t uCharGap) {
 80073dc:	b590      	push	{r4, r7, lr}
 80073de:	b08b      	sub	sp, #44	; 0x2c
 80073e0:	af04      	add	r7, sp, #16
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
 80073e8:	603b      	str	r3, [r7, #0]
  QAS_LCD_Font* cFont = new QAS_LCD_Font(strName, pDesc, pData, uHeight, uSpaceWidth, uCharGap);
 80073ea:	2030      	movs	r0, #48	; 0x30
 80073ec:	f001 f8da 	bl	80085a4 <_Znwj>
 80073f0:	4603      	mov	r3, r0
 80073f2:	461c      	mov	r4, r3
 80073f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80073f8:	9302      	str	r3, [sp, #8]
 80073fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	4620      	mov	r0, r4
 800740e:	f7ff ffb5 	bl	800737c <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>
 8007412:	617c      	str	r4, [r7, #20]
  m_vFonts.push_back(cFont);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f107 0214 	add.w	r2, r7, #20
 800741a:	4611      	mov	r1, r2
 800741c:	4618      	mov	r0, r3
 800741e:	f000 f9fe 	bl	800781e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	bd90      	pop	{r4, r7, pc}

0800742a <_ZN15QAS_LCD_FontMgr5clearEv>:
}


//QAS_LCD_FontMgr::clear
//QAS_LCD_FontMgr Management Method
void QAS_LCD_FontMgr::clear(void) {
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  m_vFonts.clear();
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4618      	mov	r0, r3
 8007436:	f7fa f8a0 	bl	800157a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
}
 800743a:	bf00      	nop
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>:
}


//QAS_LCD_FontMgr::setFontByIndex
//QAS_LCD_FontMgr Management Method
void QAS_LCD_FontMgr::setFontByIndex(uint8_t uIdx) {
 8007442:	b590      	push	{r4, r7, lr}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	460b      	mov	r3, r1
 800744c:	70fb      	strb	r3, [r7, #3]
  if (uIdx >= m_vFonts.size()) {
 800744e:	78fc      	ldrb	r4, [r7, #3]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4618      	mov	r0, r3
 8007454:	f7fa f89f 	bl	8001596 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007458:	4603      	mov	r3, r0
 800745a:	429c      	cmp	r4, r3
 800745c:	bf2c      	ite	cs
 800745e:	2301      	movcs	r3, #1
 8007460:	2300      	movcc	r3, #0
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d006      	beq.n	8007476 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x34>
  	m_iCurrentIdx = -1;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	22ff      	movs	r2, #255	; 0xff
 800746c:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	611a      	str	r2, [r3, #16]
  	return;
 8007474:	e00d      	b.n	8007492 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x50>
  }

  m_iCurrentIdx = uIdx;
 8007476:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[uIdx];
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f7fa f896 	bl	80015b6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 800748a:	4603      	mov	r3, r0
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	611a      	str	r2, [r3, #16]
}
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	bd90      	pop	{r4, r7, pc}

08007498 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>:
}


//QAS_LCD_FontMgr::getSpaceWidth
//QAS_LCD_FontMgr Data Methods
uint8_t QAS_LCD_FontMgr::getSpaceWidth(void) const {
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	da01      	bge.n	80074ae <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x16>
		return 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e003      	b.n	80074b6 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x1e>
	return m_pCurrent->m_uSpaceWidth;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b4:	b2db      	uxtb	r3, r3
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>:


//QAS_LCD_FontMgr::getCharGap
//QAS_LCD_FontMgr Data Methods
uint8_t QAS_LCD_FontMgr::getCharGap(void) const {
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	da01      	bge.n	80074d8 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x16>
		return 0;
 80074d4:	2300      	movs	r3, #0
 80074d6:	e003      	b.n	80074e0 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x1e>
	return m_pCurrent->m_uCharGap;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074de:	b2db      	uxtb	r3, r3
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <_ZN15QAS_LCD_FontMgr12getCharWidthEc>:


//QAS_LCD_FontMgr::getCharWidth
//QAS_LCD_FontMgr Data Methods
uint16_t QAS_LCD_FontMgr::getCharWidth(char ch) {
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  if (m_iCurrentIdx < 0)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	da01      	bge.n	8007506 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x1a>
    return 0;
 8007502:	2300      	movs	r3, #0
 8007504:	e01a      	b.n	800753c <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x50>
  uint16_t uWidth = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	81fb      	strh	r3, [r7, #14]
  if (ch == 32) {
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	2b20      	cmp	r3, #32
 800750e:	d104      	bne.n	800751a <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x2e>
    uWidth = m_pCurrent->m_uSpaceWidth;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007516:	81fb      	strh	r3, [r7, #14]
 8007518:	e00f      	b.n	800753a <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
  } else if ((ch >= 33) && (ch <= 126)) {
 800751a:	78fb      	ldrb	r3, [r7, #3]
 800751c:	2b20      	cmp	r3, #32
 800751e:	d90c      	bls.n	800753a <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	2b7e      	cmp	r3, #126	; 0x7e
 8007524:	d809      	bhi.n	800753a <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
    uWidth = m_pCurrent->m_pDesc[ch-33].uWidth;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	6a1a      	ldr	r2, [r3, #32]
 800752c:	78f9      	ldrb	r1, [r7, #3]
 800752e:	4b06      	ldr	r3, [pc, #24]	; (8007548 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x5c>)
 8007530:	440b      	add	r3, r1
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	81fb      	strh	r3, [r7, #14]
  }
  return uWidth;
 800753a:	89fb      	ldrh	r3, [r7, #14]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	3fffffdf 	.word	0x3fffffdf

0800754c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>:


//QAS_LCD_FontMgr::getStringWidth
//QAS_LCD_FontMgr Data Methods
uint16_t QAS_LCD_FontMgr::getStringWidth(const char* str) {
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint16_t uWidth = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	81fb      	strh	r3, [r7, #14]
  uint16_t uLength = strlen(str);
 800755a:	6838      	ldr	r0, [r7, #0]
 800755c:	f7f8 fe6c 	bl	8000238 <strlen>
 8007560:	4603      	mov	r3, r0
 8007562:	817b      	strh	r3, [r7, #10]
  uint8_t  uChar;

  if ((uLength == 0) || (m_iCurrentIdx < 0))
 8007564:	897b      	ldrh	r3, [r7, #10]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x28>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	da01      	bge.n	8007578 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x2c>
    return uWidth;
 8007574:	89fb      	ldrh	r3, [r7, #14]
 8007576:	e03b      	b.n	80075f0 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xa4>

  for (uint8_t i=0; i<uLength; i++) {
 8007578:	2300      	movs	r3, #0
 800757a:	737b      	strb	r3, [r7, #13]
 800757c:	7b7a      	ldrb	r2, [r7, #13]
 800757e:	897b      	ldrh	r3, [r7, #10]
 8007580:	429a      	cmp	r2, r3
 8007582:	da2e      	bge.n	80075e2 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x96>
    uChar = (uint8_t)str[i];
 8007584:	7b7b      	ldrb	r3, [r7, #13]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	4413      	add	r3, r2
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	727b      	strb	r3, [r7, #9]
    if (uChar == 32) {
 800758e:	7a7b      	ldrb	r3, [r7, #9]
 8007590:	2b20      	cmp	r3, #32
 8007592:	d10b      	bne.n	80075ac <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x60>
      uWidth += (m_pCurrent->m_uSpaceWidth + m_pCurrent->m_uCharGap);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075a0:	4413      	add	r3, r2
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	89fb      	ldrh	r3, [r7, #14]
 80075a6:	4413      	add	r3, r2
 80075a8:	81fb      	strh	r3, [r7, #14]
 80075aa:	e016      	b.n	80075da <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
    } else if ((uChar >= 33) && (uChar <= 126)) {
 80075ac:	7a7b      	ldrb	r3, [r7, #9]
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	d913      	bls.n	80075da <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
 80075b2:	7a7b      	ldrb	r3, [r7, #9]
 80075b4:	2b7e      	cmp	r3, #126	; 0x7e
 80075b6:	d810      	bhi.n	80075da <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
      uWidth += (m_pCurrent->m_pDesc[uChar-33].uWidth + m_pCurrent->m_uCharGap);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	6a1a      	ldr	r2, [r3, #32]
 80075be:	7a79      	ldrb	r1, [r7, #9]
 80075c0:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xac>)
 80075c2:	440b      	add	r3, r1
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	881a      	ldrh	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075d0:	4413      	add	r3, r2
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	89fb      	ldrh	r3, [r7, #14]
 80075d6:	4413      	add	r3, r2
 80075d8:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i=0; i<uLength; i++) {
 80075da:	7b7b      	ldrb	r3, [r7, #13]
 80075dc:	3301      	adds	r3, #1
 80075de:	737b      	strb	r3, [r7, #13]
 80075e0:	e7cc      	b.n	800757c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x30>
    }
  }
  uWidth -= m_pCurrent->m_uCharGap;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075e8:	89fa      	ldrh	r2, [r7, #14]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	81fb      	strh	r3, [r7, #14]
  return uWidth;
 80075ee:	89fb      	ldrh	r3, [r7, #14]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	3fffffdf 	.word	0x3fffffdf

080075fc <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>:
	//---------------------------------
	//QAS_LCD_FontMgr Rendering Methods

//QAS_LCD_FontMgr::setDrawBuffer
//QAS_LCD_FontMgr Data Methods
void QAS_LCD_FontMgr::setDrawBuffer(QAD_LTDC_Buffer* pBuffer) {
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  m_pBuffer = pBuffer;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	615a      	str	r2, [r3, #20]
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>:


//QAS_LCD_FontMgr::setDrawColor
//QAS_LCD_FontMgr Data Methods
void QAS_LCD_FontMgr::setDrawColor(uint16_t uColor) {
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	807b      	strh	r3, [r7, #2]
  m_uColor = uColor;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	887a      	ldrh	r2, [r7, #2]
 8007628:	831a      	strh	r2, [r3, #24]
}
 800762a:	bf00      	nop
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc>:
}


//QAS_LCD_FontMgr::drawStrC
//QAS_LCD_FontMgr Data Methods
void QAS_LCD_FontMgr::drawStrC(QAT_Vector2 cPos, const char* str) {
 8007636:	b590      	push	{r4, r7, lr}
 8007638:	b089      	sub	sp, #36	; 0x24
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	60b9      	str	r1, [r7, #8]
 8007640:	607a      	str	r2, [r7, #4]
  if ((m_pBuffer == NULL) || (m_iCurrentIdx < 0))
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d067      	beq.n	800771a <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0xe4>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	db62      	blt.n	800771a <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0xe4>
    return;

  uint8_t uLen = strlen(str);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7f8 fdef 	bl	8000238 <strlen>
 800765a:	4603      	mov	r3, r0
 800765c:	77bb      	strb	r3, [r7, #30]
  if (uLen < 0) return;

  QAT_Vector2 cDrawPos = cPos;
 800765e:	f107 0314 	add.w	r3, r7, #20
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	4618      	mov	r0, r3
 8007666:	f7f9 fb58 	bl	8000d1a <_ZN11QAT_Vector2C1ERKS_>
  cDrawPos.x -= (getStringWidth(str) / 2);
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f7ff ff6d 	bl	800754c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>
 8007672:	4603      	mov	r3, r0
 8007674:	085b      	lsrs	r3, r3, #1
 8007676:	b29b      	uxth	r3, r3
 8007678:	8aba      	ldrh	r2, [r7, #20]
 800767a:	b29b      	uxth	r3, r3
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	b29b      	uxth	r3, r3
 8007680:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 8007682:	2300      	movs	r3, #0
 8007684:	77fb      	strb	r3, [r7, #31]
 8007686:	7ffa      	ldrb	r2, [r7, #31]
 8007688:	7fbb      	ldrb	r3, [r7, #30]
 800768a:	429a      	cmp	r2, r3
 800768c:	d246      	bcs.n	800771c <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0xe6>
  	if ((str[i] >= 33) && (str[i] <= 126)) {
 800768e:	7ffb      	ldrb	r3, [r7, #31]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	4413      	add	r3, r2
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b20      	cmp	r3, #32
 8007698:	d92c      	bls.n	80076f4 <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0xbe>
 800769a:	7ffb      	ldrb	r3, [r7, #31]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	4413      	add	r3, r2
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b7e      	cmp	r3, #126	; 0x7e
 80076a4:	d826      	bhi.n	80076f4 <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0xbe>
      drawCharP(cDrawPos, str[i]);
 80076a6:	f107 0214 	add.w	r2, r7, #20
 80076aa:	f107 0318 	add.w	r3, r7, #24
 80076ae:	4611      	mov	r1, r2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7f9 fb32 	bl	8000d1a <_ZN11QAT_Vector2C1ERKS_>
 80076b6:	7ffb      	ldrb	r3, [r7, #31]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	4413      	add	r3, r2
 80076bc:	781a      	ldrb	r2, [r3, #0]
 80076be:	f107 0318 	add.w	r3, r7, #24
 80076c2:	4619      	mov	r1, r3
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 f82c 	bl	8007722 <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c>
      cDrawPos.x += getCharWidth(str[i]) + getCharGap();
 80076ca:	7ffb      	ldrb	r3, [r7, #31]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	4413      	add	r3, r2
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	4619      	mov	r1, r3
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff ff09 	bl	80074ec <_ZN15QAS_LCD_FontMgr12getCharWidthEc>
 80076da:	4603      	mov	r3, r0
 80076dc:	461c      	mov	r4, r3
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff feef 	bl	80074c2 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 80076e4:	4603      	mov	r3, r0
 80076e6:	4423      	add	r3, r4
 80076e8:	8aba      	ldrh	r2, [r7, #20]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	4413      	add	r3, r2
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	82bb      	strh	r3, [r7, #20]
 80076f2:	e00e      	b.n	8007712 <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0xdc>
  	} else {
  		cDrawPos.x += getSpaceWidth() + getCharGap();
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f7ff fecf 	bl	8007498 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>
 80076fa:	4603      	mov	r3, r0
 80076fc:	461c      	mov	r4, r3
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f7ff fedf 	bl	80074c2 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 8007704:	4603      	mov	r3, r0
 8007706:	4423      	add	r3, r4
 8007708:	8aba      	ldrh	r2, [r7, #20]
 800770a:	b29b      	uxth	r3, r3
 800770c:	4413      	add	r3, r2
 800770e:	b29b      	uxth	r3, r3
 8007710:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 8007712:	7ffb      	ldrb	r3, [r7, #31]
 8007714:	3301      	adds	r3, #1
 8007716:	77fb      	strb	r3, [r7, #31]
 8007718:	e7b5      	b.n	8007686 <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0x50>
    return;
 800771a:	bf00      	nop
  	}
  }
}
 800771c:	3724      	adds	r7, #36	; 0x24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd90      	pop	{r4, r7, pc}

08007722 <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c>:
  //-----------------------------------------
  //QAS_LCD_FontMgr Private Rendering Methods

//QAS_LCD_FontMgr::drawCharP
//QAS_LCD_FontMgr Private Rendering Method
void QAS_LCD_FontMgr::drawCharP(QAT_Vector2 cPos, char ch) {
 8007722:	b580      	push	{r7, lr}
 8007724:	b08a      	sub	sp, #40	; 0x28
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	4613      	mov	r3, r2
 800772e:	71fb      	strb	r3, [r7, #7]
  uint16_t uLetter = (uint8_t)ch - 33;
 8007730:	79fb      	ldrb	r3, [r7, #7]
 8007732:	b29b      	uxth	r3, r3
 8007734:	3b21      	subs	r3, #33	; 0x21
 8007736:	83bb      	strh	r3, [r7, #28]
  uint16_t uWidth  = m_pCurrent->m_pDesc[uLetter].uWidth;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	6a1a      	ldr	r2, [r3, #32]
 800773e:	8bbb      	ldrh	r3, [r7, #28]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	837b      	strh	r3, [r7, #26]
  uint32_t uOffset = m_pCurrent->m_pDesc[uLetter].uOffset;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	6a1a      	ldr	r2, [r3, #32]
 800774e:	8bbb      	ldrh	r3, [r7, #28]
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	885b      	ldrh	r3, [r3, #2]
 8007756:	627b      	str	r3, [r7, #36]	; 0x24

  uint8_t uLine;
  uint8_t uLineInc;
  uint32_t uCur;

  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 8007758:	2300      	movs	r3, #0
 800775a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800775e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	6912      	ldr	r2, [r2, #16]
 8007766:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007768:	4293      	cmp	r3, r2
 800776a:	da54      	bge.n	8007816 <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0xf4>
    uLineInc = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uCur = cPos.x+((cPos.y+uHeight)*QAD_LTDC_WIDTH);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	4619      	mov	r1, r3
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	885b      	ldrh	r3, [r3, #2]
 800777c:	461a      	mov	r2, r3
 800777e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007782:	4413      	add	r3, r2
 8007784:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007788:	fb02 f303 	mul.w	r3, r2, r3
 800778c:	440b      	add	r3, r1
 800778e:	617b      	str	r3, [r7, #20]
    for (uint16_t i=0; i<uWidth; i++) {
 8007790:	2300      	movs	r3, #0
 8007792:	83fb      	strh	r3, [r7, #30]
 8007794:	8bfa      	ldrh	r2, [r7, #30]
 8007796:	8b7b      	ldrh	r3, [r7, #26]
 8007798:	429a      	cmp	r2, r3
 800779a:	d236      	bcs.n	800780a <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0xe8>
      if (uLineInc == 0) {
 800779c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10a      	bne.n	80077ba <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0x98>
        uLine = m_pCurrent->m_pData[uOffset];
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	4413      	add	r3, r2
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uOffset++;
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	3301      	adds	r3, #1
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (uLine & 0x01)
 80077ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00c      	beq.n	80077e0 <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0xbe>
        m_pBuffer->pixel[uCur+i] = m_uColor;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	695a      	ldr	r2, [r3, #20]
 80077ca:	8bf9      	ldrh	r1, [r7, #30]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	440b      	add	r3, r1
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	441a      	add	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3318      	adds	r3, #24
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f7ff fa74 	bl	8006cc8 <_ZN17QAT_PixelARGB4444aSERKt>
      uLine = uLine >> 1;
 80077e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077e4:	105b      	asrs	r3, r3, #1
 80077e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      uLineInc++;
 80077ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80077ee:	3301      	adds	r3, #1
 80077f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (uLineInc > 7)
 80077f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80077f8:	2b07      	cmp	r3, #7
 80077fa:	d902      	bls.n	8007802 <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0xe0>
        uLineInc = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    for (uint16_t i=0; i<uWidth; i++) {
 8007802:	8bfb      	ldrh	r3, [r7, #30]
 8007804:	3301      	adds	r3, #1
 8007806:	83fb      	strh	r3, [r7, #30]
 8007808:	e7c4      	b.n	8007794 <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0x72>
  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 800780a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800780e:	3301      	adds	r3, #1
 8007810:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007814:	e7a3      	b.n	800775e <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0x3c>
    }
  }
}
 8007816:	bf00      	nop
 8007818:	3728      	adds	r7, #40	; 0x28
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 800781e:	b580      	push	{r7, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	429a      	cmp	r2, r3
 8007832:	d00c      	beq.n	800784e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	4619      	mov	r1, r3
 800783e:	f000 f823 	bl	8007888 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	1d1a      	adds	r2, r3, #4
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	605a      	str	r2, [r3, #4]
      }
 800784c:	e008      	b.n	8007860 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f82d 	bl	80078ae <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>
 8007854:	4603      	mov	r3, r0
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f84e 	bl	80078fc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	f107 030c 	add.w	r3, r7, #12
 8007876:	4611      	mov	r1, r2
 8007878:	4618      	mov	r0, r3
 800787a:	f000 f8fb 	bl	8007a74 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f908 	bl	8007aaa <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 800789a:	4603      	mov	r3, r0
 800789c:	461a      	mov	r2, r3
 800789e:	68b9      	ldr	r1, [r7, #8]
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 f90d 	bl	8007ac0 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 80078a6:	bf00      	nop
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	1d1a      	adds	r2, r3, #4
 80078ba:	f107 030c 	add.w	r3, r7, #12
 80078be:	4611      	mov	r1, r2
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 f8d7 	bl	8007a74 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 f805 	bl	80078e6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80078dc:	4603      	mov	r3, r0
      }
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80078ee:	2301      	movs	r3, #1
      }
 80078f0:	4618      	mov	r0, r3
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80078fc:	b5b0      	push	{r4, r5, r7, lr}
 80078fe:	b08c      	sub	sp, #48	; 0x30
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8007908:	4a59      	ldr	r2, [pc, #356]	; (8007a70 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800790a:	2101      	movs	r1, #1
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f8ed 	bl	8007aec <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>
 8007912:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f7ff ffa1 	bl	8007868 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>
 8007926:	4603      	mov	r3, r0
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	f107 0214 	add.w	r2, r7, #20
 800792e:	f107 0308 	add.w	r3, r7, #8
 8007932:	4611      	mov	r1, r2
 8007934:	4618      	mov	r0, r3
 8007936:	f000 f920 	bl	8007b7a <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800793a:	4603      	mov	r3, r0
 800793c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007942:	4618      	mov	r0, r3
 8007944:	f000 f92e 	bl	8007ba4 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>
 8007948:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800794e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8007954:	69ba      	ldr	r2, [r7, #24]
 8007956:	18d5      	adds	r5, r2, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f8a6 	bl	8007aaa <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 800795e:	4603      	mov	r3, r0
 8007960:	461a      	mov	r2, r3
 8007962:	4629      	mov	r1, r5
 8007964:	4620      	mov	r0, r4
 8007966:	f7ff ff8f 	bl	8007888 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800796a:	2300      	movs	r3, #0
 800796c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800796e:	f7ff ffaf 	bl	80078d0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d027      	beq.n	80079c8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007978:	f107 0308 	add.w	r3, r7, #8
 800797c:	4618      	mov	r0, r3
 800797e:	f000 f889 	bl	8007a94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007982:	4603      	mov	r3, r0
 8007984:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4618      	mov	r0, r3
 800798a:	f7f9 fecc 	bl	8001726 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800798e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	4621      	mov	r1, r4
 8007994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007996:	f000 f919 	bl	8007bcc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800799a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799e:	3304      	adds	r3, #4
 80079a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80079a2:	f107 0308 	add.w	r3, r7, #8
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 f874 	bl	8007a94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 80079ac:	4603      	mov	r3, r0
 80079ae:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7f9 feb7 	bl	8001726 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 80079b8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80079ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079bc:	6a39      	ldr	r1, [r7, #32]
 80079be:	4620      	mov	r0, r4
 80079c0:	f000 f904 	bl	8007bcc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80079c4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80079c6:	e026      	b.n	8007a16 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80079c8:	f107 0308 	add.w	r3, r7, #8
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 f861 	bl	8007a94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 80079d2:	4603      	mov	r3, r0
 80079d4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4618      	mov	r0, r3
 80079da:	f7f9 fea4 	bl	8001726 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 80079de:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	4621      	mov	r1, r4
 80079e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079e6:	f000 f905 	bl	8007bf4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 80079ea:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ee:	3304      	adds	r3, #4
 80079f0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80079f2:	f107 0308 	add.w	r3, r7, #8
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 f84c 	bl	8007a94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 80079fc:	4603      	mov	r3, r0
 80079fe:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7f9 fe8f 	bl	8001726 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007a08:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8007a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a0c:	6a39      	ldr	r1, [r7, #32]
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f000 f8f0 	bl	8007bf4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007a14:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8007a16:	f7ff ff5b 	bl	80078d0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	f083 0301 	eor.w	r3, r3, #1
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d009      	beq.n	8007a3a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7f9 fe7c 	bl	8001726 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	461a      	mov	r2, r3
 8007a32:	6a39      	ldr	r1, [r7, #32]
 8007a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a36:	f7f9 fe81 	bl	800173c <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8007a3a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8007a46:	461a      	mov	r2, r3
 8007a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a4a:	f7f9 fe59 	bl	8001700 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a58:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8007a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	441a      	add	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	609a      	str	r2, [r3, #8]
    }
 8007a66:	bf00      	nop
 8007a68:	3730      	adds	r7, #48	; 0x30
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	08008af0 	.word	0x08008af0

08007a74 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8007ac0:	b590      	push	{r4, r7, lr}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff ffec 	bl	8007aaa <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	681c      	ldr	r4, [r3, #0]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	2004      	movs	r0, #4
 8007adc:	f7ff fc42 	bl	8007364 <_ZnwjPv>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	601c      	str	r4, [r3, #0]
 8007ae4:	bf00      	nop
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd90      	pop	{r4, r7, pc}

08007aec <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8007aec:	b590      	push	{r4, r7, lr}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 f894 	bl	8007c26 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007afe:	4604      	mov	r4, r0
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f7f9 fd48 	bl	8001596 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007b06:	4603      	mov	r3, r0
 8007b08:	1ae2      	subs	r2, r4, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	bf34      	ite	cc
 8007b10:	2301      	movcc	r3, #1
 8007b12:	2300      	movcs	r3, #0
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fd5b 	bl	80085d6 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f7f9 fd38 	bl	8001596 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007b26:	4604      	mov	r4, r0
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7f9 fd34 	bl	8001596 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	613b      	str	r3, [r7, #16]
 8007b32:	f107 0208 	add.w	r2, r7, #8
 8007b36:	f107 0310 	add.w	r3, r7, #16
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 f883 	bl	8007c48 <_ZSt3maxIjERKT_S2_S2_>
 8007b42:	4603      	mov	r3, r0
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4423      	add	r3, r4
 8007b48:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f7f9 fd23 	bl	8001596 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007b50:	4602      	mov	r2, r0
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d306      	bcc.n	8007b66 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 f864 	bl	8007c26 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d904      	bls.n	8007b70 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x84>
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 f85d 	bl	8007c26 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	e000      	b.n	8007b72 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x86>
 8007b70:	697b      	ldr	r3, [r7, #20]
      }
 8007b72:	4618      	mov	r0, r3
 8007b74:	371c      	adds	r7, #28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd90      	pop	{r4, r7, pc}

08007b7a <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007b7a:	b590      	push	{r4, r7, lr}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff ff85 	bl	8007a94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	681c      	ldr	r4, [r3, #0]
 8007b8e:	6838      	ldr	r0, [r7, #0]
 8007b90:	f7ff ff80 	bl	8007a94 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007b94:	4603      	mov	r3, r0
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	1ae3      	subs	r3, r4, r3
 8007b9a:	109b      	asrs	r3, r3, #2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd90      	pop	{r4, r7, pc}

08007ba4 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d006      	beq.n	8007bc2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x1e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 f859 	bl	8007c70 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	e000      	b.n	8007bc4 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x20>
 8007bc2:	2300      	movs	r3, #0
      }
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8007bcc:	b590      	push	{r4, r7, lr}
 8007bce:	b089      	sub	sp, #36	; 0x24
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
 8007bd8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8007bda:	f88d 4000 	strb.w	r4, [sp]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 f852 	bl	8007c8e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8007bea:	4603      	mov	r3, r0
      }
 8007bec:	4618      	mov	r0, r3
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd90      	pop	{r4, r7, pc}

08007bf4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8007bf4:	b590      	push	{r4, r7, lr}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 f855 	bl	8007cb2 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 8007c08:	4604      	mov	r4, r0
 8007c0a:	68b8      	ldr	r0, [r7, #8]
 8007c0c:	f000 f851 	bl	8007cb2 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 8007c10:	4601      	mov	r1, r0
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 f85a 	bl	8007cd0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8007c1c:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd90      	pop	{r4, r7, pc}

08007c26 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b082      	sub	sp, #8
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 f878 	bl	8007d26 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007c36:	4603      	mov	r3, r0
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 f85a 	bl	8007cf2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	4618      	mov	r0, r3
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d201      	bcs.n	8007c62 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	e000      	b.n	8007c64 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8007c62:	687b      	ldr	r3, [r7, #4]
    }
 8007c64:	4618      	mov	r0, r3
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f85c 	bl	8007d3c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>
 8007c84:	4603      	mov	r3, r0
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	60b9      	str	r1, [r7, #8]
 8007c98:	607a      	str	r2, [r7, #4]
 8007c9a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	68b9      	ldr	r1, [r7, #8]
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f868 	bl	8007d78 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007ca8:	4603      	mov	r3, r0
      }
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8007cba:	f107 030c 	add.w	r3, r7, #12
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 f876 	bl	8007db2 <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	68b9      	ldr	r1, [r7, #8]
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 f874 	bl	8007dd0 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8007cfa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007cfe:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f889 	bl	8007e18 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>
 8007d06:	4603      	mov	r3, r0
 8007d08:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007d0a:	f107 0208 	add.w	r2, r7, #8
 8007d0e:	f107 030c 	add.w	r3, r7, #12
 8007d12:	4611      	mov	r1, r2
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 f88b 	bl	8007e30 <_ZSt3minIjERKT_S2_S2_>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	681b      	ldr	r3, [r3, #0]
      }
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f885 	bl	8007e58 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4293      	cmp	r3, r2
 8007d54:	bf8c      	ite	hi
 8007d56:	2301      	movhi	r3, #1
 8007d58:	2300      	movls	r3, #0
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007d60:	f000 fc36 	bl	80085d0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fc1b 	bl	80085a4 <_Znwj>
 8007d6e:	4603      	mov	r3, r0
      }
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007d78:	b5b0      	push	{r4, r5, r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
 8007d84:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f872 	bl	8007e70 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	68b8      	ldr	r0, [r7, #8]
 8007d90:	f000 f86e 	bl	8007e70 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007d94:	4605      	mov	r5, r0
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f86a 	bl	8007e70 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	4629      	mov	r1, r5
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 f86f 	bl	8007e86 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8007da8:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bdb0      	pop	{r4, r5, r7, pc}

08007db2 <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>:
      move_iterator(iterator_type __i)
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 f86c 	bl	8007ec2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>
 8007dea:	4603      	mov	r3, r0
    }
 8007dec:	4618      	mov	r0, r3
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8007e00:	2301      	movs	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
			     && __is_pointer<_II>::__value
			     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
			      _Category>::__copy_m(__first, __last, __result);
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	68b9      	ldr	r1, [r7, #8]
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 f86a 	bl	8007ee2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>
 8007e0e:	4603      	mov	r3, r0
    }
 8007e10:	4618      	mov	r0, r3
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f819 	bl	8007e58 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 8007e26:	4603      	mov	r3, r0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d201      	bcs.n	8007e4a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	e000      	b.n	8007e4c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007e4a:	687b      	ldr	r3, [r7, #4]
    }
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007e60:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007e64:	4618      	mov	r0, r3
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>:
    __niter_base(_Iterator __it)
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b086      	sub	sp, #24
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
 8007e92:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	109b      	asrs	r3, r3, #2
 8007e9c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	dd06      	ble.n	8007eb2 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	68f9      	ldr	r1, [r7, #12]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fc05 	bl	80086bc <memmove>
      return __result + __count;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	4413      	add	r3, r2
    }
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	68b9      	ldr	r1, [r7, #8]
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 f822 	bl	8007f1c <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b086      	sub	sp, #24
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	60f8      	str	r0, [r7, #12]
 8007eea:	60b9      	str	r1, [r7, #8]
 8007eec:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	109b      	asrs	r3, r3, #2
 8007ef6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d006      	beq.n	8007f0c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	461a      	mov	r2, r3
 8007f04:	68f9      	ldr	r1, [r7, #12]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fbd8 	bl	80086bc <memmove>
	  return __result + _Num;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	4413      	add	r3, r2
	}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3718      	adds	r7, #24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8007f1c:	b590      	push	{r4, r7, lr}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 f80f 	bl	8007f4c <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007f2e:	4604      	mov	r4, r0
 8007f30:	68b8      	ldr	r0, [r7, #8]
 8007f32:	f000 f80b 	bl	8007f4c <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007f36:	4603      	mov	r3, r0
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f000 f816 	bl	8007f6e <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 8007f42:	4603      	mov	r3, r0
    }
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd90      	pop	{r4, r7, pc}

08007f4c <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8007f54:	1d3b      	adds	r3, r7, #4
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 f82c 	bl	8007fb4 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f834 	bl	8007fcc <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>
 8007f64:	4603      	mov	r3, r0
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007f6e:	b5b0      	push	{r4, r5, r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	60b9      	str	r1, [r7, #8]
 8007f78:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f7ff ff78 	bl	8007e70 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007f80:	4604      	mov	r4, r0
 8007f82:	68b8      	ldr	r0, [r7, #8]
 8007f84:	f7ff ff74 	bl	8007e70 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007f88:	4605      	mov	r5, r0
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff ff6f 	bl	8007e70 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007f92:	4603      	mov	r3, r0
 8007f94:	461a      	mov	r2, r3
 8007f96:	4629      	mov	r1, r5
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f7ff ff2b 	bl	8007df4 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	1d3b      	adds	r3, r7, #4
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 f81c 	bl	8007fe2 <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>
 8007faa:	4603      	mov	r3, r0
    }
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bdb0      	pop	{r4, r5, r7, pc}

08007fb4 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>:
      base() const
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007fe2:	b480      	push	{r7}
 8007fe4:	b083      	sub	sp, #12
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	7b1b      	ldrb	r3, [r3, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	e010      	b.n	8008032 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	e003      	b.n	8008032 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3308      	adds	r3, #8
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3
}
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 8008064:	6838      	ldr	r0, [r7, #0]
 8008066:	f7f8 f8e7 	bl	8000238 <strlen>
 800806a:	4603      	mov	r3, r0
 800806c:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 800806e:	2300      	movs	r3, #0
 8008070:	81fb      	strh	r3, [r7, #14]
 8008072:	89fa      	ldrh	r2, [r7, #14]
 8008074:	89bb      	ldrh	r3, [r7, #12]
 8008076:	429a      	cmp	r2, r3
 8008078:	d20f      	bcs.n	800809a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3304      	adds	r3, #4
 800807e:	4618      	mov	r0, r3
 8008080:	f000 f81f 	bl	80080c2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008084:	89fb      	ldrh	r3, [r7, #14]
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	4413      	add	r3, r2
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	4619      	mov	r1, r3
 800808e:	f000 f9c7 	bl	8008420 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 8008092:	89fb      	ldrh	r3, [r7, #14]
 8008094:	3301      	adds	r3, #1
 8008096:	81fb      	strh	r3, [r7, #14]
 8008098:	e7eb      	b.n	8008072 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	3304      	adds	r3, #4
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 f80f 	bl	80080c2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80080a4:	4603      	mov	r3, r0
 80080a6:	210d      	movs	r1, #13
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 f9b9 	bl	8008420 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	330c      	adds	r3, #12
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	4798      	blx	r3
}
 80080ba:	bf00      	nop
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b082      	sub	sp, #8
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
	return get();
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f805 	bl	80080da <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 80080d0:	4603      	mov	r3, r0
      }
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 f805 	bl	80080f4 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 80080ea:	4603      	mov	r3, r0
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 f806 	bl	8008110 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008104:	4603      	mov	r3, r0
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4618      	mov	r0, r3
 800811c:	f000 f805 	bl	800812a <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008120:	4603      	mov	r3, r0
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f805 	bl	8008142 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 8008138:	4603      	mov	r3, r0
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4618      	mov	r0, r3
 800814e:	f000 f805 	bl	800815c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 8008152:	4603      	mov	r3, r0
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4618      	mov	r0, r3
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3314      	adds	r3, #20
 8008180:	4618      	mov	r0, r3
 8008182:	f000 f8e2 	bl	800834a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008186:	4603      	mov	r3, r0
 8008188:	4618      	mov	r0, r3
 800818a:	f7fe f9e2 	bl	8006552 <_ZN8QAD_UART4initEv>
 800818e:	4603      	mov	r3, r0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3314      	adds	r3, #20
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 f8d0 	bl	800834a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80081aa:	4603      	mov	r3, r0
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fe f9fa 	bl	80065a6 <_ZN8QAD_UART6deinitEv>
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 80081ba:	b590      	push	{r4, r7, lr}
 80081bc:	b0a5      	sub	sp, #148	; 0x94
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3314      	adds	r3, #20
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 f8be 	bl	800834a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80081ce:	4603      	mov	r3, r0
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fe f9fe 	bl	80065d2 <_ZN8QAD_UART9getHandleEv>
 80081d6:	4602      	mov	r2, r0
 80081d8:	f107 0308 	add.w	r3, r7, #8
 80081dc:	4611      	mov	r1, r2
 80081de:	2284      	movs	r2, #132	; 0x84
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 fa5d 	bl	80086a0 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	bf0c      	ite	eq
 80081f2:	2301      	moveq	r3, #1
 80081f4:	2300      	movne	r3, #0
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01e      	beq.n	800823a <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x80>
  	uint8_t uData = m_pUART->dataRX();
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3314      	adds	r3, #20
 8008200:	4618      	mov	r0, r3
 8008202:	f000 f8a2 	bl	800834a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008206:	4603      	mov	r3, r0
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe fa56 	bl	80066ba <_ZN8QAD_UART6dataRXEv>
 800820e:	4603      	mov	r3, r0
 8008210:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  	if (m_eRXState)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	7b9b      	ldrb	r3, [r3, #14]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00b      	beq.n	8008234 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3308      	adds	r3, #8
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff ff4e 	bl	80080c2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008226:	4602      	mov	r2, r0
 8008228:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800822c:	4619      	mov	r1, r3
 800822e:	4610      	mov	r0, r2
 8008230:	f000 f8f6 	bl	8008420 <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2220      	movs	r2, #32
 8008238:	621a      	str	r2, [r3, #32]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008242:	2b80      	cmp	r3, #128	; 0x80
 8008244:	bf0c      	ite	eq
 8008246:	2301      	moveq	r3, #1
 8008248:	2300      	movne	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b00      	cmp	r3, #0
 800824e:	d034      	beq.n	80082ba <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x100>
  	if (!m_pTXFIFO->empty()) {
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	3304      	adds	r3, #4
 8008254:	4618      	mov	r0, r3
 8008256:	f7ff ff34 	bl	80080c2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800825a:	4603      	mov	r3, r0
 800825c:	4618      	mov	r0, r3
 800825e:	f000 f8cc 	bl	80083fa <_ZN14QAT_FIFOBuffer5emptyEv>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	bf0c      	ite	eq
 8008268:	2301      	moveq	r3, #1
 800826a:	2300      	movne	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d014      	beq.n	800829c <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe2>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	3314      	adds	r3, #20
 8008276:	4618      	mov	r0, r3
 8008278:	f000 f867 	bl	800834a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800827c:	4604      	mov	r4, r0
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3304      	adds	r3, #4
 8008282:	4618      	mov	r0, r3
 8008284:	f7ff ff1d 	bl	80080c2 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008288:	4603      	mov	r3, r0
 800828a:	4618      	mov	r0, r3
 800828c:	f000 f8ec 	bl	8008468 <_ZN14QAT_FIFOBuffer3popEv>
 8008290:	4603      	mov	r3, r0
 8008292:	4619      	mov	r1, r3
 8008294:	4620      	mov	r0, r4
 8008296:	f7fe fa00 	bl	800669a <_ZN8QAD_UART6dataTXEh>
 800829a:	e00b      	b.n	80082b4 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfa>
  	} else {
      m_pUART->stopTX();
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3314      	adds	r3, #20
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 f852 	bl	800834a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80082a6:	4603      	mov	r3, r0
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fe f9b4 	bl	8006616 <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2280      	movs	r2, #128	; 0x80
 80082b8:	621a      	str	r2, [r3, #32]
  }
}
 80082ba:	bf00      	nop
 80082bc:	3794      	adds	r7, #148	; 0x94
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd90      	pop	{r4, r7, pc}

080082c2 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	3314      	adds	r3, #20
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 f83b 	bl	800834a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80082d4:	4603      	mov	r3, r0
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fe f987 	bl	80065ea <_ZN8QAD_UART7startTXEv>
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3314      	adds	r3, #20
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 f82a 	bl	800834a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80082f6:	4603      	mov	r3, r0
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe f98c 	bl	8006616 <_ZN8QAD_UART6stopTXEv>
}
 80082fe:	bf00      	nop
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	3314      	adds	r3, #20
 8008312:	4618      	mov	r0, r3
 8008314:	f000 f819 	bl	800834a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008318:	4603      	mov	r3, r0
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe f991 	bl	8006642 <_ZN8QAD_UART7startRXEv>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	3314      	adds	r3, #20
 8008334:	4618      	mov	r0, r3
 8008336:	f000 f808 	bl	800834a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800833a:	4603      	mov	r3, r0
 800833c:	4618      	mov	r0, r3
 800833e:	f7fe f996 	bl	800666e <_ZN8QAD_UART6stopRXEv>
}
 8008342:	bf00      	nop
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
	return get();
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f805 	bl	8008362 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 8008358:	4603      	mov	r3, r0
      }
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8008362:	b580      	push	{r7, lr}
 8008364:	b082      	sub	sp, #8
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f805 	bl	800837c <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8008372:	4603      	mov	r3, r0
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4618      	mov	r0, r3
 8008388:	f000 f806 	bl	8008398 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800838c:	4603      	mov	r3, r0
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 f805 	bl	80083b2 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80083a8:	4603      	mov	r3, r0
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b082      	sub	sp, #8
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f805 	bl	80083ca <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 80083c0:	4603      	mov	r3, r0
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b082      	sub	sp, #8
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 f805 	bl	80083e4 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 80083da:	4603      	mov	r3, r0
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4618      	mov	r0, r3
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	88da      	ldrh	r2, [r3, #6]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	891b      	ldrh	r3, [r3, #8]
 800840a:	429a      	cmp	r2, r3
 800840c:	d101      	bne.n	8008412 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 800840e:	2301      	movs	r3, #1
 8008410:	e000      	b.n	8008414 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	891b      	ldrh	r3, [r3, #8]
 8008432:	4619      	mov	r1, r3
 8008434:	4610      	mov	r0, r2
 8008436:	f000 f847 	bl	80084c8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800843a:	4602      	mov	r2, r0
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	889a      	ldrh	r2, [r3, #4]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	891b      	ldrh	r3, [r3, #8]
 8008448:	429a      	cmp	r2, r3
 800844a:	d906      	bls.n	800845a <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	891b      	ldrh	r3, [r3, #8]
 8008450:	3301      	adds	r3, #1
 8008452:	b29a      	uxth	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 8008458:	e002      	b.n	8008460 <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	811a      	strh	r2, [r3, #8]
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7ff ffc2 	bl	80083fa <_ZN14QAT_FIFOBuffer5emptyEv>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	bf0c      	ite	eq
 800847c:	2301      	moveq	r3, #1
 800847e:	2300      	movne	r3, #0
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01b      	beq.n	80084be <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	88db      	ldrh	r3, [r3, #6]
 800848c:	4619      	mov	r1, r3
 800848e:	4610      	mov	r0, r2
 8008490:	f000 f81a 	bl	80084c8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8008494:	4603      	mov	r3, r0
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	889a      	ldrh	r2, [r3, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	88db      	ldrh	r3, [r3, #6]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d906      	bls.n	80084b4 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	88db      	ldrh	r3, [r3, #6]
 80084aa:	3301      	adds	r3, #1
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	80da      	strh	r2, [r3, #6]
 80084b2:	e002      	b.n	80084ba <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	80da      	strh	r2, [r3, #6]
		return uData;
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
 80084bc:	e000      	b.n	80084c0 <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
	return get()[__i];
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f807 	bl	80084e6 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 80084d8:	4602      	mov	r2, r0
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	4413      	add	r3, r2
      }
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 f805 	bl	8008500 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80084f6:	4603      	mov	r3, r0
 80084f8:	4618      	mov	r0, r3
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4618      	mov	r0, r3
 800850c:	f000 f806 	bl	800851c <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008510:	4603      	mov	r3, r0
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4618      	mov	r0, r3
 8008528:	f000 f805 	bl	8008536 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800852c:	4603      	mov	r3, r0
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008536:	b580      	push	{r7, lr}
 8008538:	b082      	sub	sp, #8
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f805 	bl	800854e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8008544:	4603      	mov	r3, r0
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4618      	mov	r0, r3
 800855a:	f000 f805 	bl	8008568 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 800855e:	4603      	mov	r3, r0
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4618      	mov	r0, r3
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <_ZdlPv>:
 800857e:	f000 b887 	b.w	8008690 <free>

08008582 <_ZdlPvj>:
 8008582:	f7ff bffc 	b.w	800857e <_ZdlPv>

08008586 <__cxa_guard_acquire>:
 8008586:	6803      	ldr	r3, [r0, #0]
 8008588:	07db      	lsls	r3, r3, #31
 800858a:	d406      	bmi.n	800859a <__cxa_guard_acquire+0x14>
 800858c:	7843      	ldrb	r3, [r0, #1]
 800858e:	b103      	cbz	r3, 8008592 <__cxa_guard_acquire+0xc>
 8008590:	deff      	udf	#255	; 0xff
 8008592:	2301      	movs	r3, #1
 8008594:	7043      	strb	r3, [r0, #1]
 8008596:	4618      	mov	r0, r3
 8008598:	4770      	bx	lr
 800859a:	2000      	movs	r0, #0
 800859c:	4770      	bx	lr

0800859e <__cxa_guard_release>:
 800859e:	2301      	movs	r3, #1
 80085a0:	6003      	str	r3, [r0, #0]
 80085a2:	4770      	bx	lr

080085a4 <_Znwj>:
 80085a4:	2801      	cmp	r0, #1
 80085a6:	bf38      	it	cc
 80085a8:	2001      	movcc	r0, #1
 80085aa:	b510      	push	{r4, lr}
 80085ac:	4604      	mov	r4, r0
 80085ae:	4620      	mov	r0, r4
 80085b0:	f000 f866 	bl	8008680 <malloc>
 80085b4:	b930      	cbnz	r0, 80085c4 <_Znwj+0x20>
 80085b6:	f000 f823 	bl	8008600 <_ZSt15get_new_handlerv>
 80085ba:	b908      	cbnz	r0, 80085c0 <_Znwj+0x1c>
 80085bc:	f000 f828 	bl	8008610 <abort>
 80085c0:	4780      	blx	r0
 80085c2:	e7f4      	b.n	80085ae <_Znwj+0xa>
 80085c4:	bd10      	pop	{r4, pc}

080085c6 <_Znaj>:
 80085c6:	f7ff bfed 	b.w	80085a4 <_Znwj>

080085ca <__cxa_pure_virtual>:
 80085ca:	b508      	push	{r3, lr}
 80085cc:	f000 f812 	bl	80085f4 <_ZSt9terminatev>

080085d0 <_ZSt17__throw_bad_allocv>:
 80085d0:	b508      	push	{r3, lr}
 80085d2:	f000 f81d 	bl	8008610 <abort>

080085d6 <_ZSt20__throw_length_errorPKc>:
 80085d6:	b508      	push	{r3, lr}
 80085d8:	f000 f81a 	bl	8008610 <abort>

080085dc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80085dc:	b508      	push	{r3, lr}
 80085de:	4780      	blx	r0
 80085e0:	f000 f816 	bl	8008610 <abort>

080085e4 <_ZSt13get_terminatev>:
 80085e4:	4b02      	ldr	r3, [pc, #8]	; (80085f0 <_ZSt13get_terminatev+0xc>)
 80085e6:	6818      	ldr	r0, [r3, #0]
 80085e8:	f3bf 8f5b 	dmb	ish
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	2000000c 	.word	0x2000000c

080085f4 <_ZSt9terminatev>:
 80085f4:	b508      	push	{r3, lr}
 80085f6:	f7ff fff5 	bl	80085e4 <_ZSt13get_terminatev>
 80085fa:	f7ff ffef 	bl	80085dc <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08008600 <_ZSt15get_new_handlerv>:
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <_ZSt15get_new_handlerv+0xc>)
 8008602:	6818      	ldr	r0, [r3, #0]
 8008604:	f3bf 8f5b 	dmb	ish
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	200002f4 	.word	0x200002f4

08008610 <abort>:
 8008610:	b508      	push	{r3, lr}
 8008612:	2006      	movs	r0, #6
 8008614:	f000 f956 	bl	80088c4 <raise>
 8008618:	2001      	movs	r0, #1
 800861a:	f7f9 faaa 	bl	8001b72 <_exit>

0800861e <atexit>:
 800861e:	2300      	movs	r3, #0
 8008620:	4601      	mov	r1, r0
 8008622:	461a      	mov	r2, r3
 8008624:	4618      	mov	r0, r3
 8008626:	f000 b971 	b.w	800890c <__register_exitproc>
	...

0800862c <__errno>:
 800862c:	4b01      	ldr	r3, [pc, #4]	; (8008634 <__errno+0x8>)
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	20000010 	.word	0x20000010

08008638 <__libc_init_array>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	4d0d      	ldr	r5, [pc, #52]	; (8008670 <__libc_init_array+0x38>)
 800863c:	4c0d      	ldr	r4, [pc, #52]	; (8008674 <__libc_init_array+0x3c>)
 800863e:	1b64      	subs	r4, r4, r5
 8008640:	10a4      	asrs	r4, r4, #2
 8008642:	2600      	movs	r6, #0
 8008644:	42a6      	cmp	r6, r4
 8008646:	d109      	bne.n	800865c <__libc_init_array+0x24>
 8008648:	4d0b      	ldr	r5, [pc, #44]	; (8008678 <__libc_init_array+0x40>)
 800864a:	4c0c      	ldr	r4, [pc, #48]	; (800867c <__libc_init_array+0x44>)
 800864c:	f000 f9d0 	bl	80089f0 <_init>
 8008650:	1b64      	subs	r4, r4, r5
 8008652:	10a4      	asrs	r4, r4, #2
 8008654:	2600      	movs	r6, #0
 8008656:	42a6      	cmp	r6, r4
 8008658:	d105      	bne.n	8008666 <__libc_init_array+0x2e>
 800865a:	bd70      	pop	{r4, r5, r6, pc}
 800865c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008660:	4798      	blx	r3
 8008662:	3601      	adds	r6, #1
 8008664:	e7ee      	b.n	8008644 <__libc_init_array+0xc>
 8008666:	f855 3b04 	ldr.w	r3, [r5], #4
 800866a:	4798      	blx	r3
 800866c:	3601      	adds	r6, #1
 800866e:	e7f2      	b.n	8008656 <__libc_init_array+0x1e>
 8008670:	0800ab8c 	.word	0x0800ab8c
 8008674:	0800ab8c 	.word	0x0800ab8c
 8008678:	0800ab8c 	.word	0x0800ab8c
 800867c:	0800ab90 	.word	0x0800ab90

08008680 <malloc>:
 8008680:	4b02      	ldr	r3, [pc, #8]	; (800868c <malloc+0xc>)
 8008682:	4601      	mov	r1, r0
 8008684:	6818      	ldr	r0, [r3, #0]
 8008686:	f000 b88b 	b.w	80087a0 <_malloc_r>
 800868a:	bf00      	nop
 800868c:	20000010 	.word	0x20000010

08008690 <free>:
 8008690:	4b02      	ldr	r3, [pc, #8]	; (800869c <free+0xc>)
 8008692:	4601      	mov	r1, r0
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	f000 b833 	b.w	8008700 <_free_r>
 800869a:	bf00      	nop
 800869c:	20000010 	.word	0x20000010

080086a0 <memcpy>:
 80086a0:	440a      	add	r2, r1
 80086a2:	4291      	cmp	r1, r2
 80086a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086a8:	d100      	bne.n	80086ac <memcpy+0xc>
 80086aa:	4770      	bx	lr
 80086ac:	b510      	push	{r4, lr}
 80086ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086b6:	4291      	cmp	r1, r2
 80086b8:	d1f9      	bne.n	80086ae <memcpy+0xe>
 80086ba:	bd10      	pop	{r4, pc}

080086bc <memmove>:
 80086bc:	4288      	cmp	r0, r1
 80086be:	b510      	push	{r4, lr}
 80086c0:	eb01 0402 	add.w	r4, r1, r2
 80086c4:	d902      	bls.n	80086cc <memmove+0x10>
 80086c6:	4284      	cmp	r4, r0
 80086c8:	4623      	mov	r3, r4
 80086ca:	d807      	bhi.n	80086dc <memmove+0x20>
 80086cc:	1e43      	subs	r3, r0, #1
 80086ce:	42a1      	cmp	r1, r4
 80086d0:	d008      	beq.n	80086e4 <memmove+0x28>
 80086d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086da:	e7f8      	b.n	80086ce <memmove+0x12>
 80086dc:	4402      	add	r2, r0
 80086de:	4601      	mov	r1, r0
 80086e0:	428a      	cmp	r2, r1
 80086e2:	d100      	bne.n	80086e6 <memmove+0x2a>
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ee:	e7f7      	b.n	80086e0 <memmove+0x24>

080086f0 <memset>:
 80086f0:	4402      	add	r2, r0
 80086f2:	4603      	mov	r3, r0
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d100      	bne.n	80086fa <memset+0xa>
 80086f8:	4770      	bx	lr
 80086fa:	f803 1b01 	strb.w	r1, [r3], #1
 80086fe:	e7f9      	b.n	80086f4 <memset+0x4>

08008700 <_free_r>:
 8008700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008702:	2900      	cmp	r1, #0
 8008704:	d048      	beq.n	8008798 <_free_r+0x98>
 8008706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800870a:	9001      	str	r0, [sp, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f1a1 0404 	sub.w	r4, r1, #4
 8008712:	bfb8      	it	lt
 8008714:	18e4      	addlt	r4, r4, r3
 8008716:	f000 f95f 	bl	80089d8 <__malloc_lock>
 800871a:	4a20      	ldr	r2, [pc, #128]	; (800879c <_free_r+0x9c>)
 800871c:	9801      	ldr	r0, [sp, #4]
 800871e:	6813      	ldr	r3, [r2, #0]
 8008720:	4615      	mov	r5, r2
 8008722:	b933      	cbnz	r3, 8008732 <_free_r+0x32>
 8008724:	6063      	str	r3, [r4, #4]
 8008726:	6014      	str	r4, [r2, #0]
 8008728:	b003      	add	sp, #12
 800872a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800872e:	f000 b959 	b.w	80089e4 <__malloc_unlock>
 8008732:	42a3      	cmp	r3, r4
 8008734:	d90b      	bls.n	800874e <_free_r+0x4e>
 8008736:	6821      	ldr	r1, [r4, #0]
 8008738:	1862      	adds	r2, r4, r1
 800873a:	4293      	cmp	r3, r2
 800873c:	bf04      	itt	eq
 800873e:	681a      	ldreq	r2, [r3, #0]
 8008740:	685b      	ldreq	r3, [r3, #4]
 8008742:	6063      	str	r3, [r4, #4]
 8008744:	bf04      	itt	eq
 8008746:	1852      	addeq	r2, r2, r1
 8008748:	6022      	streq	r2, [r4, #0]
 800874a:	602c      	str	r4, [r5, #0]
 800874c:	e7ec      	b.n	8008728 <_free_r+0x28>
 800874e:	461a      	mov	r2, r3
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	b10b      	cbz	r3, 8008758 <_free_r+0x58>
 8008754:	42a3      	cmp	r3, r4
 8008756:	d9fa      	bls.n	800874e <_free_r+0x4e>
 8008758:	6811      	ldr	r1, [r2, #0]
 800875a:	1855      	adds	r5, r2, r1
 800875c:	42a5      	cmp	r5, r4
 800875e:	d10b      	bne.n	8008778 <_free_r+0x78>
 8008760:	6824      	ldr	r4, [r4, #0]
 8008762:	4421      	add	r1, r4
 8008764:	1854      	adds	r4, r2, r1
 8008766:	42a3      	cmp	r3, r4
 8008768:	6011      	str	r1, [r2, #0]
 800876a:	d1dd      	bne.n	8008728 <_free_r+0x28>
 800876c:	681c      	ldr	r4, [r3, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	6053      	str	r3, [r2, #4]
 8008772:	4421      	add	r1, r4
 8008774:	6011      	str	r1, [r2, #0]
 8008776:	e7d7      	b.n	8008728 <_free_r+0x28>
 8008778:	d902      	bls.n	8008780 <_free_r+0x80>
 800877a:	230c      	movs	r3, #12
 800877c:	6003      	str	r3, [r0, #0]
 800877e:	e7d3      	b.n	8008728 <_free_r+0x28>
 8008780:	6825      	ldr	r5, [r4, #0]
 8008782:	1961      	adds	r1, r4, r5
 8008784:	428b      	cmp	r3, r1
 8008786:	bf04      	itt	eq
 8008788:	6819      	ldreq	r1, [r3, #0]
 800878a:	685b      	ldreq	r3, [r3, #4]
 800878c:	6063      	str	r3, [r4, #4]
 800878e:	bf04      	itt	eq
 8008790:	1949      	addeq	r1, r1, r5
 8008792:	6021      	streq	r1, [r4, #0]
 8008794:	6054      	str	r4, [r2, #4]
 8008796:	e7c7      	b.n	8008728 <_free_r+0x28>
 8008798:	b003      	add	sp, #12
 800879a:	bd30      	pop	{r4, r5, pc}
 800879c:	200002f8 	.word	0x200002f8

080087a0 <_malloc_r>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	1ccd      	adds	r5, r1, #3
 80087a4:	f025 0503 	bic.w	r5, r5, #3
 80087a8:	3508      	adds	r5, #8
 80087aa:	2d0c      	cmp	r5, #12
 80087ac:	bf38      	it	cc
 80087ae:	250c      	movcc	r5, #12
 80087b0:	2d00      	cmp	r5, #0
 80087b2:	4606      	mov	r6, r0
 80087b4:	db01      	blt.n	80087ba <_malloc_r+0x1a>
 80087b6:	42a9      	cmp	r1, r5
 80087b8:	d903      	bls.n	80087c2 <_malloc_r+0x22>
 80087ba:	230c      	movs	r3, #12
 80087bc:	6033      	str	r3, [r6, #0]
 80087be:	2000      	movs	r0, #0
 80087c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c2:	f000 f909 	bl	80089d8 <__malloc_lock>
 80087c6:	4921      	ldr	r1, [pc, #132]	; (800884c <_malloc_r+0xac>)
 80087c8:	680a      	ldr	r2, [r1, #0]
 80087ca:	4614      	mov	r4, r2
 80087cc:	b99c      	cbnz	r4, 80087f6 <_malloc_r+0x56>
 80087ce:	4f20      	ldr	r7, [pc, #128]	; (8008850 <_malloc_r+0xb0>)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	b923      	cbnz	r3, 80087de <_malloc_r+0x3e>
 80087d4:	4621      	mov	r1, r4
 80087d6:	4630      	mov	r0, r6
 80087d8:	f000 f83c 	bl	8008854 <_sbrk_r>
 80087dc:	6038      	str	r0, [r7, #0]
 80087de:	4629      	mov	r1, r5
 80087e0:	4630      	mov	r0, r6
 80087e2:	f000 f837 	bl	8008854 <_sbrk_r>
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	d123      	bne.n	8008832 <_malloc_r+0x92>
 80087ea:	230c      	movs	r3, #12
 80087ec:	6033      	str	r3, [r6, #0]
 80087ee:	4630      	mov	r0, r6
 80087f0:	f000 f8f8 	bl	80089e4 <__malloc_unlock>
 80087f4:	e7e3      	b.n	80087be <_malloc_r+0x1e>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	1b5b      	subs	r3, r3, r5
 80087fa:	d417      	bmi.n	800882c <_malloc_r+0x8c>
 80087fc:	2b0b      	cmp	r3, #11
 80087fe:	d903      	bls.n	8008808 <_malloc_r+0x68>
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	441c      	add	r4, r3
 8008804:	6025      	str	r5, [r4, #0]
 8008806:	e004      	b.n	8008812 <_malloc_r+0x72>
 8008808:	6863      	ldr	r3, [r4, #4]
 800880a:	42a2      	cmp	r2, r4
 800880c:	bf0c      	ite	eq
 800880e:	600b      	streq	r3, [r1, #0]
 8008810:	6053      	strne	r3, [r2, #4]
 8008812:	4630      	mov	r0, r6
 8008814:	f000 f8e6 	bl	80089e4 <__malloc_unlock>
 8008818:	f104 000b 	add.w	r0, r4, #11
 800881c:	1d23      	adds	r3, r4, #4
 800881e:	f020 0007 	bic.w	r0, r0, #7
 8008822:	1ac2      	subs	r2, r0, r3
 8008824:	d0cc      	beq.n	80087c0 <_malloc_r+0x20>
 8008826:	1a1b      	subs	r3, r3, r0
 8008828:	50a3      	str	r3, [r4, r2]
 800882a:	e7c9      	b.n	80087c0 <_malloc_r+0x20>
 800882c:	4622      	mov	r2, r4
 800882e:	6864      	ldr	r4, [r4, #4]
 8008830:	e7cc      	b.n	80087cc <_malloc_r+0x2c>
 8008832:	1cc4      	adds	r4, r0, #3
 8008834:	f024 0403 	bic.w	r4, r4, #3
 8008838:	42a0      	cmp	r0, r4
 800883a:	d0e3      	beq.n	8008804 <_malloc_r+0x64>
 800883c:	1a21      	subs	r1, r4, r0
 800883e:	4630      	mov	r0, r6
 8008840:	f000 f808 	bl	8008854 <_sbrk_r>
 8008844:	3001      	adds	r0, #1
 8008846:	d1dd      	bne.n	8008804 <_malloc_r+0x64>
 8008848:	e7cf      	b.n	80087ea <_malloc_r+0x4a>
 800884a:	bf00      	nop
 800884c:	200002f8 	.word	0x200002f8
 8008850:	200002fc 	.word	0x200002fc

08008854 <_sbrk_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d06      	ldr	r5, [pc, #24]	; (8008870 <_sbrk_r+0x1c>)
 8008858:	2300      	movs	r3, #0
 800885a:	4604      	mov	r4, r0
 800885c:	4608      	mov	r0, r1
 800885e:	602b      	str	r3, [r5, #0]
 8008860:	f7f9 f992 	bl	8001b88 <_sbrk>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d102      	bne.n	800886e <_sbrk_r+0x1a>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	b103      	cbz	r3, 800886e <_sbrk_r+0x1a>
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	200003a0 	.word	0x200003a0

08008874 <_raise_r>:
 8008874:	291f      	cmp	r1, #31
 8008876:	b538      	push	{r3, r4, r5, lr}
 8008878:	4604      	mov	r4, r0
 800887a:	460d      	mov	r5, r1
 800887c:	d904      	bls.n	8008888 <_raise_r+0x14>
 800887e:	2316      	movs	r3, #22
 8008880:	6003      	str	r3, [r0, #0]
 8008882:	f04f 30ff 	mov.w	r0, #4294967295
 8008886:	bd38      	pop	{r3, r4, r5, pc}
 8008888:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800888a:	b112      	cbz	r2, 8008892 <_raise_r+0x1e>
 800888c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008890:	b94b      	cbnz	r3, 80088a6 <_raise_r+0x32>
 8008892:	4620      	mov	r0, r4
 8008894:	f000 f830 	bl	80088f8 <_getpid_r>
 8008898:	462a      	mov	r2, r5
 800889a:	4601      	mov	r1, r0
 800889c:	4620      	mov	r0, r4
 800889e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088a2:	f000 b817 	b.w	80088d4 <_kill_r>
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d00a      	beq.n	80088c0 <_raise_r+0x4c>
 80088aa:	1c59      	adds	r1, r3, #1
 80088ac:	d103      	bne.n	80088b6 <_raise_r+0x42>
 80088ae:	2316      	movs	r3, #22
 80088b0:	6003      	str	r3, [r0, #0]
 80088b2:	2001      	movs	r0, #1
 80088b4:	e7e7      	b.n	8008886 <_raise_r+0x12>
 80088b6:	2400      	movs	r4, #0
 80088b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088bc:	4628      	mov	r0, r5
 80088be:	4798      	blx	r3
 80088c0:	2000      	movs	r0, #0
 80088c2:	e7e0      	b.n	8008886 <_raise_r+0x12>

080088c4 <raise>:
 80088c4:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <raise+0xc>)
 80088c6:	4601      	mov	r1, r0
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f7ff bfd3 	b.w	8008874 <_raise_r>
 80088ce:	bf00      	nop
 80088d0:	20000010 	.word	0x20000010

080088d4 <_kill_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d07      	ldr	r5, [pc, #28]	; (80088f4 <_kill_r+0x20>)
 80088d8:	2300      	movs	r3, #0
 80088da:	4604      	mov	r4, r0
 80088dc:	4608      	mov	r0, r1
 80088de:	4611      	mov	r1, r2
 80088e0:	602b      	str	r3, [r5, #0]
 80088e2:	f7f9 f936 	bl	8001b52 <_kill>
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	d102      	bne.n	80088f0 <_kill_r+0x1c>
 80088ea:	682b      	ldr	r3, [r5, #0]
 80088ec:	b103      	cbz	r3, 80088f0 <_kill_r+0x1c>
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	bd38      	pop	{r3, r4, r5, pc}
 80088f2:	bf00      	nop
 80088f4:	200003a0 	.word	0x200003a0

080088f8 <_getpid_r>:
 80088f8:	f7f9 b923 	b.w	8001b42 <_getpid>

080088fc <strcpy>:
 80088fc:	4603      	mov	r3, r0
 80088fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008902:	f803 2b01 	strb.w	r2, [r3], #1
 8008906:	2a00      	cmp	r2, #0
 8008908:	d1f9      	bne.n	80088fe <strcpy+0x2>
 800890a:	4770      	bx	lr

0800890c <__register_exitproc>:
 800890c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008910:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80089cc <__register_exitproc+0xc0>
 8008914:	4606      	mov	r6, r0
 8008916:	f8d8 0000 	ldr.w	r0, [r8]
 800891a:	461f      	mov	r7, r3
 800891c:	460d      	mov	r5, r1
 800891e:	4691      	mov	r9, r2
 8008920:	f000 f856 	bl	80089d0 <__retarget_lock_acquire_recursive>
 8008924:	4b25      	ldr	r3, [pc, #148]	; (80089bc <__register_exitproc+0xb0>)
 8008926:	681c      	ldr	r4, [r3, #0]
 8008928:	b934      	cbnz	r4, 8008938 <__register_exitproc+0x2c>
 800892a:	4c25      	ldr	r4, [pc, #148]	; (80089c0 <__register_exitproc+0xb4>)
 800892c:	601c      	str	r4, [r3, #0]
 800892e:	4b25      	ldr	r3, [pc, #148]	; (80089c4 <__register_exitproc+0xb8>)
 8008930:	b113      	cbz	r3, 8008938 <__register_exitproc+0x2c>
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8008938:	6863      	ldr	r3, [r4, #4]
 800893a:	2b1f      	cmp	r3, #31
 800893c:	dd07      	ble.n	800894e <__register_exitproc+0x42>
 800893e:	f8d8 0000 	ldr.w	r0, [r8]
 8008942:	f000 f847 	bl	80089d4 <__retarget_lock_release_recursive>
 8008946:	f04f 30ff 	mov.w	r0, #4294967295
 800894a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894e:	b34e      	cbz	r6, 80089a4 <__register_exitproc+0x98>
 8008950:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8008954:	b988      	cbnz	r0, 800897a <__register_exitproc+0x6e>
 8008956:	4b1c      	ldr	r3, [pc, #112]	; (80089c8 <__register_exitproc+0xbc>)
 8008958:	b923      	cbnz	r3, 8008964 <__register_exitproc+0x58>
 800895a:	f8d8 0000 	ldr.w	r0, [r8]
 800895e:	f000 f838 	bl	80089d2 <__retarget_lock_release>
 8008962:	e7f0      	b.n	8008946 <__register_exitproc+0x3a>
 8008964:	f44f 7084 	mov.w	r0, #264	; 0x108
 8008968:	f7ff fe8a 	bl	8008680 <malloc>
 800896c:	2800      	cmp	r0, #0
 800896e:	d0f4      	beq.n	800895a <__register_exitproc+0x4e>
 8008970:	2300      	movs	r3, #0
 8008972:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8008976:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800897a:	6863      	ldr	r3, [r4, #4]
 800897c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8008980:	2201      	movs	r2, #1
 8008982:	409a      	lsls	r2, r3
 8008984:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8008988:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800898c:	4313      	orrs	r3, r2
 800898e:	2e02      	cmp	r6, #2
 8008990:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8008994:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8008998:	bf02      	ittt	eq
 800899a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800899e:	431a      	orreq	r2, r3
 80089a0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80089a4:	6863      	ldr	r3, [r4, #4]
 80089a6:	f8d8 0000 	ldr.w	r0, [r8]
 80089aa:	1c5a      	adds	r2, r3, #1
 80089ac:	3302      	adds	r3, #2
 80089ae:	6062      	str	r2, [r4, #4]
 80089b0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80089b4:	f000 f80e 	bl	80089d4 <__retarget_lock_release_recursive>
 80089b8:	2000      	movs	r0, #0
 80089ba:	e7c6      	b.n	800894a <__register_exitproc+0x3e>
 80089bc:	2000038c 	.word	0x2000038c
 80089c0:	20000300 	.word	0x20000300
 80089c4:	00000000 	.word	0x00000000
 80089c8:	08008681 	.word	0x08008681
 80089cc:	20000074 	.word	0x20000074

080089d0 <__retarget_lock_acquire_recursive>:
 80089d0:	4770      	bx	lr

080089d2 <__retarget_lock_release>:
 80089d2:	4770      	bx	lr

080089d4 <__retarget_lock_release_recursive>:
 80089d4:	4770      	bx	lr
	...

080089d8 <__malloc_lock>:
 80089d8:	4801      	ldr	r0, [pc, #4]	; (80089e0 <__malloc_lock+0x8>)
 80089da:	f7ff bff9 	b.w	80089d0 <__retarget_lock_acquire_recursive>
 80089de:	bf00      	nop
 80089e0:	20000398 	.word	0x20000398

080089e4 <__malloc_unlock>:
 80089e4:	4801      	ldr	r0, [pc, #4]	; (80089ec <__malloc_unlock+0x8>)
 80089e6:	f7ff bff5 	b.w	80089d4 <__retarget_lock_release_recursive>
 80089ea:	bf00      	nop
 80089ec:	20000398 	.word	0x20000398

080089f0 <_init>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	bf00      	nop
 80089f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f6:	bc08      	pop	{r3}
 80089f8:	469e      	mov	lr, r3
 80089fa:	4770      	bx	lr

080089fc <_fini>:
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	bf00      	nop
 8008a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a02:	bc08      	pop	{r3}
 8008a04:	469e      	mov	lr, r3
 8008a06:	4770      	bx	lr
