
STM32 F7D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087c0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036c8  080089b8  080089b8  000189b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c080  0800c080  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c080  0800c080  0001c080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c088  0800c088  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c088  0800c088  0001c088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c08c  0800c08c  0001c08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000078  0800c108  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0800c108  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_line   000203b9  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0003bddf  00000000  00000000  0004045f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007912  00000000  00000000  0007c23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001898  00000000  00000000  00083b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00147fcc  00000000  00000000  000853e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000016e0  00000000  00000000  001cd3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a121  00000000  00000000  001cea98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00208bb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e58  00000000  00000000  00208c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000078 	.word	0x20000078
 8000214:	00000000 	.word	0x00000000
 8000218:	080089a0 	.word	0x080089a0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000007c 	.word	0x2000007c
 8000234:	080089a0 	.word	0x080089a0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000546:	490e      	ldr	r1, [pc, #56]	; (8000580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000548:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800055c:	4c0b      	ldr	r4, [pc, #44]	; (800058c <LoopFillZerobss+0x26>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800056a:	f001 fac3 	bl	8001af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056e:	f008 f83b 	bl	80085e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000572:	f000 fd59 	bl	8001028 <main>
  bx  lr    
 8000576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000578:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000580:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000584:	0800c090 	.word	0x0800c090
  ldr r2, =_sbss
 8000588:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800058c:	200003a4 	.word	0x200003a4

08000590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC_IRQHandler>
	...

08000594 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000598:	f3bf 8f4f 	dsb	sy
}
 800059c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800059e:	f3bf 8f6f 	isb	sy
}
 80005a2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <SCB_EnableICache+0x48>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b2:	f3bf 8f6f 	isb	sy
}
 80005b6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <SCB_EnableICache+0x48>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <SCB_EnableICache+0x48>)
 80005be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c4:	f3bf 8f4f 	dsb	sy
}
 80005c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ca:	f3bf 8f6f 	isb	sy
}
 80005ce:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <SCB_EnableDCache+0x9c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <SCB_EnableDCache+0x9c>)
 80005f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005fa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	0b5b      	lsrs	r3, r3, #13
 8000600:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000604:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	08db      	lsrs	r3, r3, #3
 800060a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800060e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	015a      	lsls	r2, r3, #5
 8000614:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000618:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061e:	4917      	ldr	r1, [pc, #92]	; (800067c <SCB_EnableDCache+0x9c>)
 8000620:	4313      	orrs	r3, r2
 8000622:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1e5a      	subs	r2, r3, #1
 800062a:	60ba      	str	r2, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf14      	ite	ne
 8000630:	2301      	movne	r3, #1
 8000632:	2300      	moveq	r3, #0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d000      	beq.n	800063c <SCB_EnableDCache+0x5c>
      do {
 800063a:	e7e9      	b.n	8000610 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	1e5a      	subs	r2, r3, #1
 8000640:	60fa      	str	r2, [r7, #12]
 8000642:	2b00      	cmp	r3, #0
 8000644:	bf14      	ite	ne
 8000646:	2301      	movne	r3, #1
 8000648:	2300      	moveq	r3, #0
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d000      	beq.n	8000652 <SCB_EnableDCache+0x72>
    do {
 8000650:	e7d9      	b.n	8000606 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000652:	f3bf 8f4f 	dsb	sy
}
 8000656:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <SCB_EnableDCache+0x9c>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <SCB_EnableDCache+0x9c>)
 800065e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000662:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000664:	f3bf 8f4f 	dsb	sy
}
 8000668:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800066a:	f3bf 8f6f 	isb	sy
}
 800066e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks
//Also enables all GPIO ports, and both DMA1 and DMA2 peripherals
//
//Returns QA_OK if successful, or QA_Fail if initialization failed
QA_Result SystemInitialize(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b0c6      	sub	sp, #280	; 0x118
 8000684:	af00      	add	r7, sp, #0

  //------------------------------------
  //Enable CPU Instruction & Data Caches
  SCB_EnableICache();
 8000686:	f7ff ff85 	bl	8000594 <SCB_EnableICache>
  SCB_EnableDCache();
 800068a:	f7ff ffa9 	bl	80005e0 <SCB_EnableDCache>

	//----------------------
	//Enable ART Accelerator
  __HAL_FLASH_ART_ENABLE();
 800068e:	4b67      	ldr	r3, [pc, #412]	; (800082c <_Z16SystemInitializev+0x1ac>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a66      	ldr	r2, [pc, #408]	; (800082c <_Z16SystemInitializev+0x1ac>)
 8000694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000698:	6013      	str	r3, [r2, #0]

  //---------------------
  //Enable Flash Prefetch
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800069a:	4b64      	ldr	r3, [pc, #400]	; (800082c <_Z16SystemInitializev+0x1ac>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a63      	ldr	r2, [pc, #396]	; (800082c <_Z16SystemInitializev+0x1ac>)
 80006a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a4:	6013      	str	r3, [r2, #0]

  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a6:	2003      	movs	r0, #3
 80006a8:	f001 fdf6 	bl	8002298 <HAL_NVIC_SetPriorityGrouping>

  //------------
  //Init SysTick
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f001 fc8b 	bl	8001fc8 <HAL_InitTick>

  //------------------------------
  //Configure LSE Drive Capability
  HAL_PWR_EnableBkUpAccess();
 80006b2:	f003 f989 	bl	80039c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b6:	4b5e      	ldr	r3, [pc, #376]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006ba:	4a5d      	ldr	r2, [pc, #372]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006bc:	f023 0318 	bic.w	r3, r3, #24
 80006c0:	6713      	str	r3, [r2, #112]	; 0x70

  //------------------------------------------------
  //Configure Main Internal Regulator Output Voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b5b      	ldr	r3, [pc, #364]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	4a5a      	ldr	r2, [pc, #360]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	6413      	str	r3, [r2, #64]	; 0x40
 80006ce:	4b58      	ldr	r3, [pc, #352]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006da:	4b56      	ldr	r3, [pc, #344]	; (8000834 <_Z16SystemInitializev+0x1b4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a55      	ldr	r2, [pc, #340]	; (8000834 <_Z16SystemInitializev+0x1b4>)
 80006e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	4b53      	ldr	r3, [pc, #332]	; (8000834 <_Z16SystemInitializev+0x1b4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80006f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    //------------
    //Setup Clocks

  //------------------------------
  //Enable Clock Sources and Setup
  RCC_OscInitTypeDef RCC_OscInit = {0};
 80006f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006f6:	2234      	movs	r2, #52	; 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f007 ffd0 	bl	80086a0 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | //Define HSE (High Speed External) oscillator to be configured (used for main system clock)
 8000700:	2305      	movs	r3, #5
 8000702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  		                         RCC_OSCILLATORTYPE_LSE;  //Define LSE (Low Speed External) oscillator to be configured (used for RTC - Real Time Clock)
  RCC_OscInit.HSEState       = RCC_HSE_ON;              //Enable HSE
 8000706:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800070a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInit.LSEState       = RCC_LSE_ON;              //Enable LSE
 800070e:	2301      	movs	r3, #1
 8000710:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;              //Enable primary PLL
 8000714:	2302      	movs	r3, #2
 8000716:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;       //Set primary PLL source to HSE
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    //Set primary PLL values required for 216Mhz system clock
  RCC_OscInit.PLL.PLLM       = 25;
 8000722:	2319      	movs	r3, #25
 8000724:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInit.PLL.PLLN       = 432;
 8000728:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800072c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInit.PLL.PLLQ       = 4;
 8000736:	2304      	movs	r3, #4
 8000738:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {  //Initialize Oscillators using values in init structure
 800073c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000740:	4618      	mov	r0, r3
 8000742:	f003 f9a1 	bl	8003a88 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <_Z16SystemInitializev+0xda>
  	return QA_Fail;
 8000756:	2301      	movs	r3, #1
 8000758:	e123      	b.n	80009a2 <_Z16SystemInitializev+0x322>
  }

  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b35      	ldr	r3, [pc, #212]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	4a34      	ldr	r2, [pc, #208]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6453      	str	r3, [r2, #68]	; 0x44
 8000766:	4b32      	ldr	r3, [pc, #200]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
 8000770:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  //---------------------
  //Enable Overdrive Mode
  //
  //This is required to provide best system stability given that we are running at the maximum clock rate of 216MHz for the STM32F769I device
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000772:	f003 f939 	bl	80039e8 <HAL_PWREx_EnableOverDrive>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf14      	ite	ne
 800077c:	2301      	movne	r3, #1
 800077e:	2300      	moveq	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <_Z16SystemInitializev+0x10a>
  	return QA_Fail;
 8000786:	2301      	movs	r3, #1
 8000788:	e10b      	b.n	80009a2 <_Z16SystemInitializev+0x322>
  }

  //---------------------------
  //Initialize CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 800078a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |      //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 800079a:	230f      	movs	r3, #15
 800079c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  		                         RCC_CLOCKTYPE_SYSCLK |
                               RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;  //Define primary PLL clock as system clock source
 80007a0:	2302      	movs	r3, #2
 80007a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;          //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 216MHz
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV4;            //Set clock divider for peripheral bus 1 (APB1), DIV4 provides an APB1 frequency of 54MHz
 80007ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;            //Set clock divider for peripheral bus 2 (APB2), DIV2 provides an APB2 frequency of 108MHz
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_7) != HAL_OK) { //Initialize system clocks using required values, and setting Flash latency to 7 cycles
 80007bc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007c0:	2107      	movs	r1, #7
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fc0e 	bl	8003fe4 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf14      	ite	ne
 80007ce:	2301      	movne	r3, #1
 80007d0:	2300      	moveq	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <_Z16SystemInitializev+0x15c>
  	return QA_Fail;
 80007d8:	2301      	movs	r3, #1
 80007da:	e0e2      	b.n	80009a2 <_Z16SystemInitializev+0x322>
  }

  //----------------------------
  //Initialize Peripheral Clocks
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 80007dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007e0:	2290      	movs	r2, #144	; 0x90
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f007 ff5b 	bl	80086a0 <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC |
 80007ea:	2328      	movs	r3, #40	; 0x28
 80007ec:	643b      	str	r3, [r7, #64]	; 0x40
  		                                     RCC_PERIPHCLK_LTDC;

    //Define settings for PLLSAI, as this PLL is also used as the clock source for the LTDC peripheral which we require to run the LCD screen
	RCC_PeriphClkInit.PLLSAI.PLLSAIN       = 384;
 80007ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007f2:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_PeriphClkInit.PLLSAI.PLLSAIP       = RCC_PLLSAIP_DIV8;
 80007f4:	2303      	movs	r3, #3
 80007f6:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_PeriphClkInit.PLLSAI.PLLSAIR       = 7;
 80007f8:	2307      	movs	r3, #7
 80007fa:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_PeriphClkInit.PLLSAI.PLLSAIQ       = 8;
 80007fc:	2308      	movs	r3, #8
 80007fe:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_PeriphClkInit.PLLSAIDivQ           = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_PeriphClkInit.PLLSAIDivR           = RCC_PLLSAIDIVR_2;
 8000804:	2300      	movs	r3, #0
 8000806:	66fb      	str	r3, [r7, #108]	; 0x6c

  RCC_PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE; //Set the LSE oscillator as the clock source for the Real Time Clock
 8000808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK) { //Initialize the peripheral clocks used the required values
 800080e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fdbc 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d007      	beq.n	8000838 <_Z16SystemInitializev+0x1b8>
  	return QA_Fail;
 8000828:	2301      	movs	r3, #1
 800082a:	e0ba      	b.n	80009a2 <_Z16SystemInitializev+0x322>
 800082c:	40023c00 	.word	0x40023c00
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000
  }

  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b5c      	ldr	r3, [pc, #368]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	4a5b      	ldr	r2, [pc, #364]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	6313      	str	r3, [r2, #48]	; 0x30
 8000844:	4b59      	ldr	r3, [pc, #356]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
 800084e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000850:	4b56      	ldr	r3, [pc, #344]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a55      	ldr	r2, [pc, #340]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
 800085c:	4b53      	ldr	r3, [pc, #332]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	f003 0302 	and.w	r3, r3, #2
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000868:	4b50      	ldr	r3, [pc, #320]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	4a4f      	ldr	r2, [pc, #316]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6313      	str	r3, [r2, #48]	; 0x30
 8000874:	4b4d      	ldr	r3, [pc, #308]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
 800087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000880:	4b4a      	ldr	r3, [pc, #296]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	4a49      	ldr	r2, [pc, #292]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	6313      	str	r3, [r2, #48]	; 0x30
 800088c:	4b47      	ldr	r3, [pc, #284]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	f003 0308 	and.w	r3, r3, #8
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000898:	4b44      	ldr	r3, [pc, #272]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a43      	ldr	r2, [pc, #268]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b41      	ldr	r3, [pc, #260]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b0:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a3d      	ldr	r2, [pc, #244]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 0320 	and.w	r3, r3, #32
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c8:	4b38      	ldr	r3, [pc, #224]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a37      	ldr	r2, [pc, #220]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80008dc:	f107 0318 	add.w	r3, r7, #24
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	f107 0318 	add.w	r3, r7, #24
 80008e6:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a27      	ldr	r2, [pc, #156]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800090e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a1f      	ldr	r2, [pc, #124]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4a17      	ldr	r2, [pc, #92]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800094e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000952:	6313      	str	r3, [r2, #48]	; 0x30
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	681b      	ldr	r3, [r3, #0]

  //-----------------
  //Enable DMA Clocks
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800096e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000972:	6313      	str	r3, [r2, #48]	; 0x30
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000978:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800098a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800098e:	6313      	str	r3, [r2, #48]	; 0x30
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000998:	463b      	mov	r3, r7
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	463b      	mov	r3, r7
 800099e:	681b      	ldr	r3, [r3, #0]

  //Return
  return QA_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800

080009b0 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HardFault_Handler+0x1c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f005 f8a2 	bl	8005b12 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <HardFault_Handler+0x20>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f005 f89d 	bl	8005b12 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 80009d8:	e7fe      	b.n	80009d8 <HardFault_Handler+0x18>
 80009da:	bf00      	nop
 80009dc:	2000012c 	.word	0x2000012c
 80009e0:	20000130 	.word	0x20000130

080009e4 <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <MemManage_Handler+0x1c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f005 f890 	bl	8005b12 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <MemManage_Handler+0x20>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 f88b 	bl	8005b12 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x18>
 80009fe:	bf00      	nop
 8000a00:	2000012c 	.word	0x2000012c
 8000a04:	20000130 	.word	0x20000130

08000a08 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <BusFault_Handler+0x1c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f005 f87e 	bl	8005b12 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <BusFault_Handler+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f005 f879 	bl	8005b12 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000a20:	e7fe      	b.n	8000a20 <BusFault_Handler+0x18>
 8000a22:	bf00      	nop
 8000a24:	2000012c 	.word	0x2000012c
 8000a28:	20000130 	.word	0x20000130

08000a2c <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <UsageFault_Handler+0x1c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f005 f86c 	bl	8005b12 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <UsageFault_Handler+0x20>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f005 f867 	bl	8005b12 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x18>
 8000a46:	bf00      	nop
 8000a48:	2000012c 	.word	0x2000012c
 8000a4c:	20000130 	.word	0x20000130

08000a50 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000a7e:	f001 fad3 	bl	8002028 <HAL_IncTick>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <USART1_IRQHandler>:
  //Interrupt Handler Methods


//USART1_IRQHandler
//Interrupt Handler Method
void USART1_IRQHandler(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL);
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <USART1_IRQHandler+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 faa9 	bl	8007fea <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000138 	.word	0x20000138

08000aa0 <_ZN7QAD_FMCC1Ev>:

	//------------
	//Constructors

	//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_FMC() :
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	  m_eState(QA_NotInitialized) {}
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2204      	movs	r2, #4
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2208      	movs	r2, #8
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2220      	movs	r2, #32
 8000ad0:	619a      	str	r2, [r3, #24]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2230      	movs	r2, #48	; 0x30
 8000ad6:	61da      	str	r2, [r3, #28]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f240 6203 	movw	r2, #1539	; 0x603
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <_ZN7QAD_FMC3getEv>:

	//-----------------
	//Singleton Methods
  //
	//Used to retrieve a reference to the singleton class
  static QAD_FMC& get(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  	static QAD_FMC instance;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <_ZN7QAD_FMC3getEv+0x48>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	f3bf 8f5b 	dmb	ish
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf0c      	ite	eq
 8000b22:	2301      	moveq	r3, #1
 8000b24:	2300      	movne	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d010      	beq.n	8000b4e <_ZN7QAD_FMC3getEv+0x42>
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <_ZN7QAD_FMC3getEv+0x48>)
 8000b2e:	f007 fd02 	bl	8008536 <__cxa_guard_acquire>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bf14      	ite	ne
 8000b38:	2301      	movne	r3, #1
 8000b3a:	2300      	moveq	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d005      	beq.n	8000b4e <_ZN7QAD_FMC3getEv+0x42>
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <_ZN7QAD_FMC3getEv+0x4c>)
 8000b44:	f7ff ffac 	bl	8000aa0 <_ZN7QAD_FMCC1Ev>
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <_ZN7QAD_FMC3getEv+0x48>)
 8000b4a:	f007 fd00 	bl	800854e <__cxa_guard_release>
  	return instance;
 8000b4e:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <_ZN7QAD_FMC3getEv+0x4c>)
  }
 8000b50:	4618      	mov	r0, r3
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200000fc 	.word	0x200000fc
 8000b58:	20000094 	.word	0x20000094

08000b5c <_ZN7QAD_FMC4initEv>:

  //NOTE: No deinitialization method is supplied due to SDRAM being seen as a primary system component
  //in this codebase and is required for operation of systems such as LCD among others

  //Used to initialize the FMC peripheral and SDRAM module
  static QA_Result init(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000b60:	f7ff ffd4 	bl	8000b0c <_ZN7QAD_FMC3getEv>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 fe52 	bl	8005810 <_ZN7QAD_FMC8imp_initEv>
 8000b6c:	4603      	mov	r3, r0
  }
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_ZN7QAD_FMC4testEv>:
  //Memory Testing Methods

  //Used to perform a memory test of the SDRAM module
  //Performs a full read and write test of all 16 megabytes of the SDRAM
  //Returns QA_OK if memory test is successful, or QA_Fail if not successful
  static QA_Result test(void) {
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
  	return get().imp_test();
 8000b76:	f7ff ffc9 	bl	8000b0c <_ZN7QAD_FMC3getEv>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f004 ff63 	bl	8005a48 <_ZN7QAD_FMC8imp_testEv>
 8000b82:	4603      	mov	r3, r0
  }
 8000b84:	4618      	mov	r0, r3
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 8000b94:	887a      	ldrh	r2, [r7, #2]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fbcc 	bl	8001338 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	809a      	strh	r2, [r3, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	80da      	strh	r2, [r3, #6]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	811a      	strh	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4603      	mov	r3, r0
 8000bcc:	817b      	strh	r3, [r7, #10]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	813b      	strh	r3, [r7, #8]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3304      	adds	r3, #4
 8000be0:	f107 020a 	add.w	r2, r7, #10
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fbc2 	bl	8001370 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3308      	adds	r3, #8
 8000bf0:	f107 0208 	add.w	r2, r7, #8
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fbba 	bl	8001370 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	731a      	strb	r2, [r3, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2200      	movs	r2, #0
 8000c06:	735a      	strb	r2, [r3, #13]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	739a      	strb	r2, [r3, #14]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	79fa      	ldrb	r2, [r7, #7]
 8000c12:	73da      	strb	r2, [r3, #15]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	08008acc 	.word	0x08008acc

08000c24 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	769a      	strb	r2, [r3, #26]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2225      	movs	r2, #37	; 0x25
 8000c80:	76da      	strb	r2, [r3, #27]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	331c      	adds	r3, #28
 8000c86:	2284      	movs	r2, #132	; 0x84
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f007 fd08 	bl	80086a0 <memset>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	8b99      	ldrh	r1, [r3, #28]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	8bda      	ldrh	r2, [r3, #30]
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f7ff ff7b 	bl	8000bbc <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	741a      	strb	r2, [r3, #16]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3314      	adds	r3, #20
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 fb62 	bl	80013a6 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	0800c064 	.word	0x0800c064

08000cf0 <_ZN14QAT_Vector2_16C1Ett>:
	//Default constructor. Sets both X and Y components to zero
  QAT_Vector2_16() :
    val(0) {}

  //Constructor used to set individual X and Y components
  QAT_Vector2_16(uint16_t x, uint16_t y) :
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	803b      	strh	r3, [r7, #0]
    x(x), y(y) {}
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	887a      	ldrh	r2, [r7, #2]
 8000d04:	801a      	strh	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	883a      	ldrh	r2, [r7, #0]
 8000d0a:	805a      	strh	r2, [r3, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_ZN14QAT_Vector2_16C1ERKS_>:

  //Copy Constructor
  //Copies data as single 32bit value for performance reasons
  QAT_Vector2_16(const QAT_Vector2_16& other) :
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
    val(other.val) {}
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 fb59 	bl	80013fa <_ZNSaIP12QAS_LCD_FontED1Ev>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 fb3c 	bl	80013da <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ffeb 	bl	8000d52 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_ZN15QAS_LCD_FontMgrC1Ev>:

	//--------------------------
	//Constructors / Destructors

	//Default constructor, which clears all data to default on class construction
	QAS_LCD_FontMgr() :
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
		m_iCurrentIdx(-1),
		m_pCurrent(NULL),
		m_pBuffer(NULL),
		m_uColor(0x0000) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ffeb 	bl	8000d6c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	22ff      	movs	r2, #255	; 0xff
 8000d9a:	731a      	strb	r2, [r3, #12]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	831a      	strh	r2, [r3, #24]
		m_vFonts.clear();
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fb62 	bl	800147a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
	}
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_ZN15QAS_LCD_FontMgrD1Ev>:

	//Class destructor which iterates through all fonts stored in m_vFonts vector and
	//deletes/deallocates them to prevent memory leaks when class is destroyed
	~QAS_LCD_FontMgr() {
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	7bfc      	ldrb	r4, [r7, #15]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 fb60 	bl	8001496 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	bf34      	ite	cc
 8000ddc:	2301      	movcc	r3, #1
 8000dde:	2300      	movcs	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d011      	beq.n	8000e0a <_ZN15QAS_LCD_FontMgrD1Ev+0x4a>
			delete m_vFonts[i];
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7bfa      	ldrb	r2, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fb62 	bl	80014b6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8000df2:	4603      	mov	r3, r0
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <_ZN15QAS_LCD_FontMgrD1Ev+0x42>
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f007 fb98 	bl	8008532 <_ZdlPvj>
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	3301      	adds	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e7e0      	b.n	8000dcc <_ZN15QAS_LCD_FontMgrD1Ev+0xc>
	~QAS_LCD_FontMgr() {
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fb19 	bl	8001444 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>
		}
	}
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}

08000e1c <_ZN7QAS_LCDC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAS_LCD() :
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_pDrawBuffer(NULL),
		m_uDrawColor(0x0000) {}
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	811a      	strh	r2, [r3, #8]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	330c      	adds	r3, #12
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ffa3 	bl	8000d86 <_ZN15QAS_LCD_FontMgrC1Ev>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_ZN7QAS_LCDD1Ev>:
class QAS_LCD {
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	330c      	adds	r3, #12
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ffb2 	bl	8000dc0 <_ZN15QAS_LCD_FontMgrD1Ev>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <__tcf_0>:
  //-----------------
  //Singleton Methods
  //
  //Used to retrieve a reference to the singleton class
  static QAS_LCD& get() {
  	static QAS_LCD instance;
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4801      	ldr	r0, [pc, #4]	; (8000e74 <__tcf_0+0xc>)
 8000e6e:	f7ff ffec 	bl	8000e4a <_ZN7QAS_LCDD1Ev>
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000100 	.word	0x20000100

08000e78 <_ZN7QAS_LCD3getEv>:
  static QAS_LCD& get() {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  	static QAS_LCD instance;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <_ZN7QAS_LCD3getEv+0x50>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	f3bf 8f5b 	dmb	ish
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2301      	moveq	r3, #1
 8000e90:	2300      	movne	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d013      	beq.n	8000ec0 <_ZN7QAS_LCD3getEv+0x48>
 8000e98:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <_ZN7QAS_LCD3getEv+0x50>)
 8000e9a:	f007 fb4c 	bl	8008536 <__cxa_guard_acquire>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bf14      	ite	ne
 8000ea4:	2301      	movne	r3, #1
 8000ea6:	2300      	moveq	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d008      	beq.n	8000ec0 <_ZN7QAS_LCD3getEv+0x48>
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <_ZN7QAS_LCD3getEv+0x54>)
 8000eb0:	f7ff ffb4 	bl	8000e1c <_ZN7QAS_LCDC1Ev>
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <_ZN7QAS_LCD3getEv+0x50>)
 8000eb6:	f007 fb4a 	bl	800854e <__cxa_guard_release>
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <_ZN7QAS_LCD3getEv+0x58>)
 8000ebc:	f007 fb87 	bl	80085ce <atexit>
  	return instance;
 8000ec0:	4b02      	ldr	r3, [pc, #8]	; (8000ecc <_ZN7QAS_LCD3getEv+0x54>)
  }
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000128 	.word	0x20000128
 8000ecc:	20000100 	.word	0x20000100
 8000ed0:	08000e69 	.word	0x08000e69

08000ed4 <_ZN7QAS_LCD4initEv>:
	//----------------------
	//Initialization Methods

  //Used to initialize the LTDC peripheral and setup Font Manager class
  //Returns QA_OK if initialization successful, or QA_Fail if initialization fails
  static QA_Result init(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000ed8:	f7ff ffce 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f005 ffda 	bl	8006e98 <_ZN7QAS_LCD8imp_initEv>
 8000ee4:	4603      	mov	r3, r0
  }
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_ZN7QAS_LCD10flipLayer0Ev>:
	//-----------------------
	//Rendering Setup Methods

  //Used to flip the front and back buffer for layer 0
  //See QAD_LTDC.hpp for more details
  static void flipLayer0(void) {
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  	get().imp_flipLayer0();
 8000eee:	f7ff ffc3 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f006 f835 	bl	8006f64 <_ZN7QAS_LCD14imp_flipLayer0Ev>
  }
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_ZN7QAS_LCD10flipLayer1Ev>:

  //Used to flip the front and back buffer for layer 1
  //See QAD_LTDC.hpp for more details
  static void flipLayer1(void) {
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  	get().imp_flipLayer1();
 8000f02:	f7ff ffb9 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f006 f835 	bl	8006f78 <_ZN7QAS_LCD14imp_flipLayer1Ev>
  }
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>:

  //Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
  //eLayer - Sets whether the current draw buffer is layer 0 or layer 1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
  static void setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	71fb      	strb	r3, [r7, #7]
  	get().imp_setDrawBuffer(eLayer);
 8000f1c:	f7ff ffac 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000f20:	4602      	mov	r2, r0
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f006 f830 	bl	8006f8c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>
  }
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_ZN7QAS_LCD12setDrawColorEt>:

  //Used to set the current draw color
  //uColor - A 16bit ARGB4444 color value
  static void setDrawColor(uint16_t uColor) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
  	get().imp_setDrawColor(uColor);
 8000f3e:	f7ff ff9b 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000f42:	4602      	mov	r2, r0
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4610      	mov	r0, r2
 8000f4a:	f006 f844 	bl	8006fd6 <_ZN7QAS_LCD16imp_setDrawColorEt>
  }
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_ZN7QAS_LCD11clearBufferEv>:

	//-----------------
	//Rendering Methods

  //Used to clear the currently selected draw buffer to the currently selected draw color
  static void clearBuffer(void) {
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  	get().imp_clearBuffer();
 8000f5a:	f7ff ff8d 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f006 f84f 	bl	8007004 <_ZN7QAS_LCD15imp_clearBufferEv>
  }
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>:
  }

  //Used to draw a non-filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
  static void drawRect(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  	get().imp_drawRect(cStart, cEnd);
 8000f74:	f7ff ff80 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f006 f860 	bl	8007044 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>
  }
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>:

  //Used to draw a filled rectangle
  //Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
  //cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
  static void drawRectFill(QAT_Vector2_16 cStart, QAT_Vector2_16 cEnd) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  	get().imp_drawRectFill(cStart, cEnd);
 8000f96:	f7ff ff6f 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f006 f8dd 	bl	8007160 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>
  }
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_ZN7QAS_LCD13setFontByNameEPKc>:
	//Font Rendering Methods

  //Used to set the selected font/typeface to be used for text rendering
  //strName - A C-style string containing the name of the font to be selected. This must match one of the
  //          fonts stored in the font manager, otherwise no font will be selected
  static void setFontByName(const char* strName) {
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  	get().m_cFontMgr.setFontByName(strName);
 8000fb6:	f7ff ff5f 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	330c      	adds	r3, #12
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f006 f9ef 	bl	80073a4 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>
  }
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_ZN7QAS_LCD14setFontByIndexEh>:

  //Used to set the selected font/typeface to be used for text rendering
  //uIdx - The index of the fond to be selected, based on the array of fonts stored in the font manager
  static void setFontByIndex(uint8_t uIdx) {
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
  	get().m_cFontMgr.setFontByIndex(uIdx);
 8000fd8:	f7ff ff4e 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	330c      	adds	r3, #12
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f006 fa04 	bl	80073f2 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>
  }
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>:

  //Used to draw a center-aligned string of characters using the currently selected font/typeface
  //String will be drawn to currently selected draw buffer with currently selected draw color
  //cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
  //str  - The C-style string to be drawn
  static void drawStrC(QAT_Vector2_16 cPos, const char* str) {
 8000ff2:	b590      	push	{r4, r7, lr}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  	get().m_cFontMgr.drawStrC(cPos, str);
 8000ffc:	f7ff ff3c 	bl	8000e78 <_ZN7QAS_LCD3getEv>
 8001000:	4603      	mov	r3, r0
 8001002:	f103 040c 	add.w	r4, r3, #12
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fe84 	bl	8000d1a <_ZN14QAT_Vector2_16C1ERKS_>
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	4620      	mov	r0, r4
 800101c:	f006 fae3 	bl	80075e6 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>
  }
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}

08001028 <main>:
//main
//Application Entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f769nihx.s
int main(void) {
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b095      	sub	sp, #84	; 0x54
 800102c:	af00      	add	r7, sp, #0
  //System Initialization

	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method
	if (SystemInitialize()) {
 800102e:	f7ff fb27 	bl	8000680 <_Z16SystemInitializev>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf14      	ite	ne
 8001038:	2301      	movne	r3, #1
 800103a:	2300      	moveq	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d000      	beq.n	8001044 <main+0x1c>
	  while (1) {}
 8001042:	e7fe      	b.n	8001042 <main+0x1a>


	//----------------------------------
	//Initialize the Used LEDs using the QAD_GPIO_Output driver class.
	//QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PORT, QAD_USER_LED_RED_GPIO_PIN and QAD_USERLED_GREEN_GPIO_PIN are defined in setup.hpp
  GPIO_UserLED_Red   = new QAD_GPIO_Output(QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_RED_GPIO_PIN);
 8001044:	2014      	movs	r0, #20
 8001046:	f007 fa85 	bl	8008554 <_Znwj>
 800104a:	4603      	mov	r3, r0
 800104c:	461c      	mov	r4, r3
 800104e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001052:	49aa      	ldr	r1, [pc, #680]	; (80012fc <main+0x2d4>)
 8001054:	4620      	mov	r0, r4
 8001056:	f004 fd3b 	bl	8005ad0 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 800105a:	4ba9      	ldr	r3, [pc, #676]	; (8001300 <main+0x2d8>)
 800105c:	601c      	str	r4, [r3, #0]
  GPIO_UserLED_Green = new QAD_GPIO_Output(QAD_USERLED_GREEN_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PIN);
 800105e:	2014      	movs	r0, #20
 8001060:	f007 fa78 	bl	8008554 <_Znwj>
 8001064:	4603      	mov	r3, r0
 8001066:	461c      	mov	r4, r3
 8001068:	2220      	movs	r2, #32
 800106a:	49a4      	ldr	r1, [pc, #656]	; (80012fc <main+0x2d4>)
 800106c:	4620      	mov	r0, r4
 800106e:	f004 fd2f 	bl	8005ad0 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8001072:	4ba4      	ldr	r3, [pc, #656]	; (8001304 <main+0x2dc>)
 8001074:	601c      	str	r4, [r3, #0]


	//----------------------------------
  //Initialize the User Button using the QAD_GPIO_Input driver class.
  //QAD_USERBUTTON_GPIO_PORT and QAD_USERBUTTON_GPIO_PIN are defined in setup.hpp
  GPIO_UserButton = new QAD_GPIO_Input(QAD_USERBUTTON_GPIO_PORT, QAD_USERBUTTON_GPIO_PIN);
 8001076:	2010      	movs	r0, #16
 8001078:	f007 fa6c 	bl	8008554 <_Znwj>
 800107c:	4603      	mov	r3, r0
 800107e:	461c      	mov	r4, r3
 8001080:	2201      	movs	r2, #1
 8001082:	49a1      	ldr	r1, [pc, #644]	; (8001308 <main+0x2e0>)
 8001084:	4620      	mov	r0, r4
 8001086:	f004 fda9 	bl	8005bdc <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>
 800108a:	4ba0      	ldr	r3, [pc, #640]	; (800130c <main+0x2e4>)
 800108c:	601c      	str	r4, [r3, #0]
  //Initialize UART1, which is used to communicate over serial via the STLINK connection
  //Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

  //Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART1;
 800108e:	2300      	movs	r3, #0
 8001090:	713b      	strb	r3, [r7, #4]
  sSerialInit.sUART_Init.baudrate    = QAD_UART1_BAUDRATE;
 8001092:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001096:	60bb      	str	r3, [r7, #8]
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART1;
 8001098:	2309      	movs	r3, #9
 800109a:	733b      	strb	r3, [r7, #12]
  sSerialInit.sUART_Init.txgpio      = QAD_UART1_TX_PORT;
 800109c:	4b9a      	ldr	r3, [pc, #616]	; (8001308 <main+0x2e0>)
 800109e:	613b      	str	r3, [r7, #16]
  sSerialInit.sUART_Init.txpin       = QAD_UART1_TX_PIN;
 80010a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a4:	82bb      	strh	r3, [r7, #20]
  sSerialInit.sUART_Init.txaf        = QAD_UART1_TX_AF;
 80010a6:	2307      	movs	r3, #7
 80010a8:	75bb      	strb	r3, [r7, #22]
  sSerialInit.sUART_Init.rxgpio      = QAD_UART1_RX_PORT;
 80010aa:	4b97      	ldr	r3, [pc, #604]	; (8001308 <main+0x2e0>)
 80010ac:	61bb      	str	r3, [r7, #24]
  sSerialInit.sUART_Init.rxpin       = QAD_UART1_RX_PIN;
 80010ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b2:	83bb      	strh	r3, [r7, #28]
  sSerialInit.sUART_Init.rxaf        = QAD_UART1_RX_AF;
 80010b4:	2307      	movs	r3, #7
 80010b6:	77bb      	strb	r3, [r7, #30]
  sSerialInit.uTXFIFO_Size           = QAD_UART1_TX_FIFOSIZE;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	843b      	strh	r3, [r7, #32]
  sSerialInit.uRXFIFO_Size           = QAD_UART1_RX_FIFOSIZE;
 80010be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c2:	847b      	strh	r3, [r7, #34]	; 0x22

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 80010c4:	2018      	movs	r0, #24
 80010c6:	f007 fa45 	bl	8008554 <_Znwj>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461c      	mov	r4, r3
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4620      	mov	r0, r4
 80010d4:	f7ff fdea 	bl	8000cac <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 80010d8:	4b8d      	ldr	r3, [pc, #564]	; (8001310 <main+0x2e8>)
 80010da:	601c      	str	r4, [r3, #0]

  //If initialization failed the turn on User LED and enter infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 80010dc:	4b8c      	ldr	r3, [pc, #560]	; (8001310 <main+0x2e8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f006 ff61 	bl	8007faa <_ZN19QAS_Serial_Dev_Base4initEPv>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	bf0c      	ite	eq
 80010ee:	2301      	moveq	r3, #1
 80010f0:	2300      	movne	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <main+0xdc>
  	GPIO_UserLED_Red->on();
 80010f8:	4b81      	ldr	r3, [pc, #516]	; (8001300 <main+0x2d8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 fd08 	bl	8005b12 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8001102:	e7fe      	b.n	8001102 <main+0xda>
  }


	//----------------------------------
  //Initialize FMC / SDRAM driver using the QAD_FMC singleton driver class
  if (QAD_FMC::init() == QA_OK) {
 8001104:	f7ff fd2a 	bl	8000b5c <_ZN7QAD_FMC4initEv>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	bf0c      	ite	eq
 800110e:	2301      	moveq	r3, #1
 8001110:	2300      	movne	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d02c      	beq.n	8001172 <main+0x14a>

  	//If initialization passed then output message via serial
    UART_STLink->txStringCR("SDRAM: Initialized");
 8001118:	4b7d      	ldr	r3, [pc, #500]	; (8001310 <main+0x2e8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	497d      	ldr	r1, [pc, #500]	; (8001314 <main+0x2ec>)
 800111e:	4618      	mov	r0, r3
 8001120:	f006 ff73 	bl	800800a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

    //Test SDRAM to confirm correct operation
  	if (QAD_FMC::test() == QA_OK) {
 8001124:	f7ff fd25 	bl	8000b72 <_ZN7QAD_FMC4testEv>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	bf0c      	ite	eq
 800112e:	2301      	moveq	r3, #1
 8001130:	2300      	movne	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d010      	beq.n	800115a <main+0x132>

  		//If SDRAM test passed then output message via serial
  		UART_STLink->txStringCR("SDRAM: Test Passed");
 8001138:	4b75      	ldr	r3, [pc, #468]	; (8001310 <main+0x2e8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4976      	ldr	r1, [pc, #472]	; (8001318 <main+0x2f0>)
 800113e:	4618      	mov	r0, r3
 8001140:	f006 ff63 	bl	800800a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


	//----------------------------------
  //Initialize LCD using QAS_LCD singleton class.
  //This will also initialize LTDC and DSI peripherals, and also initialize otm8009a display controller
  if (QAS_LCD::init()) {
 8001144:	f7ff fec6 	bl	8000ed4 <_ZN7QAS_LCD4initEv>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	bf14      	ite	ne
 800114e:	2301      	movne	r3, #1
 8001150:	2300      	moveq	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d01e      	beq.n	8001196 <main+0x16e>
 8001158:	e017      	b.n	800118a <main+0x162>
  		UART_STLink->txStringCR("SDRAM: Test Failed");
 800115a:	4b6d      	ldr	r3, [pc, #436]	; (8001310 <main+0x2e8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	496f      	ldr	r1, [pc, #444]	; (800131c <main+0x2f4>)
 8001160:	4618      	mov	r0, r3
 8001162:	f006 ff52 	bl	800800a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  		GPIO_UserLED_Red->on();
 8001166:	4b66      	ldr	r3, [pc, #408]	; (8001300 <main+0x2d8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fcd1 	bl	8005b12 <_ZN15QAD_GPIO_Output2onEv>
  		while(1) {}
 8001170:	e7fe      	b.n	8001170 <main+0x148>
    UART_STLink->txStringCR("SDRAM: Initialization failed");
 8001172:	4b67      	ldr	r3, [pc, #412]	; (8001310 <main+0x2e8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	496a      	ldr	r1, [pc, #424]	; (8001320 <main+0x2f8>)
 8001178:	4618      	mov	r0, r3
 800117a:	f006 ff46 	bl	800800a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
    GPIO_UserLED_Red->on();
 800117e:	4b60      	ldr	r3, [pc, #384]	; (8001300 <main+0x2d8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fcc5 	bl	8005b12 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8001188:	e7fe      	b.n	8001188 <main+0x160>
  	UART_STLink->txStringCR("LCD: Initialization failed");
 800118a:	4b61      	ldr	r3, [pc, #388]	; (8001310 <main+0x2e8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4965      	ldr	r1, [pc, #404]	; (8001324 <main+0x2fc>)
 8001190:	4618      	mov	r0, r3
 8001192:	f006 ff3a 	bl	800800a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  }
  UART_STLink->txStringCR("LCD: Initialized");
 8001196:	4b5e      	ldr	r3, [pc, #376]	; (8001310 <main+0x2e8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4963      	ldr	r1, [pc, #396]	; (8001328 <main+0x300>)
 800119c:	4618      	mov	r0, r3
 800119e:	f006 ff34 	bl	800800a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //Test rendering methods to confirm LCD and rendering subsystem are working correctly

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer0);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff feb5 	bl	8000f12 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0xFFFF);
 80011a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011ac:	f7ff fec2 	bl	8000f34 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 80011b0:	f7ff fed1 	bl	8000f56 <_ZN7QAS_LCD11clearBufferEv>

  //Shapes
  QAS_LCD::setDrawColor(0xF003);
 80011b4:	f24f 0003 	movw	r0, #61443	; 0xf003
 80011b8:	f7ff febc 	bl	8000f34 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRectFill(QAT_Vector2_16(40, 40), QAT_Vector2_16(760, 440));
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	2228      	movs	r2, #40	; 0x28
 80011c2:	2128      	movs	r1, #40	; 0x28
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fd93 	bl	8000cf0 <_ZN14QAT_Vector2_16C1Ett>
 80011ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ce:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80011d2:	f44f 713e 	mov.w	r1, #760	; 0x2f8
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fd8a 	bl	8000cf0 <_ZN14QAT_Vector2_16C1Ett>
 80011dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fed0 	bl	8000f8c <_ZN7QAS_LCD12drawRectFillE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawColor(0xFFFF);
 80011ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011f0:	f7ff fea0 	bl	8000f34 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRect(QAT_Vector2_16(50, 50), QAT_Vector2_16(750, 430));
 80011f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f8:	2232      	movs	r2, #50	; 0x32
 80011fa:	2132      	movs	r1, #50	; 0x32
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fd77 	bl	8000cf0 <_ZN14QAT_Vector2_16C1Ett>
 8001202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001206:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800120a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fd6e 	bl	8000cf0 <_ZN14QAT_Vector2_16C1Ett>
 8001214:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fea3 	bl	8000f6a <_ZN7QAS_LCD8drawRectE14QAT_Vector2_16S0_>

  QAS_LCD::setDrawBuffer(QAD_LTDC_Layer1);
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff fe74 	bl	8000f12 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0x0000);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fe82 	bl	8000f34 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 8001230:	f7ff fe91 	bl	8000f56 <_ZN7QAS_LCD11clearBufferEv>

  QAS_LCD::setDrawColor(0xFBFB);
 8001234:	f64f 30fb 	movw	r0, #64507	; 0xfbfb
 8001238:	f7ff fe7c 	bl	8000f34 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::setFontByName("SegoeUI12pt");
 800123c:	483b      	ldr	r0, [pc, #236]	; (800132c <main+0x304>)
 800123e:	f7ff feb6 	bl	8000fae <_ZN7QAS_LCD13setFontByNameEPKc>
  //QAS_LCD::setFontByIndex(0);
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 150), "Hello World!");
 8001242:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001246:	2296      	movs	r2, #150	; 0x96
 8001248:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd4f 	bl	8000cf0 <_ZN14QAT_Vector2_16C1Ett>
 8001252:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001256:	4936      	ldr	r1, [pc, #216]	; (8001330 <main+0x308>)
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff feca 	bl	8000ff2 <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>

  QAS_LCD::setDrawColor(0xFBBF);
 800125e:	f64f 30bf 	movw	r0, #64447	; 0xfbbf
 8001262:	f7ff fe67 	bl	8000f34 <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("SegoeUI20ptSB");
  QAS_LCD::setFontByIndex(1);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff feb1 	bl	8000fce <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 250), "Welcome to 1s and 0s");
 800126c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001270:	22fa      	movs	r2, #250	; 0xfa
 8001272:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fd3a 	bl	8000cf0 <_ZN14QAT_Vector2_16C1Ett>
 800127c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001280:	492c      	ldr	r1, [pc, #176]	; (8001334 <main+0x30c>)
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff feb5 	bl	8000ff2 <_ZN7QAS_LCD8drawStrCE14QAT_Vector2_16PKc>
  /*QAS_LCD::setDrawColor(0xFFBB);
  //QAS_LCD::setFontByName("TestFont");
  QAS_LCD::setFontByIndex(2);
  QAS_LCD::drawStrC(QAT_Vector2_16(400, 350), "Test Font");*/

  QAS_LCD::flipLayer0();
 8001288:	f7ff fe2f 	bl	8000eea <_ZN7QAS_LCD10flipLayer0Ev>
  QAS_LCD::flipLayer1();
 800128c:	f7ff fe37 	bl	8000efe <_ZN7QAS_LCD10flipLayer1Ev>
  //Processing Loop

  //Create processing loop timing variables
  uint32_t uTicks;
  uint32_t uCurTick;
  uint32_t uNewTick = HAL_GetTick();
 8001290:	f000 fede 	bl	8002050 <HAL_GetTick>
 8001294:	64b8      	str	r0, [r7, #72]	; 0x48
  uint32_t uOldTick = uNewTick;
 8001296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001298:	643b      	str	r3, [r7, #64]	; 0x40

  //Create task timing variables
  uint32_t uHeartbeatTicks = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	647b      	str	r3, [r7, #68]	; 0x44

  	//----------------------------------
  	//Frame Timing
  	//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
  	//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 800129e:	f000 fed7 	bl	8002050 <HAL_GetTick>
 80012a2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 80012a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d012      	beq.n	80012d2 <main+0x2aa>
    	uOldTick = uNewTick;
 80012ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012ae:	643b      	str	r3, [r7, #64]	; 0x40
    	uNewTick = uCurTick;
 80012b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012b2:	64bb      	str	r3, [r7, #72]	; 0x48
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 80012b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d205      	bcs.n	80012c8 <main+0x2a0>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 80012bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	3b01      	subs	r3, #1
 80012c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012c6:	e006      	b.n	80012d6 <main+0x2ae>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 80012c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012d0:	e001      	b.n	80012d6 <main+0x2ae>
    	}

    } else {
    	uTicks = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	64fb      	str	r3, [r7, #76]	; 0x4c

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the green User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //has become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 80012d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012da:	4413      	add	r3, r2
 80012dc:	647b      	str	r3, [r7, #68]	; 0x44
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) {
 80012de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012e4:	d3db      	bcc.n	800129e <main+0x276>
    	GPIO_UserLED_Green->toggle();
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <main+0x2dc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f004 fc37 	bl	8005b5e <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;
 80012f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012f2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80012f6:	647b      	str	r3, [r7, #68]	; 0x44
    uCurTick = HAL_GetTick();
 80012f8:	e7d1      	b.n	800129e <main+0x276>
 80012fa:	bf00      	nop
 80012fc:	40022400 	.word	0x40022400
 8001300:	2000012c 	.word	0x2000012c
 8001304:	20000130 	.word	0x20000130
 8001308:	40020000 	.word	0x40020000
 800130c:	20000134 	.word	0x20000134
 8001310:	20000138 	.word	0x20000138
 8001314:	080089b8 	.word	0x080089b8
 8001318:	080089cc 	.word	0x080089cc
 800131c:	080089e0 	.word	0x080089e0
 8001320:	080089f4 	.word	0x080089f4
 8001324:	08008a14 	.word	0x08008a14
 8001328:	08008a30 	.word	0x08008a30
 800132c:	08008a44 	.word	0x08008a44
 8001330:	08008a50 	.word	0x08008a50
 8001334:	08008a60 	.word	0x08008a60

08001338 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8001342:	683c      	ldr	r4, [r7, #0]
 8001344:	4620      	mov	r0, r4
 8001346:	f007 f916 	bl	8008576 <_Znaj>
 800134a:	4603      	mov	r3, r0
 800134c:	4618      	mov	r0, r3
 800134e:	4602      	mov	r2, r0
 8001350:	1e63      	subs	r3, r4, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	db04      	blt.n	8001360 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8001356:	2100      	movs	r1, #0
 8001358:	7011      	strb	r1, [r2, #0]
 800135a:	3201      	adds	r2, #1
 800135c:	3b01      	subs	r3, #1
 800135e:	e7f8      	b.n	8001352 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8001360:	4601      	mov	r1, r0
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f8b7 	bl	80014d6 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800137a:	6838      	ldr	r0, [r7, #0]
 800137c:	f000 f8c7 	bl	800150e <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8001380:	4603      	mov	r3, r0
 8001382:	881c      	ldrh	r4, [r3, #0]
 8001384:	200c      	movs	r0, #12
 8001386:	f007 f8e5 	bl	8008554 <_Znwj>
 800138a:	4603      	mov	r3, r0
 800138c:	461d      	mov	r5, r3
 800138e:	4621      	mov	r1, r4
 8001390:	4628      	mov	r0, r5
 8001392:	f7ff fbf9 	bl	8000b88 <_ZN14QAT_FIFOBufferC1Et>
 8001396:	4629      	mov	r1, r5
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f8c3 	bl	8001524 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bdb0      	pop	{r4, r5, r7, pc}

080013a6 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80013a6:	b5b0      	push	{r4, r5, r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f000 f8d3 	bl	800155c <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 80013b6:	4605      	mov	r5, r0
 80013b8:	20a4      	movs	r0, #164	; 0xa4
 80013ba:	f007 f8cb 	bl	8008554 <_Znwj>
 80013be:	4603      	mov	r3, r0
 80013c0:	461c      	mov	r4, r3
 80013c2:	4629      	mov	r1, r5
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7ff fc2d 	bl	8000c24 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 80013ca:	4621      	mov	r1, r4
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f8d0 	bl	8001572 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bdb0      	pop	{r4, r5, r7, pc}

080013da <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f8e1 	bl	80015aa <_ZNSaIP12QAS_LCD_FontEC1Ev>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f8e9 	bl	80015c2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_ZNSaIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f8f1 	bl	80015ea <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800142a:	461a      	mov	r2, r3
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f8e7 	bl	8001600 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      }
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fc80 	bl	8000d3a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001444:	b5b0      	push	{r4, r5, r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681c      	ldr	r4, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f8e5 	bl	8001626 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800145c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800145e:	461a      	mov	r2, r3
 8001460:	4629      	mov	r1, r5
 8001462:	4620      	mov	r0, r4
 8001464:	f000 f8ea 	bl	800163c <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ffd1 	bl	8001412 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bdb0      	pop	{r4, r5, r7, pc}

0800147a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f8e5 	bl	8001658 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	109b      	asrs	r3, r3, #2
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
      }
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6839      	ldr	r1, [r7, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 f8d8 	bl	800169a <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f8df 	bl	80016c2 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001504:	4603      	mov	r3, r0
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6839      	ldr	r1, [r7, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f8d2 	bl	80016dc <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f8d9 	bl	8001704 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001552:	4603      	mov	r3, r0
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6839      	ldr	r1, [r7, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f000 f8cc 	bl	800171e <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f8d3 	bl	8001746 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_ZNSaIP12QAS_LCD_FontEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f8d4 	bl	8001760 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
	{ }
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
	if (__p)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f8ac 	bl	8001776 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>
      }
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 f8a2 	bl	8001794 <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>
    }
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	109b      	asrs	r3, r3, #2
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00e      	beq.n	8001692 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ffd3 	bl	8001626 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8001680:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001682:	461a      	mov	r2, r3
 8001684:	4621      	mov	r1, r4
 8001686:	6838      	ldr	r0, [r7, #0]
 8001688:	f7ff ffd8 	bl	800163c <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}

0800169a <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f881 	bl	80017ae <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff21 	bl	80014f4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80016b2:	4602      	mov	r2, r0
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f87b 	bl	80017c8 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f879 	bl	80017e0 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ff27 	bl	8001542 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f873 	bl	80017fa <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001714:	4603      	mov	r3, r0
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f871 	bl	8001812 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff2d 	bl	8001590 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8001736:	4602      	mov	r2, r0
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4618      	mov	r0, r3
 8001752:	f000 f86b 	bl	800182c <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001756:	4603      	mov	r3, r0
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 f85c 	bl	8001844 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800179e:	6839      	ldr	r1, [r7, #0]
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f85c 	bl	800185e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>
    }
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f85b 	bl	8001874 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f85f 	bl	8001894 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f85f 	bl	80018ae <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f863 	bl	80018ce <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 8001808:	4603      	mov	r3, r0
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f863 	bl	80018e8 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f867 	bl	8001908 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 800183a:	4603      	mov	r3, r0
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8001850:	68b8      	ldr	r0, [r7, #8]
 8001852:	f006 fe6c 	bl	800852e <_ZdlPv>
      }
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f850 	bl	8001922 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4618      	mov	r0, r3
 8001886:	f000 f858 	bl	800193a <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f859 	bl	8001956 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f858 	bl	800196c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f860 	bl	8001984 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f861 	bl	80019a0 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 80018de:	4603      	mov	r3, r0
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f860 	bl	80019b6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f868 	bl	80019ce <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f869 	bl	80019ea <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 8001918:	4603      	mov	r3, r0
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f868 	bl	8001a00 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f84e 	bl	8001a16 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f834 	bl	8001a2c <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
	return 1;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_kill>:

int _kill(int pid, int sig)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a5c:	f006 fdbe 	bl	80085dc <__errno>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2216      	movs	r2, #22
 8001a64:	601a      	str	r2, [r3, #0]
	return -1;
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_exit>:

void _exit (int status)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ffe7 	bl	8001a52 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a84:	e7fe      	b.n	8001a84 <_exit+0x12>
	...

08001a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <_sbrk+0x5c>)
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <_sbrk+0x60>)
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <_sbrk+0x64>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <_sbrk+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d207      	bcs.n	8001ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab8:	f006 fd90 	bl	80085dc <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	220c      	movs	r2, #12
 8001ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e009      	b.n	8001adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <_sbrk+0x64>)
 8001ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20080000 	.word	0x20080000
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	2000013c 	.word	0x2000013c
 8001af0:	200003a8 	.word	0x200003a8

08001af4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <SystemInit+0x20>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <SystemInit+0x20>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001b22:	49c1      	ldr	r1, [pc, #772]	; (8001e28 <OTM8009A_Init+0x310>)
 8001b24:	2000      	movs	r0, #0
 8001b26:	f004 fce1 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001b2a:	49c0      	ldr	r1, [pc, #768]	; (8001e2c <OTM8009A_Init+0x314>)
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f004 fcdd 	bl	80064ec <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001b32:	49bf      	ldr	r1, [pc, #764]	; (8001e30 <OTM8009A_Init+0x318>)
 8001b34:	2000      	movs	r0, #0
 8001b36:	f004 fcd9 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001b3a:	49be      	ldr	r1, [pc, #760]	; (8001e34 <OTM8009A_Init+0x31c>)
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f004 fcd5 	bl	80064ec <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001b42:	49bb      	ldr	r1, [pc, #748]	; (8001e30 <OTM8009A_Init+0x318>)
 8001b44:	2000      	movs	r0, #0
 8001b46:	f004 fcd1 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001b4a:	49bb      	ldr	r1, [pc, #748]	; (8001e38 <OTM8009A_Init+0x320>)
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f004 fccd 	bl	80064ec <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8001b52:	200a      	movs	r0, #10
 8001b54:	f000 fa88 	bl	8002068 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001b58:	49b8      	ldr	r1, [pc, #736]	; (8001e3c <OTM8009A_Init+0x324>)
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f004 fcc6 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001b60:	49b7      	ldr	r1, [pc, #732]	; (8001e40 <OTM8009A_Init+0x328>)
 8001b62:	2000      	movs	r0, #0
 8001b64:	f004 fcc2 	bl	80064ec <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8001b68:	200a      	movs	r0, #10
 8001b6a:	f000 fa7d 	bl	8002068 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8001b6e:	49b5      	ldr	r1, [pc, #724]	; (8001e44 <OTM8009A_Init+0x32c>)
 8001b70:	2000      	movs	r0, #0
 8001b72:	f004 fcbb 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001b76:	49b4      	ldr	r1, [pc, #720]	; (8001e48 <OTM8009A_Init+0x330>)
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f004 fcb7 	bl	80064ec <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8001b7e:	49b3      	ldr	r1, [pc, #716]	; (8001e4c <OTM8009A_Init+0x334>)
 8001b80:	2000      	movs	r0, #0
 8001b82:	f004 fcb3 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001b86:	49b2      	ldr	r1, [pc, #712]	; (8001e50 <OTM8009A_Init+0x338>)
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f004 fcaf 	bl	80064ec <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8001b8e:	49b1      	ldr	r1, [pc, #708]	; (8001e54 <OTM8009A_Init+0x33c>)
 8001b90:	2000      	movs	r0, #0
 8001b92:	f004 fcab 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001b96:	49b0      	ldr	r1, [pc, #704]	; (8001e58 <OTM8009A_Init+0x340>)
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f004 fca7 	bl	80064ec <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001b9e:	49a2      	ldr	r1, [pc, #648]	; (8001e28 <OTM8009A_Init+0x310>)
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f004 fca3 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8001ba6:	49ad      	ldr	r1, [pc, #692]	; (8001e5c <OTM8009A_Init+0x344>)
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f004 fc9f 	bl	80064ec <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001bae:	49ac      	ldr	r1, [pc, #688]	; (8001e60 <OTM8009A_Init+0x348>)
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f004 fc9b 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8001bb6:	49ab      	ldr	r1, [pc, #684]	; (8001e64 <OTM8009A_Init+0x34c>)
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f004 fc97 	bl	80064ec <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001bbe:	49aa      	ldr	r1, [pc, #680]	; (8001e68 <OTM8009A_Init+0x350>)
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f004 fc93 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8001bc6:	49a9      	ldr	r1, [pc, #676]	; (8001e6c <OTM8009A_Init+0x354>)
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f004 fc8f 	bl	80064ec <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001bce:	49a8      	ldr	r1, [pc, #672]	; (8001e70 <OTM8009A_Init+0x358>)
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f004 fc8b 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8001bd6:	49a7      	ldr	r1, [pc, #668]	; (8001e74 <OTM8009A_Init+0x35c>)
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f004 fc87 	bl	80064ec <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001bde:	49a6      	ldr	r1, [pc, #664]	; (8001e78 <OTM8009A_Init+0x360>)
 8001be0:	2000      	movs	r0, #0
 8001be2:	f004 fc83 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001be6:	499a      	ldr	r1, [pc, #616]	; (8001e50 <OTM8009A_Init+0x338>)
 8001be8:	2000      	movs	r0, #0
 8001bea:	f004 fc7f 	bl	80064ec <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001bee:	498e      	ldr	r1, [pc, #568]	; (8001e28 <OTM8009A_Init+0x310>)
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f004 fc7b 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8001bf6:	49a1      	ldr	r1, [pc, #644]	; (8001e7c <OTM8009A_Init+0x364>)
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f004 fc77 	bl	80064ec <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001bfe:	49a0      	ldr	r1, [pc, #640]	; (8001e80 <OTM8009A_Init+0x368>)
 8001c00:	2000      	movs	r0, #0
 8001c02:	f004 fc73 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8001c06:	499f      	ldr	r1, [pc, #636]	; (8001e84 <OTM8009A_Init+0x36c>)
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f004 fc6f 	bl	80064ec <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001c0e:	499e      	ldr	r1, [pc, #632]	; (8001e88 <OTM8009A_Init+0x370>)
 8001c10:	2000      	movs	r0, #0
 8001c12:	f004 fc6b 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001c16:	499d      	ldr	r1, [pc, #628]	; (8001e8c <OTM8009A_Init+0x374>)
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f004 fc67 	bl	80064ec <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001c1e:	499c      	ldr	r1, [pc, #624]	; (8001e90 <OTM8009A_Init+0x378>)
 8001c20:	2000      	movs	r0, #0
 8001c22:	f004 fc63 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001c26:	499b      	ldr	r1, [pc, #620]	; (8001e94 <OTM8009A_Init+0x37c>)
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f004 fc5f 	bl	80064ec <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001c2e:	498c      	ldr	r1, [pc, #560]	; (8001e60 <OTM8009A_Init+0x348>)
 8001c30:	2000      	movs	r0, #0
 8001c32:	f004 fc5b 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001c36:	4998      	ldr	r1, [pc, #608]	; (8001e98 <OTM8009A_Init+0x380>)
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f004 fc57 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001c3e:	498a      	ldr	r1, [pc, #552]	; (8001e68 <OTM8009A_Init+0x350>)
 8001c40:	2000      	movs	r0, #0
 8001c42:	f004 fc53 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001c46:	4995      	ldr	r1, [pc, #596]	; (8001e9c <OTM8009A_Init+0x384>)
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f004 fc4f 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8001c4e:	4994      	ldr	r1, [pc, #592]	; (8001ea0 <OTM8009A_Init+0x388>)
 8001c50:	2000      	movs	r0, #0
 8001c52:	f004 fc4b 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001c56:	4993      	ldr	r1, [pc, #588]	; (8001ea4 <OTM8009A_Init+0x38c>)
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f004 fc47 	bl	80064ec <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001c5e:	4974      	ldr	r1, [pc, #464]	; (8001e30 <OTM8009A_Init+0x318>)
 8001c60:	2000      	movs	r0, #0
 8001c62:	f004 fc43 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001c66:	4990      	ldr	r1, [pc, #576]	; (8001ea8 <OTM8009A_Init+0x390>)
 8001c68:	2006      	movs	r0, #6
 8001c6a:	f004 fc3f 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001c6e:	498f      	ldr	r1, [pc, #572]	; (8001eac <OTM8009A_Init+0x394>)
 8001c70:	2000      	movs	r0, #0
 8001c72:	f004 fc3b 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001c76:	498e      	ldr	r1, [pc, #568]	; (8001eb0 <OTM8009A_Init+0x398>)
 8001c78:	200e      	movs	r0, #14
 8001c7a:	f004 fc37 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001c7e:	498d      	ldr	r1, [pc, #564]	; (8001eb4 <OTM8009A_Init+0x39c>)
 8001c80:	2000      	movs	r0, #0
 8001c82:	f004 fc33 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001c86:	498c      	ldr	r1, [pc, #560]	; (8001eb8 <OTM8009A_Init+0x3a0>)
 8001c88:	200e      	movs	r0, #14
 8001c8a:	f004 fc2f 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001c8e:	498b      	ldr	r1, [pc, #556]	; (8001ebc <OTM8009A_Init+0x3a4>)
 8001c90:	2000      	movs	r0, #0
 8001c92:	f004 fc2b 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001c96:	498a      	ldr	r1, [pc, #552]	; (8001ec0 <OTM8009A_Init+0x3a8>)
 8001c98:	200a      	movs	r0, #10
 8001c9a:	f004 fc27 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001c9e:	4989      	ldr	r1, [pc, #548]	; (8001ec4 <OTM8009A_Init+0x3ac>)
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f004 fc23 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001ca6:	4988      	ldr	r1, [pc, #544]	; (8001ec8 <OTM8009A_Init+0x3b0>)
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f004 fc1f 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001cae:	4960      	ldr	r1, [pc, #384]	; (8001e30 <OTM8009A_Init+0x318>)
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f004 fc1b 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8001cb6:	4985      	ldr	r1, [pc, #532]	; (8001ecc <OTM8009A_Init+0x3b4>)
 8001cb8:	200a      	movs	r0, #10
 8001cba:	f004 fc17 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001cbe:	4984      	ldr	r1, [pc, #528]	; (8001ed0 <OTM8009A_Init+0x3b8>)
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f004 fc13 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8001cc6:	4983      	ldr	r1, [pc, #524]	; (8001ed4 <OTM8009A_Init+0x3bc>)
 8001cc8:	200f      	movs	r0, #15
 8001cca:	f004 fc0f 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001cce:	4977      	ldr	r1, [pc, #476]	; (8001eac <OTM8009A_Init+0x394>)
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f004 fc0b 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8001cd6:	4980      	ldr	r1, [pc, #512]	; (8001ed8 <OTM8009A_Init+0x3c0>)
 8001cd8:	200f      	movs	r0, #15
 8001cda:	f004 fc07 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001cde:	4975      	ldr	r1, [pc, #468]	; (8001eb4 <OTM8009A_Init+0x39c>)
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f004 fc03 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8001ce6:	497d      	ldr	r1, [pc, #500]	; (8001edc <OTM8009A_Init+0x3c4>)
 8001ce8:	200a      	movs	r0, #10
 8001cea:	f004 fbff 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001cee:	4973      	ldr	r1, [pc, #460]	; (8001ebc <OTM8009A_Init+0x3a4>)
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f004 fbfb 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8001cf6:	497a      	ldr	r1, [pc, #488]	; (8001ee0 <OTM8009A_Init+0x3c8>)
 8001cf8:	200f      	movs	r0, #15
 8001cfa:	f004 fbf7 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001cfe:	4971      	ldr	r1, [pc, #452]	; (8001ec4 <OTM8009A_Init+0x3ac>)
 8001d00:	2000      	movs	r0, #0
 8001d02:	f004 fbf3 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8001d06:	4977      	ldr	r1, [pc, #476]	; (8001ee4 <OTM8009A_Init+0x3cc>)
 8001d08:	200f      	movs	r0, #15
 8001d0a:	f004 fbef 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8001d0e:	4976      	ldr	r1, [pc, #472]	; (8001ee8 <OTM8009A_Init+0x3d0>)
 8001d10:	2000      	movs	r0, #0
 8001d12:	f004 fbeb 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001d16:	4975      	ldr	r1, [pc, #468]	; (8001eec <OTM8009A_Init+0x3d4>)
 8001d18:	200a      	movs	r0, #10
 8001d1a:	f004 fbe7 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8001d1e:	4974      	ldr	r1, [pc, #464]	; (8001ef0 <OTM8009A_Init+0x3d8>)
 8001d20:	2000      	movs	r0, #0
 8001d22:	f004 fbe3 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001d26:	4973      	ldr	r1, [pc, #460]	; (8001ef4 <OTM8009A_Init+0x3dc>)
 8001d28:	200a      	movs	r0, #10
 8001d2a:	f004 fbdf 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001d2e:	4940      	ldr	r1, [pc, #256]	; (8001e30 <OTM8009A_Init+0x318>)
 8001d30:	2000      	movs	r0, #0
 8001d32:	f004 fbdb 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001d36:	4970      	ldr	r1, [pc, #448]	; (8001ef8 <OTM8009A_Init+0x3e0>)
 8001d38:	200a      	movs	r0, #10
 8001d3a:	f004 fbd7 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001d3e:	4964      	ldr	r1, [pc, #400]	; (8001ed0 <OTM8009A_Init+0x3b8>)
 8001d40:	2000      	movs	r0, #0
 8001d42:	f004 fbd3 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001d46:	496d      	ldr	r1, [pc, #436]	; (8001efc <OTM8009A_Init+0x3e4>)
 8001d48:	200f      	movs	r0, #15
 8001d4a:	f004 fbcf 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001d4e:	4957      	ldr	r1, [pc, #348]	; (8001eac <OTM8009A_Init+0x394>)
 8001d50:	2000      	movs	r0, #0
 8001d52:	f004 fbcb 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001d56:	496a      	ldr	r1, [pc, #424]	; (8001f00 <OTM8009A_Init+0x3e8>)
 8001d58:	200f      	movs	r0, #15
 8001d5a:	f004 fbc7 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001d5e:	4955      	ldr	r1, [pc, #340]	; (8001eb4 <OTM8009A_Init+0x39c>)
 8001d60:	2000      	movs	r0, #0
 8001d62:	f004 fbc3 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001d66:	4967      	ldr	r1, [pc, #412]	; (8001f04 <OTM8009A_Init+0x3ec>)
 8001d68:	200a      	movs	r0, #10
 8001d6a:	f004 fbbf 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001d6e:	4953      	ldr	r1, [pc, #332]	; (8001ebc <OTM8009A_Init+0x3a4>)
 8001d70:	2000      	movs	r0, #0
 8001d72:	f004 fbbb 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001d76:	4964      	ldr	r1, [pc, #400]	; (8001f08 <OTM8009A_Init+0x3f0>)
 8001d78:	200f      	movs	r0, #15
 8001d7a:	f004 fbb7 	bl	80064ec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001d7e:	4951      	ldr	r1, [pc, #324]	; (8001ec4 <OTM8009A_Init+0x3ac>)
 8001d80:	2000      	movs	r0, #0
 8001d82:	f004 fbb3 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8001d86:	4961      	ldr	r1, [pc, #388]	; (8001f0c <OTM8009A_Init+0x3f4>)
 8001d88:	200f      	movs	r0, #15
 8001d8a:	f004 fbaf 	bl	80064ec <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001d8e:	4934      	ldr	r1, [pc, #208]	; (8001e60 <OTM8009A_Init+0x348>)
 8001d90:	2000      	movs	r0, #0
 8001d92:	f004 fbab 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8001d96:	495e      	ldr	r1, [pc, #376]	; (8001f10 <OTM8009A_Init+0x3f8>)
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f004 fba7 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8001d9e:	495d      	ldr	r1, [pc, #372]	; (8001f14 <OTM8009A_Init+0x3fc>)
 8001da0:	2000      	movs	r0, #0
 8001da2:	f004 fba3 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8001da6:	495c      	ldr	r1, [pc, #368]	; (8001f18 <OTM8009A_Init+0x400>)
 8001da8:	2000      	movs	r0, #0
 8001daa:	f004 fb9f 	bl	80064ec <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8001dae:	495b      	ldr	r1, [pc, #364]	; (8001f1c <OTM8009A_Init+0x404>)
 8001db0:	2000      	movs	r0, #0
 8001db2:	f004 fb9b 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8001db6:	495a      	ldr	r1, [pc, #360]	; (8001f20 <OTM8009A_Init+0x408>)
 8001db8:	2000      	movs	r0, #0
 8001dba:	f004 fb97 	bl	80064ec <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001dbe:	491a      	ldr	r1, [pc, #104]	; (8001e28 <OTM8009A_Init+0x310>)
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f004 fb93 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8001dc6:	4957      	ldr	r1, [pc, #348]	; (8001f24 <OTM8009A_Init+0x40c>)
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f004 fb8f 	bl	80064ec <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001dce:	4916      	ldr	r1, [pc, #88]	; (8001e28 <OTM8009A_Init+0x310>)
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f004 fb8b 	bl	80064ec <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001dd6:	4914      	ldr	r1, [pc, #80]	; (8001e28 <OTM8009A_Init+0x310>)
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f004 fb87 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001dde:	4952      	ldr	r1, [pc, #328]	; (8001f28 <OTM8009A_Init+0x410>)
 8001de0:	2010      	movs	r0, #16
 8001de2:	f004 fb83 	bl	80064ec <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001de6:	4910      	ldr	r1, [pc, #64]	; (8001e28 <OTM8009A_Init+0x310>)
 8001de8:	2000      	movs	r0, #0
 8001dea:	f004 fb7f 	bl	80064ec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001dee:	494f      	ldr	r1, [pc, #316]	; (8001f2c <OTM8009A_Init+0x414>)
 8001df0:	2010      	movs	r0, #16
 8001df2:	f004 fb7b 	bl	80064ec <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8001df6:	494e      	ldr	r1, [pc, #312]	; (8001f30 <OTM8009A_Init+0x418>)
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f004 fb77 	bl	80064ec <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  HAL_Delay(120);
 8001dfe:	2078      	movs	r0, #120	; 0x78
 8001e00:	f000 f932 	bl	8002068 <HAL_Delay>

  switch(ColorCoding)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <OTM8009A_Init+0x304>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	f040 8095 	bne.w	8001f3c <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001e12:	4948      	ldr	r1, [pc, #288]	; (8001f34 <OTM8009A_Init+0x41c>)
 8001e14:	2000      	movs	r0, #0
 8001e16:	f004 fb69 	bl	80064ec <DSI_IO_WriteCmd>
    break;
 8001e1a:	e090      	b.n	8001f3e <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8001e1c:	4946      	ldr	r1, [pc, #280]	; (8001f38 <OTM8009A_Init+0x420>)
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f004 fb64 	bl	80064ec <DSI_IO_WriteCmd>
    break;
 8001e24:	e08b      	b.n	8001f3e <OTM8009A_Init+0x426>
 8001e26:	bf00      	nop
 8001e28:	08008c48 	.word	0x08008c48
 8001e2c:	08008b00 	.word	0x08008b00
 8001e30:	08008c4c 	.word	0x08008c4c
 8001e34:	08008b04 	.word	0x08008b04
 8001e38:	08008c50 	.word	0x08008c50
 8001e3c:	08008c54 	.word	0x08008c54
 8001e40:	08008c58 	.word	0x08008c58
 8001e44:	08008c5c 	.word	0x08008c5c
 8001e48:	08008c60 	.word	0x08008c60
 8001e4c:	08008c64 	.word	0x08008c64
 8001e50:	08008c68 	.word	0x08008c68
 8001e54:	08008c6c 	.word	0x08008c6c
 8001e58:	08008c70 	.word	0x08008c70
 8001e5c:	08008c74 	.word	0x08008c74
 8001e60:	08008c78 	.word	0x08008c78
 8001e64:	08008c7c 	.word	0x08008c7c
 8001e68:	08008c80 	.word	0x08008c80
 8001e6c:	08008c84 	.word	0x08008c84
 8001e70:	08008c88 	.word	0x08008c88
 8001e74:	08008c8c 	.word	0x08008c8c
 8001e78:	08008c90 	.word	0x08008c90
 8001e7c:	08008b30 	.word	0x08008b30
 8001e80:	08008c94 	.word	0x08008c94
 8001e84:	08008c98 	.word	0x08008c98
 8001e88:	08008c9c 	.word	0x08008c9c
 8001e8c:	08008ca0 	.word	0x08008ca0
 8001e90:	08008ca4 	.word	0x08008ca4
 8001e94:	08008ca8 	.word	0x08008ca8
 8001e98:	08008cac 	.word	0x08008cac
 8001e9c:	08008cb0 	.word	0x08008cb0
 8001ea0:	08008cb4 	.word	0x08008cb4
 8001ea4:	08008b34 	.word	0x08008b34
 8001ea8:	08008b38 	.word	0x08008b38
 8001eac:	08008cb8 	.word	0x08008cb8
 8001eb0:	08008b40 	.word	0x08008b40
 8001eb4:	08008cbc 	.word	0x08008cbc
 8001eb8:	08008b50 	.word	0x08008b50
 8001ebc:	08008cc0 	.word	0x08008cc0
 8001ec0:	08008b60 	.word	0x08008b60
 8001ec4:	08008cc4 	.word	0x08008cc4
 8001ec8:	08008cfc 	.word	0x08008cfc
 8001ecc:	08008b6c 	.word	0x08008b6c
 8001ed0:	08008cc8 	.word	0x08008cc8
 8001ed4:	08008b78 	.word	0x08008b78
 8001ed8:	08008b88 	.word	0x08008b88
 8001edc:	08008b98 	.word	0x08008b98
 8001ee0:	08008ba4 	.word	0x08008ba4
 8001ee4:	08008bb4 	.word	0x08008bb4
 8001ee8:	08008ccc 	.word	0x08008ccc
 8001eec:	08008bc4 	.word	0x08008bc4
 8001ef0:	08008cd0 	.word	0x08008cd0
 8001ef4:	08008bd0 	.word	0x08008bd0
 8001ef8:	08008bdc 	.word	0x08008bdc
 8001efc:	08008be8 	.word	0x08008be8
 8001f00:	08008bf8 	.word	0x08008bf8
 8001f04:	08008c08 	.word	0x08008c08
 8001f08:	08008c14 	.word	0x08008c14
 8001f0c:	08008c24 	.word	0x08008c24
 8001f10:	08008d00 	.word	0x08008d00
 8001f14:	08008d04 	.word	0x08008d04
 8001f18:	08008d08 	.word	0x08008d08
 8001f1c:	08008d0c 	.word	0x08008d0c
 8001f20:	08008d10 	.word	0x08008d10
 8001f24:	08008c34 	.word	0x08008c34
 8001f28:	08008b08 	.word	0x08008b08
 8001f2c:	08008b1c 	.word	0x08008b1c
 8001f30:	08008cd4 	.word	0x08008cd4
 8001f34:	08008cd8 	.word	0x08008cd8
 8001f38:	08008cdc 	.word	0x08008cdc
  default :
    break;
 8001f3c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d10b      	bne.n	8001f5c <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001f44:	4916      	ldr	r1, [pc, #88]	; (8001fa0 <OTM8009A_Init+0x488>)
 8001f46:	2000      	movs	r0, #0
 8001f48:	f004 fad0 	bl	80064ec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8001f4c:	4915      	ldr	r1, [pc, #84]	; (8001fa4 <OTM8009A_Init+0x48c>)
 8001f4e:	2004      	movs	r0, #4
 8001f50:	f004 facc 	bl	80064ec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001f54:	4914      	ldr	r1, [pc, #80]	; (8001fa8 <OTM8009A_Init+0x490>)
 8001f56:	2004      	movs	r0, #4
 8001f58:	f004 fac8 	bl	80064ec <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8001f5c:	4913      	ldr	r1, [pc, #76]	; (8001fac <OTM8009A_Init+0x494>)
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f004 fac4 	bl	80064ec <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8001f64:	4912      	ldr	r1, [pc, #72]	; (8001fb0 <OTM8009A_Init+0x498>)
 8001f66:	2000      	movs	r0, #0
 8001f68:	f004 fac0 	bl	80064ec <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8001f6c:	4911      	ldr	r1, [pc, #68]	; (8001fb4 <OTM8009A_Init+0x49c>)
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f004 fabc 	bl	80064ec <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8001f74:	4910      	ldr	r1, [pc, #64]	; (8001fb8 <OTM8009A_Init+0x4a0>)
 8001f76:	2000      	movs	r0, #0
 8001f78:	f004 fab8 	bl	80064ec <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8001f7c:	490f      	ldr	r1, [pc, #60]	; (8001fbc <OTM8009A_Init+0x4a4>)
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f004 fab4 	bl	80064ec <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001f84:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <OTM8009A_Init+0x4a8>)
 8001f86:	2000      	movs	r0, #0
 8001f88:	f004 fab0 	bl	80064ec <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8001f8c:	490d      	ldr	r1, [pc, #52]	; (8001fc4 <OTM8009A_Init+0x4ac>)
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f004 faac 	bl	80064ec <DSI_IO_WriteCmd>

  return 0;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	08008ce0 	.word	0x08008ce0
 8001fa4:	08008c38 	.word	0x08008c38
 8001fa8:	08008c40 	.word	0x08008c40
 8001fac:	08008ce4 	.word	0x08008ce4
 8001fb0:	08008ce8 	.word	0x08008ce8
 8001fb4:	08008cec 	.word	0x08008cec
 8001fb8:	08008cf0 	.word	0x08008cf0
 8001fbc:	08008cf4 	.word	0x08008cf4
 8001fc0:	08008c48 	.word	0x08008c48
 8001fc4:	08008cf8 	.word	0x08008cf8

08001fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_InitTick+0x54>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_InitTick+0x58>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f999 	bl	800231e <HAL_SYSTICK_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00e      	b.n	8002014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b0f      	cmp	r3, #15
 8001ffa:	d80a      	bhi.n	8002012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f000 f953 	bl	80022ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002008:	4a06      	ldr	r2, [pc, #24]	; (8002024 <HAL_InitTick+0x5c>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	e000      	b.n	8002014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000000 	.word	0x20000000
 8002020:	20000008 	.word	0x20000008
 8002024:	20000004 	.word	0x20000004

08002028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_IncTick+0x20>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_IncTick+0x24>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4413      	add	r3, r2
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_IncTick+0x24>)
 800203a:	6013      	str	r3, [r2, #0]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000008 	.word	0x20000008
 800204c:	20000390 	.word	0x20000390

08002050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return uwTick;
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_GetTick+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000390 	.word	0x20000390

08002068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002070:	f7ff ffee 	bl	8002050 <HAL_GetTick>
 8002074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d005      	beq.n	800208e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_Delay+0x44>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800208e:	bf00      	nop
 8002090:	f7ff ffde 	bl	8002050 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d8f7      	bhi.n	8002090 <HAL_Delay+0x28>
  {
  }
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000008 	.word	0x20000008

080020b0 <__NVIC_SetPriorityGrouping>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <__NVIC_SetPriorityGrouping+0x40>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020de:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <__NVIC_SetPriorityGrouping+0x40>)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	60d3      	str	r3, [r2, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00
 80020f4:	05fa0000 	.word	0x05fa0000

080020f8 <__NVIC_GetPriorityGrouping>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_GetPriorityGrouping+0x18>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0307 	and.w	r3, r3, #7
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_EnableIRQ>:
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db0b      	blt.n	800213e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <__NVIC_EnableIRQ+0x38>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_DisableIRQ>:
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	2b00      	cmp	r3, #0
 8002160:	db12      	blt.n	8002188 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	490a      	ldr	r1, [pc, #40]	; (8002194 <__NVIC_DisableIRQ+0x44>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2001      	movs	r0, #1
 8002172:	fa00 f202 	lsl.w	r2, r0, r2
 8002176:	3320      	adds	r3, #32
 8002178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800217c:	f3bf 8f4f 	dsb	sy
}
 8002180:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002182:	f3bf 8f6f 	isb	sy
}
 8002186:	bf00      	nop
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100

08002198 <__NVIC_SetPriority>:
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	db0a      	blt.n	80021c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	490c      	ldr	r1, [pc, #48]	; (80021e4 <__NVIC_SetPriority+0x4c>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	440b      	add	r3, r1
 80021bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021c0:	e00a      	b.n	80021d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4908      	ldr	r1, [pc, #32]	; (80021e8 <__NVIC_SetPriority+0x50>)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	3b04      	subs	r3, #4
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	440b      	add	r3, r1
 80021d6:	761a      	strb	r2, [r3, #24]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000e100 	.word	0xe000e100
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <NVIC_EncodePriority>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f1c3 0307 	rsb	r3, r3, #7
 8002206:	2b04      	cmp	r3, #4
 8002208:	bf28      	it	cs
 800220a:	2304      	movcs	r3, #4
 800220c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3304      	adds	r3, #4
 8002212:	2b06      	cmp	r3, #6
 8002214:	d902      	bls.n	800221c <NVIC_EncodePriority+0x30>
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3b03      	subs	r3, #3
 800221a:	e000      	b.n	800221e <NVIC_EncodePriority+0x32>
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	f04f 32ff 	mov.w	r2, #4294967295
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	401a      	ands	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002234:	f04f 31ff 	mov.w	r1, #4294967295
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	43d9      	mvns	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	4313      	orrs	r3, r2
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002264:	d301      	bcc.n	800226a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002266:	2301      	movs	r3, #1
 8002268:	e00f      	b.n	800228a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <SysTick_Config+0x40>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002272:	210f      	movs	r1, #15
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	f7ff ff8e 	bl	8002198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <SysTick_Config+0x40>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <SysTick_Config+0x40>)
 8002284:	2207      	movs	r2, #7
 8002286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	e000e010 	.word	0xe000e010

08002298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff05 	bl	80020b0 <__NVIC_SetPriorityGrouping>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c0:	f7ff ff1a 	bl	80020f8 <__NVIC_GetPriorityGrouping>
 80022c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7ff ff8e 	bl	80021ec <NVIC_EncodePriority>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff5d 	bl	8002198 <__NVIC_SetPriority>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff0d 	bl	8002114 <__NVIC_EnableIRQ>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff1d 	bl	8002150 <__NVIC_DisableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ff94 	bl	8002254 <SysTick_Config>
 800232c:	4603      	mov	r3, r0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002336:	b480      	push	{r7}
 8002338:	b085      	sub	sp, #20
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	019a      	lsls	r2, r3, #6
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	431a      	orrs	r2, r3
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	431a      	orrs	r2, r3
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	041b      	lsls	r3, r3, #16
 8002356:	431a      	orrs	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002376:	f7ff fe6b 	bl	8002050 <HAL_GetTick>
 800237a:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800237c:	e009      	b.n	8002392 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800237e:	f7ff fe67 	bl	8002050 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800238c:	d901      	bls.n	8002392 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e015      	b.n	80023be <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ee      	beq.n	800237e <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	019a      	lsls	r2, r3, #6
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	ea42 0103 	orr.w	r1, r2, r3
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	041a      	lsls	r2, r3, #16
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e106      	b.n	80025ea <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7c5b      	ldrb	r3, [r3, #17]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f97c 	bl	80026e4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2203      	movs	r2, #3
 80023f0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002406:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800241a:	f7ff fe19 	bl	8002050 <HAL_GetTick>
 800241e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002420:	e009      	b.n	8002436 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002422:	f7ff fe15 	bl	8002050 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002430:	d901      	bls.n	8002436 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e0d9      	b.n	80025ea <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800243e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0ed      	beq.n	8002422 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b68      	ldr	r3, [pc, #416]	; (80025f4 <HAL_DSI_Init+0x22c>)
 8002454:	400b      	ands	r3, r1
 8002456:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	009a      	lsls	r2, r3, #2
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	02db      	lsls	r3, r3, #11
 800246e:	431a      	orrs	r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	041b      	lsls	r3, r3, #16
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024aa:	f7ff fdd1 	bl	8002050 <HAL_GetTick>
 80024ae:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80024b0:	e009      	b.n	80024c6 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80024b2:	f7ff fdcd 	bl	8002050 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c0:	d901      	bls.n	80024c6 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e091      	b.n	80025ea <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0ed      	beq.n	80024b2 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0206 	orr.w	r2, r2, #6
 80024e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0203 	bic.w	r2, r2, #3
 80024fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0201 	orr.w	r2, r2, #1
 8002514:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0203 	bic.w	r2, r2, #3
 8002528:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002550:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6899      	ldr	r1, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_DSI_Init+0x1aa>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	e000      	b.n	8002574 <HAL_DSI_Init+0x1ac>
 8002572:	2301      	movs	r3, #1
 8002574:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4a1f      	ldr	r2, [pc, #124]	; (80025f8 <HAL_DSI_Init+0x230>)
 800257a:	fb02 f203 	mul.w	r2, r2, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	409a      	lsls	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80025aa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	430a      	orrs	r2, r1
 80025be:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3720      	adds	r7, #32
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	fffc8603 	.word	0xfffc8603
 80025f8:	003d0900 	.word	0x003d0900

080025fc <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e066      	b.n	80026dc <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2203      	movs	r2, #3
 8002612:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0208 	bic.w	r2, r2, #8
 8002628:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0206 	bic.w	r2, r2, #6
 800266e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80026ae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80026ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f818 	bl	80026f8 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7c1b      	ldrb	r3, [r3, #16]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_DSI_ConfigVideoMode+0x16>
 800271e:	2302      	movs	r3, #2
 8002720:	e1ee      	b.n	8002b00 <HAL_DSI_ConfigVideoMode+0x3f4>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0201 	bic.w	r2, r2, #1
 8002748:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0203 	bic.w	r2, r2, #3
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b8b      	ldr	r3, [pc, #556]	; (80029a8 <HAL_DSI_ConfigVideoMode+0x29c>)
 800277a:	400b      	ands	r3, r1
 800277c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4b84      	ldr	r3, [pc, #528]	; (80029ac <HAL_DSI_ConfigVideoMode+0x2a0>)
 800279c:	400b      	ands	r3, r1
 800279e:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b7b      	ldr	r3, [pc, #492]	; (80029ac <HAL_DSI_ConfigVideoMode+0x2a0>)
 80027be:	400b      	ands	r3, r1
 80027c0:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0203 	bic.w	r2, r2, #3
 80027e2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68d9      	ldr	r1, [r3, #12]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0207 	bic.w	r2, r2, #7
 8002804:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6959      	ldr	r1, [r3, #20]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	431a      	orrs	r2, r3
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 020f 	bic.w	r2, r2, #15
 8002832:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6919      	ldr	r1, [r3, #16]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 020e 	bic.w	r2, r2, #14
 8002856:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	005a      	lsls	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d110      	bne.n	800289c <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002888:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6919      	ldr	r1, [r3, #16]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80028a8:	400b      	ands	r3, r1
 80028aa:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80028ca:	400b      	ands	r3, r1
 80028cc:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <HAL_DSI_ConfigVideoMode+0x2a8>)
 80028ec:	400b      	ands	r3, r1
 80028ee:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800290e:	400b      	ands	r3, r1
 8002910:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002930:	400b      	ands	r3, r1
 8002932:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002952:	400b      	ands	r3, r1
 8002954:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_DSI_ConfigVideoMode+0x29c>)
 8002974:	400b      	ands	r3, r1
 8002976:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002998:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029a4:	e00a      	b.n	80029bc <HAL_DSI_ConfigVideoMode+0x2b0>
 80029a6:	bf00      	nop
 80029a8:	ffffc000 	.word	0xffffc000
 80029ac:	ffffe000 	.word	0xffffe000
 80029b0:	fffff000 	.word	0xfffff000
 80029b4:	ffff8000 	.word	0xffff8000
 80029b8:	fffffc00 	.word	0xfffffc00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80029d2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6999      	ldr	r1, [r3, #24]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029de:	041a      	lsls	r2, r3, #16
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029f6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6999      	ldr	r1, [r3, #24]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7c1b      	ldrb	r3, [r3, #16]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_DSI_Start+0x14>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e02b      	b.n	8002b78 <HAL_DSI_Start+0x6c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0208 	orr.w	r2, r2, #8
 8002b5c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7c1b      	ldrb	r3, [r3, #16]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_DSI_Stop+0x14>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e02b      	b.n	8002bf0 <HAL_DSI_Stop+0x6c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0208 	bic.w	r2, r2, #8
 8002bd4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	7c1b      	ldrb	r3, [r3, #16]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_DSI_ShortWrite+0x1a>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e010      	b.n	8002c38 <HAL_DSI_ShortWrite+0x3c>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7ff fb9e 	bl	8002368 <DSI_ShortWrite>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	741a      	strb	r2, [r3, #16]

  return status;
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08c      	sub	sp, #48	; 0x30
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8002c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c50:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	7c1b      	ldrb	r3, [r3, #16]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_DSI_LongWrite+0x1e>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e084      	b.n	8002d68 <HAL_DSI_LongWrite+0x128>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c64:	f7ff f9f4 	bl	8002050 <HAL_GetTick>
 8002c68:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002c6a:	e00c      	b.n	8002c86 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002c6c:	f7ff f9f0 	bl	8002050 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c7a:	d904      	bls.n	8002c86 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e070      	b.n	8002d68 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0eb      	beq.n	8002c6c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	bf28      	it	cs
 8002c9e:	2303      	movcs	r3, #3
 8002ca0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	623b      	str	r3, [r7, #32]
 8002ca6:	e00f      	b.n	8002cc8 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	4413      	add	r3, r2
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d3eb      	bcc.n	8002ca8 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8002ce8:	e028      	b.n	8002d3c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	bf28      	it	cs
 8002cf0:	2304      	movcs	r3, #4
 8002cf2:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
 8002cfc:	e00e      	b.n	8002d1c <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	4413      	add	r3, r2
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	623b      	str	r3, [r7, #32]
 8002d1c:	6a3a      	ldr	r2, [r7, #32]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d3ec      	bcc.n	8002cfe <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8002d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4413      	add	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1d3      	bne.n	8002cea <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002d4a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	4613      	mov	r3, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	f7ff faeb 	bl	8002336 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3728      	adds	r7, #40	; 0x28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e175      	b.n	800307c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f040 8164 	bne.w	8003076 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d00b      	beq.n	8002dce <HAL_GPIO_Init+0x5e>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d007      	beq.n	8002dce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dc2:	2b11      	cmp	r3, #17
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b12      	cmp	r3, #18
 8002dcc:	d130      	bne.n	8002e30 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2203      	movs	r2, #3
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e04:	2201      	movs	r2, #1
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 0201 	and.w	r2, r3, #1
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x100>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b12      	cmp	r3, #18
 8002e6e:	d123      	bne.n	8002eb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	69b9      	ldr	r1, [r7, #24]
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80be 	beq.w	8003076 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	4b66      	ldr	r3, [pc, #408]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	4a65      	ldr	r2, [pc, #404]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f04:	6453      	str	r3, [r2, #68]	; 0x44
 8002f06:	4b63      	ldr	r3, [pc, #396]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f12:	4a61      	ldr	r2, [pc, #388]	; (8003098 <HAL_GPIO_Init+0x328>)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_GPIO_Init+0x32c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d037      	beq.n	8002fae <HAL_GPIO_Init+0x23e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a57      	ldr	r2, [pc, #348]	; (80030a0 <HAL_GPIO_Init+0x330>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d031      	beq.n	8002faa <HAL_GPIO_Init+0x23a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a56      	ldr	r2, [pc, #344]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d02b      	beq.n	8002fa6 <HAL_GPIO_Init+0x236>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a55      	ldr	r2, [pc, #340]	; (80030a8 <HAL_GPIO_Init+0x338>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d025      	beq.n	8002fa2 <HAL_GPIO_Init+0x232>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a54      	ldr	r2, [pc, #336]	; (80030ac <HAL_GPIO_Init+0x33c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01f      	beq.n	8002f9e <HAL_GPIO_Init+0x22e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a53      	ldr	r2, [pc, #332]	; (80030b0 <HAL_GPIO_Init+0x340>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d019      	beq.n	8002f9a <HAL_GPIO_Init+0x22a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_GPIO_Init+0x344>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_GPIO_Init+0x226>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a51      	ldr	r2, [pc, #324]	; (80030b8 <HAL_GPIO_Init+0x348>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00d      	beq.n	8002f92 <HAL_GPIO_Init+0x222>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a50      	ldr	r2, [pc, #320]	; (80030bc <HAL_GPIO_Init+0x34c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <HAL_GPIO_Init+0x21e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4f      	ldr	r2, [pc, #316]	; (80030c0 <HAL_GPIO_Init+0x350>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_GPIO_Init+0x21a>
 8002f86:	2309      	movs	r3, #9
 8002f88:	e012      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f8a:	230a      	movs	r3, #10
 8002f8c:	e010      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f8e:	2308      	movs	r3, #8
 8002f90:	e00e      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f92:	2307      	movs	r3, #7
 8002f94:	e00c      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f96:	2306      	movs	r3, #6
 8002f98:	e00a      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f9a:	2305      	movs	r3, #5
 8002f9c:	e008      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f9e:	2304      	movs	r3, #4
 8002fa0:	e006      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e004      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e002      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	f002 0203 	and.w	r2, r2, #3
 8002fb6:	0092      	lsls	r2, r2, #2
 8002fb8:	4093      	lsls	r3, r2
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fc0:	4935      	ldr	r1, [pc, #212]	; (8003098 <HAL_GPIO_Init+0x328>)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fce:	4b3d      	ldr	r3, [pc, #244]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff2:	4a34      	ldr	r2, [pc, #208]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ff8:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800301c:	4a29      	ldr	r2, [pc, #164]	; (80030c4 <HAL_GPIO_Init+0x354>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003022:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_GPIO_Init+0x354>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003070:	4a14      	ldr	r2, [pc, #80]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b0f      	cmp	r3, #15
 8003080:	f67f ae86 	bls.w	8002d90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	40013800 	.word	0x40013800
 800309c:	40020000 	.word	0x40020000
 80030a0:	40020400 	.word	0x40020400
 80030a4:	40020800 	.word	0x40020800
 80030a8:	40020c00 	.word	0x40020c00
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40021400 	.word	0x40021400
 80030b4:	40021800 	.word	0x40021800
 80030b8:	40021c00 	.word	0x40021c00
 80030bc:	40022000 	.word	0x40022000
 80030c0:	40022400 	.word	0x40022400
 80030c4:	40013c00 	.word	0x40013c00

080030c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e0d9      	b.n	8003298 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030e4:	2201      	movs	r2, #1
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	f040 80c9 	bne.w	8003292 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003100:	4a6b      	ldr	r2, [pc, #428]	; (80032b0 <HAL_GPIO_DeInit+0x1e8>)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3302      	adds	r3, #2
 8003108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	220f      	movs	r2, #15
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	4013      	ands	r3, r2
 8003120:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a63      	ldr	r2, [pc, #396]	; (80032b4 <HAL_GPIO_DeInit+0x1ec>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d037      	beq.n	800319a <HAL_GPIO_DeInit+0xd2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a62      	ldr	r2, [pc, #392]	; (80032b8 <HAL_GPIO_DeInit+0x1f0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d031      	beq.n	8003196 <HAL_GPIO_DeInit+0xce>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a61      	ldr	r2, [pc, #388]	; (80032bc <HAL_GPIO_DeInit+0x1f4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d02b      	beq.n	8003192 <HAL_GPIO_DeInit+0xca>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a60      	ldr	r2, [pc, #384]	; (80032c0 <HAL_GPIO_DeInit+0x1f8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d025      	beq.n	800318e <HAL_GPIO_DeInit+0xc6>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a5f      	ldr	r2, [pc, #380]	; (80032c4 <HAL_GPIO_DeInit+0x1fc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01f      	beq.n	800318a <HAL_GPIO_DeInit+0xc2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a5e      	ldr	r2, [pc, #376]	; (80032c8 <HAL_GPIO_DeInit+0x200>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d019      	beq.n	8003186 <HAL_GPIO_DeInit+0xbe>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a5d      	ldr	r2, [pc, #372]	; (80032cc <HAL_GPIO_DeInit+0x204>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_GPIO_DeInit+0xba>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a5c      	ldr	r2, [pc, #368]	; (80032d0 <HAL_GPIO_DeInit+0x208>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00d      	beq.n	800317e <HAL_GPIO_DeInit+0xb6>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a5b      	ldr	r2, [pc, #364]	; (80032d4 <HAL_GPIO_DeInit+0x20c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <HAL_GPIO_DeInit+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a5a      	ldr	r2, [pc, #360]	; (80032d8 <HAL_GPIO_DeInit+0x210>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_GPIO_DeInit+0xae>
 8003172:	2309      	movs	r3, #9
 8003174:	e012      	b.n	800319c <HAL_GPIO_DeInit+0xd4>
 8003176:	230a      	movs	r3, #10
 8003178:	e010      	b.n	800319c <HAL_GPIO_DeInit+0xd4>
 800317a:	2308      	movs	r3, #8
 800317c:	e00e      	b.n	800319c <HAL_GPIO_DeInit+0xd4>
 800317e:	2307      	movs	r3, #7
 8003180:	e00c      	b.n	800319c <HAL_GPIO_DeInit+0xd4>
 8003182:	2306      	movs	r3, #6
 8003184:	e00a      	b.n	800319c <HAL_GPIO_DeInit+0xd4>
 8003186:	2305      	movs	r3, #5
 8003188:	e008      	b.n	800319c <HAL_GPIO_DeInit+0xd4>
 800318a:	2304      	movs	r3, #4
 800318c:	e006      	b.n	800319c <HAL_GPIO_DeInit+0xd4>
 800318e:	2303      	movs	r3, #3
 8003190:	e004      	b.n	800319c <HAL_GPIO_DeInit+0xd4>
 8003192:	2302      	movs	r3, #2
 8003194:	e002      	b.n	800319c <HAL_GPIO_DeInit+0xd4>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_GPIO_DeInit+0xd4>
 800319a:	2300      	movs	r3, #0
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	f002 0203 	and.w	r2, r2, #3
 80031a2:	0092      	lsls	r2, r2, #2
 80031a4:	4093      	lsls	r3, r2
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d132      	bne.n	8003212 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80031ac:	4b4b      	ldr	r3, [pc, #300]	; (80032dc <HAL_GPIO_DeInit+0x214>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	4949      	ldr	r1, [pc, #292]	; (80032dc <HAL_GPIO_DeInit+0x214>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80031ba:	4b48      	ldr	r3, [pc, #288]	; (80032dc <HAL_GPIO_DeInit+0x214>)
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	4946      	ldr	r1, [pc, #280]	; (80032dc <HAL_GPIO_DeInit+0x214>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80031c8:	4b44      	ldr	r3, [pc, #272]	; (80032dc <HAL_GPIO_DeInit+0x214>)
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	4942      	ldr	r1, [pc, #264]	; (80032dc <HAL_GPIO_DeInit+0x214>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80031d6:	4b41      	ldr	r3, [pc, #260]	; (80032dc <HAL_GPIO_DeInit+0x214>)
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	43db      	mvns	r3, r3
 80031de:	493f      	ldr	r1, [pc, #252]	; (80032dc <HAL_GPIO_DeInit+0x214>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	220f      	movs	r2, #15
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80031f4:	4a2e      	ldr	r2, [pc, #184]	; (80032b0 <HAL_GPIO_DeInit+0x1e8>)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	3302      	adds	r3, #2
 80031fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	43da      	mvns	r2, r3
 8003204:	482a      	ldr	r0, [pc, #168]	; (80032b0 <HAL_GPIO_DeInit+0x1e8>)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	400a      	ands	r2, r1
 800320c:	3302      	adds	r3, #2
 800320e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2103      	movs	r1, #3
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	401a      	ands	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	08da      	lsrs	r2, r3, #3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3208      	adds	r2, #8
 8003230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	220f      	movs	r2, #15
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	08d2      	lsrs	r2, r2, #3
 8003248:	4019      	ands	r1, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3208      	adds	r2, #8
 800324e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	2103      	movs	r1, #3
 800325c:	fa01 f303 	lsl.w	r3, r1, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	401a      	ands	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	2101      	movs	r1, #1
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	fa01 f303 	lsl.w	r3, r1, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	401a      	ands	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	2103      	movs	r1, #3
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	401a      	ands	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	3301      	adds	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b0f      	cmp	r3, #15
 800329c:	f67f af22 	bls.w	80030e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40013800 	.word	0x40013800
 80032b4:	40020000 	.word	0x40020000
 80032b8:	40020400 	.word	0x40020400
 80032bc:	40020800 	.word	0x40020800
 80032c0:	40020c00 	.word	0x40020c00
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40021400 	.word	0x40021400
 80032cc:	40021800 	.word	0x40021800
 80032d0:	40021c00 	.word	0x40021c00
 80032d4:	40022000 	.word	0x40022000
 80032d8:	40022400 	.word	0x40022400
 80032dc:	40013c00 	.word	0x40013c00

080032e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	807b      	strh	r3, [r7, #2]
 80032ec:	4613      	mov	r3, r2
 80032ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f0:	787b      	ldrb	r3, [r7, #1]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032fc:	e003      	b.n	8003306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032fe:	887b      	ldrh	r3, [r7, #2]
 8003300:	041a      	lsls	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	619a      	str	r2, [r3, #24]
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0bf      	b.n	80034a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f8d2 	bl	80034e4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003356:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6999      	ldr	r1, [r3, #24]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800336c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6899      	ldr	r1, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b4a      	ldr	r3, [pc, #296]	; (80034b0 <HAL_LTDC_Init+0x19c>)
 8003388:	400b      	ands	r3, r1
 800338a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	041b      	lsls	r3, r3, #16
 8003392:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6899      	ldr	r1, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68d9      	ldr	r1, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b3e      	ldr	r3, [pc, #248]	; (80034b0 <HAL_LTDC_Init+0x19c>)
 80033b6:	400b      	ands	r3, r1
 80033b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	041b      	lsls	r3, r3, #16
 80033c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68d9      	ldr	r1, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1a      	ldr	r2, [r3, #32]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6919      	ldr	r1, [r3, #16]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	4b33      	ldr	r3, [pc, #204]	; (80034b0 <HAL_LTDC_Init+0x19c>)
 80033e4:	400b      	ands	r3, r1
 80033e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6919      	ldr	r1, [r3, #16]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6959      	ldr	r1, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <HAL_LTDC_Init+0x19c>)
 8003412:	400b      	ands	r3, r1
 8003414:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	041b      	lsls	r3, r3, #16
 800341c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6959      	ldr	r1, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0206 	orr.w	r2, r2, #6
 8003482:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	f000f800 	.word	0xf000f800

080034b4 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f81b 	bl	80034f8 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800350c:	b5b0      	push	{r4, r5, r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_LTDC_ConfigLayer+0x1a>
 8003522:	2302      	movs	r3, #2
 8003524:	e02c      	b.n	8003580 <HAL_LTDC_ConfigLayer+0x74>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2202      	movs	r2, #2
 8003532:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2134      	movs	r1, #52	; 0x34
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	4413      	add	r3, r2
 8003542:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4614      	mov	r4, r2
 800354a:	461d      	mov	r5, r3
 800354c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800354e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f847 	bl	80035f4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2201      	movs	r2, #1
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bdb0      	pop	{r4, r5, r7, pc}

08003588 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_LTDC_SetAddress+0x1a>
 800359e:	2302      	movs	r3, #2
 80035a0:	e024      	b.n	80035ec <HAL_LTDC_SetAddress+0x64>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2234      	movs	r2, #52	; 0x34
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	3338      	adds	r3, #56	; 0x38
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6979      	ldr	r1, [r7, #20]
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 f811 	bl	80035f4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2201      	movs	r2, #1
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	; 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	0c1b      	lsrs	r3, r3, #16
 800360c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003610:	4413      	add	r3, r2
 8003612:	041b      	lsls	r3, r3, #16
 8003614:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	01db      	lsls	r3, r3, #7
 8003620:	4413      	add	r3, r2
 8003622:	3384      	adds	r3, #132	; 0x84
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	4611      	mov	r1, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	01d2      	lsls	r2, r2, #7
 8003630:	440a      	add	r2, r1
 8003632:	3284      	adds	r2, #132	; 0x84
 8003634:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003638:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364a:	4413      	add	r3, r2
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4619      	mov	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	01db      	lsls	r3, r3, #7
 8003658:	440b      	add	r3, r1
 800365a:	3384      	adds	r3, #132	; 0x84
 800365c:	4619      	mov	r1, r3
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003672:	4413      	add	r3, r2
 8003674:	041b      	lsls	r3, r3, #16
 8003676:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	01db      	lsls	r3, r3, #7
 8003682:	4413      	add	r3, r2
 8003684:	3384      	adds	r3, #132	; 0x84
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	4611      	mov	r1, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	01d2      	lsls	r2, r2, #7
 8003692:	440a      	add	r2, r1
 8003694:	3284      	adds	r2, #132	; 0x84
 8003696:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800369a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036aa:	4413      	add	r3, r2
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4619      	mov	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	01db      	lsls	r3, r3, #7
 80036b8:	440b      	add	r3, r1
 80036ba:	3384      	adds	r3, #132	; 0x84
 80036bc:	4619      	mov	r1, r3
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	01db      	lsls	r3, r3, #7
 80036ce:	4413      	add	r3, r2
 80036d0:	3384      	adds	r3, #132	; 0x84
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	4611      	mov	r1, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	01d2      	lsls	r2, r2, #7
 80036de:	440a      	add	r2, r1
 80036e0:	3284      	adds	r2, #132	; 0x84
 80036e2:	f023 0307 	bic.w	r3, r3, #7
 80036e6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	01db      	lsls	r3, r3, #7
 80036f2:	4413      	add	r3, r2
 80036f4:	3384      	adds	r3, #132	; 0x84
 80036f6:	461a      	mov	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800370e:	041b      	lsls	r3, r3, #16
 8003710:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	061b      	lsls	r3, r3, #24
 8003718:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	01db      	lsls	r3, r3, #7
 8003724:	4413      	add	r3, r2
 8003726:	3384      	adds	r3, #132	; 0x84
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	01db      	lsls	r3, r3, #7
 8003734:	4413      	add	r3, r2
 8003736:	3384      	adds	r3, #132	; 0x84
 8003738:	461a      	mov	r2, r3
 800373a:	2300      	movs	r3, #0
 800373c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003744:	461a      	mov	r2, r3
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	431a      	orrs	r2, r3
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	431a      	orrs	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4619      	mov	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	01db      	lsls	r3, r3, #7
 8003758:	440b      	add	r3, r1
 800375a:	3384      	adds	r3, #132	; 0x84
 800375c:	4619      	mov	r1, r3
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	01db      	lsls	r3, r3, #7
 800376e:	4413      	add	r3, r2
 8003770:	3384      	adds	r3, #132	; 0x84
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	4611      	mov	r1, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	01d2      	lsls	r2, r2, #7
 800377e:	440a      	add	r2, r1
 8003780:	3284      	adds	r2, #132	; 0x84
 8003782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003786:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	01db      	lsls	r3, r3, #7
 8003792:	4413      	add	r3, r2
 8003794:	3384      	adds	r3, #132	; 0x84
 8003796:	461a      	mov	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	01db      	lsls	r3, r3, #7
 80037a8:	4413      	add	r3, r2
 80037aa:	3384      	adds	r3, #132	; 0x84
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4619      	mov	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	01db      	lsls	r3, r3, #7
 80037b8:	440b      	add	r3, r1
 80037ba:	3384      	adds	r3, #132	; 0x84
 80037bc:	4619      	mov	r1, r3
 80037be:	4b58      	ldr	r3, [pc, #352]	; (8003920 <LTDC_SetConfig+0x32c>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	68f9      	ldr	r1, [r7, #12]
 80037ce:	6809      	ldr	r1, [r1, #0]
 80037d0:	4608      	mov	r0, r1
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	01c9      	lsls	r1, r1, #7
 80037d6:	4401      	add	r1, r0
 80037d8:	3184      	adds	r1, #132	; 0x84
 80037da:	4313      	orrs	r3, r2
 80037dc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	01db      	lsls	r3, r3, #7
 80037e8:	4413      	add	r3, r2
 80037ea:	3384      	adds	r3, #132	; 0x84
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	01db      	lsls	r3, r3, #7
 80037f8:	4413      	add	r3, r2
 80037fa:	3384      	adds	r3, #132	; 0x84
 80037fc:	461a      	mov	r2, r3
 80037fe:	2300      	movs	r3, #0
 8003800:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	01db      	lsls	r3, r3, #7
 800380c:	4413      	add	r3, r2
 800380e:	3384      	adds	r3, #132	; 0x84
 8003810:	461a      	mov	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003820:	2304      	movs	r3, #4
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	e01b      	b.n	800385e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d102      	bne.n	8003834 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800382e:	2303      	movs	r3, #3
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	e014      	b.n	800385e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b04      	cmp	r3, #4
 800383a:	d00b      	beq.n	8003854 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003840:	2b02      	cmp	r3, #2
 8003842:	d007      	beq.n	8003854 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003848:	2b03      	cmp	r3, #3
 800384a:	d003      	beq.n	8003854 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003850:	2b07      	cmp	r3, #7
 8003852:	d102      	bne.n	800385a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003854:	2302      	movs	r3, #2
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	e001      	b.n	800385e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800385a:	2301      	movs	r3, #1
 800385c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	01db      	lsls	r3, r3, #7
 8003868:	4413      	add	r3, r2
 800386a:	3384      	adds	r3, #132	; 0x84
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	4611      	mov	r1, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	01d2      	lsls	r2, r2, #7
 8003878:	440a      	add	r2, r1
 800387a:	3284      	adds	r2, #132	; 0x84
 800387c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003880:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	fb02 f303 	mul.w	r3, r2, r3
 800388c:	041a      	lsls	r2, r3, #16
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	6859      	ldr	r1, [r3, #4]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	1acb      	subs	r3, r1, r3
 8003898:	69f9      	ldr	r1, [r7, #28]
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	3303      	adds	r3, #3
 80038a0:	68f9      	ldr	r1, [r7, #12]
 80038a2:	6809      	ldr	r1, [r1, #0]
 80038a4:	4608      	mov	r0, r1
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	01c9      	lsls	r1, r1, #7
 80038aa:	4401      	add	r1, r0
 80038ac:	3184      	adds	r1, #132	; 0x84
 80038ae:	4313      	orrs	r3, r2
 80038b0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	01db      	lsls	r3, r3, #7
 80038bc:	4413      	add	r3, r2
 80038be:	3384      	adds	r3, #132	; 0x84
 80038c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4619      	mov	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	01db      	lsls	r3, r3, #7
 80038cc:	440b      	add	r3, r1
 80038ce:	3384      	adds	r3, #132	; 0x84
 80038d0:	4619      	mov	r1, r3
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <LTDC_SetConfig+0x330>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	01db      	lsls	r3, r3, #7
 80038e2:	4413      	add	r3, r2
 80038e4:	3384      	adds	r3, #132	; 0x84
 80038e6:	461a      	mov	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	01db      	lsls	r3, r3, #7
 80038f8:	4413      	add	r3, r2
 80038fa:	3384      	adds	r3, #132	; 0x84
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	4611      	mov	r1, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	01d2      	lsls	r2, r2, #7
 8003908:	440a      	add	r2, r1
 800390a:	3284      	adds	r2, #132	; 0x84
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6013      	str	r3, [r2, #0]
}
 8003912:	bf00      	nop
 8003914:	3724      	adds	r7, #36	; 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	fffff8f8 	.word	0xfffff8f8
 8003924:	fffff800 	.word	0xfffff800

08003928 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800393a:	2200      	movs	r2, #0
 800393c:	e001      	b.n	8003942 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800393e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800394e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003952:	e000      	b.n	8003956 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8003954:	2200      	movs	r2, #0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8003962:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003966:	e000      	b.n	800396a <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8003968:	2200      	movs	r2, #0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003972:	1e5a      	subs	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	4413      	add	r3, r2
 8003982:	1e5a      	subs	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	441a      	add	r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4413      	add	r3, r2
 8003998:	1e5a      	subs	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	441a      	add	r2, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	441a      	add	r2, r3
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	4413      	add	r3, r2
 80039b4:	1e5a      	subs	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40007000 	.word	0x40007000

080039e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039f2:	4b23      	ldr	r3, [pc, #140]	; (8003a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	4a22      	ldr	r2, [pc, #136]	; (8003a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fc:	6413      	str	r3, [r2, #64]	; 0x40
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a16:	f7fe fb1b 	bl	8002050 <HAL_GetTick>
 8003a1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a1c:	e009      	b.n	8003a32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a1e:	f7fe fb17 	bl	8002050 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a2c:	d901      	bls.n	8003a32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e022      	b.n	8003a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3e:	d1ee      	bne.n	8003a1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a40:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0f      	ldr	r2, [pc, #60]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a4c:	f7fe fb00 	bl	8002050 <HAL_GetTick>
 8003a50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a52:	e009      	b.n	8003a68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a54:	f7fe fafc 	bl	8002050 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a62:	d901      	bls.n	8003a68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e007      	b.n	8003a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a74:	d1ee      	bne.n	8003a54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40007000 	.word	0x40007000

08003a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a90:	2300      	movs	r3, #0
 8003a92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e29b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8087 	beq.w	8003bba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aac:	4b96      	ldr	r3, [pc, #600]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab8:	4b93      	ldr	r3, [pc, #588]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d112      	bne.n	8003aea <HAL_RCC_OscConfig+0x62>
 8003ac4:	4b90      	ldr	r3, [pc, #576]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad0:	d10b      	bne.n	8003aea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad2:	4b8d      	ldr	r3, [pc, #564]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d06c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x130>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d168      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e275      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af2:	d106      	bne.n	8003b02 <HAL_RCC_OscConfig+0x7a>
 8003af4:	4b84      	ldr	r3, [pc, #528]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a83      	ldr	r2, [pc, #524]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e02e      	b.n	8003b60 <HAL_RCC_OscConfig+0xd8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x9c>
 8003b0a:	4b7f      	ldr	r3, [pc, #508]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7e      	ldr	r2, [pc, #504]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b7c      	ldr	r3, [pc, #496]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a7b      	ldr	r2, [pc, #492]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e01d      	b.n	8003b60 <HAL_RCC_OscConfig+0xd8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0xc0>
 8003b2e:	4b76      	ldr	r3, [pc, #472]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a75      	ldr	r2, [pc, #468]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	4b73      	ldr	r3, [pc, #460]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a72      	ldr	r2, [pc, #456]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e00b      	b.n	8003b60 <HAL_RCC_OscConfig+0xd8>
 8003b48:	4b6f      	ldr	r3, [pc, #444]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6e      	ldr	r2, [pc, #440]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b6c      	ldr	r3, [pc, #432]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a6b      	ldr	r2, [pc, #428]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d013      	beq.n	8003b90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fe fa72 	bl	8002050 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe fa6e 	bl	8002050 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e229      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	4b61      	ldr	r3, [pc, #388]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0xe8>
 8003b8e:	e014      	b.n	8003bba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fe fa5e 	bl	8002050 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fe fa5a 	bl	8002050 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e215      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	4b57      	ldr	r3, [pc, #348]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x110>
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d069      	beq.n	8003c9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bc6:	4b50      	ldr	r3, [pc, #320]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd2:	4b4d      	ldr	r3, [pc, #308]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d11c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x190>
 8003bde:	4b4a      	ldr	r3, [pc, #296]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d116      	bne.n	8003c18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bea:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_RCC_OscConfig+0x17a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e1e9      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c02:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	493d      	ldr	r1, [pc, #244]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c16:	e040      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d023      	beq.n	8003c68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c20:	4b39      	ldr	r3, [pc, #228]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a38      	ldr	r2, [pc, #224]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fe fa10 	bl	8002050 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c34:	f7fe fa0c 	bl	8002050 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e1c7      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c46:	4b30      	ldr	r3, [pc, #192]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c52:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4929      	ldr	r1, [pc, #164]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]
 8003c66:	e018      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c68:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe f9ec 	bl	8002050 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7c:	f7fe f9e8 	bl	8002050 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1a3      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d038      	beq.n	8003d18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d019      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cae:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb2:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fe f9c9 	bl	8002050 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fe f9c5 	bl	8002050 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e180      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x23a>
 8003ce0:	e01a      	b.n	8003d18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce2:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce6:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fe f9af 	bl	8002050 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf6:	f7fe f9ab 	bl	8002050 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d903      	bls.n	8003d0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e166      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
 8003d08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0c:	4b92      	ldr	r3, [pc, #584]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1ee      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80a4 	beq.w	8003e6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d26:	4b8c      	ldr	r3, [pc, #560]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10d      	bne.n	8003d4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	4b89      	ldr	r3, [pc, #548]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	4a88      	ldr	r2, [pc, #544]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3e:	4b86      	ldr	r3, [pc, #536]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4e:	4b83      	ldr	r3, [pc, #524]	; (8003f5c <HAL_RCC_OscConfig+0x4d4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d118      	bne.n	8003d8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d5a:	4b80      	ldr	r3, [pc, #512]	; (8003f5c <HAL_RCC_OscConfig+0x4d4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a7f      	ldr	r2, [pc, #508]	; (8003f5c <HAL_RCC_OscConfig+0x4d4>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d66:	f7fe f973 	bl	8002050 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6e:	f7fe f96f 	bl	8002050 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b64      	cmp	r3, #100	; 0x64
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e12a      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	4b76      	ldr	r3, [pc, #472]	; (8003f5c <HAL_RCC_OscConfig+0x4d4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x31a>
 8003d94:	4b70      	ldr	r3, [pc, #448]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	4a6f      	ldr	r2, [pc, #444]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003da0:	e02d      	b.n	8003dfe <HAL_RCC_OscConfig+0x376>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x33c>
 8003daa:	4b6b      	ldr	r3, [pc, #428]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	4a6a      	ldr	r2, [pc, #424]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6713      	str	r3, [r2, #112]	; 0x70
 8003db6:	4b68      	ldr	r3, [pc, #416]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a67      	ldr	r2, [pc, #412]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc2:	e01c      	b.n	8003dfe <HAL_RCC_OscConfig+0x376>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	d10c      	bne.n	8003de6 <HAL_RCC_OscConfig+0x35e>
 8003dcc:	4b62      	ldr	r3, [pc, #392]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	4a61      	ldr	r2, [pc, #388]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dd2:	f043 0304 	orr.w	r3, r3, #4
 8003dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd8:	4b5f      	ldr	r3, [pc, #380]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4a5e      	ldr	r2, [pc, #376]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	; 0x70
 8003de4:	e00b      	b.n	8003dfe <HAL_RCC_OscConfig+0x376>
 8003de6:	4b5c      	ldr	r3, [pc, #368]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	4a5b      	ldr	r2, [pc, #364]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	6713      	str	r3, [r2, #112]	; 0x70
 8003df2:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a58      	ldr	r2, [pc, #352]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003df8:	f023 0304 	bic.w	r3, r3, #4
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d015      	beq.n	8003e32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e06:	f7fe f923 	bl	8002050 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0c:	e00a      	b.n	8003e24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0e:	f7fe f91f 	bl	8002050 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e0d8      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e24:	4b4c      	ldr	r3, [pc, #304]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ee      	beq.n	8003e0e <HAL_RCC_OscConfig+0x386>
 8003e30:	e014      	b.n	8003e5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e32:	f7fe f90d 	bl	8002050 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fe f909 	bl	8002050 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e0c2      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e50:	4b41      	ldr	r3, [pc, #260]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ee      	bne.n	8003e3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d105      	bne.n	8003e6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e62:	4b3d      	ldr	r3, [pc, #244]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a3c      	ldr	r2, [pc, #240]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80ae 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e78:	4b37      	ldr	r3, [pc, #220]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d06d      	beq.n	8003f60 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d14b      	bne.n	8003f24 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8c:	4b32      	ldr	r3, [pc, #200]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a31      	ldr	r2, [pc, #196]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fe f8da 	bl	8002050 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fe f8d6 	bl	8002050 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e091      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb2:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	019b      	lsls	r3, r3, #6
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	085b      	lsrs	r3, r3, #1
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	071b      	lsls	r3, r3, #28
 8003eea:	491b      	ldr	r1, [pc, #108]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef0:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe f8a8 	bl	8002050 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fe f8a4 	bl	8002050 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e05f      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x47c>
 8003f22:	e057      	b.n	8003fd4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f24:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0b      	ldr	r2, [pc, #44]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fe f88e 	bl	8002050 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fe f88a 	bl	8002050 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e045      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4b0>
 8003f56:	e03d      	b.n	8003fd4 <HAL_RCC_OscConfig+0x54c>
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f60:	4b1f      	ldr	r3, [pc, #124]	; (8003fe0 <HAL_RCC_OscConfig+0x558>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d030      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d129      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d122      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d119      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d10f      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800

08003fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0d0      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b6a      	ldr	r3, [pc, #424]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d910      	bls.n	800402c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b67      	ldr	r3, [pc, #412]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 020f 	bic.w	r2, r3, #15
 8004012:	4965      	ldr	r1, [pc, #404]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b63      	ldr	r3, [pc, #396]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0b8      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004044:	4b59      	ldr	r3, [pc, #356]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4a58      	ldr	r2, [pc, #352]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 800404a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800404e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800405c:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4a52      	ldr	r2, [pc, #328]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004066:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004068:	4b50      	ldr	r3, [pc, #320]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	494d      	ldr	r1, [pc, #308]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004076:	4313      	orrs	r3, r2
 8004078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d040      	beq.n	8004108 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d115      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e07f      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d107      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a6:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e073      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b6:	4b3d      	ldr	r3, [pc, #244]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e06b      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c6:	4b39      	ldr	r3, [pc, #228]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f023 0203 	bic.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4936      	ldr	r1, [pc, #216]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d8:	f7fd ffba 	bl	8002050 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	e00a      	b.n	80040f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e0:	f7fd ffb6 	bl	8002050 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e053      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	4b2d      	ldr	r3, [pc, #180]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 020c 	and.w	r2, r3, #12
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	429a      	cmp	r2, r3
 8004106:	d1eb      	bne.n	80040e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d210      	bcs.n	8004138 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 020f 	bic.w	r2, r3, #15
 800411e:	4922      	ldr	r1, [pc, #136]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e032      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004144:	4b19      	ldr	r3, [pc, #100]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4916      	ldr	r1, [pc, #88]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d009      	beq.n	8004176 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	490e      	ldr	r1, [pc, #56]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004176:	f000 f821 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 800417a:	4602      	mov	r2, r0
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	490a      	ldr	r1, [pc, #40]	; (80041b0 <HAL_RCC_ClockConfig+0x1cc>)
 8004188:	5ccb      	ldrb	r3, [r1, r3]
 800418a:	fa22 f303 	lsr.w	r3, r2, r3
 800418e:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x1d4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd ff16 	bl	8001fc8 <HAL_InitTick>

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40023c00 	.word	0x40023c00
 80041ac:	40023800 	.word	0x40023800
 80041b0:	08008ae8 	.word	0x08008ae8
 80041b4:	20000000 	.word	0x20000000
 80041b8:	20000004 	.word	0x20000004

080041bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041bc:	b5b0      	push	{r4, r5, r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041c2:	2100      	movs	r1, #0
 80041c4:	6079      	str	r1, [r7, #4]
 80041c6:	2100      	movs	r1, #0
 80041c8:	60f9      	str	r1, [r7, #12]
 80041ca:	2100      	movs	r1, #0
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80041ce:	2100      	movs	r1, #0
 80041d0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d2:	4952      	ldr	r1, [pc, #328]	; (800431c <HAL_RCC_GetSysClockFreq+0x160>)
 80041d4:	6889      	ldr	r1, [r1, #8]
 80041d6:	f001 010c 	and.w	r1, r1, #12
 80041da:	2908      	cmp	r1, #8
 80041dc:	d00d      	beq.n	80041fa <HAL_RCC_GetSysClockFreq+0x3e>
 80041de:	2908      	cmp	r1, #8
 80041e0:	f200 8094 	bhi.w	800430c <HAL_RCC_GetSysClockFreq+0x150>
 80041e4:	2900      	cmp	r1, #0
 80041e6:	d002      	beq.n	80041ee <HAL_RCC_GetSysClockFreq+0x32>
 80041e8:	2904      	cmp	r1, #4
 80041ea:	d003      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x38>
 80041ec:	e08e      	b.n	800430c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ee:	4b4c      	ldr	r3, [pc, #304]	; (8004320 <HAL_RCC_GetSysClockFreq+0x164>)
 80041f0:	60bb      	str	r3, [r7, #8]
      break;
 80041f2:	e08e      	b.n	8004312 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041f4:	4b4b      	ldr	r3, [pc, #300]	; (8004324 <HAL_RCC_GetSysClockFreq+0x168>)
 80041f6:	60bb      	str	r3, [r7, #8]
      break;
 80041f8:	e08b      	b.n	8004312 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041fa:	4948      	ldr	r1, [pc, #288]	; (800431c <HAL_RCC_GetSysClockFreq+0x160>)
 80041fc:	6849      	ldr	r1, [r1, #4]
 80041fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004202:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004204:	4945      	ldr	r1, [pc, #276]	; (800431c <HAL_RCC_GetSysClockFreq+0x160>)
 8004206:	6849      	ldr	r1, [r1, #4]
 8004208:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800420c:	2900      	cmp	r1, #0
 800420e:	d024      	beq.n	800425a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004210:	4942      	ldr	r1, [pc, #264]	; (800431c <HAL_RCC_GetSysClockFreq+0x160>)
 8004212:	6849      	ldr	r1, [r1, #4]
 8004214:	0989      	lsrs	r1, r1, #6
 8004216:	4608      	mov	r0, r1
 8004218:	f04f 0100 	mov.w	r1, #0
 800421c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004220:	f04f 0500 	mov.w	r5, #0
 8004224:	ea00 0204 	and.w	r2, r0, r4
 8004228:	ea01 0305 	and.w	r3, r1, r5
 800422c:	493d      	ldr	r1, [pc, #244]	; (8004324 <HAL_RCC_GetSysClockFreq+0x168>)
 800422e:	fb01 f003 	mul.w	r0, r1, r3
 8004232:	2100      	movs	r1, #0
 8004234:	fb01 f102 	mul.w	r1, r1, r2
 8004238:	1844      	adds	r4, r0, r1
 800423a:	493a      	ldr	r1, [pc, #232]	; (8004324 <HAL_RCC_GetSysClockFreq+0x168>)
 800423c:	fba2 0101 	umull	r0, r1, r2, r1
 8004240:	1863      	adds	r3, r4, r1
 8004242:	4619      	mov	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	461a      	mov	r2, r3
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	f7fb fffc 	bl	8000248 <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4613      	mov	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e04a      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425a:	4b30      	ldr	r3, [pc, #192]	; (800431c <HAL_RCC_GetSysClockFreq+0x160>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	099b      	lsrs	r3, r3, #6
 8004260:	461a      	mov	r2, r3
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	f240 10ff 	movw	r0, #511	; 0x1ff
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	ea02 0400 	and.w	r4, r2, r0
 8004272:	ea03 0501 	and.w	r5, r3, r1
 8004276:	4620      	mov	r0, r4
 8004278:	4629      	mov	r1, r5
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	014b      	lsls	r3, r1, #5
 8004284:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004288:	0142      	lsls	r2, r0, #5
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	1b00      	subs	r0, r0, r4
 8004290:	eb61 0105 	sbc.w	r1, r1, r5
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	018b      	lsls	r3, r1, #6
 800429e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042a2:	0182      	lsls	r2, r0, #6
 80042a4:	1a12      	subs	r2, r2, r0
 80042a6:	eb63 0301 	sbc.w	r3, r3, r1
 80042aa:	f04f 0000 	mov.w	r0, #0
 80042ae:	f04f 0100 	mov.w	r1, #0
 80042b2:	00d9      	lsls	r1, r3, #3
 80042b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042b8:	00d0      	lsls	r0, r2, #3
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	1912      	adds	r2, r2, r4
 80042c0:	eb45 0303 	adc.w	r3, r5, r3
 80042c4:	f04f 0000 	mov.w	r0, #0
 80042c8:	f04f 0100 	mov.w	r1, #0
 80042cc:	0299      	lsls	r1, r3, #10
 80042ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042d2:	0290      	lsls	r0, r2, #10
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4610      	mov	r0, r2
 80042da:	4619      	mov	r1, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	461a      	mov	r2, r3
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	f7fb ffb0 	bl	8000248 <__aeabi_uldivmod>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4613      	mov	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_RCC_GetSysClockFreq+0x160>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	0c1b      	lsrs	r3, r3, #16
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	3301      	adds	r3, #1
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	fbb2 f3f3 	udiv	r3, r2, r3
 8004308:	60bb      	str	r3, [r7, #8]
      break;
 800430a:	e002      	b.n	8004312 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800430c:	4b04      	ldr	r3, [pc, #16]	; (8004320 <HAL_RCC_GetSysClockFreq+0x164>)
 800430e:	60bb      	str	r3, [r7, #8]
      break;
 8004310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004312:	68bb      	ldr	r3, [r7, #8]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bdb0      	pop	{r4, r5, r7, pc}
 800431c:	40023800 	.word	0x40023800
 8004320:	00f42400 	.word	0x00f42400
 8004324:	017d7840 	.word	0x017d7840

08004328 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <HAL_RCC_GetHCLKFreq+0x14>)
 800432e:	681b      	ldr	r3, [r3, #0]
}
 8004330:	4618      	mov	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000000 	.word	0x20000000

08004340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004344:	f7ff fff0 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	0a9b      	lsrs	r3, r3, #10
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4903      	ldr	r1, [pc, #12]	; (8004364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40023800 	.word	0x40023800
 8004364:	08008af8 	.word	0x08008af8

08004368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800436c:	f7ff ffdc 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	0b5b      	lsrs	r3, r3, #13
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4903      	ldr	r1, [pc, #12]	; (800438c <HAL_RCC_GetPCLK2Freq+0x24>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40023800 	.word	0x40023800
 800438c:	08008af8 	.word	0x08008af8

08004390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d012      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043b8:	4b69      	ldr	r3, [pc, #420]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4a68      	ldr	r2, [pc, #416]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043c2:	6093      	str	r3, [r2, #8]
 80043c4:	4b66      	ldr	r3, [pc, #408]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	4964      	ldr	r1, [pc, #400]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043da:	2301      	movs	r3, #1
 80043dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d017      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043ea:	4b5d      	ldr	r3, [pc, #372]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f8:	4959      	ldr	r1, [pc, #356]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004408:	d101      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800440a:	2301      	movs	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004416:	2301      	movs	r3, #1
 8004418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d017      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004426:	4b4e      	ldr	r3, [pc, #312]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800442c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	494a      	ldr	r1, [pc, #296]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004444:	d101      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004446:	2301      	movs	r3, #1
 8004448:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004452:	2301      	movs	r3, #1
 8004454:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004462:	2301      	movs	r3, #1
 8004464:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 808b 	beq.w	800458a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004474:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	4a39      	ldr	r2, [pc, #228]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447e:	6413      	str	r3, [r2, #64]	; 0x40
 8004480:	4b37      	ldr	r3, [pc, #220]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800448c:	4b35      	ldr	r3, [pc, #212]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a34      	ldr	r2, [pc, #208]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004498:	f7fd fdda 	bl	8002050 <HAL_GetTick>
 800449c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a0:	f7fd fdd6 	bl	8002050 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	; 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e38f      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044b2:	4b2c      	ldr	r3, [pc, #176]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044be:	4b28      	ldr	r3, [pc, #160]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d035      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d02e      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044dc:	4b20      	ldr	r3, [pc, #128]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044e6:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044fe:	4a18      	ldr	r2, [pc, #96]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004504:	4b16      	ldr	r3, [pc, #88]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d114      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fd fd9e 	bl	8002050 <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	e00a      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004518:	f7fd fd9a 	bl	8002050 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e351      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0ee      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004546:	d111      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004556:	400b      	ands	r3, r1
 8004558:	4901      	ldr	r1, [pc, #4]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
 800455e:	e00b      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004560:	40023800 	.word	0x40023800
 8004564:	40007000 	.word	0x40007000
 8004568:	0ffffcff 	.word	0x0ffffcff
 800456c:	4bb3      	ldr	r3, [pc, #716]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	4ab2      	ldr	r2, [pc, #712]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004572:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004576:	6093      	str	r3, [r2, #8]
 8004578:	4bb0      	ldr	r3, [pc, #704]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800457a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004584:	49ad      	ldr	r1, [pc, #692]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004586:	4313      	orrs	r3, r2
 8004588:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	d010      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004596:	4ba9      	ldr	r3, [pc, #676]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800459c:	4aa7      	ldr	r2, [pc, #668]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800459e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045a6:	4ba5      	ldr	r3, [pc, #660]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	49a2      	ldr	r1, [pc, #648]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045c4:	4b9d      	ldr	r3, [pc, #628]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d2:	499a      	ldr	r1, [pc, #616]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045e6:	4b95      	ldr	r3, [pc, #596]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045f4:	4991      	ldr	r1, [pc, #580]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004608:	4b8c      	ldr	r3, [pc, #560]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004616:	4989      	ldr	r1, [pc, #548]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800462a:	4b84      	ldr	r3, [pc, #528]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004630:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4980      	ldr	r1, [pc, #512]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800464c:	4b7b      	ldr	r3, [pc, #492]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	4978      	ldr	r1, [pc, #480]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800466e:	4b73      	ldr	r3, [pc, #460]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	f023 020c 	bic.w	r2, r3, #12
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467c:	496f      	ldr	r1, [pc, #444]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004690:	4b6a      	ldr	r3, [pc, #424]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469e:	4967      	ldr	r1, [pc, #412]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046b2:	4b62      	ldr	r3, [pc, #392]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	495e      	ldr	r1, [pc, #376]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046d4:	4b59      	ldr	r3, [pc, #356]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	4956      	ldr	r1, [pc, #344]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046f6:	4b51      	ldr	r3, [pc, #324]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004704:	494d      	ldr	r1, [pc, #308]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004718:	4b48      	ldr	r3, [pc, #288]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004726:	4945      	ldr	r1, [pc, #276]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800473a:	4b40      	ldr	r3, [pc, #256]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004740:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004748:	493c      	ldr	r1, [pc, #240]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800475c:	4b37      	ldr	r3, [pc, #220]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004762:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800476a:	4934      	ldr	r1, [pc, #208]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d011      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800477e:	4b2f      	ldr	r3, [pc, #188]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004784:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800478c:	492b      	ldr	r1, [pc, #172]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800479c:	d101      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800479e:	2301      	movs	r3, #1
 80047a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047ae:	2301      	movs	r3, #1
 80047b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047be:	4b1f      	ldr	r3, [pc, #124]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047cc:	491b      	ldr	r1, [pc, #108]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047e0:	4b16      	ldr	r3, [pc, #88]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f0:	4912      	ldr	r1, [pc, #72]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00b      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004804:	4b0d      	ldr	r3, [pc, #52]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004814:	4909      	ldr	r1, [pc, #36]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00f      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800482e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	e002      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800
 8004840:	4986      	ldr	r1, [pc, #536]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004854:	4b81      	ldr	r3, [pc, #516]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800485a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004864:	497d      	ldr	r1, [pc, #500]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d006      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 80d6 	beq.w	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004880:	4b76      	ldr	r3, [pc, #472]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a75      	ldr	r2, [pc, #468]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004886:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800488a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488c:	f7fd fbe0 	bl	8002050 <HAL_GetTick>
 8004890:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004894:	f7fd fbdc 	bl	8002050 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	; 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e195      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048a6:	4b6d      	ldr	r3, [pc, #436]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d021      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d11d      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048c6:	4b65      	ldr	r3, [pc, #404]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048d4:	4b61      	ldr	r3, [pc, #388]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048da:	0e1b      	lsrs	r3, r3, #24
 80048dc:	f003 030f 	and.w	r3, r3, #15
 80048e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	019a      	lsls	r2, r3, #6
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	041b      	lsls	r3, r3, #16
 80048ec:	431a      	orrs	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	061b      	lsls	r3, r3, #24
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	071b      	lsls	r3, r3, #28
 80048fa:	4958      	ldr	r1, [pc, #352]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d004      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004920:	2b00      	cmp	r3, #0
 8004922:	d02e      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800492c:	d129      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800492e:	4b4b      	ldr	r3, [pc, #300]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800493c:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004942:	0f1b      	lsrs	r3, r3, #28
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	019a      	lsls	r2, r3, #6
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	041b      	lsls	r3, r3, #16
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	061b      	lsls	r3, r3, #24
 800495c:	431a      	orrs	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	071b      	lsls	r3, r3, #28
 8004962:	493e      	ldr	r1, [pc, #248]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800496a:	4b3c      	ldr	r3, [pc, #240]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004970:	f023 021f 	bic.w	r2, r3, #31
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	3b01      	subs	r3, #1
 800497a:	4938      	ldr	r1, [pc, #224]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01d      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800498e:	4b33      	ldr	r3, [pc, #204]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004994:	0e1b      	lsrs	r3, r3, #24
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800499c:	4b2f      	ldr	r3, [pc, #188]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a2:	0f1b      	lsrs	r3, r3, #28
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	019a      	lsls	r2, r3, #6
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	041b      	lsls	r3, r3, #16
 80049b6:	431a      	orrs	r2, r3
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	061b      	lsls	r3, r3, #24
 80049bc:	431a      	orrs	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	071b      	lsls	r3, r3, #28
 80049c2:	4926      	ldr	r1, [pc, #152]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d011      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	019a      	lsls	r2, r3, #6
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	061b      	lsls	r3, r3, #24
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	071b      	lsls	r3, r3, #28
 80049f2:	491a      	ldr	r1, [pc, #104]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049fa:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a06:	f7fd fb23 	bl	8002050 <HAL_GetTick>
 8004a0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a0e:	f7fd fb1f 	bl	8002050 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b64      	cmp	r3, #100	; 0x64
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e0d8      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a20:	4b0e      	ldr	r3, [pc, #56]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	f040 80ce 	bne.w	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a08      	ldr	r2, [pc, #32]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a40:	f7fd fb06 	bl	8002050 <HAL_GetTick>
 8004a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a46:	e00b      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a48:	f7fd fb02 	bl	8002050 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b64      	cmp	r3, #100	; 0x64
 8004a54:	d904      	bls.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e0bb      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a60:	4b5e      	ldr	r3, [pc, #376]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a6c:	d0ec      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d02e      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d12a      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a96:	4b51      	ldr	r3, [pc, #324]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9c:	0c1b      	lsrs	r3, r3, #16
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004aa4:	4b4d      	ldr	r3, [pc, #308]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	0f1b      	lsrs	r3, r3, #28
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	019a      	lsls	r2, r3, #6
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	061b      	lsls	r3, r3, #24
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	071b      	lsls	r3, r3, #28
 8004aca:	4944      	ldr	r1, [pc, #272]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ad2:	4b42      	ldr	r3, [pc, #264]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	493d      	ldr	r1, [pc, #244]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d022      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b00:	d11d      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b02:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b08:	0e1b      	lsrs	r3, r3, #24
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b10:	4b32      	ldr	r3, [pc, #200]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	0f1b      	lsrs	r3, r3, #28
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	019a      	lsls	r2, r3, #6
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	041b      	lsls	r3, r3, #16
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	061b      	lsls	r3, r3, #24
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	071b      	lsls	r3, r3, #28
 8004b36:	4929      	ldr	r1, [pc, #164]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d028      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b4a:	4b24      	ldr	r3, [pc, #144]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b50:	0e1b      	lsrs	r3, r3, #24
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b58:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	0c1b      	lsrs	r3, r3, #16
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	019a      	lsls	r2, r3, #6
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	041b      	lsls	r3, r3, #16
 8004b70:	431a      	orrs	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	061b      	lsls	r3, r3, #24
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	071b      	lsls	r3, r3, #28
 8004b7e:	4917      	ldr	r1, [pc, #92]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	4911      	ldr	r1, [pc, #68]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba8:	f7fd fa52 	bl	8002050 <HAL_GetTick>
 8004bac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bb0:	f7fd fa4e 	bl	8002050 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e007      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bc2:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bce:	d1ef      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40023800 	.word	0x40023800

08004be0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e025      	b.n	8004c40 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d106      	bne.n	8004c0e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f81d 	bl	8004c48 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4610      	mov	r0, r2
 8004c22:	f000 fccb 	bl	80055bc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	f000 fd35 	bl	80056a0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d101      	bne.n	8004c78 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
 8004c76:	e018      	b.n	8004caa <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fd89 	bl	80057a0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d104      	bne.n	8004ca0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2205      	movs	r2, #5
 8004c9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004c9e:	e003      	b.n	8004ca8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d101      	bne.n	8004ccc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e00e      	b.n	8004cea <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6839      	ldr	r1, [r7, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fd84 	bl	80057e8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e040      	b.n	8004d86 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f873 	bl	8004e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2224      	movs	r2, #36	; 0x24
 8004d1e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f879 	bl	8004e28 <UART_SetConfig>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e022      	b.n	8004d86 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 facf 	bl	80052ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fb56 	bl	8005430 <UART_CheckIdleState>
 8004d84:	4603      	mov	r3, r0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e02b      	b.n	8004df8 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2224      	movs	r2, #36	; 0x24
 8004da4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0201 	bic.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f820 	bl	8004e14 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4ba7      	ldr	r3, [pc, #668]	; (80050f0 <UART_SetConfig+0x2c8>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a95      	ldr	r2, [pc, #596]	; (80050f4 <UART_SetConfig+0x2cc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d120      	bne.n	8004ee6 <UART_SetConfig+0xbe>
 8004ea4:	4b94      	ldr	r3, [pc, #592]	; (80050f8 <UART_SetConfig+0x2d0>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d816      	bhi.n	8004ee0 <UART_SetConfig+0xb8>
 8004eb2:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0x90>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004ec9 	.word	0x08004ec9
 8004ebc:	08004ed5 	.word	0x08004ed5
 8004ec0:	08004ecf 	.word	0x08004ecf
 8004ec4:	08004edb 	.word	0x08004edb
 8004ec8:	2301      	movs	r3, #1
 8004eca:	77fb      	strb	r3, [r7, #31]
 8004ecc:	e14f      	b.n	800516e <UART_SetConfig+0x346>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	77fb      	strb	r3, [r7, #31]
 8004ed2:	e14c      	b.n	800516e <UART_SetConfig+0x346>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	77fb      	strb	r3, [r7, #31]
 8004ed8:	e149      	b.n	800516e <UART_SetConfig+0x346>
 8004eda:	2308      	movs	r3, #8
 8004edc:	77fb      	strb	r3, [r7, #31]
 8004ede:	e146      	b.n	800516e <UART_SetConfig+0x346>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e143      	b.n	800516e <UART_SetConfig+0x346>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a84      	ldr	r2, [pc, #528]	; (80050fc <UART_SetConfig+0x2d4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d132      	bne.n	8004f56 <UART_SetConfig+0x12e>
 8004ef0:	4b81      	ldr	r3, [pc, #516]	; (80050f8 <UART_SetConfig+0x2d0>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b0c      	cmp	r3, #12
 8004efc:	d828      	bhi.n	8004f50 <UART_SetConfig+0x128>
 8004efe:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <UART_SetConfig+0xdc>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f39 	.word	0x08004f39
 8004f08:	08004f51 	.word	0x08004f51
 8004f0c:	08004f51 	.word	0x08004f51
 8004f10:	08004f51 	.word	0x08004f51
 8004f14:	08004f45 	.word	0x08004f45
 8004f18:	08004f51 	.word	0x08004f51
 8004f1c:	08004f51 	.word	0x08004f51
 8004f20:	08004f51 	.word	0x08004f51
 8004f24:	08004f3f 	.word	0x08004f3f
 8004f28:	08004f51 	.word	0x08004f51
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f51 	.word	0x08004f51
 8004f34:	08004f4b 	.word	0x08004f4b
 8004f38:	2300      	movs	r3, #0
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e117      	b.n	800516e <UART_SetConfig+0x346>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e114      	b.n	800516e <UART_SetConfig+0x346>
 8004f44:	2304      	movs	r3, #4
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e111      	b.n	800516e <UART_SetConfig+0x346>
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	77fb      	strb	r3, [r7, #31]
 8004f4e:	e10e      	b.n	800516e <UART_SetConfig+0x346>
 8004f50:	2310      	movs	r3, #16
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	e10b      	b.n	800516e <UART_SetConfig+0x346>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a69      	ldr	r2, [pc, #420]	; (8005100 <UART_SetConfig+0x2d8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d120      	bne.n	8004fa2 <UART_SetConfig+0x17a>
 8004f60:	4b65      	ldr	r3, [pc, #404]	; (80050f8 <UART_SetConfig+0x2d0>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f6a:	2b30      	cmp	r3, #48	; 0x30
 8004f6c:	d013      	beq.n	8004f96 <UART_SetConfig+0x16e>
 8004f6e:	2b30      	cmp	r3, #48	; 0x30
 8004f70:	d814      	bhi.n	8004f9c <UART_SetConfig+0x174>
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d009      	beq.n	8004f8a <UART_SetConfig+0x162>
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d810      	bhi.n	8004f9c <UART_SetConfig+0x174>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <UART_SetConfig+0x15c>
 8004f7e:	2b10      	cmp	r3, #16
 8004f80:	d006      	beq.n	8004f90 <UART_SetConfig+0x168>
 8004f82:	e00b      	b.n	8004f9c <UART_SetConfig+0x174>
 8004f84:	2300      	movs	r3, #0
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e0f1      	b.n	800516e <UART_SetConfig+0x346>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e0ee      	b.n	800516e <UART_SetConfig+0x346>
 8004f90:	2304      	movs	r3, #4
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e0eb      	b.n	800516e <UART_SetConfig+0x346>
 8004f96:	2308      	movs	r3, #8
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	e0e8      	b.n	800516e <UART_SetConfig+0x346>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e0e5      	b.n	800516e <UART_SetConfig+0x346>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a57      	ldr	r2, [pc, #348]	; (8005104 <UART_SetConfig+0x2dc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d120      	bne.n	8004fee <UART_SetConfig+0x1c6>
 8004fac:	4b52      	ldr	r3, [pc, #328]	; (80050f8 <UART_SetConfig+0x2d0>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8004fb8:	d013      	beq.n	8004fe2 <UART_SetConfig+0x1ba>
 8004fba:	2bc0      	cmp	r3, #192	; 0xc0
 8004fbc:	d814      	bhi.n	8004fe8 <UART_SetConfig+0x1c0>
 8004fbe:	2b80      	cmp	r3, #128	; 0x80
 8004fc0:	d009      	beq.n	8004fd6 <UART_SetConfig+0x1ae>
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	d810      	bhi.n	8004fe8 <UART_SetConfig+0x1c0>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <UART_SetConfig+0x1a8>
 8004fca:	2b40      	cmp	r3, #64	; 0x40
 8004fcc:	d006      	beq.n	8004fdc <UART_SetConfig+0x1b4>
 8004fce:	e00b      	b.n	8004fe8 <UART_SetConfig+0x1c0>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	77fb      	strb	r3, [r7, #31]
 8004fd4:	e0cb      	b.n	800516e <UART_SetConfig+0x346>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	77fb      	strb	r3, [r7, #31]
 8004fda:	e0c8      	b.n	800516e <UART_SetConfig+0x346>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e0c5      	b.n	800516e <UART_SetConfig+0x346>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e0c2      	b.n	800516e <UART_SetConfig+0x346>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e0bf      	b.n	800516e <UART_SetConfig+0x346>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a45      	ldr	r2, [pc, #276]	; (8005108 <UART_SetConfig+0x2e0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d125      	bne.n	8005044 <UART_SetConfig+0x21c>
 8004ff8:	4b3f      	ldr	r3, [pc, #252]	; (80050f8 <UART_SetConfig+0x2d0>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005006:	d017      	beq.n	8005038 <UART_SetConfig+0x210>
 8005008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800500c:	d817      	bhi.n	800503e <UART_SetConfig+0x216>
 800500e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005012:	d00b      	beq.n	800502c <UART_SetConfig+0x204>
 8005014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005018:	d811      	bhi.n	800503e <UART_SetConfig+0x216>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <UART_SetConfig+0x1fe>
 800501e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005022:	d006      	beq.n	8005032 <UART_SetConfig+0x20a>
 8005024:	e00b      	b.n	800503e <UART_SetConfig+0x216>
 8005026:	2300      	movs	r3, #0
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e0a0      	b.n	800516e <UART_SetConfig+0x346>
 800502c:	2302      	movs	r3, #2
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e09d      	b.n	800516e <UART_SetConfig+0x346>
 8005032:	2304      	movs	r3, #4
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e09a      	b.n	800516e <UART_SetConfig+0x346>
 8005038:	2308      	movs	r3, #8
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e097      	b.n	800516e <UART_SetConfig+0x346>
 800503e:	2310      	movs	r3, #16
 8005040:	77fb      	strb	r3, [r7, #31]
 8005042:	e094      	b.n	800516e <UART_SetConfig+0x346>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a30      	ldr	r2, [pc, #192]	; (800510c <UART_SetConfig+0x2e4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d125      	bne.n	800509a <UART_SetConfig+0x272>
 800504e:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <UART_SetConfig+0x2d0>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005054:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800505c:	d017      	beq.n	800508e <UART_SetConfig+0x266>
 800505e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005062:	d817      	bhi.n	8005094 <UART_SetConfig+0x26c>
 8005064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005068:	d00b      	beq.n	8005082 <UART_SetConfig+0x25a>
 800506a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800506e:	d811      	bhi.n	8005094 <UART_SetConfig+0x26c>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <UART_SetConfig+0x254>
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005078:	d006      	beq.n	8005088 <UART_SetConfig+0x260>
 800507a:	e00b      	b.n	8005094 <UART_SetConfig+0x26c>
 800507c:	2301      	movs	r3, #1
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e075      	b.n	800516e <UART_SetConfig+0x346>
 8005082:	2302      	movs	r3, #2
 8005084:	77fb      	strb	r3, [r7, #31]
 8005086:	e072      	b.n	800516e <UART_SetConfig+0x346>
 8005088:	2304      	movs	r3, #4
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	e06f      	b.n	800516e <UART_SetConfig+0x346>
 800508e:	2308      	movs	r3, #8
 8005090:	77fb      	strb	r3, [r7, #31]
 8005092:	e06c      	b.n	800516e <UART_SetConfig+0x346>
 8005094:	2310      	movs	r3, #16
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e069      	b.n	800516e <UART_SetConfig+0x346>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <UART_SetConfig+0x2e8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d137      	bne.n	8005114 <UART_SetConfig+0x2ec>
 80050a4:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <UART_SetConfig+0x2d0>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050b2:	d017      	beq.n	80050e4 <UART_SetConfig+0x2bc>
 80050b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050b8:	d817      	bhi.n	80050ea <UART_SetConfig+0x2c2>
 80050ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050be:	d00b      	beq.n	80050d8 <UART_SetConfig+0x2b0>
 80050c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c4:	d811      	bhi.n	80050ea <UART_SetConfig+0x2c2>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <UART_SetConfig+0x2aa>
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ce:	d006      	beq.n	80050de <UART_SetConfig+0x2b6>
 80050d0:	e00b      	b.n	80050ea <UART_SetConfig+0x2c2>
 80050d2:	2300      	movs	r3, #0
 80050d4:	77fb      	strb	r3, [r7, #31]
 80050d6:	e04a      	b.n	800516e <UART_SetConfig+0x346>
 80050d8:	2302      	movs	r3, #2
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e047      	b.n	800516e <UART_SetConfig+0x346>
 80050de:	2304      	movs	r3, #4
 80050e0:	77fb      	strb	r3, [r7, #31]
 80050e2:	e044      	b.n	800516e <UART_SetConfig+0x346>
 80050e4:	2308      	movs	r3, #8
 80050e6:	77fb      	strb	r3, [r7, #31]
 80050e8:	e041      	b.n	800516e <UART_SetConfig+0x346>
 80050ea:	2310      	movs	r3, #16
 80050ec:	77fb      	strb	r3, [r7, #31]
 80050ee:	e03e      	b.n	800516e <UART_SetConfig+0x346>
 80050f0:	efff69f3 	.word	0xefff69f3
 80050f4:	40011000 	.word	0x40011000
 80050f8:	40023800 	.word	0x40023800
 80050fc:	40004400 	.word	0x40004400
 8005100:	40004800 	.word	0x40004800
 8005104:	40004c00 	.word	0x40004c00
 8005108:	40005000 	.word	0x40005000
 800510c:	40011400 	.word	0x40011400
 8005110:	40007800 	.word	0x40007800
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a71      	ldr	r2, [pc, #452]	; (80052e0 <UART_SetConfig+0x4b8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d125      	bne.n	800516a <UART_SetConfig+0x342>
 800511e:	4b71      	ldr	r3, [pc, #452]	; (80052e4 <UART_SetConfig+0x4bc>)
 8005120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005128:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800512c:	d017      	beq.n	800515e <UART_SetConfig+0x336>
 800512e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005132:	d817      	bhi.n	8005164 <UART_SetConfig+0x33c>
 8005134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005138:	d00b      	beq.n	8005152 <UART_SetConfig+0x32a>
 800513a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800513e:	d811      	bhi.n	8005164 <UART_SetConfig+0x33c>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <UART_SetConfig+0x324>
 8005144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005148:	d006      	beq.n	8005158 <UART_SetConfig+0x330>
 800514a:	e00b      	b.n	8005164 <UART_SetConfig+0x33c>
 800514c:	2300      	movs	r3, #0
 800514e:	77fb      	strb	r3, [r7, #31]
 8005150:	e00d      	b.n	800516e <UART_SetConfig+0x346>
 8005152:	2302      	movs	r3, #2
 8005154:	77fb      	strb	r3, [r7, #31]
 8005156:	e00a      	b.n	800516e <UART_SetConfig+0x346>
 8005158:	2304      	movs	r3, #4
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e007      	b.n	800516e <UART_SetConfig+0x346>
 800515e:	2308      	movs	r3, #8
 8005160:	77fb      	strb	r3, [r7, #31]
 8005162:	e004      	b.n	800516e <UART_SetConfig+0x346>
 8005164:	2310      	movs	r3, #16
 8005166:	77fb      	strb	r3, [r7, #31]
 8005168:	e001      	b.n	800516e <UART_SetConfig+0x346>
 800516a:	2310      	movs	r3, #16
 800516c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005176:	d15b      	bne.n	8005230 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005178:	7ffb      	ldrb	r3, [r7, #31]
 800517a:	2b08      	cmp	r3, #8
 800517c:	d827      	bhi.n	80051ce <UART_SetConfig+0x3a6>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0x35c>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051b1 	.word	0x080051b1
 800518c:	080051b9 	.word	0x080051b9
 8005190:	080051cf 	.word	0x080051cf
 8005194:	080051bf 	.word	0x080051bf
 8005198:	080051cf 	.word	0x080051cf
 800519c:	080051cf 	.word	0x080051cf
 80051a0:	080051cf 	.word	0x080051cf
 80051a4:	080051c7 	.word	0x080051c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a8:	f7ff f8ca 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 80051ac:	61b8      	str	r0, [r7, #24]
        break;
 80051ae:	e013      	b.n	80051d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b0:	f7ff f8da 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 80051b4:	61b8      	str	r0, [r7, #24]
        break;
 80051b6:	e00f      	b.n	80051d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b8:	4b4b      	ldr	r3, [pc, #300]	; (80052e8 <UART_SetConfig+0x4c0>)
 80051ba:	61bb      	str	r3, [r7, #24]
        break;
 80051bc:	e00c      	b.n	80051d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051be:	f7fe fffd 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 80051c2:	61b8      	str	r0, [r7, #24]
        break;
 80051c4:	e008      	b.n	80051d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ca:	61bb      	str	r3, [r7, #24]
        break;
 80051cc:	e004      	b.n	80051d8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	77bb      	strb	r3, [r7, #30]
        break;
 80051d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d074      	beq.n	80052c8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	005a      	lsls	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	441a      	add	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b0f      	cmp	r3, #15
 80051fa:	d916      	bls.n	800522a <UART_SetConfig+0x402>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005202:	d212      	bcs.n	800522a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f023 030f 	bic.w	r3, r3, #15
 800520c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	085b      	lsrs	r3, r3, #1
 8005212:	b29b      	uxth	r3, r3
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	b29a      	uxth	r2, r3
 800521a:	89fb      	ldrh	r3, [r7, #14]
 800521c:	4313      	orrs	r3, r2
 800521e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	89fa      	ldrh	r2, [r7, #14]
 8005226:	60da      	str	r2, [r3, #12]
 8005228:	e04e      	b.n	80052c8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	77bb      	strb	r3, [r7, #30]
 800522e:	e04b      	b.n	80052c8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005230:	7ffb      	ldrb	r3, [r7, #31]
 8005232:	2b08      	cmp	r3, #8
 8005234:	d827      	bhi.n	8005286 <UART_SetConfig+0x45e>
 8005236:	a201      	add	r2, pc, #4	; (adr r2, 800523c <UART_SetConfig+0x414>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005261 	.word	0x08005261
 8005240:	08005269 	.word	0x08005269
 8005244:	08005271 	.word	0x08005271
 8005248:	08005287 	.word	0x08005287
 800524c:	08005277 	.word	0x08005277
 8005250:	08005287 	.word	0x08005287
 8005254:	08005287 	.word	0x08005287
 8005258:	08005287 	.word	0x08005287
 800525c:	0800527f 	.word	0x0800527f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005260:	f7ff f86e 	bl	8004340 <HAL_RCC_GetPCLK1Freq>
 8005264:	61b8      	str	r0, [r7, #24]
        break;
 8005266:	e013      	b.n	8005290 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005268:	f7ff f87e 	bl	8004368 <HAL_RCC_GetPCLK2Freq>
 800526c:	61b8      	str	r0, [r7, #24]
        break;
 800526e:	e00f      	b.n	8005290 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005270:	4b1d      	ldr	r3, [pc, #116]	; (80052e8 <UART_SetConfig+0x4c0>)
 8005272:	61bb      	str	r3, [r7, #24]
        break;
 8005274:	e00c      	b.n	8005290 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005276:	f7fe ffa1 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 800527a:	61b8      	str	r0, [r7, #24]
        break;
 800527c:	e008      	b.n	8005290 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005282:	61bb      	str	r3, [r7, #24]
        break;
 8005284:	e004      	b.n	8005290 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	77bb      	strb	r3, [r7, #30]
        break;
 800528e:	bf00      	nop
    }

    if (pclk != 0U)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d018      	beq.n	80052c8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	085a      	lsrs	r2, r3, #1
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	441a      	add	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b0f      	cmp	r3, #15
 80052b0:	d908      	bls.n	80052c4 <UART_SetConfig+0x49c>
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b8:	d204      	bcs.n	80052c4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	60da      	str	r2, [r3, #12]
 80052c2:	e001      	b.n	80052c8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3720      	adds	r7, #32
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40007c00 	.word	0x40007c00
 80052e4:	40023800 	.word	0x40023800
 80052e8:	00f42400 	.word	0x00f42400

080052ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01a      	beq.n	8005402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ea:	d10a      	bne.n	8005402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	605a      	str	r2, [r3, #4]
  }
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af02      	add	r7, sp, #8
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005440:	f7fc fe06 	bl	8002050 <HAL_GetTick>
 8005444:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b08      	cmp	r3, #8
 8005452:	d10e      	bne.n	8005472 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f82d 	bl	80054c2 <UART_WaitOnFlagUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e023      	b.n	80054ba <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b04      	cmp	r3, #4
 800547e:	d10e      	bne.n	800549e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f817 	bl	80054c2 <UART_WaitOnFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e00d      	b.n	80054ba <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	4613      	mov	r3, r2
 80054d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d2:	e05e      	b.n	8005592 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054da:	d05a      	beq.n	8005592 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054dc:	f7fc fdb8 	bl	8002050 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d302      	bcc.n	80054f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d11b      	bne.n	800552a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005500:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0201 	bic.w	r2, r2, #1
 8005510:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e043      	b.n	80055b2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d02c      	beq.n	8005592 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005546:	d124      	bne.n	8005592 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005550:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005560:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0201 	bic.w	r2, r2, #1
 8005570:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e00f      	b.n	80055b2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69da      	ldr	r2, [r3, #28]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4013      	ands	r3, r2
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	429a      	cmp	r2, r3
 80055a0:	bf0c      	ite	eq
 80055a2:	2301      	moveq	r3, #1
 80055a4:	2300      	movne	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d091      	beq.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d027      	beq.n	8005626 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4b2f      	ldr	r3, [pc, #188]	; (800569c <FMC_SDRAM_Init+0xe0>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80055ec:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80055f2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80055f8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80055fe:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005604:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800560a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005610:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005616:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	e032      	b.n	800568c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005632:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800563c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005642:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	4b12      	ldr	r3, [pc, #72]	; (800569c <FMC_SDRAM_Init+0xe0>)
 8005654:	4013      	ands	r3, r2
 8005656:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005660:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8005666:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800566c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8005672:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8005678:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	4313      	orrs	r3, r2
 800567e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	ffff8000 	.word	0xffff8000

080056a0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d02e      	beq.n	8005718 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80056c6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80056d6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	3b01      	subs	r3, #1
 80056de:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80056e0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80056ea:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80056f4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80056fe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	3b01      	subs	r3, #1
 8005706:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005708:	4313      	orrs	r3, r2
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	e039      	b.n	800578c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4b1e      	ldr	r3, [pc, #120]	; (800579c <FMC_SDRAM_Timing_Init+0xfc>)
 8005722:	4013      	ands	r3, r2
 8005724:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	3b01      	subs	r3, #1
 800572c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	3b01      	subs	r3, #1
 8005734:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005736:	4313      	orrs	r3, r2
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800574a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	3b01      	subs	r3, #1
 8005758:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800575a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	3b01      	subs	r3, #1
 8005762:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005764:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	3b01      	subs	r3, #1
 800576c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800576e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	3b01      	subs	r3, #1
 8005776:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005778:	4313      	orrs	r3, r2
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	ff0f0fff 	.word	0xff0f0fff

080057a0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <FMC_SDRAM_SendCommand+0x44>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	6811      	ldr	r1, [r2, #0]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	6852      	ldr	r2, [r2, #4]
 80057bc:	4311      	orrs	r1, r2
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	6892      	ldr	r2, [r2, #8]
 80057c2:	3a01      	subs	r2, #1
 80057c4:	0152      	lsls	r2, r2, #5
 80057c6:	4311      	orrs	r1, r2
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	68d2      	ldr	r2, [r2, #12]
 80057cc:	0252      	lsls	r2, r2, #9
 80057ce:	430a      	orrs	r2, r1
 80057d0:	431a      	orrs	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	ffc00000 	.word	0xffc00000

080057e8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <_ZN7QAD_FMC8imp_initEv>:
//QAD_FMC Initialization Method
//
//To be called from static method init()
//Used to initialize the required GPIOs, FMC driver and SDRAM module
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAD_FMC::imp_init() {
 8005810:	b580      	push	{r7, lr}
 8005812:	b094      	sub	sp, #80	; 0x50
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]

	//Return if FMC driver is already initialized
	if (m_eState)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <_ZN7QAD_FMC8imp_initEv+0x16>
		return QA_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e0fc      	b.n	8005a20 <_ZN7QAD_FMC8imp_initEv+0x210>


	//----------------
	//Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 8005826:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	605a      	str	r2, [r3, #4]
 8005830:	609a      	str	r2, [r3, #8]
 8005832:	60da      	str	r2, [r3, #12]
 8005834:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set pins as alternate function in push-pull mode
 8005836:	2302      	movs	r3, #2
 8005838:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistors on pins
 800583a:	2301      	movs	r3, #1
 800583c:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set pin speed to very high
 800583e:	2303      	movs	r3, #3
 8005840:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_Init.Alternate = GPIO_AF12_FMC;              //Set alternate function to suit use with FMC peripheral
 8005842:	230c      	movs	r3, #12
 8005844:	64fb      	str	r3, [r7, #76]	; 0x4c

	  //Initialize required pins from GPIO port D
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 8005846:	f24c 7303 	movw	r3, #50947	; 0xc703
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_Init);
 800584c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005850:	4619      	mov	r1, r3
 8005852:	4875      	ldr	r0, [pc, #468]	; (8005a28 <_ZN7QAD_FMC8imp_initEv+0x218>)
 8005854:	f7fd fa8c 	bl	8002d70 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port E
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8005858:	f64f 7383 	movw	r3, #65411	; 0xff83
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 800585e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005862:	4619      	mov	r1, r3
 8005864:	4871      	ldr	r0, [pc, #452]	; (8005a2c <_ZN7QAD_FMC8imp_initEv+0x21c>)
 8005866:	f7fd fa83 	bl	8002d70 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port F
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800586a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_Init);
 8005870:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005874:	4619      	mov	r1, r3
 8005876:	486e      	ldr	r0, [pc, #440]	; (8005a30 <_ZN7QAD_FMC8imp_initEv+0x220>)
 8005878:	f7fd fa7a 	bl	8002d70 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port G
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800587c:	f248 1337 	movw	r3, #33079	; 0x8137
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_Init);
 8005882:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005886:	4619      	mov	r1, r3
 8005888:	486a      	ldr	r0, [pc, #424]	; (8005a34 <_ZN7QAD_FMC8imp_initEv+0x224>)
 800588a:	f7fd fa71 	bl	8002d70 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port H
	GPIO_Init.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800588e:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_Init);
 8005894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005898:	4619      	mov	r1, r3
 800589a:	4867      	ldr	r0, [pc, #412]	; (8005a38 <_ZN7QAD_FMC8imp_initEv+0x228>)
 800589c:	f7fd fa68 	bl	8002d70 <HAL_GPIO_Init>

		//Initialize required pins from GPIO port I
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
 80058a0:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80058a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_Init);
 80058a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058aa:	4619      	mov	r1, r3
 80058ac:	4863      	ldr	r0, [pc, #396]	; (8005a3c <_ZN7QAD_FMC8imp_initEv+0x22c>)
 80058ae:	f7fd fa5f 	bl	8002d70 <HAL_GPIO_Init>

	//-------------------------
	//Initialize FMC Peripheral

	//Initialize FMC Clock
	__HAL_RCC_FMC_CLK_ENABLE();
 80058b2:	4b63      	ldr	r3, [pc, #396]	; (8005a40 <_ZN7QAD_FMC8imp_initEv+0x230>)
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	4a62      	ldr	r2, [pc, #392]	; (8005a40 <_ZN7QAD_FMC8imp_initEv+0x230>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	6393      	str	r3, [r2, #56]	; 0x38
 80058be:	4b60      	ldr	r3, [pc, #384]	; (8005a40 <_ZN7QAD_FMC8imp_initEv+0x230>)
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]

	//Fill FMC initialization details into Handle structure
	//NOTE: The settings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	m_sHandle.Instance                = FMC_SDRAM_DEVICE;                     //Set FMC SDRAM Device as required instance
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a5d      	ldr	r2, [pc, #372]	; (8005a44 <_ZN7QAD_FMC8imp_initEv+0x234>)
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.SDBank             = FMC_SDRAM_BANK1;                      //Set SDRAM as being connected to FMCs SDRAM bank 1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;          //Set size of column address to 8 bits
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	639a      	str	r2, [r3, #56]	; 0x38
	m_sHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;            //Set size of row address to 12 bits
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2204      	movs	r2, #4
 80058e0:	63da      	str	r2, [r3, #60]	; 0x3c
	m_sHandle.Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;           //Set data bus width to 32 bits
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	641a      	str	r2, [r3, #64]	; 0x40
	m_sHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;         //Set number of SDRAM module internal banks to 4
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2240      	movs	r2, #64	; 0x40
 80058ec:	645a      	str	r2, [r3, #68]	; 0x44
	m_sHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;              //Set column address strobe (CAS) latency to 3 cycles
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80058f4:	649a      	str	r2, [r3, #72]	; 0x48
	m_sHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;   //Disable write protection, as we want to be able to both read and write to SDRAM
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;             //Set SDRAM clock period to 2 clock cycles
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005902:	651a      	str	r2, [r3, #80]	; 0x50
	m_sHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;              //Enable read burst
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800590a:	655a      	str	r2, [r3, #84]	; 0x54
	m_sHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;              //Set read pipe delay to 0 clock cycles
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	659a      	str	r2, [r3, #88]	; 0x58

	//Fill SDRAM timing details into timing structure
	//NOTE: The timings need to meet the specifications of the specific SDRAM module being used
	//The below settings are specifically set to suit the module provided on the STM32F769I Discovery board
	FMC_SDRAM_TimingTypeDef SDRAM_Timing = {0};
 8005912:	f107 0320 	add.w	r3, r7, #32
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	605a      	str	r2, [r3, #4]
 800591c:	609a      	str	r2, [r3, #8]
 800591e:	60da      	str	r2, [r3, #12]
 8005920:	611a      	str	r2, [r3, #16]
 8005922:	615a      	str	r2, [r3, #20]
 8005924:	619a      	str	r2, [r3, #24]
	SDRAM_Timing.LoadToActiveDelay    = 2;  //Set delay between a Load Mode Register command and an Active or Refresh command to 2 clock cycles
 8005926:	2302      	movs	r3, #2
 8005928:	623b      	str	r3, [r7, #32]
	SDRAM_Timing.ExitSelfRefreshDelay = 7;  //Set delay between releasing Self Refresh command and issuing of Active command to 7 clock cycles
 800592a:	2307      	movs	r3, #7
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
	SDRAM_Timing.SelfRefreshTime      = 4;  //Set minimum Self Refresh period to 4 clock cycles
 800592e:	2304      	movs	r3, #4
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28
	SDRAM_Timing.RowCycleDelay        = 7;  //Set delay between Refresh command and Activate command, or between consecutive Refresh commands to 7 clock cycles
 8005932:	2307      	movs	r3, #7
 8005934:	62fb      	str	r3, [r7, #44]	; 0x2c
	SDRAM_Timing.WriteRecoveryTime    = 2;  //Set Write Recovery Time to 2 clock cycles
 8005936:	2302      	movs	r3, #2
 8005938:	633b      	str	r3, [r7, #48]	; 0x30
	SDRAM_Timing.RPDelay              = 2;  //Set delay between a Precharge command and any other command to 2 clock cycles
 800593a:	2302      	movs	r3, #2
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
	SDRAM_Timing.RCDDelay             = 2;  //Set delay between an Activate command and a Read/Write command to 2 clock cycles
 800593e:	2302      	movs	r3, #2
 8005940:	63bb      	str	r3, [r7, #56]	; 0x38

	//Initialize the FMC peripheral using the required settings and timings to suit the specific SDRAM module
	if (HAL_SDRAM_Init(&m_sHandle, &SDRAM_Timing) != HAL_OK) {
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3330      	adds	r3, #48	; 0x30
 8005946:	f107 0220 	add.w	r2, r7, #32
 800594a:	4611      	mov	r1, r2
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff f947 	bl	8004be0 <HAL_SDRAM_Init>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	bf14      	ite	ne
 8005958:	2301      	movne	r3, #1
 800595a:	2300      	moveq	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <_ZN7QAD_FMC8imp_initEv+0x156>
		return QA_Fail;
 8005962:	2301      	movs	r3, #1
 8005964:	e05c      	b.n	8005a20 <_ZN7QAD_FMC8imp_initEv+0x210>
	}

  //-------------------
	//Initialize SDRAM IC

	FMC_SDRAM_CommandTypeDef  SDRAM_Cmd = {0};
 8005966:	f107 0310 	add.w	r3, r7, #16
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	605a      	str	r2, [r3, #4]
 8005970:	609a      	str	r2, [r3, #8]
 8005972:	60da      	str	r2, [r3, #12]

		//Send command to SDRAM module to enable its clock
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;   //Set to Clock Enable Command
 8005974:	2301      	movs	r3, #1
 8005976:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005978:	2310      	movs	r3, #16
 800597a:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 800597c:	2301      	movs	r3, #1
 800597e:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8005984:	f107 0310 	add.w	r3, r7, #16
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f890 	bl	8005ab0 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Delay for 1ms to allow time for SDRAM clock to enable
	HAL_Delay(1);
 8005990:	2001      	movs	r0, #1
 8005992:	f7fc fb69 	bl	8002068 <HAL_Delay>

		//Send command to SDRAM module to precharge all banks
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_PALL;  //Set to Precharge All command
 8005996:	2302      	movs	r3, #2
 8005998:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800599a:	2310      	movs	r3, #16
 800599c:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 800599e:	2301      	movs	r3, #1
 80059a0:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 80059a6:	f107 0310 	add.w	r3, r7, #16
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f87f 	bl	8005ab0 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Send command to SDRAM module to Configure Auto Refresh
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; //Set to Auto Refresh Mode command
 80059b2:	2303      	movs	r3, #3
 80059b4:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80059b6:	2310      	movs	r3, #16
 80059b8:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 8;                              //Set number of consecutive auto refresh commands to 8
 80059ba:	2308      	movs	r3, #8
 80059bc:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 80059c2:	f107 0310 	add.w	r3, r7, #16
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f871 	bl	8005ab0 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Program Mode Register
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;        //Set to Load Mode Register command
 80059ce:	2304      	movs	r3, #4
 80059d0:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80059d2:	2310      	movs	r3, #16
 80059d4:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 80059d6:	2301      	movs	r3, #1
 80059d8:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 80059e2:	431a      	orrs	r2, r3
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
			                               m_uModeReg_BurstType_Seq |      //Set burst mode to sequential
 80059e8:	431a      	orrs	r2, r3
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
																		 m_uModeReg_CASLatency_3 |       //Set column address strobe (CAS) latency to 3 clock cycles (to match setting provided to FMC)
 80059ee:	431a      	orrs	r2, r3
																		 m_uModeReg_WriteBurst_Single;   //Set write burst length to 1 32bit word
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
																		 m_uModeReg_OpMode_Std |         //Set operation mode to standard
 80059f4:	4313      	orrs	r3, r2
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 |      //Set Read burst length to 1 32bit word
 80059f6:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 80059f8:	f107 0310 	add.w	r3, r7, #16
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f856 	bl	8005ab0 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>


	//---------------------------------
	//Program SDRAM module refresh rate
	HAL_SDRAM_ProgramRefreshRate(&m_sHandle, m_uRefresh);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4610      	mov	r0, r2
 8005a12:	f7ff f94e 	bl	8004cb2 <HAL_SDRAM_ProgramRefreshRate>

	//Set Driver State
	m_eState = QA_Initialized; //Set driver as being initializeed
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	//Return
	return QA_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3750      	adds	r7, #80	; 0x50
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40020c00 	.word	0x40020c00
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	40021400 	.word	0x40021400
 8005a34:	40021800 	.word	0x40021800
 8005a38:	40021c00 	.word	0x40021c00
 8005a3c:	40022000 	.word	0x40022000
 8005a40:	40023800 	.word	0x40023800
 8005a44:	a0000140 	.word	0xa0000140

08005a48 <_ZN7QAD_FMC8imp_testEv>:
//QAD_FMC::imp_test
//QAD_FMC Test Method
//
//Used to perform read and write test of full 16 megabytes of SDRAM
//Returns QA_OK if test passes, or QA_Fail if test is not successful
QA_Result QAD_FMC::imp_test(void) {
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]

	//Write values to whole 16 megabytes of SDRAM
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005a50:	2300      	movs	r3, #0
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a5a:	d209      	bcs.n	8005a70 <_ZN7QAD_FMC8imp_testEv+0x28>
		QAD_FMC_Data->words[i] = i;
 8005a5c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	e7f1      	b.n	8005a54 <_ZN7QAD_FMC8imp_testEv+0xc>
	}

	//Read values from while 16 megabytes of SDRAM, and confirm that they match the values that were written to it
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005a70:	2300      	movs	r3, #0
 8005a72:	60bb      	str	r3, [r7, #8]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a7a:	d212      	bcs.n	8005aa2 <_ZN7QAD_FMC8imp_testEv+0x5a>

		//If data read doesn't match data written then return QA_Fail
		if (QAD_FMC_Data->words[i] != i)
 8005a7c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <_ZN7QAD_FMC8imp_testEv+0x52>
			return QA_Fail;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e004      	b.n	8005aa4 <_ZN7QAD_FMC8imp_testEv+0x5c>
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	60bb      	str	r3, [r7, #8]
 8005aa0:	e7e8      	b.n	8005a74 <_ZN7QAD_FMC8imp_testEv+0x2c>
	}

	//Return QA_OK as if we reach this point then the test has passed
	return QA_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>:
//QAD_FMC::cmd
//QAD_FMC Initialization Method
//
//Used to send commands to SDRAM module
//pCmd - FMC_SDRAM_CommandTypeDef containing details of command to be sent to SDRAM module
void QAD_FMC::cmd(FMC_SDRAM_CommandTypeDef& pCmd) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
	HAL_SDRAM_SendCommand(&m_sHandle, &pCmd, 0);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3330      	adds	r3, #48	; 0x30
 8005abe:	2200      	movs	r2, #0
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff f8ca 	bl	8004c5c <HAL_SDRAM_SendCommand>
}
 8005ac8:	bf00      	nop
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	809a      	strh	r2, [r3, #4]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	719a      	strb	r2, [r3, #6]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	609a      	str	r2, [r3, #8]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	60da      	str	r2, [r3, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 f841 	bl	8005b8a <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	889b      	ldrh	r3, [r3, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	4619      	mov	r1, r3
 8005b26:	f7fd fbdb 	bl	80032e0 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	741a      	strb	r2, [r3, #16]
}
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	889b      	ldrh	r3, [r3, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	f7fd fbc8 	bl	80032e0 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	741a      	strb	r2, [r3, #16]
}
 8005b56:	bf00      	nop
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	7c1b      	ldrb	r3, [r3, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d107      	bne.n	8005b82 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff ffe0 	bl	8005b38 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8005b78:	e003      	b.n	8005b82 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff ffc9 	bl	8005b12 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8005b80:	bf00      	nop
	}
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b088      	sub	sp, #32
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8005b92:	f107 030c 	add.w	r3, r7, #12
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	605a      	str	r2, [r3, #4]
 8005b9c:	609a      	str	r2, [r3, #8]
 8005b9e:	60da      	str	r2, [r3, #12]
 8005ba0:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	889b      	ldrh	r3, [r3, #4]
 8005ba6:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	799b      	ldrb	r3, [r3, #6]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8005bb0:	2311      	movs	r3, #17
 8005bb2:	e000      	b.n	8005bb6 <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f107 020c 	add.w	r2, r7, #12
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fd f8ce 	bl	8002d70 <HAL_GPIO_Init>
}
 8005bd4:	bf00      	nop
 8005bd6:	3720      	adds	r7, #32
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Input Constructor
//
//This method will initialize the required GPIO pin with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Input::QAD_GPIO_Input(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
		m_pGPIO(pGPIO),
		m_uPin(uPin),
		m_ePullMode(QAD_GPIO_PullMode_NoPull) {
 8005bea:	4a0a      	ldr	r2, [pc, #40]	; (8005c14 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft+0x38>)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	605a      	str	r2, [r3, #4]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	88fa      	ldrh	r2, [r7, #6]
 8005bfa:	811a      	strh	r2, [r3, #8]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	60da      	str	r2, [r3, #12]

	//Initialize the GPIO pin
	periphInit();
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 f817 	bl	8005c36 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	08008d1c 	.word	0x08008d1c

08005c18 <_ZN14QAD_GPIO_Input11setPullModeE17QAD_GPIO_PullMode>:
//QAD_GPIO_Input::setPullMode
//QAD_GPIO_Input Control Method
//
//Sets new pull mode (Pull-up, Pull-down or No-pull)
//ePull - New pull mode. Member of QAD_GPIO_PullMode as defined in QAD_GPIO.hpp
void QAD_GPIO_Input::setPullMode(QAD_GPIO_PullMode ePull) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]

	//Store new Pull mode setting
	m_ePullMode = ePull;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	60da      	str	r2, [r3, #12]

	//Reinitialize peripheral with new Pull mode
	periphInit();
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f804 	bl	8005c36 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <_ZN14QAD_GPIO_Input10periphInitEv>:
//QAD_GPIO_Input::periphInit
//QAD_GPIO_Input Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Input::periphInit(void) {
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b088      	sub	sp, #32
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_Init = {0};
 8005c3e:	f107 030c 	add.w	r3, r7, #12
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	605a      	str	r2, [r3, #4]
 8005c48:	609a      	str	r2, [r3, #8]
 8005c4a:	60da      	str	r2, [r3, #12]
 8005c4c:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	891b      	ldrh	r3, [r3, #8]
 8005c52:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = GPIO_MODE_INPUT;
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f107 020c 	add.w	r2, r7, #12
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fd f87f 	bl	8002d70 <HAL_GPIO_Init>
}
 8005c72:	bf00      	nop
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <_ZN8QAD_LTDCC1Ev>:

  //------------
  //Constructors

  //As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
	QAD_LTDC() :
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized) {}
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f646 3225 	movw	r2, #27429	; 0x6b25
 8005c8e:	605a      	str	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f24f 4224 	movw	r2, #62500	; 0xf424
 8005c96:	609a      	str	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f643 5209 	movw	r2, #15625	; 0x3d09
 8005c9e:	60da      	str	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <_ZN8QAD_LTDC3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_LTDC& get(void) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
		static QAD_LTDC instance;
 8005cb4:	4b10      	ldr	r3, [pc, #64]	; (8005cf8 <_ZN8QAD_LTDC3getEv+0x48>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	f3bf 8f5b 	dmb	ish
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bf0c      	ite	eq
 8005cc6:	2301      	moveq	r3, #1
 8005cc8:	2300      	movne	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d010      	beq.n	8005cf2 <_ZN8QAD_LTDC3getEv+0x42>
 8005cd0:	4809      	ldr	r0, [pc, #36]	; (8005cf8 <_ZN8QAD_LTDC3getEv+0x48>)
 8005cd2:	f002 fc30 	bl	8008536 <__cxa_guard_acquire>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	bf14      	ite	ne
 8005cdc:	2301      	movne	r3, #1
 8005cde:	2300      	moveq	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <_ZN8QAD_LTDC3getEv+0x42>
 8005ce6:	4805      	ldr	r0, [pc, #20]	; (8005cfc <_ZN8QAD_LTDC3getEv+0x4c>)
 8005ce8:	f7ff ffc7 	bl	8005c7a <_ZN8QAD_LTDCC1Ev>
 8005cec:	4802      	ldr	r0, [pc, #8]	; (8005cf8 <_ZN8QAD_LTDC3getEv+0x48>)
 8005cee:	f002 fc2e 	bl	800854e <__cxa_guard_release>
		return instance;
 8005cf2:	4b02      	ldr	r3, [pc, #8]	; (8005cfc <_ZN8QAD_LTDC3getEv+0x4c>)
	}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	2000028c 	.word	0x2000028c
 8005cfc:	20000140 	.word	0x20000140

08005d00 <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>:
	//Communication Methods

	//Used to allow OTM8009A driver (in otm8009a.h file) to communicate with OTM8009A display controller via DSI
	//uNumParams - The number of parameters being supplied
	//pParams    - Pointer to the list of parameters to be supplied
	static void dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
		get().imp_dsi_IO_WriteCmd(uNumParams, pParams);
 8005d0a:	f7ff ffd1 	bl	8005cb0 <_ZN8QAD_LTDC3getEv>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 faeb 	bl	80062f0 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>
	}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <_ZN8QAD_LTDC8imp_initEv>:
//QAD_LTDC Initialization Method
//
//To be called from static method init()
//Used to initialize the DSI and LTDC peripherals, LTDC layers, the OTM8009A display controller and the required reset and backlight control GPIO pins
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails.
QA_Result QAD_LTDC::imp_init(void) {
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b0a2      	sub	sp, #136	; 0x88
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]

  //Initialize GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 8005d2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	605a      	str	r2, [r3, #4]
 8005d36:	609a      	str	r2, [r3, #8]
 8005d38:	60da      	str	r2, [r3, #12]
 8005d3a:	611a      	str	r2, [r3, #16]

	  //Initialize Backlight Control Pin
	GPIO_Init.Pin    = QAD_LTDC_BACKLIGHT_PIN;          //Set pin number. (QAD_LTDC_BACKLIGHT_PIN is defined in setup.hpp)
 8005d3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d40:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 8005d42:	2301      	movs	r3, #1
 8005d44:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLDOWN;                   //Enable pull-down resistor so backlight defaults to off
 8005d46:	2302      	movs	r3, #2
 8005d48:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_BACKLIGHT_PORT, &GPIO_Init); //Initialize pin. (QAD_LTDC_BACKLIGHT_PORT is defined in setup.hpp)
 8005d4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d52:	4619      	mov	r1, r3
 8005d54:	4897      	ldr	r0, [pc, #604]	; (8005fb4 <_ZN8QAD_LTDC8imp_initEv+0x290>)
 8005d56:	f7fd f80b 	bl	8002d70 <HAL_GPIO_Init>

		//Initialize OTM8009A Controller Reset Pin
	GPIO_Init.Pin    = QAD_LTDC_RESET_PIN;              //Set pin number. (QAD_LTDC_RESET_PIN is defined in setup.hpp)
 8005d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d5e:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;             //Set pin mode to output in push/pull mode
 8005d60:	2301      	movs	r3, #1
 8005d62:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLUP;                     //Enable pull-up resistor as reset is active-low
 8005d64:	2301      	movs	r3, #1
 8005d66:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;             //Set pin's output speed to low
 8005d68:	2300      	movs	r3, #0
 8005d6a:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_RESET_PORT, &GPIO_Init);     //Initialize pin. (QAD_LTDC_RESET_PORT is defined in setup.hpp)
 8005d6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d70:	4619      	mov	r1, r3
 8005d72:	4891      	ldr	r0, [pc, #580]	; (8005fb8 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8005d74:	f7fc fffc 	bl	8002d70 <HAL_GPIO_Init>


	//Reset OTM8009A Controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET); //Pull reset pin low
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d7e:	488e      	ldr	r0, [pc, #568]	; (8005fb8 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8005d80:	f7fd faae 	bl	80032e0 <HAL_GPIO_WritePin>
	HAL_Delay(20);                                                              //Delay for 20ms to allow for reset process
 8005d84:	2014      	movs	r0, #20
 8005d86:	f7fc f96f 	bl	8002068 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);   //Pull reset pin high
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d90:	4889      	ldr	r0, [pc, #548]	; (8005fb8 <_ZN8QAD_LTDC8imp_initEv+0x294>)
 8005d92:	f7fd faa5 	bl	80032e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);                                                              //Delay for 10ms to allow reset process time to complete
 8005d96:	200a      	movs	r0, #10
 8005d98:	f7fc f966 	bl	8002068 <HAL_Delay>


	//Initialize LTDC Peripheral Clock
	__HAL_RCC_LTDC_CLK_ENABLE();
 8005d9c:	4b87      	ldr	r3, [pc, #540]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da0:	4a86      	ldr	r2, [pc, #536]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005da2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005da6:	6453      	str	r3, [r2, #68]	; 0x44
 8005da8:	4b84      	ldr	r3, [pc, #528]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005db0:	613b      	str	r3, [r7, #16]
 8005db2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_LTDC_FORCE_RESET();
 8005db4:	4b81      	ldr	r3, [pc, #516]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	4a80      	ldr	r2, [pc, #512]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005dba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dbe:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_LTDC_RELEASE_RESET();
 8005dc0:	4b7e      	ldr	r3, [pc, #504]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	4a7d      	ldr	r2, [pc, #500]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005dc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dca:	6253      	str	r3, [r2, #36]	; 0x24

	//Initialize DSI Peripheral Clock
	__HAL_RCC_DSI_CLK_ENABLE();
 8005dcc:	4b7b      	ldr	r3, [pc, #492]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd0:	4a7a      	ldr	r2, [pc, #488]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005dd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dd6:	6453      	str	r3, [r2, #68]	; 0x44
 8005dd8:	4b78      	ldr	r3, [pc, #480]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DSI_FORCE_RESET();
 8005de4:	4b75      	ldr	r3, [pc, #468]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	4a74      	ldr	r2, [pc, #464]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005dea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dee:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_DSI_RELEASE_RESET();
 8005df0:	4b72      	ldr	r3, [pc, #456]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	4a71      	ldr	r2, [pc, #452]	; (8005fbc <_ZN8QAD_LTDC8imp_initEv+0x298>)
 8005df6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005dfa:	6253      	str	r3, [r2, #36]	; 0x24

	//Prepare Instances for DSI and LTDC handles (required if needing to call imp_deinit() due to failed initialization)
  m_sDSIHandle.Instance = DSI;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a70      	ldr	r2, [pc, #448]	; (8005fc0 <_ZN8QAD_LTDC8imp_initEv+0x29c>)
 8005e00:	611a      	str	r2, [r3, #16]
  m_sLTDCHandle.Instance = LTDC;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a6f      	ldr	r2, [pc, #444]	; (8005fc4 <_ZN8QAD_LTDC8imp_initEv+0x2a0>)
 8005e06:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  //-------------------------
  //Initialize DSI peripheral

  //Confirm DSI is currently uninitialized
  HAL_DSI_DeInit(&m_sDSIHandle);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3310      	adds	r3, #16
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fc fbf4 	bl	80025fc <HAL_DSI_DeInit>

  //Fill out DSI PLL Initialization structure as required for DSI to operate at required clock speed
  DSI_PLLInitTypeDef DSI_PLLInit = {0};
 8005e14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	609a      	str	r2, [r3, #8]
  DSI_PLLInit.PLLNDIV = 100;
 8005e20:	2364      	movs	r3, #100	; 0x64
 8005e22:	64bb      	str	r3, [r7, #72]	; 0x48
  DSI_PLLInit.PLLIDF  = DSI_PLL_IN_DIV5;
 8005e24:	2305      	movs	r3, #5
 8005e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  DSI_PLLInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	653b      	str	r3, [r7, #80]	; 0x50

  //Fill out required DSI initialization details
  m_sDSIHandle.Init.NumberOfLanes = DSI_TWO_DATA_LANES;                   //Set DSI as using two data lanes
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	61da      	str	r2, [r3, #28]
  m_sDSIHandle.Init.TXEscapeCkdiv = m_uLCDLaneByteClk / m_uLCDClkDivisor; //Set TX Escape Clock Division
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	619a      	str	r2, [r3, #24]

  //Initialize DSI, calling imp_deinit() if initialization fails
  if (HAL_DSI_Init(&m_sDSIHandle, &DSI_PLLInit) != HAL_OK) {
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3310      	adds	r3, #16
 8005e46:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fc fabb 	bl	80023c8 <HAL_DSI_Init>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	bf14      	ite	ne
 8005e58:	2301      	movne	r3, #1
 8005e5a:	2300      	moveq	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <_ZN8QAD_LTDC8imp_initEv+0x148>
  	imp_deinit();
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f9e4 	bl	8006230 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e1db      	b.n	8006224 <_ZN8QAD_LTDC8imp_initEv+0x500>

  //----------------------------------
  //Initialize DSI video configuration

  //Generate base DSI timing parameters
  uint32_t HACT = QAD_LTDC_WIDTH;    //Horizontal Active period in pixels
 8005e6c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t VACT = QAD_LTDC_HEIGHT;   //Vertical Active period in pixels
 8005e74:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005e78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t VSA  = 12;                //Period that vertical sync is active in pixels
 8005e7c:	230c      	movs	r3, #12
 8005e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t VBP  = 12;                //Vertical Back Porch in pixels
 8005e80:	230c      	movs	r3, #12
 8005e82:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t VFP  = 12;                //Vertical Front Porch in pixels
 8005e84:	230c      	movs	r3, #12
 8005e86:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t HSA  = 63;                //Period that horizontal sync is active in pixels
 8005e88:	233f      	movs	r3, #63	; 0x3f
 8005e8a:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t HBP  = 120;               //Horizontal Back Porch in pixels
 8005e8c:	2378      	movs	r3, #120	; 0x78
 8005e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t HFP  = 120;               //Horizontal Front Porch in pixels
 8005e90:	2378      	movs	r3, #120	; 0x78
 8005e92:	66bb      	str	r3, [r7, #104]	; 0x68

  //Fill out details of DSI Configuration Handle
  m_sDSICfgHandle.VirtualChannelID             = 0;                                      //Set virtual channel ID
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	62da      	str	r2, [r3, #44]	; 0x2c
  m_sDSICfgHandle.ColorCoding                  = DSI_RGB888;                             //Set pixel format to 24bit RGB (8bits for each Red, Green and Blue)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2205      	movs	r2, #5
 8005e9e:	631a      	str	r2, [r3, #48]	; 0x30
  m_sDSICfgHandle.VSPolarity                   = DSI_VSYNC_ACTIVE_HIGH;                  //Set Vertical Sync signal to active high
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	64da      	str	r2, [r3, #76]	; 0x4c
  m_sDSICfgHandle.HSPolarity                   = DSI_HSYNC_ACTIVE_HIGH;                  //Set Horizontal Sync signal to active high
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	649a      	str	r2, [r3, #72]	; 0x48
  m_sDSICfgHandle.DEPolarity                   = DSI_DATA_ENABLE_ACTIVE_HIGH;            //Set Data Enable signal to active high
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	651a      	str	r2, [r3, #80]	; 0x50
  m_sDSICfgHandle.Mode                         = DSI_VID_MODE_BURST;                     //Set Video Mode to burst mode
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
  m_sDSICfgHandle.NullPacketSize               = 0xFFF;                                  //Set null packet size
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005ebe:	645a      	str	r2, [r3, #68]	; 0x44
  m_sDSICfgHandle.NumberOfChunks               = 0;                                      //Set number of chunks
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40
  m_sDSICfgHandle.PacketSize                   = HACT;                                   //Set packet size to horizontal active period
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005ed4:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal sync signal (in lane byte clock cycles)
 8005edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54

  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005eea:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDClockRate;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) /             //Set duration for horizontal back porch (in lane byte clock cycles)
 8005ef2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	659a      	str	r2, [r3, #88]	; 0x58

  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8005efa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f00:	441a      	add	r2, r3
 8005f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f04:	441a      	add	r2, r3
 8005f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f08:	4413      	add	r3, r2
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6892      	ldr	r2, [r2, #8]
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8005f0e:	fb02 f203 	mul.w	r2, r2, r3
  		                                           m_uLCDLaneByteClk) / m_uLCDClockRate;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	fbb2 f2f3 	udiv	r2, r2, r3
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) *             //Set duration for a horizontal line (in lane byte clock cycles)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	65da      	str	r2, [r3, #92]	; 0x5c

  m_sDSICfgHandle.VerticalSyncActive           = VSA;                                    //Set duration for vertical sync signal
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f22:	661a      	str	r2, [r3, #96]	; 0x60
  m_sDSICfgHandle.VerticalBackPorch            = VBP;                                    //Set duration for vertical back porch
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f28:	665a      	str	r2, [r3, #100]	; 0x64
  m_sDSICfgHandle.VerticalFrontPorch           = VFP;                                    //Set duration for vertical front porch
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005f2e:	669a      	str	r2, [r3, #104]	; 0x68
  m_sDSICfgHandle.VerticalActive               = VACT;                                   //Set duration of vertical active period
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f36:	66da      	str	r2, [r3, #108]	; 0x6c

  m_sDSICfgHandle.LPCommandEnable              = DSI_LP_COMMAND_ENABLE;  //Enable DSI low power command
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005f3e:	671a      	str	r2, [r3, #112]	; 0x70
  m_sDSICfgHandle.LPLargestPacketSize          = 16;                     //Set largest packet size for low power commands during VSA, VBP and VFP periods.
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2210      	movs	r2, #16
 8005f44:	675a      	str	r2, [r3, #116]	; 0x74
  m_sDSICfgHandle.LPVACTLargestPacketSize      = 0;                      //Set largest packet size for low power commands during VACT period
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	679a      	str	r2, [r3, #120]	; 0x78
  m_sDSICfgHandle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;      //Enable low power horizontal front porch
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f52:	67da      	str	r2, [r3, #124]	; 0x7c
  m_sDSICfgHandle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;      //Enable low power horizontal back porch
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  m_sDSICfgHandle.LPVerticalActiveEnable       = DSI_LP_VACT_ENABLE;     //Enable low power vertical active
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  m_sDSICfgHandle.LPVerticalFrontPorchEnable   = DSI_LP_VFP_ENABLE;      //Enable low power vertical front porch
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  m_sDSICfgHandle.LPVerticalBackPorchEnable    = DSI_LP_VBP_ENABLE;      //Enable low power vertical back porch
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  m_sDSICfgHandle.LPVerticalSyncActiveEnable   = DSI_LP_VSYNC_ENABLE;    //Enable low power vertical sync
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  //Configure DSI Video Mode,
  if (HAL_DSI_ConfigVideoMode(&m_sDSIHandle, &m_sDSICfgHandle) != HAL_OK) {
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f103 0210 	add.w	r2, r3, #16
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	332c      	adds	r3, #44	; 0x2c
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f7fc fbba 	bl	800270c <HAL_DSI_ConfigVideoMode>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	bf14      	ite	ne
 8005f9e:	2301      	movne	r3, #1
 8005fa0:	2300      	moveq	r3, #0
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00f      	beq.n	8005fc8 <_ZN8QAD_LTDC8imp_initEv+0x2a4>
  	imp_deinit();
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f941 	bl	8006230 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e138      	b.n	8006224 <_ZN8QAD_LTDC8imp_initEv+0x500>
 8005fb2:	bf00      	nop
 8005fb4:	40022000 	.word	0x40022000
 8005fb8:	40022400 	.word	0x40022400
 8005fbc:	40023800 	.word	0x40023800
 8005fc0:	40016c00 	.word	0x40016c00
 8005fc4:	40016800 	.word	0x40016800

  //--------------------------
  //Initialize LTDC Peripheral

  //Fill out details for LTDC initialization
  m_sLTDCHandle.Init.HorizontalSync     = (HSA - 1);                              //Set horizontal syncronization width
 8005fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fca:	1e5a      	subs	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  m_sLTDCHandle.Init.AccumulatedHBP     = (HSA + HBP - 1);                        //Set accumulated horizontal back porch width
 8005fd2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd6:	4413      	add	r3, r2
 8005fd8:	1e5a      	subs	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  m_sLTDCHandle.Init.AccumulatedActiveW = (QAD_LTDC_WIDTH + HSA + HBP - 1);       //Set accumulated active width
 8005fe0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 321f 	addw	r2, r3, #799	; 0x31f
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  m_sLTDCHandle.Init.TotalWidth         = (QAD_LTDC_WIDTH + HSA + HBP + HFP - 1); //Set total width
 8005ff0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff4:	441a      	add	r2, r3
 8005ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f203 321f 	addw	r2, r3, #799	; 0x31f
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  m_sLTDCHandle.LayerCfg->ImageWidth    = QAD_LTDC_WIDTH;                         //Sets the frame buffer line length (in pixels)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f44f 7248 	mov.w	r2, #800	; 0x320
 800600a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  m_sLTDCHandle.LayerCfg->ImageHeight   = QAD_LTDC_HEIGHT;                        //Sets the number of frame buffer lines (height in pixels)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006014:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  m_sLTDCHandle.Init.Backcolor.Red      = 0;                                      //Set background color red value
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
  m_sLTDCHandle.Init.Backcolor.Green    = 0;                                      //Set background color green value
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
  m_sLTDCHandle.Init.Backcolor.Blue     = 255;                                    //Set background color blue value
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	22ff      	movs	r2, #255	; 0xff
 800602c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  m_sLTDCHandle.Init.PCPolarity         = LTDC_PCPOLARITY_IPC;                    //Set pixel clock polarity to non-inverted
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  //Complete initialization structre details based on DSI Configuration, calling imp_deinit() if failed
  if (HAL_LTDC_StructInitFromVideoConfig(&m_sLTDCHandle, &m_sDSICfgHandle) != HAL_OK) {
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	332c      	adds	r3, #44	; 0x2c
 8006042:	4619      	mov	r1, r3
 8006044:	4610      	mov	r0, r2
 8006046:	f7fd fc6f 	bl	8003928 <HAL_LTDCEx_StructInitFromVideoConfig>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	bf14      	ite	ne
 8006050:	2301      	movne	r3, #1
 8006052:	2300      	moveq	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <_ZN8QAD_LTDC8imp_initEv+0x340>
  	imp_deinit();
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f8e8 	bl	8006230 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8006060:	2301      	movs	r3, #1
 8006062:	e0df      	b.n	8006224 <_ZN8QAD_LTDC8imp_initEv+0x500>
  }

  //Initialize LTDC Peripheral
  if (HAL_LTDC_Init(&m_sLTDCHandle) != HAL_OK) {
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3398      	adds	r3, #152	; 0x98
 8006068:	4618      	mov	r0, r3
 800606a:	f7fd f953 	bl	8003314 <HAL_LTDC_Init>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	bf14      	ite	ne
 8006074:	2301      	movne	r3, #1
 8006076:	2300      	moveq	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d004      	beq.n	8006088 <_ZN8QAD_LTDC8imp_initEv+0x364>
  	imp_deinit();
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8d6 	bl	8006230 <_ZN8QAD_LTDC10imp_deinitEv>
  	return QA_Fail;
 8006084:	2301      	movs	r3, #1
 8006086:	e0cd      	b.n	8006224 <_ZN8QAD_LTDC8imp_initEv+0x500>

    //-------
    //Layer 0

  //Set pointer address for layer 0 double buffer
  m_pLayer0Ptr = (void*)0xC0000000;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800608e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

  //Clear Layer Config structure
  LTDC_Layer = {0};
 8006092:	f107 0314 	add.w	r3, r7, #20
 8006096:	2234      	movs	r2, #52	; 0x34
 8006098:	2100      	movs	r1, #0
 800609a:	4618      	mov	r0, r3
 800609c:	f002 fb00 	bl	80086a0 <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 80060a4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80060a8:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 80060ae:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80060b2:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 80060b4:	2304      	movs	r3, #4
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80060be:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 80060c0:	23ff      	movs	r3, #255	; 0xff
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 80060c4:	2300      	movs	r3, #0
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 80060da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80060de:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 80060e0:	2307      	movs	r3, #7
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 80060e4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80060e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 80060ea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80060ee:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 0 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 0) != HAL_OK) {
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3398      	adds	r3, #152	; 0x98
 80060f4:	f107 0114 	add.w	r1, r7, #20
 80060f8:	2200      	movs	r2, #0
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fd fa06 	bl	800350c <HAL_LTDC_ConfigLayer>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	bf14      	ite	ne
 8006106:	2301      	movne	r3, #1
 8006108:	2300      	moveq	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <_ZN8QAD_LTDC8imp_initEv+0x3f6>
		imp_deinit();
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f88d 	bl	8006230 <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 8006116:	2301      	movs	r3, #1
 8006118:	e084      	b.n	8006224 <_ZN8QAD_LTDC8imp_initEv+0x500>

	  //-------
	  //Layer 1

  //Set pointer address for layer 1 doube buffer
	m_pLayer1Ptr = (void*)((uint32_t)m_pLayer0Ptr + (QAD_LTDC_BUFFERSIZE*2));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006120:	461a      	mov	r2, r3
 8006122:	4b42      	ldr	r3, [pc, #264]	; (800622c <_ZN8QAD_LTDC8imp_initEv+0x508>)
 8006124:	4413      	add	r3, r2
 8006126:	461a      	mov	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  //Clear Layer Config structure
  LTDC_Layer = {0};
 800612e:	f107 0314 	add.w	r3, r7, #20
 8006132:	2234      	movs	r2, #52	; 0x34
 8006134:	2100      	movs	r1, #0
 8006136:	4618      	mov	r0, r3
 8006138:	f002 fab2 	bl	80086a0 <memset>

    //Set Layer as filling entire 800x480 display area of LCD
	LTDC_Layer.WindowX0        = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 8006140:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006144:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 800614a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800614e:	623b      	str	r3, [r7, #32]

	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;   //Set pixel format as 16bits per pixel (ARGB4444)
 8006150:	2304      	movs	r3, #4
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;       //Set address of initial front buffer for layer 1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800615a:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;                          //Specify constant Alpha value used for blending
 800615c:	23ff      	movs	r3, #255	; 0xff
 800615e:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;                            //Specify default Alpha value
 8006160:	2300      	movs	r3, #0
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c

	  //Set Layer background colour to black
	LTDC_Layer.Backcolor.Red   = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 800616a:	2300      	movs	r3, #0
 800616c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;  //Set Blending Factor 1 as Pixel Alpha * Constant Alpha
 8006176:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800617a:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;  //Set Blending Factor 2 as Pixel Alpha * Constant Alpha
 800617c:	2307      	movs	r3, #7
 800617e:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;               //Set frame buffer width
 8006180:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006184:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;              //Set frame buffer height
 8006186:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800618a:	643b      	str	r3, [r7, #64]	; 0x40

	//Configure layer 1 using required settings, calling imp_deinit() if initialization fails
	if (HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 1) != HAL_OK) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3398      	adds	r3, #152	; 0x98
 8006190:	f107 0114 	add.w	r1, r7, #20
 8006194:	2201      	movs	r2, #1
 8006196:	4618      	mov	r0, r3
 8006198:	f7fd f9b8 	bl	800350c <HAL_LTDC_ConfigLayer>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bf14      	ite	ne
 80061a2:	2301      	movne	r3, #1
 80061a4:	2300      	moveq	r3, #0
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d004      	beq.n	80061b6 <_ZN8QAD_LTDC8imp_initEv+0x492>
		imp_deinit();
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f83f 	bl	8006230 <_ZN8QAD_LTDC10imp_deinitEv>
		return QA_Fail;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e036      	b.n	8006224 <_ZN8QAD_LTDC8imp_initEv+0x500>
	}


	//-------------------------------
	//Enable LTDC Layer 0 and Layer 1
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 0);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061bc:	3384      	adds	r3, #132	; 0x84
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80061c6:	3284      	adds	r2, #132	; 0x84
 80061c8:	f043 0301 	orr.w	r3, r3, #1
 80061cc:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 1);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061d4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80061e0:	f502 7282 	add.w	r2, r2, #260	; 0x104
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	6013      	str	r3, [r2, #0]


	//---------------------
	//Enable DSI Peripheral
	HAL_DSI_Start(&m_sDSIHandle);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	3310      	adds	r3, #16
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fc fc8c 	bl	8002b0c <HAL_DSI_Start>


	//--------------------------------------
	//Initialize OTM8009A Display Controller
	OTM8009A_Init(OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 80061f4:	2101      	movs	r1, #1
 80061f6:	2000      	movs	r0, #0
 80061f8:	f7fb fc8e 	bl	8001b18 <OTM8009A_Init>


	//-------------------------------
	//Set Initial Frame Buffer States
	m_eLayer0Back  = QAD_LTDC_Buffer1;   //Set initial layer 0 back buffer as being buffer 1 in double buffer pair
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	m_eLayer0Front = QAD_LTDC_Buffer0;   //Set initial layer 0 front buffer as being buffer 0 in double buffer pair
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	m_eLayer1Back  = QAD_LTDC_Buffer1;   //Set initial layer 1 back buffer as being buffer 1 in double buffer pair
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	m_eLayer1Front = QAD_LTDC_Buffer0;   //Set initial layer 1 front buffer as being buffer 0 in double buffer pair
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b


	//Set Driver State as being initialized
	m_eInitState = QA_Initialized;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	701a      	strb	r2, [r3, #0]

	//Return
	return QA_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3788      	adds	r7, #136	; 0x88
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	00177000 	.word	0x00177000

08006230 <_ZN8QAD_LTDC10imp_deinitEv>:
//QAD_LTDC::imp_deinit
//QAD_LTDC Initialization Method
//
//To be called from static method deinit(), or from imp_init() in the event of a failed initialization
//Used to deinitialize the DSI and LTDC peripherals, LTDC layers, reset display controller and deinitialize reset and backlight GPIO pins
void QAD_LTDC::imp_deinit(void) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]

	//----------------------
	//Disable DSI Peripheral
	HAL_DSI_Stop(&m_sDSIHandle);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3310      	adds	r3, #16
 800623c:	4618      	mov	r0, r3
 800623e:	f7fc fca1 	bl	8002b84 <HAL_DSI_Stop>


	//-------------------
	//Disable LTDC Layers
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 1);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006248:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8006254:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	6013      	str	r3, [r2, #0]
	__HAL_LTDC_LAYER_DISABLE(&m_sLTDCHandle, 0);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006264:	3384      	adds	r3, #132	; 0x84
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 800626e:	3284      	adds	r2, #132	; 0x84
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	6013      	str	r3, [r2, #0]


	//----------------------------
	//Deinitialize LTDC Peripheral
	HAL_LTDC_DeInit(&m_sLTDCHandle);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3398      	adds	r3, #152	; 0x98
 800627a:	4618      	mov	r0, r3
 800627c:	f7fd f91a 	bl	80034b4 <HAL_LTDC_DeInit>


	//---------------------------
	//Deinitialize DSI Peripheral
	HAL_DSI_DeInit(&m_sDSIHandle);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3310      	adds	r3, #16
 8006284:	4618      	mov	r0, r3
 8006286:	f7fc f9b9 	bl	80025fc <HAL_DSI_DeInit>


	//---------------------------
	//Disable DSI and LTDC Clocks
	__HAL_RCC_DSI_CLK_DISABLE();
 800628a:	4b16      	ldr	r3, [pc, #88]	; (80062e4 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	4a15      	ldr	r2, [pc, #84]	; (80062e4 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8006290:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8006294:	6453      	str	r3, [r2, #68]	; 0x44
	__HAL_RCC_LTDC_CLK_DISABLE();
 8006296:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 8006298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629a:	4a12      	ldr	r2, [pc, #72]	; (80062e4 <_ZN8QAD_LTDC10imp_deinitEv+0xb4>)
 800629c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062a0:	6453      	str	r3, [r2, #68]	; 0x44


	//------------------------
	//Reset Display controller
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET);
 80062a2:	2200      	movs	r2, #0
 80062a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062a8:	480f      	ldr	r0, [pc, #60]	; (80062e8 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 80062aa:	f7fd f819 	bl	80032e0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80062ae:	2014      	movs	r0, #20
 80062b0:	f7fb feda 	bl	8002068 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);
 80062b4:	2201      	movs	r2, #1
 80062b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062ba:	480b      	ldr	r0, [pc, #44]	; (80062e8 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 80062bc:	f7fd f810 	bl	80032e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80062c0:	200a      	movs	r0, #10
 80062c2:	f7fb fed1 	bl	8002068 <HAL_Delay>


	//--------------------------------------------------
	//Deinitialize Reset and Backlight control GPIO Pins
	HAL_GPIO_DeInit(QAD_LTDC_BACKLIGHT_PORT, QAD_LTDC_BACKLIGHT_PIN);
 80062c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062ca:	4808      	ldr	r0, [pc, #32]	; (80062ec <_ZN8QAD_LTDC10imp_deinitEv+0xbc>)
 80062cc:	f7fc fefc 	bl	80030c8 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN);
 80062d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062d4:	4804      	ldr	r0, [pc, #16]	; (80062e8 <_ZN8QAD_LTDC10imp_deinitEv+0xb8>)
 80062d6:	f7fc fef7 	bl	80030c8 <HAL_GPIO_DeInit>

}
 80062da:	bf00      	nop
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	40023800 	.word	0x40023800
 80062e8:	40022400 	.word	0x40022400
 80062ec:	40022000 	.word	0x40022000

080062f0 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh>:
  //DSI Command Methods


//QAD_LTDC::imp_dsi_IO_WriteCmd
//DSI Command Methods
void QAD_LTDC::imp_dsi_IO_WriteCmd(uint32_t uNumParams, uint8_t* pParams) {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
	if (uNumParams <= 1) {
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d80f      	bhi.n	8006322 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x32>
		HAL_DSI_ShortWrite(&m_sDSIHandle, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f103 0010 	add.w	r0, r3, #16
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3301      	adds	r3, #1
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	2215      	movs	r2, #21
 800631a:	2100      	movs	r1, #0
 800631c:	f7fc fc6e 	bl	8002bfc <HAL_DSI_ShortWrite>
	} else {
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
	}
}
 8006320:	e00f      	b.n	8006342 <_ZN8QAD_LTDC19imp_dsi_IO_WriteCmdEmPh+0x52>
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f103 0010 	add.w	r0, r3, #16
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	4413      	add	r3, r2
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	9301      	str	r3, [sp, #4]
 8006336:	9200      	str	r2, [sp, #0]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2239      	movs	r2, #57	; 0x39
 800633c:	2100      	movs	r1, #0
 800633e:	f7fc fc7f 	bl	8002c40 <HAL_DSI_LongWrite>
}
 8006342:	bf00      	nop
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>:
  //------------------------------
  //QAD_LTDC Layer Control Methods

//QAD_LTDC::imp_flipLayer0Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer0Buffers(void) {
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d032      	beq.n	80063c2 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x76>
  	return;

  switch (m_eLayer0Front) {
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x20>
 8006366:	2b01      	cmp	r3, #1
 8006368:	d017      	beq.n	800639a <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x4e>
 800636a:	e02b      	b.n	80063c4 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer0Back  = QAD_LTDC_Buffer0;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer1;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006382:	461a      	mov	r2, r3
 8006384:	4b11      	ldr	r3, [pc, #68]	; (80063cc <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x80>)
 8006386:	4413      	add	r3, r2
 8006388:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3398      	adds	r3, #152	; 0x98
 800638e:	2200      	movs	r2, #0
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f7fd f8f8 	bl	8003588 <HAL_LTDC_SetAddress>
    	break;
 8006398:	e014      	b.n	80063c4 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer0Back  = QAD_LTDC_Buffer1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = QAD_LTDC_Buffer0;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80063b0:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3398      	adds	r3, #152	; 0x98
 80063b6:	2200      	movs	r2, #0
 80063b8:	68f9      	ldr	r1, [r7, #12]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fd f8e4 	bl	8003588 <HAL_LTDC_SetAddress>
    	break;
 80063c0:	e000      	b.n	80063c4 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
  	return;
 80063c2:	bf00      	nop
    }
  }
}
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	000bb800 	.word	0x000bb800

080063d0 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>:


//QAD_LTDC::imp_flipLayer1Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer1Buffers(void) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d032      	beq.n	8006446 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x76>
  	return;

  switch (m_eLayer1Front) {
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x20>
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d017      	beq.n	800641e <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x4e>
 80063ee:	e02b      	b.n	8006448 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    case (QAD_LTDC_Buffer0): {
    	m_eLayer1Back  = QAD_LTDC_Buffer0;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer1;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006406:	461a      	mov	r2, r3
 8006408:	4b11      	ldr	r3, [pc, #68]	; (8006450 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x80>)
 800640a:	4413      	add	r3, r2
 800640c:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3398      	adds	r3, #152	; 0x98
 8006412:	2201      	movs	r2, #1
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	4618      	mov	r0, r3
 8006418:	f7fd f8b6 	bl	8003588 <HAL_LTDC_SetAddress>
    	break;
 800641c:	e014      	b.n	8006448 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    }
    case (QAD_LTDC_Buffer1): {
    	m_eLayer1Back  = QAD_LTDC_Buffer1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = QAD_LTDC_Buffer0;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006434:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3398      	adds	r3, #152	; 0x98
 800643a:	2201      	movs	r2, #1
 800643c:	68f9      	ldr	r1, [r7, #12]
 800643e:	4618      	mov	r0, r3
 8006440:	f7fd f8a2 	bl	8003588 <HAL_LTDC_SetAddress>
    	break;
 8006444:	e000      	b.n	8006448 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
  	return;
 8006446:	bf00      	nop
    }
  }
}
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	000bb800 	.word	0x000bb800

08006454 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>:
}


//QAD_LTDC::imp_getLayer0BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer0BackBuffer(void) {
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x14>
		return NULL;
 8006464:	2300      	movs	r3, #0
 8006466:	e013      	b.n	8006490 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>

	switch (m_eLayer0Back) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x24>
 8006472:	2b01      	cmp	r3, #1
 8006474:	d004      	beq.n	8006480 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x2c>
 8006476:	e00a      	b.n	800648e <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer0Ptr;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800647e:	e007      	b.n	8006490 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006486:	461a      	mov	r2, r3
 8006488:	4b04      	ldr	r3, [pc, #16]	; (800649c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x48>)
 800648a:	4413      	add	r3, r2
 800648c:	e000      	b.n	8006490 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	000bb800 	.word	0x000bb800

080064a0 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>:
}


//QAD_LTDC::imp_getLayer1BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer1BackBuffer(void) {
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x14>
		return NULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	e013      	b.n	80064dc <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>

	switch (m_eLayer1Back) {
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x24>
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d004      	beq.n	80064cc <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x2c>
 80064c2:	e00a      	b.n	80064da <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3a>
	  case (QAD_LTDC_Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer1Ptr;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80064ca:	e007      	b.n	80064dc <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	  case (QAD_LTDC_Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80064d2:	461a      	mov	r2, r3
 80064d4:	4b04      	ldr	r3, [pc, #16]	; (80064e8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x48>)
 80064d6:	4413      	add	r3, r2
 80064d8:	e000      	b.n	80064dc <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	000bb800 	.word	0x000bb800

080064ec <DSI_IO_WriteCmd>:

//DSI_IO_WriteCmd
//OTM8009A Display Controller Communication Methods
//Used by the OTM8009A initialization method in the otm8009a.h file
//Calls the static dsi_IO_WriteCmd method in the QAD_LTDC driver class
void DSI_IO_WriteCmd(uint32_t NbrParam, uint8_t* pParams) {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  QAD_LTDC::dsi_IO_WriteCmd(NbrParam, pParams);
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff fc01 	bl	8005d00 <_ZN8QAD_LTDC15dsi_IO_WriteCmdEmPh>
}
 80064fe:	bf00      	nop
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
	...

08006508 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 800650c:	4b10      	ldr	r3, [pc, #64]	; (8006550 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	f3bf 8f5b 	dmb	ish
 8006514:	b2db      	uxtb	r3, r3
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	bf0c      	ite	eq
 800651e:	2301      	moveq	r3, #1
 8006520:	2300      	movne	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d010      	beq.n	800654a <_ZN11QAD_UARTMgr3getEv+0x42>
 8006528:	4809      	ldr	r0, [pc, #36]	; (8006550 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800652a:	f002 f804 	bl	8008536 <__cxa_guard_acquire>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	bf14      	ite	ne
 8006534:	2301      	movne	r3, #1
 8006536:	2300      	moveq	r3, #0
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d005      	beq.n	800654a <_ZN11QAD_UARTMgr3getEv+0x42>
 800653e:	4805      	ldr	r0, [pc, #20]	; (8006554 <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8006540:	f000 fa3e 	bl	80069c0 <_ZN11QAD_UARTMgrC1Ev>
 8006544:	4802      	ldr	r0, [pc, #8]	; (8006550 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8006546:	f002 f802 	bl	800854e <__cxa_guard_release>
		return instance;
 800654a:	4b02      	ldr	r3, [pc, #8]	; (8006554 <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 800654c:	4618      	mov	r0, r3
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200002f0 	.word	0x200002f0
 8006554:	20000290 	.word	0x20000290

08006558 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	4603      	mov	r3, r0
 8006560:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	2b07      	cmp	r3, #7
 8006566:	d901      	bls.n	800656c <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 8006568:	2302      	movs	r3, #2
 800656a:	e00a      	b.n	8006582 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 800656c:	f7ff ffcc 	bl	8006508 <_ZN11QAD_UARTMgr3getEv>
 8006570:	4601      	mov	r1, r0
 8006572:	79fa      	ldrb	r2, [r7, #7]
 8006574:	4613      	mov	r3, r2
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	440b      	add	r3, r1
 800657e:	3301      	adds	r3, #1
 8006580:	781b      	ldrb	r3, [r3, #0]
	}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f769xx.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	4603      	mov	r3, r0
 8006592:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	2b07      	cmp	r3, #7
 8006598:	d901      	bls.n	800659e <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	e00a      	b.n	80065b4 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 800659e:	f7ff ffb3 	bl	8006508 <_ZN11QAD_UARTMgr3getEv>
 80065a2:	4601      	mov	r1, r0
 80065a4:	79fa      	ldrb	r2, [r7, #7]
 80065a6:	4613      	mov	r3, r2
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	3304      	adds	r3, #4
 80065b2:	681b      	ldr	r3, [r3, #0]
	}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	2b07      	cmp	r3, #7
 80065ca:	d902      	bls.n	80065d2 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 80065cc:	f06f 0309 	mvn.w	r3, #9
 80065d0:	e00b      	b.n	80065ea <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 80065d2:	f7ff ff99 	bl	8006508 <_ZN11QAD_UARTMgr3getEv>
 80065d6:	4601      	mov	r1, r0
 80065d8:	79fa      	ldrb	r2, [r7, #7]
 80065da:	4613      	mov	r3, r2
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	440b      	add	r3, r1
 80065e4:	3308      	adds	r3, #8
 80065e6:	f993 3000 	ldrsb.w	r3, [r3]
	}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Management Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static void registerUART(QAD_UART_Periph eUART) {
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	4603      	mov	r3, r0
 80065fa:	71fb      	strb	r3, [r7, #7]
		get().imp_registerUART(eUART);
 80065fc:	f7ff ff84 	bl	8006508 <_ZN11QAD_UARTMgr3getEv>
 8006600:	4602      	mov	r2, r0
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	4619      	mov	r1, r3
 8006606:	4610      	mov	r0, r2
 8006608:	f000 fa5c 	bl	8006ac4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
	}
 800660c:	bf00      	nop
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 800661e:	f7ff ff73 	bl	8006508 <_ZN11QAD_UARTMgr3getEv>
 8006622:	4602      	mov	r2, r0
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	4619      	mov	r1, r3
 8006628:	4610      	mov	r0, r2
 800662a:	f000 fa74 	bl	8006b16 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 800662e:	bf00      	nop
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 8006636:	b580      	push	{r7, lr}
 8006638:	b082      	sub	sp, #8
 800663a:	af00      	add	r7, sp, #0
 800663c:	4603      	mov	r3, r0
 800663e:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8006640:	f7ff ff62 	bl	8006508 <_ZN11QAD_UARTMgr3getEv>
 8006644:	4602      	mov	r2, r0
 8006646:	79fb      	ldrb	r3, [r7, #7]
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f000 fa7e 	bl	8006b4c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8006650:	bf00      	nop
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 8006662:	f7ff ff51 	bl	8006508 <_ZN11QAD_UARTMgr3getEv>
 8006666:	4602      	mov	r2, r0
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f000 fb5f 	bl	8006d30 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or QA_Fail if initialization has failed
QA_Result QAD_UART::init(void) {
 800667a:	b580      	push	{r7, lr}
 800667c:	b084      	sub	sp, #16
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
	if (QAD_UARTMgr::getState(m_eUART))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	785b      	ldrb	r3, [r3, #1]
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff ff66 	bl	8006558 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	bf14      	ite	ne
 8006692:	2301      	movne	r3, #1
 8006694:	2300      	moveq	r3, #0
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 800669c:	2302      	movs	r3, #2
 800669e:	e012      	b.n	80066c6 <_ZN8QAD_UART4initEv+0x4c>

  QAD_UARTMgr::registerUART(m_eUART);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff ffa4 	bl	80065f2 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>
  QA_Result eRes = periphInit();
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f8a7 	bl	80067fe <_ZN8QAD_UART10periphInitEv>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]

  if (eRes)
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d004      	beq.n	80066c4 <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	4618      	mov	r0, r3
 80066c0:	f7ff ffa8 	bl	8006614 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
  return eRes;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <_ZN8QAD_UART6deinitEv+0x24>
  	return;

  periphDeinit(DeinitFull);
 80066de:	2101      	movs	r1, #1
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f924 	bl	800692e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
  QAD_UARTMgr::deregisterUART(m_eUART);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	785b      	ldrb	r3, [r3, #1]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff ff92 	bl	8006614 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 80066f0:	e000      	b.n	80066f4 <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 80066f2:	bf00      	nop
}
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	331c      	adds	r3, #28
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006728:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Active;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006754:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Inactive;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	f042 0220 	orr.w	r2, r2, #32
 8006780:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Active;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	f022 0220 	bic.w	r2, r2, #32
 80067ac:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Inactive;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART transmit data register (TDR)
void QAD_UART::dataTX(uint8_t uData) {
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	70fb      	strb	r3, [r7, #3]
  m_sHandle.Instance->TDR = uData;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	78fa      	ldrb	r2, [r7, #3]
 80067d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART receive data register (RDR)
uint8_t QAD_UART::dataRX(void) {
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  return m_sHandle.Instance->RDR;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	b2db      	uxtb	r3, r3
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 80067fe:	b580      	push	{r7, lr}
 8006800:	b088      	sub	sp, #32
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8006806:	f107 030c 	add.w	r3, r7, #12
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	605a      	str	r2, [r3, #4]
 8006810:	609a      	str	r2, [r3, #8]
 8006812:	60da      	str	r2, [r3, #12]
 8006814:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	8a1b      	ldrh	r3, [r3, #16]
 800681a:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 800681c:	2302      	movs	r3, #2
 800681e:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8006824:	2303      	movs	r3, #3
 8006826:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	7c9b      	ldrb	r3, [r3, #18]
 800682c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f107 020c 	add.w	r2, r7, #12
 8006836:	4611      	mov	r1, r2
 8006838:	4618      	mov	r0, r3
 800683a:	f7fc fa99 	bl	8002d70 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	8b1b      	ldrh	r3, [r3, #24]
 8006842:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 8006844:	2302      	movs	r3, #2
 8006846:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8006848:	2301      	movs	r3, #1
 800684a:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 800684c:	2303      	movs	r3, #3
 800684e:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	7e9b      	ldrb	r3, [r3, #26]
 8006854:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	f107 020c 	add.w	r2, r7, #12
 800685e:	4611      	mov	r1, r2
 8006860:	4618      	mov	r0, r3
 8006862:	f7fc fa85 	bl	8002d70 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	785b      	ldrb	r3, [r3, #1]
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff fee3 	bl	8006636 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	785b      	ldrb	r3, [r3, #1]
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff fe88 	bl	800658a <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 800687a:	4602      	mov	r2, r0
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	220c      	movs	r2, #12
 800689e:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	331c      	adds	r3, #28
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe fa1e 	bl	8004cf2 <HAL_UART_Init>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	bf14      	ite	ne
 80068bc:	2301      	movne	r3, #1
 80068be:	2300      	moveq	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 80068c6:	2100      	movs	r1, #0
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f830 	bl	800692e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e029      	b.n	8006926 <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	f042 0201 	orr.w	r2, r2, #1
 80068e0:	601a      	str	r2, [r3, #0]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	785b      	ldrb	r3, [r3, #1]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff fe68 	bl	80065bc <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 80068ec:	4603      	mov	r3, r0
 80068ee:	4618      	mov	r0, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	7a1b      	ldrb	r3, [r3, #8]
 80068f4:	2200      	movs	r2, #0
 80068f6:	4619      	mov	r1, r3
 80068f8:	f7fb fcd9 	bl	80022ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	785b      	ldrb	r3, [r3, #1]
 8006900:	4618      	mov	r0, r3
 8006902:	f7ff fe5b 	bl	80065bc <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8006906:	4603      	mov	r3, r0
 8006908:	4618      	mov	r0, r3
 800690a:	f7fb fcec 	bl	80022e6 <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  //Return
  return QA_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3720      	adds	r7, #32
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//QAD_UART Private Initialization Method
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	460b      	mov	r3, r1
 8006938:	70fb      	strb	r3, [r7, #3]

	//Disable IRQs
	//Check if full deinitialization is required
	if (eDeinitMode) {
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01b      	beq.n	8006978 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff fefc 	bl	800673e <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff ff25 	bl	8006796 <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff fe33 	bl	80065bc <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8006956:	4603      	mov	r3, r0
 8006958:	4618      	mov	r0, r3
 800695a:	f7fb fcd2 	bl	8002302 <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	f022 0201 	bic.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	331c      	adds	r3, #28
 8006972:	4618      	mov	r0, r3
 8006974:	f7fe fa0b 	bl	8004d8e <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	785b      	ldrb	r3, [r3, #1]
 800697c:	4618      	mov	r0, r3
 800697e:	f7ff fe6b 	bl	8006658 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	695a      	ldr	r2, [r3, #20]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	8b1b      	ldrh	r3, [r3, #24]
 800698a:	4619      	mov	r1, r3
 800698c:	4610      	mov	r0, r2
 800698e:	f7fc fb9b 	bl	80030c8 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8a1b      	ldrh	r3, [r3, #16]
 800699a:	4619      	mov	r1, r3
 800699c:	4610      	mov	r0, r2
 800699e:	f7fc fb93 	bl	80030c8 <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	701a      	strb	r2, [r3, #0]
}
 80069b8:	bf00      	nop
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method is a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 80069c8:	2300      	movs	r3, #0
 80069ca:	73fb      	strb	r3, [r7, #15]
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	2b07      	cmp	r3, #7
 80069d0:	d80d      	bhi.n	80069ee <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 80069d2:	7bfa      	ldrb	r2, [r7, #15]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	4613      	mov	r3, r2
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	3301      	adds	r3, #1
 80069e2:	2200      	movs	r2, #0
 80069e4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	3301      	adds	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
 80069ec:	e7ee      	b.n	80069cc <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART3].eUART = QAD_UART3;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2202      	movs	r2, #2
 80069fe:	761a      	strb	r2, [r3, #24]
	m_sUARTs[QAD_UART4].eUART = QAD_UART4;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2203      	movs	r2, #3
 8006a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sUARTs[QAD_UART5].eUART = QAD_UART5;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2205      	movs	r2, #5
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	m_sUARTs[QAD_UART7].eUART = QAD_UART7;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2206      	movs	r2, #6
 8006a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	m_sUARTs[QAD_UART8].eUART = QAD_UART8;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2207      	movs	r2, #7
 8006a24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a1e      	ldr	r2, [pc, #120]	; (8006aa4 <_ZN11QAD_UARTMgrC1Ev+0xe4>)
 8006a2c:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a1d      	ldr	r2, [pc, #116]	; (8006aa8 <_ZN11QAD_UARTMgrC1Ev+0xe8>)
 8006a32:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART3].pInstance = USART3;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a1d      	ldr	r2, [pc, #116]	; (8006aac <_ZN11QAD_UARTMgrC1Ev+0xec>)
 8006a38:	61da      	str	r2, [r3, #28]
	m_sUARTs[QAD_UART4].pInstance = UART4;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a1c      	ldr	r2, [pc, #112]	; (8006ab0 <_ZN11QAD_UARTMgrC1Ev+0xf0>)
 8006a3e:	629a      	str	r2, [r3, #40]	; 0x28
	m_sUARTs[QAD_UART5].pInstance = UART5;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a1c      	ldr	r2, [pc, #112]	; (8006ab4 <_ZN11QAD_UARTMgrC1Ev+0xf4>)
 8006a44:	635a      	str	r2, [r3, #52]	; 0x34
	m_sUARTs[QAD_UART6].pInstance = USART6;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a1b      	ldr	r2, [pc, #108]	; (8006ab8 <_ZN11QAD_UARTMgrC1Ev+0xf8>)
 8006a4a:	641a      	str	r2, [r3, #64]	; 0x40
	m_sUARTs[QAD_UART7].pInstance = UART7;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a1b      	ldr	r2, [pc, #108]	; (8006abc <_ZN11QAD_UARTMgrC1Ev+0xfc>)
 8006a50:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sUARTs[QAD_UART8].pInstance = UART8;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a1a      	ldr	r2, [pc, #104]	; (8006ac0 <_ZN11QAD_UARTMgrC1Ev+0x100>)
 8006a56:	659a      	str	r2, [r3, #88]	; 0x58

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2225      	movs	r2, #37	; 0x25
 8006a5c:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2226      	movs	r2, #38	; 0x26
 8006a62:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART3].eIRQ = USART3_IRQn;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2227      	movs	r2, #39	; 0x27
 8006a68:	f883 2020 	strb.w	r2, [r3, #32]
	m_sUARTs[QAD_UART4].eIRQ = UART4_IRQn;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2234      	movs	r2, #52	; 0x34
 8006a70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	m_sUARTs[QAD_UART5].eIRQ = UART5_IRQn;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2235      	movs	r2, #53	; 0x35
 8006a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2247      	movs	r2, #71	; 0x47
 8006a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sUARTs[QAD_UART7].eIRQ = UART7_IRQn;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2252      	movs	r2, #82	; 0x52
 8006a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	m_sUARTs[QAD_UART8].eIRQ = UART8_IRQn;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2253      	movs	r2, #83	; 0x53
 8006a90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

}
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40011000 	.word	0x40011000
 8006aa8:	40004400 	.word	0x40004400
 8006aac:	40004800 	.word	0x40004800
 8006ab0:	40004c00 	.word	0x40004c00
 8006ab4:	40005000 	.word	0x40005000
 8006ab8:	40011400 	.word	0x40011400
 8006abc:	40007800 	.word	0x40007800
 8006ac0:	40007c00 	.word	0x40007c00

08006ac4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	2b07      	cmp	r3, #7
 8006ad4:	d901      	bls.n	8006ada <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e017      	b.n	8006b0a <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 8006ada:	78fa      	ldrb	r2, [r7, #3]
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	3301      	adds	r3, #1
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 8006af0:	2302      	movs	r3, #2
 8006af2:	e00a      	b.n	8006b0a <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 8006af4:	78fa      	ldrb	r2, [r7, #3]
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	4613      	mov	r3, r2
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	4413      	add	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	440b      	add	r3, r1
 8006b02:	3301      	adds	r3, #1
 8006b04:	2201      	movs	r2, #1
 8006b06:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	2b07      	cmp	r3, #7
 8006b26:	d80a      	bhi.n	8006b3e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8006b28:	78fa      	ldrb	r2, [r7, #3]
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	440b      	add	r3, r1
 8006b36:	3301      	adds	r3, #1
 8006b38:	2200      	movs	r2, #0
 8006b3a:	701a      	strb	r2, [r3, #0]
 8006b3c:	e000      	b.n	8006b40 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 8006b3e:	bf00      	nop
}
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 8006b4c:	b480      	push	{r7}
 8006b4e:	b08b      	sub	sp, #44	; 0x2c
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	f200 80df 	bhi.w	8006d1e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
 8006b60:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1c>)
 8006b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b66:	bf00      	nop
 8006b68:	08006b8d 	.word	0x08006b8d
 8006b6c:	08006bbf 	.word	0x08006bbf
 8006b70:	08006bf1 	.word	0x08006bf1
 8006b74:	08006c23 	.word	0x08006c23
 8006b78:	08006c55 	.word	0x08006c55
 8006b7c:	08006c87 	.word	0x08006c87
 8006b80:	08006cb9 	.word	0x08006cb9
 8006b84:	08006ceb 	.word	0x08006ceb
 8006b88:	08006d1d 	.word	0x08006d1d
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 8006b8c:	4b67      	ldr	r3, [pc, #412]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b90:	4a66      	ldr	r2, [pc, #408]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b92:	f043 0310 	orr.w	r3, r3, #16
 8006b96:	6453      	str	r3, [r2, #68]	; 0x44
 8006b98:	4b64      	ldr	r3, [pc, #400]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_USART1_FORCE_RESET();
 8006ba4:	4b61      	ldr	r3, [pc, #388]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	4a60      	ldr	r2, [pc, #384]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006baa:	f043 0310 	orr.w	r3, r3, #16
 8006bae:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 8006bb0:	4b5e      	ldr	r3, [pc, #376]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	4a5d      	ldr	r2, [pc, #372]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bb6:	f023 0310 	bic.w	r3, r3, #16
 8006bba:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8006bbc:	e0af      	b.n	8006d1e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 8006bbe:	4b5b      	ldr	r3, [pc, #364]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	4a5a      	ldr	r2, [pc, #360]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8006bca:	4b58      	ldr	r3, [pc, #352]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd2:	623b      	str	r3, [r7, #32]
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_USART2_FORCE_RESET();
 8006bd6:	4b55      	ldr	r3, [pc, #340]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	4a54      	ldr	r2, [pc, #336]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006be0:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 8006be2:	4b52      	ldr	r3, [pc, #328]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	4a51      	ldr	r2, [pc, #324]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006be8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bec:	6213      	str	r3, [r2, #32]
      break;
 8006bee:	e096      	b.n	8006d1e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_ENABLE();
 8006bf0:	4b4e      	ldr	r3, [pc, #312]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	4a4d      	ldr	r2, [pc, #308]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8006bfc:	4b4b      	ldr	r3, [pc, #300]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	69fb      	ldr	r3, [r7, #28]
      __HAL_RCC_USART3_FORCE_RESET();
 8006c08:	4b48      	ldr	r3, [pc, #288]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	4a47      	ldr	r2, [pc, #284]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c12:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART3_RELEASE_RESET();
 8006c14:	4b45      	ldr	r3, [pc, #276]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	4a44      	ldr	r2, [pc, #272]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c1e:	6213      	str	r3, [r2, #32]
      break;
 8006c20:	e07d      	b.n	8006d1e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_ENABLE();
 8006c22:	4b42      	ldr	r3, [pc, #264]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	4a41      	ldr	r2, [pc, #260]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c2e:	4b3f      	ldr	r3, [pc, #252]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	69bb      	ldr	r3, [r7, #24]
      __HAL_RCC_UART4_FORCE_RESET();
 8006c3a:	4b3c      	ldr	r3, [pc, #240]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	4a3b      	ldr	r2, [pc, #236]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c44:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART4_RELEASE_RESET();
 8006c46:	4b39      	ldr	r3, [pc, #228]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	4a38      	ldr	r2, [pc, #224]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c4c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006c50:	6213      	str	r3, [r2, #32]
      break;
 8006c52:	e064      	b.n	8006d1e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_ENABLE();
 8006c54:	4b35      	ldr	r3, [pc, #212]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	4a34      	ldr	r2, [pc, #208]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c5e:	6413      	str	r3, [r2, #64]	; 0x40
 8006c60:	4b32      	ldr	r3, [pc, #200]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_UART5_FORCE_RESET();
 8006c6c:	4b2f      	ldr	r3, [pc, #188]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	4a2e      	ldr	r2, [pc, #184]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c76:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART5_RELEASE_RESET();
 8006c78:	4b2c      	ldr	r3, [pc, #176]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	4a2b      	ldr	r2, [pc, #172]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c7e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c82:	6213      	str	r3, [r2, #32]
      break;
 8006c84:	e04b      	b.n	8006d1e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 8006c86:	4b29      	ldr	r3, [pc, #164]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8a:	4a28      	ldr	r2, [pc, #160]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c8c:	f043 0320 	orr.w	r3, r3, #32
 8006c90:	6453      	str	r3, [r2, #68]	; 0x44
 8006c92:	4b26      	ldr	r3, [pc, #152]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART6_FORCE_RESET();
 8006c9e:	4b23      	ldr	r3, [pc, #140]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	4a22      	ldr	r2, [pc, #136]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ca4:	f043 0320 	orr.w	r3, r3, #32
 8006ca8:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 8006caa:	4b20      	ldr	r3, [pc, #128]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	4a1f      	ldr	r2, [pc, #124]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cb0:	f023 0320 	bic.w	r3, r3, #32
 8006cb4:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8006cb6:	e032      	b.n	8006d1e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_ENABLE();
 8006cb8:	4b1c      	ldr	r3, [pc, #112]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	4a1b      	ldr	r2, [pc, #108]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8006cc4:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_UART7_FORCE_RESET();
 8006cd0:	4b16      	ldr	r3, [pc, #88]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	4a15      	ldr	r2, [pc, #84]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cda:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART7_RELEASE_RESET();
 8006cdc:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	4a12      	ldr	r2, [pc, #72]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ce2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ce6:	6213      	str	r3, [r2, #32]
      break;
 8006ce8:	e019      	b.n	8006d1e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_ENABLE();
 8006cea:	4b10      	ldr	r3, [pc, #64]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	4a0f      	ldr	r2, [pc, #60]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cfe:	60bb      	str	r3, [r7, #8]
 8006d00:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_UART8_FORCE_RESET();
 8006d02:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	4a09      	ldr	r2, [pc, #36]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d0c:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART8_RELEASE_RESET();
 8006d0e:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	4a06      	ldr	r2, [pc, #24]	; (8006d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d18:	6213      	str	r3, [r2, #32]
      break;
 8006d1a:	e000      	b.n	8006d1e <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UARTNone):
    	break;
 8006d1c:	bf00      	nop
  }
}
 8006d1e:	bf00      	nop
 8006d20:	372c      	adds	r7, #44	; 0x2c
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40023800 	.word	0x40023800

08006d30 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8006d3c:	78fb      	ldrb	r3, [r7, #3]
 8006d3e:	2b08      	cmp	r3, #8
 8006d40:	d84d      	bhi.n	8006dde <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
 8006d42:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08006d7b 	.word	0x08006d7b
 8006d50:	08006d89 	.word	0x08006d89
 8006d54:	08006d97 	.word	0x08006d97
 8006d58:	08006da5 	.word	0x08006da5
 8006d5c:	08006db3 	.word	0x08006db3
 8006d60:	08006dc1 	.word	0x08006dc1
 8006d64:	08006dcf 	.word	0x08006dcf
 8006d68:	08006ddd 	.word	0x08006ddd
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 8006d6c:	4b1f      	ldr	r3, [pc, #124]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d70:	4a1e      	ldr	r2, [pc, #120]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006d72:	f023 0310 	bic.w	r3, r3, #16
 8006d76:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8006d78:	e031      	b.n	8006dde <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 8006d7a:	4b1c      	ldr	r3, [pc, #112]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	4a1b      	ldr	r2, [pc, #108]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006d80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d84:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006d86:	e02a      	b.n	8006dde <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_DISABLE();
 8006d88:	4b18      	ldr	r3, [pc, #96]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	4a17      	ldr	r2, [pc, #92]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d92:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006d94:	e023      	b.n	8006dde <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_DISABLE();
 8006d96:	4b15      	ldr	r3, [pc, #84]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	4a14      	ldr	r2, [pc, #80]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006d9c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006da0:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006da2:	e01c      	b.n	8006dde <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_DISABLE();
 8006da4:	4b11      	ldr	r3, [pc, #68]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	4a10      	ldr	r2, [pc, #64]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006daa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006dae:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006db0:	e015      	b.n	8006dde <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 8006db2:	4b0e      	ldr	r3, [pc, #56]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db6:	4a0d      	ldr	r2, [pc, #52]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006db8:	f023 0320 	bic.w	r3, r3, #32
 8006dbc:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8006dbe:	e00e      	b.n	8006dde <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_DISABLE();
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	4a09      	ldr	r2, [pc, #36]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006dc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dca:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006dcc:	e007      	b.n	8006dde <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_DISABLE();
 8006dce:	4b07      	ldr	r3, [pc, #28]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	4a06      	ldr	r2, [pc, #24]	; (8006dec <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dd8:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006dda:	e000      	b.n	8006dde <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UARTNone):
    	break;
 8006ddc:	bf00      	nop
  }
}
 8006dde:	bf00      	nop
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	40023800 	.word	0x40023800

08006df0 <_ZN18QAT_Pixel_ARGB4444aSERKt>:
		m_uPxl = other.pxl();
		return *this;
	}

	//Assignment operator to accept a 16bit pixel value
	QAT_Pixel_ARGB4444& operator=(const uint16_t& other) {
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
		m_uPxl = other;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	881a      	ldrh	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	801a      	strh	r2, [r3, #0]
		return *this;
 8006e02:	687b      	ldr	r3, [r7, #4]
	}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <_ZN18QAT_Pixel_ARGB44443pxlEt>:
	uint16_t pxl(void) const {
		return m_uPxl;
	}

	//Sets the current 16bit pixel value
	void pxl(uint16_t pxl) {
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	807b      	strh	r3, [r7, #2]
		m_uPxl = pxl;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	887a      	ldrh	r2, [r7, #2]
 8006e20:	801a      	strh	r2, [r3, #0]
	}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <_ZN8QAD_LTDC4initEv>:
	static QA_Result init(void) {
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	af00      	add	r7, sp, #0
		return get().imp_init();
 8006e32:	f7fe ff3d 	bl	8005cb0 <_ZN8QAD_LTDC3getEv>
 8006e36:	4603      	mov	r3, r0
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fe ff73 	bl	8005d24 <_ZN8QAD_LTDC8imp_initEv>
 8006e3e:	4603      	mov	r3, r0
	}
 8006e40:	4618      	mov	r0, r3
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <_ZN8QAD_LTDC17flipLayer0BuffersEv>:
	//---------------------
	//Layer Control Methods

	//Used to flip the front and back buffer for layer 0
	//To be used at the end of rendering visual elements to layer 0 in order for them to become visible on the LCD display
	static void flipLayer0Buffers(void) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
		get().imp_flipLayer0Buffers();
 8006e48:	f7fe ff32 	bl	8005cb0 <_ZN8QAD_LTDC3getEv>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7ff fa7c 	bl	800634c <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>
	}
 8006e54:	bf00      	nop
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <_ZN8QAD_LTDC17flipLayer1BuffersEv>:

	//Used to flip the front and back buffer for layer 1
	//To be used at the end of rendering visual elements to layer 1 in order for them to become visible on the LCD display
	static void flipLayer1Buffers(void) {
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
		get().imp_flipLayer1Buffers();
 8006e5c:	f7fe ff28 	bl	8005cb0 <_ZN8QAD_LTDC3getEv>
 8006e60:	4603      	mov	r3, r0
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7ff fab4 	bl	80063d0 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>
	}
 8006e68:	bf00      	nop
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <_ZN8QAD_LTDC19getLayer0BackBufferEv>:
	static void* getLayer0BackBufferPtr(void) {
		return get().imp_getLayer0BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 0
	static QAD_LTDC_Buffer* getLayer0BackBuffer(void) {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
		return get().imp_getLayer0BackBuffer();
 8006e70:	f7fe ff1e 	bl	8005cb0 <_ZN8QAD_LTDC3getEv>
 8006e74:	4603      	mov	r3, r0
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff faec 	bl	8006454 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>
 8006e7c:	4603      	mov	r3, r0
	}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <_ZN8QAD_LTDC19getLayer1BackBufferEv>:
	static void* getLayer1BackBufferPtr(void) {
		return get().imp_getLayer1BackBufferPtr();
	}

	//Returns a pointer to a QAD_LTDC_Buffer structure for the back/offscreen buffer to be rendered to for layer 1
	static QAD_LTDC_Buffer* getLayer1BackBuffer(void) {
 8006e82:	b580      	push	{r7, lr}
 8006e84:	af00      	add	r7, sp, #0
		return get().imp_getLayer1BackBuffer();
 8006e86:	f7fe ff13 	bl	8005cb0 <_ZN8QAD_LTDC3getEv>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff fb07 	bl	80064a0 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>
 8006e92:	4603      	mov	r3, r0
	}
 8006e94:	4618      	mov	r0, r3
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <_ZN7QAS_LCD8imp_initEv>:
//QAS_LCD Initialization Method
//
//To be called from static method init()
//To be used to initialize the LTDC peripheral and setup the Font Manager class
//Returns QA_OK if initialization successful, or QA_Fail if initialization fails
QA_Result QAS_LCD::imp_init(void) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af04      	add	r7, sp, #16
 8006e9e:	6078      	str	r0, [r7, #4]

	//Return if system is already initialized
	if (m_eInitState) {
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <_ZN7QAS_LCD8imp_initEv+0x14>
  	return QA_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e044      	b.n	8006f36 <_ZN7QAS_LCD8imp_initEv+0x9e>
  }

	//Initialize LTDC driver class, returning QA_Fail if LTDC doesn't initialize successfully
	if (QAD_LTDC::init())
 8006eac:	f7ff ffbf 	bl	8006e2e <_ZN8QAD_LTDC4initEv>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bf14      	ite	ne
 8006eb6:	2301      	movne	r3, #1
 8006eb8:	2300      	moveq	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <_ZN7QAS_LCD8imp_initEv+0x2c>
		return QA_Fail;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e038      	b.n	8006f36 <_ZN7QAS_LCD8imp_initEv+0x9e>


	//Setup font manager
	m_cFontMgr.clear();  //Clear font manager
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	330c      	adds	r3, #12
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 fa2e 	bl	800732a <_ZN15QAS_LCD_FontMgr5clearEv>

	  //Add SegoeUI 12pt font (defined in QAS_LCD_Fonts_SegoeUI12pt.hpp)
	m_cFontMgr.add("SegoeUI12pt",
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f103 000c 	add.w	r0, r3, #12
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	9302      	str	r3, [sp, #8]
 8006ed8:	2303      	movs	r3, #3
 8006eda:	9301      	str	r3, [sp, #4]
 8006edc:	2311      	movs	r3, #17
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	4b17      	ldr	r3, [pc, #92]	; (8006f40 <_ZN7QAS_LCD8imp_initEv+0xa8>)
 8006ee2:	4a18      	ldr	r2, [pc, #96]	; (8006f44 <_ZN7QAS_LCD8imp_initEv+0xac>)
 8006ee4:	4918      	ldr	r1, [pc, #96]	; (8006f48 <_ZN7QAS_LCD8imp_initEv+0xb0>)
 8006ee6:	f000 f9f9 	bl	80072dc <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI12pt_Height,
								 QAS_LCD_Fonts_SegoeUI12pt_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI12pt_CharGap);

	  //Add SegoeUI 20pt Semi-bold font (defined in QAS_LCD_Fonts_SegoeUI20ptSB.hpp)
	m_cFontMgr.add("SegoeUI20ptSB",
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f103 000c 	add.w	r0, r3, #12
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	9302      	str	r3, [sp, #8]
 8006ef4:	2305      	movs	r3, #5
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	231b      	movs	r3, #27
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	4b13      	ldr	r3, [pc, #76]	; (8006f4c <_ZN7QAS_LCD8imp_initEv+0xb4>)
 8006efe:	4a14      	ldr	r2, [pc, #80]	; (8006f50 <_ZN7QAS_LCD8imp_initEv+0xb8>)
 8006f00:	4914      	ldr	r1, [pc, #80]	; (8006f54 <_ZN7QAS_LCD8imp_initEv+0xbc>)
 8006f02:	f000 f9eb 	bl	80072dc <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI20ptSB_Height,
								 QAS_LCD_Fonts_SegoeUI20ptSB_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI20ptSB_CharGap);

	  //Add Showcard Gothic 18pt font (defined in QAS_LCD_Fonts_ShowcardGothic18pt.hpp)
	m_cFontMgr.add("ShowcardGothic18pt",
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f103 000c 	add.w	r0, r3, #12
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	9302      	str	r3, [sp, #8]
 8006f10:	2302      	movs	r3, #2
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	231a      	movs	r3, #26
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	4b0f      	ldr	r3, [pc, #60]	; (8006f58 <_ZN7QAS_LCD8imp_initEv+0xc0>)
 8006f1a:	4a10      	ldr	r2, [pc, #64]	; (8006f5c <_ZN7QAS_LCD8imp_initEv+0xc4>)
 8006f1c:	4910      	ldr	r1, [pc, #64]	; (8006f60 <_ZN7QAS_LCD8imp_initEv+0xc8>)
 8006f1e:	f000 f9dd 	bl	80072dc <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_ShowcardGothic18pt_SpaceWidth,
								 QAS_LCD_Fonts_ShowcardGothic18pt_CharGap);


	//Set System State
	m_eInitState = QA_Initialized; //Set system as now being initialized
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	701a      	strb	r2, [r3, #0]

	//Set initial data
	m_pDrawBuffer = NULL;   //Set current draw buffer to NULL
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	605a      	str	r2, [r3, #4]
	m_uDrawColor  = 0x0000; //Set current draw color to transparent black
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	811a      	strh	r2, [r3, #8]

	//Return
	return QA_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	08008e98 	.word	0x08008e98
 8006f44:	08008d20 	.word	0x08008d20
 8006f48:	08008a78 	.word	0x08008a78
 8006f4c:	08009794 	.word	0x08009794
 8006f50:	0800961c 	.word	0x0800961c
 8006f54:	08008a84 	.word	0x08008a84
 8006f58:	0800ac90 	.word	0x0800ac90
 8006f5c:	0800ab18 	.word	0x0800ab18
 8006f60:	08008a94 	.word	0x08008a94

08006f64 <_ZN7QAS_LCD14imp_flipLayer0Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer0()
//Used to flip the front and back buffer for layer 0
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer0(void) {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer0Buffers();
 8006f6c:	f7ff ff6a 	bl	8006e44 <_ZN8QAD_LTDC17flipLayer0BuffersEv>
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <_ZN7QAS_LCD14imp_flipLayer1Ev>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method flipLayer1()
//Used to flip the front and back buffer for layer 1
//See QAD_LTDC.hpp for more details
void QAS_LCD::imp_flipLayer1(void) {
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer1Buffers();
 8006f80:	f7ff ff6a 	bl	8006e58 <_ZN8QAD_LTDC17flipLayer1BuffersEv>
}
 8006f84:	bf00      	nop
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>:
//QAS_LCD Rendering Setup Method
//
//To be called from static method setDrawBuffer()
//Used to set the current draw buffer to either layer 0 or layer 1 back-buffer
//eLayer - Sets whether the current draw buffer is layer 0 or layer1. A member of QAD_LTDC_LayerIdx as defined in QAD_LTDC.hpp)
void QAS_LCD::imp_setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]

	//Retrieve required Back Buffer pointer based on selected layer and store to m_pDrawBuffer
	switch (eLayer) {
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x18>
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d006      	beq.n	8006fb0 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x24>
 8006fa2:	e00b      	b.n	8006fbc <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer0):
	  	m_pDrawBuffer = QAD_LTDC::getLayer0BackBuffer();
 8006fa4:	f7ff ff62 	bl	8006e6c <_ZN8QAD_LTDC19getLayer0BackBufferEv>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	605a      	str	r2, [r3, #4]
	  	break;
 8006fae:	e005      	b.n	8006fbc <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (QAD_LTDC_Layer1):
	  	m_pDrawBuffer = QAD_LTDC::getLayer1BackBuffer();
 8006fb0:	f7ff ff67 	bl	8006e82 <_ZN8QAD_LTDC19getLayer1BackBufferEv>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	605a      	str	r2, [r3, #4]
	  	break;
 8006fba:	bf00      	nop
	}

	//Set currently selected draw buffer to Font Manager as well, to be used for text rendering methods
	m_cFontMgr.setDrawBuffer(m_pDrawBuffer);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f103 020c 	add.w	r2, r3, #12
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4610      	mov	r0, r2
 8006fca:	f000 faef 	bl	80075ac <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>
}
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <_ZN7QAS_LCD16imp_setDrawColorEt>:
//QAS_LCD::imp_setDrawColor
//QAS_LCD Rendering Setup Method
//
//To be called from either of the two static setDrawColor() methods
//Sets the current color to be used for rendering methods
void QAS_LCD::imp_setDrawColor(uint16_t uColor) {
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	807b      	strh	r3, [r7, #2]

	//Store new draw color
	m_uDrawColor = uColor;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	887a      	ldrh	r2, [r7, #2]
 8006fe6:	811a      	strh	r2, [r3, #8]

	//Set currently selected draw color to Font Manager as well, to be used for text rendering methods
  m_cFontMgr.setDrawColor(m_uDrawColor);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f103 020c 	add.w	r2, r3, #12
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	891b      	ldrh	r3, [r3, #8]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	f000 fae7 	bl	80075c8 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <_ZN7QAS_LCD15imp_clearBufferEv>:
//QAS_LCD::imp_clearBuffer
//QAS_LCD Rendering Method
//
//To be called from static clearBuffer() method
//Used to clear the currently selected buffer to the currently selected draw color
void QAS_LCD::imp_clearBuffer(void) {
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4a0b      	ldr	r2, [pc, #44]	; (8007040 <_ZN7QAS_LCD15imp_clearBufferEv+0x3c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d80e      	bhi.n	8007036 <_ZN7QAS_LCD15imp_clearBufferEv+0x32>
  	m_pDrawBuffer->pixel[i] = m_uDrawColor;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	441a      	add	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3308      	adds	r3, #8
 8007026:	4619      	mov	r1, r3
 8007028:	4610      	mov	r0, r2
 800702a:	f7ff fee1 	bl	8006df0 <_ZN18QAT_Pixel_ARGB4444aSERKt>
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3301      	adds	r3, #1
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	e7ec      	b.n	8007010 <_ZN7QAS_LCD15imp_clearBufferEv+0xc>
}
 8007036:	bf00      	nop
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	0005dbff 	.word	0x0005dbff

08007044 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_>:
//
//To be called by static drawRect() method
//Used to draw a non-filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corners for the rectangle
void QAS_LCD::imp_drawRect(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 8007044:	b580      	push	{r7, lr}
 8007046:	b08c      	sub	sp, #48	; 0x30
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.y) {
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	881a      	ldrh	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	885b      	ldrh	r3, [r3, #2]
 8007058:	429a      	cmp	r2, r3
 800705a:	d206      	bcs.n	800706a <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
 8007068:	e005      	b.n	8007076 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.y;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	885b      	ldrh	r3, [r3, #2]
 800706e:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.y;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	885b      	ldrh	r3, [r3, #2]
 8007074:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	885a      	ldrh	r2, [r3, #2]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	885b      	ldrh	r3, [r3, #2]
 800707e:	429a      	cmp	r2, r3
 8007080:	d206      	bcs.n	8007090 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	885b      	ldrh	r3, [r3, #2]
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	885b      	ldrh	r3, [r3, #2]
 800708c:	623b      	str	r3, [r7, #32]
 800708e:	e005      	b.n	800709c <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	885b      	ldrh	r3, [r3, #2]
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	885b      	ldrh	r3, [r3, #2]
 800709a:	623b      	str	r3, [r7, #32]
  }

  //Top & Bottom
  uint32_t yt = ys*QAD_LTDC_WIDTH;
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	f44f 7248 	mov.w	r2, #800	; 0x320
 80070a2:	fb02 f303 	mul.w	r3, r2, r3
 80070a6:	617b      	str	r3, [r7, #20]
  uint32_t yb = ye*QAD_LTDC_WIDTH;
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80070ae:	fb02 f303 	mul.w	r3, r2, r3
 80070b2:	613b      	str	r3, [r7, #16]
  for (uint32_t x=xs; x<(xe+1); x++) {
 80070b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b6:	61fb      	str	r3, [r7, #28]
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	3301      	adds	r3, #1
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d21d      	bcs.n	80070fe <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xba>
    m_pDrawBuffer->pixel[x+yt].pxl(m_uDrawColor);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	69f9      	ldr	r1, [r7, #28]
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	440b      	add	r3, r1
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	441a      	add	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	891b      	ldrh	r3, [r3, #8]
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f7ff fe9a 	bl	8006e10 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[x+yb].pxl(m_uDrawColor);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	69f9      	ldr	r1, [r7, #28]
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	440b      	add	r3, r1
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	441a      	add	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	891b      	ldrh	r3, [r3, #8]
 80070ee:	4619      	mov	r1, r3
 80070f0:	4610      	mov	r0, r2
 80070f2:	f7ff fe8d 	bl	8006e10 <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t x=xs; x<(xe+1); x++) {
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	3301      	adds	r3, #1
 80070fa:	61fb      	str	r3, [r7, #28]
 80070fc:	e7dc      	b.n	80070b8 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x74>
  }

  //Left & Right
  for (uint32_t y=(ys+1); y<ye; y++) {
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	3301      	adds	r3, #1
 8007102:	61bb      	str	r3, [r7, #24]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	429a      	cmp	r2, r3
 800710a:	d225      	bcs.n	8007158 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0x114>
    m_pDrawBuffer->pixel[xs+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007116:	fb01 f103 	mul.w	r1, r1, r3
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	440b      	add	r3, r1
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	441a      	add	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	891b      	ldrh	r3, [r3, #8]
 8007126:	4619      	mov	r1, r3
 8007128:	4610      	mov	r0, r2
 800712a:	f7ff fe71 	bl	8006e10 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    m_pDrawBuffer->pixel[xe+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007138:	fb01 f103 	mul.w	r1, r1, r3
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	440b      	add	r3, r1
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	441a      	add	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	891b      	ldrh	r3, [r3, #8]
 8007148:	4619      	mov	r1, r3
 800714a:	4610      	mov	r0, r2
 800714c:	f7ff fe60 	bl	8006e10 <_ZN18QAT_Pixel_ARGB44443pxlEt>
  for (uint32_t y=(ys+1); y<ye; y++) {
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	3301      	adds	r3, #1
 8007154:	61bb      	str	r3, [r7, #24]
 8007156:	e7d5      	b.n	8007104 <_ZN7QAS_LCD12imp_drawRectER14QAT_Vector2_16S1_+0xc0>
  }
}
 8007158:	bf00      	nop
 800715a:	3730      	adds	r7, #48	; 0x30
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_>:
//
//To be called by static drawRectFill() method
//Used to draw a filled rectangle
//Rectangle will be drawn to the currently selected draw buffer using the currently selected draw color
//cStart & cEnd - QAT_Vector2_16 classes that define X and Y coordinates of the diagonally opposing corder for the rectangle
void QAS_LCD::imp_drawRectFill(QAT_Vector2_16& cStart, QAT_Vector2_16& cEnd) {
 8007160:	b580      	push	{r7, lr}
 8007162:	b08c      	sub	sp, #48	; 0x30
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	881a      	ldrh	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	429a      	cmp	r2, r3
 8007176:	d206      	bcs.n	8007186 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x26>
    xs = cStart.x;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28
 8007184:	e005      	b.n	8007192 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x32>
  } else {
    xs = cEnd.x;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.x;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	885a      	ldrh	r2, [r3, #2]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	885b      	ldrh	r3, [r3, #2]
 800719a:	429a      	cmp	r2, r3
 800719c:	d206      	bcs.n	80071ac <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x4c>
    ys = cStart.y;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	885b      	ldrh	r3, [r3, #2]
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	885b      	ldrh	r3, [r3, #2]
 80071a8:	623b      	str	r3, [r7, #32]
 80071aa:	e005      	b.n	80071b8 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x58>
  } else {
    ys = cEnd.y;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	885b      	ldrh	r3, [r3, #2]
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	885b      	ldrh	r3, [r3, #2]
 80071b6:	623b      	str	r3, [r7, #32]
  }

  uint32_t yofs;
  for (uint32_t y=ys; y<(ye+1); y++) {
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	61fb      	str	r3, [r7, #28]
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	3301      	adds	r3, #1
 80071c0:	69fa      	ldr	r2, [r7, #28]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d221      	bcs.n	800720a <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xaa>
    yofs = y*QAD_LTDC_WIDTH;
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80071cc:	fb02 f303 	mul.w	r3, r2, r3
 80071d0:	617b      	str	r3, [r7, #20]
    for (uint32_t x=xs; x<(xe+1); x++) {
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	3301      	adds	r3, #1
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d210      	bcs.n	8007202 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0xa2>
      m_pDrawBuffer->pixel[x+yofs].pxl(m_uDrawColor);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	69b9      	ldr	r1, [r7, #24]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	440b      	add	r3, r1
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	441a      	add	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	891b      	ldrh	r3, [r3, #8]
 80071f2:	4619      	mov	r1, r3
 80071f4:	4610      	mov	r0, r2
 80071f6:	f7ff fe0b 	bl	8006e10 <_ZN18QAT_Pixel_ARGB44443pxlEt>
    for (uint32_t x=xs; x<(xe+1); x++) {
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	3301      	adds	r3, #1
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	e7e9      	b.n	80071d6 <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x76>
  for (uint32_t y=ys; y<(ye+1); y++) {
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	3301      	adds	r3, #1
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	e7d8      	b.n	80071bc <_ZN7QAS_LCD16imp_drawRectFillER14QAT_Vector2_16S1_+0x5c>
    }
  }
}
 800720a:	bf00      	nop
 800720c:	3730      	adds	r7, #48	; 0x30
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>:
	QAS_LCD_Font(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t& uHeight, uint16_t& uSpaceWidth, uint16_t& uCharGap) :
 800722a:	b580      	push	{r7, lr}
 800722c:	b086      	sub	sp, #24
 800722e:	af00      	add	r7, sp, #0
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	607a      	str	r2, [r7, #4]
 8007236:	603b      	str	r3, [r7, #0]
		m_uCharGap(uCharGap) {
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	881a      	ldrh	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	871a      	strh	r2, [r3, #56]	; 0x38
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	881a      	ldrh	r2, [r3, #0]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	881a      	ldrh	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	879a      	strh	r2, [r3, #60]	; 0x3c
		m_pDesc = (QAS_LCD_FontDesc*)pDesc;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
		m_pData = (uint8_t*)pData;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	635a      	str	r2, [r3, #52]	; 0x34
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 800725c:	2300      	movs	r3, #0
 800725e:	75fb      	strb	r3, [r7, #23]
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	2b2f      	cmp	r3, #47	; 0x2f
 8007264:	d807      	bhi.n	8007276 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x4c>
			m_cName[i] = 0;
 8007266:	7dfb      	ldrb	r3, [r7, #23]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	2100      	movs	r1, #0
 800726c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	3301      	adds	r3, #1
 8007272:	75fb      	strb	r3, [r7, #23]
 8007274:	e7f4      	b.n	8007260 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x36>
		strcpy(m_cName, strName);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	f001 fb16 	bl	80088ac <strcpy>
	}
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <_ZN12QAS_LCD_FonteqEPKc>:
	bool operator==(const char* strName) {
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
		uint8_t uLen = strlen(strName);
 8007294:	6838      	ldr	r0, [r7, #0]
 8007296:	f7f8 ffcf 	bl	8000238 <strlen>
 800729a:	4603      	mov	r3, r0
 800729c:	73bb      	strb	r3, [r7, #14]
		uint8_t uIdxLen = (uLen < QAS_LCD_FONTNAME_LENGTH) ? uLen : QAS_LCD_FONTNAME_LENGTH;
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	2b30      	cmp	r3, #48	; 0x30
 80072a2:	bf28      	it	cs
 80072a4:	2330      	movcs	r3, #48	; 0x30
 80072a6:	737b      	strb	r3, [r7, #13]
		for (uint8_t i=0; i<uIdxLen; i++) {
 80072a8:	2300      	movs	r3, #0
 80072aa:	73fb      	strb	r3, [r7, #15]
 80072ac:	7bfa      	ldrb	r2, [r7, #15]
 80072ae:	7b7b      	ldrb	r3, [r7, #13]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d20e      	bcs.n	80072d2 <_ZN12QAS_LCD_FonteqEPKc+0x48>
			if (m_cName[i] != strName[i])
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	5cd2      	ldrb	r2, [r2, r3]
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	440b      	add	r3, r1
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d001      	beq.n	80072ca <_ZN12QAS_LCD_FonteqEPKc+0x40>
				return false;
 80072c6:	2300      	movs	r3, #0
 80072c8:	e004      	b.n	80072d4 <_ZN12QAS_LCD_FonteqEPKc+0x4a>
		for (uint8_t i=0; i<uIdxLen; i++) {
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	3301      	adds	r3, #1
 80072ce:	73fb      	strb	r3, [r7, #15]
 80072d0:	e7ec      	b.n	80072ac <_ZN12QAS_LCD_FonteqEPKc+0x22>
		return true;
 80072d2:	2301      	movs	r3, #1
	}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>:
//pDesc       - a pointer to an array of QAS_LCD_FontDesc structures for the font
//pData       - a pointer to an array of uint8_t values storing the bitmap data for the font
//uHeight     - the height in pixels of the font
//uSpaceWidth - the width in pixels of the space character of the font
//uCharGap    - the width in pixels of the gap between each character when rendering strings of characters
void QAS_LCD_FontMgr::add(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t uHeight, uint16_t uSpaceWidth, uint16_t uCharGap) {
 80072dc:	b590      	push	{r4, r7, lr}
 80072de:	b08b      	sub	sp, #44	; 0x2c
 80072e0:	af04      	add	r7, sp, #16
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
 80072e8:	603b      	str	r3, [r7, #0]

	//Create the QAS_LCD_Font class for the new font, providing the required details
	QAS_LCD_Font* cFont = new QAS_LCD_Font(strName, pDesc, pData, uHeight, uSpaceWidth, uCharGap);
 80072ea:	2040      	movs	r0, #64	; 0x40
 80072ec:	f001 f932 	bl	8008554 <_Znwj>
 80072f0:	4603      	mov	r3, r0
 80072f2:	461c      	mov	r4, r3
 80072f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072f8:	9302      	str	r3, [sp, #8]
 80072fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80072fe:	9301      	str	r3, [sp, #4]
 8007300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	4620      	mov	r0, r4
 800730e:	f7ff ff8c 	bl	800722a <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>
 8007312:	617c      	str	r4, [r7, #20]

	//Add the pointer to the font class to the m_vFonts vector
  m_vFonts.push_back(cFont);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f107 0214 	add.w	r2, r7, #20
 800731a:	4611      	mov	r1, r2
 800731c:	4618      	mov	r0, r3
 800731e:	f000 fa56 	bl	80077ce <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	bd90      	pop	{r4, r7, pc}

0800732a <_ZN15QAS_LCD_FontMgr5clearEv>:

//QAS_LCD_FontMgr::clear
//QAS_LCD_FontMgr Management Method
//
//Used to clear all fonts from the font manager
void QAS_LCD_FontMgr::clear(void) {
 800732a:	b580      	push	{r7, lr}
 800732c:	b082      	sub	sp, #8
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  m_vFonts.clear();
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4618      	mov	r0, r3
 8007336:	f7fa f8a0 	bl	800147a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <_ZN15QAS_LCD_FontMgr4findEPKc>:
//QAS_LCD_FontMgr Management Method
//
//Used to find if a font exists in the Font Manager
//strName - The name of the font to search for
//Returns -1 if a matching font is not found, or the index of the font if it is gound
int8_t QAS_LCD_FontMgr::find(const char* strName) {
 8007342:	b590      	push	{r4, r7, lr}
 8007344:	b085      	sub	sp, #20
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	6039      	str	r1, [r7, #0]
  int8_t iIdx = -1;
 800734c:	23ff      	movs	r3, #255	; 0xff
 800734e:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 8007350:	2300      	movs	r3, #0
 8007352:	73bb      	strb	r3, [r7, #14]
 8007354:	7bbc      	ldrb	r4, [r7, #14]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4618      	mov	r0, r3
 800735a:	f7fa f89c 	bl	8001496 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 800735e:	4603      	mov	r3, r0
 8007360:	429c      	cmp	r4, r3
 8007362:	bf34      	ite	cc
 8007364:	2301      	movcc	r3, #1
 8007366:	2300      	movcs	r3, #0
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d014      	beq.n	8007398 <_ZN15QAS_LCD_FontMgr4findEPKc+0x56>
  	if (*m_vFonts[i] == strName) {
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	7bba      	ldrb	r2, [r7, #14]
 8007372:	4611      	mov	r1, r2
 8007374:	4618      	mov	r0, r3
 8007376:	f7fa f89e 	bl	80014b6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 800737a:	4603      	mov	r3, r0
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff ff82 	bl	800728a <_ZN12QAS_LCD_FonteqEPKc>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <_ZN15QAS_LCD_FontMgr4findEPKc+0x4e>
  		iIdx = i;
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i=0; i<m_vFonts.size(); i++)
 8007390:	7bbb      	ldrb	r3, [r7, #14]
 8007392:	3301      	adds	r3, #1
 8007394:	73bb      	strb	r3, [r7, #14]
 8007396:	e7dd      	b.n	8007354 <_ZN15QAS_LCD_FontMgr4findEPKc+0x12>
  	}
  return iIdx;
 8007398:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd90      	pop	{r4, r7, pc}

080073a4 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc>:
//QAS_LCD_FontMgr::setFontByName
//QAS_LCD_FontMgr Management Method
//
//Used to set the current selected font
//strName - The name of the font to select
void QAS_LCD_FontMgr::setFontByName(const char* strName) {
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]

	//Search for matching font
	int8_t iIdx = find(strName);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff ffc6 	bl	8007342 <_ZN15QAS_LCD_FontMgr4findEPKc>
 80073b6:	4603      	mov	r3, r0
 80073b8:	73fb      	strb	r3, [r7, #15]

	//If no matching font is found then set current font to none
  if (iIdx < 0) {
 80073ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	da06      	bge.n	80073d0 <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x2c>
  	m_iCurrentIdx = -1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	22ff      	movs	r2, #255	; 0xff
 80073c6:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	611a      	str	r2, [r3, #16]
  	return;
 80073ce:	e00d      	b.n	80073ec <_ZN15QAS_LCD_FontMgr13setFontByNameEPKc+0x48>
  }

  //If a matching font is found then set details as required
  m_iCurrentIdx = iIdx;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	7bfa      	ldrb	r2, [r7, #15]
 80073d4:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[iIdx];
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80073dc:	4611      	mov	r1, r2
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fa f869 	bl	80014b6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 80073e4:	4603      	mov	r3, r0
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	611a      	str	r2, [r3, #16]
}
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>:
//QAS_LCD_FontMgr::setFontByIndex
//QAS_LCD_FontMgr Management Method
//
//Used to set the currently selected font
//uIdx - The index of the font to select
void QAS_LCD_FontMgr::setFontByIndex(uint8_t uIdx) {
 80073f2:	b590      	push	{r4, r7, lr}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	460b      	mov	r3, r1
 80073fc:	70fb      	strb	r3, [r7, #3]

	//If uIdx is outside of the range of fonts currently stored in m_vFonts index then set current font to none
  if (uIdx >= m_vFonts.size()) {
 80073fe:	78fc      	ldrb	r4, [r7, #3]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4618      	mov	r0, r3
 8007404:	f7fa f847 	bl	8001496 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007408:	4603      	mov	r3, r0
 800740a:	429c      	cmp	r4, r3
 800740c:	bf2c      	ite	cs
 800740e:	2301      	movcs	r3, #1
 8007410:	2300      	movcc	r3, #0
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x34>
  	m_iCurrentIdx = -1;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	22ff      	movs	r2, #255	; 0xff
 800741c:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	611a      	str	r2, [r3, #16]
  	return;
 8007424:	e00d      	b.n	8007442 <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x50>
  }

  //Set current font details as required
  m_iCurrentIdx = uIdx;
 8007426:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[uIdx];
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	78fa      	ldrb	r2, [r7, #3]
 8007432:	4611      	mov	r1, r2
 8007434:	4618      	mov	r0, r3
 8007436:	f7fa f83e 	bl	80014b6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 800743a:	4603      	mov	r3, r0
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	611a      	str	r2, [r3, #16]
}
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	bd90      	pop	{r4, r7, pc}

08007448 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>:

//QAS_LCD_FontMgr::getSpaceWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of the space character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getSpaceWidth(void) const {
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	da01      	bge.n	800745e <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x16>
		return 0;
 800745a:	2300      	movs	r3, #0
 800745c:	e003      	b.n	8007466 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x1e>
	return m_pCurrent->m_uSpaceWidth;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007464:	b2db      	uxtb	r3, r3
}
 8007466:	4618      	mov	r0, r3
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>:

//QAS_LCD_FontMgr::getCharGap
//QAS_LCD_FontMgr Data Methods
//
//Returns the width is pixels of the gap between each character for the currently selected font, or 0 if no font is currently selected
uint8_t QAS_LCD_FontMgr::getCharGap(void) const {
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	da01      	bge.n	8007488 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x16>
		return 0;
 8007484:	2300      	movs	r3, #0
 8007486:	e003      	b.n	8007490 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x1e>
	return m_pCurrent->m_uCharGap;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800748e:	b2db      	uxtb	r3, r3
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <_ZN15QAS_LCD_FontMgr12getCharWidthEc>:
//QAS_LCD_FontMgr::getCharWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns the width in pixels of a specific character for the currently selected font.
//If no font is currently selected, or an invalid character is selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getCharWidth(char ch) {
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	460b      	mov	r3, r1
 80074a6:	70fb      	strb	r3, [r7, #3]
  if (m_iCurrentIdx < 0)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	da01      	bge.n	80074b6 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x1a>
    return 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e01a      	b.n	80074ec <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x50>
  uint16_t uWidth = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	81fb      	strh	r3, [r7, #14]
  if (ch == 32) {
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d104      	bne.n	80074ca <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x2e>
    uWidth = m_pCurrent->m_uSpaceWidth;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80074c6:	81fb      	strh	r3, [r7, #14]
 80074c8:	e00f      	b.n	80074ea <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
  } else if ((ch >= 33) && (ch <= 126)) {
 80074ca:	78fb      	ldrb	r3, [r7, #3]
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d90c      	bls.n	80074ea <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	2b7e      	cmp	r3, #126	; 0x7e
 80074d4:	d809      	bhi.n	80074ea <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
    uWidth = m_pCurrent->m_pDesc[ch-33].uWidth;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074dc:	78f9      	ldrb	r1, [r7, #3]
 80074de:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x5c>)
 80074e0:	440b      	add	r3, r1
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	81fb      	strh	r3, [r7, #14]
  }
  return uWidth;
 80074ea:	89fb      	ldrh	r3, [r7, #14]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	3fffffdf 	.word	0x3fffffdf

080074fc <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>:
//QAS_LCD_FontMgr::getStringWidth
//QAS_LCD_FontMgr Data Methods
//
//Returns is width in pixels for a specific C-style string based on the currently selected font.
//If no font is currently selected then 0 will be returned
uint16_t QAS_LCD_FontMgr::getStringWidth(const char* str) {
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint16_t uWidth = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	81fb      	strh	r3, [r7, #14]
  uint16_t uLength = strlen(str);
 800750a:	6838      	ldr	r0, [r7, #0]
 800750c:	f7f8 fe94 	bl	8000238 <strlen>
 8007510:	4603      	mov	r3, r0
 8007512:	817b      	strh	r3, [r7, #10]
  uint8_t  uChar;

  if ((uLength == 0) || (m_iCurrentIdx < 0))
 8007514:	897b      	ldrh	r3, [r7, #10]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d004      	beq.n	8007524 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x28>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	da01      	bge.n	8007528 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x2c>
    return uWidth;
 8007524:	89fb      	ldrh	r3, [r7, #14]
 8007526:	e03b      	b.n	80075a0 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xa4>

  for (uint8_t i=0; i<uLength; i++) {
 8007528:	2300      	movs	r3, #0
 800752a:	737b      	strb	r3, [r7, #13]
 800752c:	7b7a      	ldrb	r2, [r7, #13]
 800752e:	897b      	ldrh	r3, [r7, #10]
 8007530:	429a      	cmp	r2, r3
 8007532:	da2e      	bge.n	8007592 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x96>
    uChar = (uint8_t)str[i];
 8007534:	7b7b      	ldrb	r3, [r7, #13]
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	4413      	add	r3, r2
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	727b      	strb	r3, [r7, #9]
    if (uChar == 32) {
 800753e:	7a7b      	ldrb	r3, [r7, #9]
 8007540:	2b20      	cmp	r3, #32
 8007542:	d10b      	bne.n	800755c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x60>
      uWidth += (m_pCurrent->m_uSpaceWidth + m_pCurrent->m_uCharGap);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007550:	4413      	add	r3, r2
 8007552:	b29a      	uxth	r2, r3
 8007554:	89fb      	ldrh	r3, [r7, #14]
 8007556:	4413      	add	r3, r2
 8007558:	81fb      	strh	r3, [r7, #14]
 800755a:	e016      	b.n	800758a <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
    } else if ((uChar >= 33) && (uChar <= 126)) {
 800755c:	7a7b      	ldrb	r3, [r7, #9]
 800755e:	2b20      	cmp	r3, #32
 8007560:	d913      	bls.n	800758a <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
 8007562:	7a7b      	ldrb	r3, [r7, #9]
 8007564:	2b7e      	cmp	r3, #126	; 0x7e
 8007566:	d810      	bhi.n	800758a <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
      uWidth += (m_pCurrent->m_pDesc[uChar-33].uWidth + m_pCurrent->m_uCharGap);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800756e:	7a79      	ldrb	r1, [r7, #9]
 8007570:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xac>)
 8007572:	440b      	add	r3, r1
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	881a      	ldrh	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007580:	4413      	add	r3, r2
 8007582:	b29a      	uxth	r2, r3
 8007584:	89fb      	ldrh	r3, [r7, #14]
 8007586:	4413      	add	r3, r2
 8007588:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i=0; i<uLength; i++) {
 800758a:	7b7b      	ldrb	r3, [r7, #13]
 800758c:	3301      	adds	r3, #1
 800758e:	737b      	strb	r3, [r7, #13]
 8007590:	e7cc      	b.n	800752c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x30>
    }
  }
  uWidth -= m_pCurrent->m_uCharGap;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007598:	89fa      	ldrh	r2, [r7, #14]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	81fb      	strh	r3, [r7, #14]
  return uWidth;
 800759e:	89fb      	ldrh	r3, [r7, #14]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	3fffffdf 	.word	0x3fffffdf

080075ac <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>:
//QAS_LCD_FontMgr::setDrawBuffer
//QAS_LCD_FontMgr Data Methods
//
//Sets the current frame buffer for text to be rendered to
//This method is to be called by QAS_LCD::imp_SetDrawBuffer() method
void QAS_LCD_FontMgr::setDrawBuffer(QAD_LTDC_Buffer* pBuffer) {
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  m_pBuffer = pBuffer;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	615a      	str	r2, [r3, #20]
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>:
//QAS_LCD_FontMgr::setDrawColor
//QAS_LCD_FontMgr Data Methods
//
//Sets the current color for text rendering
//This method is to be called by QAS_LCD::imp_setDrawColor() method
void QAS_LCD_FontMgr::setDrawColor(uint16_t uColor) {
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	807b      	strh	r3, [r7, #2]
  m_uColor = uColor;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	887a      	ldrh	r2, [r7, #2]
 80075d8:	831a      	strh	r2, [r3, #24]
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc>:
//
//Used to draw a center-aligned string of characters using the currently selected font/typeface
//String will be drawn to currently selected draw buffer with currently selected draw color
//cPos - A QAD_Vector2_16 class that defines the X and Y coordinates that define the position of the upper-center location of the string to be drawn
//str  - The C-style string to be drawn
void QAS_LCD_FontMgr::drawStrC(QAT_Vector2_16 cPos, const char* str) {
 80075e6:	b590      	push	{r4, r7, lr}
 80075e8:	b089      	sub	sp, #36	; 0x24
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	607a      	str	r2, [r7, #4]
  if ((m_pBuffer == NULL) || (m_iCurrentIdx < 0))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d067      	beq.n	80076ca <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	db62      	blt.n	80076ca <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe4>
    return;

  uint8_t uLen = strlen(str);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7f8 fe17 	bl	8000238 <strlen>
 800760a:	4603      	mov	r3, r0
 800760c:	77bb      	strb	r3, [r7, #30]
  if (uLen < 0) return;

  QAT_Vector2_16 cDrawPos = cPos;
 800760e:	f107 0314 	add.w	r3, r7, #20
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	4618      	mov	r0, r3
 8007616:	f7f9 fb80 	bl	8000d1a <_ZN14QAT_Vector2_16C1ERKS_>
  cDrawPos.x -= (getStringWidth(str) / 2);
 800761a:	6879      	ldr	r1, [r7, #4]
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7ff ff6d 	bl	80074fc <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>
 8007622:	4603      	mov	r3, r0
 8007624:	085b      	lsrs	r3, r3, #1
 8007626:	b29b      	uxth	r3, r3
 8007628:	8aba      	ldrh	r2, [r7, #20]
 800762a:	b29b      	uxth	r3, r3
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	b29b      	uxth	r3, r3
 8007630:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 8007632:	2300      	movs	r3, #0
 8007634:	77fb      	strb	r3, [r7, #31]
 8007636:	7ffa      	ldrb	r2, [r7, #31]
 8007638:	7fbb      	ldrb	r3, [r7, #30]
 800763a:	429a      	cmp	r2, r3
 800763c:	d246      	bcs.n	80076cc <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xe6>
  	if ((str[i] >= 33) && (str[i] <= 126)) {
 800763e:	7ffb      	ldrb	r3, [r7, #31]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b20      	cmp	r3, #32
 8007648:	d92c      	bls.n	80076a4 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
 800764a:	7ffb      	ldrb	r3, [r7, #31]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	4413      	add	r3, r2
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b7e      	cmp	r3, #126	; 0x7e
 8007654:	d826      	bhi.n	80076a4 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xbe>
      drawCharP(cDrawPos, str[i]);
 8007656:	f107 0214 	add.w	r2, r7, #20
 800765a:	f107 0318 	add.w	r3, r7, #24
 800765e:	4611      	mov	r1, r2
 8007660:	4618      	mov	r0, r3
 8007662:	f7f9 fb5a 	bl	8000d1a <_ZN14QAT_Vector2_16C1ERKS_>
 8007666:	7ffb      	ldrb	r3, [r7, #31]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	4413      	add	r3, r2
 800766c:	781a      	ldrb	r2, [r3, #0]
 800766e:	f107 0318 	add.w	r3, r7, #24
 8007672:	4619      	mov	r1, r3
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 f82c 	bl	80076d2 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>
      cDrawPos.x += getCharWidth(str[i]) + getCharGap();
 800767a:	7ffb      	ldrb	r3, [r7, #31]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	4413      	add	r3, r2
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	4619      	mov	r1, r3
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff ff09 	bl	800749c <_ZN15QAS_LCD_FontMgr12getCharWidthEc>
 800768a:	4603      	mov	r3, r0
 800768c:	461c      	mov	r4, r3
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff feef 	bl	8007472 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 8007694:	4603      	mov	r3, r0
 8007696:	4423      	add	r3, r4
 8007698:	8aba      	ldrh	r2, [r7, #20]
 800769a:	b29b      	uxth	r3, r3
 800769c:	4413      	add	r3, r2
 800769e:	b29b      	uxth	r3, r3
 80076a0:	82bb      	strh	r3, [r7, #20]
 80076a2:	e00e      	b.n	80076c2 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0xdc>
  	} else {
  		cDrawPos.x += getSpaceWidth() + getCharGap();
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7ff fecf 	bl	8007448 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>
 80076aa:	4603      	mov	r3, r0
 80076ac:	461c      	mov	r4, r3
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7ff fedf 	bl	8007472 <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 80076b4:	4603      	mov	r3, r0
 80076b6:	4423      	add	r3, r4
 80076b8:	8aba      	ldrh	r2, [r7, #20]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	4413      	add	r3, r2
 80076be:	b29b      	uxth	r3, r3
 80076c0:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 80076c2:	7ffb      	ldrb	r3, [r7, #31]
 80076c4:	3301      	adds	r3, #1
 80076c6:	77fb      	strb	r3, [r7, #31]
 80076c8:	e7b5      	b.n	8007636 <_ZN15QAS_LCD_FontMgr8drawStrCE14QAT_Vector2_16PKc+0x50>
    return;
 80076ca:	bf00      	nop
  	}
  }
}
 80076cc:	3724      	adds	r7, #36	; 0x24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd90      	pop	{r4, r7, pc}

080076d2 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c>:
//QAS_LCD_FontMgr::drawCharP
//QAS_LCD_FontMgr Private Rendering Method
//
//Used to draw an individual character based on selected font's bitmap data
//This method is to be used by drawChar(), drawStrL(), drawStrC() and drawStrR() methods
void QAS_LCD_FontMgr::drawCharP(QAT_Vector2_16 cPos, char ch) {
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b08a      	sub	sp, #40	; 0x28
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	4613      	mov	r3, r2
 80076de:	71fb      	strb	r3, [r7, #7]
  uint16_t uLetter = (uint8_t)ch - 33;
 80076e0:	79fb      	ldrb	r3, [r7, #7]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b21      	subs	r3, #33	; 0x21
 80076e6:	83bb      	strh	r3, [r7, #28]
  uint16_t uWidth  = m_pCurrent->m_pDesc[uLetter].uWidth;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ee:	8bbb      	ldrh	r3, [r7, #28]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	837b      	strh	r3, [r7, #26]
  uint32_t uOffset = m_pCurrent->m_pDesc[uLetter].uOffset;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076fe:	8bbb      	ldrh	r3, [r7, #28]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	885b      	ldrh	r3, [r3, #2]
 8007706:	627b      	str	r3, [r7, #36]	; 0x24

  uint8_t uLine;
  uint8_t uLineInc;
  uint32_t uCur;

  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 8007708:	2300      	movs	r3, #0
 800770a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800770e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	6912      	ldr	r2, [r2, #16]
 8007716:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8007718:	4293      	cmp	r3, r2
 800771a:	da54      	bge.n	80077c6 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xf4>
    uLineInc = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uCur = cPos.x+((cPos.y+uHeight)*QAD_LTDC_WIDTH);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	4619      	mov	r1, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	885b      	ldrh	r3, [r3, #2]
 800772c:	461a      	mov	r2, r3
 800772e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007732:	4413      	add	r3, r2
 8007734:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007738:	fb02 f303 	mul.w	r3, r2, r3
 800773c:	440b      	add	r3, r1
 800773e:	617b      	str	r3, [r7, #20]
    for (uint16_t i=0; i<uWidth; i++) {
 8007740:	2300      	movs	r3, #0
 8007742:	83fb      	strh	r3, [r7, #30]
 8007744:	8bfa      	ldrh	r2, [r7, #30]
 8007746:	8b7b      	ldrh	r3, [r7, #26]
 8007748:	429a      	cmp	r2, r3
 800774a:	d236      	bcs.n	80077ba <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe8>
      if (uLineInc == 0) {
 800774c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x98>
        uLine = m_pCurrent->m_pData[uOffset];
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	4413      	add	r3, r2
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uOffset++;
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	3301      	adds	r3, #1
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (uLine & 0x01)
 800776a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00c      	beq.n	8007790 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xbe>
        m_pBuffer->pixel[uCur+i] = m_uColor;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	695a      	ldr	r2, [r3, #20]
 800777a:	8bf9      	ldrh	r1, [r7, #30]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	440b      	add	r3, r1
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	441a      	add	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3318      	adds	r3, #24
 8007788:	4619      	mov	r1, r3
 800778a:	4610      	mov	r0, r2
 800778c:	f7ff fb30 	bl	8006df0 <_ZN18QAT_Pixel_ARGB4444aSERKt>
      uLine = uLine >> 1;
 8007790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007794:	105b      	asrs	r3, r3, #1
 8007796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      uLineInc++;
 800779a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800779e:	3301      	adds	r3, #1
 80077a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (uLineInc > 7)
 80077a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80077a8:	2b07      	cmp	r3, #7
 80077aa:	d902      	bls.n	80077b2 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0xe0>
        uLineInc = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    for (uint16_t i=0; i<uWidth; i++) {
 80077b2:	8bfb      	ldrh	r3, [r7, #30]
 80077b4:	3301      	adds	r3, #1
 80077b6:	83fb      	strh	r3, [r7, #30]
 80077b8:	e7c4      	b.n	8007744 <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x72>
  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 80077ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80077be:	3301      	adds	r3, #1
 80077c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80077c4:	e7a3      	b.n	800770e <_ZN15QAS_LCD_FontMgr9drawCharPE14QAT_Vector2_16c+0x3c>
    }
  }
}
 80077c6:	bf00      	nop
 80077c8:	3728      	adds	r7, #40	; 0x28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d00c      	beq.n	80077fe <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	4619      	mov	r1, r3
 80077ee:	f000 f823 	bl	8007838 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	1d1a      	adds	r2, r3, #4
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	605a      	str	r2, [r3, #4]
      }
 80077fc:	e008      	b.n	8007810 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f82d 	bl	800785e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>
 8007804:	4603      	mov	r3, r0
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f84e 	bl	80078ac <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8007810:	bf00      	nop
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	f107 030c 	add.w	r3, r7, #12
 8007826:	4611      	mov	r1, r2
 8007828:	4618      	mov	r0, r3
 800782a:	f000 f8fb 	bl	8007a24 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f908 	bl	8007a5a <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 800784a:	4603      	mov	r3, r0
 800784c:	461a      	mov	r2, r3
 800784e:	68b9      	ldr	r1, [r7, #8]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f90d 	bl	8007a70 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	1d1a      	adds	r2, r3, #4
 800786a:	f107 030c 	add.w	r3, r7, #12
 800786e:	4611      	mov	r1, r2
 8007870:	4618      	mov	r0, r3
 8007872:	f000 f8d7 	bl	8007a24 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f805 	bl	8007896 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800788c:	4603      	mov	r3, r0
      }
 800788e:	4618      	mov	r0, r3
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800789e:	2301      	movs	r3, #1
      }
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80078ac:	b5b0      	push	{r4, r5, r7, lr}
 80078ae:	b08c      	sub	sp, #48	; 0x30
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80078b8:	4a59      	ldr	r2, [pc, #356]	; (8007a20 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 80078ba:	2101      	movs	r1, #1
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 f8ed 	bl	8007a9c <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>
 80078c2:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7ff ffa1 	bl	8007818 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>
 80078d6:	4603      	mov	r3, r0
 80078d8:	617b      	str	r3, [r7, #20]
 80078da:	f107 0214 	add.w	r2, r7, #20
 80078de:	f107 0308 	add.w	r3, r7, #8
 80078e2:	4611      	mov	r1, r2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 f920 	bl	8007b2a <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80078ea:	4603      	mov	r3, r0
 80078ec:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 f92e 	bl	8007b54 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>
 80078f8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80078fe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	18d5      	adds	r5, r2, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f8a6 	bl	8007a5a <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	4629      	mov	r1, r5
 8007914:	4620      	mov	r0, r4
 8007916:	f7ff ff8f 	bl	8007838 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800791a:	2300      	movs	r3, #0
 800791c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800791e:	f7ff ffaf 	bl	8007880 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d027      	beq.n	8007978 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007928:	f107 0308 	add.w	r3, r7, #8
 800792c:	4618      	mov	r0, r3
 800792e:	f000 f889 	bl	8007a44 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007932:	4603      	mov	r3, r0
 8007934:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4618      	mov	r0, r3
 800793a:	f7f9 fe74 	bl	8001626 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800793e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	4621      	mov	r1, r4
 8007944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007946:	f000 f919 	bl	8007b7c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800794a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800794c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794e:	3304      	adds	r3, #4
 8007950:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8007952:	f107 0308 	add.w	r3, r7, #8
 8007956:	4618      	mov	r0, r3
 8007958:	f000 f874 	bl	8007a44 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800795c:	4603      	mov	r3, r0
 800795e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4618      	mov	r0, r3
 8007964:	f7f9 fe5f 	bl	8001626 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007968:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800796a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800796c:	6a39      	ldr	r1, [r7, #32]
 800796e:	4620      	mov	r0, r4
 8007970:	f000 f904 	bl	8007b7c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8007974:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007976:	e026      	b.n	80079c6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8007978:	f107 0308 	add.w	r3, r7, #8
 800797c:	4618      	mov	r0, r3
 800797e:	f000 f861 	bl	8007a44 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007982:	4603      	mov	r3, r0
 8007984:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4618      	mov	r0, r3
 800798a:	f7f9 fe4c 	bl	8001626 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 800798e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	4621      	mov	r1, r4
 8007994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007996:	f000 f905 	bl	8007ba4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 800799a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799e:	3304      	adds	r3, #4
 80079a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80079a2:	f107 0308 	add.w	r3, r7, #8
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 f84c 	bl	8007a44 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 80079ac:	4603      	mov	r3, r0
 80079ae:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7f9 fe37 	bl	8001626 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 80079b8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80079ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079bc:	6a39      	ldr	r1, [r7, #32]
 80079be:	4620      	mov	r0, r4
 80079c0:	f000 f8f0 	bl	8007ba4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 80079c4:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80079c6:	f7ff ff5b 	bl	8007880 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f083 0301 	eor.w	r3, r3, #1
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4618      	mov	r0, r3
 80079da:	f7f9 fe24 	bl	8001626 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 80079de:	4603      	mov	r3, r0
 80079e0:	461a      	mov	r2, r3
 80079e2:	6a39      	ldr	r1, [r7, #32]
 80079e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079e6:	f7f9 fe29 	bl	800163c <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80079ea:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80079f6:	461a      	mov	r2, r3
 80079f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079fa:	f7f9 fe01 	bl	8001600 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a08:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	441a      	add	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	609a      	str	r2, [r3, #8]
    }
 8007a16:	bf00      	nop
 8007a18:	3730      	adds	r7, #48	; 0x30
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	08008aa8 	.word	0x08008aa8

08007a24 <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8007a70:	b590      	push	{r4, r7, lr}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff ffec 	bl	8007a5a <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8007a82:	4603      	mov	r3, r0
 8007a84:	681c      	ldr	r4, [r3, #0]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	2004      	movs	r0, #4
 8007a8c:	f7ff fbc1 	bl	8007212 <_ZnwjPv>
 8007a90:	4603      	mov	r3, r0
 8007a92:	601c      	str	r4, [r3, #0]
 8007a94:	bf00      	nop
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd90      	pop	{r4, r7, pc}

08007a9c <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8007a9c:	b590      	push	{r4, r7, lr}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 f894 	bl	8007bd6 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007aae:	4604      	mov	r4, r0
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f7f9 fcf0 	bl	8001496 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	1ae2      	subs	r2, r4, r3
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	bf34      	ite	cc
 8007ac0:	2301      	movcc	r3, #1
 8007ac2:	2300      	movcs	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fd5b 	bl	8008586 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f7f9 fce0 	bl	8001496 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f7f9 fcdc 	bl	8001496 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	613b      	str	r3, [r7, #16]
 8007ae2:	f107 0208 	add.w	r2, r7, #8
 8007ae6:	f107 0310 	add.w	r3, r7, #16
 8007aea:	4611      	mov	r1, r2
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 f883 	bl	8007bf8 <_ZSt3maxIjERKT_S2_S2_>
 8007af2:	4603      	mov	r3, r0
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4423      	add	r3, r4
 8007af8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f7f9 fccb 	bl	8001496 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007b00:	4602      	mov	r2, r0
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d306      	bcc.n	8007b16 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 f864 	bl	8007bd6 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d904      	bls.n	8007b20 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x84>
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 f85d 	bl	8007bd6 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	e000      	b.n	8007b22 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x86>
 8007b20:	697b      	ldr	r3, [r7, #20]
      }
 8007b22:	4618      	mov	r0, r3
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd90      	pop	{r4, r7, pc}

08007b2a <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007b2a:	b590      	push	{r4, r7, lr}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff ff85 	bl	8007a44 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	681c      	ldr	r4, [r3, #0]
 8007b3e:	6838      	ldr	r0, [r7, #0]
 8007b40:	f7ff ff80 	bl	8007a44 <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007b44:	4603      	mov	r3, r0
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	1ae3      	subs	r3, r4, r3
 8007b4a:	109b      	asrs	r3, r3, #2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd90      	pop	{r4, r7, pc}

08007b54 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d006      	beq.n	8007b72 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x1e>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 f859 	bl	8007c20 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	e000      	b.n	8007b74 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x20>
 8007b72:	2300      	movs	r3, #0
      }
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8007b7c:	b590      	push	{r4, r7, lr}
 8007b7e:	b089      	sub	sp, #36	; 0x24
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8007b8a:	f88d 4000 	strb.w	r4, [sp]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	68b9      	ldr	r1, [r7, #8]
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 f852 	bl	8007c3e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8007b9a:	4603      	mov	r3, r0
      }
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd90      	pop	{r4, r7, pc}

08007ba4 <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8007ba4:	b590      	push	{r4, r7, lr}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f855 	bl	8007c62 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 8007bb8:	4604      	mov	r4, r0
 8007bba:	68b8      	ldr	r0, [r7, #8]
 8007bbc:	f000 f851 	bl	8007c62 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 8007bc0:	4601      	mov	r1, r0
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f000 f85a 	bl	8007c80 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8007bcc:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd90      	pop	{r4, r7, pc}

08007bd6 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 f878 	bl	8007cd6 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007be6:	4603      	mov	r3, r0
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 f85a 	bl	8007ca2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d201      	bcs.n	8007c12 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	e000      	b.n	8007c14 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8007c12:	687b      	ldr	r3, [r7, #4]
    }
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f85c 	bl	8007cec <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>
 8007c34:	4603      	mov	r3, r0
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
 8007c4a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	68b9      	ldr	r1, [r7, #8]
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 f868 	bl	8007d28 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007c58:	4603      	mov	r3, r0
      }
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8007c6a:	f107 030c 	add.w	r3, r7, #12
 8007c6e:	6879      	ldr	r1, [r7, #4]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 f876 	bl	8007d62 <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	68b9      	ldr	r1, [r7, #8]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 f874 	bl	8007d80 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8007caa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007cae:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f889 	bl	8007dc8 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007cba:	f107 0208 	add.w	r2, r7, #8
 8007cbe:	f107 030c 	add.w	r3, r7, #12
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 f88b 	bl	8007de0 <_ZSt3minIjERKT_S2_S2_>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	681b      	ldr	r3, [r3, #0]
      }
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f885 	bl	8007e08 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	4293      	cmp	r3, r2
 8007d04:	bf8c      	ite	hi
 8007d06:	2301      	movhi	r3, #1
 8007d08:	2300      	movls	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007d10:	f000 fc36 	bl	8008580 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fc1b 	bl	8008554 <_Znwj>
 8007d1e:	4603      	mov	r3, r0
      }
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007d28:	b5b0      	push	{r4, r5, r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 f872 	bl	8007e20 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	68b8      	ldr	r0, [r7, #8]
 8007d40:	f000 f86e 	bl	8007e20 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007d44:	4605      	mov	r5, r0
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f86a 	bl	8007e20 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	4629      	mov	r1, r5
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 f86f 	bl	8007e36 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8007d58:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bdb0      	pop	{r4, r5, r7, pc}

08007d62 <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>:
      move_iterator(iterator_type __i)
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	68b9      	ldr	r1, [r7, #8]
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f86c 	bl	8007e72 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>
 8007d9a:	4603      	mov	r3, r0
    }
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8007db0:	2301      	movs	r3, #1
 8007db2:	75fb      	strb	r3, [r7, #23]
			     && __is_pointer<_II>::__value
			     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
			      _Category>::__copy_m(__first, __last, __result);
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	68b9      	ldr	r1, [r7, #8]
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 f86a 	bl	8007e92 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>
 8007dbe:	4603      	mov	r3, r0
    }
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f819 	bl	8007e08 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d201      	bcs.n	8007dfa <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	e000      	b.n	8007dfc <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007dfa:	687b      	ldr	r3, [r7, #4]
    }
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007e10:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>:
    __niter_base(_Iterator __it)
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b086      	sub	sp, #24
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
 8007e42:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	109b      	asrs	r3, r3, #2
 8007e4c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	dd06      	ble.n	8007e62 <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	461a      	mov	r2, r3
 8007e5a:	68f9      	ldr	r1, [r7, #12]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fc05 	bl	800866c <memmove>
      return __result + __count;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	4413      	add	r3, r2
    }
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 f822 	bl	8007ecc <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b086      	sub	sp, #24
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	109b      	asrs	r3, r3, #2
 8007ea6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d006      	beq.n	8007ebc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	68f9      	ldr	r1, [r7, #12]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fbd8 	bl	800866c <memmove>
	  return __result + _Num;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	4413      	add	r3, r2
	}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8007ecc:	b590      	push	{r4, r7, lr}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 f80f 	bl	8007efc <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007ede:	4604      	mov	r4, r0
 8007ee0:	68b8      	ldr	r0, [r7, #8]
 8007ee2:	f000 f80b 	bl	8007efc <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	4619      	mov	r1, r3
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 f816 	bl	8007f1e <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 8007ef2:	4603      	mov	r3, r0
    }
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd90      	pop	{r4, r7, pc}

08007efc <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8007f04:	1d3b      	adds	r3, r7, #4
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 f82c 	bl	8007f64 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f834 	bl	8007f7c <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>
 8007f14:	4603      	mov	r3, r0
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007f1e:	b5b0      	push	{r4, r5, r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f7ff ff78 	bl	8007e20 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007f30:	4604      	mov	r4, r0
 8007f32:	68b8      	ldr	r0, [r7, #8]
 8007f34:	f7ff ff74 	bl	8007e20 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007f38:	4605      	mov	r5, r0
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7ff ff6f 	bl	8007e20 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007f42:	4603      	mov	r3, r0
 8007f44:	461a      	mov	r2, r3
 8007f46:	4629      	mov	r1, r5
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f7ff ff2b 	bl	8007da4 <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	1d3b      	adds	r3, r7, #4
 8007f52:	4611      	mov	r1, r2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 f81c 	bl	8007f92 <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>
 8007f5a:	4603      	mov	r3, r0
    }
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bdb0      	pop	{r4, r5, r7, pc}

08007f64 <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>:
      base() const
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4618      	mov	r0, r3
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4618      	mov	r0, r3
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	7b1b      	ldrb	r3, [r3, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e010      	b.n	8007fe2 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	4798      	blx	r3
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	e003      	b.n	8007fe2 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b082      	sub	sp, #8
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	4798      	blx	r3
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 800800a:	b580      	push	{r7, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 8008014:	6838      	ldr	r0, [r7, #0]
 8008016:	f7f8 f90f 	bl	8000238 <strlen>
 800801a:	4603      	mov	r3, r0
 800801c:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 800801e:	2300      	movs	r3, #0
 8008020:	81fb      	strh	r3, [r7, #14]
 8008022:	89fa      	ldrh	r2, [r7, #14]
 8008024:	89bb      	ldrh	r3, [r7, #12]
 8008026:	429a      	cmp	r2, r3
 8008028:	d20f      	bcs.n	800804a <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3304      	adds	r3, #4
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f81f 	bl	8008072 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008034:	89fb      	ldrh	r3, [r7, #14]
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	4413      	add	r3, r2
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	4619      	mov	r1, r3
 800803e:	f000 f9c7 	bl	80083d0 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 8008042:	89fb      	ldrh	r3, [r7, #14]
 8008044:	3301      	adds	r3, #1
 8008046:	81fb      	strh	r3, [r7, #14]
 8008048:	e7eb      	b.n	8008022 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3304      	adds	r3, #4
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f80f 	bl	8008072 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008054:	4603      	mov	r3, r0
 8008056:	210d      	movs	r1, #13
 8008058:	4618      	mov	r0, r3
 800805a:	f000 f9b9 	bl	80083d0 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	330c      	adds	r3, #12
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3
}
 800806a:	bf00      	nop
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
	return get();
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f805 	bl	800808a <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 8008080:	4603      	mov	r3, r0
      }
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4618      	mov	r0, r3
 8008096:	f000 f805 	bl	80080a4 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 800809a:	4603      	mov	r3, r0
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 f806 	bl	80080c0 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80080b4:	4603      	mov	r3, r0
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4618      	mov	r0, r3
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f805 	bl	80080da <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80080d0:	4603      	mov	r3, r0
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f805 	bl	80080f2 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 80080e8:	4603      	mov	r3, r0
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 f805 	bl	800810c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 8008102:	4603      	mov	r3, r0
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4618      	mov	r0, r3
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 8008122:	b580      	push	{r7, lr}
 8008124:	b082      	sub	sp, #8
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3314      	adds	r3, #20
 8008130:	4618      	mov	r0, r3
 8008132:	f000 f8e2 	bl	80082fa <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008136:	4603      	mov	r3, r0
 8008138:	4618      	mov	r0, r3
 800813a:	f7fe fa9e 	bl	800667a <_ZN8QAD_UART4initEv>
 800813e:	4603      	mov	r3, r0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3314      	adds	r3, #20
 8008154:	4618      	mov	r0, r3
 8008156:	f000 f8d0 	bl	80082fa <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800815a:	4603      	mov	r3, r0
 800815c:	4618      	mov	r0, r3
 800815e:	f7fe fab6 	bl	80066ce <_ZN8QAD_UART6deinitEv>
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 800816a:	b590      	push	{r4, r7, lr}
 800816c:	b0a5      	sub	sp, #148	; 0x94
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3314      	adds	r3, #20
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f8be 	bl	80082fa <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800817e:	4603      	mov	r3, r0
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe faba 	bl	80066fa <_ZN8QAD_UART9getHandleEv>
 8008186:	4602      	mov	r2, r0
 8008188:	f107 0308 	add.w	r3, r7, #8
 800818c:	4611      	mov	r1, r2
 800818e:	2284      	movs	r2, #132	; 0x84
 8008190:	4618      	mov	r0, r3
 8008192:	f000 fa5d 	bl	8008650 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	f003 0320 	and.w	r3, r3, #32
 800819e:	2b20      	cmp	r3, #32
 80081a0:	bf0c      	ite	eq
 80081a2:	2301      	moveq	r3, #1
 80081a4:	2300      	movne	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01e      	beq.n	80081ea <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x80>
  	uint8_t uData = m_pUART->dataRX();
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3314      	adds	r3, #20
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 f8a2 	bl	80082fa <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80081b6:	4603      	mov	r3, r0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fe fb12 	bl	80067e2 <_ZN8QAD_UART6dataRXEv>
 80081be:	4603      	mov	r3, r0
 80081c0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  	if (m_eRXState)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	7b9b      	ldrb	r3, [r3, #14]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3308      	adds	r3, #8
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7ff ff4e 	bl	8008072 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80081d6:	4602      	mov	r2, r0
 80081d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80081dc:	4619      	mov	r1, r3
 80081de:	4610      	mov	r0, r2
 80081e0:	f000 f8f6 	bl	80083d0 <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2220      	movs	r2, #32
 80081e8:	621a      	str	r2, [r3, #32]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f2:	2b80      	cmp	r3, #128	; 0x80
 80081f4:	bf0c      	ite	eq
 80081f6:	2301      	moveq	r3, #1
 80081f8:	2300      	movne	r3, #0
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d034      	beq.n	800826a <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x100>
  	if (!m_pTXFIFO->empty()) {
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3304      	adds	r3, #4
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff ff34 	bl	8008072 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800820a:	4603      	mov	r3, r0
 800820c:	4618      	mov	r0, r3
 800820e:	f000 f8cc 	bl	80083aa <_ZN14QAT_FIFOBuffer5emptyEv>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	bf0c      	ite	eq
 8008218:	2301      	moveq	r3, #1
 800821a:	2300      	movne	r3, #0
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d014      	beq.n	800824c <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe2>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3314      	adds	r3, #20
 8008226:	4618      	mov	r0, r3
 8008228:	f000 f867 	bl	80082fa <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800822c:	4604      	mov	r4, r0
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	3304      	adds	r3, #4
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff ff1d 	bl	8008072 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008238:	4603      	mov	r3, r0
 800823a:	4618      	mov	r0, r3
 800823c:	f000 f8ec 	bl	8008418 <_ZN14QAT_FIFOBuffer3popEv>
 8008240:	4603      	mov	r3, r0
 8008242:	4619      	mov	r1, r3
 8008244:	4620      	mov	r0, r4
 8008246:	f7fe fabc 	bl	80067c2 <_ZN8QAD_UART6dataTXEh>
 800824a:	e00b      	b.n	8008264 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfa>
  	} else {
      m_pUART->stopTX();
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3314      	adds	r3, #20
 8008250:	4618      	mov	r0, r3
 8008252:	f000 f852 	bl	80082fa <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008256:	4603      	mov	r3, r0
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe fa70 	bl	800673e <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2280      	movs	r2, #128	; 0x80
 8008268:	621a      	str	r2, [r3, #32]
  }
}
 800826a:	bf00      	nop
 800826c:	3794      	adds	r7, #148	; 0x94
 800826e:	46bd      	mov	sp, r7
 8008270:	bd90      	pop	{r4, r7, pc}

08008272 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3314      	adds	r3, #20
 800827e:	4618      	mov	r0, r3
 8008280:	f000 f83b 	bl	80082fa <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008284:	4603      	mov	r3, r0
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fa43 	bl	8006712 <_ZN8QAD_UART7startTXEv>
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3314      	adds	r3, #20
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 f82a 	bl	80082fa <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80082a6:	4603      	mov	r3, r0
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fe fa48 	bl	800673e <_ZN8QAD_UART6stopTXEv>
}
 80082ae:	bf00      	nop
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3314      	adds	r3, #20
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 f819 	bl	80082fa <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80082c8:	4603      	mov	r3, r0
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe fa4d 	bl	800676a <_ZN8QAD_UART7startRXEv>
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3314      	adds	r3, #20
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 f808 	bl	80082fa <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80082ea:	4603      	mov	r3, r0
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe fa52 	bl	8006796 <_ZN8QAD_UART6stopRXEv>
}
 80082f2:	bf00      	nop
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b082      	sub	sp, #8
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
	return get();
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f805 	bl	8008312 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 8008308:	4603      	mov	r3, r0
      }
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4618      	mov	r0, r3
 800831e:	f000 f805 	bl	800832c <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8008322:	4603      	mov	r3, r0
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4618      	mov	r0, r3
 8008338:	f000 f806 	bl	8008348 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800833c:	4603      	mov	r3, r0
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4618      	mov	r0, r3
 8008354:	f000 f805 	bl	8008362 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8008358:	4603      	mov	r3, r0
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008362:	b580      	push	{r7, lr}
 8008364:	b082      	sub	sp, #8
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f805 	bl	800837a <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 8008370:	4603      	mov	r3, r0
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800837a:	b580      	push	{r7, lr}
 800837c:	b082      	sub	sp, #8
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f805 	bl	8008394 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 800838a:	4603      	mov	r3, r0
 800838c:	4618      	mov	r0, r3
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4618      	mov	r0, r3
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	88da      	ldrh	r2, [r3, #6]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	891b      	ldrh	r3, [r3, #8]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d101      	bne.n	80083c2 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 80083be:	2301      	movs	r3, #1
 80083c0:	e000      	b.n	80083c4 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	891b      	ldrh	r3, [r3, #8]
 80083e2:	4619      	mov	r1, r3
 80083e4:	4610      	mov	r0, r2
 80083e6:	f000 f847 	bl	8008478 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 80083ea:	4602      	mov	r2, r0
 80083ec:	78fb      	ldrb	r3, [r7, #3]
 80083ee:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	889a      	ldrh	r2, [r3, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	891b      	ldrh	r3, [r3, #8]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d906      	bls.n	800840a <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	891b      	ldrh	r3, [r3, #8]
 8008400:	3301      	adds	r3, #1
 8008402:	b29a      	uxth	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 8008408:	e002      	b.n	8008410 <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	811a      	strh	r2, [r3, #8]
}
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7ff ffc2 	bl	80083aa <_ZN14QAT_FIFOBuffer5emptyEv>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	bf0c      	ite	eq
 800842c:	2301      	moveq	r3, #1
 800842e:	2300      	movne	r3, #0
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d01b      	beq.n	800846e <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	88db      	ldrh	r3, [r3, #6]
 800843c:	4619      	mov	r1, r3
 800843e:	4610      	mov	r0, r2
 8008440:	f000 f81a 	bl	8008478 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8008444:	4603      	mov	r3, r0
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	889a      	ldrh	r2, [r3, #4]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	88db      	ldrh	r3, [r3, #6]
 8008452:	429a      	cmp	r2, r3
 8008454:	d906      	bls.n	8008464 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	88db      	ldrh	r3, [r3, #6]
 800845a:	3301      	adds	r3, #1
 800845c:	b29a      	uxth	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	80da      	strh	r2, [r3, #6]
 8008462:	e002      	b.n	800846a <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	80da      	strh	r2, [r3, #6]
		return uData;
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	e000      	b.n	8008470 <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
	return get()[__i];
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f807 	bl	8008496 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8008488:	4602      	mov	r2, r0
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	4413      	add	r3, r2
      }
 800848e:	4618      	mov	r0, r3
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8008496:	b580      	push	{r7, lr}
 8008498:	b082      	sub	sp, #8
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 f805 	bl	80084b0 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80084a6:	4603      	mov	r3, r0
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 f806 	bl	80084cc <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80084c0:	4603      	mov	r3, r0
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 f805 	bl	80084e6 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80084dc:	4603      	mov	r3, r0
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f805 	bl	80084fe <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 80084f4:	4603      	mov	r3, r0
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4618      	mov	r0, r3
 800850a:	f000 f805 	bl	8008518 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 800850e:	4603      	mov	r3, r0
 8008510:	4618      	mov	r0, r3
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <_ZdlPv>:
 800852e:	f000 b887 	b.w	8008640 <free>

08008532 <_ZdlPvj>:
 8008532:	f7ff bffc 	b.w	800852e <_ZdlPv>

08008536 <__cxa_guard_acquire>:
 8008536:	6803      	ldr	r3, [r0, #0]
 8008538:	07db      	lsls	r3, r3, #31
 800853a:	d406      	bmi.n	800854a <__cxa_guard_acquire+0x14>
 800853c:	7843      	ldrb	r3, [r0, #1]
 800853e:	b103      	cbz	r3, 8008542 <__cxa_guard_acquire+0xc>
 8008540:	deff      	udf	#255	; 0xff
 8008542:	2301      	movs	r3, #1
 8008544:	7043      	strb	r3, [r0, #1]
 8008546:	4618      	mov	r0, r3
 8008548:	4770      	bx	lr
 800854a:	2000      	movs	r0, #0
 800854c:	4770      	bx	lr

0800854e <__cxa_guard_release>:
 800854e:	2301      	movs	r3, #1
 8008550:	6003      	str	r3, [r0, #0]
 8008552:	4770      	bx	lr

08008554 <_Znwj>:
 8008554:	2801      	cmp	r0, #1
 8008556:	bf38      	it	cc
 8008558:	2001      	movcc	r0, #1
 800855a:	b510      	push	{r4, lr}
 800855c:	4604      	mov	r4, r0
 800855e:	4620      	mov	r0, r4
 8008560:	f000 f866 	bl	8008630 <malloc>
 8008564:	b930      	cbnz	r0, 8008574 <_Znwj+0x20>
 8008566:	f000 f823 	bl	80085b0 <_ZSt15get_new_handlerv>
 800856a:	b908      	cbnz	r0, 8008570 <_Znwj+0x1c>
 800856c:	f000 f828 	bl	80085c0 <abort>
 8008570:	4780      	blx	r0
 8008572:	e7f4      	b.n	800855e <_Znwj+0xa>
 8008574:	bd10      	pop	{r4, pc}

08008576 <_Znaj>:
 8008576:	f7ff bfed 	b.w	8008554 <_Znwj>

0800857a <__cxa_pure_virtual>:
 800857a:	b508      	push	{r3, lr}
 800857c:	f000 f812 	bl	80085a4 <_ZSt9terminatev>

08008580 <_ZSt17__throw_bad_allocv>:
 8008580:	b508      	push	{r3, lr}
 8008582:	f000 f81d 	bl	80085c0 <abort>

08008586 <_ZSt20__throw_length_errorPKc>:
 8008586:	b508      	push	{r3, lr}
 8008588:	f000 f81a 	bl	80085c0 <abort>

0800858c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800858c:	b508      	push	{r3, lr}
 800858e:	4780      	blx	r0
 8008590:	f000 f816 	bl	80085c0 <abort>

08008594 <_ZSt13get_terminatev>:
 8008594:	4b02      	ldr	r3, [pc, #8]	; (80085a0 <_ZSt13get_terminatev+0xc>)
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	f3bf 8f5b 	dmb	ish
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	2000000c 	.word	0x2000000c

080085a4 <_ZSt9terminatev>:
 80085a4:	b508      	push	{r3, lr}
 80085a6:	f7ff fff5 	bl	8008594 <_ZSt13get_terminatev>
 80085aa:	f7ff ffef 	bl	800858c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080085b0 <_ZSt15get_new_handlerv>:
 80085b0:	4b02      	ldr	r3, [pc, #8]	; (80085bc <_ZSt15get_new_handlerv+0xc>)
 80085b2:	6818      	ldr	r0, [r3, #0]
 80085b4:	f3bf 8f5b 	dmb	ish
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	200002f4 	.word	0x200002f4

080085c0 <abort>:
 80085c0:	b508      	push	{r3, lr}
 80085c2:	2006      	movs	r0, #6
 80085c4:	f000 f956 	bl	8008874 <raise>
 80085c8:	2001      	movs	r0, #1
 80085ca:	f7f9 fa52 	bl	8001a72 <_exit>

080085ce <atexit>:
 80085ce:	2300      	movs	r3, #0
 80085d0:	4601      	mov	r1, r0
 80085d2:	461a      	mov	r2, r3
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 b971 	b.w	80088bc <__register_exitproc>
	...

080085dc <__errno>:
 80085dc:	4b01      	ldr	r3, [pc, #4]	; (80085e4 <__errno+0x8>)
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	20000010 	.word	0x20000010

080085e8 <__libc_init_array>:
 80085e8:	b570      	push	{r4, r5, r6, lr}
 80085ea:	4d0d      	ldr	r5, [pc, #52]	; (8008620 <__libc_init_array+0x38>)
 80085ec:	4c0d      	ldr	r4, [pc, #52]	; (8008624 <__libc_init_array+0x3c>)
 80085ee:	1b64      	subs	r4, r4, r5
 80085f0:	10a4      	asrs	r4, r4, #2
 80085f2:	2600      	movs	r6, #0
 80085f4:	42a6      	cmp	r6, r4
 80085f6:	d109      	bne.n	800860c <__libc_init_array+0x24>
 80085f8:	4d0b      	ldr	r5, [pc, #44]	; (8008628 <__libc_init_array+0x40>)
 80085fa:	4c0c      	ldr	r4, [pc, #48]	; (800862c <__libc_init_array+0x44>)
 80085fc:	f000 f9d0 	bl	80089a0 <_init>
 8008600:	1b64      	subs	r4, r4, r5
 8008602:	10a4      	asrs	r4, r4, #2
 8008604:	2600      	movs	r6, #0
 8008606:	42a6      	cmp	r6, r4
 8008608:	d105      	bne.n	8008616 <__libc_init_array+0x2e>
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008610:	4798      	blx	r3
 8008612:	3601      	adds	r6, #1
 8008614:	e7ee      	b.n	80085f4 <__libc_init_array+0xc>
 8008616:	f855 3b04 	ldr.w	r3, [r5], #4
 800861a:	4798      	blx	r3
 800861c:	3601      	adds	r6, #1
 800861e:	e7f2      	b.n	8008606 <__libc_init_array+0x1e>
 8008620:	0800c088 	.word	0x0800c088
 8008624:	0800c088 	.word	0x0800c088
 8008628:	0800c088 	.word	0x0800c088
 800862c:	0800c08c 	.word	0x0800c08c

08008630 <malloc>:
 8008630:	4b02      	ldr	r3, [pc, #8]	; (800863c <malloc+0xc>)
 8008632:	4601      	mov	r1, r0
 8008634:	6818      	ldr	r0, [r3, #0]
 8008636:	f000 b88b 	b.w	8008750 <_malloc_r>
 800863a:	bf00      	nop
 800863c:	20000010 	.word	0x20000010

08008640 <free>:
 8008640:	4b02      	ldr	r3, [pc, #8]	; (800864c <free+0xc>)
 8008642:	4601      	mov	r1, r0
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	f000 b833 	b.w	80086b0 <_free_r>
 800864a:	bf00      	nop
 800864c:	20000010 	.word	0x20000010

08008650 <memcpy>:
 8008650:	440a      	add	r2, r1
 8008652:	4291      	cmp	r1, r2
 8008654:	f100 33ff 	add.w	r3, r0, #4294967295
 8008658:	d100      	bne.n	800865c <memcpy+0xc>
 800865a:	4770      	bx	lr
 800865c:	b510      	push	{r4, lr}
 800865e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008666:	4291      	cmp	r1, r2
 8008668:	d1f9      	bne.n	800865e <memcpy+0xe>
 800866a:	bd10      	pop	{r4, pc}

0800866c <memmove>:
 800866c:	4288      	cmp	r0, r1
 800866e:	b510      	push	{r4, lr}
 8008670:	eb01 0402 	add.w	r4, r1, r2
 8008674:	d902      	bls.n	800867c <memmove+0x10>
 8008676:	4284      	cmp	r4, r0
 8008678:	4623      	mov	r3, r4
 800867a:	d807      	bhi.n	800868c <memmove+0x20>
 800867c:	1e43      	subs	r3, r0, #1
 800867e:	42a1      	cmp	r1, r4
 8008680:	d008      	beq.n	8008694 <memmove+0x28>
 8008682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800868a:	e7f8      	b.n	800867e <memmove+0x12>
 800868c:	4402      	add	r2, r0
 800868e:	4601      	mov	r1, r0
 8008690:	428a      	cmp	r2, r1
 8008692:	d100      	bne.n	8008696 <memmove+0x2a>
 8008694:	bd10      	pop	{r4, pc}
 8008696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800869a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800869e:	e7f7      	b.n	8008690 <memmove+0x24>

080086a0 <memset>:
 80086a0:	4402      	add	r2, r0
 80086a2:	4603      	mov	r3, r0
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d100      	bne.n	80086aa <memset+0xa>
 80086a8:	4770      	bx	lr
 80086aa:	f803 1b01 	strb.w	r1, [r3], #1
 80086ae:	e7f9      	b.n	80086a4 <memset+0x4>

080086b0 <_free_r>:
 80086b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086b2:	2900      	cmp	r1, #0
 80086b4:	d048      	beq.n	8008748 <_free_r+0x98>
 80086b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ba:	9001      	str	r0, [sp, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f1a1 0404 	sub.w	r4, r1, #4
 80086c2:	bfb8      	it	lt
 80086c4:	18e4      	addlt	r4, r4, r3
 80086c6:	f000 f95f 	bl	8008988 <__malloc_lock>
 80086ca:	4a20      	ldr	r2, [pc, #128]	; (800874c <_free_r+0x9c>)
 80086cc:	9801      	ldr	r0, [sp, #4]
 80086ce:	6813      	ldr	r3, [r2, #0]
 80086d0:	4615      	mov	r5, r2
 80086d2:	b933      	cbnz	r3, 80086e2 <_free_r+0x32>
 80086d4:	6063      	str	r3, [r4, #4]
 80086d6:	6014      	str	r4, [r2, #0]
 80086d8:	b003      	add	sp, #12
 80086da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086de:	f000 b959 	b.w	8008994 <__malloc_unlock>
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	d90b      	bls.n	80086fe <_free_r+0x4e>
 80086e6:	6821      	ldr	r1, [r4, #0]
 80086e8:	1862      	adds	r2, r4, r1
 80086ea:	4293      	cmp	r3, r2
 80086ec:	bf04      	itt	eq
 80086ee:	681a      	ldreq	r2, [r3, #0]
 80086f0:	685b      	ldreq	r3, [r3, #4]
 80086f2:	6063      	str	r3, [r4, #4]
 80086f4:	bf04      	itt	eq
 80086f6:	1852      	addeq	r2, r2, r1
 80086f8:	6022      	streq	r2, [r4, #0]
 80086fa:	602c      	str	r4, [r5, #0]
 80086fc:	e7ec      	b.n	80086d8 <_free_r+0x28>
 80086fe:	461a      	mov	r2, r3
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	b10b      	cbz	r3, 8008708 <_free_r+0x58>
 8008704:	42a3      	cmp	r3, r4
 8008706:	d9fa      	bls.n	80086fe <_free_r+0x4e>
 8008708:	6811      	ldr	r1, [r2, #0]
 800870a:	1855      	adds	r5, r2, r1
 800870c:	42a5      	cmp	r5, r4
 800870e:	d10b      	bne.n	8008728 <_free_r+0x78>
 8008710:	6824      	ldr	r4, [r4, #0]
 8008712:	4421      	add	r1, r4
 8008714:	1854      	adds	r4, r2, r1
 8008716:	42a3      	cmp	r3, r4
 8008718:	6011      	str	r1, [r2, #0]
 800871a:	d1dd      	bne.n	80086d8 <_free_r+0x28>
 800871c:	681c      	ldr	r4, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	6053      	str	r3, [r2, #4]
 8008722:	4421      	add	r1, r4
 8008724:	6011      	str	r1, [r2, #0]
 8008726:	e7d7      	b.n	80086d8 <_free_r+0x28>
 8008728:	d902      	bls.n	8008730 <_free_r+0x80>
 800872a:	230c      	movs	r3, #12
 800872c:	6003      	str	r3, [r0, #0]
 800872e:	e7d3      	b.n	80086d8 <_free_r+0x28>
 8008730:	6825      	ldr	r5, [r4, #0]
 8008732:	1961      	adds	r1, r4, r5
 8008734:	428b      	cmp	r3, r1
 8008736:	bf04      	itt	eq
 8008738:	6819      	ldreq	r1, [r3, #0]
 800873a:	685b      	ldreq	r3, [r3, #4]
 800873c:	6063      	str	r3, [r4, #4]
 800873e:	bf04      	itt	eq
 8008740:	1949      	addeq	r1, r1, r5
 8008742:	6021      	streq	r1, [r4, #0]
 8008744:	6054      	str	r4, [r2, #4]
 8008746:	e7c7      	b.n	80086d8 <_free_r+0x28>
 8008748:	b003      	add	sp, #12
 800874a:	bd30      	pop	{r4, r5, pc}
 800874c:	200002f8 	.word	0x200002f8

08008750 <_malloc_r>:
 8008750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008752:	1ccd      	adds	r5, r1, #3
 8008754:	f025 0503 	bic.w	r5, r5, #3
 8008758:	3508      	adds	r5, #8
 800875a:	2d0c      	cmp	r5, #12
 800875c:	bf38      	it	cc
 800875e:	250c      	movcc	r5, #12
 8008760:	2d00      	cmp	r5, #0
 8008762:	4606      	mov	r6, r0
 8008764:	db01      	blt.n	800876a <_malloc_r+0x1a>
 8008766:	42a9      	cmp	r1, r5
 8008768:	d903      	bls.n	8008772 <_malloc_r+0x22>
 800876a:	230c      	movs	r3, #12
 800876c:	6033      	str	r3, [r6, #0]
 800876e:	2000      	movs	r0, #0
 8008770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008772:	f000 f909 	bl	8008988 <__malloc_lock>
 8008776:	4921      	ldr	r1, [pc, #132]	; (80087fc <_malloc_r+0xac>)
 8008778:	680a      	ldr	r2, [r1, #0]
 800877a:	4614      	mov	r4, r2
 800877c:	b99c      	cbnz	r4, 80087a6 <_malloc_r+0x56>
 800877e:	4f20      	ldr	r7, [pc, #128]	; (8008800 <_malloc_r+0xb0>)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	b923      	cbnz	r3, 800878e <_malloc_r+0x3e>
 8008784:	4621      	mov	r1, r4
 8008786:	4630      	mov	r0, r6
 8008788:	f000 f83c 	bl	8008804 <_sbrk_r>
 800878c:	6038      	str	r0, [r7, #0]
 800878e:	4629      	mov	r1, r5
 8008790:	4630      	mov	r0, r6
 8008792:	f000 f837 	bl	8008804 <_sbrk_r>
 8008796:	1c43      	adds	r3, r0, #1
 8008798:	d123      	bne.n	80087e2 <_malloc_r+0x92>
 800879a:	230c      	movs	r3, #12
 800879c:	6033      	str	r3, [r6, #0]
 800879e:	4630      	mov	r0, r6
 80087a0:	f000 f8f8 	bl	8008994 <__malloc_unlock>
 80087a4:	e7e3      	b.n	800876e <_malloc_r+0x1e>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	1b5b      	subs	r3, r3, r5
 80087aa:	d417      	bmi.n	80087dc <_malloc_r+0x8c>
 80087ac:	2b0b      	cmp	r3, #11
 80087ae:	d903      	bls.n	80087b8 <_malloc_r+0x68>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	441c      	add	r4, r3
 80087b4:	6025      	str	r5, [r4, #0]
 80087b6:	e004      	b.n	80087c2 <_malloc_r+0x72>
 80087b8:	6863      	ldr	r3, [r4, #4]
 80087ba:	42a2      	cmp	r2, r4
 80087bc:	bf0c      	ite	eq
 80087be:	600b      	streq	r3, [r1, #0]
 80087c0:	6053      	strne	r3, [r2, #4]
 80087c2:	4630      	mov	r0, r6
 80087c4:	f000 f8e6 	bl	8008994 <__malloc_unlock>
 80087c8:	f104 000b 	add.w	r0, r4, #11
 80087cc:	1d23      	adds	r3, r4, #4
 80087ce:	f020 0007 	bic.w	r0, r0, #7
 80087d2:	1ac2      	subs	r2, r0, r3
 80087d4:	d0cc      	beq.n	8008770 <_malloc_r+0x20>
 80087d6:	1a1b      	subs	r3, r3, r0
 80087d8:	50a3      	str	r3, [r4, r2]
 80087da:	e7c9      	b.n	8008770 <_malloc_r+0x20>
 80087dc:	4622      	mov	r2, r4
 80087de:	6864      	ldr	r4, [r4, #4]
 80087e0:	e7cc      	b.n	800877c <_malloc_r+0x2c>
 80087e2:	1cc4      	adds	r4, r0, #3
 80087e4:	f024 0403 	bic.w	r4, r4, #3
 80087e8:	42a0      	cmp	r0, r4
 80087ea:	d0e3      	beq.n	80087b4 <_malloc_r+0x64>
 80087ec:	1a21      	subs	r1, r4, r0
 80087ee:	4630      	mov	r0, r6
 80087f0:	f000 f808 	bl	8008804 <_sbrk_r>
 80087f4:	3001      	adds	r0, #1
 80087f6:	d1dd      	bne.n	80087b4 <_malloc_r+0x64>
 80087f8:	e7cf      	b.n	800879a <_malloc_r+0x4a>
 80087fa:	bf00      	nop
 80087fc:	200002f8 	.word	0x200002f8
 8008800:	200002fc 	.word	0x200002fc

08008804 <_sbrk_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4d06      	ldr	r5, [pc, #24]	; (8008820 <_sbrk_r+0x1c>)
 8008808:	2300      	movs	r3, #0
 800880a:	4604      	mov	r4, r0
 800880c:	4608      	mov	r0, r1
 800880e:	602b      	str	r3, [r5, #0]
 8008810:	f7f9 f93a 	bl	8001a88 <_sbrk>
 8008814:	1c43      	adds	r3, r0, #1
 8008816:	d102      	bne.n	800881e <_sbrk_r+0x1a>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	b103      	cbz	r3, 800881e <_sbrk_r+0x1a>
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	200003a0 	.word	0x200003a0

08008824 <_raise_r>:
 8008824:	291f      	cmp	r1, #31
 8008826:	b538      	push	{r3, r4, r5, lr}
 8008828:	4604      	mov	r4, r0
 800882a:	460d      	mov	r5, r1
 800882c:	d904      	bls.n	8008838 <_raise_r+0x14>
 800882e:	2316      	movs	r3, #22
 8008830:	6003      	str	r3, [r0, #0]
 8008832:	f04f 30ff 	mov.w	r0, #4294967295
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800883a:	b112      	cbz	r2, 8008842 <_raise_r+0x1e>
 800883c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008840:	b94b      	cbnz	r3, 8008856 <_raise_r+0x32>
 8008842:	4620      	mov	r0, r4
 8008844:	f000 f830 	bl	80088a8 <_getpid_r>
 8008848:	462a      	mov	r2, r5
 800884a:	4601      	mov	r1, r0
 800884c:	4620      	mov	r0, r4
 800884e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008852:	f000 b817 	b.w	8008884 <_kill_r>
 8008856:	2b01      	cmp	r3, #1
 8008858:	d00a      	beq.n	8008870 <_raise_r+0x4c>
 800885a:	1c59      	adds	r1, r3, #1
 800885c:	d103      	bne.n	8008866 <_raise_r+0x42>
 800885e:	2316      	movs	r3, #22
 8008860:	6003      	str	r3, [r0, #0]
 8008862:	2001      	movs	r0, #1
 8008864:	e7e7      	b.n	8008836 <_raise_r+0x12>
 8008866:	2400      	movs	r4, #0
 8008868:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800886c:	4628      	mov	r0, r5
 800886e:	4798      	blx	r3
 8008870:	2000      	movs	r0, #0
 8008872:	e7e0      	b.n	8008836 <_raise_r+0x12>

08008874 <raise>:
 8008874:	4b02      	ldr	r3, [pc, #8]	; (8008880 <raise+0xc>)
 8008876:	4601      	mov	r1, r0
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	f7ff bfd3 	b.w	8008824 <_raise_r>
 800887e:	bf00      	nop
 8008880:	20000010 	.word	0x20000010

08008884 <_kill_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4d07      	ldr	r5, [pc, #28]	; (80088a4 <_kill_r+0x20>)
 8008888:	2300      	movs	r3, #0
 800888a:	4604      	mov	r4, r0
 800888c:	4608      	mov	r0, r1
 800888e:	4611      	mov	r1, r2
 8008890:	602b      	str	r3, [r5, #0]
 8008892:	f7f9 f8de 	bl	8001a52 <_kill>
 8008896:	1c43      	adds	r3, r0, #1
 8008898:	d102      	bne.n	80088a0 <_kill_r+0x1c>
 800889a:	682b      	ldr	r3, [r5, #0]
 800889c:	b103      	cbz	r3, 80088a0 <_kill_r+0x1c>
 800889e:	6023      	str	r3, [r4, #0]
 80088a0:	bd38      	pop	{r3, r4, r5, pc}
 80088a2:	bf00      	nop
 80088a4:	200003a0 	.word	0x200003a0

080088a8 <_getpid_r>:
 80088a8:	f7f9 b8cb 	b.w	8001a42 <_getpid>

080088ac <strcpy>:
 80088ac:	4603      	mov	r3, r0
 80088ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088b2:	f803 2b01 	strb.w	r2, [r3], #1
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	d1f9      	bne.n	80088ae <strcpy+0x2>
 80088ba:	4770      	bx	lr

080088bc <__register_exitproc>:
 80088bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800897c <__register_exitproc+0xc0>
 80088c4:	4606      	mov	r6, r0
 80088c6:	f8d8 0000 	ldr.w	r0, [r8]
 80088ca:	461f      	mov	r7, r3
 80088cc:	460d      	mov	r5, r1
 80088ce:	4691      	mov	r9, r2
 80088d0:	f000 f856 	bl	8008980 <__retarget_lock_acquire_recursive>
 80088d4:	4b25      	ldr	r3, [pc, #148]	; (800896c <__register_exitproc+0xb0>)
 80088d6:	681c      	ldr	r4, [r3, #0]
 80088d8:	b934      	cbnz	r4, 80088e8 <__register_exitproc+0x2c>
 80088da:	4c25      	ldr	r4, [pc, #148]	; (8008970 <__register_exitproc+0xb4>)
 80088dc:	601c      	str	r4, [r3, #0]
 80088de:	4b25      	ldr	r3, [pc, #148]	; (8008974 <__register_exitproc+0xb8>)
 80088e0:	b113      	cbz	r3, 80088e8 <__register_exitproc+0x2c>
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80088e8:	6863      	ldr	r3, [r4, #4]
 80088ea:	2b1f      	cmp	r3, #31
 80088ec:	dd07      	ble.n	80088fe <__register_exitproc+0x42>
 80088ee:	f8d8 0000 	ldr.w	r0, [r8]
 80088f2:	f000 f847 	bl	8008984 <__retarget_lock_release_recursive>
 80088f6:	f04f 30ff 	mov.w	r0, #4294967295
 80088fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fe:	b34e      	cbz	r6, 8008954 <__register_exitproc+0x98>
 8008900:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8008904:	b988      	cbnz	r0, 800892a <__register_exitproc+0x6e>
 8008906:	4b1c      	ldr	r3, [pc, #112]	; (8008978 <__register_exitproc+0xbc>)
 8008908:	b923      	cbnz	r3, 8008914 <__register_exitproc+0x58>
 800890a:	f8d8 0000 	ldr.w	r0, [r8]
 800890e:	f000 f838 	bl	8008982 <__retarget_lock_release>
 8008912:	e7f0      	b.n	80088f6 <__register_exitproc+0x3a>
 8008914:	f44f 7084 	mov.w	r0, #264	; 0x108
 8008918:	f7ff fe8a 	bl	8008630 <malloc>
 800891c:	2800      	cmp	r0, #0
 800891e:	d0f4      	beq.n	800890a <__register_exitproc+0x4e>
 8008920:	2300      	movs	r3, #0
 8008922:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8008926:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800892a:	6863      	ldr	r3, [r4, #4]
 800892c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8008930:	2201      	movs	r2, #1
 8008932:	409a      	lsls	r2, r3
 8008934:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8008938:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800893c:	4313      	orrs	r3, r2
 800893e:	2e02      	cmp	r6, #2
 8008940:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8008944:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8008948:	bf02      	ittt	eq
 800894a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800894e:	431a      	orreq	r2, r3
 8008950:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8008954:	6863      	ldr	r3, [r4, #4]
 8008956:	f8d8 0000 	ldr.w	r0, [r8]
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	3302      	adds	r3, #2
 800895e:	6062      	str	r2, [r4, #4]
 8008960:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8008964:	f000 f80e 	bl	8008984 <__retarget_lock_release_recursive>
 8008968:	2000      	movs	r0, #0
 800896a:	e7c6      	b.n	80088fa <__register_exitproc+0x3e>
 800896c:	2000038c 	.word	0x2000038c
 8008970:	20000300 	.word	0x20000300
 8008974:	00000000 	.word	0x00000000
 8008978:	08008631 	.word	0x08008631
 800897c:	20000074 	.word	0x20000074

08008980 <__retarget_lock_acquire_recursive>:
 8008980:	4770      	bx	lr

08008982 <__retarget_lock_release>:
 8008982:	4770      	bx	lr

08008984 <__retarget_lock_release_recursive>:
 8008984:	4770      	bx	lr
	...

08008988 <__malloc_lock>:
 8008988:	4801      	ldr	r0, [pc, #4]	; (8008990 <__malloc_lock+0x8>)
 800898a:	f7ff bff9 	b.w	8008980 <__retarget_lock_acquire_recursive>
 800898e:	bf00      	nop
 8008990:	20000398 	.word	0x20000398

08008994 <__malloc_unlock>:
 8008994:	4801      	ldr	r0, [pc, #4]	; (800899c <__malloc_unlock+0x8>)
 8008996:	f7ff bff5 	b.w	8008984 <__retarget_lock_release_recursive>
 800899a:	bf00      	nop
 800899c:	20000398 	.word	0x20000398

080089a0 <_init>:
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a2:	bf00      	nop
 80089a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a6:	bc08      	pop	{r3}
 80089a8:	469e      	mov	lr, r3
 80089aa:	4770      	bx	lr

080089ac <_fini>:
 80089ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ae:	bf00      	nop
 80089b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b2:	bc08      	pop	{r3}
 80089b4:	469e      	mov	lr, r3
 80089b6:	4770      	bx	lr
