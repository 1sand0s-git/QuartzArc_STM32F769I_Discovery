
STM32 F7D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008820  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000217c  08008a18  08008a18  00018a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab94  0800ab94  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab94  0800ab94  0001ab94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab9c  0800ab9c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab9c  0800ab9c  0001ab9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aba0  0800aba0  0001aba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800aba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000078  0800ac1c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  0800ac1c  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_line   00020489  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0003bd72  00000000  00000000  0004052f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007837  00000000  00000000  0007c2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  00083ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00147df5  00000000  00000000  00085380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000016f0  00000000  00000000  001cd178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a124  00000000  00000000  001ce868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020898c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ea8  00000000  00000000  002089e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000078 	.word	0x20000078
 8000214:	00000000 	.word	0x00000000
 8000218:	08008a00 	.word	0x08008a00

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000007c 	.word	0x2000007c
 8000234:	08008a00 	.word	0x08008a00

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000546:	490e      	ldr	r1, [pc, #56]	; (8000580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000548:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800055c:	4c0b      	ldr	r4, [pc, #44]	; (800058c <LoopFillZerobss+0x26>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800056a:	f001 fb47 	bl	8001bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056e:	f008 f86b 	bl	8008648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000572:	f000 fd63 	bl	800103c <main>
  bx  lr    
 8000576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000578:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000580:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000584:	0800aba4 	.word	0x0800aba4
  ldr r2, =_sbss
 8000588:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800058c:	200003a8 	.word	0x200003a8

08000590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC_IRQHandler>
	...

08000594 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000598:	f3bf 8f4f 	dsb	sy
}
 800059c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800059e:	f3bf 8f6f 	isb	sy
}
 80005a2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <SCB_EnableICache+0x48>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b2:	f3bf 8f6f 	isb	sy
}
 80005b6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <SCB_EnableICache+0x48>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <SCB_EnableICache+0x48>)
 80005be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c4:	f3bf 8f4f 	dsb	sy
}
 80005c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ca:	f3bf 8f6f 	isb	sy
}
 80005ce:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <SCB_EnableDCache+0x9c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <SCB_EnableDCache+0x9c>)
 80005f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005fa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	0b5b      	lsrs	r3, r3, #13
 8000600:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000604:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	08db      	lsrs	r3, r3, #3
 800060a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800060e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	015a      	lsls	r2, r3, #5
 8000614:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000618:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800061e:	4917      	ldr	r1, [pc, #92]	; (800067c <SCB_EnableDCache+0x9c>)
 8000620:	4313      	orrs	r3, r2
 8000622:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1e5a      	subs	r2, r3, #1
 800062a:	60ba      	str	r2, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf14      	ite	ne
 8000630:	2301      	movne	r3, #1
 8000632:	2300      	moveq	r3, #0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d000      	beq.n	800063c <SCB_EnableDCache+0x5c>
      do {
 800063a:	e7e9      	b.n	8000610 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	1e5a      	subs	r2, r3, #1
 8000640:	60fa      	str	r2, [r7, #12]
 8000642:	2b00      	cmp	r3, #0
 8000644:	bf14      	ite	ne
 8000646:	2301      	movne	r3, #1
 8000648:	2300      	moveq	r3, #0
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d000      	beq.n	8000652 <SCB_EnableDCache+0x72>
    do {
 8000650:	e7d9      	b.n	8000606 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000652:	f3bf 8f4f 	dsb	sy
}
 8000656:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <SCB_EnableDCache+0x9c>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <SCB_EnableDCache+0x9c>)
 800065e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000662:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000664:	f3bf 8f4f 	dsb	sy
}
 8000668:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800066a:	f3bf 8f6f 	isb	sy
}
 800066e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks
//Also enables all GPIO ports, and both DMA1 and DMA2 peripherals
//
//Returns QA_OK if successful, or QA_Fail if initialization failed
QA_Result SystemInitialize(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b0c6      	sub	sp, #280	; 0x118
 8000684:	af00      	add	r7, sp, #0

  //------------------------------------
  //Enable CPU Instruction & Data Caches
  SCB_EnableICache();
 8000686:	f7ff ff85 	bl	8000594 <SCB_EnableICache>
  SCB_EnableDCache();
 800068a:	f7ff ffa9 	bl	80005e0 <SCB_EnableDCache>

	//----------------------
	//Enable ART Accelerator
  __HAL_FLASH_ART_ENABLE();
 800068e:	4b67      	ldr	r3, [pc, #412]	; (800082c <_Z16SystemInitializev+0x1ac>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a66      	ldr	r2, [pc, #408]	; (800082c <_Z16SystemInitializev+0x1ac>)
 8000694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000698:	6013      	str	r3, [r2, #0]

  //---------------------
  //Enable Flash Prefetch
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800069a:	4b64      	ldr	r3, [pc, #400]	; (800082c <_Z16SystemInitializev+0x1ac>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a63      	ldr	r2, [pc, #396]	; (800082c <_Z16SystemInitializev+0x1ac>)
 80006a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a4:	6013      	str	r3, [r2, #0]

  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a6:	2003      	movs	r0, #3
 80006a8:	f001 fe7a 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>

  //------------
  //Init SysTick
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f001 fd0f 	bl	80020d0 <HAL_InitTick>

  //------------------------------
  //Configure LSE Drive Capability
  HAL_PWR_EnableBkUpAccess();
 80006b2:	f003 f9af 	bl	8003a14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b6:	4b5e      	ldr	r3, [pc, #376]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006ba:	4a5d      	ldr	r2, [pc, #372]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006bc:	f023 0318 	bic.w	r3, r3, #24
 80006c0:	6713      	str	r3, [r2, #112]	; 0x70

  //------------------------------------------------
  //Configure Main Internal Regulator Output Voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b5b      	ldr	r3, [pc, #364]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	4a5a      	ldr	r2, [pc, #360]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	6413      	str	r3, [r2, #64]	; 0x40
 80006ce:	4b58      	ldr	r3, [pc, #352]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006da:	4b56      	ldr	r3, [pc, #344]	; (8000834 <_Z16SystemInitializev+0x1b4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a55      	ldr	r2, [pc, #340]	; (8000834 <_Z16SystemInitializev+0x1b4>)
 80006e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	4b53      	ldr	r3, [pc, #332]	; (8000834 <_Z16SystemInitializev+0x1b4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80006f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    //------------
    //Setup Clocks

  //------------------------------
  //Enable Clock Sources and Setup
  RCC_OscInitTypeDef RCC_OscInit = {0};
 80006f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006f6:	2234      	movs	r2, #52	; 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f008 f800 	bl	8008700 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE | //Define HSE (High Speed External) oscillator to be configured (used for main system clock)
 8000700:	2305      	movs	r3, #5
 8000702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  		                         RCC_OSCILLATORTYPE_LSE;  //Define LSE (Low Speed External) oscillator to be configured (used for RTC - Real Time Clock)
  RCC_OscInit.HSEState       = RCC_HSE_ON;              //Enable HSE
 8000706:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800070a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInit.LSEState       = RCC_LSE_ON;              //Enable LSE
 800070e:	2301      	movs	r3, #1
 8000710:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;              //Enable primary PLL
 8000714:	2302      	movs	r3, #2
 8000716:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;       //Set primary PLL source to HSE
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    //Set primary PLL values required for 216Mhz system clock
  RCC_OscInit.PLL.PLLM       = 25;
 8000722:	2319      	movs	r3, #25
 8000724:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInit.PLL.PLLN       = 432;
 8000728:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800072c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInit.PLL.PLLQ       = 4;
 8000736:	2304      	movs	r3, #4
 8000738:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {  //Initialize Oscillators using values in init structure
 800073c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000740:	4618      	mov	r0, r3
 8000742:	f003 f9c7 	bl	8003ad4 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <_Z16SystemInitializev+0xda>
  	return QA_Fail;
 8000756:	2301      	movs	r3, #1
 8000758:	e123      	b.n	80009a2 <_Z16SystemInitializev+0x322>
  }

  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b35      	ldr	r3, [pc, #212]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	4a34      	ldr	r2, [pc, #208]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6453      	str	r3, [r2, #68]	; 0x44
 8000766:	4b32      	ldr	r3, [pc, #200]	; (8000830 <_Z16SystemInitializev+0x1b0>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
 8000770:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  //---------------------
  //Enable Overdrive Mode
  //
  //This is required to provide best system stability given that we are running at the maximum clock rate of 216MHz for the STM32F769I device
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000772:	f003 f95f 	bl	8003a34 <HAL_PWREx_EnableOverDrive>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf14      	ite	ne
 800077c:	2301      	movne	r3, #1
 800077e:	2300      	moveq	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <_Z16SystemInitializev+0x10a>
  	return QA_Fail;
 8000786:	2301      	movs	r3, #1
 8000788:	e10b      	b.n	80009a2 <_Z16SystemInitializev+0x322>
  }

  //---------------------------
  //Initialize CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 800078a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |      //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 800079a:	230f      	movs	r3, #15
 800079c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  		                         RCC_CLOCKTYPE_SYSCLK |
                               RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;  //Define primary PLL clock as system clock source
 80007a0:	2302      	movs	r3, #2
 80007a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;          //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 216MHz
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV4;            //Set clock divider for peripheral bus 1 (APB1), DIV4 provides an APB1 frequency of 54MHz
 80007ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;            //Set clock divider for peripheral bus 2 (APB2), DIV2 provides an APB2 frequency of 108MHz
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_7) != HAL_OK) { //Initialize system clocks using required values, and setting Flash latency to 7 cycles
 80007bc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007c0:	2107      	movs	r1, #7
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fc34 	bl	8004030 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf14      	ite	ne
 80007ce:	2301      	movne	r3, #1
 80007d0:	2300      	moveq	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <_Z16SystemInitializev+0x15c>
  	return QA_Fail;
 80007d8:	2301      	movs	r3, #1
 80007da:	e0e2      	b.n	80009a2 <_Z16SystemInitializev+0x322>
  }

  //----------------------------
  //Initialize Peripheral Clocks
  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit = {0};
 80007dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007e0:	2290      	movs	r2, #144	; 0x90
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f007 ff8b 	bl	8008700 <memset>
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC |
 80007ea:	2328      	movs	r3, #40	; 0x28
 80007ec:	643b      	str	r3, [r7, #64]	; 0x40
  		                                     RCC_PERIPHCLK_LTDC;

    //Define settings for PLLSAI, as this PLL is also used as the clock source for the LTDC peripheral which we require to run the LCD screen
	RCC_PeriphClkInit.PLLSAI.PLLSAIN       = 384;
 80007ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007f2:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_PeriphClkInit.PLLSAI.PLLSAIP       = RCC_PLLSAIP_DIV8;
 80007f4:	2303      	movs	r3, #3
 80007f6:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_PeriphClkInit.PLLSAI.PLLSAIR       = 7;
 80007f8:	2307      	movs	r3, #7
 80007fa:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_PeriphClkInit.PLLSAI.PLLSAIQ       = 8;
 80007fc:	2308      	movs	r3, #8
 80007fe:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_PeriphClkInit.PLLSAIDivQ           = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_PeriphClkInit.PLLSAIDivR           = RCC_PLLSAIDIVR_2;
 8000804:	2300      	movs	r3, #0
 8000806:	66fb      	str	r3, [r7, #108]	; 0x6c

  RCC_PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE; //Set the LSE oscillator as the clock source for the Real Time Clock
 8000808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit) != HAL_OK) { //Initialize the peripheral clocks used the required values
 800080e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fde2 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d007      	beq.n	8000838 <_Z16SystemInitializev+0x1b8>
  	return QA_Fail;
 8000828:	2301      	movs	r3, #1
 800082a:	e0ba      	b.n	80009a2 <_Z16SystemInitializev+0x322>
 800082c:	40023c00 	.word	0x40023c00
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000
  }

  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b5c      	ldr	r3, [pc, #368]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	4a5b      	ldr	r2, [pc, #364]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	6313      	str	r3, [r2, #48]	; 0x30
 8000844:	4b59      	ldr	r3, [pc, #356]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
 800084e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000850:	4b56      	ldr	r3, [pc, #344]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a55      	ldr	r2, [pc, #340]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
 800085c:	4b53      	ldr	r3, [pc, #332]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	f003 0302 	and.w	r3, r3, #2
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000868:	4b50      	ldr	r3, [pc, #320]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	4a4f      	ldr	r2, [pc, #316]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6313      	str	r3, [r2, #48]	; 0x30
 8000874:	4b4d      	ldr	r3, [pc, #308]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
 800087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000880:	4b4a      	ldr	r3, [pc, #296]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	4a49      	ldr	r2, [pc, #292]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	6313      	str	r3, [r2, #48]	; 0x30
 800088c:	4b47      	ldr	r3, [pc, #284]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	f003 0308 	and.w	r3, r3, #8
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000898:	4b44      	ldr	r3, [pc, #272]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a43      	ldr	r2, [pc, #268]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
 80008a4:	4b41      	ldr	r3, [pc, #260]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b0:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a3d      	ldr	r2, [pc, #244]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 0320 	and.w	r3, r3, #32
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c8:	4b38      	ldr	r3, [pc, #224]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a37      	ldr	r2, [pc, #220]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b35      	ldr	r3, [pc, #212]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80008dc:	f107 0318 	add.w	r3, r7, #24
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	f107 0318 	add.w	r3, r7, #24
 80008e6:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <_Z16SystemInitializev+0x32c>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a27      	ldr	r2, [pc, #156]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800090e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a1f      	ldr	r2, [pc, #124]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f403 7200 	and.w	r2, r3, #512	; 0x200
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4a17      	ldr	r2, [pc, #92]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800094e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000952:	6313      	str	r3, [r2, #48]	; 0x30
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	681b      	ldr	r3, [r3, #0]

  //-----------------
  //Enable DMA Clocks
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800096e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000972:	6313      	str	r3, [r2, #48]	; 0x30
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000978:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	681b      	ldr	r3, [r3, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <_Z16SystemInitializev+0x32c>)
 800098a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800098e:	6313      	str	r3, [r2, #48]	; 0x30
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <_Z16SystemInitializev+0x32c>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000998:	463b      	mov	r3, r7
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	463b      	mov	r3, r7
 800099e:	681b      	ldr	r3, [r3, #0]

  //Return
  return QA_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800

080009b0 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HardFault_Handler+0x1c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f005 f8c8 	bl	8005b5e <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <HardFault_Handler+0x20>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f005 f8c3 	bl	8005b5e <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 80009d8:	e7fe      	b.n	80009d8 <HardFault_Handler+0x18>
 80009da:	bf00      	nop
 80009dc:	20000130 	.word	0x20000130
 80009e0:	20000134 	.word	0x20000134

080009e4 <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <MemManage_Handler+0x1c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f005 f8b6 	bl	8005b5e <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <MemManage_Handler+0x20>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f005 f8b1 	bl	8005b5e <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x18>
 80009fe:	bf00      	nop
 8000a00:	20000130 	.word	0x20000130
 8000a04:	20000134 	.word	0x20000134

08000a08 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <BusFault_Handler+0x1c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f005 f8a4 	bl	8005b5e <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <BusFault_Handler+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f005 f89f 	bl	8005b5e <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000a20:	e7fe      	b.n	8000a20 <BusFault_Handler+0x18>
 8000a22:	bf00      	nop
 8000a24:	20000130 	.word	0x20000130
 8000a28:	20000134 	.word	0x20000134

08000a2c <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	GPIO_UserLED_Red->on();
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <UsageFault_Handler+0x1c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f005 f892 	bl	8005b5e <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Green->on();
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <UsageFault_Handler+0x20>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f005 f88d 	bl	8005b5e <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x18>
 8000a46:	bf00      	nop
 8000a48:	20000130 	.word	0x20000130
 8000a4c:	20000134 	.word	0x20000134

08000a50 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000a7e:	f001 fb57 	bl	8002130 <HAL_IncTick>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <USART1_IRQHandler>:
  //Interrupt Handler Methods


//USART1_IRQHandler
//Interrupt Handler Method
void USART1_IRQHandler(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL);
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <USART1_IRQHandler+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 fad8 	bl	8008048 <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000013c 	.word	0x2000013c

08000aa0 <_ZN7QAD_FMCC1Ev>:
private:

	SDRAM_HandleTypeDef m_sHandle;
	QA_InitState        m_eState;

	QAD_FMC() :
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	  m_eState(QA_NotInitialized) {}
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2204      	movs	r2, #4
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2208      	movs	r2, #8
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2220      	movs	r2, #32
 8000ad0:	619a      	str	r2, [r3, #24]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2230      	movs	r2, #48	; 0x30
 8000ad6:	61da      	str	r2, [r3, #28]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f240 6203 	movw	r2, #1539	; 0x603
 8000afa:	631a      	str	r2, [r3, #48]	; 0x30
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <_ZN7QAD_FMC3getEv>:
public:

	QAD_FMC(const QAD_FMC& other) = delete;
	QAD_FMC& operator=(const QAD_FMC& other) = delete;

  static QAD_FMC& get(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  	static QAD_FMC instance;
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <_ZN7QAD_FMC3getEv+0x48>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f3bf 8f5b 	dmb	ish
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bf0c      	ite	eq
 8000b2a:	2301      	moveq	r3, #1
 8000b2c:	2300      	movne	r3, #0
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d010      	beq.n	8000b56 <_ZN7QAD_FMC3getEv+0x42>
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <_ZN7QAD_FMC3getEv+0x48>)
 8000b36:	f007 fd2d 	bl	8008594 <__cxa_guard_acquire>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	bf14      	ite	ne
 8000b40:	2301      	movne	r3, #1
 8000b42:	2300      	moveq	r3, #0
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <_ZN7QAD_FMC3getEv+0x42>
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <_ZN7QAD_FMC3getEv+0x4c>)
 8000b4c:	f7ff ffa8 	bl	8000aa0 <_ZN7QAD_FMCC1Ev>
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <_ZN7QAD_FMC3getEv+0x48>)
 8000b52:	f007 fd2b 	bl	80085ac <__cxa_guard_release>
  	return instance;
 8000b56:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <_ZN7QAD_FMC3getEv+0x4c>)
  }
 8000b58:	4618      	mov	r0, r3
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000100 	.word	0x20000100
 8000b60:	20000094 	.word	0x20000094

08000b64 <_ZN7QAD_FMC4initEv>:

  static QA_InitState getState(void) {
  	return get().m_eState;
  }

  static QA_Result init(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000b68:	f7ff ffd4 	bl	8000b14 <_ZN7QAD_FMC3getEv>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f004 fe74 	bl	800585c <_ZN7QAD_FMC8imp_initEv>
 8000b74:	4603      	mov	r3, r0
  }
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_ZN7QAD_FMC4testEv>:

  static QA_Result test(void) {
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  	return get().imp_test();
 8000b7e:	f7ff ffc9 	bl	8000b14 <_ZN7QAD_FMC3getEv>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f004 ff95 	bl	8005ab4 <_ZN7QAD_FMC8imp_testEv>
 8000b8a:	4603      	mov	r3, r0
  }
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_ZN14QAT_FIFOBufferC1Et>:
public:

	  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;
	QAT_FIFOBuffer(uint16_t uSize) :
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fc4c 	bl	8001440 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	887a      	ldrh	r2, [r7, #2]
 8000bac:	809a      	strh	r2, [r3, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	80da      	strh	r2, [r3, #6]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	811a      	strh	r2, [r3, #8]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Disable default constructor
	QAS_Serial_Dev_Base() = delete;

	//Constructor
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) :
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	4608      	mov	r0, r1
 8000bce:	4611      	mov	r1, r2
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	817b      	strh	r3, [r7, #10]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	813b      	strh	r3, [r7, #8]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),
		m_eInitState(QA_NotInitialized),
		m_eTXState(PeriphInactive),
		m_eRXState(PeriphInactive),
		m_eDeviceType(eDeviceType) {}
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	3304      	adds	r3, #4
 8000be8:	f107 020a 	add.w	r2, r7, #10
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fc42 	bl	8001478 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	f107 0208 	add.w	r2, r7, #8
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fc3a 	bl	8001478 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2200      	movs	r2, #0
 8000c08:	731a      	strb	r2, [r3, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	735a      	strb	r2, [r3, #13]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2200      	movs	r2, #0
 8000c14:	739a      	strb	r2, [r3, #14]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	79fa      	ldrb	r2, [r7, #7]
 8000c1a:	73da      	strb	r2, [r3, #15]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08008b24 	.word	0x08008b24

08000c2c <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	769a      	strb	r2, [r3, #26]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2225      	movs	r2, #37	; 0x25
 8000c88:	76da      	strb	r2, [r3, #27]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	331c      	adds	r3, #28
 8000c8e:	2284      	movs	r2, #132	; 0x84
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f007 fd34 	bl	8008700 <memset>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	std::unique_ptr<QAD_UART> m_pUART;

public:

	QAS_Serial_Dev_UART() = delete;
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.txfifo_size, sInit.rxfifo_size, DT_UART),
		m_ePeriph(sInit.uart.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.uart)) {}
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	8b99      	ldrh	r1, [r3, #28]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	8bda      	ldrh	r2, [r3, #30]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f7ff ff7b 	bl	8000bc4 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.uart.uart),
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.uart)) {}
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	741a      	strb	r2, [r3, #16]
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3314      	adds	r3, #20
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fbe2 	bl	80014ae <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	0800ab78 	.word	0x0800ab78

08000cf8 <_ZN11QAT_Vector2C1Ett>:

  //Constructors
  QAT_Vector2() :
    x(0), y(0) {}

  QAT_Vector2(uint16_t x, uint16_t y) :
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	807b      	strh	r3, [r7, #2]
 8000d04:	4613      	mov	r3, r2
 8000d06:	803b      	strh	r3, [r7, #0]
    x(x), y(y) {}
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	801a      	strh	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	883a      	ldrh	r2, [r7, #0]
 8000d12:	805a      	strh	r2, [r3, #2]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_ZN11QAT_Vector2C1ERKS_>:

  QAT_Vector2(const QAT_Vector2& other) :
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
    x(other.x),
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	881a      	ldrh	r2, [r3, #0]
		y(other.y) {}
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	801a      	strh	r2, [r3, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	885a      	ldrh	r2, [r3, #2]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	805a      	strh	r2, [r3, #2]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 fbd5 	bl	8001502 <_ZNSaIP12QAS_LCD_FontED1Ev>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fbb8 	bl	80014e2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ffeb 	bl	8000d62 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_ZN15QAS_LCD_FontMgrC1Ev>:
public:

	//--------------------------
	//Constructors / Destructors

	QAS_LCD_FontMgr() :
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
		m_iCurrentIdx(-1),
		m_pCurrent(NULL),
		m_pBuffer(NULL),
		m_uColor(0x0000) {
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffeb 	bl	8000d7c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEC1Ev>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	22ff      	movs	r2, #255	; 0xff
 8000daa:	731a      	strb	r2, [r3, #12]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	831a      	strh	r2, [r3, #24]
		m_vFonts.clear();
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fbde 	bl	8001582 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
	}
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_ZN15QAS_LCD_FontMgrD1Ev>:

	~QAS_LCD_FontMgr() {
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	7bfc      	ldrb	r4, [r7, #15]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fbdc 	bl	800159e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8000de6:	4603      	mov	r3, r0
 8000de8:	429c      	cmp	r4, r3
 8000dea:	bf34      	ite	cc
 8000dec:	2301      	movcc	r3, #1
 8000dee:	2300      	movcs	r3, #0
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d011      	beq.n	8000e1a <_ZN15QAS_LCD_FontMgrD1Ev+0x4a>
			delete m_vFonts[i];
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 fbde 	bl	80015be <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8000e02:	4603      	mov	r3, r0
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <_ZN15QAS_LCD_FontMgrD1Ev+0x42>
 8000e0a:	2130      	movs	r1, #48	; 0x30
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 fbbf 	bl	8008590 <_ZdlPvj>
		for (uint8_t i=0; i<m_vFonts.size(); i++) {
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	3301      	adds	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	e7e0      	b.n	8000ddc <_ZN15QAS_LCD_FontMgrD1Ev+0xc>
	~QAS_LCD_FontMgr() {
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fb95 	bl	800154c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>
		}
	}
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4618      	mov	r0, r3
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd90      	pop	{r4, r7, pc}

08000e2c <_ZN7QAS_LCDC1Ev>:
	QAD_LTDC_Buffer*  m_pDrawBuffer;
	uint16_t          m_uDrawColor;

  QAS_LCD_FontMgr   m_cFontMgr;

	QAS_LCD() :
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized),
		m_pDrawBuffer(NULL),
		m_uDrawColor(0x0000) {
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	811a      	strh	r2, [r3, #8]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	330c      	adds	r3, #12
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ffa3 	bl	8000d96 <_ZN15QAS_LCD_FontMgrC1Ev>

	}
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_ZN7QAS_LCDD1Ev>:
class QAS_LCD {
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	330c      	adds	r3, #12
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffb2 	bl	8000dd0 <_ZN15QAS_LCD_FontMgrD1Ev>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <__tcf_0>:

  QAS_LCD(const QAS_LCD&) = delete;
  QAS_LCD& operator=(const QAS_LCD&) = delete;

  static QAS_LCD& get() {
  	static QAS_LCD instance;
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4801      	ldr	r0, [pc, #4]	; (8000e84 <__tcf_0+0xc>)
 8000e7e:	f7ff ffec 	bl	8000e5a <_ZN7QAS_LCDD1Ev>
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000104 	.word	0x20000104

08000e88 <_ZN7QAS_LCD3getEv>:
  static QAS_LCD& get() {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  	static QAS_LCD instance;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <_ZN7QAS_LCD3getEv+0x50>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	f3bf 8f5b 	dmb	ish
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2301      	moveq	r3, #1
 8000ea0:	2300      	movne	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d013      	beq.n	8000ed0 <_ZN7QAS_LCD3getEv+0x48>
 8000ea8:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <_ZN7QAS_LCD3getEv+0x50>)
 8000eaa:	f007 fb73 	bl	8008594 <__cxa_guard_acquire>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	bf14      	ite	ne
 8000eb4:	2301      	movne	r3, #1
 8000eb6:	2300      	moveq	r3, #0
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d008      	beq.n	8000ed0 <_ZN7QAS_LCD3getEv+0x48>
 8000ebe:	4807      	ldr	r0, [pc, #28]	; (8000edc <_ZN7QAS_LCD3getEv+0x54>)
 8000ec0:	f7ff ffb4 	bl	8000e2c <_ZN7QAS_LCDC1Ev>
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <_ZN7QAS_LCD3getEv+0x50>)
 8000ec6:	f007 fb71 	bl	80085ac <__cxa_guard_release>
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <_ZN7QAS_LCD3getEv+0x58>)
 8000ecc:	f007 fbaf 	bl	800862e <atexit>
  	return instance;
 8000ed0:	4b02      	ldr	r3, [pc, #8]	; (8000edc <_ZN7QAS_LCD3getEv+0x54>)
  }
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000012c 	.word	0x2000012c
 8000edc:	20000104 	.word	0x20000104
 8000ee0:	08000e79 	.word	0x08000e79

08000ee4 <_ZN7QAS_LCD4initEv>:

    //----------------------
    //Initialization Methods

  static QA_Result init(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  	return get().imp_init();
 8000ee8:	f7ff ffce 	bl	8000e88 <_ZN7QAS_LCD3getEv>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f005 ff42 	bl	8006d78 <_ZN7QAS_LCD8imp_initEv>
 8000ef4:	4603      	mov	r3, r0
  }
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <_ZN7QAS_LCD10flipLayer0Ev>:
  }

    //-----------------------
    //Rendering Setup Methods

  static void flipLayer0(void) {
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  	get().imp_flipLayer0();
 8000efe:	f7ff ffc3 	bl	8000e88 <_ZN7QAS_LCD3getEv>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f005 ff89 	bl	8006e1c <_ZN7QAS_LCD14imp_flipLayer0Ev>
  }
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <_ZN7QAS_LCD10flipLayer1Ev>:

  static void flipLayer1(void) {
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  	get().imp_flipLayer1();
 8000f12:	f7ff ffb9 	bl	8000e88 <_ZN7QAS_LCD3getEv>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f005 ff89 	bl	8006e30 <_ZN7QAS_LCD14imp_flipLayer1Ev>
  }
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>:

  static void setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	71fb      	strb	r3, [r7, #7]
  	get().imp_setDrawBuffer(eLayer);
 8000f2c:	f7ff ffac 	bl	8000e88 <_ZN7QAS_LCD3getEv>
 8000f30:	4602      	mov	r2, r0
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4610      	mov	r0, r2
 8000f38:	f005 ff84 	bl	8006e44 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>
  }
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_ZN7QAS_LCD12setDrawColorEt>:

  static void setDrawColor(uint16_t uColor) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  	get().imp_setDrawColor(uColor);
 8000f4e:	f7ff ff9b 	bl	8000e88 <_ZN7QAS_LCD3getEv>
 8000f52:	4602      	mov	r2, r0
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4610      	mov	r0, r2
 8000f5a:	f005 ff98 	bl	8006e8e <_ZN7QAS_LCD16imp_setDrawColorEt>
  }
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_ZN7QAS_LCD11clearBufferEv>:

    //-----------------
    //Rendering Methods

  static void clearBuffer(void) {
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  	get().imp_clearBuffer();
 8000f6a:	f7ff ff8d 	bl	8000e88 <_ZN7QAS_LCD3getEv>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f005 ffa3 	bl	8006ebc <_ZN7QAS_LCD15imp_clearBufferEv>
  }
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_ZN7QAS_LCD8drawLineE11QAT_Vector2S0_>:

  static void drawPixel(QAT_Vector2 cPos) {
  	get().imp_drawPixel(cPos);
  }

  static void drawLine(QAT_Vector2 cStart, QAT_Vector2 cEnd) {
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
  	get().imp_drawLine(cStart, cEnd);
 8000f84:	f7ff ff80 	bl	8000e88 <_ZN7QAS_LCD3getEv>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f005 ffb4 	bl	8006efc <_ZN7QAS_LCD12imp_drawLineER11QAT_Vector2S1_>
  }
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_ZN7QAS_LCD8drawRectE11QAT_Vector2S0_>:

  static void drawRect(QAT_Vector2 cStart, QAT_Vector2 cEnd) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  	get().imp_drawRect(cStart, cEnd);
 8000fa6:	f7ff ff6f 	bl	8000e88 <_ZN7QAS_LCD3getEv>
 8000faa:	4603      	mov	r3, r0
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f006 f8f4 	bl	800719e <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_>
  }
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_ZN7QAS_LCD12drawRectFillE11QAT_Vector2S0_>:

  static void drawRectFill(QAT_Vector2 cStart, QAT_Vector2 cEnd) {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  	get().imp_drawRectFill(cStart, cEnd);
 8000fc8:	f7ff ff5e 	bl	8000e88 <_ZN7QAS_LCD3getEv>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 f971 	bl	80072ba <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_>
  }
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_ZN7QAS_LCD14setFontByIndexEh>:

  static void setFontByName(const char* strName) {
  	get().m_cFontMgr.setFontByName(strName);
  }

  static void setFontByIndex(uint8_t uIdx) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  	get().m_cFontMgr.setFontByIndex(uIdx);
 8000fea:	f7ff ff4d 	bl	8000e88 <_ZN7QAS_LCD3getEv>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	330c      	adds	r3, #12
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 fa27 	bl	800744a <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>
  }
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <_ZN7QAS_LCD8drawStrCE11QAT_Vector2PKc>:

  static void drawStrL(QAT_Vector2 cPos, const char* str) {
  	get().m_cFontMgr.drawStrL(cPos, str);
  }

  static void drawStrC(QAT_Vector2 cPos, const char* str) {
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  	get().m_cFontMgr.drawStrC(cPos, str);
 800100e:	f7ff ff3b 	bl	8000e88 <_ZN7QAS_LCD3getEv>
 8001012:	4603      	mov	r3, r0
 8001014:	f103 040c 	add.w	r4, r3, #12
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fe7f 	bl	8000d22 <_ZN11QAT_Vector2C1ERKS_>
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	4619      	mov	r1, r3
 800102c:	4620      	mov	r0, r4
 800102e:	f006 fb06 	bl	800763e <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc>
  }
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bd90      	pop	{r4, r7, pc}
	...

0800103c <main>:
//main
//Application Entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f769nihx.s
int main(void) {
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b09d      	sub	sp, #116	; 0x74
 8001040:	af00      	add	r7, sp, #0
  //System Initialization

	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method
	if (SystemInitialize()) {
 8001042:	f7ff fb1d 	bl	8000680 <_Z16SystemInitializev>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	bf14      	ite	ne
 800104c:	2301      	movne	r3, #1
 800104e:	2300      	moveq	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d000      	beq.n	8001058 <main+0x1c>
	  while (1) {}
 8001056:	e7fe      	b.n	8001056 <main+0x1a>


	//----------------------------------
	//Initialize the Used LEDs using the QAD_GPIO_Output driver class.
	//QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PORT, QAD_USER_LED_RED_GPIO_PIN and QAD_USERLED_GREEN_GPIO_PIN are defined in setup.hpp
  GPIO_UserLED_Red   = new QAD_GPIO_Output(QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_RED_GPIO_PIN);
 8001058:	2014      	movs	r0, #20
 800105a:	f007 faaa 	bl	80085b2 <_Znwj>
 800105e:	4603      	mov	r3, r0
 8001060:	461c      	mov	r4, r3
 8001062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001066:	494e      	ldr	r1, [pc, #312]	; (80011a0 <main+0x164>)
 8001068:	4620      	mov	r0, r4
 800106a:	f004 fd57 	bl	8005b1c <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 800106e:	4b4d      	ldr	r3, [pc, #308]	; (80011a4 <main+0x168>)
 8001070:	601c      	str	r4, [r3, #0]
  GPIO_UserLED_Green = new QAD_GPIO_Output(QAD_USERLED_GREEN_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PIN);
 8001072:	2014      	movs	r0, #20
 8001074:	f007 fa9d 	bl	80085b2 <_Znwj>
 8001078:	4603      	mov	r3, r0
 800107a:	461c      	mov	r4, r3
 800107c:	2220      	movs	r2, #32
 800107e:	4948      	ldr	r1, [pc, #288]	; (80011a0 <main+0x164>)
 8001080:	4620      	mov	r0, r4
 8001082:	f004 fd4b 	bl	8005b1c <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8001086:	4b48      	ldr	r3, [pc, #288]	; (80011a8 <main+0x16c>)
 8001088:	601c      	str	r4, [r3, #0]


	//----------------------------------
  //Initialize the User Button using the QAD_GPIO_Input driver class.
  //QAD_USERBUTTON_GPIO_PORT and QAD_USERBUTTON_GPIO_PIN are defined in setup.hpp
  GPIO_UserButton = new QAD_GPIO_Input(QAD_USERBUTTON_GPIO_PORT, QAD_USERBUTTON_GPIO_PIN);
 800108a:	2010      	movs	r0, #16
 800108c:	f007 fa91 	bl	80085b2 <_Znwj>
 8001090:	4603      	mov	r3, r0
 8001092:	461c      	mov	r4, r3
 8001094:	2201      	movs	r2, #1
 8001096:	4945      	ldr	r1, [pc, #276]	; (80011ac <main+0x170>)
 8001098:	4620      	mov	r0, r4
 800109a:	f004 fdc5 	bl	8005c28 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>
 800109e:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <main+0x174>)
 80010a0:	601c      	str	r4, [r3, #0]
  //Initialize UART1, which is used to communicate over serial via the STLINK connection
  //Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

  //Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.uart.uart        = QAD_UART1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	703b      	strb	r3, [r7, #0]
  sSerialInit.uart.baudrate    = QAD_UART1_BAUDRATE;
 80010a6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80010aa:	607b      	str	r3, [r7, #4]
  sSerialInit.uart.irqpriority = QAD_IRQPRIORITY_UART1;
 80010ac:	2309      	movs	r3, #9
 80010ae:	723b      	strb	r3, [r7, #8]
  sSerialInit.uart.txgpio      = QAD_UART1_TX_PORT;
 80010b0:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <main+0x170>)
 80010b2:	60fb      	str	r3, [r7, #12]
  sSerialInit.uart.txpin       = QAD_UART1_TX_PIN;
 80010b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b8:	823b      	strh	r3, [r7, #16]
  sSerialInit.uart.txaf        = QAD_UART1_TX_AF;
 80010ba:	2307      	movs	r3, #7
 80010bc:	74bb      	strb	r3, [r7, #18]
  sSerialInit.uart.rxgpio      = QAD_UART1_RX_PORT;
 80010be:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <main+0x170>)
 80010c0:	617b      	str	r3, [r7, #20]
  sSerialInit.uart.rxpin       = QAD_UART1_RX_PIN;
 80010c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c6:	833b      	strh	r3, [r7, #24]
  sSerialInit.uart.rxaf        = QAD_UART1_RX_AF;
 80010c8:	2307      	movs	r3, #7
 80010ca:	76bb      	strb	r3, [r7, #26]
  sSerialInit.txfifo_size      = QAD_UART1_TX_FIFOSIZE;
 80010cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d0:	83bb      	strh	r3, [r7, #28]
  sSerialInit.rxfifo_size      = QAD_UART1_RX_FIFOSIZE;
 80010d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d6:	83fb      	strh	r3, [r7, #30]

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 80010d8:	2018      	movs	r0, #24
 80010da:	f007 fa6a 	bl	80085b2 <_Znwj>
 80010de:	4603      	mov	r3, r0
 80010e0:	461c      	mov	r4, r3
 80010e2:	463b      	mov	r3, r7
 80010e4:	4619      	mov	r1, r3
 80010e6:	4620      	mov	r0, r4
 80010e8:	f7ff fde4 	bl	8000cb4 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 80010ec:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <main+0x178>)
 80010ee:	601c      	str	r4, [r3, #0]

  //If initialization failed the turn on User LED and enter infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 80010f0:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <main+0x178>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 ff83 	bl	8008002 <_ZN19QAS_Serial_Dev_Base4initEPv>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b01      	cmp	r3, #1
 8001100:	bf0c      	ite	eq
 8001102:	2301      	moveq	r3, #1
 8001104:	2300      	movne	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d005      	beq.n	8001118 <main+0xdc>
  	GPIO_UserLED_Red->on();
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <main+0x168>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f004 fd24 	bl	8005b5e <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8001116:	e7fe      	b.n	8001116 <main+0xda>
  }


	//----------------------------------
  //Initialize FMC / SDRAM driver using the QAD_FMC singleton driver class
  if (QAD_FMC::init() == QA_OK) {
 8001118:	f7ff fd24 	bl	8000b64 <_ZN7QAD_FMC4initEv>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	bf0c      	ite	eq
 8001122:	2301      	moveq	r3, #1
 8001124:	2300      	movne	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d02c      	beq.n	8001186 <main+0x14a>

  	//If initialization passed then output message via serial
    UART_STLink->txStringCR("SDRAM: Initialized");
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <main+0x178>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4921      	ldr	r1, [pc, #132]	; (80011b8 <main+0x17c>)
 8001132:	4618      	mov	r0, r3
 8001134:	f006 ff98 	bl	8008068 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

    //Test SDRAM to confirm correct operation
  	if (QAD_FMC::test() == QA_OK) {
 8001138:	f7ff fd1f 	bl	8000b7a <_ZN7QAD_FMC4testEv>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf0c      	ite	eq
 8001142:	2301      	moveq	r3, #1
 8001144:	2300      	movne	r3, #0
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d010      	beq.n	800116e <main+0x132>

  		//If SDRAM test passed then output message via serial
  		UART_STLink->txStringCR("SDRAM: Test Passed");
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <main+0x178>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	491a      	ldr	r1, [pc, #104]	; (80011bc <main+0x180>)
 8001152:	4618      	mov	r0, r3
 8001154:	f006 ff88 	bl	8008068 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


	//----------------------------------
  //Initialize LCD using QAS_LCD singleton class.
  //This will also initialize LTDC and DSI peripherals, and also initialize otm8009a display controller
  if (QAS_LCD::init()) {
 8001158:	f7ff fec4 	bl	8000ee4 <_ZN7QAS_LCD4initEv>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf14      	ite	ne
 8001162:	2301      	movne	r3, #1
 8001164:	2300      	moveq	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d033      	beq.n	80011d4 <main+0x198>
 800116c:	e02c      	b.n	80011c8 <main+0x18c>
  		UART_STLink->txStringCR("SDRAM: Test Failed");
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <main+0x178>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4913      	ldr	r1, [pc, #76]	; (80011c0 <main+0x184>)
 8001174:	4618      	mov	r0, r3
 8001176:	f006 ff77 	bl	8008068 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  		GPIO_UserLED_Red->on();
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <main+0x168>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f004 fced 	bl	8005b5e <_ZN15QAD_GPIO_Output2onEv>
  		while(1) {}
 8001184:	e7fe      	b.n	8001184 <main+0x148>
    UART_STLink->txStringCR("SDRAM: Initialization failed");
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <main+0x178>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	490e      	ldr	r1, [pc, #56]	; (80011c4 <main+0x188>)
 800118c:	4618      	mov	r0, r3
 800118e:	f006 ff6b 	bl	8008068 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
    GPIO_UserLED_Red->on();
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <main+0x168>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fce1 	bl	8005b5e <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 800119c:	e7fe      	b.n	800119c <main+0x160>
 800119e:	bf00      	nop
 80011a0:	40022400 	.word	0x40022400
 80011a4:	20000130 	.word	0x20000130
 80011a8:	20000134 	.word	0x20000134
 80011ac:	40020000 	.word	0x40020000
 80011b0:	20000138 	.word	0x20000138
 80011b4:	2000013c 	.word	0x2000013c
 80011b8:	08008a18 	.word	0x08008a18
 80011bc:	08008a2c 	.word	0x08008a2c
 80011c0:	08008a40 	.word	0x08008a40
 80011c4:	08008a54 	.word	0x08008a54
  	UART_STLink->txStringCR("LCD: Initialization failed");
 80011c8:	4b96      	ldr	r3, [pc, #600]	; (8001424 <main+0x3e8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4996      	ldr	r1, [pc, #600]	; (8001428 <main+0x3ec>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f006 ff4a 	bl	8008068 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  }
  UART_STLink->txStringCR("LCD: Initialized");
 80011d4:	4b93      	ldr	r3, [pc, #588]	; (8001424 <main+0x3e8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4994      	ldr	r1, [pc, #592]	; (800142c <main+0x3f0>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 ff44 	bl	8008068 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //Test rendering methods to confirm LCD and rendering subsystem are working correctly
  //QAS_LCD::flipLayer0();
  //QAS_LCD::flipLayer1();

  QAS_LCD::setDrawBuffer(Layer0);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fe9e 	bl	8000f22 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0xFFFF);
 80011e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011ea:	f7ff feab 	bl	8000f44 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 80011ee:	f7ff feba 	bl	8000f66 <_ZN7QAS_LCD11clearBufferEv>

  //Shapes
  QAS_LCD::setDrawColor(0xF000);
 80011f2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80011f6:	f7ff fea5 	bl	8000f44 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawLine(QAT_Vector2(0, 240), QAT_Vector2(799, 240));  //Causes error
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	22f0      	movs	r2, #240	; 0xf0
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fd78 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	22f0      	movs	r2, #240	; 0xf0
 800120e:	f240 311f 	movw	r1, #799	; 0x31f
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fd70 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 8001218:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800121c:	f107 0320 	add.w	r3, r7, #32
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fea9 	bl	8000f7a <_ZN7QAS_LCD8drawLineE11QAT_Vector2S0_>
  QAS_LCD::drawLine(QAT_Vector2(10, 240), QAT_Vector2(789, 240));  //Causes error
 8001228:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122c:	22f0      	movs	r2, #240	; 0xf0
 800122e:	210a      	movs	r1, #10
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fd61 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 8001236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800123a:	22f0      	movs	r2, #240	; 0xf0
 800123c:	f240 3115 	movw	r1, #789	; 0x315
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fd59 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 8001246:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800124a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe92 	bl	8000f7a <_ZN7QAS_LCD8drawLineE11QAT_Vector2S0_>
  QAS_LCD::drawLine(QAT_Vector2(400, 0), QAT_Vector2(400, 479));    //Causes error
 8001256:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fd49 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 8001266:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800126a:	f240 12df 	movw	r2, #479	; 0x1df
 800126e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fd40 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 8001278:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800127c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fe79 	bl	8000f7a <_ZN7QAS_LCD8drawLineE11QAT_Vector2S0_>
  QAS_LCD::drawLine(QAT_Vector2(0, 0), QAT_Vector2(799, 479));        //Causes error
 8001288:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fd31 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 8001296:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800129a:	f240 12df 	movw	r2, #479	; 0x1df
 800129e:	f240 311f 	movw	r1, #799	; 0x31f
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fd28 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 80012a8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80012ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fe61 	bl	8000f7a <_ZN7QAS_LCD8drawLineE11QAT_Vector2S0_>

  QAS_LCD::drawRect(QAT_Vector2(200, 120), QAT_Vector2(600, 360));      //Doesn't cause errors
 80012b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012bc:	2278      	movs	r2, #120	; 0x78
 80012be:	21c8      	movs	r1, #200	; 0xc8
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fd19 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 80012c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012ca:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80012ce:	f44f 7116 	mov.w	r1, #600	; 0x258
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fd10 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 80012d8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80012dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fe5a 	bl	8000f9c <_ZN7QAS_LCD8drawRectE11QAT_Vector2S0_>

  QAS_LCD::setDrawColor(0xF00F);
 80012e8:	f24f 000f 	movw	r0, #61455	; 0xf00f
 80012ec:	f7ff fe2a 	bl	8000f44 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::drawRectFill(QAT_Vector2(300, 180), QAT_Vector2(500, 300));  //Causes error
 80012f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012f4:	22b4      	movs	r2, #180	; 0xb4
 80012f6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fcfc 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 8001300:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001304:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001308:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fcf3 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 8001312:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001316:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fe4e 	bl	8000fbe <_ZN7QAS_LCD12drawRectFillE11QAT_Vector2S0_>

  //Fonts
  QAS_LCD::setDrawColor(0xF000);
 8001322:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001326:	f7ff fe0d 	bl	8000f44 <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("SegoeUI20ptSB");
  //QAS_LCD::setFontByIndex(0);
  QAS_LCD::setFontByIndex(0);
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff fe58 	bl	8000fe0 <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2(400, 100), "Hello World!");
 8001330:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001334:	2264      	movs	r2, #100	; 0x64
 8001336:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fcdc 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 8001340:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001344:	493a      	ldr	r1, [pc, #232]	; (8001430 <main+0x3f4>)
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe5c 	bl	8001004 <_ZN7QAS_LCD8drawStrCE11QAT_Vector2PKc>

  QAS_LCD::setDrawColor(0xF077);
 800134c:	f24f 0077 	movw	r0, #61559	; 0xf077
 8001350:	f7ff fdf8 	bl	8000f44 <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("SegoeUI20pt");
  QAS_LCD::setFontByIndex(1);
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff fe43 	bl	8000fe0 <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2(400, 150), "Welcome to");
 800135a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800135e:	2296      	movs	r2, #150	; 0x96
 8001360:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fcc7 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 800136a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800136e:	4931      	ldr	r1, [pc, #196]	; (8001434 <main+0x3f8>)
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fe47 	bl	8001004 <_ZN7QAS_LCD8drawStrCE11QAT_Vector2PKc>

  QAS_LCD::setDrawColor(0xF337);
 8001376:	f24f 3037 	movw	r0, #62263	; 0xf337
 800137a:	f7ff fde3 	bl	8000f44 <_ZN7QAS_LCD12setDrawColorEt>
  //QAS_LCD::setFontByName("SegoeUI20pt");
  QAS_LCD::setFontByIndex(0);
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff fe2e 	bl	8000fe0 <_ZN7QAS_LCD14setFontByIndexEh>
  QAS_LCD::drawStrC(QAT_Vector2(400, 200), "ABCDefghIJKLmnopQRSTuvwxYZ!@#$%^");
 8001384:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001388:	22c8      	movs	r2, #200	; 0xc8
 800138a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fcb2 	bl	8000cf8 <_ZN11QAT_Vector2C1Ett>
 8001394:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001398:	4927      	ldr	r1, [pc, #156]	; (8001438 <main+0x3fc>)
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fe32 	bl	8001004 <_ZN7QAS_LCD8drawStrCE11QAT_Vector2PKc>

  QAS_LCD::setDrawBuffer(Layer1);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff fdbe 	bl	8000f22 <_ZN7QAS_LCD13setDrawBufferE17QAD_LTDC_LayerIdx>
  QAS_LCD::setDrawColor(0x0000);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff fdcc 	bl	8000f44 <_ZN7QAS_LCD12setDrawColorEt>
  QAS_LCD::clearBuffer();
 80013ac:	f7ff fddb 	bl	8000f66 <_ZN7QAS_LCD11clearBufferEv>


  QAS_LCD::flipLayer0();
 80013b0:	f7ff fda3 	bl	8000efa <_ZN7QAS_LCD10flipLayer0Ev>
  QAS_LCD::flipLayer1();
 80013b4:	f7ff fdab 	bl	8000f0e <_ZN7QAS_LCD10flipLayer1Ev>
  //Processing Loop

  //Create processing loop timing variables
  uint32_t uTicks;
  uint32_t uCurTick;
  uint32_t uNewTick = HAL_GetTick();
 80013b8:	f000 fece 	bl	8002158 <HAL_GetTick>
 80013bc:	66b8      	str	r0, [r7, #104]	; 0x68
  uint32_t uOldTick = uNewTick;
 80013be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013c0:	663b      	str	r3, [r7, #96]	; 0x60

  //Create task timing variables
  uint32_t uHeartbeatTicks = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	667b      	str	r3, [r7, #100]	; 0x64

  	//----------------------------------
  	//Frame Timing
  	//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
  	//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 80013c6:	f000 fec7 	bl	8002158 <HAL_GetTick>
 80013ca:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 80013cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80013ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d012      	beq.n	80013fa <main+0x3be>
    	uOldTick = uNewTick;
 80013d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013d6:	663b      	str	r3, [r7, #96]	; 0x60
    	uNewTick = uCurTick;
 80013d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013da:	66bb      	str	r3, [r7, #104]	; 0x68
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 80013dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80013de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d205      	bcs.n	80013f0 <main+0x3b4>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 80013e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80013e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	3b01      	subs	r3, #1
 80013ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80013ee:	e006      	b.n	80013fe <main+0x3c2>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 80013f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80013f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80013f8:	e001      	b.n	80013fe <main+0x3c2>
    	}

    } else {
    	uTicks = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	66fb      	str	r3, [r7, #108]	; 0x6c

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the green User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //has become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 80013fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001402:	4413      	add	r3, r2
 8001404:	667b      	str	r3, [r7, #100]	; 0x64
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) {
 8001406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001408:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800140c:	d3db      	bcc.n	80013c6 <main+0x38a>
    	GPIO_UserLED_Green->toggle();
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <main+0x400>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fbc9 	bl	8005baa <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;
 8001418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800141a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800141e:	667b      	str	r3, [r7, #100]	; 0x64
    uCurTick = HAL_GetTick();
 8001420:	e7d1      	b.n	80013c6 <main+0x38a>
 8001422:	bf00      	nop
 8001424:	2000013c 	.word	0x2000013c
 8001428:	08008a74 	.word	0x08008a74
 800142c:	08008a90 	.word	0x08008a90
 8001430:	08008aa4 	.word	0x08008aa4
 8001434:	08008ab4 	.word	0x08008ab4
 8001438:	08008ac0 	.word	0x08008ac0
 800143c:	20000134 	.word	0x20000134

08001440 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 800144a:	683c      	ldr	r4, [r7, #0]
 800144c:	4620      	mov	r0, r4
 800144e:	f007 f8c1 	bl	80085d4 <_Znaj>
 8001452:	4603      	mov	r3, r0
 8001454:	4618      	mov	r0, r3
 8001456:	4602      	mov	r2, r0
 8001458:	1e63      	subs	r3, r4, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	db04      	blt.n	8001468 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 800145e:	2100      	movs	r1, #0
 8001460:	7011      	strb	r1, [r2, #0]
 8001462:	3201      	adds	r2, #1
 8001464:	3b01      	subs	r3, #1
 8001466:	e7f8      	b.n	800145a <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8001468:	4601      	mov	r1, r0
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f8b7 	bl	80015de <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bd90      	pop	{r4, r7, pc}

08001478 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8001482:	6838      	ldr	r0, [r7, #0]
 8001484:	f000 f8c7 	bl	8001616 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8001488:	4603      	mov	r3, r0
 800148a:	881c      	ldrh	r4, [r3, #0]
 800148c:	200c      	movs	r0, #12
 800148e:	f007 f890 	bl	80085b2 <_Znwj>
 8001492:	4603      	mov	r3, r0
 8001494:	461d      	mov	r5, r3
 8001496:	4621      	mov	r1, r4
 8001498:	4628      	mov	r0, r5
 800149a:	f7ff fb79 	bl	8000b90 <_ZN14QAT_FIFOBufferC1Et>
 800149e:	4629      	mov	r1, r5
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f8c3 	bl	800162c <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bdb0      	pop	{r4, r5, r7, pc}

080014ae <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80014ae:	b5b0      	push	{r4, r5, r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80014b8:	6838      	ldr	r0, [r7, #0]
 80014ba:	f000 f8d3 	bl	8001664 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 80014be:	4605      	mov	r5, r0
 80014c0:	20a4      	movs	r0, #164	; 0xa4
 80014c2:	f007 f876 	bl	80085b2 <_Znwj>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461c      	mov	r4, r3
 80014ca:	4629      	mov	r1, r5
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff fbad 	bl	8000c2c <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 80014d2:	4621      	mov	r1, r4
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f8d0 	bl	800167a <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bdb0      	pop	{r4, r5, r7, pc}

080014e2 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f8e1 	bl	80016b2 <_ZNSaIP12QAS_LCD_FontEC1Ev>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f8e9 	bl	80016ca <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_ZNSaIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f8f1 	bl	80016f2 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8001532:	461a      	mov	r2, r3
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f8e7 	bl	8001708 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      }
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fc04 	bl	8000d4a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE12_Vector_implD1Ev>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681c      	ldr	r4, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f8e5 	bl	800172e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8001564:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001566:	461a      	mov	r2, r3
 8001568:	4629      	mov	r1, r5
 800156a:	4620      	mov	r0, r4
 800156c:	f000 f8ea 	bl	8001744 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ffd1 	bl	800151a <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EED1Ev>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bdb0      	pop	{r4, r5, r7, pc}

08001582 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4619      	mov	r1, r3
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f8e5 	bl	8001760 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	109b      	asrs	r3, r3, #2
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
      }
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f8d8 	bl	80017a2 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f8df 	bl	80017ca <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800160c:	4603      	mov	r3, r0
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6839      	ldr	r1, [r7, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f8d2 	bl	80017e4 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4618      	mov	r0, r3
 8001656:	f000 f8d9 	bl	800180c <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800165a:	4603      	mov	r3, r0
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6839      	ldr	r1, [r7, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f000 f8cc 	bl	8001826 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f8d3 	bl	800184e <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_ZNSaIP12QAS_LCD_FontEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f8d4 	bl	8001868 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
	{ }
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	if (__p)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	68b9      	ldr	r1, [r7, #8]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f8ac 	bl	800187e <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>
      }
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 f8a2 	bl	800189c <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>
    }
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	109b      	asrs	r3, r3, #2
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00e      	beq.n	800179a <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ffd3 	bl	800172e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8001788:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800178a:	461a      	mov	r2, r3
 800178c:	4621      	mov	r1, r4
 800178e:	6838      	ldr	r0, [r7, #0]
 8001790:	f7ff ffd8 	bl	8001744 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd90      	pop	{r4, r7, pc}

080017a2 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f881 	bl	80018b6 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ff21 	bl	80015fc <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 f87b 	bl	80018d0 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80017da:	4603      	mov	r3, r0
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f879 	bl	80018e8 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ff27 	bl	800164a <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 80017fc:	4602      	mov	r2, r0
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f873 	bl	8001902 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800181c:	4603      	mov	r3, r0
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f871 	bl	800191a <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff2d 	bl	8001698 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 800183e:	4602      	mov	r2, r0
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4618      	mov	r0, r3
 800185a:	f000 f86b 	bl	8001934 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800185e:	4603      	mov	r3, r0
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 f85c 	bl	800194c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_ZSt8_DestroyIPP12QAS_LCD_FontEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80018a6:	6839      	ldr	r1, [r7, #0]
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f85c 	bl	8001966 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>
    }
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 f85b 	bl	800197c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f85f 	bl	800199c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 80018de:	4603      	mov	r3, r0
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f85f 	bl	80019b6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f863 	bl	80019d6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 8001910:	4603      	mov	r3, r0
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f863 	bl	80019f0 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f867 	bl	8001a10 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 8001942:	4603      	mov	r3, r0
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8001958:	68b8      	ldr	r0, [r7, #8]
 800195a:	f006 fe17 	bl	800858c <_ZdlPv>
      }
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12QAS_LCD_FontEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f850 	bl	8001a2a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f858 	bl	8001a42 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f859 	bl	8001a5e <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f858 	bl	8001a74 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f860 	bl	8001a8c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 f861 	bl	8001aa8 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f860 	bl	8001abe <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f868 	bl	8001ad6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f869 	bl	8001af2 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f868 	bl	8001b08 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f84e 	bl	8001b1e <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f834 	bl	8001b34 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
	return 1;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <_kill>:

int _kill(int pid, int sig)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b64:	f006 fd6a 	bl	800863c <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2216      	movs	r2, #22
 8001b6c:	601a      	str	r2, [r3, #0]
	return -1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_exit>:

void _exit (int status)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b82:	f04f 31ff 	mov.w	r1, #4294967295
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffe7 	bl	8001b5a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b8c:	e7fe      	b.n	8001b8c <_exit+0x12>
	...

08001b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <_sbrk+0x5c>)
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <_sbrk+0x60>)
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <_sbrk+0x64>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <_sbrk+0x68>)
 8001bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d207      	bcs.n	8001bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc0:	f006 fd3c 	bl	800863c <__errno>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	e009      	b.n	8001be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <_sbrk+0x64>)
 8001be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20080000 	.word	0x20080000
 8001bf0:	00000400 	.word	0x00000400
 8001bf4:	20000140 	.word	0x20000140
 8001bf8:	200003a8 	.word	0x200003a8

08001bfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <SystemInit+0x20>)
 8001c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c06:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <SystemInit+0x20>)
 8001c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001c2a:	49c1      	ldr	r1, [pc, #772]	; (8001f30 <OTM8009A_Init+0x310>)
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f004 fafe 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001c32:	49c0      	ldr	r1, [pc, #768]	; (8001f34 <OTM8009A_Init+0x314>)
 8001c34:	2003      	movs	r0, #3
 8001c36:	f004 fafa 	bl	800622e <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001c3a:	49bf      	ldr	r1, [pc, #764]	; (8001f38 <OTM8009A_Init+0x318>)
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f004 faf6 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001c42:	49be      	ldr	r1, [pc, #760]	; (8001f3c <OTM8009A_Init+0x31c>)
 8001c44:	2002      	movs	r0, #2
 8001c46:	f004 faf2 	bl	800622e <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001c4a:	49bb      	ldr	r1, [pc, #748]	; (8001f38 <OTM8009A_Init+0x318>)
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f004 faee 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001c52:	49bb      	ldr	r1, [pc, #748]	; (8001f40 <OTM8009A_Init+0x320>)
 8001c54:	2000      	movs	r0, #0
 8001c56:	f004 faea 	bl	800622e <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8001c5a:	200a      	movs	r0, #10
 8001c5c:	f000 fa88 	bl	8002170 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001c60:	49b8      	ldr	r1, [pc, #736]	; (8001f44 <OTM8009A_Init+0x324>)
 8001c62:	2000      	movs	r0, #0
 8001c64:	f004 fae3 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001c68:	49b7      	ldr	r1, [pc, #732]	; (8001f48 <OTM8009A_Init+0x328>)
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f004 fadf 	bl	800622e <DSI_IO_WriteCmd>
  HAL_Delay(10);
 8001c70:	200a      	movs	r0, #10
 8001c72:	f000 fa7d 	bl	8002170 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8001c76:	49b5      	ldr	r1, [pc, #724]	; (8001f4c <OTM8009A_Init+0x32c>)
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f004 fad8 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001c7e:	49b4      	ldr	r1, [pc, #720]	; (8001f50 <OTM8009A_Init+0x330>)
 8001c80:	2000      	movs	r0, #0
 8001c82:	f004 fad4 	bl	800622e <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8001c86:	49b3      	ldr	r1, [pc, #716]	; (8001f54 <OTM8009A_Init+0x334>)
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f004 fad0 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001c8e:	49b2      	ldr	r1, [pc, #712]	; (8001f58 <OTM8009A_Init+0x338>)
 8001c90:	2000      	movs	r0, #0
 8001c92:	f004 facc 	bl	800622e <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8001c96:	49b1      	ldr	r1, [pc, #708]	; (8001f5c <OTM8009A_Init+0x33c>)
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f004 fac8 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001c9e:	49b0      	ldr	r1, [pc, #704]	; (8001f60 <OTM8009A_Init+0x340>)
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f004 fac4 	bl	800622e <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001ca6:	49a2      	ldr	r1, [pc, #648]	; (8001f30 <OTM8009A_Init+0x310>)
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f004 fac0 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8001cae:	49ad      	ldr	r1, [pc, #692]	; (8001f64 <OTM8009A_Init+0x344>)
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f004 fabc 	bl	800622e <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001cb6:	49ac      	ldr	r1, [pc, #688]	; (8001f68 <OTM8009A_Init+0x348>)
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f004 fab8 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8001cbe:	49ab      	ldr	r1, [pc, #684]	; (8001f6c <OTM8009A_Init+0x34c>)
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f004 fab4 	bl	800622e <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001cc6:	49aa      	ldr	r1, [pc, #680]	; (8001f70 <OTM8009A_Init+0x350>)
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f004 fab0 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8001cce:	49a9      	ldr	r1, [pc, #676]	; (8001f74 <OTM8009A_Init+0x354>)
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f004 faac 	bl	800622e <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001cd6:	49a8      	ldr	r1, [pc, #672]	; (8001f78 <OTM8009A_Init+0x358>)
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f004 faa8 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8001cde:	49a7      	ldr	r1, [pc, #668]	; (8001f7c <OTM8009A_Init+0x35c>)
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f004 faa4 	bl	800622e <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001ce6:	49a6      	ldr	r1, [pc, #664]	; (8001f80 <OTM8009A_Init+0x360>)
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f004 faa0 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001cee:	499a      	ldr	r1, [pc, #616]	; (8001f58 <OTM8009A_Init+0x338>)
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f004 fa9c 	bl	800622e <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001cf6:	498e      	ldr	r1, [pc, #568]	; (8001f30 <OTM8009A_Init+0x310>)
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f004 fa98 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8001cfe:	49a1      	ldr	r1, [pc, #644]	; (8001f84 <OTM8009A_Init+0x364>)
 8001d00:	2002      	movs	r0, #2
 8001d02:	f004 fa94 	bl	800622e <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001d06:	49a0      	ldr	r1, [pc, #640]	; (8001f88 <OTM8009A_Init+0x368>)
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f004 fa90 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8001d0e:	499f      	ldr	r1, [pc, #636]	; (8001f8c <OTM8009A_Init+0x36c>)
 8001d10:	2000      	movs	r0, #0
 8001d12:	f004 fa8c 	bl	800622e <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001d16:	499e      	ldr	r1, [pc, #632]	; (8001f90 <OTM8009A_Init+0x370>)
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f004 fa88 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001d1e:	499d      	ldr	r1, [pc, #628]	; (8001f94 <OTM8009A_Init+0x374>)
 8001d20:	2000      	movs	r0, #0
 8001d22:	f004 fa84 	bl	800622e <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001d26:	499c      	ldr	r1, [pc, #624]	; (8001f98 <OTM8009A_Init+0x378>)
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f004 fa80 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001d2e:	499b      	ldr	r1, [pc, #620]	; (8001f9c <OTM8009A_Init+0x37c>)
 8001d30:	2000      	movs	r0, #0
 8001d32:	f004 fa7c 	bl	800622e <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001d36:	498c      	ldr	r1, [pc, #560]	; (8001f68 <OTM8009A_Init+0x348>)
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f004 fa78 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001d3e:	4998      	ldr	r1, [pc, #608]	; (8001fa0 <OTM8009A_Init+0x380>)
 8001d40:	2000      	movs	r0, #0
 8001d42:	f004 fa74 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001d46:	498a      	ldr	r1, [pc, #552]	; (8001f70 <OTM8009A_Init+0x350>)
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f004 fa70 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001d4e:	4995      	ldr	r1, [pc, #596]	; (8001fa4 <OTM8009A_Init+0x384>)
 8001d50:	2000      	movs	r0, #0
 8001d52:	f004 fa6c 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8001d56:	4994      	ldr	r1, [pc, #592]	; (8001fa8 <OTM8009A_Init+0x388>)
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f004 fa68 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001d5e:	4993      	ldr	r1, [pc, #588]	; (8001fac <OTM8009A_Init+0x38c>)
 8001d60:	2002      	movs	r0, #2
 8001d62:	f004 fa64 	bl	800622e <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001d66:	4974      	ldr	r1, [pc, #464]	; (8001f38 <OTM8009A_Init+0x318>)
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f004 fa60 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001d6e:	4990      	ldr	r1, [pc, #576]	; (8001fb0 <OTM8009A_Init+0x390>)
 8001d70:	2006      	movs	r0, #6
 8001d72:	f004 fa5c 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001d76:	498f      	ldr	r1, [pc, #572]	; (8001fb4 <OTM8009A_Init+0x394>)
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f004 fa58 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001d7e:	498e      	ldr	r1, [pc, #568]	; (8001fb8 <OTM8009A_Init+0x398>)
 8001d80:	200e      	movs	r0, #14
 8001d82:	f004 fa54 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001d86:	498d      	ldr	r1, [pc, #564]	; (8001fbc <OTM8009A_Init+0x39c>)
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f004 fa50 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001d8e:	498c      	ldr	r1, [pc, #560]	; (8001fc0 <OTM8009A_Init+0x3a0>)
 8001d90:	200e      	movs	r0, #14
 8001d92:	f004 fa4c 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001d96:	498b      	ldr	r1, [pc, #556]	; (8001fc4 <OTM8009A_Init+0x3a4>)
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f004 fa48 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001d9e:	498a      	ldr	r1, [pc, #552]	; (8001fc8 <OTM8009A_Init+0x3a8>)
 8001da0:	200a      	movs	r0, #10
 8001da2:	f004 fa44 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001da6:	4989      	ldr	r1, [pc, #548]	; (8001fcc <OTM8009A_Init+0x3ac>)
 8001da8:	2000      	movs	r0, #0
 8001daa:	f004 fa40 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001dae:	4988      	ldr	r1, [pc, #544]	; (8001fd0 <OTM8009A_Init+0x3b0>)
 8001db0:	2000      	movs	r0, #0
 8001db2:	f004 fa3c 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001db6:	4960      	ldr	r1, [pc, #384]	; (8001f38 <OTM8009A_Init+0x318>)
 8001db8:	2000      	movs	r0, #0
 8001dba:	f004 fa38 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8001dbe:	4985      	ldr	r1, [pc, #532]	; (8001fd4 <OTM8009A_Init+0x3b4>)
 8001dc0:	200a      	movs	r0, #10
 8001dc2:	f004 fa34 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001dc6:	4984      	ldr	r1, [pc, #528]	; (8001fd8 <OTM8009A_Init+0x3b8>)
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f004 fa30 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8001dce:	4983      	ldr	r1, [pc, #524]	; (8001fdc <OTM8009A_Init+0x3bc>)
 8001dd0:	200f      	movs	r0, #15
 8001dd2:	f004 fa2c 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001dd6:	4977      	ldr	r1, [pc, #476]	; (8001fb4 <OTM8009A_Init+0x394>)
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f004 fa28 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8001dde:	4980      	ldr	r1, [pc, #512]	; (8001fe0 <OTM8009A_Init+0x3c0>)
 8001de0:	200f      	movs	r0, #15
 8001de2:	f004 fa24 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001de6:	4975      	ldr	r1, [pc, #468]	; (8001fbc <OTM8009A_Init+0x39c>)
 8001de8:	2000      	movs	r0, #0
 8001dea:	f004 fa20 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8001dee:	497d      	ldr	r1, [pc, #500]	; (8001fe4 <OTM8009A_Init+0x3c4>)
 8001df0:	200a      	movs	r0, #10
 8001df2:	f004 fa1c 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001df6:	4973      	ldr	r1, [pc, #460]	; (8001fc4 <OTM8009A_Init+0x3a4>)
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f004 fa18 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8001dfe:	497a      	ldr	r1, [pc, #488]	; (8001fe8 <OTM8009A_Init+0x3c8>)
 8001e00:	200f      	movs	r0, #15
 8001e02:	f004 fa14 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001e06:	4971      	ldr	r1, [pc, #452]	; (8001fcc <OTM8009A_Init+0x3ac>)
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f004 fa10 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8001e0e:	4977      	ldr	r1, [pc, #476]	; (8001fec <OTM8009A_Init+0x3cc>)
 8001e10:	200f      	movs	r0, #15
 8001e12:	f004 fa0c 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8001e16:	4976      	ldr	r1, [pc, #472]	; (8001ff0 <OTM8009A_Init+0x3d0>)
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f004 fa08 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001e1e:	4975      	ldr	r1, [pc, #468]	; (8001ff4 <OTM8009A_Init+0x3d4>)
 8001e20:	200a      	movs	r0, #10
 8001e22:	f004 fa04 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8001e26:	4974      	ldr	r1, [pc, #464]	; (8001ff8 <OTM8009A_Init+0x3d8>)
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f004 fa00 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001e2e:	4973      	ldr	r1, [pc, #460]	; (8001ffc <OTM8009A_Init+0x3dc>)
 8001e30:	200a      	movs	r0, #10
 8001e32:	f004 f9fc 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001e36:	4940      	ldr	r1, [pc, #256]	; (8001f38 <OTM8009A_Init+0x318>)
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f004 f9f8 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001e3e:	4970      	ldr	r1, [pc, #448]	; (8002000 <OTM8009A_Init+0x3e0>)
 8001e40:	200a      	movs	r0, #10
 8001e42:	f004 f9f4 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001e46:	4964      	ldr	r1, [pc, #400]	; (8001fd8 <OTM8009A_Init+0x3b8>)
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f004 f9f0 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001e4e:	496d      	ldr	r1, [pc, #436]	; (8002004 <OTM8009A_Init+0x3e4>)
 8001e50:	200f      	movs	r0, #15
 8001e52:	f004 f9ec 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001e56:	4957      	ldr	r1, [pc, #348]	; (8001fb4 <OTM8009A_Init+0x394>)
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f004 f9e8 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001e5e:	496a      	ldr	r1, [pc, #424]	; (8002008 <OTM8009A_Init+0x3e8>)
 8001e60:	200f      	movs	r0, #15
 8001e62:	f004 f9e4 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001e66:	4955      	ldr	r1, [pc, #340]	; (8001fbc <OTM8009A_Init+0x39c>)
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f004 f9e0 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001e6e:	4967      	ldr	r1, [pc, #412]	; (800200c <OTM8009A_Init+0x3ec>)
 8001e70:	200a      	movs	r0, #10
 8001e72:	f004 f9dc 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001e76:	4953      	ldr	r1, [pc, #332]	; (8001fc4 <OTM8009A_Init+0x3a4>)
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f004 f9d8 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001e7e:	4964      	ldr	r1, [pc, #400]	; (8002010 <OTM8009A_Init+0x3f0>)
 8001e80:	200f      	movs	r0, #15
 8001e82:	f004 f9d4 	bl	800622e <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001e86:	4951      	ldr	r1, [pc, #324]	; (8001fcc <OTM8009A_Init+0x3ac>)
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f004 f9d0 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8001e8e:	4961      	ldr	r1, [pc, #388]	; (8002014 <OTM8009A_Init+0x3f4>)
 8001e90:	200f      	movs	r0, #15
 8001e92:	f004 f9cc 	bl	800622e <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001e96:	4934      	ldr	r1, [pc, #208]	; (8001f68 <OTM8009A_Init+0x348>)
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f004 f9c8 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8001e9e:	495e      	ldr	r1, [pc, #376]	; (8002018 <OTM8009A_Init+0x3f8>)
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f004 f9c4 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8001ea6:	495d      	ldr	r1, [pc, #372]	; (800201c <OTM8009A_Init+0x3fc>)
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f004 f9c0 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8001eae:	495c      	ldr	r1, [pc, #368]	; (8002020 <OTM8009A_Init+0x400>)
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f004 f9bc 	bl	800622e <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8001eb6:	495b      	ldr	r1, [pc, #364]	; (8002024 <OTM8009A_Init+0x404>)
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f004 f9b8 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8001ebe:	495a      	ldr	r1, [pc, #360]	; (8002028 <OTM8009A_Init+0x408>)
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f004 f9b4 	bl	800622e <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001ec6:	491a      	ldr	r1, [pc, #104]	; (8001f30 <OTM8009A_Init+0x310>)
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f004 f9b0 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8001ece:	4957      	ldr	r1, [pc, #348]	; (800202c <OTM8009A_Init+0x40c>)
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f004 f9ac 	bl	800622e <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001ed6:	4916      	ldr	r1, [pc, #88]	; (8001f30 <OTM8009A_Init+0x310>)
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f004 f9a8 	bl	800622e <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001ede:	4914      	ldr	r1, [pc, #80]	; (8001f30 <OTM8009A_Init+0x310>)
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f004 f9a4 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001ee6:	4952      	ldr	r1, [pc, #328]	; (8002030 <OTM8009A_Init+0x410>)
 8001ee8:	2010      	movs	r0, #16
 8001eea:	f004 f9a0 	bl	800622e <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001eee:	4910      	ldr	r1, [pc, #64]	; (8001f30 <OTM8009A_Init+0x310>)
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f004 f99c 	bl	800622e <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001ef6:	494f      	ldr	r1, [pc, #316]	; (8002034 <OTM8009A_Init+0x414>)
 8001ef8:	2010      	movs	r0, #16
 8001efa:	f004 f998 	bl	800622e <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8001efe:	494e      	ldr	r1, [pc, #312]	; (8002038 <OTM8009A_Init+0x418>)
 8001f00:	2000      	movs	r0, #0
 8001f02:	f004 f994 	bl	800622e <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  HAL_Delay(120);
 8001f06:	2078      	movs	r0, #120	; 0x78
 8001f08:	f000 f932 	bl	8002170 <HAL_Delay>

  switch(ColorCoding)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d008      	beq.n	8001f24 <OTM8009A_Init+0x304>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	f040 8095 	bne.w	8002044 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001f1a:	4948      	ldr	r1, [pc, #288]	; (800203c <OTM8009A_Init+0x41c>)
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f004 f986 	bl	800622e <DSI_IO_WriteCmd>
    break;
 8001f22:	e090      	b.n	8002046 <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8001f24:	4946      	ldr	r1, [pc, #280]	; (8002040 <OTM8009A_Init+0x420>)
 8001f26:	2000      	movs	r0, #0
 8001f28:	f004 f981 	bl	800622e <DSI_IO_WriteCmd>
    break;
 8001f2c:	e08b      	b.n	8002046 <OTM8009A_Init+0x426>
 8001f2e:	bf00      	nop
 8001f30:	08008ca0 	.word	0x08008ca0
 8001f34:	08008b58 	.word	0x08008b58
 8001f38:	08008ca4 	.word	0x08008ca4
 8001f3c:	08008b5c 	.word	0x08008b5c
 8001f40:	08008ca8 	.word	0x08008ca8
 8001f44:	08008cac 	.word	0x08008cac
 8001f48:	08008cb0 	.word	0x08008cb0
 8001f4c:	08008cb4 	.word	0x08008cb4
 8001f50:	08008cb8 	.word	0x08008cb8
 8001f54:	08008cbc 	.word	0x08008cbc
 8001f58:	08008cc0 	.word	0x08008cc0
 8001f5c:	08008cc4 	.word	0x08008cc4
 8001f60:	08008cc8 	.word	0x08008cc8
 8001f64:	08008ccc 	.word	0x08008ccc
 8001f68:	08008cd0 	.word	0x08008cd0
 8001f6c:	08008cd4 	.word	0x08008cd4
 8001f70:	08008cd8 	.word	0x08008cd8
 8001f74:	08008cdc 	.word	0x08008cdc
 8001f78:	08008ce0 	.word	0x08008ce0
 8001f7c:	08008ce4 	.word	0x08008ce4
 8001f80:	08008ce8 	.word	0x08008ce8
 8001f84:	08008b88 	.word	0x08008b88
 8001f88:	08008cec 	.word	0x08008cec
 8001f8c:	08008cf0 	.word	0x08008cf0
 8001f90:	08008cf4 	.word	0x08008cf4
 8001f94:	08008cf8 	.word	0x08008cf8
 8001f98:	08008cfc 	.word	0x08008cfc
 8001f9c:	08008d00 	.word	0x08008d00
 8001fa0:	08008d04 	.word	0x08008d04
 8001fa4:	08008d08 	.word	0x08008d08
 8001fa8:	08008d0c 	.word	0x08008d0c
 8001fac:	08008b8c 	.word	0x08008b8c
 8001fb0:	08008b90 	.word	0x08008b90
 8001fb4:	08008d10 	.word	0x08008d10
 8001fb8:	08008b98 	.word	0x08008b98
 8001fbc:	08008d14 	.word	0x08008d14
 8001fc0:	08008ba8 	.word	0x08008ba8
 8001fc4:	08008d18 	.word	0x08008d18
 8001fc8:	08008bb8 	.word	0x08008bb8
 8001fcc:	08008d1c 	.word	0x08008d1c
 8001fd0:	08008d54 	.word	0x08008d54
 8001fd4:	08008bc4 	.word	0x08008bc4
 8001fd8:	08008d20 	.word	0x08008d20
 8001fdc:	08008bd0 	.word	0x08008bd0
 8001fe0:	08008be0 	.word	0x08008be0
 8001fe4:	08008bf0 	.word	0x08008bf0
 8001fe8:	08008bfc 	.word	0x08008bfc
 8001fec:	08008c0c 	.word	0x08008c0c
 8001ff0:	08008d24 	.word	0x08008d24
 8001ff4:	08008c1c 	.word	0x08008c1c
 8001ff8:	08008d28 	.word	0x08008d28
 8001ffc:	08008c28 	.word	0x08008c28
 8002000:	08008c34 	.word	0x08008c34
 8002004:	08008c40 	.word	0x08008c40
 8002008:	08008c50 	.word	0x08008c50
 800200c:	08008c60 	.word	0x08008c60
 8002010:	08008c6c 	.word	0x08008c6c
 8002014:	08008c7c 	.word	0x08008c7c
 8002018:	08008d58 	.word	0x08008d58
 800201c:	08008d5c 	.word	0x08008d5c
 8002020:	08008d60 	.word	0x08008d60
 8002024:	08008d64 	.word	0x08008d64
 8002028:	08008d68 	.word	0x08008d68
 800202c:	08008c8c 	.word	0x08008c8c
 8002030:	08008b60 	.word	0x08008b60
 8002034:	08008b74 	.word	0x08008b74
 8002038:	08008d2c 	.word	0x08008d2c
 800203c:	08008d30 	.word	0x08008d30
 8002040:	08008d34 	.word	0x08008d34
  default :
    break;
 8002044:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10b      	bne.n	8002064 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 800204c:	4916      	ldr	r1, [pc, #88]	; (80020a8 <OTM8009A_Init+0x488>)
 800204e:	2000      	movs	r0, #0
 8002050:	f004 f8ed 	bl	800622e <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8002054:	4915      	ldr	r1, [pc, #84]	; (80020ac <OTM8009A_Init+0x48c>)
 8002056:	2004      	movs	r0, #4
 8002058:	f004 f8e9 	bl	800622e <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 800205c:	4914      	ldr	r1, [pc, #80]	; (80020b0 <OTM8009A_Init+0x490>)
 800205e:	2004      	movs	r0, #4
 8002060:	f004 f8e5 	bl	800622e <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8002064:	4913      	ldr	r1, [pc, #76]	; (80020b4 <OTM8009A_Init+0x494>)
 8002066:	2000      	movs	r0, #0
 8002068:	f004 f8e1 	bl	800622e <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 800206c:	4912      	ldr	r1, [pc, #72]	; (80020b8 <OTM8009A_Init+0x498>)
 800206e:	2000      	movs	r0, #0
 8002070:	f004 f8dd 	bl	800622e <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8002074:	4911      	ldr	r1, [pc, #68]	; (80020bc <OTM8009A_Init+0x49c>)
 8002076:	2000      	movs	r0, #0
 8002078:	f004 f8d9 	bl	800622e <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 800207c:	4910      	ldr	r1, [pc, #64]	; (80020c0 <OTM8009A_Init+0x4a0>)
 800207e:	2000      	movs	r0, #0
 8002080:	f004 f8d5 	bl	800622e <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002084:	490f      	ldr	r1, [pc, #60]	; (80020c4 <OTM8009A_Init+0x4a4>)
 8002086:	2000      	movs	r0, #0
 8002088:	f004 f8d1 	bl	800622e <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800208c:	490e      	ldr	r1, [pc, #56]	; (80020c8 <OTM8009A_Init+0x4a8>)
 800208e:	2000      	movs	r0, #0
 8002090:	f004 f8cd 	bl	800622e <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8002094:	490d      	ldr	r1, [pc, #52]	; (80020cc <OTM8009A_Init+0x4ac>)
 8002096:	2000      	movs	r0, #0
 8002098:	f004 f8c9 	bl	800622e <DSI_IO_WriteCmd>

  return 0;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	08008d38 	.word	0x08008d38
 80020ac:	08008c90 	.word	0x08008c90
 80020b0:	08008c98 	.word	0x08008c98
 80020b4:	08008d3c 	.word	0x08008d3c
 80020b8:	08008d40 	.word	0x08008d40
 80020bc:	08008d44 	.word	0x08008d44
 80020c0:	08008d48 	.word	0x08008d48
 80020c4:	08008d4c 	.word	0x08008d4c
 80020c8:	08008ca0 	.word	0x08008ca0
 80020cc:	08008d50 	.word	0x08008d50

080020d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_InitTick+0x54>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_InitTick+0x58>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f999 	bl	8002426 <HAL_SYSTICK_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00e      	b.n	800211c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b0f      	cmp	r3, #15
 8002102:	d80a      	bhi.n	800211a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002104:	2200      	movs	r2, #0
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f000 f953 	bl	80023b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <HAL_InitTick+0x5c>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000000 	.word	0x20000000
 8002128:	20000008 	.word	0x20000008
 800212c:	20000004 	.word	0x20000004

08002130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x20>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_IncTick+0x24>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_IncTick+0x24>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000008 	.word	0x20000008
 8002154:	20000394 	.word	0x20000394

08002158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_GetTick+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000394 	.word	0x20000394

08002170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff ffee 	bl	8002158 <HAL_GetTick>
 800217c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d005      	beq.n	8002196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_Delay+0x44>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002196:	bf00      	nop
 8002198:	f7ff ffde 	bl	8002158 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d8f7      	bhi.n	8002198 <HAL_Delay+0x28>
  {
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000008 	.word	0x20000008

080021b8 <__NVIC_SetPriorityGrouping>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <__NVIC_SetPriorityGrouping+0x40>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <__NVIC_SetPriorityGrouping+0x40>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00
 80021fc:	05fa0000 	.word	0x05fa0000

08002200 <__NVIC_GetPriorityGrouping>:
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4907      	ldr	r1, [pc, #28]	; (8002254 <__NVIC_EnableIRQ+0x38>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_DisableIRQ>:
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db12      	blt.n	8002290 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	490a      	ldr	r1, [pc, #40]	; (800229c <__NVIC_DisableIRQ+0x44>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	3320      	adds	r3, #32
 8002280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002284:	f3bf 8f4f 	dsb	sy
}
 8002288:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800228a:	f3bf 8f6f 	isb	sy
}
 800228e:	bf00      	nop
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000e100 	.word	0xe000e100

080022a0 <__NVIC_SetPriority>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db0a      	blt.n	80022ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	490c      	ldr	r1, [pc, #48]	; (80022ec <__NVIC_SetPriority+0x4c>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	440b      	add	r3, r1
 80022c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022c8:	e00a      	b.n	80022e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4908      	ldr	r1, [pc, #32]	; (80022f0 <__NVIC_SetPriority+0x50>)
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	3b04      	subs	r3, #4
 80022d8:	0112      	lsls	r2, r2, #4
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	440b      	add	r3, r1
 80022de:	761a      	strb	r2, [r3, #24]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000e100 	.word	0xe000e100
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <NVIC_EncodePriority>:
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	; 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f1c3 0307 	rsb	r3, r3, #7
 800230e:	2b04      	cmp	r3, #4
 8002310:	bf28      	it	cs
 8002312:	2304      	movcs	r3, #4
 8002314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3304      	adds	r3, #4
 800231a:	2b06      	cmp	r3, #6
 800231c:	d902      	bls.n	8002324 <NVIC_EncodePriority+0x30>
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3b03      	subs	r3, #3
 8002322:	e000      	b.n	8002326 <NVIC_EncodePriority+0x32>
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	f04f 32ff 	mov.w	r2, #4294967295
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	401a      	ands	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	43d9      	mvns	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	4313      	orrs	r3, r2
}
 800234e:	4618      	mov	r0, r3
 8002350:	3724      	adds	r7, #36	; 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800236c:	d301      	bcc.n	8002372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236e:	2301      	movs	r3, #1
 8002370:	e00f      	b.n	8002392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002372:	4a0a      	ldr	r2, [pc, #40]	; (800239c <SysTick_Config+0x40>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237a:	210f      	movs	r1, #15
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f7ff ff8e 	bl	80022a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <SysTick_Config+0x40>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <SysTick_Config+0x40>)
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	e000e010 	.word	0xe000e010

080023a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff05 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c8:	f7ff ff1a 	bl	8002200 <__NVIC_GetPriorityGrouping>
 80023cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff ff8e 	bl	80022f4 <NVIC_EncodePriority>
 80023d8:	4602      	mov	r2, r0
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff5d 	bl	80022a0 <__NVIC_SetPriority>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff0d 	bl	800221c <__NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff1d 	bl	8002258 <__NVIC_DisableIRQ>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ff94 	bl	800235c <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800243e:	b480      	push	{r7}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	019a      	lsls	r2, r3, #6
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	431a      	orrs	r2, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	431a      	orrs	r2, r3
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	041b      	lsls	r3, r3, #16
 800245e:	431a      	orrs	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800247e:	f7ff fe6b 	bl	8002158 <HAL_GetTick>
 8002482:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002484:	e009      	b.n	800249a <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8002486:	f7ff fe67 	bl	8002158 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002494:	d901      	bls.n	800249a <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e015      	b.n	80024c6 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0ee      	beq.n	8002486 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	019a      	lsls	r2, r3, #6
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	ea42 0103 	orr.w	r1, r2, r3
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	041a      	lsls	r2, r3, #16
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e106      	b.n	80026f2 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7c5b      	ldrb	r3, [r3, #17]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f97c 	bl	80027ec <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2203      	movs	r2, #3
 80024f8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800250e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800251a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002522:	f7ff fe19 	bl	8002158 <HAL_GetTick>
 8002526:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002528:	e009      	b.n	800253e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800252a:	f7ff fe15 	bl	8002158 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002538:	d901      	bls.n	800253e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e0d9      	b.n	80026f2 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0ed      	beq.n	800252a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_DSI_Init+0x22c>)
 800255c:	400b      	ands	r3, r1
 800255e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	009a      	lsls	r2, r3, #2
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	02db      	lsls	r3, r3, #11
 8002576:	431a      	orrs	r2, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025b2:	f7ff fdd1 	bl	8002158 <HAL_GetTick>
 80025b6:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80025b8:	e009      	b.n	80025ce <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80025ba:	f7ff fdcd 	bl	8002158 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025c8:	d901      	bls.n	80025ce <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e091      	b.n	80026f2 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0ed      	beq.n	80025ba <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0206 	orr.w	r2, r2, #6
 80025ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0203 	bic.w	r2, r2, #3
 8002602:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0203 	bic.w	r2, r2, #3
 8002630:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002658:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6899      	ldr	r1, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_DSI_Init+0x1aa>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	e000      	b.n	800267c <HAL_DSI_Init+0x1ac>
 800267a:	2301      	movs	r3, #1
 800267c:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <HAL_DSI_Init+0x230>)
 8002682:	fb02 f203 	mul.w	r2, r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	409a      	lsls	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80026b2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2200      	movs	r2, #0
 80026da:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3720      	adds	r7, #32
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	fffc8603 	.word	0xfffc8603
 8002700:	003d0900 	.word	0x003d0900

08002704 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e066      	b.n	80027e4 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2203      	movs	r2, #3
 800271a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0208 	bic.w	r2, r2, #8
 8002730:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0206 	bic.w	r2, r2, #6
 8002776:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80027b6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80027c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f818 	bl	8002800 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	7c1b      	ldrb	r3, [r3, #16]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_DSI_ConfigVideoMode+0x16>
 8002826:	2302      	movs	r3, #2
 8002828:	e1ee      	b.n	8002c08 <HAL_DSI_ConfigVideoMode+0x3f4>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0203 	bic.w	r2, r2, #3
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b8b      	ldr	r3, [pc, #556]	; (8002ab0 <HAL_DSI_ConfigVideoMode+0x29c>)
 8002882:	400b      	ands	r3, r1
 8002884:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4b84      	ldr	r3, [pc, #528]	; (8002ab4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80028a4:	400b      	ands	r3, r1
 80028a6:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b7b      	ldr	r3, [pc, #492]	; (8002ab4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80028c6:	400b      	ands	r3, r1
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	699a      	ldr	r2, [r3, #24]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0203 	bic.w	r2, r2, #3
 80028ea:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68d9      	ldr	r1, [r3, #12]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0207 	bic.w	r2, r2, #7
 800290c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6959      	ldr	r1, [r3, #20]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	431a      	orrs	r2, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 020f 	bic.w	r2, r2, #15
 800293a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6919      	ldr	r1, [r3, #16]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 020e 	bic.w	r2, r2, #14
 800295e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	005a      	lsls	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d110      	bne.n	80029a4 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002990:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6919      	ldr	r1, [r3, #16]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b42      	ldr	r3, [pc, #264]	; (8002ab8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80029b0:	400b      	ands	r3, r1
 80029b2:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80029d2:	400b      	ands	r3, r1
 80029d4:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4b32      	ldr	r3, [pc, #200]	; (8002abc <HAL_DSI_ConfigVideoMode+0x2a8>)
 80029f4:	400b      	ands	r3, r1
 80029f6:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002a16:	400b      	ands	r3, r1
 8002a18:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002a38:	400b      	ands	r3, r1
 8002a3a:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8002a5a:	400b      	ands	r3, r1
 8002a5c:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_DSI_ConfigVideoMode+0x29c>)
 8002a7c:	400b      	ands	r3, r1
 8002a7e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aac:	e00a      	b.n	8002ac4 <HAL_DSI_ConfigVideoMode+0x2b0>
 8002aae:	bf00      	nop
 8002ab0:	ffffc000 	.word	0xffffc000
 8002ab4:	ffffe000 	.word	0xffffe000
 8002ab8:	fffff000 	.word	0xfffff000
 8002abc:	ffff8000 	.word	0xffff8000
 8002ac0:	fffffc00 	.word	0xfffffc00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002ada:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6999      	ldr	r1, [r3, #24]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae6:	041a      	lsls	r2, r3, #16
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002afe:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6999      	ldr	r1, [r3, #24]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b42:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7c1b      	ldrb	r3, [r3, #16]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_DSI_Start+0x14>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e02b      	b.n	8002c80 <HAL_DSI_Start+0x6c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0208 	orr.w	r2, r2, #8
 8002c64:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	7c1b      	ldrb	r3, [r3, #16]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_DSI_ShortWrite+0x1a>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e010      	b.n	8002cc8 <HAL_DSI_ShortWrite+0x3c>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff fbda 	bl	8002470 <DSI_ShortWrite>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	741a      	strb	r2, [r3, #16]

  return status;
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08c      	sub	sp, #48	; 0x30
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8002cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce0:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	7c1b      	ldrb	r3, [r3, #16]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_DSI_LongWrite+0x1e>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e084      	b.n	8002df8 <HAL_DSI_LongWrite+0x128>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf4:	f7ff fa30 	bl	8002158 <HAL_GetTick>
 8002cf8:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002cfa:	e00c      	b.n	8002d16 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002cfc:	f7ff fa2c 	bl	8002158 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d0a:	d904      	bls.n	8002d16 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e070      	b.n	8002df8 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0eb      	beq.n	8002cfc <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	bf28      	it	cs
 8002d2e:	2303      	movcs	r3, #3
 8002d30:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
 8002d36:	e00f      	b.n	8002d58 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	3301      	adds	r3, #1
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	3301      	adds	r3, #1
 8002d56:	623b      	str	r3, [r7, #32]
 8002d58:	6a3a      	ldr	r2, [r7, #32]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d3eb      	bcc.n	8002d38 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8002d78:	e028      	b.n	8002dcc <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	bf28      	it	cs
 8002d80:	2304      	movcs	r3, #4
 8002d82:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	623b      	str	r3, [r7, #32]
 8002d8c:	e00e      	b.n	8002dac <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	3301      	adds	r3, #1
 8002daa:	623b      	str	r3, [r7, #32]
 8002dac:	6a3a      	ldr	r2, [r7, #32]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d3ec      	bcc.n	8002d8e <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8002dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4413      	add	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1d3      	bne.n	8002d7a <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002dda:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	f7ff fb27 	bl	800243e <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b089      	sub	sp, #36	; 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	e175      	b.n	800310c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e20:	2201      	movs	r2, #1
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4013      	ands	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	f040 8164 	bne.w	8003106 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d00b      	beq.n	8002e5e <HAL_GPIO_Init+0x5e>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d007      	beq.n	8002e5e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e52:	2b11      	cmp	r3, #17
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b12      	cmp	r3, #18
 8002e5c:	d130      	bne.n	8002ec0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	2203      	movs	r2, #3
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e94:	2201      	movs	r2, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 0201 	and.w	r2, r3, #1
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x100>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b12      	cmp	r3, #18
 8002efe:	d123      	bne.n	8002f48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	08da      	lsrs	r2, r3, #3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3208      	adds	r2, #8
 8002f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	220f      	movs	r2, #15
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	08da      	lsrs	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3208      	adds	r2, #8
 8002f42:	69b9      	ldr	r1, [r7, #24]
 8002f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2203      	movs	r2, #3
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0203 	and.w	r2, r3, #3
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80be 	beq.w	8003106 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8a:	4b66      	ldr	r3, [pc, #408]	; (8003124 <HAL_GPIO_Init+0x324>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	4a65      	ldr	r2, [pc, #404]	; (8003124 <HAL_GPIO_Init+0x324>)
 8002f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f94:	6453      	str	r3, [r2, #68]	; 0x44
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <HAL_GPIO_Init+0x324>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fa2:	4a61      	ldr	r2, [pc, #388]	; (8003128 <HAL_GPIO_Init+0x328>)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	3302      	adds	r3, #2
 8002faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	220f      	movs	r2, #15
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_GPIO_Init+0x32c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d037      	beq.n	800303e <HAL_GPIO_Init+0x23e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a57      	ldr	r2, [pc, #348]	; (8003130 <HAL_GPIO_Init+0x330>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d031      	beq.n	800303a <HAL_GPIO_Init+0x23a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a56      	ldr	r2, [pc, #344]	; (8003134 <HAL_GPIO_Init+0x334>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02b      	beq.n	8003036 <HAL_GPIO_Init+0x236>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a55      	ldr	r2, [pc, #340]	; (8003138 <HAL_GPIO_Init+0x338>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d025      	beq.n	8003032 <HAL_GPIO_Init+0x232>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a54      	ldr	r2, [pc, #336]	; (800313c <HAL_GPIO_Init+0x33c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01f      	beq.n	800302e <HAL_GPIO_Init+0x22e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a53      	ldr	r2, [pc, #332]	; (8003140 <HAL_GPIO_Init+0x340>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d019      	beq.n	800302a <HAL_GPIO_Init+0x22a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a52      	ldr	r2, [pc, #328]	; (8003144 <HAL_GPIO_Init+0x344>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_GPIO_Init+0x226>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a51      	ldr	r2, [pc, #324]	; (8003148 <HAL_GPIO_Init+0x348>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00d      	beq.n	8003022 <HAL_GPIO_Init+0x222>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a50      	ldr	r2, [pc, #320]	; (800314c <HAL_GPIO_Init+0x34c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <HAL_GPIO_Init+0x21e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4f      	ldr	r2, [pc, #316]	; (8003150 <HAL_GPIO_Init+0x350>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d101      	bne.n	800301a <HAL_GPIO_Init+0x21a>
 8003016:	2309      	movs	r3, #9
 8003018:	e012      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800301a:	230a      	movs	r3, #10
 800301c:	e010      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800301e:	2308      	movs	r3, #8
 8003020:	e00e      	b.n	8003040 <HAL_GPIO_Init+0x240>
 8003022:	2307      	movs	r3, #7
 8003024:	e00c      	b.n	8003040 <HAL_GPIO_Init+0x240>
 8003026:	2306      	movs	r3, #6
 8003028:	e00a      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800302a:	2305      	movs	r3, #5
 800302c:	e008      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800302e:	2304      	movs	r3, #4
 8003030:	e006      	b.n	8003040 <HAL_GPIO_Init+0x240>
 8003032:	2303      	movs	r3, #3
 8003034:	e004      	b.n	8003040 <HAL_GPIO_Init+0x240>
 8003036:	2302      	movs	r3, #2
 8003038:	e002      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_GPIO_Init+0x240>
 800303e:	2300      	movs	r3, #0
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	f002 0203 	and.w	r2, r2, #3
 8003046:	0092      	lsls	r2, r2, #2
 8003048:	4093      	lsls	r3, r2
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003050:	4935      	ldr	r1, [pc, #212]	; (8003128 <HAL_GPIO_Init+0x328>)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	3302      	adds	r3, #2
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800305e:	4b3d      	ldr	r3, [pc, #244]	; (8003154 <HAL_GPIO_Init+0x354>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003082:	4a34      	ldr	r2, [pc, #208]	; (8003154 <HAL_GPIO_Init+0x354>)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003088:	4b32      	ldr	r3, [pc, #200]	; (8003154 <HAL_GPIO_Init+0x354>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ac:	4a29      	ldr	r2, [pc, #164]	; (8003154 <HAL_GPIO_Init+0x354>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030b2:	4b28      	ldr	r3, [pc, #160]	; (8003154 <HAL_GPIO_Init+0x354>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030d6:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_GPIO_Init+0x354>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030dc:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <HAL_GPIO_Init+0x354>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003100:	4a14      	ldr	r2, [pc, #80]	; (8003154 <HAL_GPIO_Init+0x354>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3301      	adds	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b0f      	cmp	r3, #15
 8003110:	f67f ae86 	bls.w	8002e20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3724      	adds	r7, #36	; 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	40013800 	.word	0x40013800
 800312c:	40020000 	.word	0x40020000
 8003130:	40020400 	.word	0x40020400
 8003134:	40020800 	.word	0x40020800
 8003138:	40020c00 	.word	0x40020c00
 800313c:	40021000 	.word	0x40021000
 8003140:	40021400 	.word	0x40021400
 8003144:	40021800 	.word	0x40021800
 8003148:	40021c00 	.word	0x40021c00
 800314c:	40022000 	.word	0x40022000
 8003150:	40022400 	.word	0x40022400
 8003154:	40013c00 	.word	0x40013c00

08003158 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	e0d9      	b.n	8003328 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003174:	2201      	movs	r2, #1
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	429a      	cmp	r2, r3
 800318c:	f040 80c9 	bne.w	8003322 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003190:	4a6b      	ldr	r2, [pc, #428]	; (8003340 <HAL_GPIO_DeInit+0x1e8>)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	3302      	adds	r3, #2
 8003198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	220f      	movs	r2, #15
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	4013      	ands	r3, r2
 80031b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a63      	ldr	r2, [pc, #396]	; (8003344 <HAL_GPIO_DeInit+0x1ec>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d037      	beq.n	800322a <HAL_GPIO_DeInit+0xd2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a62      	ldr	r2, [pc, #392]	; (8003348 <HAL_GPIO_DeInit+0x1f0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d031      	beq.n	8003226 <HAL_GPIO_DeInit+0xce>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a61      	ldr	r2, [pc, #388]	; (800334c <HAL_GPIO_DeInit+0x1f4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02b      	beq.n	8003222 <HAL_GPIO_DeInit+0xca>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a60      	ldr	r2, [pc, #384]	; (8003350 <HAL_GPIO_DeInit+0x1f8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d025      	beq.n	800321e <HAL_GPIO_DeInit+0xc6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a5f      	ldr	r2, [pc, #380]	; (8003354 <HAL_GPIO_DeInit+0x1fc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01f      	beq.n	800321a <HAL_GPIO_DeInit+0xc2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a5e      	ldr	r2, [pc, #376]	; (8003358 <HAL_GPIO_DeInit+0x200>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d019      	beq.n	8003216 <HAL_GPIO_DeInit+0xbe>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a5d      	ldr	r2, [pc, #372]	; (800335c <HAL_GPIO_DeInit+0x204>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_GPIO_DeInit+0xba>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a5c      	ldr	r2, [pc, #368]	; (8003360 <HAL_GPIO_DeInit+0x208>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00d      	beq.n	800320e <HAL_GPIO_DeInit+0xb6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a5b      	ldr	r2, [pc, #364]	; (8003364 <HAL_GPIO_DeInit+0x20c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <HAL_GPIO_DeInit+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a5a      	ldr	r2, [pc, #360]	; (8003368 <HAL_GPIO_DeInit+0x210>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d101      	bne.n	8003206 <HAL_GPIO_DeInit+0xae>
 8003202:	2309      	movs	r3, #9
 8003204:	e012      	b.n	800322c <HAL_GPIO_DeInit+0xd4>
 8003206:	230a      	movs	r3, #10
 8003208:	e010      	b.n	800322c <HAL_GPIO_DeInit+0xd4>
 800320a:	2308      	movs	r3, #8
 800320c:	e00e      	b.n	800322c <HAL_GPIO_DeInit+0xd4>
 800320e:	2307      	movs	r3, #7
 8003210:	e00c      	b.n	800322c <HAL_GPIO_DeInit+0xd4>
 8003212:	2306      	movs	r3, #6
 8003214:	e00a      	b.n	800322c <HAL_GPIO_DeInit+0xd4>
 8003216:	2305      	movs	r3, #5
 8003218:	e008      	b.n	800322c <HAL_GPIO_DeInit+0xd4>
 800321a:	2304      	movs	r3, #4
 800321c:	e006      	b.n	800322c <HAL_GPIO_DeInit+0xd4>
 800321e:	2303      	movs	r3, #3
 8003220:	e004      	b.n	800322c <HAL_GPIO_DeInit+0xd4>
 8003222:	2302      	movs	r3, #2
 8003224:	e002      	b.n	800322c <HAL_GPIO_DeInit+0xd4>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_GPIO_DeInit+0xd4>
 800322a:	2300      	movs	r3, #0
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	f002 0203 	and.w	r2, r2, #3
 8003232:	0092      	lsls	r2, r2, #2
 8003234:	4093      	lsls	r3, r2
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	429a      	cmp	r2, r3
 800323a:	d132      	bne.n	80032a2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800323c:	4b4b      	ldr	r3, [pc, #300]	; (800336c <HAL_GPIO_DeInit+0x214>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	43db      	mvns	r3, r3
 8003244:	4949      	ldr	r1, [pc, #292]	; (800336c <HAL_GPIO_DeInit+0x214>)
 8003246:	4013      	ands	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800324a:	4b48      	ldr	r3, [pc, #288]	; (800336c <HAL_GPIO_DeInit+0x214>)
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	43db      	mvns	r3, r3
 8003252:	4946      	ldr	r1, [pc, #280]	; (800336c <HAL_GPIO_DeInit+0x214>)
 8003254:	4013      	ands	r3, r2
 8003256:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003258:	4b44      	ldr	r3, [pc, #272]	; (800336c <HAL_GPIO_DeInit+0x214>)
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	43db      	mvns	r3, r3
 8003260:	4942      	ldr	r1, [pc, #264]	; (800336c <HAL_GPIO_DeInit+0x214>)
 8003262:	4013      	ands	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003266:	4b41      	ldr	r3, [pc, #260]	; (800336c <HAL_GPIO_DeInit+0x214>)
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	43db      	mvns	r3, r3
 800326e:	493f      	ldr	r1, [pc, #252]	; (800336c <HAL_GPIO_DeInit+0x214>)
 8003270:	4013      	ands	r3, r2
 8003272:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	220f      	movs	r2, #15
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003284:	4a2e      	ldr	r2, [pc, #184]	; (8003340 <HAL_GPIO_DeInit+0x1e8>)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	3302      	adds	r3, #2
 800328c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	43da      	mvns	r2, r3
 8003294:	482a      	ldr	r0, [pc, #168]	; (8003340 <HAL_GPIO_DeInit+0x1e8>)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	400a      	ands	r2, r1
 800329c:	3302      	adds	r3, #2
 800329e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2103      	movs	r1, #3
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	401a      	ands	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	08da      	lsrs	r2, r3, #3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3208      	adds	r2, #8
 80032c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	220f      	movs	r2, #15
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	08d2      	lsrs	r2, r2, #3
 80032d8:	4019      	ands	r1, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3208      	adds	r2, #8
 80032de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2103      	movs	r1, #3
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	401a      	ands	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	2101      	movs	r1, #1
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	401a      	ands	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	2103      	movs	r1, #3
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	401a      	ands	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3301      	adds	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	f67f af22 	bls.w	8003174 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40013800 	.word	0x40013800
 8003344:	40020000 	.word	0x40020000
 8003348:	40020400 	.word	0x40020400
 800334c:	40020800 	.word	0x40020800
 8003350:	40020c00 	.word	0x40020c00
 8003354:	40021000 	.word	0x40021000
 8003358:	40021400 	.word	0x40021400
 800335c:	40021800 	.word	0x40021800
 8003360:	40021c00 	.word	0x40021c00
 8003364:	40022000 	.word	0x40022000
 8003368:	40022400 	.word	0x40022400
 800336c:	40013c00 	.word	0x40013c00

08003370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	807b      	strh	r3, [r7, #2]
 800337c:	4613      	mov	r3, r2
 800337e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003380:	787b      	ldrb	r3, [r7, #1]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800338c:	e003      	b.n	8003396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800338e:	887b      	ldrh	r3, [r7, #2]
 8003390:	041a      	lsls	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	619a      	str	r2, [r3, #24]
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e0bf      	b.n	8003536 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f8ba 	bl	8003544 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80033e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6999      	ldr	r1, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6899      	ldr	r1, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <HAL_LTDC_Init+0x19c>)
 8003418:	400b      	ands	r3, r1
 800341a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6899      	ldr	r1, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68d9      	ldr	r1, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b3e      	ldr	r3, [pc, #248]	; (8003540 <HAL_LTDC_Init+0x19c>)
 8003446:	400b      	ands	r3, r1
 8003448:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	041b      	lsls	r3, r3, #16
 8003450:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68d9      	ldr	r1, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6919      	ldr	r1, [r3, #16]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	4b33      	ldr	r3, [pc, #204]	; (8003540 <HAL_LTDC_Init+0x19c>)
 8003474:	400b      	ands	r3, r1
 8003476:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	041b      	lsls	r3, r3, #16
 800347e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6919      	ldr	r1, [r3, #16]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6959      	ldr	r1, [r3, #20]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b27      	ldr	r3, [pc, #156]	; (8003540 <HAL_LTDC_Init+0x19c>)
 80034a2:	400b      	ands	r3, r1
 80034a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	041b      	lsls	r3, r3, #16
 80034ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6959      	ldr	r1, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80034e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0206 	orr.w	r2, r2, #6
 8003512:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	f000f800 	.word	0xf000f800

08003544 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_LTDC_ConfigLayer+0x1a>
 800356e:	2302      	movs	r3, #2
 8003570:	e02c      	b.n	80035cc <HAL_LTDC_ConfigLayer+0x74>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2134      	movs	r1, #52	; 0x34
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4614      	mov	r4, r2
 8003596:	461d      	mov	r5, r3
 8003598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800359a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800359c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800359e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f847 	bl	8003640 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2201      	movs	r2, #1
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bdb0      	pop	{r4, r5, r7, pc}

080035d4 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_LTDC_SetAddress+0x1a>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e024      	b.n	8003638 <HAL_LTDC_SetAddress+0x64>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2202      	movs	r2, #2
 80035fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2234      	movs	r2, #52	; 0x34
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	3338      	adds	r3, #56	; 0x38
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6979      	ldr	r1, [r7, #20]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f811 	bl	8003640 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2201      	movs	r2, #1
 8003624:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	; 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	0c1b      	lsrs	r3, r3, #16
 8003658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365c:	4413      	add	r3, r2
 800365e:	041b      	lsls	r3, r3, #16
 8003660:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	01db      	lsls	r3, r3, #7
 800366c:	4413      	add	r3, r2
 800366e:	3384      	adds	r3, #132	; 0x84
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	4611      	mov	r1, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	01d2      	lsls	r2, r2, #7
 800367c:	440a      	add	r2, r1
 800367e:	3284      	adds	r2, #132	; 0x84
 8003680:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003684:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003696:	4413      	add	r3, r2
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4619      	mov	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	01db      	lsls	r3, r3, #7
 80036a4:	440b      	add	r3, r1
 80036a6:	3384      	adds	r3, #132	; 0x84
 80036a8:	4619      	mov	r1, r3
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036be:	4413      	add	r3, r2
 80036c0:	041b      	lsls	r3, r3, #16
 80036c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	01db      	lsls	r3, r3, #7
 80036ce:	4413      	add	r3, r2
 80036d0:	3384      	adds	r3, #132	; 0x84
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	4611      	mov	r1, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	01d2      	lsls	r2, r2, #7
 80036de:	440a      	add	r2, r1
 80036e0:	3284      	adds	r2, #132	; 0x84
 80036e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80036e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f6:	4413      	add	r3, r2
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4619      	mov	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	01db      	lsls	r3, r3, #7
 8003704:	440b      	add	r3, r1
 8003706:	3384      	adds	r3, #132	; 0x84
 8003708:	4619      	mov	r1, r3
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	4313      	orrs	r3, r2
 800370e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	01db      	lsls	r3, r3, #7
 800371a:	4413      	add	r3, r2
 800371c:	3384      	adds	r3, #132	; 0x84
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	4611      	mov	r1, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	01d2      	lsls	r2, r2, #7
 800372a:	440a      	add	r2, r1
 800372c:	3284      	adds	r2, #132	; 0x84
 800372e:	f023 0307 	bic.w	r3, r3, #7
 8003732:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	01db      	lsls	r3, r3, #7
 800373e:	4413      	add	r3, r2
 8003740:	3384      	adds	r3, #132	; 0x84
 8003742:	461a      	mov	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	061b      	lsls	r3, r3, #24
 8003764:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	01db      	lsls	r3, r3, #7
 8003770:	4413      	add	r3, r2
 8003772:	3384      	adds	r3, #132	; 0x84
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	01db      	lsls	r3, r3, #7
 8003780:	4413      	add	r3, r2
 8003782:	3384      	adds	r3, #132	; 0x84
 8003784:	461a      	mov	r2, r3
 8003786:	2300      	movs	r3, #0
 8003788:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003790:	461a      	mov	r2, r3
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	431a      	orrs	r2, r3
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	431a      	orrs	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4619      	mov	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	01db      	lsls	r3, r3, #7
 80037a4:	440b      	add	r3, r1
 80037a6:	3384      	adds	r3, #132	; 0x84
 80037a8:	4619      	mov	r1, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	01db      	lsls	r3, r3, #7
 80037ba:	4413      	add	r3, r2
 80037bc:	3384      	adds	r3, #132	; 0x84
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	4611      	mov	r1, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	01d2      	lsls	r2, r2, #7
 80037ca:	440a      	add	r2, r1
 80037cc:	3284      	adds	r2, #132	; 0x84
 80037ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	01db      	lsls	r3, r3, #7
 80037de:	4413      	add	r3, r2
 80037e0:	3384      	adds	r3, #132	; 0x84
 80037e2:	461a      	mov	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	01db      	lsls	r3, r3, #7
 80037f4:	4413      	add	r3, r2
 80037f6:	3384      	adds	r3, #132	; 0x84
 80037f8:	69da      	ldr	r2, [r3, #28]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4619      	mov	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	01db      	lsls	r3, r3, #7
 8003804:	440b      	add	r3, r1
 8003806:	3384      	adds	r3, #132	; 0x84
 8003808:	4619      	mov	r1, r3
 800380a:	4b58      	ldr	r3, [pc, #352]	; (800396c <LTDC_SetConfig+0x32c>)
 800380c:	4013      	ands	r3, r2
 800380e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	68f9      	ldr	r1, [r7, #12]
 800381a:	6809      	ldr	r1, [r1, #0]
 800381c:	4608      	mov	r0, r1
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	01c9      	lsls	r1, r1, #7
 8003822:	4401      	add	r1, r0
 8003824:	3184      	adds	r1, #132	; 0x84
 8003826:	4313      	orrs	r3, r2
 8003828:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	01db      	lsls	r3, r3, #7
 8003834:	4413      	add	r3, r2
 8003836:	3384      	adds	r3, #132	; 0x84
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	01db      	lsls	r3, r3, #7
 8003844:	4413      	add	r3, r2
 8003846:	3384      	adds	r3, #132	; 0x84
 8003848:	461a      	mov	r2, r3
 800384a:	2300      	movs	r3, #0
 800384c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	01db      	lsls	r3, r3, #7
 8003858:	4413      	add	r3, r2
 800385a:	3384      	adds	r3, #132	; 0x84
 800385c:	461a      	mov	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800386c:	2304      	movs	r3, #4
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	e01b      	b.n	80038aa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d102      	bne.n	8003880 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800387a:	2303      	movs	r3, #3
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	e014      	b.n	80038aa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d00b      	beq.n	80038a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800388c:	2b02      	cmp	r3, #2
 800388e:	d007      	beq.n	80038a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003894:	2b03      	cmp	r3, #3
 8003896:	d003      	beq.n	80038a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800389c:	2b07      	cmp	r3, #7
 800389e:	d102      	bne.n	80038a6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80038a0:	2302      	movs	r3, #2
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	e001      	b.n	80038aa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80038a6:	2301      	movs	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	01db      	lsls	r3, r3, #7
 80038b4:	4413      	add	r3, r2
 80038b6:	3384      	adds	r3, #132	; 0x84
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	6812      	ldr	r2, [r2, #0]
 80038be:	4611      	mov	r1, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	01d2      	lsls	r2, r2, #7
 80038c4:	440a      	add	r2, r1
 80038c6:	3284      	adds	r2, #132	; 0x84
 80038c8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80038cc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	fb02 f303 	mul.w	r3, r2, r3
 80038d8:	041a      	lsls	r2, r3, #16
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	1acb      	subs	r3, r1, r3
 80038e4:	69f9      	ldr	r1, [r7, #28]
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	3303      	adds	r3, #3
 80038ec:	68f9      	ldr	r1, [r7, #12]
 80038ee:	6809      	ldr	r1, [r1, #0]
 80038f0:	4608      	mov	r0, r1
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	01c9      	lsls	r1, r1, #7
 80038f6:	4401      	add	r1, r0
 80038f8:	3184      	adds	r1, #132	; 0x84
 80038fa:	4313      	orrs	r3, r2
 80038fc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	01db      	lsls	r3, r3, #7
 8003908:	4413      	add	r3, r2
 800390a:	3384      	adds	r3, #132	; 0x84
 800390c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4619      	mov	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	01db      	lsls	r3, r3, #7
 8003918:	440b      	add	r3, r1
 800391a:	3384      	adds	r3, #132	; 0x84
 800391c:	4619      	mov	r1, r3
 800391e:	4b14      	ldr	r3, [pc, #80]	; (8003970 <LTDC_SetConfig+0x330>)
 8003920:	4013      	ands	r3, r2
 8003922:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	01db      	lsls	r3, r3, #7
 800392e:	4413      	add	r3, r2
 8003930:	3384      	adds	r3, #132	; 0x84
 8003932:	461a      	mov	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	01db      	lsls	r3, r3, #7
 8003944:	4413      	add	r3, r2
 8003946:	3384      	adds	r3, #132	; 0x84
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	4611      	mov	r1, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	01d2      	lsls	r2, r2, #7
 8003954:	440a      	add	r2, r1
 8003956:	3284      	adds	r2, #132	; 0x84
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6013      	str	r3, [r2, #0]
}
 800395e:	bf00      	nop
 8003960:	3724      	adds	r7, #36	; 0x24
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	fffff8f8 	.word	0xfffff8f8
 8003970:	fffff800 	.word	0xfffff800

08003974 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8003986:	2200      	movs	r2, #0
 8003988:	e001      	b.n	800398e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800398a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800399a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800399e:	e000      	b.n	80039a2 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80039a0:	2200      	movs	r2, #0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d102      	bne.n	80039b4 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80039ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039b2:	e000      	b.n	80039b6 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80039b4:	2200      	movs	r2, #0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	1e5a      	subs	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	4413      	add	r3, r2
 80039ce:	1e5a      	subs	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	441a      	add	r2, r3
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	4413      	add	r3, r2
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	441a      	add	r2, r3
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	441a      	add	r2, r3
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	4413      	add	r3, r2
 8003a00:	1e5a      	subs	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a22:	6013      	str	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40007000 	.word	0x40007000

08003a34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	4b23      	ldr	r3, [pc, #140]	; (8003acc <HAL_PWREx_EnableOverDrive+0x98>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	4a22      	ldr	r2, [pc, #136]	; (8003acc <HAL_PWREx_EnableOverDrive+0x98>)
 8003a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a48:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_PWREx_EnableOverDrive+0x98>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1d      	ldr	r2, [pc, #116]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a62:	f7fe fb79 	bl	8002158 <HAL_GetTick>
 8003a66:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a68:	e009      	b.n	8003a7e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a6a:	f7fe fb75 	bl	8002158 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a78:	d901      	bls.n	8003a7e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e022      	b.n	8003ac4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a7e:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8a:	d1ee      	bne.n	8003a6a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a8c:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a0f      	ldr	r2, [pc, #60]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a98:	f7fe fb5e 	bl	8002158 <HAL_GetTick>
 8003a9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a9e:	e009      	b.n	8003ab4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003aa0:	f7fe fb5a 	bl	8002158 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aae:	d901      	bls.n	8003ab4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e007      	b.n	8003ac4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ac0:	d1ee      	bne.n	8003aa0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40007000 	.word	0x40007000

08003ad4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003adc:	2300      	movs	r3, #0
 8003ade:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e29b      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8087 	beq.w	8003c06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af8:	4b96      	ldr	r3, [pc, #600]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d00c      	beq.n	8003b1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b04:	4b93      	ldr	r3, [pc, #588]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d112      	bne.n	8003b36 <HAL_RCC_OscConfig+0x62>
 8003b10:	4b90      	ldr	r3, [pc, #576]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b1c:	d10b      	bne.n	8003b36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1e:	4b8d      	ldr	r3, [pc, #564]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d06c      	beq.n	8003c04 <HAL_RCC_OscConfig+0x130>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d168      	bne.n	8003c04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e275      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCC_OscConfig+0x7a>
 8003b40:	4b84      	ldr	r3, [pc, #528]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a83      	ldr	r2, [pc, #524]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e02e      	b.n	8003bac <HAL_RCC_OscConfig+0xd8>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x9c>
 8003b56:	4b7f      	ldr	r3, [pc, #508]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7e      	ldr	r2, [pc, #504]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b7c      	ldr	r3, [pc, #496]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a7b      	ldr	r2, [pc, #492]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e01d      	b.n	8003bac <HAL_RCC_OscConfig+0xd8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0xc0>
 8003b7a:	4b76      	ldr	r3, [pc, #472]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a75      	ldr	r2, [pc, #468]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	4b73      	ldr	r3, [pc, #460]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a72      	ldr	r2, [pc, #456]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0xd8>
 8003b94:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a6e      	ldr	r2, [pc, #440]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b6c      	ldr	r3, [pc, #432]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a6b      	ldr	r2, [pc, #428]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d013      	beq.n	8003bdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fad0 	bl	8002158 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fe facc 	bl	8002158 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e229      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	4b61      	ldr	r3, [pc, #388]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0xe8>
 8003bda:	e014      	b.n	8003c06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fe fabc 	bl	8002158 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fe fab8 	bl	8002158 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e215      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	4b57      	ldr	r3, [pc, #348]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x110>
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d069      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c12:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1e:	4b4d      	ldr	r3, [pc, #308]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d11c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x190>
 8003c2a:	4b4a      	ldr	r3, [pc, #296]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d116      	bne.n	8003c64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	4b47      	ldr	r3, [pc, #284]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_RCC_OscConfig+0x17a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e1e9      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b41      	ldr	r3, [pc, #260]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	493d      	ldr	r1, [pc, #244]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	e040      	b.n	8003ce6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d023      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6c:	4b39      	ldr	r3, [pc, #228]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a38      	ldr	r2, [pc, #224]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe fa6e 	bl	8002158 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c80:	f7fe fa6a 	bl	8002158 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1c7      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c92:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9e:	4b2d      	ldr	r3, [pc, #180]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4929      	ldr	r1, [pc, #164]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]
 8003cb2:	e018      	b.n	8003ce6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fa4a 	bl	8002158 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc8:	f7fe fa46 	bl	8002158 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e1a3      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cda:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d038      	beq.n	8003d64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d019      	beq.n	8003d2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d06:	f7fe fa27 	bl	8002158 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0e:	f7fe fa23 	bl	8002158 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e180      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x23a>
 8003d2c:	e01a      	b.n	8003d64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d32:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <HAL_RCC_OscConfig+0x280>)
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fe fa0d 	bl	8002158 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fe fa09 	bl	8002158 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d903      	bls.n	8003d58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e166      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
 8003d54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d58:	4b92      	ldr	r3, [pc, #584]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ee      	bne.n	8003d42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80a4 	beq.w	8003eba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d72:	4b8c      	ldr	r3, [pc, #560]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10d      	bne.n	8003d9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	4b89      	ldr	r3, [pc, #548]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a88      	ldr	r2, [pc, #544]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8a:	4b86      	ldr	r3, [pc, #536]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d96:	2301      	movs	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d9a:	4b83      	ldr	r3, [pc, #524]	; (8003fa8 <HAL_RCC_OscConfig+0x4d4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d118      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003da6:	4b80      	ldr	r3, [pc, #512]	; (8003fa8 <HAL_RCC_OscConfig+0x4d4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a7f      	ldr	r2, [pc, #508]	; (8003fa8 <HAL_RCC_OscConfig+0x4d4>)
 8003dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db2:	f7fe f9d1 	bl	8002158 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dba:	f7fe f9cd 	bl	8002158 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b64      	cmp	r3, #100	; 0x64
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e12a      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dcc:	4b76      	ldr	r3, [pc, #472]	; (8003fa8 <HAL_RCC_OscConfig+0x4d4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d106      	bne.n	8003dee <HAL_RCC_OscConfig+0x31a>
 8003de0:	4b70      	ldr	r3, [pc, #448]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4a6f      	ldr	r2, [pc, #444]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
 8003dec:	e02d      	b.n	8003e4a <HAL_RCC_OscConfig+0x376>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x33c>
 8003df6:	4b6b      	ldr	r3, [pc, #428]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a6a      	ldr	r2, [pc, #424]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70
 8003e02:	4b68      	ldr	r3, [pc, #416]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a67      	ldr	r2, [pc, #412]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	f023 0304 	bic.w	r3, r3, #4
 8003e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0e:	e01c      	b.n	8003e4a <HAL_RCC_OscConfig+0x376>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b05      	cmp	r3, #5
 8003e16:	d10c      	bne.n	8003e32 <HAL_RCC_OscConfig+0x35e>
 8003e18:	4b62      	ldr	r3, [pc, #392]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	4a61      	ldr	r2, [pc, #388]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e1e:	f043 0304 	orr.w	r3, r3, #4
 8003e22:	6713      	str	r3, [r2, #112]	; 0x70
 8003e24:	4b5f      	ldr	r3, [pc, #380]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	4a5e      	ldr	r2, [pc, #376]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e30:	e00b      	b.n	8003e4a <HAL_RCC_OscConfig+0x376>
 8003e32:	4b5c      	ldr	r3, [pc, #368]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4a5b      	ldr	r2, [pc, #364]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3e:	4b59      	ldr	r3, [pc, #356]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	4a58      	ldr	r2, [pc, #352]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e44:	f023 0304 	bic.w	r3, r3, #4
 8003e48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d015      	beq.n	8003e7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e52:	f7fe f981 	bl	8002158 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e58:	e00a      	b.n	8003e70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fe f97d 	bl	8002158 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e0d8      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e70:	4b4c      	ldr	r3, [pc, #304]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0ee      	beq.n	8003e5a <HAL_RCC_OscConfig+0x386>
 8003e7c:	e014      	b.n	8003ea8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fe f96b 	bl	8002158 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fe f967 	bl	8002158 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e0c2      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9c:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ee      	bne.n	8003e86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d105      	bne.n	8003eba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eae:	4b3d      	ldr	r3, [pc, #244]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	4a3c      	ldr	r2, [pc, #240]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80ae 	beq.w	8004020 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec4:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d06d      	beq.n	8003fac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d14b      	bne.n	8003f70 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed8:	4b32      	ldr	r3, [pc, #200]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a31      	ldr	r2, [pc, #196]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe f938 	bl	8002158 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fe f934 	bl	8002158 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e091      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	019b      	lsls	r3, r3, #6
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	3b01      	subs	r3, #1
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	071b      	lsls	r3, r3, #28
 8003f36:	491b      	ldr	r1, [pc, #108]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fe f906 	bl	8002158 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fe f902 	bl	8002158 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e05f      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x47c>
 8003f6e:	e057      	b.n	8004020 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fe f8ec 	bl	8002158 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f84:	f7fe f8e8 	bl	8002158 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e045      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x4b0>
 8003fa2:	e03d      	b.n	8004020 <HAL_RCC_OscConfig+0x54c>
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fac:	4b1f      	ldr	r3, [pc, #124]	; (800402c <HAL_RCC_OscConfig+0x558>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d030      	beq.n	800401c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d129      	bne.n	800401c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d122      	bne.n	800401c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fdc:	4013      	ands	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fe2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d119      	bne.n	800401c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d10f      	bne.n	800401c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d107      	bne.n	800401c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40023800 	.word	0x40023800

08004030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0d0      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004048:	4b6a      	ldr	r3, [pc, #424]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d910      	bls.n	8004078 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004056:	4b67      	ldr	r3, [pc, #412]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 020f 	bic.w	r2, r3, #15
 800405e:	4965      	ldr	r1, [pc, #404]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	4313      	orrs	r3, r2
 8004064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004066:	4b63      	ldr	r3, [pc, #396]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0b8      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d020      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004090:	4b59      	ldr	r3, [pc, #356]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4a58      	ldr	r2, [pc, #352]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800409a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040a8:	4b53      	ldr	r3, [pc, #332]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4a52      	ldr	r2, [pc, #328]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b4:	4b50      	ldr	r3, [pc, #320]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	494d      	ldr	r1, [pc, #308]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d040      	beq.n	8004154 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d107      	bne.n	80040ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d115      	bne.n	8004112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e07f      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d107      	bne.n	8004102 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f2:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e073      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004102:	4b3d      	ldr	r3, [pc, #244]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e06b      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004112:	4b39      	ldr	r3, [pc, #228]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f023 0203 	bic.w	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4936      	ldr	r1, [pc, #216]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004120:	4313      	orrs	r3, r2
 8004122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004124:	f7fe f818 	bl	8002158 <HAL_GetTick>
 8004128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412a:	e00a      	b.n	8004142 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412c:	f7fe f814 	bl	8002158 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	f241 3288 	movw	r2, #5000	; 0x1388
 800413a:	4293      	cmp	r3, r2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e053      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004142:	4b2d      	ldr	r3, [pc, #180]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 020c 	and.w	r2, r3, #12
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	429a      	cmp	r2, r3
 8004152:	d1eb      	bne.n	800412c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004154:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d210      	bcs.n	8004184 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 020f 	bic.w	r2, r3, #15
 800416a:	4922      	ldr	r1, [pc, #136]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004172:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e032      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4916      	ldr	r1, [pc, #88]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	490e      	ldr	r1, [pc, #56]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041c2:	f000 f821 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 80041c6:	4602      	mov	r2, r0
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	490a      	ldr	r1, [pc, #40]	; (80041fc <HAL_RCC_ClockConfig+0x1cc>)
 80041d4:	5ccb      	ldrb	r3, [r1, r3]
 80041d6:	fa22 f303 	lsr.w	r3, r2, r3
 80041da:	4a09      	ldr	r2, [pc, #36]	; (8004200 <HAL_RCC_ClockConfig+0x1d0>)
 80041dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <HAL_RCC_ClockConfig+0x1d4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd ff74 	bl	80020d0 <HAL_InitTick>

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023c00 	.word	0x40023c00
 80041f8:	40023800 	.word	0x40023800
 80041fc:	08008b40 	.word	0x08008b40
 8004200:	20000000 	.word	0x20000000
 8004204:	20000004 	.word	0x20000004

08004208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004208:	b5b0      	push	{r4, r5, r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800420e:	2100      	movs	r1, #0
 8004210:	6079      	str	r1, [r7, #4]
 8004212:	2100      	movs	r1, #0
 8004214:	60f9      	str	r1, [r7, #12]
 8004216:	2100      	movs	r1, #0
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800421a:	2100      	movs	r1, #0
 800421c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800421e:	4952      	ldr	r1, [pc, #328]	; (8004368 <HAL_RCC_GetSysClockFreq+0x160>)
 8004220:	6889      	ldr	r1, [r1, #8]
 8004222:	f001 010c 	and.w	r1, r1, #12
 8004226:	2908      	cmp	r1, #8
 8004228:	d00d      	beq.n	8004246 <HAL_RCC_GetSysClockFreq+0x3e>
 800422a:	2908      	cmp	r1, #8
 800422c:	f200 8094 	bhi.w	8004358 <HAL_RCC_GetSysClockFreq+0x150>
 8004230:	2900      	cmp	r1, #0
 8004232:	d002      	beq.n	800423a <HAL_RCC_GetSysClockFreq+0x32>
 8004234:	2904      	cmp	r1, #4
 8004236:	d003      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x38>
 8004238:	e08e      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800423a:	4b4c      	ldr	r3, [pc, #304]	; (800436c <HAL_RCC_GetSysClockFreq+0x164>)
 800423c:	60bb      	str	r3, [r7, #8]
      break;
 800423e:	e08e      	b.n	800435e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004240:	4b4b      	ldr	r3, [pc, #300]	; (8004370 <HAL_RCC_GetSysClockFreq+0x168>)
 8004242:	60bb      	str	r3, [r7, #8]
      break;
 8004244:	e08b      	b.n	800435e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004246:	4948      	ldr	r1, [pc, #288]	; (8004368 <HAL_RCC_GetSysClockFreq+0x160>)
 8004248:	6849      	ldr	r1, [r1, #4]
 800424a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800424e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004250:	4945      	ldr	r1, [pc, #276]	; (8004368 <HAL_RCC_GetSysClockFreq+0x160>)
 8004252:	6849      	ldr	r1, [r1, #4]
 8004254:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004258:	2900      	cmp	r1, #0
 800425a:	d024      	beq.n	80042a6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425c:	4942      	ldr	r1, [pc, #264]	; (8004368 <HAL_RCC_GetSysClockFreq+0x160>)
 800425e:	6849      	ldr	r1, [r1, #4]
 8004260:	0989      	lsrs	r1, r1, #6
 8004262:	4608      	mov	r0, r1
 8004264:	f04f 0100 	mov.w	r1, #0
 8004268:	f240 14ff 	movw	r4, #511	; 0x1ff
 800426c:	f04f 0500 	mov.w	r5, #0
 8004270:	ea00 0204 	and.w	r2, r0, r4
 8004274:	ea01 0305 	and.w	r3, r1, r5
 8004278:	493d      	ldr	r1, [pc, #244]	; (8004370 <HAL_RCC_GetSysClockFreq+0x168>)
 800427a:	fb01 f003 	mul.w	r0, r1, r3
 800427e:	2100      	movs	r1, #0
 8004280:	fb01 f102 	mul.w	r1, r1, r2
 8004284:	1844      	adds	r4, r0, r1
 8004286:	493a      	ldr	r1, [pc, #232]	; (8004370 <HAL_RCC_GetSysClockFreq+0x168>)
 8004288:	fba2 0101 	umull	r0, r1, r2, r1
 800428c:	1863      	adds	r3, r4, r1
 800428e:	4619      	mov	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	461a      	mov	r2, r3
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	f7fb ffd6 	bl	8000248 <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4613      	mov	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	e04a      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a6:	4b30      	ldr	r3, [pc, #192]	; (8004368 <HAL_RCC_GetSysClockFreq+0x160>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	099b      	lsrs	r3, r3, #6
 80042ac:	461a      	mov	r2, r3
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042b6:	f04f 0100 	mov.w	r1, #0
 80042ba:	ea02 0400 	and.w	r4, r2, r0
 80042be:	ea03 0501 	and.w	r5, r3, r1
 80042c2:	4620      	mov	r0, r4
 80042c4:	4629      	mov	r1, r5
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	014b      	lsls	r3, r1, #5
 80042d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042d4:	0142      	lsls	r2, r0, #5
 80042d6:	4610      	mov	r0, r2
 80042d8:	4619      	mov	r1, r3
 80042da:	1b00      	subs	r0, r0, r4
 80042dc:	eb61 0105 	sbc.w	r1, r1, r5
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	018b      	lsls	r3, r1, #6
 80042ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042ee:	0182      	lsls	r2, r0, #6
 80042f0:	1a12      	subs	r2, r2, r0
 80042f2:	eb63 0301 	sbc.w	r3, r3, r1
 80042f6:	f04f 0000 	mov.w	r0, #0
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	00d9      	lsls	r1, r3, #3
 8004300:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004304:	00d0      	lsls	r0, r2, #3
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	1912      	adds	r2, r2, r4
 800430c:	eb45 0303 	adc.w	r3, r5, r3
 8004310:	f04f 0000 	mov.w	r0, #0
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	0299      	lsls	r1, r3, #10
 800431a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800431e:	0290      	lsls	r0, r2, #10
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	461a      	mov	r2, r3
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	f7fb ff8a 	bl	8000248 <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4613      	mov	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <HAL_RCC_GetSysClockFreq+0x160>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	3301      	adds	r3, #1
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	60bb      	str	r3, [r7, #8]
      break;
 8004356:	e002      	b.n	800435e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004358:	4b04      	ldr	r3, [pc, #16]	; (800436c <HAL_RCC_GetSysClockFreq+0x164>)
 800435a:	60bb      	str	r3, [r7, #8]
      break;
 800435c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800435e:	68bb      	ldr	r3, [r7, #8]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bdb0      	pop	{r4, r5, r7, pc}
 8004368:	40023800 	.word	0x40023800
 800436c:	00f42400 	.word	0x00f42400
 8004370:	017d7840 	.word	0x017d7840

08004374 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004378:	4b03      	ldr	r3, [pc, #12]	; (8004388 <HAL_RCC_GetHCLKFreq+0x14>)
 800437a:	681b      	ldr	r3, [r3, #0]
}
 800437c:	4618      	mov	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000000 	.word	0x20000000

0800438c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004390:	f7ff fff0 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 8004394:	4602      	mov	r2, r0
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	0a9b      	lsrs	r3, r3, #10
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	4903      	ldr	r1, [pc, #12]	; (80043b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043a2:	5ccb      	ldrb	r3, [r1, r3]
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40023800 	.word	0x40023800
 80043b0:	08008b50 	.word	0x08008b50

080043b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043b8:	f7ff ffdc 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	0b5b      	lsrs	r3, r3, #13
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4903      	ldr	r1, [pc, #12]	; (80043d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40023800 	.word	0x40023800
 80043d8:	08008b50 	.word	0x08008b50

080043dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d012      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004404:	4b69      	ldr	r3, [pc, #420]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	4a68      	ldr	r2, [pc, #416]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800440e:	6093      	str	r3, [r2, #8]
 8004410:	4b66      	ldr	r3, [pc, #408]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004418:	4964      	ldr	r1, [pc, #400]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004426:	2301      	movs	r3, #1
 8004428:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d017      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004436:	4b5d      	ldr	r3, [pc, #372]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800443c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004444:	4959      	ldr	r1, [pc, #356]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004454:	d101      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004456:	2301      	movs	r3, #1
 8004458:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004462:	2301      	movs	r3, #1
 8004464:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d017      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004472:	4b4e      	ldr	r3, [pc, #312]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004478:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	494a      	ldr	r1, [pc, #296]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004490:	d101      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004492:	2301      	movs	r3, #1
 8004494:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800449e:	2301      	movs	r3, #1
 80044a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044ae:	2301      	movs	r3, #1
 80044b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 808b 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c0:	4b3a      	ldr	r3, [pc, #232]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	4a39      	ldr	r2, [pc, #228]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ca:	6413      	str	r3, [r2, #64]	; 0x40
 80044cc:	4b37      	ldr	r3, [pc, #220]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044d8:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a34      	ldr	r2, [pc, #208]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e4:	f7fd fe38 	bl	8002158 <HAL_GetTick>
 80044e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ec:	f7fd fe34 	bl	8002158 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e38f      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044fe:	4b2c      	ldr	r3, [pc, #176]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800450a:	4b28      	ldr	r3, [pc, #160]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004512:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d035      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	429a      	cmp	r2, r3
 8004526:	d02e      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004528:	4b20      	ldr	r3, [pc, #128]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004530:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004532:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800453e:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	4a1a      	ldr	r2, [pc, #104]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004548:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800454a:	4a18      	ldr	r2, [pc, #96]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004550:	4b16      	ldr	r3, [pc, #88]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d114      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fd fdfc 	bl	8002158 <HAL_GetTick>
 8004560:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004562:	e00a      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004564:	f7fd fdf8 	bl	8002158 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004572:	4293      	cmp	r3, r2
 8004574:	d901      	bls.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e351      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457a:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0ee      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004592:	d111      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045a2:	400b      	ands	r3, r1
 80045a4:	4901      	ldr	r1, [pc, #4]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40007000 	.word	0x40007000
 80045b4:	0ffffcff 	.word	0x0ffffcff
 80045b8:	4bb3      	ldr	r3, [pc, #716]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4ab2      	ldr	r2, [pc, #712]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045c2:	6093      	str	r3, [r2, #8]
 80045c4:	4bb0      	ldr	r3, [pc, #704]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d0:	49ad      	ldr	r1, [pc, #692]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d010      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045e2:	4ba9      	ldr	r3, [pc, #676]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e8:	4aa7      	ldr	r2, [pc, #668]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045f2:	4ba5      	ldr	r3, [pc, #660]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	49a2      	ldr	r1, [pc, #648]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004610:	4b9d      	ldr	r3, [pc, #628]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004616:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800461e:	499a      	ldr	r1, [pc, #616]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004632:	4b95      	ldr	r3, [pc, #596]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004638:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004640:	4991      	ldr	r1, [pc, #580]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004654:	4b8c      	ldr	r3, [pc, #560]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004662:	4989      	ldr	r1, [pc, #548]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004676:	4b84      	ldr	r3, [pc, #528]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4980      	ldr	r1, [pc, #512]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004698:	4b7b      	ldr	r3, [pc, #492]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469e:	f023 0203 	bic.w	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	4978      	ldr	r1, [pc, #480]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046ba:	4b73      	ldr	r3, [pc, #460]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c0:	f023 020c 	bic.w	r2, r3, #12
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c8:	496f      	ldr	r1, [pc, #444]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046dc:	4b6a      	ldr	r3, [pc, #424]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ea:	4967      	ldr	r1, [pc, #412]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046fe:	4b62      	ldr	r3, [pc, #392]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004704:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470c:	495e      	ldr	r1, [pc, #376]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004720:	4b59      	ldr	r3, [pc, #356]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472e:	4956      	ldr	r1, [pc, #344]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004742:	4b51      	ldr	r3, [pc, #324]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004748:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004750:	494d      	ldr	r1, [pc, #308]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004764:	4b48      	ldr	r3, [pc, #288]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004772:	4945      	ldr	r1, [pc, #276]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004786:	4b40      	ldr	r3, [pc, #256]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004794:	493c      	ldr	r1, [pc, #240]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047a8:	4b37      	ldr	r3, [pc, #220]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b6:	4934      	ldr	r1, [pc, #208]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d011      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047ca:	4b2f      	ldr	r3, [pc, #188]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047d8:	492b      	ldr	r1, [pc, #172]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e8:	d101      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047ea:	2301      	movs	r3, #1
 80047ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047fa:	2301      	movs	r3, #1
 80047fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800480a:	4b1f      	ldr	r3, [pc, #124]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004810:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004818:	491b      	ldr	r1, [pc, #108]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00b      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800482c:	4b16      	ldr	r3, [pc, #88]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800483c:	4912      	ldr	r1, [pc, #72]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004860:	4909      	ldr	r1, [pc, #36]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00f      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800487a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	e002      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800
 800488c:	4986      	ldr	r1, [pc, #536]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048a0:	4b81      	ldr	r3, [pc, #516]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b0:	497d      	ldr	r1, [pc, #500]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d006      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 80d6 	beq.w	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048cc:	4b76      	ldr	r3, [pc, #472]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a75      	ldr	r2, [pc, #468]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d8:	f7fd fc3e 	bl	8002158 <HAL_GetTick>
 80048dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048e0:	f7fd fc3a 	bl	8002158 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b64      	cmp	r3, #100	; 0x64
 80048ec:	d901      	bls.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e195      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048f2:	4b6d      	ldr	r3, [pc, #436]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d021      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490e:	2b00      	cmp	r3, #0
 8004910:	d11d      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004912:	4b65      	ldr	r3, [pc, #404]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004918:	0c1b      	lsrs	r3, r3, #16
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004920:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004926:	0e1b      	lsrs	r3, r3, #24
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	019a      	lsls	r2, r3, #6
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	041b      	lsls	r3, r3, #16
 8004938:	431a      	orrs	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	071b      	lsls	r3, r3, #28
 8004946:	4958      	ldr	r1, [pc, #352]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d004      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800496c:	2b00      	cmp	r3, #0
 800496e:	d02e      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004978:	d129      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800497a:	4b4b      	ldr	r3, [pc, #300]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800497c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004980:	0c1b      	lsrs	r3, r3, #16
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004988:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498e:	0f1b      	lsrs	r3, r3, #28
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	019a      	lsls	r2, r3, #6
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	061b      	lsls	r3, r3, #24
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	071b      	lsls	r3, r3, #28
 80049ae:	493e      	ldr	r1, [pc, #248]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049b6:	4b3c      	ldr	r3, [pc, #240]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049bc:	f023 021f 	bic.w	r2, r3, #31
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	3b01      	subs	r3, #1
 80049c6:	4938      	ldr	r1, [pc, #224]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d01d      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049da:	4b33      	ldr	r3, [pc, #204]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e0:	0e1b      	lsrs	r3, r3, #24
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049e8:	4b2f      	ldr	r3, [pc, #188]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ee:	0f1b      	lsrs	r3, r3, #28
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	019a      	lsls	r2, r3, #6
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	431a      	orrs	r2, r3
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	061b      	lsls	r3, r3, #24
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	071b      	lsls	r3, r3, #28
 8004a0e:	4926      	ldr	r1, [pc, #152]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d011      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	019a      	lsls	r2, r3, #6
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	041b      	lsls	r3, r3, #16
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	071b      	lsls	r3, r3, #28
 8004a3e:	491a      	ldr	r1, [pc, #104]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a46:	4b18      	ldr	r3, [pc, #96]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a17      	ldr	r2, [pc, #92]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a52:	f7fd fb81 	bl	8002158 <HAL_GetTick>
 8004a56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a58:	e008      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a5a:	f7fd fb7d 	bl	8002158 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b64      	cmp	r3, #100	; 0x64
 8004a66:	d901      	bls.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e0d8      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	f040 80ce 	bne.w	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8c:	f7fd fb64 	bl	8002158 <HAL_GetTick>
 8004a90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a92:	e00b      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a94:	f7fd fb60 	bl	8002158 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	; 0x64
 8004aa0:	d904      	bls.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e0bb      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aac:	4b5e      	ldr	r3, [pc, #376]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab8:	d0ec      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d02e      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d12a      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ae2:	4b51      	ldr	r3, [pc, #324]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	0c1b      	lsrs	r3, r3, #16
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004af0:	4b4d      	ldr	r3, [pc, #308]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	0f1b      	lsrs	r3, r3, #28
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	019a      	lsls	r2, r3, #6
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	061b      	lsls	r3, r3, #24
 8004b10:	431a      	orrs	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	071b      	lsls	r3, r3, #28
 8004b16:	4944      	ldr	r1, [pc, #272]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b1e:	4b42      	ldr	r3, [pc, #264]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	021b      	lsls	r3, r3, #8
 8004b30:	493d      	ldr	r1, [pc, #244]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d022      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b4c:	d11d      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b4e:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	0e1b      	lsrs	r3, r3, #24
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b5c:	4b32      	ldr	r3, [pc, #200]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	0f1b      	lsrs	r3, r3, #28
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	019a      	lsls	r2, r3, #6
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	431a      	orrs	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	071b      	lsls	r3, r3, #28
 8004b82:	4929      	ldr	r1, [pc, #164]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d028      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b96:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	0e1b      	lsrs	r3, r3, #24
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ba4:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	0c1b      	lsrs	r3, r3, #16
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	019a      	lsls	r2, r3, #6
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	061b      	lsls	r3, r3, #24
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	071b      	lsls	r3, r3, #28
 8004bca:	4917      	ldr	r1, [pc, #92]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bd2:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4911      	ldr	r1, [pc, #68]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004be8:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf4:	f7fd fab0 	bl	8002158 <HAL_GetTick>
 8004bf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bfc:	f7fd faac 	bl	8002158 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b64      	cmp	r3, #100	; 0x64
 8004c08:	d901      	bls.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e007      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c1a:	d1ef      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800

08004c2c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e025      	b.n	8004c8c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f81d 	bl	8004c94 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f000 fccb 	bl	8005608 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	f000 fd35 	bl	80056ec <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d101      	bne.n	8004cc4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e018      	b.n	8004cf6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fd89 	bl	80057ec <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d104      	bne.n	8004cec <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2205      	movs	r2, #5
 8004ce6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004cea:	e003      	b.n	8004cf4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d101      	bne.n	8004d18 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004d14:	2302      	movs	r3, #2
 8004d16:	e00e      	b.n	8004d36 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fd84 	bl	8005834 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e040      	b.n	8004dd2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d106      	bne.n	8004d66 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f873 	bl	8004e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2224      	movs	r2, #36	; 0x24
 8004d6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0201 	bic.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f879 	bl	8004e74 <UART_SetConfig>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e022      	b.n	8004dd2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 facf 	bl	8005338 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004da8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004db8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fb56 	bl	800547c <UART_CheckIdleState>
 8004dd0:	4603      	mov	r3, r0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e02b      	b.n	8004e44 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2224      	movs	r2, #36	; 0x24
 8004df0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0201 	bic.w	r2, r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2200      	movs	r2, #0
 8004e18:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f820 	bl	8004e60 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4ba7      	ldr	r3, [pc, #668]	; (800513c <UART_SetConfig+0x2c8>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	6979      	ldr	r1, [r7, #20]
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a95      	ldr	r2, [pc, #596]	; (8005140 <UART_SetConfig+0x2cc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d120      	bne.n	8004f32 <UART_SetConfig+0xbe>
 8004ef0:	4b94      	ldr	r3, [pc, #592]	; (8005144 <UART_SetConfig+0x2d0>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d816      	bhi.n	8004f2c <UART_SetConfig+0xb8>
 8004efe:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <UART_SetConfig+0x90>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f15 	.word	0x08004f15
 8004f08:	08004f21 	.word	0x08004f21
 8004f0c:	08004f1b 	.word	0x08004f1b
 8004f10:	08004f27 	.word	0x08004f27
 8004f14:	2301      	movs	r3, #1
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e14f      	b.n	80051ba <UART_SetConfig+0x346>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	77fb      	strb	r3, [r7, #31]
 8004f1e:	e14c      	b.n	80051ba <UART_SetConfig+0x346>
 8004f20:	2304      	movs	r3, #4
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e149      	b.n	80051ba <UART_SetConfig+0x346>
 8004f26:	2308      	movs	r3, #8
 8004f28:	77fb      	strb	r3, [r7, #31]
 8004f2a:	e146      	b.n	80051ba <UART_SetConfig+0x346>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e143      	b.n	80051ba <UART_SetConfig+0x346>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a84      	ldr	r2, [pc, #528]	; (8005148 <UART_SetConfig+0x2d4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d132      	bne.n	8004fa2 <UART_SetConfig+0x12e>
 8004f3c:	4b81      	ldr	r3, [pc, #516]	; (8005144 <UART_SetConfig+0x2d0>)
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b0c      	cmp	r3, #12
 8004f48:	d828      	bhi.n	8004f9c <UART_SetConfig+0x128>
 8004f4a:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <UART_SetConfig+0xdc>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004f85 	.word	0x08004f85
 8004f54:	08004f9d 	.word	0x08004f9d
 8004f58:	08004f9d 	.word	0x08004f9d
 8004f5c:	08004f9d 	.word	0x08004f9d
 8004f60:	08004f91 	.word	0x08004f91
 8004f64:	08004f9d 	.word	0x08004f9d
 8004f68:	08004f9d 	.word	0x08004f9d
 8004f6c:	08004f9d 	.word	0x08004f9d
 8004f70:	08004f8b 	.word	0x08004f8b
 8004f74:	08004f9d 	.word	0x08004f9d
 8004f78:	08004f9d 	.word	0x08004f9d
 8004f7c:	08004f9d 	.word	0x08004f9d
 8004f80:	08004f97 	.word	0x08004f97
 8004f84:	2300      	movs	r3, #0
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e117      	b.n	80051ba <UART_SetConfig+0x346>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e114      	b.n	80051ba <UART_SetConfig+0x346>
 8004f90:	2304      	movs	r3, #4
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e111      	b.n	80051ba <UART_SetConfig+0x346>
 8004f96:	2308      	movs	r3, #8
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	e10e      	b.n	80051ba <UART_SetConfig+0x346>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e10b      	b.n	80051ba <UART_SetConfig+0x346>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a69      	ldr	r2, [pc, #420]	; (800514c <UART_SetConfig+0x2d8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d120      	bne.n	8004fee <UART_SetConfig+0x17a>
 8004fac:	4b65      	ldr	r3, [pc, #404]	; (8005144 <UART_SetConfig+0x2d0>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fb6:	2b30      	cmp	r3, #48	; 0x30
 8004fb8:	d013      	beq.n	8004fe2 <UART_SetConfig+0x16e>
 8004fba:	2b30      	cmp	r3, #48	; 0x30
 8004fbc:	d814      	bhi.n	8004fe8 <UART_SetConfig+0x174>
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d009      	beq.n	8004fd6 <UART_SetConfig+0x162>
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d810      	bhi.n	8004fe8 <UART_SetConfig+0x174>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <UART_SetConfig+0x15c>
 8004fca:	2b10      	cmp	r3, #16
 8004fcc:	d006      	beq.n	8004fdc <UART_SetConfig+0x168>
 8004fce:	e00b      	b.n	8004fe8 <UART_SetConfig+0x174>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	77fb      	strb	r3, [r7, #31]
 8004fd4:	e0f1      	b.n	80051ba <UART_SetConfig+0x346>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	77fb      	strb	r3, [r7, #31]
 8004fda:	e0ee      	b.n	80051ba <UART_SetConfig+0x346>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e0eb      	b.n	80051ba <UART_SetConfig+0x346>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e0e8      	b.n	80051ba <UART_SetConfig+0x346>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e0e5      	b.n	80051ba <UART_SetConfig+0x346>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a57      	ldr	r2, [pc, #348]	; (8005150 <UART_SetConfig+0x2dc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d120      	bne.n	800503a <UART_SetConfig+0x1c6>
 8004ff8:	4b52      	ldr	r3, [pc, #328]	; (8005144 <UART_SetConfig+0x2d0>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005002:	2bc0      	cmp	r3, #192	; 0xc0
 8005004:	d013      	beq.n	800502e <UART_SetConfig+0x1ba>
 8005006:	2bc0      	cmp	r3, #192	; 0xc0
 8005008:	d814      	bhi.n	8005034 <UART_SetConfig+0x1c0>
 800500a:	2b80      	cmp	r3, #128	; 0x80
 800500c:	d009      	beq.n	8005022 <UART_SetConfig+0x1ae>
 800500e:	2b80      	cmp	r3, #128	; 0x80
 8005010:	d810      	bhi.n	8005034 <UART_SetConfig+0x1c0>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <UART_SetConfig+0x1a8>
 8005016:	2b40      	cmp	r3, #64	; 0x40
 8005018:	d006      	beq.n	8005028 <UART_SetConfig+0x1b4>
 800501a:	e00b      	b.n	8005034 <UART_SetConfig+0x1c0>
 800501c:	2300      	movs	r3, #0
 800501e:	77fb      	strb	r3, [r7, #31]
 8005020:	e0cb      	b.n	80051ba <UART_SetConfig+0x346>
 8005022:	2302      	movs	r3, #2
 8005024:	77fb      	strb	r3, [r7, #31]
 8005026:	e0c8      	b.n	80051ba <UART_SetConfig+0x346>
 8005028:	2304      	movs	r3, #4
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e0c5      	b.n	80051ba <UART_SetConfig+0x346>
 800502e:	2308      	movs	r3, #8
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e0c2      	b.n	80051ba <UART_SetConfig+0x346>
 8005034:	2310      	movs	r3, #16
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e0bf      	b.n	80051ba <UART_SetConfig+0x346>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a45      	ldr	r2, [pc, #276]	; (8005154 <UART_SetConfig+0x2e0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d125      	bne.n	8005090 <UART_SetConfig+0x21c>
 8005044:	4b3f      	ldr	r3, [pc, #252]	; (8005144 <UART_SetConfig+0x2d0>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005052:	d017      	beq.n	8005084 <UART_SetConfig+0x210>
 8005054:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005058:	d817      	bhi.n	800508a <UART_SetConfig+0x216>
 800505a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505e:	d00b      	beq.n	8005078 <UART_SetConfig+0x204>
 8005060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005064:	d811      	bhi.n	800508a <UART_SetConfig+0x216>
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <UART_SetConfig+0x1fe>
 800506a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800506e:	d006      	beq.n	800507e <UART_SetConfig+0x20a>
 8005070:	e00b      	b.n	800508a <UART_SetConfig+0x216>
 8005072:	2300      	movs	r3, #0
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e0a0      	b.n	80051ba <UART_SetConfig+0x346>
 8005078:	2302      	movs	r3, #2
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e09d      	b.n	80051ba <UART_SetConfig+0x346>
 800507e:	2304      	movs	r3, #4
 8005080:	77fb      	strb	r3, [r7, #31]
 8005082:	e09a      	b.n	80051ba <UART_SetConfig+0x346>
 8005084:	2308      	movs	r3, #8
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e097      	b.n	80051ba <UART_SetConfig+0x346>
 800508a:	2310      	movs	r3, #16
 800508c:	77fb      	strb	r3, [r7, #31]
 800508e:	e094      	b.n	80051ba <UART_SetConfig+0x346>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a30      	ldr	r2, [pc, #192]	; (8005158 <UART_SetConfig+0x2e4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d125      	bne.n	80050e6 <UART_SetConfig+0x272>
 800509a:	4b2a      	ldr	r3, [pc, #168]	; (8005144 <UART_SetConfig+0x2d0>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050a8:	d017      	beq.n	80050da <UART_SetConfig+0x266>
 80050aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050ae:	d817      	bhi.n	80050e0 <UART_SetConfig+0x26c>
 80050b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b4:	d00b      	beq.n	80050ce <UART_SetConfig+0x25a>
 80050b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ba:	d811      	bhi.n	80050e0 <UART_SetConfig+0x26c>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <UART_SetConfig+0x254>
 80050c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c4:	d006      	beq.n	80050d4 <UART_SetConfig+0x260>
 80050c6:	e00b      	b.n	80050e0 <UART_SetConfig+0x26c>
 80050c8:	2301      	movs	r3, #1
 80050ca:	77fb      	strb	r3, [r7, #31]
 80050cc:	e075      	b.n	80051ba <UART_SetConfig+0x346>
 80050ce:	2302      	movs	r3, #2
 80050d0:	77fb      	strb	r3, [r7, #31]
 80050d2:	e072      	b.n	80051ba <UART_SetConfig+0x346>
 80050d4:	2304      	movs	r3, #4
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e06f      	b.n	80051ba <UART_SetConfig+0x346>
 80050da:	2308      	movs	r3, #8
 80050dc:	77fb      	strb	r3, [r7, #31]
 80050de:	e06c      	b.n	80051ba <UART_SetConfig+0x346>
 80050e0:	2310      	movs	r3, #16
 80050e2:	77fb      	strb	r3, [r7, #31]
 80050e4:	e069      	b.n	80051ba <UART_SetConfig+0x346>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1c      	ldr	r2, [pc, #112]	; (800515c <UART_SetConfig+0x2e8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d137      	bne.n	8005160 <UART_SetConfig+0x2ec>
 80050f0:	4b14      	ldr	r3, [pc, #80]	; (8005144 <UART_SetConfig+0x2d0>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050fe:	d017      	beq.n	8005130 <UART_SetConfig+0x2bc>
 8005100:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005104:	d817      	bhi.n	8005136 <UART_SetConfig+0x2c2>
 8005106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800510a:	d00b      	beq.n	8005124 <UART_SetConfig+0x2b0>
 800510c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005110:	d811      	bhi.n	8005136 <UART_SetConfig+0x2c2>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <UART_SetConfig+0x2aa>
 8005116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511a:	d006      	beq.n	800512a <UART_SetConfig+0x2b6>
 800511c:	e00b      	b.n	8005136 <UART_SetConfig+0x2c2>
 800511e:	2300      	movs	r3, #0
 8005120:	77fb      	strb	r3, [r7, #31]
 8005122:	e04a      	b.n	80051ba <UART_SetConfig+0x346>
 8005124:	2302      	movs	r3, #2
 8005126:	77fb      	strb	r3, [r7, #31]
 8005128:	e047      	b.n	80051ba <UART_SetConfig+0x346>
 800512a:	2304      	movs	r3, #4
 800512c:	77fb      	strb	r3, [r7, #31]
 800512e:	e044      	b.n	80051ba <UART_SetConfig+0x346>
 8005130:	2308      	movs	r3, #8
 8005132:	77fb      	strb	r3, [r7, #31]
 8005134:	e041      	b.n	80051ba <UART_SetConfig+0x346>
 8005136:	2310      	movs	r3, #16
 8005138:	77fb      	strb	r3, [r7, #31]
 800513a:	e03e      	b.n	80051ba <UART_SetConfig+0x346>
 800513c:	efff69f3 	.word	0xefff69f3
 8005140:	40011000 	.word	0x40011000
 8005144:	40023800 	.word	0x40023800
 8005148:	40004400 	.word	0x40004400
 800514c:	40004800 	.word	0x40004800
 8005150:	40004c00 	.word	0x40004c00
 8005154:	40005000 	.word	0x40005000
 8005158:	40011400 	.word	0x40011400
 800515c:	40007800 	.word	0x40007800
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a71      	ldr	r2, [pc, #452]	; (800532c <UART_SetConfig+0x4b8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d125      	bne.n	80051b6 <UART_SetConfig+0x342>
 800516a:	4b71      	ldr	r3, [pc, #452]	; (8005330 <UART_SetConfig+0x4bc>)
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005174:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005178:	d017      	beq.n	80051aa <UART_SetConfig+0x336>
 800517a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800517e:	d817      	bhi.n	80051b0 <UART_SetConfig+0x33c>
 8005180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005184:	d00b      	beq.n	800519e <UART_SetConfig+0x32a>
 8005186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518a:	d811      	bhi.n	80051b0 <UART_SetConfig+0x33c>
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <UART_SetConfig+0x324>
 8005190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005194:	d006      	beq.n	80051a4 <UART_SetConfig+0x330>
 8005196:	e00b      	b.n	80051b0 <UART_SetConfig+0x33c>
 8005198:	2300      	movs	r3, #0
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e00d      	b.n	80051ba <UART_SetConfig+0x346>
 800519e:	2302      	movs	r3, #2
 80051a0:	77fb      	strb	r3, [r7, #31]
 80051a2:	e00a      	b.n	80051ba <UART_SetConfig+0x346>
 80051a4:	2304      	movs	r3, #4
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	e007      	b.n	80051ba <UART_SetConfig+0x346>
 80051aa:	2308      	movs	r3, #8
 80051ac:	77fb      	strb	r3, [r7, #31]
 80051ae:	e004      	b.n	80051ba <UART_SetConfig+0x346>
 80051b0:	2310      	movs	r3, #16
 80051b2:	77fb      	strb	r3, [r7, #31]
 80051b4:	e001      	b.n	80051ba <UART_SetConfig+0x346>
 80051b6:	2310      	movs	r3, #16
 80051b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c2:	d15b      	bne.n	800527c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80051c4:	7ffb      	ldrb	r3, [r7, #31]
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d827      	bhi.n	800521a <UART_SetConfig+0x3a6>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x35c>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	080051fd 	.word	0x080051fd
 80051d8:	08005205 	.word	0x08005205
 80051dc:	0800521b 	.word	0x0800521b
 80051e0:	0800520b 	.word	0x0800520b
 80051e4:	0800521b 	.word	0x0800521b
 80051e8:	0800521b 	.word	0x0800521b
 80051ec:	0800521b 	.word	0x0800521b
 80051f0:	08005213 	.word	0x08005213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f4:	f7ff f8ca 	bl	800438c <HAL_RCC_GetPCLK1Freq>
 80051f8:	61b8      	str	r0, [r7, #24]
        break;
 80051fa:	e013      	b.n	8005224 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051fc:	f7ff f8da 	bl	80043b4 <HAL_RCC_GetPCLK2Freq>
 8005200:	61b8      	str	r0, [r7, #24]
        break;
 8005202:	e00f      	b.n	8005224 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005204:	4b4b      	ldr	r3, [pc, #300]	; (8005334 <UART_SetConfig+0x4c0>)
 8005206:	61bb      	str	r3, [r7, #24]
        break;
 8005208:	e00c      	b.n	8005224 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800520a:	f7fe fffd 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 800520e:	61b8      	str	r0, [r7, #24]
        break;
 8005210:	e008      	b.n	8005224 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005216:	61bb      	str	r3, [r7, #24]
        break;
 8005218:	e004      	b.n	8005224 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	77bb      	strb	r3, [r7, #30]
        break;
 8005222:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d074      	beq.n	8005314 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	005a      	lsls	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	441a      	add	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	fbb2 f3f3 	udiv	r3, r2, r3
 800523e:	b29b      	uxth	r3, r3
 8005240:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b0f      	cmp	r3, #15
 8005246:	d916      	bls.n	8005276 <UART_SetConfig+0x402>
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524e:	d212      	bcs.n	8005276 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f023 030f 	bic.w	r3, r3, #15
 8005258:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	b29b      	uxth	r3, r3
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	b29a      	uxth	r2, r3
 8005266:	89fb      	ldrh	r3, [r7, #14]
 8005268:	4313      	orrs	r3, r2
 800526a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	89fa      	ldrh	r2, [r7, #14]
 8005272:	60da      	str	r2, [r3, #12]
 8005274:	e04e      	b.n	8005314 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	77bb      	strb	r3, [r7, #30]
 800527a:	e04b      	b.n	8005314 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800527c:	7ffb      	ldrb	r3, [r7, #31]
 800527e:	2b08      	cmp	r3, #8
 8005280:	d827      	bhi.n	80052d2 <UART_SetConfig+0x45e>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <UART_SetConfig+0x414>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	080052d3 	.word	0x080052d3
 8005298:	080052c3 	.word	0x080052c3
 800529c:	080052d3 	.word	0x080052d3
 80052a0:	080052d3 	.word	0x080052d3
 80052a4:	080052d3 	.word	0x080052d3
 80052a8:	080052cb 	.word	0x080052cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ac:	f7ff f86e 	bl	800438c <HAL_RCC_GetPCLK1Freq>
 80052b0:	61b8      	str	r0, [r7, #24]
        break;
 80052b2:	e013      	b.n	80052dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b4:	f7ff f87e 	bl	80043b4 <HAL_RCC_GetPCLK2Freq>
 80052b8:	61b8      	str	r0, [r7, #24]
        break;
 80052ba:	e00f      	b.n	80052dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052bc:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <UART_SetConfig+0x4c0>)
 80052be:	61bb      	str	r3, [r7, #24]
        break;
 80052c0:	e00c      	b.n	80052dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c2:	f7fe ffa1 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 80052c6:	61b8      	str	r0, [r7, #24]
        break;
 80052c8:	e008      	b.n	80052dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ce:	61bb      	str	r3, [r7, #24]
        break;
 80052d0:	e004      	b.n	80052dc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	77bb      	strb	r3, [r7, #30]
        break;
 80052da:	bf00      	nop
    }

    if (pclk != 0U)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d018      	beq.n	8005314 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	085a      	lsrs	r2, r3, #1
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	441a      	add	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	d908      	bls.n	8005310 <UART_SetConfig+0x49c>
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005304:	d204      	bcs.n	8005310 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	e001      	b.n	8005314 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005320:	7fbb      	ldrb	r3, [r7, #30]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40007c00 	.word	0x40007c00
 8005330:	40023800 	.word	0x40023800
 8005334:	00f42400 	.word	0x00f42400

08005338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01a      	beq.n	800544e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005436:	d10a      	bne.n	800544e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	605a      	str	r2, [r3, #4]
  }
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af02      	add	r7, sp, #8
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800548c:	f7fc fe64 	bl	8002158 <HAL_GetTick>
 8005490:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b08      	cmp	r3, #8
 800549e:	d10e      	bne.n	80054be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f82d 	bl	800550e <UART_WaitOnFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e023      	b.n	8005506 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d10e      	bne.n	80054ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f817 	bl	800550e <UART_WaitOnFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e00d      	b.n	8005506 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	603b      	str	r3, [r7, #0]
 800551a:	4613      	mov	r3, r2
 800551c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800551e:	e05e      	b.n	80055de <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005526:	d05a      	beq.n	80055de <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005528:	f7fc fe16 	bl	8002158 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	429a      	cmp	r2, r3
 8005536:	d302      	bcc.n	800553e <UART_WaitOnFlagUntilTimeout+0x30>
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d11b      	bne.n	8005576 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800554c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e043      	b.n	80055fe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d02c      	beq.n	80055de <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005592:	d124      	bne.n	80055de <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800559c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0201 	bic.w	r2, r2, #1
 80055bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2220      	movs	r2, #32
 80055c2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e00f      	b.n	80055fe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4013      	ands	r3, r2
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	bf0c      	ite	eq
 80055ee:	2301      	moveq	r3, #1
 80055f0:	2300      	movne	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d091      	beq.n	8005520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d027      	beq.n	8005672 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4b2f      	ldr	r3, [pc, #188]	; (80056e8 <FMC_SDRAM_Init+0xe0>)
 800562c:	4013      	ands	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005638:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800563e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005644:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800564a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005650:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005656:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800565c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005662:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e032      	b.n	80056d8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800567e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005688:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800568e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <FMC_SDRAM_Init+0xe0>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80056ac:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80056b2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80056b8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80056be:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80056c4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	ffff8000 	.word	0xffff8000

080056ec <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d02e      	beq.n	8005764 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005712:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	3b01      	subs	r3, #1
 8005720:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005722:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	3b01      	subs	r3, #1
 800572a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800572c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	3b01      	subs	r3, #1
 8005734:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005736:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	3b01      	subs	r3, #1
 800573e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005740:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	3b01      	subs	r3, #1
 8005748:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800574a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	3b01      	subs	r3, #1
 8005752:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005754:	4313      	orrs	r3, r2
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	609a      	str	r2, [r3, #8]
 8005762:	e039      	b.n	80057d8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <FMC_SDRAM_Timing_Init+0xfc>)
 800576e:	4013      	ands	r3, r2
 8005770:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	3b01      	subs	r3, #1
 8005778:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	3b01      	subs	r3, #1
 8005780:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005782:	4313      	orrs	r3, r2
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005796:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80057a6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80057b0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80057ba:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80057c4:	4313      	orrs	r3, r2
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	ff0f0fff 	.word	0xff0f0fff

080057ec <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <FMC_SDRAM_SendCommand+0x44>)
 80057fe:	4013      	ands	r3, r2
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	6811      	ldr	r1, [r2, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	6852      	ldr	r2, [r2, #4]
 8005808:	4311      	orrs	r1, r2
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	6892      	ldr	r2, [r2, #8]
 800580e:	3a01      	subs	r2, #1
 8005810:	0152      	lsls	r2, r2, #5
 8005812:	4311      	orrs	r1, r2
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	68d2      	ldr	r2, [r2, #12]
 8005818:	0252      	lsls	r2, r2, #9
 800581a:	430a      	orrs	r2, r1
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	ffc00000 	.word	0xffc00000

08005834 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
	...

0800585c <_ZN7QAD_FMC8imp_initEv>:
  //------------------------------
  //QAD_FMC Initialization Methods

//QAD_FMC::imp_init
//QAD_FMC Initialization Method
QA_Result QAD_FMC::imp_init() {
 800585c:	b580      	push	{r7, lr}
 800585e:	b094      	sub	sp, #80	; 0x50
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	if (m_eState)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <_ZN7QAD_FMC8imp_initEv+0x16>
		return QA_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	e0fc      	b.n	8005a6c <_ZN7QAD_FMC8imp_initEv+0x210>

	GPIO_InitTypeDef GPIO_Init = {0};
 8005872:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	605a      	str	r2, [r3, #4]
 800587c:	609a      	str	r2, [r3, #8]
 800587e:	60da      	str	r2, [r3, #12]
 8005880:	611a      	str	r2, [r3, #16]

	FMC_SDRAM_TimingTypeDef   SDRAM_Timing = {0};
 8005882:	f107 0320 	add.w	r3, r7, #32
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	605a      	str	r2, [r3, #4]
 800588c:	609a      	str	r2, [r3, #8]
 800588e:	60da      	str	r2, [r3, #12]
 8005890:	611a      	str	r2, [r3, #16]
 8005892:	615a      	str	r2, [r3, #20]
 8005894:	619a      	str	r2, [r3, #24]
	FMC_SDRAM_CommandTypeDef  SDRAM_Cmd = {0};
 8005896:	f107 0310 	add.w	r3, r7, #16
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	609a      	str	r2, [r3, #8]
 80058a2:	60da      	str	r2, [r3, #12]

	//Initialize GPIOs
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80058a4:	2302      	movs	r3, #2
 80058a6:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_Init.Pull      = GPIO_PULLUP;
 80058a8:	2301      	movs	r3, #1
 80058aa:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80058ac:	2303      	movs	r3, #3
 80058ae:	64bb      	str	r3, [r7, #72]	; 0x48
	GPIO_Init.Alternate = GPIO_AF12_FMC;
 80058b0:	230c      	movs	r3, #12
 80058b2:	64fb      	str	r3, [r7, #76]	; 0x4c

	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 80058b4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_Init);
 80058ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058be:	4619      	mov	r1, r3
 80058c0:	486c      	ldr	r0, [pc, #432]	; (8005a74 <_ZN7QAD_FMC8imp_initEv+0x218>)
 80058c2:	f7fd fa9d 	bl	8002e00 <HAL_GPIO_Init>

		//GPIO E
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80058c6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80058ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_Init);
 80058cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058d0:	4619      	mov	r1, r3
 80058d2:	4869      	ldr	r0, [pc, #420]	; (8005a78 <_ZN7QAD_FMC8imp_initEv+0x21c>)
 80058d4:	f7fd fa94 	bl	8002e00 <HAL_GPIO_Init>

		//GPIO F
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80058d8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_Init);
 80058de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058e2:	4619      	mov	r1, r3
 80058e4:	4865      	ldr	r0, [pc, #404]	; (8005a7c <_ZN7QAD_FMC8imp_initEv+0x220>)
 80058e6:	f7fd fa8b 	bl	8002e00 <HAL_GPIO_Init>

		//GPIO G
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 80058ea:	f248 1337 	movw	r3, #33079	; 0x8137
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_Init);
 80058f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058f4:	4619      	mov	r1, r3
 80058f6:	4862      	ldr	r0, [pc, #392]	; (8005a80 <_ZN7QAD_FMC8imp_initEv+0x224>)
 80058f8:	f7fd fa82 	bl	8002e00 <HAL_GPIO_Init>

		//GPIO H
	GPIO_Init.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80058fc:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_Init);
 8005902:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005906:	4619      	mov	r1, r3
 8005908:	485e      	ldr	r0, [pc, #376]	; (8005a84 <_ZN7QAD_FMC8imp_initEv+0x228>)
 800590a:	f7fd fa79 	bl	8002e00 <HAL_GPIO_Init>

		//GPIO I
	GPIO_Init.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
 800590e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8005914:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005918:	4619      	mov	r1, r3
 800591a:	485b      	ldr	r0, [pc, #364]	; (8005a88 <_ZN7QAD_FMC8imp_initEv+0x22c>)
 800591c:	f7fd fa70 	bl	8002e00 <HAL_GPIO_Init>


		//Initialize FMC Clock
	__HAL_RCC_FMC_CLK_ENABLE();
 8005920:	4b5a      	ldr	r3, [pc, #360]	; (8005a8c <_ZN7QAD_FMC8imp_initEv+0x230>)
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	4a59      	ldr	r2, [pc, #356]	; (8005a8c <_ZN7QAD_FMC8imp_initEv+0x230>)
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	6393      	str	r3, [r2, #56]	; 0x38
 800592c:	4b57      	ldr	r3, [pc, #348]	; (8005a8c <_ZN7QAD_FMC8imp_initEv+0x230>)
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	68fb      	ldr	r3, [r7, #12]

		//Initialize Peripheral
	m_sHandle.Instance                = FMC_SDRAM_DEVICE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a55      	ldr	r2, [pc, #340]	; (8005a90 <_ZN7QAD_FMC8imp_initEv+0x234>)
 800593c:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	639a      	str	r2, [r3, #56]	; 0x38
	m_sHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	63da      	str	r2, [r3, #60]	; 0x3c
	m_sHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2204      	movs	r2, #4
 800594e:	641a      	str	r2, [r3, #64]	; 0x40
	m_sHandle.Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	645a      	str	r2, [r3, #68]	; 0x44
	m_sHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2240      	movs	r2, #64	; 0x40
 800595a:	649a      	str	r2, [r3, #72]	; 0x48
	m_sHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005962:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	651a      	str	r2, [r3, #80]	; 0x50
	m_sHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005970:	655a      	str	r2, [r3, #84]	; 0x54
	m_sHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005978:	659a      	str	r2, [r3, #88]	; 0x58
	m_sHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	65da      	str	r2, [r3, #92]	; 0x5c

	SDRAM_Timing.LoadToActiveDelay    = 2;
 8005980:	2302      	movs	r3, #2
 8005982:	623b      	str	r3, [r7, #32]
	SDRAM_Timing.ExitSelfRefreshDelay = 7;
 8005984:	2307      	movs	r3, #7
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
	SDRAM_Timing.SelfRefreshTime      = 4;
 8005988:	2304      	movs	r3, #4
 800598a:	62bb      	str	r3, [r7, #40]	; 0x28
	SDRAM_Timing.RowCycleDelay        = 7;
 800598c:	2307      	movs	r3, #7
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
	SDRAM_Timing.WriteRecoveryTime    = 2;
 8005990:	2302      	movs	r3, #2
 8005992:	633b      	str	r3, [r7, #48]	; 0x30
	SDRAM_Timing.RPDelay              = 2;
 8005994:	2302      	movs	r3, #2
 8005996:	637b      	str	r3, [r7, #52]	; 0x34
	SDRAM_Timing.RCDDelay             = 2;
 8005998:	2302      	movs	r3, #2
 800599a:	63bb      	str	r3, [r7, #56]	; 0x38

	if (HAL_SDRAM_Init(&m_sHandle, &SDRAM_Timing) != HAL_OK) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3334      	adds	r3, #52	; 0x34
 80059a0:	f107 0220 	add.w	r2, r7, #32
 80059a4:	4611      	mov	r1, r2
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff f940 	bl	8004c2c <HAL_SDRAM_Init>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bf14      	ite	ne
 80059b2:	2301      	movne	r3, #1
 80059b4:	2300      	moveq	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <_ZN7QAD_FMC8imp_initEv+0x164>
		return QA_Fail;
 80059bc:	2301      	movs	r3, #1
 80059be:	e055      	b.n	8005a6c <_ZN7QAD_FMC8imp_initEv+0x210>


	//Initialize SDRAM IC

		//Enable Clock
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80059c0:	2301      	movs	r3, #1
 80059c2:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80059c4:	2310      	movs	r3, #16
 80059c6:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 80059c8:	2301      	movs	r3, #1
 80059ca:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 80059d0:	f107 0310 	add.w	r3, r7, #16
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f85c 	bl	8005a94 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Delay 1ms
	HAL_Delay(1);
 80059dc:	2001      	movs	r0, #1
 80059de:	f7fc fbc7 	bl	8002170 <HAL_Delay>

		//Precharge All Banks
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_PALL;
 80059e2:	2302      	movs	r3, #2
 80059e4:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80059e6:	2310      	movs	r3, #16
 80059e8:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 80059ea:	2301      	movs	r3, #1
 80059ec:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 80059f2:	f107 0310 	add.w	r3, r7, #16
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f84b 	bl	8005a94 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Configure Auto Refresh
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80059fe:	2303      	movs	r3, #3
 8005a00:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005a02:	2310      	movs	r3, #16
 8005a04:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 8;
 8005a06:	2308      	movs	r3, #8
 8005a08:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8005a0e:	f107 0310 	add.w	r3, r7, #16
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f83d 	bl	8005a94 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>

		//Program Mode Register
	SDRAM_Cmd.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005a1a:	2304      	movs	r3, #4
 8005a1c:	613b      	str	r3, [r7, #16]
	SDRAM_Cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005a1e:	2310      	movs	r3, #16
 8005a20:	617b      	str	r3, [r7, #20]
	SDRAM_Cmd.AutoRefreshNumber      = 1;
 8005a22:	2301      	movs	r3, #1
 8005a24:	61bb      	str	r3, [r7, #24]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 | m_uModeReg_BurstType_Seq | m_uModeReg_CASLatency_3 |
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	431a      	orrs	r2, r3
																		 m_uModeReg_OpMode_Std | m_uModeReg_WriteBurst_Single;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 | m_uModeReg_BurstType_Seq | m_uModeReg_CASLatency_3 |
 8005a3a:	431a      	orrs	r2, r3
																		 m_uModeReg_OpMode_Std | m_uModeReg_WriteBurst_Single;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	4313      	orrs	r3, r2
	SDRAM_Cmd.ModeRegisterDefinition = m_uModeReg_BurstLength_1 | m_uModeReg_BurstType_Seq | m_uModeReg_CASLatency_3 |
 8005a42:	61fb      	str	r3, [r7, #28]
	cmd(SDRAM_Cmd);
 8005a44:	f107 0310 	add.w	r3, r7, #16
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f822 	bl	8005a94 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>


	//Program Refresh Rate
	HAL_SDRAM_ProgramRefreshRate(&m_sHandle, m_uRefresh);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	f7ff f94e 	bl	8004cfe <HAL_SDRAM_ProgramRefreshRate>

	//
	m_eState = QA_Initialized;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	return QA_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3750      	adds	r7, #80	; 0x50
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40020c00 	.word	0x40020c00
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	40021400 	.word	0x40021400
 8005a80:	40021800 	.word	0x40021800
 8005a84:	40021c00 	.word	0x40021c00
 8005a88:	40022000 	.word	0x40022000
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	a0000140 	.word	0xa0000140

08005a94 <_ZN7QAD_FMC3cmdER24FMC_SDRAM_CommandTypeDef>:


//QAD_FMC::cmd
//QAD_FMC Initialization Method
void QAD_FMC::cmd(FMC_SDRAM_CommandTypeDef& pCmd) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
	HAL_SDRAM_SendCommand(&m_sHandle, &pCmd, 0);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3334      	adds	r3, #52	; 0x34
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7ff f8fe 	bl	8004ca8 <HAL_SDRAM_SendCommand>
}
 8005aac:	bf00      	nop
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <_ZN7QAD_FMC8imp_testEv>:
  //--------------------
  //QAD_FMC Test Methods

//QAD_FMC::imp_test
//QAD_FMC Test Method
QA_Result QAD_FMC::imp_test(void) {
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]

	//Write to SDRAM
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ac6:	d209      	bcs.n	8005adc <_ZN7QAD_FMC8imp_testEv+0x28>
		QAD_FMC_PTR->data[i] = i;
 8005ac8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	e7f1      	b.n	8005ac0 <_ZN7QAD_FMC8imp_testEv+0xc>
	}

	//Read from SDRAM
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005adc:	2300      	movs	r3, #0
 8005ade:	60bb      	str	r3, [r7, #8]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae6:	d212      	bcs.n	8005b0e <_ZN7QAD_FMC8imp_testEv+0x5a>
		if (QAD_FMC_PTR->data[i] != i)
 8005ae8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	bf14      	ite	ne
 8005af8:	2301      	movne	r3, #1
 8005afa:	2300      	moveq	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <_ZN7QAD_FMC8imp_testEv+0x52>
			return QA_Fail;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e004      	b.n	8005b10 <_ZN7QAD_FMC8imp_testEv+0x5c>
	for (uint32_t i=0; i < QAD_FMC_32BITWORD_COUNT; i++) {
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	60bb      	str	r3, [r7, #8]
 8005b0c:	e7e8      	b.n	8005ae0 <_ZN7QAD_FMC8imp_testEv+0x2c>
	}

	return QA_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	809a      	strh	r2, [r3, #4]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	719a      	strb	r2, [r3, #6]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	609a      	str	r2, [r3, #8]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	60da      	str	r2, [r3, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f841 	bl	8005bd6 <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	889b      	ldrh	r3, [r3, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	4619      	mov	r1, r3
 8005b72:	f7fd fbfd 	bl	8003370 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	741a      	strb	r2, [r3, #16]
}
 8005b7c:	bf00      	nop
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	889b      	ldrh	r3, [r3, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	4619      	mov	r1, r3
 8005b98:	f7fd fbea 	bl	8003370 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	741a      	strb	r2, [r3, #16]
}
 8005ba2:	bf00      	nop
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	7c1b      	ldrb	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d107      	bne.n	8005bce <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7ff ffe0 	bl	8005b84 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8005bc4:	e003      	b.n	8005bce <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff ffc9 	bl	8005b5e <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8005bcc:	bf00      	nop
	}
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b088      	sub	sp, #32
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8005bde:	f107 030c 	add.w	r3, r7, #12
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	605a      	str	r2, [r3, #4]
 8005be8:	609a      	str	r2, [r3, #8]
 8005bea:	60da      	str	r2, [r3, #12]
 8005bec:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	889b      	ldrh	r3, [r3, #4]
 8005bf2:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	799b      	ldrb	r3, [r3, #6]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8005bfc:	2311      	movs	r3, #17
 8005bfe:	e000      	b.n	8005c02 <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8005c00:	2301      	movs	r3, #1
 8005c02:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f107 020c 	add.w	r2, r7, #12
 8005c18:	4611      	mov	r1, r2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fd f8f0 	bl	8002e00 <HAL_GPIO_Init>
}
 8005c20:	bf00      	nop
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Input Constructor
//
//This method will initialize the required GPIO pin with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f769xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Input::QAD_GPIO_Input(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	4613      	mov	r3, r2
 8005c34:	80fb      	strh	r3, [r7, #6]
		m_pGPIO(pGPIO),
		m_uPin(uPin),
		m_ePullMode(QAD_GPIO_PullMode_NoPull) {
 8005c36:	4a0a      	ldr	r2, [pc, #40]	; (8005c60 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft+0x38>)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	88fa      	ldrh	r2, [r7, #6]
 8005c46:	811a      	strh	r2, [r3, #8]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	60da      	str	r2, [r3, #12]

	//Initialize the GPIO pin
	periphInit();
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f817 	bl	8005c82 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	08008d74 	.word	0x08008d74

08005c64 <_ZN14QAD_GPIO_Input11setPullModeE17QAD_GPIO_PullMode>:
//QAD_GPIO_Input::setPullMode
//QAD_GPIO_Input Control Method
//
//Sets new pull mode (Pull-up, Pull-down or No-pull)
//ePull - New pull mode. Member of QAD_GPIO_PullMode as defined in QAD_GPIO.hpp
void QAD_GPIO_Input::setPullMode(QAD_GPIO_PullMode ePull) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]

	//Store new Pull mode setting
	m_ePullMode = ePull;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	60da      	str	r2, [r3, #12]

	//Reinitialize peripheral with new Pull mode
	periphInit();
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f804 	bl	8005c82 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 8005c7a:	bf00      	nop
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <_ZN14QAD_GPIO_Input10periphInitEv>:
//QAD_GPIO_Input::periphInit
//QAD_GPIO_Input Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Input::periphInit(void) {
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b088      	sub	sp, #32
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_Init = {0};
 8005c8a:	f107 030c 	add.w	r3, r7, #12
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	605a      	str	r2, [r3, #4]
 8005c94:	609a      	str	r2, [r3, #8]
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	891b      	ldrh	r3, [r3, #8]
 8005c9e:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = GPIO_MODE_INPUT;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f107 020c 	add.w	r2, r7, #12
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fd f8a1 	bl	8002e00 <HAL_GPIO_Init>
}
 8005cbe:	bf00      	nop
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <_ZN8QAD_LTDCC1Ev>:
  QAD_LTDC_BufferIdx m_eLayer0Back;
  QAD_LTDC_BufferIdx m_eLayer0Front;
  QAD_LTDC_BufferIdx m_eLayer1Back;
  QAD_LTDC_BufferIdx m_eLayer1Front;

	QAD_LTDC() :
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
	  m_eInitState(QA_NotInitialized) {}
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f646 3225 	movw	r2, #27429	; 0x6b25
 8005cda:	605a      	str	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f24f 4224 	movw	r2, #62500	; 0xf424
 8005ce2:	609a      	str	r2, [r3, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f643 5209 	movw	r2, #15625	; 0x3d09
 8005cea:	60da      	str	r2, [r3, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
	...

08005cfc <_ZN8QAD_LTDC3getEv>:
public:

	QAD_LTDC(const QAD_LTDC& other) = delete;
	QAD_LTDC& operator=(const QAD_LTDC& other) = delete;

	static QAD_LTDC& get(void) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
		static QAD_LTDC instance;
 8005d00:	4b10      	ldr	r3, [pc, #64]	; (8005d44 <_ZN8QAD_LTDC3getEv+0x48>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	f3bf 8f5b 	dmb	ish
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	bf0c      	ite	eq
 8005d12:	2301      	moveq	r3, #1
 8005d14:	2300      	movne	r3, #0
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d010      	beq.n	8005d3e <_ZN8QAD_LTDC3getEv+0x42>
 8005d1c:	4809      	ldr	r0, [pc, #36]	; (8005d44 <_ZN8QAD_LTDC3getEv+0x48>)
 8005d1e:	f002 fc39 	bl	8008594 <__cxa_guard_acquire>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	bf14      	ite	ne
 8005d28:	2301      	movne	r3, #1
 8005d2a:	2300      	moveq	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d005      	beq.n	8005d3e <_ZN8QAD_LTDC3getEv+0x42>
 8005d32:	4805      	ldr	r0, [pc, #20]	; (8005d48 <_ZN8QAD_LTDC3getEv+0x4c>)
 8005d34:	f7ff ffc7 	bl	8005cc6 <_ZN8QAD_LTDCC1Ev>
 8005d38:	4802      	ldr	r0, [pc, #8]	; (8005d44 <_ZN8QAD_LTDC3getEv+0x48>)
 8005d3a:	f002 fc37 	bl	80085ac <__cxa_guard_release>
		return instance;
 8005d3e:	4b02      	ldr	r3, [pc, #8]	; (8005d48 <_ZN8QAD_LTDC3getEv+0x4c>)
	}
 8005d40:	4618      	mov	r0, r3
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20000290 	.word	0x20000290
 8005d48:	20000144 	.word	0x20000144

08005d4c <_ZN8QAD_LTDC15dsi_io_writecmdEmPh>:

	static void deinit(void) {
		get().imp_deinit();
	}

	static void dsi_io_writecmd(uint32_t uNumParams, uint8_t* pParams) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
		get().imp_dsi_io_writecmd(uNumParams, pParams);
 8005d56:	f7ff ffd1 	bl	8005cfc <_ZN8QAD_LTDC3getEv>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fa37 	bl	80061d4 <_ZN8QAD_LTDC19imp_dsi_io_writecmdEmPh>
	}
 8005d66:	bf00      	nop
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <_ZN8QAD_LTDC8imp_initEv>:
  //QAD_LTDC Initialization Methods


//QAD_LTDC::imp_init
//QAD_LTDC Initialization Method
QA_Result QAD_LTDC::imp_init(void) {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b0a2      	sub	sp, #136	; 0x88
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]

  //Init GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 8005d78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	609a      	str	r2, [r3, #8]
 8005d84:	60da      	str	r2, [r3, #12]
 8005d86:	611a      	str	r2, [r3, #16]

	  //Backlight Control Pin
	GPIO_Init.Pin    = QAD_LTDC_BACKLIGHT_PIN;
 8005d88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d8c:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLDOWN;
 8005d92:	2302      	movs	r3, #2
 8005d94:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 8005d96:	2300      	movs	r3, #0
 8005d98:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_BACKLIGHT_PORT, &GPIO_Init);
 8005d9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d9e:	4619      	mov	r1, r3
 8005da0:	48b0      	ldr	r0, [pc, #704]	; (8006064 <_ZN8QAD_LTDC8imp_initEv+0x2f4>)
 8005da2:	f7fd f82d 	bl	8002e00 <HAL_GPIO_Init>

		//Reset Pin
	GPIO_Init.Pin    = QAD_LTDC_RESET_PIN;
 8005da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005daa:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;
 8005dac:	2301      	movs	r3, #1
 8005dae:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init.Pull   = GPIO_PULLUP;
 8005db0:	2301      	movs	r3, #1
 8005db2:	65fb      	str	r3, [r7, #92]	; 0x5c
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 8005db4:	2300      	movs	r3, #0
 8005db6:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_GPIO_Init(QAD_LTDC_RESET_PORT, &GPIO_Init);
 8005db8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	48aa      	ldr	r0, [pc, #680]	; (8006068 <_ZN8QAD_LTDC8imp_initEv+0x2f8>)
 8005dc0:	f7fd f81e 	bl	8002e00 <HAL_GPIO_Init>


	//Reset LCD
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_RESET);
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dca:	48a7      	ldr	r0, [pc, #668]	; (8006068 <_ZN8QAD_LTDC8imp_initEv+0x2f8>)
 8005dcc:	f7fd fad0 	bl	8003370 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8005dd0:	2014      	movs	r0, #20
 8005dd2:	f7fc f9cd 	bl	8002170 <HAL_Delay>
	HAL_GPIO_WritePin(QAD_LTDC_RESET_PORT, QAD_LTDC_RESET_PIN, GPIO_PIN_SET);
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ddc:	48a2      	ldr	r0, [pc, #648]	; (8006068 <_ZN8QAD_LTDC8imp_initEv+0x2f8>)
 8005dde:	f7fd fac7 	bl	8003370 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8005de2:	200a      	movs	r0, #10
 8005de4:	f7fc f9c4 	bl	8002170 <HAL_Delay>


	//Initialize Peripheral Clocks
	__HAL_RCC_LTDC_CLK_ENABLE();
 8005de8:	4ba0      	ldr	r3, [pc, #640]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dec:	4a9f      	ldr	r2, [pc, #636]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005dee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005df2:	6453      	str	r3, [r2, #68]	; 0x44
 8005df4:	4b9d      	ldr	r3, [pc, #628]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_LTDC_FORCE_RESET();
 8005e00:	4b9a      	ldr	r3, [pc, #616]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	4a99      	ldr	r2, [pc, #612]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e0a:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_LTDC_RELEASE_RESET();
 8005e0c:	4b97      	ldr	r3, [pc, #604]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	4a96      	ldr	r2, [pc, #600]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e16:	6253      	str	r3, [r2, #36]	; 0x24

	__HAL_RCC_DSI_CLK_ENABLE();
 8005e18:	4b94      	ldr	r3, [pc, #592]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1c:	4a93      	ldr	r2, [pc, #588]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e22:	6453      	str	r3, [r2, #68]	; 0x44
 8005e24:	4b91      	ldr	r3, [pc, #580]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_DSI_FORCE_RESET();
 8005e30:	4b8e      	ldr	r3, [pc, #568]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	4a8d      	ldr	r2, [pc, #564]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e3a:	6253      	str	r3, [r2, #36]	; 0x24
	__HAL_RCC_DSI_RELEASE_RESET();
 8005e3c:	4b8b      	ldr	r3, [pc, #556]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	4a8a      	ldr	r2, [pc, #552]	; (800606c <_ZN8QAD_LTDC8imp_initEv+0x2fc>)
 8005e42:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005e46:	6253      	str	r3, [r2, #36]	; 0x24


  //--------
  //Init DSI

  m_sDSIHandle.Instance = DSI;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a89      	ldr	r2, [pc, #548]	; (8006070 <_ZN8QAD_LTDC8imp_initEv+0x300>)
 8005e4c:	611a      	str	r2, [r3, #16]
  HAL_DSI_DeInit(&m_sDSIHandle);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3310      	adds	r3, #16
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fc fc56 	bl	8002704 <HAL_DSI_DeInit>

    //DSI PLL
  DSI_PLLInitTypeDef DSI_PLLInit = {0};
 8005e58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	609a      	str	r2, [r3, #8]
  DSI_PLLInit.PLLNDIV = 100;
 8005e64:	2364      	movs	r3, #100	; 0x64
 8005e66:	64bb      	str	r3, [r7, #72]	; 0x48
  DSI_PLLInit.PLLIDF  = DSI_PLL_IN_DIV5;
 8005e68:	2305      	movs	r3, #5
 8005e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  DSI_PLLInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	653b      	str	r3, [r7, #80]	; 0x50

  m_sDSIHandle.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	61da      	str	r2, [r3, #28]
  m_sDSIHandle.Init.TXEscapeCkdiv = m_uLCDLaneByteClk / m_uLCDClkDivisor;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	619a      	str	r2, [r3, #24]
  HAL_DSI_Init(&m_sDSIHandle, &DSI_PLLInit);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3310      	adds	r3, #16
 8005e8a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fc fb1d 	bl	80024d0 <HAL_DSI_Init>

    //DSI Vid Config
  uint32_t HACT = QAD_LTDC_WIDTH;    //Horizontal Active
 8005e96:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005e9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t VACT = QAD_LTDC_HEIGHT;   //Vertical Active
 8005e9e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t VSA  = 12;                //Vertical Sync Active
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t VBP  = 12;                //Vertical Back Porch
 8005eaa:	230c      	movs	r3, #12
 8005eac:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t VFP  = 12;                //Vertical Front Porch
 8005eae:	230c      	movs	r3, #12
 8005eb0:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t HSA  = 63;                //Horizontal Sync Active
 8005eb2:	233f      	movs	r3, #63	; 0x3f
 8005eb4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t HBP  = 120;               //Horizontal Back Porch
 8005eb6:	2378      	movs	r3, #120	; 0x78
 8005eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t HFP  = 120;               //Horizontal Front Porch
 8005eba:	2378      	movs	r3, #120	; 0x78
 8005ebc:	66bb      	str	r3, [r7, #104]	; 0x68

  m_sDSICfgHandle.VirtualChannelID             = 0;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  m_sDSICfgHandle.ColorCoding                  = DSI_RGB888;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2205      	movs	r2, #5
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30
  m_sDSICfgHandle.VSPolarity                   = DSI_VSYNC_ACTIVE_HIGH;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	64da      	str	r2, [r3, #76]	; 0x4c
  m_sDSICfgHandle.HSPolarity                   = DSI_HSYNC_ACTIVE_HIGH;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	649a      	str	r2, [r3, #72]	; 0x48
  m_sDSICfgHandle.DEPolarity                   = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	651a      	str	r2, [r3, #80]	; 0x50
  m_sDSICfgHandle.Mode                         = DSI_VID_MODE_BURST;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
  m_sDSICfgHandle.NullPacketSize               = 0xFFF;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005ee8:	645a      	str	r2, [r3, #68]	; 0x44
  m_sDSICfgHandle.NumberOfChunks               = 0;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40
  m_sDSICfgHandle.PacketSize                   = HACT;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005ef6:	63da      	str	r2, [r3, #60]	; 0x3c
  m_sDSICfgHandle.HorizontalSyncActive         = (HSA * m_uLCDLaneByteClk) / m_uLCDClockRate;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005efe:	fb02 f203 	mul.w	r2, r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	655a      	str	r2, [r3, #84]	; 0x54
  m_sDSICfgHandle.HorizontalBackPorch          = (HSA * m_uLCDLaneByteClk) / m_uLCDClockRate;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005f14:	fb02 f203 	mul.w	r2, r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	659a      	str	r2, [r3, #88]	; 0x58
  m_sDSICfgHandle.HorizontalLine               = ((HACT + HSA + HBP + HFP) * m_uLCDLaneByteClk) / m_uLCDClockRate;
 8005f24:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f2a:	441a      	add	r2, r3
 8005f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2e:	441a      	add	r2, r3
 8005f30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f32:	4413      	add	r3, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6892      	ldr	r2, [r2, #8]
 8005f38:	fb02 f203 	mul.w	r2, r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	65da      	str	r2, [r3, #92]	; 0x5c
  m_sDSICfgHandle.VerticalSyncActive           = VSA;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f4c:	661a      	str	r2, [r3, #96]	; 0x60
  m_sDSICfgHandle.VerticalBackPorch            = VBP;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f52:	665a      	str	r2, [r3, #100]	; 0x64
  m_sDSICfgHandle.VerticalFrontPorch           = VFP;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005f58:	669a      	str	r2, [r3, #104]	; 0x68
  m_sDSICfgHandle.VerticalActive               = VACT;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f60:	66da      	str	r2, [r3, #108]	; 0x6c

  m_sDSICfgHandle.LPCommandEnable              = DSI_LP_COMMAND_ENABLE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005f68:	671a      	str	r2, [r3, #112]	; 0x70
  m_sDSICfgHandle.LPLargestPacketSize          = 16;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2210      	movs	r2, #16
 8005f6e:	675a      	str	r2, [r3, #116]	; 0x74
  m_sDSICfgHandle.LPVACTLargestPacketSize      = 0;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	679a      	str	r2, [r3, #120]	; 0x78
  m_sDSICfgHandle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f7c:	67da      	str	r2, [r3, #124]	; 0x7c
  m_sDSICfgHandle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  m_sDSICfgHandle.LPVerticalActiveEnable       = DSI_LP_VACT_ENABLE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  m_sDSICfgHandle.LPVerticalFrontPorchEnable   = DSI_LP_VFP_ENABLE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  m_sDSICfgHandle.LPVerticalBackPorchEnable    = DSI_LP_VBP_ENABLE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  m_sDSICfgHandle.LPVerticalSyncActiveEnable   = DSI_LP_VSYNC_ENABLE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  HAL_DSI_ConfigVideoMode(&m_sDSIHandle, &m_sDSICfgHandle);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f103 0210 	add.w	r2, r3, #16
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	332c      	adds	r3, #44	; 0x2c
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f7fc fc29 	bl	8002814 <HAL_DSI_ConfigVideoMode>

  //---------
  //Init LTDC
  LTDC_LayerCfgTypeDef LTDC_Layer = {0};
 8005fc2:	f107 0314 	add.w	r3, r7, #20
 8005fc6:	2234      	movs	r2, #52	; 0x34
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f002 fb98 	bl	8008700 <memset>

    //Peripheral
  m_sLTDCHandle.Instance                = LTDC;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a28      	ldr	r2, [pc, #160]	; (8006074 <_ZN8QAD_LTDC8imp_initEv+0x304>)
 8005fd4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  m_sLTDCHandle.Init.HorizontalSync     = (HSA - 1);
 8005fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fda:	1e5a      	subs	r2, r3, #1
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  m_sLTDCHandle.Init.AccumulatedHBP     = (HSA + HBP - 1);
 8005fe2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe6:	4413      	add	r3, r2
 8005fe8:	1e5a      	subs	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  m_sLTDCHandle.Init.AccumulatedActiveW = (QAD_LTDC_WIDTH + HSA + HBP - 1);
 8005ff0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f203 321f 	addw	r2, r3, #799	; 0x31f
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  m_sLTDCHandle.Init.TotalWidth         = (QAD_LTDC_WIDTH + HSA + HBP + HFP - 1);
 8006000:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006004:	441a      	add	r2, r3
 8006006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006008:	4413      	add	r3, r2
 800600a:	f203 321f 	addw	r2, r3, #799	; 0x31f
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  m_sLTDCHandle.LayerCfg->ImageWidth    = QAD_LTDC_WIDTH;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f44f 7248 	mov.w	r2, #800	; 0x320
 800601a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  m_sLTDCHandle.LayerCfg->ImageHeight   = QAD_LTDC_HEIGHT;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006024:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  m_sLTDCHandle.Init.Backcolor.Red      = 0;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
  m_sLTDCHandle.Init.Backcolor.Green    = 0;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
  m_sLTDCHandle.Init.Backcolor.Blue     = 255;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	22ff      	movs	r2, #255	; 0xff
 800603c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  m_sLTDCHandle.Init.PCPolarity         = LTDC_PCPOLARITY_IPC;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  HAL_LTDC_StructInitFromVideoConfig(&m_sLTDCHandle, &m_sDSICfgHandle);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	332c      	adds	r3, #44	; 0x2c
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f7fd fc8d 	bl	8003974 <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&m_sLTDCHandle);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3398      	adds	r3, #152	; 0x98
 800605e:	4618      	mov	r0, r3
 8006060:	e00a      	b.n	8006078 <_ZN8QAD_LTDC8imp_initEv+0x308>
 8006062:	bf00      	nop
 8006064:	40022000 	.word	0x40022000
 8006068:	40022400 	.word	0x40022400
 800606c:	40023800 	.word	0x40023800
 8006070:	40016c00 	.word	0x40016c00
 8006074:	40016800 	.word	0x40016800
 8006078:	f7fd f994 	bl	80033a4 <HAL_LTDC_Init>

    //Init Layer 0
  m_pLayer0Ptr = (void*)0xC0000000;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8006082:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

	LTDC_Layer.WindowX0        = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 800608a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800608e:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 8006094:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006098:	623b      	str	r3, [r7, #32]
	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;
 800609a:	2304      	movs	r3, #4
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer0Ptr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80060a4:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;
 80060a6:	23ff      	movs	r3, #255	; 0xff
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;
 80060aa:	2300      	movs	r3, #0
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	LTDC_Layer.Backcolor.Red   = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80060c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80060c4:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80060c6:	2307      	movs	r3, #7
 80060c8:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;
 80060ca:	f44f 7348 	mov.w	r3, #800	; 0x320
 80060ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;
 80060d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80060d4:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 0);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3398      	adds	r3, #152	; 0x98
 80060da:	f107 0114 	add.w	r1, r7, #20
 80060de:	2200      	movs	r2, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fd fa39 	bl	8003558 <HAL_LTDC_ConfigLayer>
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 0);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060ec:	3384      	adds	r3, #132	; 0x84
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80060f6:	3284      	adds	r2, #132	; 0x84
 80060f8:	f043 0301 	orr.w	r3, r3, #1
 80060fc:	6013      	str	r3, [r2, #0]

  //Init Layer 1
	m_pLayer1Ptr = (void*)((uint32_t)m_pLayer0Ptr + (QAD_LTDC_BUFFERSIZE*2));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006104:	461a      	mov	r2, r3
 8006106:	4b32      	ldr	r3, [pc, #200]	; (80061d0 <_ZN8QAD_LTDC8imp_initEv+0x460>)
 8006108:	4413      	add	r3, r2
 800610a:	461a      	mov	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	LTDC_Layer.WindowX0        = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]
	LTDC_Layer.WindowX1        = QAD_LTDC_WIDTH;
 8006116:	f44f 7348 	mov.w	r3, #800	; 0x320
 800611a:	61bb      	str	r3, [r7, #24]
	LTDC_Layer.WindowY0        = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	61fb      	str	r3, [r7, #28]
	LTDC_Layer.WindowY1        = QAD_LTDC_HEIGHT;
 8006120:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006124:	623b      	str	r3, [r7, #32]
	LTDC_Layer.PixelFormat     = LTDC_PIXEL_FORMAT_ARGB4444;
 8006126:	2304      	movs	r3, #4
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
	LTDC_Layer.FBStartAdress   = (uint32_t)m_pLayer1Ptr;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006130:	63bb      	str	r3, [r7, #56]	; 0x38
	LTDC_Layer.Alpha           = 255;
 8006132:	23ff      	movs	r3, #255	; 0xff
 8006134:	62bb      	str	r3, [r7, #40]	; 0x28
	LTDC_Layer.Alpha0          = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
	LTDC_Layer.Backcolor.Red   = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	LTDC_Layer.Backcolor.Green = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	LTDC_Layer.Backcolor.Blue  = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	LTDC_Layer.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800614c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006150:	633b      	str	r3, [r7, #48]	; 0x30
	LTDC_Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006152:	2307      	movs	r3, #7
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
	LTDC_Layer.ImageWidth      = QAD_LTDC_WIDTH;
 8006156:	f44f 7348 	mov.w	r3, #800	; 0x320
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
	LTDC_Layer.ImageHeight     = QAD_LTDC_HEIGHT;
 800615c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006160:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_LTDC_ConfigLayer(&m_sLTDCHandle, &LTDC_Layer, 1);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3398      	adds	r3, #152	; 0x98
 8006166:	f107 0114 	add.w	r1, r7, #20
 800616a:	2201      	movs	r2, #1
 800616c:	4618      	mov	r0, r3
 800616e:	f7fd f9f3 	bl	8003558 <HAL_LTDC_ConfigLayer>
	__HAL_LTDC_LAYER_ENABLE(&m_sLTDCHandle, 1);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006178:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8006184:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8006188:	f043 0301 	orr.w	r3, r3, #1
 800618c:	6013      	str	r3, [r2, #0]


	//----------
	//Enable DSI
	HAL_DSI_Start(&m_sDSIHandle);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3310      	adds	r3, #16
 8006192:	4618      	mov	r0, r3
 8006194:	f7fc fd3e 	bl	8002c14 <HAL_DSI_Start>


	//------------------------------
	//Initialize OTM8009A Controller
	OTM8009A_Init(OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8006198:	2101      	movs	r1, #1
 800619a:	2000      	movs	r0, #0
 800619c:	f7fb fd40 	bl	8001c20 <OTM8009A_Init>


	//Set Buffer States
	m_eLayer0Back  = Buffer1;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	m_eLayer0Front = Buffer0;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	m_eLayer1Back  = Buffer1;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	m_eLayer1Front = Buffer0;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

	//Set State
	m_eInitState = QA_Initialized;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	701a      	strb	r2, [r3, #0]

	//Return
	return QA_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3788      	adds	r7, #136	; 0x88
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	00177000 	.word	0x00177000

080061d4 <_ZN8QAD_LTDC19imp_dsi_io_writecmdEmPh>:
  //DSI Command Methods


//QAD_LTDC::imp_dsi_io_writecmd
//DSI Command Methods
void QAD_LTDC::imp_dsi_io_writecmd(uint32_t uNumParams, uint8_t* pParams) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
	if (uNumParams <= 1) {
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d80f      	bhi.n	8006206 <_ZN8QAD_LTDC19imp_dsi_io_writecmdEmPh+0x32>
		HAL_DSI_ShortWrite(&m_sDSIHandle, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f103 0010 	add.w	r0, r3, #16
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3301      	adds	r3, #1
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	4613      	mov	r3, r2
 80061fc:	2215      	movs	r2, #21
 80061fe:	2100      	movs	r1, #0
 8006200:	f7fc fd44 	bl	8002c8c <HAL_DSI_ShortWrite>
	} else {
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
	}
}
 8006204:	e00f      	b.n	8006226 <_ZN8QAD_LTDC19imp_dsi_io_writecmdEmPh+0x52>
		HAL_DSI_LongWrite(&m_sDSIHandle, 0, DSI_DCS_LONG_PKT_WRITE, uNumParams, pParams[uNumParams], pParams);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f103 0010 	add.w	r0, r3, #16
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	4413      	add	r3, r2
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	9200      	str	r2, [sp, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2239      	movs	r2, #57	; 0x39
 8006220:	2100      	movs	r1, #0
 8006222:	f7fc fd55 	bl	8002cd0 <HAL_DSI_LongWrite>
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <DSI_IO_WriteCmd>:


//DSI_IO_WriteCmd
//DSI Command Method
void DSI_IO_WriteCmd(uint32_t NbrParam, uint8_t* pParams) {
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	6039      	str	r1, [r7, #0]
  QAD_LTDC::dsi_io_writecmd(NbrParam, pParams);
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff fd86 	bl	8005d4c <_ZN8QAD_LTDC15dsi_io_writecmdEmPh>
}
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>:
  //------------------------------
  //QAD_LTDC Layer Control Methods

//QAD_LTDC::imp_flipLayer0Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer0Buffers(void) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d032      	beq.n	80062be <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x76>
  	return;

  switch (m_eLayer0Front) {
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3149 	ldrb.w	r3, [r3, #329]	; 0x149
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x20>
 8006262:	2b01      	cmp	r3, #1
 8006264:	d017      	beq.n	8006296 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x4e>
 8006266:	e02b      	b.n	80062c0 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    case (Buffer0): {
    	m_eLayer0Back  = Buffer0;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = Buffer1;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800627e:	461a      	mov	r2, r3
 8006280:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x80>)
 8006282:	4413      	add	r3, r2
 8006284:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3398      	adds	r3, #152	; 0x98
 800628a:	2200      	movs	r2, #0
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	4618      	mov	r0, r3
 8006290:	f7fd f9a0 	bl	80035d4 <HAL_LTDC_SetAddress>
    	break;
 8006294:	e014      	b.n	80062c0 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
    }
    case (Buffer1): {
    	m_eLayer0Back  = Buffer1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    	m_eLayer0Front = Buffer0;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
    	uint32_t uAddr = ((uint32_t)m_pLayer0Ptr);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80062ac:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 0);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3398      	adds	r3, #152	; 0x98
 80062b2:	2200      	movs	r2, #0
 80062b4:	68f9      	ldr	r1, [r7, #12]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fd f98c 	bl	80035d4 <HAL_LTDC_SetAddress>
    	break;
 80062bc:	e000      	b.n	80062c0 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv+0x78>
  	return;
 80062be:	bf00      	nop
    }
  }
}
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	000bb800 	.word	0x000bb800

080062cc <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>:


//QAD_LTDC::imp_flipLayer1Buffers
//QAD_LTDC Layer Control Method
void QAD_LTDC::imp_flipLayer1Buffers(void) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d032      	beq.n	8006342 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x76>
  	return;

  switch (m_eLayer1Front) {
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 314b 	ldrb.w	r3, [r3, #331]	; 0x14b
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x20>
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d017      	beq.n	800631a <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x4e>
 80062ea:	e02b      	b.n	8006344 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    case (Buffer0): {
    	m_eLayer1Back  = Buffer0;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = Buffer1;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006302:	461a      	mov	r2, r3
 8006304:	4b11      	ldr	r3, [pc, #68]	; (800634c <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x80>)
 8006306:	4413      	add	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3398      	adds	r3, #152	; 0x98
 800630e:	2201      	movs	r2, #1
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f7fd f95e 	bl	80035d4 <HAL_LTDC_SetAddress>
    	break;
 8006318:	e014      	b.n	8006344 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
    }
    case (Buffer1): {
    	m_eLayer1Back  = Buffer1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
    	m_eLayer1Front = Buffer0;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
    	uint32_t uAddr = ((uint32_t)m_pLayer1Ptr);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006330:	60fb      	str	r3, [r7, #12]
    	HAL_LTDC_SetAddress(&m_sLTDCHandle, uAddr, 1);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3398      	adds	r3, #152	; 0x98
 8006336:	2201      	movs	r2, #1
 8006338:	68f9      	ldr	r1, [r7, #12]
 800633a:	4618      	mov	r0, r3
 800633c:	f7fd f94a 	bl	80035d4 <HAL_LTDC_SetAddress>
    	break;
 8006340:	e000      	b.n	8006344 <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv+0x78>
  	return;
 8006342:	bf00      	nop
    }
  }
}
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	000bb800 	.word	0x000bb800

08006350 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>:
}


//QAD_LTDC::imp_getLayer0BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer0BackBuffer(void) {
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x14>
		return NULL;
 8006360:	2300      	movs	r3, #0
 8006362:	e013      	b.n	800638c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>

	switch (m_eLayer0Back) {
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x24>
 800636e:	2b01      	cmp	r3, #1
 8006370:	d004      	beq.n	800637c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x2c>
 8006372:	e00a      	b.n	800638a <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3a>
	  case (Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer0Ptr;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800637a:	e007      	b.n	800638c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	  case (Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer0Ptr + QAD_LTDC_BUFFERSIZE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006382:	461a      	mov	r2, r3
 8006384:	4b04      	ldr	r3, [pc, #16]	; (8006398 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x48>)
 8006386:	4413      	add	r3, r2
 8006388:	e000      	b.n	800638c <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	000bb800 	.word	0x000bb800

0800639c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>:
}


//QAD_LTDC::imp_getLayer1BackBuffer
//QAD_LTDC Layer Data Method
QAD_LTDC_Buffer* QAD_LTDC::imp_getLayer1BackBuffer(void) {
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	if (!m_eInitState)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x14>
		return NULL;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e013      	b.n	80063d8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>

	switch (m_eLayer1Back) {
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 314a 	ldrb.w	r3, [r3, #330]	; 0x14a
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x24>
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d004      	beq.n	80063c8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x2c>
 80063be:	e00a      	b.n	80063d6 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3a>
	  case (Buffer0):
	  	return (QAD_LTDC_Buffer*)m_pLayer1Ptr;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80063c6:	e007      	b.n	80063d8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	  case (Buffer1):
	  	return (QAD_LTDC_Buffer*)((uint32_t)m_pLayer1Ptr + QAD_LTDC_BUFFERSIZE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80063ce:	461a      	mov	r2, r3
 80063d0:	4b04      	ldr	r3, [pc, #16]	; (80063e4 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x48>)
 80063d2:	4413      	add	r3, r2
 80063d4:	e000      	b.n	80063d8 <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv+0x3c>
	  	break;
	}

	return NULL;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	000bb800 	.word	0x000bb800

080063e8 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 80063ec:	4b10      	ldr	r3, [pc, #64]	; (8006430 <_ZN11QAD_UARTMgr3getEv+0x48>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	f3bf 8f5b 	dmb	ish
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	bf0c      	ite	eq
 80063fe:	2301      	moveq	r3, #1
 8006400:	2300      	movne	r3, #0
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d010      	beq.n	800642a <_ZN11QAD_UARTMgr3getEv+0x42>
 8006408:	4809      	ldr	r0, [pc, #36]	; (8006430 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800640a:	f002 f8c3 	bl	8008594 <__cxa_guard_acquire>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	bf14      	ite	ne
 8006414:	2301      	movne	r3, #1
 8006416:	2300      	moveq	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <_ZN11QAD_UARTMgr3getEv+0x42>
 800641e:	4805      	ldr	r0, [pc, #20]	; (8006434 <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8006420:	f000 fa3e 	bl	80068a0 <_ZN11QAD_UARTMgrC1Ev>
 8006424:	4802      	ldr	r0, [pc, #8]	; (8006430 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8006426:	f002 f8c1 	bl	80085ac <__cxa_guard_release>
		return instance;
 800642a:	4b02      	ldr	r3, [pc, #8]	; (8006434 <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 800642c:	4618      	mov	r0, r3
 800642e:	bd80      	pop	{r7, pc}
 8006430:	200002f4 	.word	0x200002f4
 8006434:	20000294 	.word	0x20000294

08006438 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	2b07      	cmp	r3, #7
 8006446:	d901      	bls.n	800644c <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 8006448:	2302      	movs	r3, #2
 800644a:	e00a      	b.n	8006462 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 800644c:	f7ff ffcc 	bl	80063e8 <_ZN11QAD_UARTMgr3getEv>
 8006450:	4601      	mov	r1, r0
 8006452:	79fa      	ldrb	r2, [r7, #7]
 8006454:	4613      	mov	r3, r2
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	3301      	adds	r3, #1
 8006460:	781b      	ldrb	r3, [r3, #0]
	}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f769xx.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	4603      	mov	r3, r0
 8006472:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	2b07      	cmp	r3, #7
 8006478:	d901      	bls.n	800647e <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	e00a      	b.n	8006494 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 800647e:	f7ff ffb3 	bl	80063e8 <_ZN11QAD_UARTMgr3getEv>
 8006482:	4601      	mov	r1, r0
 8006484:	79fa      	ldrb	r2, [r7, #7]
 8006486:	4613      	mov	r3, r2
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	3304      	adds	r3, #4
 8006492:	681b      	ldr	r3, [r3, #0]
	}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f769xx.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	2b07      	cmp	r3, #7
 80064aa:	d902      	bls.n	80064b2 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 80064ac:	f06f 0309 	mvn.w	r3, #9
 80064b0:	e00b      	b.n	80064ca <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 80064b2:	f7ff ff99 	bl	80063e8 <_ZN11QAD_UARTMgr3getEv>
 80064b6:	4601      	mov	r1, r0
 80064b8:	79fa      	ldrb	r2, [r7, #7]
 80064ba:	4613      	mov	r3, r2
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	440b      	add	r3, r1
 80064c4:	3308      	adds	r3, #8
 80064c6:	f993 3000 	ldrsb.w	r3, [r3]
	}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Management Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static void registerUART(QAD_UART_Periph eUART) {
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	4603      	mov	r3, r0
 80064da:	71fb      	strb	r3, [r7, #7]
		get().imp_registerUART(eUART);
 80064dc:	f7ff ff84 	bl	80063e8 <_ZN11QAD_UARTMgr3getEv>
 80064e0:	4602      	mov	r2, r0
 80064e2:	79fb      	ldrb	r3, [r7, #7]
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f000 fa5c 	bl	80069a4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
	}
 80064ec:	bf00      	nop
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	4603      	mov	r3, r0
 80064fc:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 80064fe:	f7ff ff73 	bl	80063e8 <_ZN11QAD_UARTMgr3getEv>
 8006502:	4602      	mov	r2, r0
 8006504:	79fb      	ldrb	r3, [r7, #7]
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f000 fa74 	bl	80069f6 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 800650e:	bf00      	nop
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	4603      	mov	r3, r0
 800651e:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8006520:	f7ff ff62 	bl	80063e8 <_ZN11QAD_UARTMgr3getEv>
 8006524:	4602      	mov	r2, r0
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	4619      	mov	r1, r3
 800652a:	4610      	mov	r0, r2
 800652c:	f000 fa7e 	bl	8006a2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8006530:	bf00      	nop
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	4603      	mov	r3, r0
 8006540:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 8006542:	f7ff ff51 	bl	80063e8 <_ZN11QAD_UARTMgr3getEv>
 8006546:	4602      	mov	r2, r0
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f000 fb5f 	bl	8006c10 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 8006552:	bf00      	nop
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or QA_Fail if initialization has failed
QA_Result QAD_UART::init(void) {
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
	if (QAD_UARTMgr::getState(m_eUART))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	785b      	ldrb	r3, [r3, #1]
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff ff66 	bl	8006438 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	bf14      	ite	ne
 8006572:	2301      	movne	r3, #1
 8006574:	2300      	moveq	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 800657c:	2302      	movs	r3, #2
 800657e:	e012      	b.n	80065a6 <_ZN8QAD_UART4initEv+0x4c>

  QAD_UARTMgr::registerUART(m_eUART);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	785b      	ldrb	r3, [r3, #1]
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff ffa4 	bl	80064d2 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>
  QA_Result eRes = periphInit();
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f8a7 	bl	80066de <_ZN8QAD_UART10periphInitEv>
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]

  if (eRes)
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d004      	beq.n	80065a4 <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	785b      	ldrb	r3, [r3, #1]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff ffa8 	bl	80064f4 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
  return eRes;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b082      	sub	sp, #8
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  if (!m_eInitState)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <_ZN8QAD_UART6deinitEv+0x24>
  	return;

  periphDeinit(DeinitFull);
 80065be:	2101      	movs	r1, #1
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f924 	bl	800680e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
  QAD_UARTMgr::deregisterUART(m_eUART);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	785b      	ldrb	r3, [r3, #1]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff ff92 	bl	80064f4 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 80065d0:	e000      	b.n	80065d4 <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 80065d2:	bf00      	nop
}
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	331c      	adds	r3, #28
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006608:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Active;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006634:	601a      	str	r2, [r3, #0]
  m_eTXState = QA_Inactive;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	f042 0220 	orr.w	r2, r2, #32
 8006660:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Active;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	f022 0220 	bic.w	r2, r2, #32
 800668c:	601a      	str	r2, [r3, #0]
  m_eRXState = QA_Inactive;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART transmit data register (TDR)
void QAD_UART::dataTX(uint8_t uData) {
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	70fb      	strb	r3, [r7, #3]
  m_sHandle.Instance->TDR = uData;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART receive data register (RDR)
uint8_t QAD_UART::dataRX(void) {
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  return m_sHandle.Instance->RDR;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	b2db      	uxtb	r3, r3
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 80066de:	b580      	push	{r7, lr}
 80066e0:	b088      	sub	sp, #32
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 80066e6:	f107 030c 	add.w	r3, r7, #12
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	605a      	str	r2, [r3, #4]
 80066f0:	609a      	str	r2, [r3, #8]
 80066f2:	60da      	str	r2, [r3, #12]
 80066f4:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8a1b      	ldrh	r3, [r3, #16]
 80066fa:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 80066fc:	2302      	movs	r3, #2
 80066fe:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8006704:	2303      	movs	r3, #3
 8006706:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7c9b      	ldrb	r3, [r3, #18]
 800670c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f107 020c 	add.w	r2, r7, #12
 8006716:	4611      	mov	r1, r2
 8006718:	4618      	mov	r0, r3
 800671a:	f7fc fb71 	bl	8002e00 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	8b1b      	ldrh	r3, [r3, #24]
 8006722:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 8006724:	2302      	movs	r3, #2
 8006726:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8006728:	2301      	movs	r3, #1
 800672a:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 800672c:	2303      	movs	r3, #3
 800672e:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	7e9b      	ldrb	r3, [r3, #26]
 8006734:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f107 020c 	add.w	r2, r7, #12
 800673e:	4611      	mov	r1, r2
 8006740:	4618      	mov	r0, r3
 8006742:	f7fc fb5d 	bl	8002e00 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fee3 	bl	8006516 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff fe88 	bl	800646a <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 800675a:	4602      	mov	r2, r0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	220c      	movs	r2, #12
 800677e:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	331c      	adds	r3, #28
 8006790:	4618      	mov	r0, r3
 8006792:	f7fe fad4 	bl	8004d3e <HAL_UART_Init>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	bf14      	ite	ne
 800679c:	2301      	movne	r3, #1
 800679e:	2300      	moveq	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 80067a6:	2100      	movs	r1, #0
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f830 	bl	800680e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e029      	b.n	8006806 <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	f042 0201 	orr.w	r2, r2, #1
 80067c0:	601a      	str	r2, [r3, #0]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	785b      	ldrb	r3, [r3, #1]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff fe68 	bl	800649c <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 80067cc:	4603      	mov	r3, r0
 80067ce:	4618      	mov	r0, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	7a1b      	ldrb	r3, [r3, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	4619      	mov	r1, r3
 80067d8:	f7fb fded 	bl	80023b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff fe5b 	bl	800649c <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 80067e6:	4603      	mov	r3, r0
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fb fe00 	bl	80023ee <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  //Return
  return QA_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3720      	adds	r7, #32
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//QAD_UART Private Initialization Method
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	70fb      	strb	r3, [r7, #3]

	//Disable IRQs
	//Check if full deinitialization is required
	if (eDeinitMode) {
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01b      	beq.n	8006858 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff fefc 	bl	800661e <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ff25 	bl	8006676 <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff fe33 	bl	800649c <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8006836:	4603      	mov	r3, r0
 8006838:	4618      	mov	r0, r3
 800683a:	f7fb fde6 	bl	800240a <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	f022 0201 	bic.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	331c      	adds	r3, #28
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fac1 	bl	8004dda <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	785b      	ldrb	r3, [r3, #1]
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff fe6b 	bl	8006538 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8b1b      	ldrh	r3, [r3, #24]
 800686a:	4619      	mov	r1, r3
 800686c:	4610      	mov	r0, r2
 800686e:	f7fc fc73 	bl	8003158 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	8a1b      	ldrh	r3, [r3, #16]
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f7fc fc6b 	bl	8003158 <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method is a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 80068a8:	2300      	movs	r3, #0
 80068aa:	73fb      	strb	r3, [r7, #15]
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	2b07      	cmp	r3, #7
 80068b0:	d80d      	bhi.n	80068ce <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 80068b2:	7bfa      	ldrb	r2, [r7, #15]
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	4613      	mov	r3, r2
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	4413      	add	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	440b      	add	r3, r1
 80068c0:	3301      	adds	r3, #1
 80068c2:	2200      	movs	r2, #0
 80068c4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	3301      	adds	r3, #1
 80068ca:	73fb      	strb	r3, [r7, #15]
 80068cc:	e7ee      	b.n	80068ac <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART3].eUART = QAD_UART3;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	761a      	strb	r2, [r3, #24]
	m_sUARTs[QAD_UART4].eUART = QAD_UART4;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2203      	movs	r2, #3
 80068e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sUARTs[QAD_UART5].eUART = QAD_UART5;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2204      	movs	r2, #4
 80068ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2205      	movs	r2, #5
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	m_sUARTs[QAD_UART7].eUART = QAD_UART7;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2206      	movs	r2, #6
 80068fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	m_sUARTs[QAD_UART8].eUART = QAD_UART8;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2207      	movs	r2, #7
 8006904:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a1e      	ldr	r2, [pc, #120]	; (8006984 <_ZN11QAD_UARTMgrC1Ev+0xe4>)
 800690c:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a1d      	ldr	r2, [pc, #116]	; (8006988 <_ZN11QAD_UARTMgrC1Ev+0xe8>)
 8006912:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART3].pInstance = USART3;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a1d      	ldr	r2, [pc, #116]	; (800698c <_ZN11QAD_UARTMgrC1Ev+0xec>)
 8006918:	61da      	str	r2, [r3, #28]
	m_sUARTs[QAD_UART4].pInstance = UART4;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a1c      	ldr	r2, [pc, #112]	; (8006990 <_ZN11QAD_UARTMgrC1Ev+0xf0>)
 800691e:	629a      	str	r2, [r3, #40]	; 0x28
	m_sUARTs[QAD_UART5].pInstance = UART5;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a1c      	ldr	r2, [pc, #112]	; (8006994 <_ZN11QAD_UARTMgrC1Ev+0xf4>)
 8006924:	635a      	str	r2, [r3, #52]	; 0x34
	m_sUARTs[QAD_UART6].pInstance = USART6;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a1b      	ldr	r2, [pc, #108]	; (8006998 <_ZN11QAD_UARTMgrC1Ev+0xf8>)
 800692a:	641a      	str	r2, [r3, #64]	; 0x40
	m_sUARTs[QAD_UART7].pInstance = UART7;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a1b      	ldr	r2, [pc, #108]	; (800699c <_ZN11QAD_UARTMgrC1Ev+0xfc>)
 8006930:	64da      	str	r2, [r3, #76]	; 0x4c
	m_sUARTs[QAD_UART8].pInstance = UART8;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a1a      	ldr	r2, [pc, #104]	; (80069a0 <_ZN11QAD_UARTMgrC1Ev+0x100>)
 8006936:	659a      	str	r2, [r3, #88]	; 0x58

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2225      	movs	r2, #37	; 0x25
 800693c:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2226      	movs	r2, #38	; 0x26
 8006942:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART3].eIRQ = USART3_IRQn;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2227      	movs	r2, #39	; 0x27
 8006948:	f883 2020 	strb.w	r2, [r3, #32]
	m_sUARTs[QAD_UART4].eIRQ = UART4_IRQn;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2234      	movs	r2, #52	; 0x34
 8006950:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	m_sUARTs[QAD_UART5].eIRQ = UART5_IRQn;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2235      	movs	r2, #53	; 0x35
 8006958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2247      	movs	r2, #71	; 0x47
 8006960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sUARTs[QAD_UART7].eIRQ = UART7_IRQn;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2252      	movs	r2, #82	; 0x52
 8006968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	m_sUARTs[QAD_UART8].eIRQ = UART8_IRQn;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2253      	movs	r2, #83	; 0x53
 8006970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

}
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	40011000 	.word	0x40011000
 8006988:	40004400 	.word	0x40004400
 800698c:	40004800 	.word	0x40004800
 8006990:	40004c00 	.word	0x40004c00
 8006994:	40005000 	.word	0x40005000
 8006998:	40011400 	.word	0x40011400
 800699c:	40007800 	.word	0x40007800
 80069a0:	40007c00 	.word	0x40007c00

080069a4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	2b07      	cmp	r3, #7
 80069b4:	d901      	bls.n	80069ba <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e017      	b.n	80069ea <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 80069ba:	78fa      	ldrb	r2, [r7, #3]
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	3301      	adds	r3, #1
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 80069d0:	2302      	movs	r3, #2
 80069d2:	e00a      	b.n	80069ea <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 80069d4:	78fa      	ldrb	r2, [r7, #3]
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	4613      	mov	r3, r2
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	4413      	add	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	440b      	add	r3, r1
 80069e2:	3301      	adds	r3, #1
 80069e4:	2201      	movs	r2, #1
 80069e6:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8006a02:	78fb      	ldrb	r3, [r7, #3]
 8006a04:	2b07      	cmp	r3, #7
 8006a06:	d80a      	bhi.n	8006a1e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8006a08:	78fa      	ldrb	r2, [r7, #3]
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	3301      	adds	r3, #1
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]
 8006a1c:	e000      	b.n	8006a20 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 8006a1e:	bf00      	nop
}
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
	...

08006a2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 8006a2c:	b480      	push	{r7}
 8006a2e:	b08b      	sub	sp, #44	; 0x2c
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	f200 80df 	bhi.w	8006bfe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
 8006a40:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1c>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a9f 	.word	0x08006a9f
 8006a50:	08006ad1 	.word	0x08006ad1
 8006a54:	08006b03 	.word	0x08006b03
 8006a58:	08006b35 	.word	0x08006b35
 8006a5c:	08006b67 	.word	0x08006b67
 8006a60:	08006b99 	.word	0x08006b99
 8006a64:	08006bcb 	.word	0x08006bcb
 8006a68:	08006bfd 	.word	0x08006bfd
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 8006a6c:	4b67      	ldr	r3, [pc, #412]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a70:	4a66      	ldr	r2, [pc, #408]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a72:	f043 0310 	orr.w	r3, r3, #16
 8006a76:	6453      	str	r3, [r2, #68]	; 0x44
 8006a78:	4b64      	ldr	r3, [pc, #400]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_USART1_FORCE_RESET();
 8006a84:	4b61      	ldr	r3, [pc, #388]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	4a60      	ldr	r2, [pc, #384]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a8a:	f043 0310 	orr.w	r3, r3, #16
 8006a8e:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 8006a90:	4b5e      	ldr	r3, [pc, #376]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	4a5d      	ldr	r2, [pc, #372]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006a96:	f023 0310 	bic.w	r3, r3, #16
 8006a9a:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8006a9c:	e0af      	b.n	8006bfe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 8006a9e:	4b5b      	ldr	r3, [pc, #364]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	4a5a      	ldr	r2, [pc, #360]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8006aaa:	4b58      	ldr	r3, [pc, #352]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab2:	623b      	str	r3, [r7, #32]
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_USART2_FORCE_RESET();
 8006ab6:	4b55      	ldr	r3, [pc, #340]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	4a54      	ldr	r2, [pc, #336]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac0:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 8006ac2:	4b52      	ldr	r3, [pc, #328]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	4a51      	ldr	r2, [pc, #324]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ac8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006acc:	6213      	str	r3, [r2, #32]
      break;
 8006ace:	e096      	b.n	8006bfe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_ENABLE();
 8006ad0:	4b4e      	ldr	r3, [pc, #312]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	4a4d      	ldr	r2, [pc, #308]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ada:	6413      	str	r3, [r2, #64]	; 0x40
 8006adc:	4b4b      	ldr	r3, [pc, #300]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	69fb      	ldr	r3, [r7, #28]
      __HAL_RCC_USART3_FORCE_RESET();
 8006ae8:	4b48      	ldr	r3, [pc, #288]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	4a47      	ldr	r2, [pc, #284]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006aee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006af2:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART3_RELEASE_RESET();
 8006af4:	4b45      	ldr	r3, [pc, #276]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	4a44      	ldr	r2, [pc, #272]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006afe:	6213      	str	r3, [r2, #32]
      break;
 8006b00:	e07d      	b.n	8006bfe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_ENABLE();
 8006b02:	4b42      	ldr	r3, [pc, #264]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	4a41      	ldr	r2, [pc, #260]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b0e:	4b3f      	ldr	r3, [pc, #252]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b16:	61bb      	str	r3, [r7, #24]
 8006b18:	69bb      	ldr	r3, [r7, #24]
      __HAL_RCC_UART4_FORCE_RESET();
 8006b1a:	4b3c      	ldr	r3, [pc, #240]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	4a3b      	ldr	r2, [pc, #236]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b24:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART4_RELEASE_RESET();
 8006b26:	4b39      	ldr	r3, [pc, #228]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	4a38      	ldr	r2, [pc, #224]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b2c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006b30:	6213      	str	r3, [r2, #32]
      break;
 8006b32:	e064      	b.n	8006bfe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_ENABLE();
 8006b34:	4b35      	ldr	r3, [pc, #212]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b38:	4a34      	ldr	r2, [pc, #208]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8006b40:	4b32      	ldr	r3, [pc, #200]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_UART5_FORCE_RESET();
 8006b4c:	4b2f      	ldr	r3, [pc, #188]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	4a2e      	ldr	r2, [pc, #184]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b56:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART5_RELEASE_RESET();
 8006b58:	4b2c      	ldr	r3, [pc, #176]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	4a2b      	ldr	r2, [pc, #172]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b62:	6213      	str	r3, [r2, #32]
      break;
 8006b64:	e04b      	b.n	8006bfe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 8006b66:	4b29      	ldr	r3, [pc, #164]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6a:	4a28      	ldr	r2, [pc, #160]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b6c:	f043 0320 	orr.w	r3, r3, #32
 8006b70:	6453      	str	r3, [r2, #68]	; 0x44
 8006b72:	4b26      	ldr	r3, [pc, #152]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	613b      	str	r3, [r7, #16]
 8006b7c:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART6_FORCE_RESET();
 8006b7e:	4b23      	ldr	r3, [pc, #140]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	4a22      	ldr	r2, [pc, #136]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b84:	f043 0320 	orr.w	r3, r3, #32
 8006b88:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 8006b8a:	4b20      	ldr	r3, [pc, #128]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	4a1f      	ldr	r2, [pc, #124]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b90:	f023 0320 	bic.w	r3, r3, #32
 8006b94:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8006b96:	e032      	b.n	8006bfe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_ENABLE();
 8006b98:	4b1c      	ldr	r3, [pc, #112]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	4a1b      	ldr	r2, [pc, #108]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006b9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8006ba4:	4b19      	ldr	r3, [pc, #100]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_UART7_FORCE_RESET();
 8006bb0:	4b16      	ldr	r3, [pc, #88]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bba:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART7_RELEASE_RESET();
 8006bbc:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	4a12      	ldr	r2, [pc, #72]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bc6:	6213      	str	r3, [r2, #32]
      break;
 8006bc8:	e019      	b.n	8006bfe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_ENABLE();
 8006bca:	4b10      	ldr	r3, [pc, #64]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	4a0f      	ldr	r2, [pc, #60]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bde:	60bb      	str	r3, [r7, #8]
 8006be0:	68bb      	ldr	r3, [r7, #8]
      __HAL_RCC_UART8_FORCE_RESET();
 8006be2:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	4a09      	ldr	r2, [pc, #36]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bec:	6213      	str	r3, [r2, #32]
      __HAL_RCC_UART8_RELEASE_RESET();
 8006bee:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	4a06      	ldr	r2, [pc, #24]	; (8006c0c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1e0>)
 8006bf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bf8:	6213      	str	r3, [r2, #32]
      break;
 8006bfa:	e000      	b.n	8006bfe <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x1d2>
    case (QAD_UARTNone):
    	break;
 8006bfc:	bf00      	nop
  }
}
 8006bfe:	bf00      	nop
 8006c00:	372c      	adds	r7, #44	; 0x2c
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40023800 	.word	0x40023800

08006c10 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8006c1c:	78fb      	ldrb	r3, [r7, #3]
 8006c1e:	2b08      	cmp	r3, #8
 8006c20:	d84d      	bhi.n	8006cbe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
 8006c22:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006c4d 	.word	0x08006c4d
 8006c2c:	08006c5b 	.word	0x08006c5b
 8006c30:	08006c69 	.word	0x08006c69
 8006c34:	08006c77 	.word	0x08006c77
 8006c38:	08006c85 	.word	0x08006c85
 8006c3c:	08006c93 	.word	0x08006c93
 8006c40:	08006ca1 	.word	0x08006ca1
 8006c44:	08006caf 	.word	0x08006caf
 8006c48:	08006cbd 	.word	0x08006cbd
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 8006c4c:	4b1f      	ldr	r3, [pc, #124]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c50:	4a1e      	ldr	r2, [pc, #120]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c52:	f023 0310 	bic.w	r3, r3, #16
 8006c56:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8006c58:	e031      	b.n	8006cbe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 8006c5a:	4b1c      	ldr	r3, [pc, #112]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	4a1b      	ldr	r2, [pc, #108]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c64:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006c66:	e02a      	b.n	8006cbe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART3):
    	__HAL_RCC_USART3_CLK_DISABLE();
 8006c68:	4b18      	ldr	r3, [pc, #96]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	4a17      	ldr	r2, [pc, #92]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c72:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006c74:	e023      	b.n	8006cbe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART4):
    	__HAL_RCC_UART4_CLK_DISABLE();
 8006c76:	4b15      	ldr	r3, [pc, #84]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	4a14      	ldr	r2, [pc, #80]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c7c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006c80:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006c82:	e01c      	b.n	8006cbe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART5):
    	__HAL_RCC_UART5_CLK_DISABLE();
 8006c84:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	4a10      	ldr	r2, [pc, #64]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c8e:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006c90:	e015      	b.n	8006cbe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 8006c92:	4b0e      	ldr	r3, [pc, #56]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c96:	4a0d      	ldr	r2, [pc, #52]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006c98:	f023 0320 	bic.w	r3, r3, #32
 8006c9c:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8006c9e:	e00e      	b.n	8006cbe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART7):
    	__HAL_RCC_UART7_CLK_DISABLE();
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	4a09      	ldr	r2, [pc, #36]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006ca6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006caa:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006cac:	e007      	b.n	8006cbe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UART8):
    	__HAL_RCC_UART8_CLK_DISABLE();
 8006cae:	4b07      	ldr	r3, [pc, #28]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	4a06      	ldr	r2, [pc, #24]	; (8006ccc <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xbc>)
 8006cb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cb8:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8006cba:	e000      	b.n	8006cbe <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0xae>
    case (QAD_UARTNone):
    	break;
 8006cbc:	bf00      	nop
  }
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	40023800 	.word	0x40023800

08006cd0 <_ZN17QAT_PixelARGB4444aSERKt>:

		m_uPxl = other.pxl();
		return *this;
	}

	QAT_PixelARGB4444& operator=(const uint16_t& other) {
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
		m_uPxl = other;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	881a      	ldrh	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	801a      	strh	r2, [r3, #0]
		return *this;
 8006ce2:	687b      	ldr	r3, [r7, #4]
	}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <_ZN17QAT_PixelARGB44443pxlERt>:
	//Pxl
	uint16_t pxl(void) const {
		return m_uPxl;
	}

	void pxl(uint16_t& pxl) {
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
		m_uPxl = pxl;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	881a      	ldrh	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	801a      	strh	r2, [r3, #0]
	}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <_ZN8QAD_LTDC4initEv>:
	static QA_Result init(void) {
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	af00      	add	r7, sp, #0
		return get().imp_init();
 8006d12:	f7fe fff3 	bl	8005cfc <_ZN8QAD_LTDC3getEv>
 8006d16:	4603      	mov	r3, r0
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff f829 	bl	8005d70 <_ZN8QAD_LTDC8imp_initEv>
 8006d1e:	4603      	mov	r3, r0
	}
 8006d20:	4618      	mov	r0, r3
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <_ZN8QAD_LTDC17flipLayer0BuffersEv>:
	}

    //---------------------
	  //Layer Control Methods

	static void flipLayer0Buffers(void) {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
		get().imp_flipLayer0Buffers();
 8006d28:	f7fe ffe8 	bl	8005cfc <_ZN8QAD_LTDC3getEv>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff fa8a 	bl	8006248 <_ZN8QAD_LTDC21imp_flipLayer0BuffersEv>
	}
 8006d34:	bf00      	nop
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <_ZN8QAD_LTDC17flipLayer1BuffersEv>:

	static void flipLayer1Buffers(void) {
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
		get().imp_flipLayer1Buffers();
 8006d3c:	f7fe ffde 	bl	8005cfc <_ZN8QAD_LTDC3getEv>
 8006d40:	4603      	mov	r3, r0
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff fac2 	bl	80062cc <_ZN8QAD_LTDC21imp_flipLayer1BuffersEv>
	}
 8006d48:	bf00      	nop
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <_ZN8QAD_LTDC19getLayer0BackBufferEv>:

	static void* getLayer0BackBufferPtr(void) {
		return get().imp_getLayer0BackBufferPtr();
	}

	static QAD_LTDC_Buffer* getLayer0BackBuffer(void) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
		return get().imp_getLayer0BackBuffer();
 8006d50:	f7fe ffd4 	bl	8005cfc <_ZN8QAD_LTDC3getEv>
 8006d54:	4603      	mov	r3, r0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff fafa 	bl	8006350 <_ZN8QAD_LTDC23imp_getLayer0BackBufferEv>
 8006d5c:	4603      	mov	r3, r0
	}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <_ZN8QAD_LTDC19getLayer1BackBufferEv>:

	static void* getLayer1BackBufferPtr(void) {
		return get().imp_getLayer1BackBufferPtr();
	}

	static QAD_LTDC_Buffer* getLayer1BackBuffer(void) {
 8006d62:	b580      	push	{r7, lr}
 8006d64:	af00      	add	r7, sp, #0
		return get().imp_getLayer1BackBuffer();
 8006d66:	f7fe ffc9 	bl	8005cfc <_ZN8QAD_LTDC3getEv>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff fb15 	bl	800639c <_ZN8QAD_LTDC23imp_getLayer1BackBufferEv>
 8006d72:	4603      	mov	r3, r0
	}
 8006d74:	4618      	mov	r0, r3
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <_ZN7QAS_LCD8imp_initEv>:
	//------------------------------------------


//QAS_LCD::imp_init
//QAS_LCD Initialization Method
QA_Result QAS_LCD::imp_init(void) {
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af04      	add	r7, sp, #16
 8006d7e:	6078      	str	r0, [r7, #4]
  if (m_eInitState) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <_ZN7QAS_LCD8imp_initEv+0x14>
  	return QA_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e036      	b.n	8006dfa <_ZN7QAS_LCD8imp_initEv+0x82>
  }

	//Init LTDC
	if (QAD_LTDC::init())
 8006d8c:	f7ff ffbf 	bl	8006d0e <_ZN8QAD_LTDC4initEv>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	bf14      	ite	ne
 8006d96:	2301      	movne	r3, #1
 8006d98:	2300      	moveq	r3, #0
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <_ZN7QAS_LCD8imp_initEv+0x2c>
		return QA_Fail;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e02a      	b.n	8006dfa <_ZN7QAS_LCD8imp_initEv+0x82>

	m_eInitState = QA_Initialized;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	701a      	strb	r2, [r3, #0]

	m_pDrawBuffer = NULL;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	605a      	str	r2, [r3, #4]
	m_uDrawColor  = 0x0000;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	811a      	strh	r2, [r3, #8]

	//Add Fonts to Font Manager List
	m_cFontMgr.clear();
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	330c      	adds	r3, #12
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fb39 	bl	8007432 <_ZN15QAS_LCD_FontMgr5clearEv>

	m_cFontMgr.add("SegoeUI20ptSB",
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f103 000c 	add.w	r0, r3, #12
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	9302      	str	r3, [sp, #8]
 8006dca:	2305      	movs	r3, #5
 8006dcc:	9301      	str	r3, [sp, #4]
 8006dce:	231b      	movs	r3, #27
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <_ZN7QAS_LCD8imp_initEv+0x8c>)
 8006dd4:	4a0c      	ldr	r2, [pc, #48]	; (8006e08 <_ZN7QAS_LCD8imp_initEv+0x90>)
 8006dd6:	490d      	ldr	r1, [pc, #52]	; (8006e0c <_ZN7QAS_LCD8imp_initEv+0x94>)
 8006dd8:	f000 fb04 	bl	80073e4 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI20ptSB_Data,
								 QAS_LCD_Fonts_SegoeUI20ptSB_Height,
								 QAS_LCD_Fonts_SegoeUI20ptSB_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI20ptSB_CharGap);

	m_cFontMgr.add("SegoeUI12pt",
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f103 000c 	add.w	r0, r3, #12
 8006de2:	2302      	movs	r3, #2
 8006de4:	9302      	str	r3, [sp, #8]
 8006de6:	2303      	movs	r3, #3
 8006de8:	9301      	str	r3, [sp, #4]
 8006dea:	2311      	movs	r3, #17
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	4b08      	ldr	r3, [pc, #32]	; (8006e10 <_ZN7QAS_LCD8imp_initEv+0x98>)
 8006df0:	4a08      	ldr	r2, [pc, #32]	; (8006e14 <_ZN7QAS_LCD8imp_initEv+0x9c>)
 8006df2:	4909      	ldr	r1, [pc, #36]	; (8006e18 <_ZN7QAS_LCD8imp_initEv+0xa0>)
 8006df4:	f000 faf6 	bl	80073e4 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>
								 QAS_LCD_Fonts_SegoeUI12pt_Height,
								 QAS_LCD_Fonts_SegoeUI12pt_SpaceWidth,
								 QAS_LCD_Fonts_SegoeUI12pt_CharGap);

	//Return
	return QA_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	080097ec 	.word	0x080097ec
 8006e08:	08009674 	.word	0x08009674
 8006e0c:	08008ae4 	.word	0x08008ae4
 8006e10:	08008ef0 	.word	0x08008ef0
 8006e14:	08008d78 	.word	0x08008d78
 8006e18:	08008af4 	.word	0x08008af4

08006e1c <_ZN7QAS_LCD14imp_flipLayer0Ev>:
  //-------------------------------
  //QAS_LCD Rendering Setup Methods

//QAS_LCD::imp_flipLayer0
//QAS_LCD Rendering Setup Method
void QAS_LCD::imp_flipLayer0(void) {
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer0Buffers();
 8006e24:	f7ff ff7e 	bl	8006d24 <_ZN8QAD_LTDC17flipLayer0BuffersEv>
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <_ZN7QAS_LCD14imp_flipLayer1Ev>:


//QAS_LCD::imp_flipLayer1
//QAS_LCD Rendering Setup Method
void QAS_LCD::imp_flipLayer1(void) {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  QAD_LTDC::flipLayer1Buffers();
 8006e38:	f7ff ff7e 	bl	8006d38 <_ZN8QAD_LTDC17flipLayer1BuffersEv>
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx>:


//QAS_LCD::imp_setDrawBuffer
//QAS_LCD Rendering Setup Method
void QAS_LCD::imp_setDrawBuffer(QAD_LTDC_LayerIdx eLayer) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]

	switch (eLayer) {
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x18>
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d006      	beq.n	8006e68 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x24>
 8006e5a:	e00b      	b.n	8006e74 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (Layer0):
	  	m_pDrawBuffer = QAD_LTDC::getLayer0BackBuffer();
 8006e5c:	f7ff ff76 	bl	8006d4c <_ZN8QAD_LTDC19getLayer0BackBufferEv>
 8006e60:	4602      	mov	r2, r0
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	605a      	str	r2, [r3, #4]
	  	break;
 8006e66:	e005      	b.n	8006e74 <_ZN7QAS_LCD17imp_setDrawBufferE17QAD_LTDC_LayerIdx+0x30>
	  case (Layer1):
	  	m_pDrawBuffer = QAD_LTDC::getLayer1BackBuffer();
 8006e68:	f7ff ff7b 	bl	8006d62 <_ZN8QAD_LTDC19getLayer1BackBufferEv>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	605a      	str	r2, [r3, #4]
	  	break;
 8006e72:	bf00      	nop
	}
	m_cFontMgr.setDrawBuffer(m_pDrawBuffer);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f103 020c 	add.w	r2, r3, #12
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4610      	mov	r0, r2
 8006e82:	f000 fbbf 	bl	8007604 <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>
}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <_ZN7QAS_LCD16imp_setDrawColorEt>:


//QAS_LCD::imp_setDrawColor
//QAS_LCD Rendering Setup Method
void QAS_LCD::imp_setDrawColor(uint16_t uColor) {
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	460b      	mov	r3, r1
 8006e98:	807b      	strh	r3, [r7, #2]
  m_uDrawColor = uColor;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	887a      	ldrh	r2, [r7, #2]
 8006e9e:	811a      	strh	r2, [r3, #8]
  m_cFontMgr.setDrawColor(m_uDrawColor);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f103 020c 	add.w	r2, r3, #12
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	891b      	ldrh	r3, [r3, #8]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4610      	mov	r0, r2
 8006eae:	f000 fbb7 	bl	8007620 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>
}
 8006eb2:	bf00      	nop
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
	...

08006ebc <_ZN7QAS_LCD15imp_clearBufferEv>:
  //-------------------------
  //QAS_LCD Rendering Methods

//QAS_LCD::imp_clearBuffer
//QAS_LCD Rendering Method
void QAS_LCD::imp_clearBuffer(void) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4a0b      	ldr	r2, [pc, #44]	; (8006ef8 <_ZN7QAS_LCD15imp_clearBufferEv+0x3c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d80e      	bhi.n	8006eee <_ZN7QAS_LCD15imp_clearBufferEv+0x32>
  	m_pDrawBuffer->pixel[i] = m_uDrawColor;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	441a      	add	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3308      	adds	r3, #8
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f7ff fef5 	bl	8006cd0 <_ZN17QAT_PixelARGB4444aSERKt>
  for (uint32_t i=0; i<QAD_LTDC_PIXELCOUNT; i++)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	e7ec      	b.n	8006ec8 <_ZN7QAS_LCD15imp_clearBufferEv+0xc>
}
 8006eee:	bf00      	nop
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	0005dbff 	.word	0x0005dbff

08006efc <_ZN7QAS_LCD12imp_drawLineER11QAT_Vector2S1_>:
}


//QAS_LCD::imp_drawLine
//QAS_LCD Rendering Method
void QAS_LCD::imp_drawLine(QAT_Vector2& cStart, QAT_Vector2& cEnd) {
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  if (cStart.x == cEnd.x)
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	881a      	ldrh	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d105      	bne.n	8006f20 <_ZN7QAS_LCD12imp_drawLineER11QAT_Vector2S1_+0x24>
  	imp_drawVLine(cStart, cEnd); else
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	68b9      	ldr	r1, [r7, #8]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f853 	bl	8006fc4 <_ZN7QAS_LCD13imp_drawVLineER11QAT_Vector2S1_>
  if (cStart.y == cEnd.y)
  	imp_drawHLine(cStart, cEnd); else
    imp_drawALine(cStart, cEnd);
}
 8006f1e:	e010      	b.n	8006f42 <_ZN7QAS_LCD12imp_drawLineER11QAT_Vector2S1_+0x46>
  if (cStart.y == cEnd.y)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	885a      	ldrh	r2, [r3, #2]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	885b      	ldrh	r3, [r3, #2]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d105      	bne.n	8006f38 <_ZN7QAS_LCD12imp_drawLineER11QAT_Vector2S1_+0x3c>
  	imp_drawHLine(cStart, cEnd); else
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f80a 	bl	8006f4a <_ZN7QAS_LCD13imp_drawHLineER11QAT_Vector2S1_>
}
 8006f36:	e004      	b.n	8006f42 <_ZN7QAS_LCD12imp_drawLineER11QAT_Vector2S1_+0x46>
    imp_drawALine(cStart, cEnd);
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	68b9      	ldr	r1, [r7, #8]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f87d 	bl	800703c <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_>
}
 8006f42:	bf00      	nop
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <_ZN7QAS_LCD13imp_drawHLineER11QAT_Vector2S1_>:


//QAS_LCD::imp_drawHLine
//QAS_LCD Rendering Method
void QAS_LCD::imp_drawHLine(QAT_Vector2& cStart, QAT_Vector2& cEnd) {
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b088      	sub	sp, #32
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	881a      	ldrh	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d206      	bcs.n	8006f70 <_ZN7QAS_LCD13imp_drawHLineER11QAT_Vector2S1_+0x26>
  	xs = cStart.x;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	61fb      	str	r3, [r7, #28]
    xe = cEnd.x;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	e005      	b.n	8006f7c <_ZN7QAS_LCD13imp_drawHLineER11QAT_Vector2S1_+0x32>
  } else {
  	xs = cEnd.x;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	61fb      	str	r3, [r7, #28]
  	xe = cStart.x;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	61bb      	str	r3, [r7, #24]
  }

  uint32_t yofs = cStart.y * QAD_LTDC_WIDTH;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	885b      	ldrh	r3, [r3, #2]
 8006f80:	461a      	mov	r2, r3
 8006f82:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006f86:	fb03 f302 	mul.w	r3, r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
  for (uint32_t i=xs; i<(xe+1); i++) {
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	3301      	adds	r3, #1
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d210      	bcs.n	8006fbc <_ZN7QAS_LCD13imp_drawHLineER11QAT_Vector2S1_+0x72>
  	m_pDrawBuffer->pixel[i + yofs].pxl(m_uDrawColor);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	6979      	ldr	r1, [r7, #20]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	440b      	add	r3, r1
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	441a      	add	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3308      	adds	r3, #8
 8006fac:	4619      	mov	r1, r3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	f7ff fe9e 	bl	8006cf0 <_ZN17QAT_PixelARGB44443pxlERt>
  for (uint32_t i=xs; i<(xe+1); i++) {
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	e7e9      	b.n	8006f90 <_ZN7QAS_LCD13imp_drawHLineER11QAT_Vector2S1_+0x46>
  }
}
 8006fbc:	bf00      	nop
 8006fbe:	3720      	adds	r7, #32
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <_ZN7QAS_LCD13imp_drawVLineER11QAT_Vector2S1_>:


//QAS_LCD::imp_drawVLine
//QAS_LCD Rendering Method
void QAS_LCD::imp_drawVLine(QAT_Vector2& cStart, QAT_Vector2& cEnd) {
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	885a      	ldrh	r2, [r3, #2]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	885b      	ldrh	r3, [r3, #2]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d206      	bcs.n	8006fea <_ZN7QAS_LCD13imp_drawVLineER11QAT_Vector2S1_+0x26>
  	ys = cStart.y;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	885b      	ldrh	r3, [r3, #2]
 8006fe0:	61fb      	str	r3, [r7, #28]
  	ye = cEnd.y;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	885b      	ldrh	r3, [r3, #2]
 8006fe6:	61bb      	str	r3, [r7, #24]
 8006fe8:	e005      	b.n	8006ff6 <_ZN7QAS_LCD13imp_drawVLineER11QAT_Vector2S1_+0x32>
  } else {
  	ys = cEnd.y;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	885b      	ldrh	r3, [r3, #2]
 8006fee:	61fb      	str	r3, [r7, #28]
  	ye = cStart.y;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	885b      	ldrh	r3, [r3, #2]
 8006ff4:	61bb      	str	r3, [r7, #24]
  }

  uint32_t xofs = cStart.x;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	613b      	str	r3, [r7, #16]
  for (uint32_t i=ys; i<(ye+1); i++) {
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	3301      	adds	r3, #1
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	429a      	cmp	r2, r3
 8007008:	d214      	bcs.n	8007034 <_ZN7QAS_LCD13imp_drawVLineER11QAT_Vector2S1_+0x70>
  	m_pDrawBuffer->pixel[(i * QAD_LTDC_WIDTH) + xofs].pxl(m_uDrawColor);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007014:	fb01 f103 	mul.w	r1, r1, r3
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	440b      	add	r3, r1
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	441a      	add	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3308      	adds	r3, #8
 8007024:	4619      	mov	r1, r3
 8007026:	4610      	mov	r0, r2
 8007028:	f7ff fe62 	bl	8006cf0 <_ZN17QAT_PixelARGB44443pxlERt>
  for (uint32_t i=ys; i<(ye+1); i++) {
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	3301      	adds	r3, #1
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	e7e5      	b.n	8007000 <_ZN7QAS_LCD13imp_drawVLineER11QAT_Vector2S1_+0x3c>
  }
}
 8007034:	bf00      	nop
 8007036:	3720      	adds	r7, #32
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_>:


//QAS_LCD::imp_drawALine
//QAS_LCD Rendering Method
void QAS_LCD::imp_drawALine(QAT_Vector2& cStart, QAT_Vector2& cEnd) {
 800703c:	b580      	push	{r7, lr}
 800703e:	b08c      	sub	sp, #48	; 0x30
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  int16_t uDeltaX = QAS_LCD_ABS(cEnd.x-cStart.x);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	bfb8      	it	lt
 8007058:	425b      	neglt	r3, r3
 800705a:	833b      	strh	r3, [r7, #24]
  int16_t uDeltaY = QAS_LCD_ABS(cEnd.y-cStart.y);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	885b      	ldrh	r3, [r3, #2]
 8007060:	461a      	mov	r2, r3
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	885b      	ldrh	r3, [r3, #2]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	bfb8      	it	lt
 800706c:	425b      	neglt	r3, r3
 800706e:	82fb      	strh	r3, [r7, #22]
  int16_t uX = cStart.x;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int16_t uY = cStart.y;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	885b      	ldrh	r3, [r3, #2]
 800707a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t uXInc1;
  int16_t uXInc2;
  int16_t uYInc1;
  int16_t uYInc2;

  if (cEnd.x >= cStart.x) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	881a      	ldrh	r2, [r3, #0]
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d304      	bcc.n	8007092 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0x56>
    uXInc1 = 1;
 8007088:	2301      	movs	r3, #1
 800708a:	857b      	strh	r3, [r7, #42]	; 0x2a
    uXInc2 = 1;
 800708c:	2301      	movs	r3, #1
 800708e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007090:	e005      	b.n	800709e <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0x62>
  } else {
    uXInc1 = -1;
 8007092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007096:	857b      	strh	r3, [r7, #42]	; 0x2a
    uXInc2 = -1;
 8007098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800709c:	853b      	strh	r3, [r7, #40]	; 0x28
  }

  if (cEnd.y >= cStart.y) {
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	885a      	ldrh	r2, [r3, #2]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	885b      	ldrh	r3, [r3, #2]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d304      	bcc.n	80070b4 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0x78>
    uYInc1 = 1;
 80070aa:	2301      	movs	r3, #1
 80070ac:	84fb      	strh	r3, [r7, #38]	; 0x26
    uYInc2 = 1;
 80070ae:	2301      	movs	r3, #1
 80070b0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80070b2:	e005      	b.n	80070c0 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0x84>
  } else {
    uYInc1 = -1;
 80070b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070b8:	84fb      	strh	r3, [r7, #38]	; 0x26
    uYInc2 = -1;
 80070ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070be:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t uDenominator;
  int16_t uNumerator;
  int16_t uNumAdd;
  int16_t uNumPixels;

  if (uDeltaX >= uDeltaY) {
 80070c0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80070c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	db11      	blt.n	80070f0 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0xb4>
    uXInc1       = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	857b      	strh	r3, [r7, #42]	; 0x2a
    uYInc2       = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	84bb      	strh	r3, [r7, #36]	; 0x24
    uDenominator = uDeltaX;
 80070d4:	8b3b      	ldrh	r3, [r7, #24]
 80070d6:	847b      	strh	r3, [r7, #34]	; 0x22
    uNumerator   = uDeltaX / 2;
 80070d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	da00      	bge.n	80070e2 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0xa6>
 80070e0:	3301      	adds	r3, #1
 80070e2:	105b      	asrs	r3, r3, #1
 80070e4:	843b      	strh	r3, [r7, #32]
    uNumAdd      = uDeltaY;
 80070e6:	8afb      	ldrh	r3, [r7, #22]
 80070e8:	83fb      	strh	r3, [r7, #30]
    uNumPixels   = uDeltaX;
 80070ea:	8b3b      	ldrh	r3, [r7, #24]
 80070ec:	83bb      	strh	r3, [r7, #28]
 80070ee:	e010      	b.n	8007112 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0xd6>
  } else {
    uXInc2       = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	853b      	strh	r3, [r7, #40]	; 0x28
    uYInc1       = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	84fb      	strh	r3, [r7, #38]	; 0x26
    uDenominator = uDeltaY;
 80070f8:	8afb      	ldrh	r3, [r7, #22]
 80070fa:	847b      	strh	r3, [r7, #34]	; 0x22
    uNumerator   = uDeltaY / 2;
 80070fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007100:	2b00      	cmp	r3, #0
 8007102:	da00      	bge.n	8007106 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0xca>
 8007104:	3301      	adds	r3, #1
 8007106:	105b      	asrs	r3, r3, #1
 8007108:	843b      	strh	r3, [r7, #32]
    uNumAdd      = uDeltaX;
 800710a:	8b3b      	ldrh	r3, [r7, #24]
 800710c:	83fb      	strh	r3, [r7, #30]
    uNumPixels   = uDeltaY;
 800710e:	8afb      	ldrh	r3, [r7, #22]
 8007110:	83bb      	strh	r3, [r7, #28]
  }

  for (uint16_t i=0; i<uNumPixels; i++) {
 8007112:	2300      	movs	r3, #0
 8007114:	837b      	strh	r3, [r7, #26]
 8007116:	8b7a      	ldrh	r2, [r7, #26]
 8007118:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800711c:	429a      	cmp	r2, r3
 800711e:	da3a      	bge.n	8007196 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0x15a>
    m_pDrawBuffer->pixel[uX+(uY*QAD_LTDC_WIDTH)].pxl(m_uDrawColor);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8007128:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800712c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8007130:	fb00 f303 	mul.w	r3, r0, r3
 8007134:	440b      	add	r3, r1
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	441a      	add	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3308      	adds	r3, #8
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7ff fdd5 	bl	8006cf0 <_ZN17QAT_PixelARGB44443pxlERt>

    uNumerator += uNumAdd;
 8007146:	8c3a      	ldrh	r2, [r7, #32]
 8007148:	8bfb      	ldrh	r3, [r7, #30]
 800714a:	4413      	add	r3, r2
 800714c:	b29b      	uxth	r3, r3
 800714e:	843b      	strh	r3, [r7, #32]
    if (uNumerator >= uDenominator) {
 8007150:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007154:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007158:	429a      	cmp	r2, r3
 800715a:	db0e      	blt.n	800717a <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0x13e>
      uNumerator -= uDenominator;
 800715c:	8c3a      	ldrh	r2, [r7, #32]
 800715e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	b29b      	uxth	r3, r3
 8007164:	843b      	strh	r3, [r7, #32]
      uX += uXInc1;
 8007166:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007168:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800716a:	4413      	add	r3, r2
 800716c:	b29b      	uxth	r3, r3
 800716e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      uY += uYInc1;
 8007170:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007174:	4413      	add	r3, r2
 8007176:	b29b      	uxth	r3, r3
 8007178:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    uX += uXInc2;
 800717a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800717c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800717e:	4413      	add	r3, r2
 8007180:	b29b      	uxth	r3, r3
 8007182:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uY += uYInc2;
 8007184:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007188:	4413      	add	r3, r2
 800718a:	b29b      	uxth	r3, r3
 800718c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  for (uint16_t i=0; i<uNumPixels; i++) {
 800718e:	8b7b      	ldrh	r3, [r7, #26]
 8007190:	3301      	adds	r3, #1
 8007192:	837b      	strh	r3, [r7, #26]
 8007194:	e7bf      	b.n	8007116 <_ZN7QAS_LCD13imp_drawALineER11QAT_Vector2S1_+0xda>
  }
}
 8007196:	bf00      	nop
 8007198:	3730      	adds	r7, #48	; 0x30
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_>:

//QAS_LCD::imp_drawRect
//QAS_LCD Rendering Method
void QAS_LCD::imp_drawRect(QAT_Vector2& cStart, QAT_Vector2& cEnd) {
 800719e:	b580      	push	{r7, lr}
 80071a0:	b08c      	sub	sp, #48	; 0x30
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.y) {
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	881a      	ldrh	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	885b      	ldrh	r3, [r3, #2]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d206      	bcs.n	80071c4 <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0x26>
    xs = cStart.x;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80071c2:	e005      	b.n	80071d0 <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0x32>
  } else {
    xs = cEnd.y;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	885b      	ldrh	r3, [r3, #2]
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.y;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	885b      	ldrh	r3, [r3, #2]
 80071ce:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	885a      	ldrh	r2, [r3, #2]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	885b      	ldrh	r3, [r3, #2]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d206      	bcs.n	80071ea <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0x4c>
    ys = cStart.y;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	885b      	ldrh	r3, [r3, #2]
 80071e0:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	885b      	ldrh	r3, [r3, #2]
 80071e6:	623b      	str	r3, [r7, #32]
 80071e8:	e005      	b.n	80071f6 <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0x58>
  } else {
    ys = cEnd.y;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	885b      	ldrh	r3, [r3, #2]
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	885b      	ldrh	r3, [r3, #2]
 80071f4:	623b      	str	r3, [r7, #32]
  }

  //Top & Bottom
  uint32_t yt = ys*QAD_LTDC_WIDTH;
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80071fc:	fb02 f303 	mul.w	r3, r2, r3
 8007200:	617b      	str	r3, [r7, #20]
  uint32_t yb = ye*QAD_LTDC_WIDTH;
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007208:	fb02 f303 	mul.w	r3, r2, r3
 800720c:	613b      	str	r3, [r7, #16]
  for (uint32_t x=xs; x<(xe+1); x++) {
 800720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	3301      	adds	r3, #1
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	429a      	cmp	r2, r3
 800721a:	d21d      	bcs.n	8007258 <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0xba>
    m_pDrawBuffer->pixel[x+yt].pxl(m_uDrawColor);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	69f9      	ldr	r1, [r7, #28]
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	440b      	add	r3, r1
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	441a      	add	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3308      	adds	r3, #8
 800722e:	4619      	mov	r1, r3
 8007230:	4610      	mov	r0, r2
 8007232:	f7ff fd5d 	bl	8006cf0 <_ZN17QAT_PixelARGB44443pxlERt>
    m_pDrawBuffer->pixel[x+yb].pxl(m_uDrawColor);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	69f9      	ldr	r1, [r7, #28]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	440b      	add	r3, r1
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	441a      	add	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3308      	adds	r3, #8
 8007248:	4619      	mov	r1, r3
 800724a:	4610      	mov	r0, r2
 800724c:	f7ff fd50 	bl	8006cf0 <_ZN17QAT_PixelARGB44443pxlERt>
  for (uint32_t x=xs; x<(xe+1); x++) {
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	3301      	adds	r3, #1
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	e7dc      	b.n	8007212 <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0x74>
  }

  //Left & Right
  for (uint32_t y=(ys+1); y<ye; y++) {
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	3301      	adds	r3, #1
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	429a      	cmp	r2, r3
 8007264:	d225      	bcs.n	80072b2 <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0x114>
    m_pDrawBuffer->pixel[xs+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007270:	fb01 f103 	mul.w	r1, r1, r3
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	440b      	add	r3, r1
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	441a      	add	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3308      	adds	r3, #8
 8007280:	4619      	mov	r1, r3
 8007282:	4610      	mov	r0, r2
 8007284:	f7ff fd34 	bl	8006cf0 <_ZN17QAT_PixelARGB44443pxlERt>
    m_pDrawBuffer->pixel[xe+y*QAD_LTDC_WIDTH].pxl(m_uDrawColor);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007292:	fb01 f103 	mul.w	r1, r1, r3
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	440b      	add	r3, r1
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	441a      	add	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3308      	adds	r3, #8
 80072a2:	4619      	mov	r1, r3
 80072a4:	4610      	mov	r0, r2
 80072a6:	f7ff fd23 	bl	8006cf0 <_ZN17QAT_PixelARGB44443pxlERt>
  for (uint32_t y=(ys+1); y<ye; y++) {
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	3301      	adds	r3, #1
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	e7d5      	b.n	800725e <_ZN7QAS_LCD12imp_drawRectER11QAT_Vector2S1_+0xc0>
  }
}
 80072b2:	bf00      	nop
 80072b4:	3730      	adds	r7, #48	; 0x30
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_>:


//QAS_LCD::imp_drawRectFill
//QAS_LCD Rendering Method
void QAS_LCD::imp_drawRectFill(QAT_Vector2& cStart, QAT_Vector2& cEnd) {
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b08c      	sub	sp, #48	; 0x30
 80072be:	af00      	add	r7, sp, #0
 80072c0:	60f8      	str	r0, [r7, #12]
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	607a      	str	r2, [r7, #4]
  uint32_t xs;
  uint32_t xe;
  if (cStart.x < cEnd.x) {
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	881a      	ldrh	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d206      	bcs.n	80072e0 <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0x26>
    xs = cStart.x;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cEnd.x;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80072de:	e005      	b.n	80072ec <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0x32>
  } else {
    xs = cEnd.x;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    xe = cStart.x;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  uint32_t ys;
  uint32_t ye;
  if (cStart.y < cEnd.y) {
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	885a      	ldrh	r2, [r3, #2]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	885b      	ldrh	r3, [r3, #2]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d206      	bcs.n	8007306 <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0x4c>
    ys = cStart.y;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	885b      	ldrh	r3, [r3, #2]
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cEnd.y;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	885b      	ldrh	r3, [r3, #2]
 8007302:	623b      	str	r3, [r7, #32]
 8007304:	e005      	b.n	8007312 <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0x58>
  } else {
    ys = cEnd.y;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	885b      	ldrh	r3, [r3, #2]
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
    ye = cStart.y;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	885b      	ldrh	r3, [r3, #2]
 8007310:	623b      	str	r3, [r7, #32]
  }

  uint32_t yofs;
  for (uint32_t y=ys; y<(ye+1); y++) {
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	61fb      	str	r3, [r7, #28]
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	3301      	adds	r3, #1
 800731a:	69fa      	ldr	r2, [r7, #28]
 800731c:	429a      	cmp	r2, r3
 800731e:	d221      	bcs.n	8007364 <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0xaa>
    yofs = y*QAD_LTDC_WIDTH;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007326:	fb02 f303 	mul.w	r3, r2, r3
 800732a:	617b      	str	r3, [r7, #20]
    for (uint32_t x=xs; x<(xe+1); x++) {
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	61bb      	str	r3, [r7, #24]
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	3301      	adds	r3, #1
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	429a      	cmp	r2, r3
 8007338:	d210      	bcs.n	800735c <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0xa2>
      m_pDrawBuffer->pixel[x+yofs].pxl(m_uDrawColor);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	69b9      	ldr	r1, [r7, #24]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	440b      	add	r3, r1
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	441a      	add	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3308      	adds	r3, #8
 800734c:	4619      	mov	r1, r3
 800734e:	4610      	mov	r0, r2
 8007350:	f7ff fcce 	bl	8006cf0 <_ZN17QAT_PixelARGB44443pxlERt>
    for (uint32_t x=xs; x<(xe+1); x++) {
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	3301      	adds	r3, #1
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	e7e9      	b.n	8007330 <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0x76>
  for (uint32_t y=ys; y<(ye+1); y++) {
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	3301      	adds	r3, #1
 8007360:	61fb      	str	r3, [r7, #28]
 8007362:	e7d8      	b.n	8007316 <_ZN7QAS_LCD16imp_drawRectFillER11QAT_Vector2S1_+0x5c>
    }
  }
}
 8007364:	bf00      	nop
 8007366:	3730      	adds	r7, #48	; 0x30
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>:
	QAS_LCD_Font(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t& uHeight, uint16_t& uSpaceWidth, uint16_t& uCharGap) :
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	603b      	str	r3, [r7, #0]
		m_uCharGap(uCharGap) {
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	881a      	ldrh	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	851a      	strh	r2, [r3, #40]	; 0x28
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	881a      	ldrh	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	881a      	ldrh	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	859a      	strh	r2, [r3, #44]	; 0x2c
		m_pDesc = (QAS_LCD_FontDesc*)pDesc;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	621a      	str	r2, [r3, #32]
		m_pData = (uint8_t*)pData;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	625a      	str	r2, [r3, #36]	; 0x24
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 80073b6:	2300      	movs	r3, #0
 80073b8:	75fb      	strb	r3, [r7, #23]
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	2b1f      	cmp	r3, #31
 80073be:	d807      	bhi.n	80073d0 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x4c>
			m_cName[i] = 0;
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	2100      	movs	r1, #0
 80073c6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i=0; i<QAS_LCD_FONTNAME_LENGTH; i++) {
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	3301      	adds	r3, #1
 80073cc:	75fb      	strb	r3, [r7, #23]
 80073ce:	e7f4      	b.n	80073ba <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_+0x36>
		strcpy(m_cName, strName);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	68b9      	ldr	r1, [r7, #8]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 fa99 	bl	800890c <strcpy>
	}
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <_ZN15QAS_LCD_FontMgr3addEPKcPK16QAS_LCD_FontDescPKhttt>:
	//----------------------------------
	//QAS_LCD_FontMgr Management Methods

//QAS_LCD_FontMgr::add
//QAS_LCD_FontMgr Management Method
void QAS_LCD_FontMgr::add(const char* strName, const QAS_LCD_FontDesc* pDesc, const uint8_t* pData, uint16_t uHeight, uint16_t uSpaceWidth, uint16_t uCharGap) {
 80073e4:	b590      	push	{r4, r7, lr}
 80073e6:	b08b      	sub	sp, #44	; 0x2c
 80073e8:	af04      	add	r7, sp, #16
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]
  QAS_LCD_Font* cFont = new QAS_LCD_Font(strName, pDesc, pData, uHeight, uSpaceWidth, uCharGap);
 80073f2:	2030      	movs	r0, #48	; 0x30
 80073f4:	f001 f8dd 	bl	80085b2 <_Znwj>
 80073f8:	4603      	mov	r3, r0
 80073fa:	461c      	mov	r4, r3
 80073fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007400:	9302      	str	r3, [sp, #8]
 8007402:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	4620      	mov	r0, r4
 8007416:	f7ff ffb5 	bl	8007384 <_ZN12QAS_LCD_FontC1EPKcPK16QAS_LCD_FontDescPKhRtS7_S7_>
 800741a:	617c      	str	r4, [r7, #20]
  m_vFonts.push_back(cFont);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f107 0214 	add.w	r2, r7, #20
 8007422:	4611      	mov	r1, r2
 8007424:	4618      	mov	r0, r3
 8007426:	f000 f9fe 	bl	8007826 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>
}
 800742a:	bf00      	nop
 800742c:	371c      	adds	r7, #28
 800742e:	46bd      	mov	sp, r7
 8007430:	bd90      	pop	{r4, r7, pc}

08007432 <_ZN15QAS_LCD_FontMgr5clearEv>:
}


//QAS_LCD_FontMgr::clear
//QAS_LCD_FontMgr Management Method
void QAS_LCD_FontMgr::clear(void) {
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  m_vFonts.clear();
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4618      	mov	r0, r3
 800743e:	f7fa f8a0 	bl	8001582 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5clearEv>
}
 8007442:	bf00      	nop
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <_ZN15QAS_LCD_FontMgr14setFontByIndexEh>:
}


//QAS_LCD_FontMgr::setFontByIndex
//QAS_LCD_FontMgr Management Method
void QAS_LCD_FontMgr::setFontByIndex(uint8_t uIdx) {
 800744a:	b590      	push	{r4, r7, lr}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	460b      	mov	r3, r1
 8007454:	70fb      	strb	r3, [r7, #3]
  if (uIdx >= m_vFonts.size()) {
 8007456:	78fc      	ldrb	r4, [r7, #3]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4618      	mov	r0, r3
 800745c:	f7fa f89f 	bl	800159e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007460:	4603      	mov	r3, r0
 8007462:	429c      	cmp	r4, r3
 8007464:	bf2c      	ite	cs
 8007466:	2301      	movcs	r3, #1
 8007468:	2300      	movcc	r3, #0
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d006      	beq.n	800747e <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x34>
  	m_iCurrentIdx = -1;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	22ff      	movs	r2, #255	; 0xff
 8007474:	731a      	strb	r2, [r3, #12]
  	m_pCurrent    = NULL;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	611a      	str	r2, [r3, #16]
  	return;
 800747c:	e00d      	b.n	800749a <_ZN15QAS_LCD_FontMgr14setFontByIndexEh+0x50>
  }

  m_iCurrentIdx = uIdx;
 800747e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	731a      	strb	r2, [r3, #12]
  m_pCurrent    = m_vFonts[uIdx];
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	78fa      	ldrb	r2, [r7, #3]
 800748a:	4611      	mov	r1, r2
 800748c:	4618      	mov	r0, r3
 800748e:	f7fa f896 	bl	80015be <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EEixEj>
 8007492:	4603      	mov	r3, r0
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	611a      	str	r2, [r3, #16]
}
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	bd90      	pop	{r4, r7, pc}

080074a0 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>:
}


//QAS_LCD_FontMgr::getSpaceWidth
//QAS_LCD_FontMgr Data Methods
uint8_t QAS_LCD_FontMgr::getSpaceWidth(void) const {
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	da01      	bge.n	80074b6 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x16>
		return 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e003      	b.n	80074be <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv+0x1e>
	return m_pCurrent->m_uSpaceWidth;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074bc:	b2db      	uxtb	r3, r3
}
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <_ZNK15QAS_LCD_FontMgr10getCharGapEv>:


//QAS_LCD_FontMgr::getCharGap
//QAS_LCD_FontMgr Data Methods
uint8_t QAS_LCD_FontMgr::getCharGap(void) const {
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
	if (m_iCurrentIdx < 0)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	da01      	bge.n	80074e0 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x16>
		return 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	e003      	b.n	80074e8 <_ZNK15QAS_LCD_FontMgr10getCharGapEv+0x1e>
	return m_pCurrent->m_uCharGap;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074e6:	b2db      	uxtb	r3, r3
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <_ZN15QAS_LCD_FontMgr12getCharWidthEc>:


//QAS_LCD_FontMgr::getCharWidth
//QAS_LCD_FontMgr Data Methods
uint16_t QAS_LCD_FontMgr::getCharWidth(char ch) {
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  if (m_iCurrentIdx < 0)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	da01      	bge.n	800750e <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x1a>
    return 0;
 800750a:	2300      	movs	r3, #0
 800750c:	e01a      	b.n	8007544 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x50>
  uint16_t uWidth = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	81fb      	strh	r3, [r7, #14]
  if (ch == 32) {
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	2b20      	cmp	r3, #32
 8007516:	d104      	bne.n	8007522 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x2e>
    uWidth = m_pCurrent->m_uSpaceWidth;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751e:	81fb      	strh	r3, [r7, #14]
 8007520:	e00f      	b.n	8007542 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
  } else if ((ch >= 33) && (ch <= 126)) {
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	2b20      	cmp	r3, #32
 8007526:	d90c      	bls.n	8007542 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	2b7e      	cmp	r3, #126	; 0x7e
 800752c:	d809      	bhi.n	8007542 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x4e>
    uWidth = m_pCurrent->m_pDesc[ch-33].uWidth;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	6a1a      	ldr	r2, [r3, #32]
 8007534:	78f9      	ldrb	r1, [r7, #3]
 8007536:	4b06      	ldr	r3, [pc, #24]	; (8007550 <_ZN15QAS_LCD_FontMgr12getCharWidthEc+0x5c>)
 8007538:	440b      	add	r3, r1
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	81fb      	strh	r3, [r7, #14]
  }
  return uWidth;
 8007542:	89fb      	ldrh	r3, [r7, #14]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	3fffffdf 	.word	0x3fffffdf

08007554 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>:


//QAS_LCD_FontMgr::getStringWidth
//QAS_LCD_FontMgr Data Methods
uint16_t QAS_LCD_FontMgr::getStringWidth(const char* str) {
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint16_t uWidth = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	81fb      	strh	r3, [r7, #14]
  uint16_t uLength = strlen(str);
 8007562:	6838      	ldr	r0, [r7, #0]
 8007564:	f7f8 fe68 	bl	8000238 <strlen>
 8007568:	4603      	mov	r3, r0
 800756a:	817b      	strh	r3, [r7, #10]
  uint8_t  uChar;

  if ((uLength == 0) || (m_iCurrentIdx < 0))
 800756c:	897b      	ldrh	r3, [r7, #10]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d004      	beq.n	800757c <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x28>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	da01      	bge.n	8007580 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x2c>
    return uWidth;
 800757c:	89fb      	ldrh	r3, [r7, #14]
 800757e:	e03b      	b.n	80075f8 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xa4>

  for (uint8_t i=0; i<uLength; i++) {
 8007580:	2300      	movs	r3, #0
 8007582:	737b      	strb	r3, [r7, #13]
 8007584:	7b7a      	ldrb	r2, [r7, #13]
 8007586:	897b      	ldrh	r3, [r7, #10]
 8007588:	429a      	cmp	r2, r3
 800758a:	da2e      	bge.n	80075ea <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x96>
    uChar = (uint8_t)str[i];
 800758c:	7b7b      	ldrb	r3, [r7, #13]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	4413      	add	r3, r2
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	727b      	strb	r3, [r7, #9]
    if (uChar == 32) {
 8007596:	7a7b      	ldrb	r3, [r7, #9]
 8007598:	2b20      	cmp	r3, #32
 800759a:	d10b      	bne.n	80075b4 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x60>
      uWidth += (m_pCurrent->m_uSpaceWidth + m_pCurrent->m_uCharGap);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075a8:	4413      	add	r3, r2
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	89fb      	ldrh	r3, [r7, #14]
 80075ae:	4413      	add	r3, r2
 80075b0:	81fb      	strh	r3, [r7, #14]
 80075b2:	e016      	b.n	80075e2 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
    } else if ((uChar >= 33) && (uChar <= 126)) {
 80075b4:	7a7b      	ldrb	r3, [r7, #9]
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	d913      	bls.n	80075e2 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
 80075ba:	7a7b      	ldrb	r3, [r7, #9]
 80075bc:	2b7e      	cmp	r3, #126	; 0x7e
 80075be:	d810      	bhi.n	80075e2 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x8e>
      uWidth += (m_pCurrent->m_pDesc[uChar-33].uWidth + m_pCurrent->m_uCharGap);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	6a1a      	ldr	r2, [r3, #32]
 80075c6:	7a79      	ldrb	r1, [r7, #9]
 80075c8:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0xac>)
 80075ca:	440b      	add	r3, r1
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	881a      	ldrh	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075d8:	4413      	add	r3, r2
 80075da:	b29a      	uxth	r2, r3
 80075dc:	89fb      	ldrh	r3, [r7, #14]
 80075de:	4413      	add	r3, r2
 80075e0:	81fb      	strh	r3, [r7, #14]
  for (uint8_t i=0; i<uLength; i++) {
 80075e2:	7b7b      	ldrb	r3, [r7, #13]
 80075e4:	3301      	adds	r3, #1
 80075e6:	737b      	strb	r3, [r7, #13]
 80075e8:	e7cc      	b.n	8007584 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc+0x30>
    }
  }
  uWidth -= m_pCurrent->m_uCharGap;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075f0:	89fa      	ldrh	r2, [r7, #14]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	81fb      	strh	r3, [r7, #14]
  return uWidth;
 80075f6:	89fb      	ldrh	r3, [r7, #14]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	3fffffdf 	.word	0x3fffffdf

08007604 <_ZN15QAS_LCD_FontMgr13setDrawBufferEP15QAD_LTDC_Buffer>:
	//---------------------------------
	//QAS_LCD_FontMgr Rendering Methods

//QAS_LCD_FontMgr::setDrawBuffer
//QAS_LCD_FontMgr Data Methods
void QAS_LCD_FontMgr::setDrawBuffer(QAD_LTDC_Buffer* pBuffer) {
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  m_pBuffer = pBuffer;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	615a      	str	r2, [r3, #20]
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <_ZN15QAS_LCD_FontMgr12setDrawColorEt>:


//QAS_LCD_FontMgr::setDrawColor
//QAS_LCD_FontMgr Data Methods
void QAS_LCD_FontMgr::setDrawColor(uint16_t uColor) {
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	460b      	mov	r3, r1
 800762a:	807b      	strh	r3, [r7, #2]
  m_uColor = uColor;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	887a      	ldrh	r2, [r7, #2]
 8007630:	831a      	strh	r2, [r3, #24]
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc>:
}


//QAS_LCD_FontMgr::drawStrC
//QAS_LCD_FontMgr Data Methods
void QAS_LCD_FontMgr::drawStrC(QAT_Vector2 cPos, const char* str) {
 800763e:	b590      	push	{r4, r7, lr}
 8007640:	b089      	sub	sp, #36	; 0x24
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
  if ((m_pBuffer == NULL) || (m_iCurrentIdx < 0))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d067      	beq.n	8007722 <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0xe4>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	db62      	blt.n	8007722 <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0xe4>
    return;

  uint8_t uLen = strlen(str);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7f8 fdeb 	bl	8000238 <strlen>
 8007662:	4603      	mov	r3, r0
 8007664:	77bb      	strb	r3, [r7, #30]
  if (uLen < 0) return;

  QAT_Vector2 cDrawPos = cPos;
 8007666:	f107 0314 	add.w	r3, r7, #20
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	4618      	mov	r0, r3
 800766e:	f7f9 fb58 	bl	8000d22 <_ZN11QAT_Vector2C1ERKS_>
  cDrawPos.x -= (getStringWidth(str) / 2);
 8007672:	6879      	ldr	r1, [r7, #4]
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff ff6d 	bl	8007554 <_ZN15QAS_LCD_FontMgr14getStringWidthEPKc>
 800767a:	4603      	mov	r3, r0
 800767c:	085b      	lsrs	r3, r3, #1
 800767e:	b29b      	uxth	r3, r3
 8007680:	8aba      	ldrh	r2, [r7, #20]
 8007682:	b29b      	uxth	r3, r3
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	b29b      	uxth	r3, r3
 8007688:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 800768a:	2300      	movs	r3, #0
 800768c:	77fb      	strb	r3, [r7, #31]
 800768e:	7ffa      	ldrb	r2, [r7, #31]
 8007690:	7fbb      	ldrb	r3, [r7, #30]
 8007692:	429a      	cmp	r2, r3
 8007694:	d246      	bcs.n	8007724 <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0xe6>
  	if ((str[i] >= 33) && (str[i] <= 126)) {
 8007696:	7ffb      	ldrb	r3, [r7, #31]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	4413      	add	r3, r2
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d92c      	bls.n	80076fc <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0xbe>
 80076a2:	7ffb      	ldrb	r3, [r7, #31]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	4413      	add	r3, r2
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b7e      	cmp	r3, #126	; 0x7e
 80076ac:	d826      	bhi.n	80076fc <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0xbe>
      drawCharP(cDrawPos, str[i]);
 80076ae:	f107 0214 	add.w	r2, r7, #20
 80076b2:	f107 0318 	add.w	r3, r7, #24
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7f9 fb32 	bl	8000d22 <_ZN11QAT_Vector2C1ERKS_>
 80076be:	7ffb      	ldrb	r3, [r7, #31]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	4413      	add	r3, r2
 80076c4:	781a      	ldrb	r2, [r3, #0]
 80076c6:	f107 0318 	add.w	r3, r7, #24
 80076ca:	4619      	mov	r1, r3
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 f82c 	bl	800772a <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c>
      cDrawPos.x += getCharWidth(str[i]) + getCharGap();
 80076d2:	7ffb      	ldrb	r3, [r7, #31]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	4413      	add	r3, r2
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	4619      	mov	r1, r3
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f7ff ff09 	bl	80074f4 <_ZN15QAS_LCD_FontMgr12getCharWidthEc>
 80076e2:	4603      	mov	r3, r0
 80076e4:	461c      	mov	r4, r3
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f7ff feef 	bl	80074ca <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 80076ec:	4603      	mov	r3, r0
 80076ee:	4423      	add	r3, r4
 80076f0:	8aba      	ldrh	r2, [r7, #20]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	4413      	add	r3, r2
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	82bb      	strh	r3, [r7, #20]
 80076fa:	e00e      	b.n	800771a <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0xdc>
  	} else {
  		cDrawPos.x += getSpaceWidth() + getCharGap();
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f7ff fecf 	bl	80074a0 <_ZNK15QAS_LCD_FontMgr13getSpaceWidthEv>
 8007702:	4603      	mov	r3, r0
 8007704:	461c      	mov	r4, r3
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7ff fedf 	bl	80074ca <_ZNK15QAS_LCD_FontMgr10getCharGapEv>
 800770c:	4603      	mov	r3, r0
 800770e:	4423      	add	r3, r4
 8007710:	8aba      	ldrh	r2, [r7, #20]
 8007712:	b29b      	uxth	r3, r3
 8007714:	4413      	add	r3, r2
 8007716:	b29b      	uxth	r3, r3
 8007718:	82bb      	strh	r3, [r7, #20]
  for (uint8_t i=0; i<uLen; i++) {
 800771a:	7ffb      	ldrb	r3, [r7, #31]
 800771c:	3301      	adds	r3, #1
 800771e:	77fb      	strb	r3, [r7, #31]
 8007720:	e7b5      	b.n	800768e <_ZN15QAS_LCD_FontMgr8drawStrCE11QAT_Vector2PKc+0x50>
    return;
 8007722:	bf00      	nop
  	}
  }
}
 8007724:	3724      	adds	r7, #36	; 0x24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd90      	pop	{r4, r7, pc}

0800772a <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c>:
  //-----------------------------------------
  //QAS_LCD_FontMgr Private Rendering Methods

//QAS_LCD_FontMgr::drawCharP
//QAS_LCD_FontMgr Private Rendering Method
void QAS_LCD_FontMgr::drawCharP(QAT_Vector2 cPos, char ch) {
 800772a:	b580      	push	{r7, lr}
 800772c:	b08a      	sub	sp, #40	; 0x28
 800772e:	af00      	add	r7, sp, #0
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	60b9      	str	r1, [r7, #8]
 8007734:	4613      	mov	r3, r2
 8007736:	71fb      	strb	r3, [r7, #7]
  uint16_t uLetter = (uint8_t)ch - 33;
 8007738:	79fb      	ldrb	r3, [r7, #7]
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b21      	subs	r3, #33	; 0x21
 800773e:	83bb      	strh	r3, [r7, #28]
  uint16_t uWidth  = m_pCurrent->m_pDesc[uLetter].uWidth;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	6a1a      	ldr	r2, [r3, #32]
 8007746:	8bbb      	ldrh	r3, [r7, #28]
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	837b      	strh	r3, [r7, #26]
  uint32_t uOffset = m_pCurrent->m_pDesc[uLetter].uOffset;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	6a1a      	ldr	r2, [r3, #32]
 8007756:	8bbb      	ldrh	r3, [r7, #28]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	885b      	ldrh	r3, [r3, #2]
 800775e:	627b      	str	r3, [r7, #36]	; 0x24

  uint8_t uLine;
  uint8_t uLineInc;
  uint32_t uCur;

  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 8007760:	2300      	movs	r3, #0
 8007762:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007766:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	6912      	ldr	r2, [r2, #16]
 800776e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007770:	4293      	cmp	r3, r2
 8007772:	da54      	bge.n	800781e <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0xf4>
    uLineInc = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uCur = cPos.x+((cPos.y+uHeight)*QAD_LTDC_WIDTH);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	4619      	mov	r1, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	885b      	ldrh	r3, [r3, #2]
 8007784:	461a      	mov	r2, r3
 8007786:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800778a:	4413      	add	r3, r2
 800778c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007790:	fb02 f303 	mul.w	r3, r2, r3
 8007794:	440b      	add	r3, r1
 8007796:	617b      	str	r3, [r7, #20]
    for (uint16_t i=0; i<uWidth; i++) {
 8007798:	2300      	movs	r3, #0
 800779a:	83fb      	strh	r3, [r7, #30]
 800779c:	8bfa      	ldrh	r2, [r7, #30]
 800779e:	8b7b      	ldrh	r3, [r7, #26]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d236      	bcs.n	8007812 <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0xe8>
      if (uLineInc == 0) {
 80077a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10a      	bne.n	80077c2 <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0x98>
        uLine = m_pCurrent->m_pData[uOffset];
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	4413      	add	r3, r2
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uOffset++;
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	3301      	adds	r3, #1
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (uLine & 0x01)
 80077c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00c      	beq.n	80077e8 <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0xbe>
        m_pBuffer->pixel[uCur+i] = m_uColor;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	695a      	ldr	r2, [r3, #20]
 80077d2:	8bf9      	ldrh	r1, [r7, #30]
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	440b      	add	r3, r1
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	441a      	add	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3318      	adds	r3, #24
 80077e0:	4619      	mov	r1, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	f7ff fa74 	bl	8006cd0 <_ZN17QAT_PixelARGB4444aSERKt>
      uLine = uLine >> 1;
 80077e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ec:	105b      	asrs	r3, r3, #1
 80077ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      uLineInc++;
 80077f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80077f6:	3301      	adds	r3, #1
 80077f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (uLineInc > 7)
 80077fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007800:	2b07      	cmp	r3, #7
 8007802:	d902      	bls.n	800780a <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0xe0>
        uLineInc = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    for (uint16_t i=0; i<uWidth; i++) {
 800780a:	8bfb      	ldrh	r3, [r7, #30]
 800780c:	3301      	adds	r3, #1
 800780e:	83fb      	strh	r3, [r7, #30]
 8007810:	e7c4      	b.n	800779c <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0x72>
  for (uint8_t uHeight=0; uHeight<m_pCurrent->m_uHeight; uHeight++) {
 8007812:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007816:	3301      	adds	r3, #1
 8007818:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800781c:	e7a3      	b.n	8007766 <_ZN15QAS_LCD_FontMgr9drawCharPE11QAT_Vector2c+0x3c>
    }
  }
}
 800781e:	bf00      	nop
 8007820:	3728      	adds	r7, #40	; 0x28
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	429a      	cmp	r2, r3
 800783a:	d00c      	beq.n	8007856 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	4619      	mov	r1, r3
 8007846:	f000 f823 	bl	8007890 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	1d1a      	adds	r2, r3, #4
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	605a      	str	r2, [r3, #4]
      }
 8007854:	e008      	b.n	8007868 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f82d 	bl	80078b6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>
 800785c:	4603      	mov	r3, r0
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f84e 	bl	8007904 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	f107 030c 	add.w	r3, r7, #12
 800787e:	4611      	mov	r1, r2
 8007880:	4618      	mov	r0, r3
 8007882:	f000 f8fb 	bl	8007a7c <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f908 	bl	8007ab2 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 80078a2:	4603      	mov	r3, r0
 80078a4:	461a      	mov	r2, r3
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f90d 	bl	8007ac8 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 80078ae:	bf00      	nop
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	1d1a      	adds	r2, r3, #4
 80078c2:	f107 030c 	add.w	r3, r7, #12
 80078c6:	4611      	mov	r1, r2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 f8d7 	bl	8007a7c <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 f805 	bl	80078ee <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80078e4:	4603      	mov	r3, r0
      }
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80078f6:	2301      	movs	r3, #1
      }
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8007904:	b5b0      	push	{r4, r5, r7, lr}
 8007906:	b08c      	sub	sp, #48	; 0x30
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8007910:	4a59      	ldr	r2, [pc, #356]	; (8007a78 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8007912:	2101      	movs	r1, #1
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f8ed 	bl	8007af4 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>
 800791a:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f7ff ffa1 	bl	8007870 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE5beginEv>
 800792e:	4603      	mov	r3, r0
 8007930:	617b      	str	r3, [r7, #20]
 8007932:	f107 0214 	add.w	r2, r7, #20
 8007936:	f107 0308 	add.w	r3, r7, #8
 800793a:	4611      	mov	r1, r2
 800793c:	4618      	mov	r0, r3
 800793e:	f000 f920 	bl	8007b82 <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8007942:	4603      	mov	r3, r0
 8007944:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800794a:	4618      	mov	r0, r3
 800794c:	f000 f92e 	bl	8007bac <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>
 8007950:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8007956:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	18d5      	adds	r5, r2, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f8a6 	bl	8007ab2 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8007966:	4603      	mov	r3, r0
 8007968:	461a      	mov	r2, r3
 800796a:	4629      	mov	r1, r5
 800796c:	4620      	mov	r0, r4
 800796e:	f7ff ff8f 	bl	8007890 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8007972:	2300      	movs	r3, #0
 8007974:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8007976:	f7ff ffaf 	bl	80078d8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d027      	beq.n	80079d0 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007980:	f107 0308 	add.w	r3, r7, #8
 8007984:	4618      	mov	r0, r3
 8007986:	f000 f889 	bl	8007a9c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 800798a:	4603      	mov	r3, r0
 800798c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4618      	mov	r0, r3
 8007992:	f7f9 fecc 	bl	800172e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007996:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	4621      	mov	r1, r4
 800799c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800799e:	f000 f919 	bl	8007bd4 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80079a2:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	3304      	adds	r3, #4
 80079a8:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80079aa:	f107 0308 	add.w	r3, r7, #8
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 f874 	bl	8007a9c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 80079b4:	4603      	mov	r3, r0
 80079b6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7f9 feb7 	bl	800172e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 80079c0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80079c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079c4:	6a39      	ldr	r1, [r7, #32]
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 f904 	bl	8007bd4 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80079cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80079ce:	e026      	b.n	8007a1e <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80079d0:	f107 0308 	add.w	r3, r7, #8
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 f861 	bl	8007a9c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 80079da:	4603      	mov	r3, r0
 80079dc:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7f9 fea4 	bl	800172e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 80079e6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	4621      	mov	r1, r4
 80079ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079ee:	f000 f905 	bl	8007bfc <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 80079f2:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	3304      	adds	r3, #4
 80079f8:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80079fa:	f107 0308 	add.w	r3, r7, #8
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 f84c 	bl	8007a9c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007a04:	4603      	mov	r3, r0
 8007a06:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7f9 fe8f 	bl	800172e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007a10:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8007a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a14:	6a39      	ldr	r1, [r7, #32]
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 f8f0 	bl	8007bfc <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007a1c:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8007a1e:	f7ff ff5b 	bl	80078d8 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE15_S_use_relocateEv>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f083 0301 	eor.w	r3, r3, #1
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d009      	beq.n	8007a42 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7f9 fe7c 	bl	800172e <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007a36:	4603      	mov	r3, r0
 8007a38:	461a      	mov	r2, r3
 8007a3a:	6a39      	ldr	r1, [r7, #32]
 8007a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a3e:	f7f9 fe81 	bl	8001744 <_ZSt8_DestroyIPP12QAS_LCD_FontS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8007a42:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8007a4e:	461a      	mov	r2, r3
 8007a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a52:	f7f9 fe59 	bl	8001708 <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a60:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	441a      	add	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	609a      	str	r2, [r3, #8]
    }
 8007a6e:	bf00      	nop
 8007a70:	3730      	adds	r7, #48	; 0x30
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bdb0      	pop	{r4, r5, r7, pc}
 8007a76:	bf00      	nop
 8007a78:	08008b00 	.word	0x08008b00

08007a7c <_ZN9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4618      	mov	r0, r3
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8007ac8:	b590      	push	{r4, r7, lr}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff ffec 	bl	8007ab2 <_ZSt7forwardIRKP12QAS_LCD_FontEOT_RNSt16remove_referenceIS4_E4typeE>
 8007ada:	4603      	mov	r3, r0
 8007adc:	681c      	ldr	r4, [r3, #0]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	2004      	movs	r0, #4
 8007ae4:	f7ff fc42 	bl	800736c <_ZnwjPv>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	601c      	str	r4, [r3, #0]
 8007aec:	bf00      	nop
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd90      	pop	{r4, r7, pc}

08007af4 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8007af4:	b590      	push	{r4, r7, lr}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f894 	bl	8007c2e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007b06:	4604      	mov	r4, r0
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f7f9 fd48 	bl	800159e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	1ae2      	subs	r2, r4, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	bf34      	ite	cc
 8007b18:	2301      	movcc	r3, #1
 8007b1a:	2300      	movcs	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d002      	beq.n	8007b28 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fd5e 	bl	80085e4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7f9 fd38 	bl	800159e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007b2e:	4604      	mov	r4, r0
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f7f9 fd34 	bl	800159e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007b36:	4603      	mov	r3, r0
 8007b38:	613b      	str	r3, [r7, #16]
 8007b3a:	f107 0208 	add.w	r2, r7, #8
 8007b3e:	f107 0310 	add.w	r3, r7, #16
 8007b42:	4611      	mov	r1, r2
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 f883 	bl	8007c50 <_ZSt3maxIjERKT_S2_S2_>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4423      	add	r3, r4
 8007b50:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7f9 fd23 	bl	800159e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE4sizeEv>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d306      	bcc.n	8007b6e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f864 	bl	8007c2e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007b66:	4602      	mov	r2, r0
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d904      	bls.n	8007b78 <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x84>
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 f85d 	bl	8007c2e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>
 8007b74:	4603      	mov	r3, r0
 8007b76:	e000      	b.n	8007b7a <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE12_M_check_lenEjPKc+0x86>
 8007b78:	697b      	ldr	r3, [r7, #20]
      }
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	371c      	adds	r7, #28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd90      	pop	{r4, r7, pc}

08007b82 <_ZN9__gnu_cxxmiIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007b82:	b590      	push	{r4, r7, lr}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff ff85 	bl	8007a9c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007b92:	4603      	mov	r3, r0
 8007b94:	681c      	ldr	r4, [r3, #0]
 8007b96:	6838      	ldr	r0, [r7, #0]
 8007b98:	f7ff ff80 	bl	8007a9c <_ZNK9__gnu_cxx17__normal_iteratorIPP12QAS_LCD_FontSt6vectorIS2_SaIS2_EEE4baseEv>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	1ae3      	subs	r3, r4, r3
 8007ba2:	109b      	asrs	r3, r3, #2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd90      	pop	{r4, r7, pc}

08007bac <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d006      	beq.n	8007bca <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x1e>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 f859 	bl	8007c78 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	e000      	b.n	8007bcc <_ZNSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE11_M_allocateEj+0x20>
 8007bca:	2300      	movs	r3, #0
      }
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8007bd4:	b590      	push	{r4, r7, lr}
 8007bd6:	b089      	sub	sp, #36	; 0x24
 8007bd8:	af02      	add	r7, sp, #8
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8007be2:	f88d 4000 	strb.w	r4, [sp]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f852 	bl	8007c96 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8007bf2:	4603      	mov	r3, r0
      }
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	371c      	adds	r7, #28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd90      	pop	{r4, r7, pc}

08007bfc <_ZSt34__uninitialized_move_if_noexcept_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 f855 	bl	8007cba <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 8007c10:	4604      	mov	r4, r0
 8007c12:	68b8      	ldr	r0, [r7, #8]
 8007c14:	f000 f851 	bl	8007cba <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>
 8007c18:	4601      	mov	r1, r0
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 f85a 	bl	8007cd8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8007c24:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8007c26:	4618      	mov	r0, r3
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd90      	pop	{r4, r7, pc}

08007c2e <_ZNKSt6vectorIP12QAS_LCD_FontSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 f878 	bl	8007d2e <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 f85a 	bl	8007cfa <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>
 8007c46:	4603      	mov	r3, r0
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d201      	bcs.n	8007c6a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	e000      	b.n	8007c6c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8007c6a:	687b      	ldr	r3, [r7, #4]
    }
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007c82:	2200      	movs	r2, #0
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f85c 	bl	8007d44 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	607a      	str	r2, [r7, #4]
 8007ca2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	68b9      	ldr	r1, [r7, #8]
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 f868 	bl	8007d80 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007cb0:	4603      	mov	r3, r0
      }
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <_ZSt32__make_move_if_noexcept_iteratorIP12QAS_LCD_FontSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8007cc2:	f107 030c 	add.w	r3, r7, #12
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 f876 	bl	8007dba <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12QAS_LCD_FontES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 f874 	bl	8007dd8 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <_ZNSt6vectorIP12QAS_LCD_FontSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8007d02:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007d06:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f889 	bl	8007e20 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007d12:	f107 0208 	add.w	r2, r7, #8
 8007d16:	f107 030c 	add.w	r3, r7, #12
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f000 f88b 	bl	8007e38 <_ZSt3minIjERKT_S2_S2_>
 8007d22:	4603      	mov	r3, r0
 8007d24:	681b      	ldr	r3, [r3, #0]
      }
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <_ZNKSt12_Vector_baseIP12QAS_LCD_FontSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f885 	bl	8007e60 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 8007d56:	4602      	mov	r2, r0
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	bf8c      	ite	hi
 8007d5e:	2301      	movhi	r3, #1
 8007d60:	2300      	movls	r3, #0
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <_ZN9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007d68:	f000 fc39 	bl	80085de <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 fc1e 	bl	80085b2 <_Znwj>
 8007d76:	4603      	mov	r3, r0
      }
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <_ZSt12__relocate_aIPP12QAS_LCD_FontS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007d80:	b5b0      	push	{r4, r5, r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 f872 	bl	8007e78 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007d94:	4604      	mov	r4, r0
 8007d96:	68b8      	ldr	r0, [r7, #8]
 8007d98:	f000 f86e 	bl	8007e78 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f86a 	bl	8007e78 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007da4:	4602      	mov	r2, r0
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	4629      	mov	r1, r5
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 f86f 	bl	8007e8e <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8007db0:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bdb0      	pop	{r4, r5, r7, pc}

08007dba <_ZNSt13move_iteratorIPP12QAS_LCD_FontEC1ES2_>:
      move_iterator(iterator_type __i)
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <_ZSt18uninitialized_copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007de4:	2301      	movs	r3, #1
 8007de6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 f86c 	bl	8007eca <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>
 8007df2:	4603      	mov	r3, r0
    }
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8007e08:	2301      	movs	r3, #1
 8007e0a:	75fb      	strb	r3, [r7, #23]
			     && __is_pointer<_II>::__value
			     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
			      _Category>::__copy_m(__first, __last, __result);
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	68b9      	ldr	r1, [r7, #8]
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 f86a 	bl	8007eea <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>
 8007e16:	4603      	mov	r3, r0
    }
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <_ZNSt16allocator_traitsISaIP12QAS_LCD_FontEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f819 	bl	8007e60 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	4618      	mov	r0, r3
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d201      	bcs.n	8007e52 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	e000      	b.n	8007e54 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007e52:	687b      	ldr	r3, [r7, #4]
    }
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <_ZNK9__gnu_cxx13new_allocatorIP12QAS_LCD_FontE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007e68:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>:
    __niter_base(_Iterator __it)
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4618      	mov	r0, r3
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b086      	sub	sp, #24
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	607a      	str	r2, [r7, #4]
 8007e9a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	109b      	asrs	r3, r3, #2
 8007ea4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dd06      	ble.n	8007eba <_ZSt14__relocate_a_1IP12QAS_LCD_FontS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fc09 	bl	80086cc <memmove>
      return __result + __count;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	4413      	add	r3, r2
    }
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3718      	adds	r7, #24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12QAS_LCD_FontES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	68b9      	ldr	r1, [r7, #8]
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 f822 	bl	8007f24 <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b086      	sub	sp, #24
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	109b      	asrs	r3, r3, #2
 8007efe:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d006      	beq.n	8007f14 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12QAS_LCD_FontEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	68f9      	ldr	r1, [r7, #12]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fbdc 	bl	80086cc <memmove>
	  return __result + _Num;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	4413      	add	r3, r2
	}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <_ZSt4copyISt13move_iteratorIPP12QAS_LCD_FontES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8007f24:	b590      	push	{r4, r7, lr}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 f80f 	bl	8007f54 <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007f36:	4604      	mov	r4, r0
 8007f38:	68b8      	ldr	r0, [r7, #8]
 8007f3a:	f000 f80b 	bl	8007f54 <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	4619      	mov	r1, r3
 8007f44:	4620      	mov	r0, r4
 8007f46:	f000 f816 	bl	8007f76 <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 8007f4a:	4603      	mov	r3, r0
    }
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd90      	pop	{r4, r7, pc}

08007f54 <_ZSt12__miter_baseIPP12QAS_LCD_FontEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8007f5c:	1d3b      	adds	r3, r7, #4
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f82c 	bl	8007fbc <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>
 8007f64:	4603      	mov	r3, r0
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 f834 	bl	8007fd4 <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <_ZSt14__copy_move_a2ILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007f76:	b5b0      	push	{r4, r5, r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff ff78 	bl	8007e78 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007f88:	4604      	mov	r4, r0
 8007f8a:	68b8      	ldr	r0, [r7, #8]
 8007f8c:	f7ff ff74 	bl	8007e78 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007f90:	4605      	mov	r5, r0
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7ff ff6f 	bl	8007e78 <_ZSt12__niter_baseIPP12QAS_LCD_FontET_S3_>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f7ff ff2b 	bl	8007dfc <_ZSt13__copy_move_aILb1EPP12QAS_LCD_FontS2_ET1_T0_S4_S3_>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	1d3b      	adds	r3, r7, #4
 8007faa:	4611      	mov	r1, r2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 f81c 	bl	8007fea <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>
 8007fb2:	4603      	mov	r3, r0
    }
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bdb0      	pop	{r4, r5, r7, pc}

08007fbc <_ZNKSt13move_iteratorIPP12QAS_LCD_FontE4baseEv>:
      base() const
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <_ZSt12__miter_baseIPP12QAS_LCD_FontET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <_ZSt12__niter_wrapIPP12QAS_LCD_FontET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007fea:	b480      	push	{r7}
 8007fec:	b083      	sub	sp, #12
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <_ZN19QAS_Serial_Dev_Base4initEPv>:
  //-----------------------------------------
  //QAS_Serial_Dev_Base Initialization Methods

//QAS_Serial_Dev_Base::init
//QAS_Serial_Dev_Base Initialization Method
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7b1b      	ldrb	r3, [r3, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	e013      	b.n	8008040 <_ZN19QAS_Serial_Dev_Base4initEPv+0x3e>

  if (imp_init(p))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	4798      	blx	r3
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	bf14      	ite	ne
 800802a:	2301      	movne	r3, #1
 800802c:	2300      	moveq	r3, #0
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <_ZN19QAS_Serial_Dev_Base4initEPv+0x36>
  	return QA_Fail;
 8008034:	2301      	movs	r3, #1
 8008036:	e003      	b.n	8008040 <_ZN19QAS_Serial_Dev_Base4initEPv+0x3e>

  //
  m_eInitState = QA_Initialized;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
  //----------------------------------
  //QAS_Serial_Dev_Base Handler Methods

//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
void QAS_Serial_Dev_Base::handler(void* p) {
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3308      	adds	r3, #8
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	4798      	blx	r3
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
}


//QAS_Serial_Dev_Base::
//QAS_Serial_Dev_Base Transmit Method
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 8008072:	6838      	ldr	r0, [r7, #0]
 8008074:	f7f8 f8e0 	bl	8000238 <strlen>
 8008078:	4603      	mov	r3, r0
 800807a:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 800807c:	2300      	movs	r3, #0
 800807e:	81fb      	strh	r3, [r7, #14]
 8008080:	89fa      	ldrh	r2, [r7, #14]
 8008082:	89bb      	ldrh	r3, [r7, #12]
 8008084:	429a      	cmp	r2, r3
 8008086:	d20f      	bcs.n	80080a8 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3304      	adds	r3, #4
 800808c:	4618      	mov	r0, r3
 800808e:	f000 f81f 	bl	80080d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008092:	89fb      	ldrh	r3, [r7, #14]
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	4413      	add	r3, r2
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	4619      	mov	r1, r3
 800809c:	f000 f9c7 	bl	800842e <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 80080a0:	89fb      	ldrh	r3, [r7, #14]
 80080a2:	3301      	adds	r3, #1
 80080a4:	81fb      	strh	r3, [r7, #14]
 80080a6:	e7eb      	b.n	8008080 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3304      	adds	r3, #4
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 f80f 	bl	80080d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80080b2:	4603      	mov	r3, r0
 80080b4:	210d      	movs	r1, #13
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f9b9 	bl	800842e <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	330c      	adds	r3, #12
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	4798      	blx	r3
}
 80080c8:	bf00      	nop
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
	return get();
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f805 	bl	80080e8 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 80080de:	4603      	mov	r3, r0
      }
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 f805 	bl	8008102 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 80080f8:	4603      	mov	r3, r0
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4618      	mov	r0, r3
 800810e:	f000 f806 	bl	800811e <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8008112:	4603      	mov	r3, r0
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4618      	mov	r0, r3
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4618      	mov	r0, r3
 800812a:	f000 f805 	bl	8008138 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800812e:	4603      	mov	r3, r0
 8008130:	4618      	mov	r0, r3
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f805 	bl	8008150 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 8008146:	4603      	mov	r3, r0
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4618      	mov	r0, r3
 800815c:	f000 f805 	bl	800816a <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 8008160:	4603      	mov	r3, r0
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
  //------------------------------------------
  //QAS_Serial_Dev_UART Initialization Methods

//QAS_Serial_Dev_UART::imp_init
//QAS_Serial_Dev_UART Initialization Method
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3314      	adds	r3, #20
 800818e:	4618      	mov	r0, r3
 8008190:	f000 f8e2 	bl	8008358 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008194:	4603      	mov	r3, r0
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe f9df 	bl	800655a <_ZN8QAD_UART4initEv>
 800819c:	4603      	mov	r3, r0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:


//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
void QAS_Serial_Dev_UART::imp_deinit(void) {
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3314      	adds	r3, #20
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 f8d0 	bl	8008358 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80081b8:	4603      	mov	r3, r0
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe f9f7 	bl	80065ae <_ZN8QAD_UART6deinitEv>
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
	//---------------------------------------
	//QAS_Serial_Dev_UART IRQ Handler Methods

//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 80081c8:	b590      	push	{r4, r7, lr}
 80081ca:	b0a5      	sub	sp, #148	; 0x94
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	3314      	adds	r3, #20
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 f8be 	bl	8008358 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80081dc:	4603      	mov	r3, r0
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe f9fb 	bl	80065da <_ZN8QAD_UART9getHandleEv>
 80081e4:	4602      	mov	r2, r0
 80081e6:	f107 0308 	add.w	r3, r7, #8
 80081ea:	4611      	mov	r1, r2
 80081ec:	2284      	movs	r2, #132	; 0x84
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fa5e 	bl	80086b0 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	f003 0320 	and.w	r3, r3, #32
 80081fc:	2b20      	cmp	r3, #32
 80081fe:	bf0c      	ite	eq
 8008200:	2301      	moveq	r3, #1
 8008202:	2300      	movne	r3, #0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d01e      	beq.n	8008248 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x80>
  	uint8_t uData = m_pUART->dataRX();
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	3314      	adds	r3, #20
 800820e:	4618      	mov	r0, r3
 8008210:	f000 f8a2 	bl	8008358 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008214:	4603      	mov	r3, r0
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fa53 	bl	80066c2 <_ZN8QAD_UART6dataRXEv>
 800821c:	4603      	mov	r3, r0
 800821e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  	if (m_eRXState)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	7b9b      	ldrb	r3, [r3, #14]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00b      	beq.n	8008242 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3308      	adds	r3, #8
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff ff4e 	bl	80080d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008234:	4602      	mov	r2, r0
 8008236:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800823a:	4619      	mov	r1, r3
 800823c:	4610      	mov	r0, r2
 800823e:	f000 f8f6 	bl	800842e <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2220      	movs	r2, #32
 8008246:	621a      	str	r2, [r3, #32]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008250:	2b80      	cmp	r3, #128	; 0x80
 8008252:	bf0c      	ite	eq
 8008254:	2301      	moveq	r3, #1
 8008256:	2300      	movne	r3, #0
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d034      	beq.n	80082c8 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x100>
  	if (!m_pTXFIFO->empty()) {
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	3304      	adds	r3, #4
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff ff34 	bl	80080d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008268:	4603      	mov	r3, r0
 800826a:	4618      	mov	r0, r3
 800826c:	f000 f8cc 	bl	8008408 <_ZN14QAT_FIFOBuffer5emptyEv>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	bf0c      	ite	eq
 8008276:	2301      	moveq	r3, #1
 8008278:	2300      	movne	r3, #0
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d014      	beq.n	80082aa <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe2>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3314      	adds	r3, #20
 8008284:	4618      	mov	r0, r3
 8008286:	f000 f867 	bl	8008358 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800828a:	4604      	mov	r4, r0
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3304      	adds	r3, #4
 8008290:	4618      	mov	r0, r3
 8008292:	f7ff ff1d 	bl	80080d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8008296:	4603      	mov	r3, r0
 8008298:	4618      	mov	r0, r3
 800829a:	f000 f8ec 	bl	8008476 <_ZN14QAT_FIFOBuffer3popEv>
 800829e:	4603      	mov	r3, r0
 80082a0:	4619      	mov	r1, r3
 80082a2:	4620      	mov	r0, r4
 80082a4:	f7fe f9fd 	bl	80066a2 <_ZN8QAD_UART6dataTXEh>
 80082a8:	e00b      	b.n	80082c2 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfa>
  	} else {
      m_pUART->stopTX();
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	3314      	adds	r3, #20
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 f852 	bl	8008358 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80082b4:	4603      	mov	r3, r0
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe f9b1 	bl	800661e <_ZN8QAD_UART6stopTXEv>
      m_eTXState = PeriphInactive;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2280      	movs	r2, #128	; 0x80
 80082c6:	621a      	str	r2, [r3, #32]
  }
}
 80082c8:	bf00      	nop
 80082ca:	3794      	adds	r7, #148	; 0x94
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd90      	pop	{r4, r7, pc}

080082d0 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:
	//-----------------------------------
	//QAS_Serial_Dev_UART Control Methods

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
void QAS_Serial_Dev_UART::imp_txStart(void) {
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3314      	adds	r3, #20
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 f83b 	bl	8008358 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80082e2:	4603      	mov	r3, r0
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fe f984 	bl	80065f2 <_ZN8QAD_UART7startTXEv>
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:


//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
void QAS_Serial_Dev_UART::imp_txStop(void) {
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3314      	adds	r3, #20
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f82a 	bl	8008358 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008304:	4603      	mov	r3, r0
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe f989 	bl	800661e <_ZN8QAD_UART6stopTXEv>
}
 800830c:	bf00      	nop
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:


//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3314      	adds	r3, #20
 8008320:	4618      	mov	r0, r3
 8008322:	f000 f819 	bl	8008358 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008326:	4603      	mov	r3, r0
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe f98e 	bl	800664a <_ZN8QAD_UART7startRXEv>
}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:


//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3314      	adds	r3, #20
 8008342:	4618      	mov	r0, r3
 8008344:	f000 f808 	bl	8008358 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8008348:	4603      	mov	r3, r0
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe f993 	bl	8006676 <_ZN8QAD_UART6stopRXEv>
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
	return get();
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f805 	bl	8008370 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 8008366:	4603      	mov	r3, r0
      }
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4618      	mov	r0, r3
 800837c:	f000 f805 	bl	800838a <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8008380:	4603      	mov	r3, r0
 8008382:	4618      	mov	r0, r3
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 f806 	bl	80083a6 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800839a:	4603      	mov	r3, r0
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 f805 	bl	80083c0 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80083b6:	4603      	mov	r3, r0
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f805 	bl	80083d8 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 80083ce:	4603      	mov	r3, r0
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 f805 	bl	80083f2 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 80083e8:	4603      	mov	r3, r0
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4618      	mov	r0, r3
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <_ZN14QAT_FIFOBuffer5emptyEv>:
}


//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
QAT_FIFOBuffer::FIFOState QAT_FIFOBuffer::empty(void) {
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? FS_Empty : FS_NotEmpty;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	88da      	ldrh	r2, [r3, #6]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	891b      	ldrh	r3, [r3, #8]
 8008418:	429a      	cmp	r2, r3
 800841a:	d101      	bne.n	8008420 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 800841c:	2301      	movs	r3, #1
 800841e:	e000      	b.n	8008422 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <_ZN14QAT_FIFOBuffer4pushEh>:
}


//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
void QAT_FIFOBuffer::push(uint8_t uData) {
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	460b      	mov	r3, r1
 8008438:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	891b      	ldrh	r3, [r3, #8]
 8008440:	4619      	mov	r1, r3
 8008442:	4610      	mov	r0, r2
 8008444:	f000 f847 	bl	80084d6 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8008448:	4602      	mov	r2, r0
 800844a:	78fb      	ldrb	r3, [r7, #3]
 800844c:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	889a      	ldrh	r2, [r3, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	891b      	ldrh	r3, [r3, #8]
 8008456:	429a      	cmp	r2, r3
 8008458:	d906      	bls.n	8008468 <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	891b      	ldrh	r3, [r3, #8]
 800845e:	3301      	adds	r3, #1
 8008460:	b29a      	uxth	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 8008466:	e002      	b.n	800846e <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	811a      	strh	r2, [r3, #8]
}
 800846e:	bf00      	nop
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <_ZN14QAT_FIFOBuffer3popEv>:


//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
uint8_t QAT_FIFOBuffer::pop(void) {
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff ffc2 	bl	8008408 <_ZN14QAT_FIFOBuffer5emptyEv>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	bf0c      	ite	eq
 800848a:	2301      	moveq	r3, #1
 800848c:	2300      	movne	r3, #0
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	d01b      	beq.n	80084cc <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	88db      	ldrh	r3, [r3, #6]
 800849a:	4619      	mov	r1, r3
 800849c:	4610      	mov	r0, r2
 800849e:	f000 f81a 	bl	80084d6 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 80084a2:	4603      	mov	r3, r0
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	889a      	ldrh	r2, [r3, #4]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	88db      	ldrh	r3, [r3, #6]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d906      	bls.n	80084c2 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	88db      	ldrh	r3, [r3, #6]
 80084b8:	3301      	adds	r3, #1
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	80da      	strh	r2, [r3, #6]
 80084c0:	e002      	b.n	80084c8 <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	80da      	strh	r2, [r3, #6]
		return uData;
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	e000      	b.n	80084ce <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
	return get()[__i];
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f807 	bl	80084f4 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 80084e6:	4602      	mov	r2, r0
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	4413      	add	r3, r2
      }
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 f805 	bl	800850e <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8008504:	4603      	mov	r3, r0
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 f806 	bl	800852a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800851e:	4603      	mov	r3, r0
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 f805 	bl	8008544 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800853a:	4603      	mov	r3, r0
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f805 	bl	800855c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8008552:	4603      	mov	r3, r0
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4618      	mov	r0, r3
 8008568:	f000 f805 	bl	8008576 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 800856c:	4603      	mov	r3, r0
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4618      	mov	r0, r3
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <_ZdlPv>:
 800858c:	f000 b888 	b.w	80086a0 <free>

08008590 <_ZdlPvj>:
 8008590:	f7ff bffc 	b.w	800858c <_ZdlPv>

08008594 <__cxa_guard_acquire>:
 8008594:	6803      	ldr	r3, [r0, #0]
 8008596:	07db      	lsls	r3, r3, #31
 8008598:	d406      	bmi.n	80085a8 <__cxa_guard_acquire+0x14>
 800859a:	7843      	ldrb	r3, [r0, #1]
 800859c:	b103      	cbz	r3, 80085a0 <__cxa_guard_acquire+0xc>
 800859e:	deff      	udf	#255	; 0xff
 80085a0:	2301      	movs	r3, #1
 80085a2:	7043      	strb	r3, [r0, #1]
 80085a4:	4618      	mov	r0, r3
 80085a6:	4770      	bx	lr
 80085a8:	2000      	movs	r0, #0
 80085aa:	4770      	bx	lr

080085ac <__cxa_guard_release>:
 80085ac:	2301      	movs	r3, #1
 80085ae:	6003      	str	r3, [r0, #0]
 80085b0:	4770      	bx	lr

080085b2 <_Znwj>:
 80085b2:	2801      	cmp	r0, #1
 80085b4:	bf38      	it	cc
 80085b6:	2001      	movcc	r0, #1
 80085b8:	b510      	push	{r4, lr}
 80085ba:	4604      	mov	r4, r0
 80085bc:	4620      	mov	r0, r4
 80085be:	f000 f867 	bl	8008690 <malloc>
 80085c2:	b930      	cbnz	r0, 80085d2 <_Znwj+0x20>
 80085c4:	f000 f824 	bl	8008610 <_ZSt15get_new_handlerv>
 80085c8:	b908      	cbnz	r0, 80085ce <_Znwj+0x1c>
 80085ca:	f000 f829 	bl	8008620 <abort>
 80085ce:	4780      	blx	r0
 80085d0:	e7f4      	b.n	80085bc <_Znwj+0xa>
 80085d2:	bd10      	pop	{r4, pc}

080085d4 <_Znaj>:
 80085d4:	f7ff bfed 	b.w	80085b2 <_Znwj>

080085d8 <__cxa_pure_virtual>:
 80085d8:	b508      	push	{r3, lr}
 80085da:	f000 f813 	bl	8008604 <_ZSt9terminatev>

080085de <_ZSt17__throw_bad_allocv>:
 80085de:	b508      	push	{r3, lr}
 80085e0:	f000 f81e 	bl	8008620 <abort>

080085e4 <_ZSt20__throw_length_errorPKc>:
 80085e4:	b508      	push	{r3, lr}
 80085e6:	f000 f81b 	bl	8008620 <abort>

080085ea <_ZN10__cxxabiv111__terminateEPFvvE>:
 80085ea:	b508      	push	{r3, lr}
 80085ec:	4780      	blx	r0
 80085ee:	f000 f817 	bl	8008620 <abort>
	...

080085f4 <_ZSt13get_terminatev>:
 80085f4:	4b02      	ldr	r3, [pc, #8]	; (8008600 <_ZSt13get_terminatev+0xc>)
 80085f6:	6818      	ldr	r0, [r3, #0]
 80085f8:	f3bf 8f5b 	dmb	ish
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	2000000c 	.word	0x2000000c

08008604 <_ZSt9terminatev>:
 8008604:	b508      	push	{r3, lr}
 8008606:	f7ff fff5 	bl	80085f4 <_ZSt13get_terminatev>
 800860a:	f7ff ffee 	bl	80085ea <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08008610 <_ZSt15get_new_handlerv>:
 8008610:	4b02      	ldr	r3, [pc, #8]	; (800861c <_ZSt15get_new_handlerv+0xc>)
 8008612:	6818      	ldr	r0, [r3, #0]
 8008614:	f3bf 8f5b 	dmb	ish
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	200002f8 	.word	0x200002f8

08008620 <abort>:
 8008620:	b508      	push	{r3, lr}
 8008622:	2006      	movs	r0, #6
 8008624:	f000 f956 	bl	80088d4 <raise>
 8008628:	2001      	movs	r0, #1
 800862a:	f7f9 faa6 	bl	8001b7a <_exit>

0800862e <atexit>:
 800862e:	2300      	movs	r3, #0
 8008630:	4601      	mov	r1, r0
 8008632:	461a      	mov	r2, r3
 8008634:	4618      	mov	r0, r3
 8008636:	f000 b971 	b.w	800891c <__register_exitproc>
	...

0800863c <__errno>:
 800863c:	4b01      	ldr	r3, [pc, #4]	; (8008644 <__errno+0x8>)
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	20000010 	.word	0x20000010

08008648 <__libc_init_array>:
 8008648:	b570      	push	{r4, r5, r6, lr}
 800864a:	4d0d      	ldr	r5, [pc, #52]	; (8008680 <__libc_init_array+0x38>)
 800864c:	4c0d      	ldr	r4, [pc, #52]	; (8008684 <__libc_init_array+0x3c>)
 800864e:	1b64      	subs	r4, r4, r5
 8008650:	10a4      	asrs	r4, r4, #2
 8008652:	2600      	movs	r6, #0
 8008654:	42a6      	cmp	r6, r4
 8008656:	d109      	bne.n	800866c <__libc_init_array+0x24>
 8008658:	4d0b      	ldr	r5, [pc, #44]	; (8008688 <__libc_init_array+0x40>)
 800865a:	4c0c      	ldr	r4, [pc, #48]	; (800868c <__libc_init_array+0x44>)
 800865c:	f000 f9d0 	bl	8008a00 <_init>
 8008660:	1b64      	subs	r4, r4, r5
 8008662:	10a4      	asrs	r4, r4, #2
 8008664:	2600      	movs	r6, #0
 8008666:	42a6      	cmp	r6, r4
 8008668:	d105      	bne.n	8008676 <__libc_init_array+0x2e>
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008670:	4798      	blx	r3
 8008672:	3601      	adds	r6, #1
 8008674:	e7ee      	b.n	8008654 <__libc_init_array+0xc>
 8008676:	f855 3b04 	ldr.w	r3, [r5], #4
 800867a:	4798      	blx	r3
 800867c:	3601      	adds	r6, #1
 800867e:	e7f2      	b.n	8008666 <__libc_init_array+0x1e>
 8008680:	0800ab9c 	.word	0x0800ab9c
 8008684:	0800ab9c 	.word	0x0800ab9c
 8008688:	0800ab9c 	.word	0x0800ab9c
 800868c:	0800aba0 	.word	0x0800aba0

08008690 <malloc>:
 8008690:	4b02      	ldr	r3, [pc, #8]	; (800869c <malloc+0xc>)
 8008692:	4601      	mov	r1, r0
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	f000 b88b 	b.w	80087b0 <_malloc_r>
 800869a:	bf00      	nop
 800869c:	20000010 	.word	0x20000010

080086a0 <free>:
 80086a0:	4b02      	ldr	r3, [pc, #8]	; (80086ac <free+0xc>)
 80086a2:	4601      	mov	r1, r0
 80086a4:	6818      	ldr	r0, [r3, #0]
 80086a6:	f000 b833 	b.w	8008710 <_free_r>
 80086aa:	bf00      	nop
 80086ac:	20000010 	.word	0x20000010

080086b0 <memcpy>:
 80086b0:	440a      	add	r2, r1
 80086b2:	4291      	cmp	r1, r2
 80086b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086b8:	d100      	bne.n	80086bc <memcpy+0xc>
 80086ba:	4770      	bx	lr
 80086bc:	b510      	push	{r4, lr}
 80086be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086c6:	4291      	cmp	r1, r2
 80086c8:	d1f9      	bne.n	80086be <memcpy+0xe>
 80086ca:	bd10      	pop	{r4, pc}

080086cc <memmove>:
 80086cc:	4288      	cmp	r0, r1
 80086ce:	b510      	push	{r4, lr}
 80086d0:	eb01 0402 	add.w	r4, r1, r2
 80086d4:	d902      	bls.n	80086dc <memmove+0x10>
 80086d6:	4284      	cmp	r4, r0
 80086d8:	4623      	mov	r3, r4
 80086da:	d807      	bhi.n	80086ec <memmove+0x20>
 80086dc:	1e43      	subs	r3, r0, #1
 80086de:	42a1      	cmp	r1, r4
 80086e0:	d008      	beq.n	80086f4 <memmove+0x28>
 80086e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086ea:	e7f8      	b.n	80086de <memmove+0x12>
 80086ec:	4402      	add	r2, r0
 80086ee:	4601      	mov	r1, r0
 80086f0:	428a      	cmp	r2, r1
 80086f2:	d100      	bne.n	80086f6 <memmove+0x2a>
 80086f4:	bd10      	pop	{r4, pc}
 80086f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086fe:	e7f7      	b.n	80086f0 <memmove+0x24>

08008700 <memset>:
 8008700:	4402      	add	r2, r0
 8008702:	4603      	mov	r3, r0
 8008704:	4293      	cmp	r3, r2
 8008706:	d100      	bne.n	800870a <memset+0xa>
 8008708:	4770      	bx	lr
 800870a:	f803 1b01 	strb.w	r1, [r3], #1
 800870e:	e7f9      	b.n	8008704 <memset+0x4>

08008710 <_free_r>:
 8008710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008712:	2900      	cmp	r1, #0
 8008714:	d048      	beq.n	80087a8 <_free_r+0x98>
 8008716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800871a:	9001      	str	r0, [sp, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f1a1 0404 	sub.w	r4, r1, #4
 8008722:	bfb8      	it	lt
 8008724:	18e4      	addlt	r4, r4, r3
 8008726:	f000 f95f 	bl	80089e8 <__malloc_lock>
 800872a:	4a20      	ldr	r2, [pc, #128]	; (80087ac <_free_r+0x9c>)
 800872c:	9801      	ldr	r0, [sp, #4]
 800872e:	6813      	ldr	r3, [r2, #0]
 8008730:	4615      	mov	r5, r2
 8008732:	b933      	cbnz	r3, 8008742 <_free_r+0x32>
 8008734:	6063      	str	r3, [r4, #4]
 8008736:	6014      	str	r4, [r2, #0]
 8008738:	b003      	add	sp, #12
 800873a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800873e:	f000 b959 	b.w	80089f4 <__malloc_unlock>
 8008742:	42a3      	cmp	r3, r4
 8008744:	d90b      	bls.n	800875e <_free_r+0x4e>
 8008746:	6821      	ldr	r1, [r4, #0]
 8008748:	1862      	adds	r2, r4, r1
 800874a:	4293      	cmp	r3, r2
 800874c:	bf04      	itt	eq
 800874e:	681a      	ldreq	r2, [r3, #0]
 8008750:	685b      	ldreq	r3, [r3, #4]
 8008752:	6063      	str	r3, [r4, #4]
 8008754:	bf04      	itt	eq
 8008756:	1852      	addeq	r2, r2, r1
 8008758:	6022      	streq	r2, [r4, #0]
 800875a:	602c      	str	r4, [r5, #0]
 800875c:	e7ec      	b.n	8008738 <_free_r+0x28>
 800875e:	461a      	mov	r2, r3
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	b10b      	cbz	r3, 8008768 <_free_r+0x58>
 8008764:	42a3      	cmp	r3, r4
 8008766:	d9fa      	bls.n	800875e <_free_r+0x4e>
 8008768:	6811      	ldr	r1, [r2, #0]
 800876a:	1855      	adds	r5, r2, r1
 800876c:	42a5      	cmp	r5, r4
 800876e:	d10b      	bne.n	8008788 <_free_r+0x78>
 8008770:	6824      	ldr	r4, [r4, #0]
 8008772:	4421      	add	r1, r4
 8008774:	1854      	adds	r4, r2, r1
 8008776:	42a3      	cmp	r3, r4
 8008778:	6011      	str	r1, [r2, #0]
 800877a:	d1dd      	bne.n	8008738 <_free_r+0x28>
 800877c:	681c      	ldr	r4, [r3, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	6053      	str	r3, [r2, #4]
 8008782:	4421      	add	r1, r4
 8008784:	6011      	str	r1, [r2, #0]
 8008786:	e7d7      	b.n	8008738 <_free_r+0x28>
 8008788:	d902      	bls.n	8008790 <_free_r+0x80>
 800878a:	230c      	movs	r3, #12
 800878c:	6003      	str	r3, [r0, #0]
 800878e:	e7d3      	b.n	8008738 <_free_r+0x28>
 8008790:	6825      	ldr	r5, [r4, #0]
 8008792:	1961      	adds	r1, r4, r5
 8008794:	428b      	cmp	r3, r1
 8008796:	bf04      	itt	eq
 8008798:	6819      	ldreq	r1, [r3, #0]
 800879a:	685b      	ldreq	r3, [r3, #4]
 800879c:	6063      	str	r3, [r4, #4]
 800879e:	bf04      	itt	eq
 80087a0:	1949      	addeq	r1, r1, r5
 80087a2:	6021      	streq	r1, [r4, #0]
 80087a4:	6054      	str	r4, [r2, #4]
 80087a6:	e7c7      	b.n	8008738 <_free_r+0x28>
 80087a8:	b003      	add	sp, #12
 80087aa:	bd30      	pop	{r4, r5, pc}
 80087ac:	200002fc 	.word	0x200002fc

080087b0 <_malloc_r>:
 80087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b2:	1ccd      	adds	r5, r1, #3
 80087b4:	f025 0503 	bic.w	r5, r5, #3
 80087b8:	3508      	adds	r5, #8
 80087ba:	2d0c      	cmp	r5, #12
 80087bc:	bf38      	it	cc
 80087be:	250c      	movcc	r5, #12
 80087c0:	2d00      	cmp	r5, #0
 80087c2:	4606      	mov	r6, r0
 80087c4:	db01      	blt.n	80087ca <_malloc_r+0x1a>
 80087c6:	42a9      	cmp	r1, r5
 80087c8:	d903      	bls.n	80087d2 <_malloc_r+0x22>
 80087ca:	230c      	movs	r3, #12
 80087cc:	6033      	str	r3, [r6, #0]
 80087ce:	2000      	movs	r0, #0
 80087d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087d2:	f000 f909 	bl	80089e8 <__malloc_lock>
 80087d6:	4921      	ldr	r1, [pc, #132]	; (800885c <_malloc_r+0xac>)
 80087d8:	680a      	ldr	r2, [r1, #0]
 80087da:	4614      	mov	r4, r2
 80087dc:	b99c      	cbnz	r4, 8008806 <_malloc_r+0x56>
 80087de:	4f20      	ldr	r7, [pc, #128]	; (8008860 <_malloc_r+0xb0>)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	b923      	cbnz	r3, 80087ee <_malloc_r+0x3e>
 80087e4:	4621      	mov	r1, r4
 80087e6:	4630      	mov	r0, r6
 80087e8:	f000 f83c 	bl	8008864 <_sbrk_r>
 80087ec:	6038      	str	r0, [r7, #0]
 80087ee:	4629      	mov	r1, r5
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 f837 	bl	8008864 <_sbrk_r>
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	d123      	bne.n	8008842 <_malloc_r+0x92>
 80087fa:	230c      	movs	r3, #12
 80087fc:	6033      	str	r3, [r6, #0]
 80087fe:	4630      	mov	r0, r6
 8008800:	f000 f8f8 	bl	80089f4 <__malloc_unlock>
 8008804:	e7e3      	b.n	80087ce <_malloc_r+0x1e>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	1b5b      	subs	r3, r3, r5
 800880a:	d417      	bmi.n	800883c <_malloc_r+0x8c>
 800880c:	2b0b      	cmp	r3, #11
 800880e:	d903      	bls.n	8008818 <_malloc_r+0x68>
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	441c      	add	r4, r3
 8008814:	6025      	str	r5, [r4, #0]
 8008816:	e004      	b.n	8008822 <_malloc_r+0x72>
 8008818:	6863      	ldr	r3, [r4, #4]
 800881a:	42a2      	cmp	r2, r4
 800881c:	bf0c      	ite	eq
 800881e:	600b      	streq	r3, [r1, #0]
 8008820:	6053      	strne	r3, [r2, #4]
 8008822:	4630      	mov	r0, r6
 8008824:	f000 f8e6 	bl	80089f4 <__malloc_unlock>
 8008828:	f104 000b 	add.w	r0, r4, #11
 800882c:	1d23      	adds	r3, r4, #4
 800882e:	f020 0007 	bic.w	r0, r0, #7
 8008832:	1ac2      	subs	r2, r0, r3
 8008834:	d0cc      	beq.n	80087d0 <_malloc_r+0x20>
 8008836:	1a1b      	subs	r3, r3, r0
 8008838:	50a3      	str	r3, [r4, r2]
 800883a:	e7c9      	b.n	80087d0 <_malloc_r+0x20>
 800883c:	4622      	mov	r2, r4
 800883e:	6864      	ldr	r4, [r4, #4]
 8008840:	e7cc      	b.n	80087dc <_malloc_r+0x2c>
 8008842:	1cc4      	adds	r4, r0, #3
 8008844:	f024 0403 	bic.w	r4, r4, #3
 8008848:	42a0      	cmp	r0, r4
 800884a:	d0e3      	beq.n	8008814 <_malloc_r+0x64>
 800884c:	1a21      	subs	r1, r4, r0
 800884e:	4630      	mov	r0, r6
 8008850:	f000 f808 	bl	8008864 <_sbrk_r>
 8008854:	3001      	adds	r0, #1
 8008856:	d1dd      	bne.n	8008814 <_malloc_r+0x64>
 8008858:	e7cf      	b.n	80087fa <_malloc_r+0x4a>
 800885a:	bf00      	nop
 800885c:	200002fc 	.word	0x200002fc
 8008860:	20000300 	.word	0x20000300

08008864 <_sbrk_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4d06      	ldr	r5, [pc, #24]	; (8008880 <_sbrk_r+0x1c>)
 8008868:	2300      	movs	r3, #0
 800886a:	4604      	mov	r4, r0
 800886c:	4608      	mov	r0, r1
 800886e:	602b      	str	r3, [r5, #0]
 8008870:	f7f9 f98e 	bl	8001b90 <_sbrk>
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	d102      	bne.n	800887e <_sbrk_r+0x1a>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	b103      	cbz	r3, 800887e <_sbrk_r+0x1a>
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	bd38      	pop	{r3, r4, r5, pc}
 8008880:	200003a4 	.word	0x200003a4

08008884 <_raise_r>:
 8008884:	291f      	cmp	r1, #31
 8008886:	b538      	push	{r3, r4, r5, lr}
 8008888:	4604      	mov	r4, r0
 800888a:	460d      	mov	r5, r1
 800888c:	d904      	bls.n	8008898 <_raise_r+0x14>
 800888e:	2316      	movs	r3, #22
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	f04f 30ff 	mov.w	r0, #4294967295
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800889a:	b112      	cbz	r2, 80088a2 <_raise_r+0x1e>
 800889c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088a0:	b94b      	cbnz	r3, 80088b6 <_raise_r+0x32>
 80088a2:	4620      	mov	r0, r4
 80088a4:	f000 f830 	bl	8008908 <_getpid_r>
 80088a8:	462a      	mov	r2, r5
 80088aa:	4601      	mov	r1, r0
 80088ac:	4620      	mov	r0, r4
 80088ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088b2:	f000 b817 	b.w	80088e4 <_kill_r>
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d00a      	beq.n	80088d0 <_raise_r+0x4c>
 80088ba:	1c59      	adds	r1, r3, #1
 80088bc:	d103      	bne.n	80088c6 <_raise_r+0x42>
 80088be:	2316      	movs	r3, #22
 80088c0:	6003      	str	r3, [r0, #0]
 80088c2:	2001      	movs	r0, #1
 80088c4:	e7e7      	b.n	8008896 <_raise_r+0x12>
 80088c6:	2400      	movs	r4, #0
 80088c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088cc:	4628      	mov	r0, r5
 80088ce:	4798      	blx	r3
 80088d0:	2000      	movs	r0, #0
 80088d2:	e7e0      	b.n	8008896 <_raise_r+0x12>

080088d4 <raise>:
 80088d4:	4b02      	ldr	r3, [pc, #8]	; (80088e0 <raise+0xc>)
 80088d6:	4601      	mov	r1, r0
 80088d8:	6818      	ldr	r0, [r3, #0]
 80088da:	f7ff bfd3 	b.w	8008884 <_raise_r>
 80088de:	bf00      	nop
 80088e0:	20000010 	.word	0x20000010

080088e4 <_kill_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4d07      	ldr	r5, [pc, #28]	; (8008904 <_kill_r+0x20>)
 80088e8:	2300      	movs	r3, #0
 80088ea:	4604      	mov	r4, r0
 80088ec:	4608      	mov	r0, r1
 80088ee:	4611      	mov	r1, r2
 80088f0:	602b      	str	r3, [r5, #0]
 80088f2:	f7f9 f932 	bl	8001b5a <_kill>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	d102      	bne.n	8008900 <_kill_r+0x1c>
 80088fa:	682b      	ldr	r3, [r5, #0]
 80088fc:	b103      	cbz	r3, 8008900 <_kill_r+0x1c>
 80088fe:	6023      	str	r3, [r4, #0]
 8008900:	bd38      	pop	{r3, r4, r5, pc}
 8008902:	bf00      	nop
 8008904:	200003a4 	.word	0x200003a4

08008908 <_getpid_r>:
 8008908:	f7f9 b91f 	b.w	8001b4a <_getpid>

0800890c <strcpy>:
 800890c:	4603      	mov	r3, r0
 800890e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008912:	f803 2b01 	strb.w	r2, [r3], #1
 8008916:	2a00      	cmp	r2, #0
 8008918:	d1f9      	bne.n	800890e <strcpy+0x2>
 800891a:	4770      	bx	lr

0800891c <__register_exitproc>:
 800891c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008920:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80089dc <__register_exitproc+0xc0>
 8008924:	4606      	mov	r6, r0
 8008926:	f8d8 0000 	ldr.w	r0, [r8]
 800892a:	461f      	mov	r7, r3
 800892c:	460d      	mov	r5, r1
 800892e:	4691      	mov	r9, r2
 8008930:	f000 f856 	bl	80089e0 <__retarget_lock_acquire_recursive>
 8008934:	4b25      	ldr	r3, [pc, #148]	; (80089cc <__register_exitproc+0xb0>)
 8008936:	681c      	ldr	r4, [r3, #0]
 8008938:	b934      	cbnz	r4, 8008948 <__register_exitproc+0x2c>
 800893a:	4c25      	ldr	r4, [pc, #148]	; (80089d0 <__register_exitproc+0xb4>)
 800893c:	601c      	str	r4, [r3, #0]
 800893e:	4b25      	ldr	r3, [pc, #148]	; (80089d4 <__register_exitproc+0xb8>)
 8008940:	b113      	cbz	r3, 8008948 <__register_exitproc+0x2c>
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8008948:	6863      	ldr	r3, [r4, #4]
 800894a:	2b1f      	cmp	r3, #31
 800894c:	dd07      	ble.n	800895e <__register_exitproc+0x42>
 800894e:	f8d8 0000 	ldr.w	r0, [r8]
 8008952:	f000 f847 	bl	80089e4 <__retarget_lock_release_recursive>
 8008956:	f04f 30ff 	mov.w	r0, #4294967295
 800895a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800895e:	b34e      	cbz	r6, 80089b4 <__register_exitproc+0x98>
 8008960:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8008964:	b988      	cbnz	r0, 800898a <__register_exitproc+0x6e>
 8008966:	4b1c      	ldr	r3, [pc, #112]	; (80089d8 <__register_exitproc+0xbc>)
 8008968:	b923      	cbnz	r3, 8008974 <__register_exitproc+0x58>
 800896a:	f8d8 0000 	ldr.w	r0, [r8]
 800896e:	f000 f838 	bl	80089e2 <__retarget_lock_release>
 8008972:	e7f0      	b.n	8008956 <__register_exitproc+0x3a>
 8008974:	f44f 7084 	mov.w	r0, #264	; 0x108
 8008978:	f7ff fe8a 	bl	8008690 <malloc>
 800897c:	2800      	cmp	r0, #0
 800897e:	d0f4      	beq.n	800896a <__register_exitproc+0x4e>
 8008980:	2300      	movs	r3, #0
 8008982:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8008986:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800898a:	6863      	ldr	r3, [r4, #4]
 800898c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8008990:	2201      	movs	r2, #1
 8008992:	409a      	lsls	r2, r3
 8008994:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8008998:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800899c:	4313      	orrs	r3, r2
 800899e:	2e02      	cmp	r6, #2
 80089a0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80089a4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80089a8:	bf02      	ittt	eq
 80089aa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80089ae:	431a      	orreq	r2, r3
 80089b0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80089b4:	6863      	ldr	r3, [r4, #4]
 80089b6:	f8d8 0000 	ldr.w	r0, [r8]
 80089ba:	1c5a      	adds	r2, r3, #1
 80089bc:	3302      	adds	r3, #2
 80089be:	6062      	str	r2, [r4, #4]
 80089c0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80089c4:	f000 f80e 	bl	80089e4 <__retarget_lock_release_recursive>
 80089c8:	2000      	movs	r0, #0
 80089ca:	e7c6      	b.n	800895a <__register_exitproc+0x3e>
 80089cc:	20000390 	.word	0x20000390
 80089d0:	20000304 	.word	0x20000304
 80089d4:	00000000 	.word	0x00000000
 80089d8:	08008691 	.word	0x08008691
 80089dc:	20000074 	.word	0x20000074

080089e0 <__retarget_lock_acquire_recursive>:
 80089e0:	4770      	bx	lr

080089e2 <__retarget_lock_release>:
 80089e2:	4770      	bx	lr

080089e4 <__retarget_lock_release_recursive>:
 80089e4:	4770      	bx	lr
	...

080089e8 <__malloc_lock>:
 80089e8:	4801      	ldr	r0, [pc, #4]	; (80089f0 <__malloc_lock+0x8>)
 80089ea:	f7ff bff9 	b.w	80089e0 <__retarget_lock_acquire_recursive>
 80089ee:	bf00      	nop
 80089f0:	2000039c 	.word	0x2000039c

080089f4 <__malloc_unlock>:
 80089f4:	4801      	ldr	r0, [pc, #4]	; (80089fc <__malloc_unlock+0x8>)
 80089f6:	f7ff bff5 	b.w	80089e4 <__retarget_lock_release_recursive>
 80089fa:	bf00      	nop
 80089fc:	2000039c 	.word	0x2000039c

08008a00 <_init>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	bf00      	nop
 8008a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a06:	bc08      	pop	{r3}
 8008a08:	469e      	mov	lr, r3
 8008a0a:	4770      	bx	lr

08008a0c <_fini>:
 8008a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0e:	bf00      	nop
 8008a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a12:	bc08      	pop	{r3}
 8008a14:	469e      	mov	lr, r3
 8008a16:	4770      	bx	lr
