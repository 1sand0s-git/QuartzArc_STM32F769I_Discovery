/* ----------------------------------------------------------------------- */
/*                                                                         */
/*   Quartz Arc                                                            */
/*                                                                         */
/*   STM32 F769I Discovery                                                 */
/*                                                                         */
/*   System: Driver                                                        */
/*   Role: RNG Driver                                                      */
/*   Filename: QAD_RNG.hpp                                                 */
/*   Date: 18th November 2021                                              */
/*   Created By: Benjamin Rosser                                           */
/*                                                                         */
/*   This code is covered by Creative Commons CC-BY-NC-SA license          */
/*   (C) Copyright 2021 Benjamin Rosser                                    */
/*                                                                         */
/* ----------------------------------------------------------------------- */

//Prevent Recursive Inclusion
#ifndef __QAD_RNG_HPP_
#define __QAD_RNG_HPP_


//Includes
#include "setup.hpp"


	//------------------------------------------
	//------------------------------------------
	//------------------------------------------


//-------
//QAD_RNG
//
//Singleton class
//Driver class for Random Number Generator (RNG) peripheral, which allows for generation
//of 32bit random numbers.
//This is a singleton class due to only one RNG peripheral existing on the STM32 device,
//preventing potential conflicts if multiple instances of the class were to exist.
class QAD_RNG {
private:

	QA_InitState      m_eInitState;  //Stores whether the driver is currently initialized

	RNG_HandleTypeDef m_sHandle;     //Handle used by HAL functions to access the RNG peripheral


	//-----------
	//Constructor

	//As this is a private method within a singleton class, this method will be called the
	//first time the static get() method is called.
	QAD_RNG() :
	  m_eInitState(QA_NotInitialized),
		m_sHandle({0}) {}

public:

  //Delete copy constructor and assignment operator
  QAD_RNG(const QAD_RNG& other) = delete;
  QAD_RNG& operator=(const QAD_RNG& other) = delete;

  //-----------------
  //Singleton Methods
  static QAD_RNG& get(void) {
  	static QAD_RNG instance;
  	return instance;
  }


  //----------------------
  //Initialization Methods
  static QA_Result init(void) {
  	return get().imp_init();
  }

  static void deinit(void) {
  	get().imp_deinit();
  }


  //------------
  //Data Methods
  static QA_InitState getInitState(void) {
  	return get().m_eInitState;
  }

  static uint32_t getValue(void) {
  	return get().imp_getValue();
  }

private:

  //----------------------
  //Initialization Methods
  QA_Result imp_init(void);
  void imp_deinit(void);


  //------------
  //Data Methods
  uint32_t imp_getValue(void);

};


//Prevent Recursive Inclusion
#endif /* __QAD_RNG_HPP_ */
